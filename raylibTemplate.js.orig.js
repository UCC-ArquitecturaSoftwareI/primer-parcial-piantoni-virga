// Copyright 2010 The Emscripten Authors.  All rights reserved.
// Emscripten is available under two separate licenses, the MIT license and the
// University of Illinois/NCSA Open Source License.  Both these licenses can be
// found in the LICENSE file.

// The Module object: Our interface to the outside world. We import
// and export values on it. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to check if Module already exists (e.g. case 3 above).
// Substitution will be replaced with actual code on later stage of the build,
// this way Closure Compiler will not mangle it (e.g. case 4. above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module = typeof Module !== 'undefined' ? Module : {};

// --pre-jses are emitted after the Module integration code, so that they can
// refer to Module (if they choose; they can also define Module)

if (!Module.expectedDataFileDownloads) {
  Module.expectedDataFileDownloads = 0;
  Module.finishedDataFileDownloads = 0;
}
Module.expectedDataFileDownloads++;
(function() {
 var loadPackage = function(metadata) {

    var PACKAGE_PATH;
    if (typeof window === 'object') {
      PACKAGE_PATH = window['encodeURIComponent'](window.location.pathname.toString().substring(0, window.location.pathname.toString().lastIndexOf('/')) + '/');
    } else if (typeof location !== 'undefined') {
      // worker
      PACKAGE_PATH = encodeURIComponent(location.pathname.toString().substring(0, location.pathname.toString().lastIndexOf('/')) + '/');
    } else {
      throw 'using preloaded data can only be done on a web page or in a web worker';
    }
    var PACKAGE_NAME = 'bin/raylibTemplate.data';
    var REMOTE_PACKAGE_BASE = 'raylibTemplate.data';
    if (typeof Module['locateFilePackage'] === 'function' && !Module['locateFile']) {
      Module['locateFile'] = Module['locateFilePackage'];
      err('warning: you defined Module.locateFilePackage, that has been renamed to Module.locateFile (using your locateFilePackage for now)');
    }
    var REMOTE_PACKAGE_NAME = Module['locateFile'] ? Module['locateFile'](REMOTE_PACKAGE_BASE, '') : REMOTE_PACKAGE_BASE;
  
    var REMOTE_PACKAGE_SIZE = metadata.remote_package_size;
    var PACKAGE_UUID = metadata.package_uuid;
  
    function fetchRemotePackage(packageName, packageSize, callback, errback) {
      var xhr = new XMLHttpRequest();
      xhr.open('GET', packageName, true);
      xhr.responseType = 'arraybuffer';
      xhr.onprogress = function(event) {
        var url = packageName;
        var size = packageSize;
        if (event.total) size = event.total;
        if (event.loaded) {
          if (!xhr.addedTotal) {
            xhr.addedTotal = true;
            if (!Module.dataFileDownloads) Module.dataFileDownloads = {};
            Module.dataFileDownloads[url] = {
              loaded: event.loaded,
              total: size
            };
          } else {
            Module.dataFileDownloads[url].loaded = event.loaded;
          }
          var total = 0;
          var loaded = 0;
          var num = 0;
          for (var download in Module.dataFileDownloads) {
          var data = Module.dataFileDownloads[download];
            total += data.total;
            loaded += data.loaded;
            num++;
          }
          total = Math.ceil(total * Module.expectedDataFileDownloads/num);
          if (Module['setStatus']) Module['setStatus']('Downloading data... (' + loaded + '/' + total + ')');
        } else if (!Module.dataFileDownloads) {
          if (Module['setStatus']) Module['setStatus']('Downloading data...');
        }
      };
      xhr.onerror = function(event) {
        throw new Error("NetworkError for: " + packageName);
      }
      xhr.onload = function(event) {
        if (xhr.status == 200 || xhr.status == 304 || xhr.status == 206 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
          var packageData = xhr.response;
          callback(packageData);
        } else {
          throw new Error(xhr.statusText + " : " + xhr.responseURL);
        }
      };
      xhr.send(null);
    };

    function handleError(error) {
      console.error('package error:', error);
    };
  
      var fetchedCallback = null;
      var fetched = Module['getPreloadedPackage'] ? Module['getPreloadedPackage'](REMOTE_PACKAGE_NAME, REMOTE_PACKAGE_SIZE) : null;

      if (!fetched) fetchRemotePackage(REMOTE_PACKAGE_NAME, REMOTE_PACKAGE_SIZE, function(data) {
        if (fetchedCallback) {
          fetchedCallback(data);
          fetchedCallback = null;
        } else {
          fetched = data;
        }
      }, handleError);
    
  function runWithFS() {

    function assert(check, msg) {
      if (!check) throw msg + new Error().stack;
    }
Module['FS_createPath']('/', 'resources', true, true);
Module['FS_createPath']('/resources', 'Map', true, true);
Module['FS_createPath']('/resources', 'Images', true, true);

    function DataRequest(start, end, audio) {
      this.start = start;
      this.end = end;
      this.audio = audio;
    }
    DataRequest.prototype = {
      requests: {},
      open: function(mode, name) {
        this.name = name;
        this.requests[name] = this;
        Module['addRunDependency']('fp ' + this.name);
      },
      send: function() {},
      onload: function() {
        var byteArray = this.byteArray.subarray(this.start, this.end);
        this.finish(byteArray);
      },
      finish: function(byteArray) {
        var that = this;

        Module['FS_createDataFile'](this.name, null, byteArray, true, true, true); // canOwn this data in the filesystem, it is a slide into the heap that will never change
        Module['removeRunDependency']('fp ' + that.name);

        this.requests[this.name] = null;
      }
    };

        var files = metadata.files;
        for (var i = 0; i < files.length; ++i) {
          new DataRequest(files[i].start, files[i].end, files[i].audio).open('GET', files[i].filename);
        }

  
    function processPackageData(arrayBuffer) {
      Module.finishedDataFileDownloads++;
      assert(arrayBuffer, 'Loading data file failed.');
      assert(arrayBuffer instanceof ArrayBuffer, 'bad input to processPackageData');
      var byteArray = new Uint8Array(arrayBuffer);
      var curr;
      
        // copy the entire loaded file into a spot in the heap. Files will refer to slices in that. They cannot be freed though
        // (we may be allocating before malloc is ready, during startup).
        var ptr = Module['getMemory'](byteArray.length);
        Module['HEAPU8'].set(byteArray, ptr);
        DataRequest.prototype.byteArray = Module['HEAPU8'].subarray(ptr, ptr+byteArray.length);
  
          var files = metadata.files;
          for (var i = 0; i < files.length; ++i) {
            DataRequest.prototype.requests[files[i].filename].onload();
          }
              Module['removeRunDependency']('datafile_bin/raylibTemplate.data');

    };
    Module['addRunDependency']('datafile_bin/raylibTemplate.data');
  
    if (!Module.preloadResults) Module.preloadResults = {};
  
      Module.preloadResults[PACKAGE_NAME] = {fromCache: false};
      if (fetched) {
        processPackageData(fetched);
        fetched = null;
      } else {
        fetchedCallback = processPackageData;
      }
    
  }
  if (Module['calledRun']) {
    runWithFS();
  } else {
    if (!Module['preRun']) Module['preRun'] = [];
    Module["preRun"].push(runWithFS); // FS is not initialized yet, wait for it
  }

 }
 loadPackage({"files": [{"start": 0, "audio": 1, "end": 2338920, "filename": "/resources/Cyberpunk Moonlight Sonata.mp3"}, {"start": 2338920, "audio": 0, "end": 2345068, "filename": "/resources/.DS_Store"}, {"start": 2345068, "audio": 0, "end": 2347025, "filename": "/resources/ship.png"}, {"start": 2347025, "audio": 0, "end": 2357718, "filename": "/resources/shell.html"}, {"start": 2357718, "audio": 0, "end": 2361662, "filename": "/resources/Map/mapa.json"}, {"start": 2361662, "audio": 0, "end": 2483659, "filename": "/resources/Map/platformIndustrial_sheet@2.png"}, {"start": 2483659, "audio": 0, "end": 2491608, "filename": "/resources/Images/Enemigo.png"}], "remote_package_size": 2491608, "package_uuid": "0616a36e-26af-4c7c-99f6-c8e3f40332e7"});

})();



// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
var key;
for (key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

var arguments_ = [];
var thisProgram = './this.program';
var quit_ = function(status, toThrow) {
  throw toThrow;
};

// Determine the runtime environment we are in. You can customize this by
// setting the ENVIRONMENT setting at compile time (see settings.js).

var ENVIRONMENT_IS_WEB = false;
var ENVIRONMENT_IS_WORKER = false;
var ENVIRONMENT_IS_NODE = false;
var ENVIRONMENT_HAS_NODE = false;
var ENVIRONMENT_IS_SHELL = false;
ENVIRONMENT_IS_WEB = typeof window === 'object';
ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
// A web environment like Electron.js can have Node enabled, so we must
// distinguish between Node-enabled environments and Node environments per se.
// This will allow the former to do things like mount NODEFS.
// Extended check using process.versions fixes issue #8816.
// (Also makes redundant the original check that 'require' is a function.)
ENVIRONMENT_HAS_NODE = typeof process === 'object' && typeof process.versions === 'object' && typeof process.versions.node === 'string';
ENVIRONMENT_IS_NODE = ENVIRONMENT_HAS_NODE && !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_WORKER;
ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;

if (Module['ENVIRONMENT']) {
  throw new Error('Module.ENVIRONMENT has been deprecated. To force the environment, use the ENVIRONMENT compile-time option (for example, -s ENVIRONMENT=web or -s ENVIRONMENT=node)');
}



// `/` should be present at the end if `scriptDirectory` is not empty
var scriptDirectory = '';
function locateFile(path) {
  if (Module['locateFile']) {
    return Module['locateFile'](path, scriptDirectory);
  }
  return scriptDirectory + path;
}

// Hooks that are implemented differently in different runtime environments.
var read_,
    readAsync,
    readBinary,
    setWindowTitle;

var nodeFS;
var nodePath;

if (ENVIRONMENT_IS_NODE) {
  scriptDirectory = __dirname + '/';


  read_ = function shell_read(filename, binary) {
    if (!nodeFS) nodeFS = require('fs');
    if (!nodePath) nodePath = require('path');
    filename = nodePath['normalize'](filename);
    return nodeFS['readFileSync'](filename, binary ? null : 'utf8');
  };

  readBinary = function readBinary(filename) {
    var ret = read_(filename, true);
    if (!ret.buffer) {
      ret = new Uint8Array(ret);
    }
    assert(ret.buffer);
    return ret;
  };




  if (process['argv'].length > 1) {
    thisProgram = process['argv'][1].replace(/\\/g, '/');
  }

  arguments_ = process['argv'].slice(2);

  if (typeof module !== 'undefined') {
    module['exports'] = Module;
  }

  process['on']('uncaughtException', function(ex) {
    // suppress ExitStatus exceptions from showing an error
    if (!(ex instanceof ExitStatus)) {
      throw ex;
    }
  });

  process['on']('unhandledRejection', abort);

  quit_ = function(status) {
    process['exit'](status);
  };

  Module['inspect'] = function () { return '[Emscripten Module object]'; };


} else
if (ENVIRONMENT_IS_SHELL) {


  if (typeof read != 'undefined') {
    read_ = function shell_read(f) {
      return read(f);
    };
  }

  readBinary = function readBinary(f) {
    var data;
    if (typeof readbuffer === 'function') {
      return new Uint8Array(readbuffer(f));
    }
    data = read(f, 'binary');
    assert(typeof data === 'object');
    return data;
  };

  if (typeof scriptArgs != 'undefined') {
    arguments_ = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    arguments_ = arguments;
  }

  if (typeof quit === 'function') {
    quit_ = function(status) {
      quit(status);
    };
  }

  if (typeof print !== 'undefined') {
    // Prefer to use print/printErr where they exist, as they usually work better.
    if (typeof console === 'undefined') console = {};
    console.log = print;
    console.warn = console.error = typeof printErr !== 'undefined' ? printErr : print;
  }
} else

// Note that this includes Node.js workers when relevant (pthreads is enabled).
// Node.js workers are detected as a combination of ENVIRONMENT_IS_WORKER and
// ENVIRONMENT_HAS_NODE.
if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  if (ENVIRONMENT_IS_WORKER) { // Check worker, not web, since window could be polyfilled
    scriptDirectory = self.location.href;
  } else if (document.currentScript) { // web
    scriptDirectory = document.currentScript.src;
  }
  // blob urls look like blob:http://site.com/etc/etc and we cannot infer anything from them.
  // otherwise, slice off the final part of the url to find the script directory.
  // if scriptDirectory does not contain a slash, lastIndexOf will return -1,
  // and scriptDirectory will correctly be replaced with an empty string.
  if (scriptDirectory.indexOf('blob:') !== 0) {
    scriptDirectory = scriptDirectory.substr(0, scriptDirectory.lastIndexOf('/')+1);
  } else {
    scriptDirectory = '';
  }


  // Differentiate the Web Worker from the Node Worker case, as reading must
  // be done differently.
  {


  read_ = function shell_read(url) {
      var xhr = new XMLHttpRequest();
      xhr.open('GET', url, false);
      xhr.send(null);
      return xhr.responseText;
  };

  if (ENVIRONMENT_IS_WORKER) {
    readBinary = function readBinary(url) {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, false);
        xhr.responseType = 'arraybuffer';
        xhr.send(null);
        return new Uint8Array(xhr.response);
    };
  }

  readAsync = function readAsync(url, onload, onerror) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, true);
    xhr.responseType = 'arraybuffer';
    xhr.onload = function xhr_onload() {
      if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
        onload(xhr.response);
        return;
      }
      onerror();
    };
    xhr.onerror = onerror;
    xhr.send(null);
  };




  }

  setWindowTitle = function(title) { document.title = title };
} else
{
  throw new Error('environment detection error');
}


// Set up the out() and err() hooks, which are how we can print to stdout or
// stderr, respectively.
var out = Module['print'] || console.log.bind(console);
var err = Module['printErr'] || console.warn.bind(console);

// Merge back in the overrides
for (key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}
// Free the object hierarchy contained in the overrides, this lets the GC
// reclaim data used e.g. in memoryInitializerRequest, which is a large typed array.
moduleOverrides = null;

// Emit code to handle expected values on the Module object. This applies Module.x
// to the proper local x. This has two benefits: first, we only emit it if it is
// expected to arrive, and second, by using a local everywhere else that can be
// minified.
if (Module['arguments']) arguments_ = Module['arguments'];if (!Object.getOwnPropertyDescriptor(Module, 'arguments')) Object.defineProperty(Module, 'arguments', { configurable: true, get: function() { abort('Module.arguments has been replaced with plain arguments_') } });
if (Module['thisProgram']) thisProgram = Module['thisProgram'];if (!Object.getOwnPropertyDescriptor(Module, 'thisProgram')) Object.defineProperty(Module, 'thisProgram', { configurable: true, get: function() { abort('Module.thisProgram has been replaced with plain thisProgram') } });
if (Module['quit']) quit_ = Module['quit'];if (!Object.getOwnPropertyDescriptor(Module, 'quit')) Object.defineProperty(Module, 'quit', { configurable: true, get: function() { abort('Module.quit has been replaced with plain quit_') } });

// perform assertions in shell.js after we set up out() and err(), as otherwise if an assertion fails it cannot print the message
// Assertions on removed incoming Module JS APIs.
assert(typeof Module['memoryInitializerPrefixURL'] === 'undefined', 'Module.memoryInitializerPrefixURL option was removed, use Module.locateFile instead');
assert(typeof Module['pthreadMainPrefixURL'] === 'undefined', 'Module.pthreadMainPrefixURL option was removed, use Module.locateFile instead');
assert(typeof Module['cdInitializerPrefixURL'] === 'undefined', 'Module.cdInitializerPrefixURL option was removed, use Module.locateFile instead');
assert(typeof Module['filePackagePrefixURL'] === 'undefined', 'Module.filePackagePrefixURL option was removed, use Module.locateFile instead');
assert(typeof Module['read'] === 'undefined', 'Module.read option was removed (modify read_ in JS)');
assert(typeof Module['readAsync'] === 'undefined', 'Module.readAsync option was removed (modify readAsync in JS)');
assert(typeof Module['readBinary'] === 'undefined', 'Module.readBinary option was removed (modify readBinary in JS)');
assert(typeof Module['setWindowTitle'] === 'undefined', 'Module.setWindowTitle option was removed (modify setWindowTitle in JS)');
if (!Object.getOwnPropertyDescriptor(Module, 'read')) Object.defineProperty(Module, 'read', { configurable: true, get: function() { abort('Module.read has been replaced with plain read_') } });
if (!Object.getOwnPropertyDescriptor(Module, 'readAsync')) Object.defineProperty(Module, 'readAsync', { configurable: true, get: function() { abort('Module.readAsync has been replaced with plain readAsync') } });
if (!Object.getOwnPropertyDescriptor(Module, 'readBinary')) Object.defineProperty(Module, 'readBinary', { configurable: true, get: function() { abort('Module.readBinary has been replaced with plain readBinary') } });
// TODO: add when SDL2 is fixed if (!Object.getOwnPropertyDescriptor(Module, 'setWindowTitle')) Object.defineProperty(Module, 'setWindowTitle', { configurable: true, get: function() { abort('Module.setWindowTitle has been replaced with plain setWindowTitle') } });
var IDBFS = 'IDBFS is no longer included by default; build with -lidbfs.js';
var PROXYFS = 'PROXYFS is no longer included by default; build with -lproxyfs.js';
var WORKERFS = 'WORKERFS is no longer included by default; build with -lworkerfs.js';
var NODEFS = 'NODEFS is no longer included by default; build with -lnodefs.js';


// TODO remove when SDL2 is fixed (also see above)



// Copyright 2017 The Emscripten Authors.  All rights reserved.
// Emscripten is available under two separate licenses, the MIT license and the
// University of Illinois/NCSA Open Source License.  Both these licenses can be
// found in the LICENSE file.

// {{PREAMBLE_ADDITIONS}}

var STACK_ALIGN = 16;

// stack management, and other functionality that is provided by the compiled code,
// should not be used before it is ready
stackSave = stackRestore = stackAlloc = function() {
  abort('cannot use the stack before compiled code is ready to run, and has provided stack access');
};

function staticAlloc(size) {
  abort('staticAlloc is no longer available at runtime; instead, perform static allocations at compile time (using makeStaticAlloc)');
}

function dynamicAlloc(size) {
  assert(DYNAMICTOP_PTR);
  var ret = HEAP32[DYNAMICTOP_PTR>>2];
  var end = (ret + size + 15) & -16;
  if (end > _emscripten_get_heap_size()) {
    abort('failure to dynamicAlloc - memory growth etc. is not supported there, call malloc/sbrk directly');
  }
  HEAP32[DYNAMICTOP_PTR>>2] = end;
  return ret;
}

function alignMemory(size, factor) {
  if (!factor) factor = STACK_ALIGN; // stack alignment (16-byte) by default
  return Math.ceil(size / factor) * factor;
}

function getNativeTypeSize(type) {
  switch (type) {
    case 'i1': case 'i8': return 1;
    case 'i16': return 2;
    case 'i32': return 4;
    case 'i64': return 8;
    case 'float': return 4;
    case 'double': return 8;
    default: {
      if (type[type.length-1] === '*') {
        return 4; // A pointer
      } else if (type[0] === 'i') {
        var bits = parseInt(type.substr(1));
        assert(bits % 8 === 0, 'getNativeTypeSize invalid bits ' + bits + ', type ' + type);
        return bits / 8;
      } else {
        return 0;
      }
    }
  }
}

function warnOnce(text) {
  if (!warnOnce.shown) warnOnce.shown = {};
  if (!warnOnce.shown[text]) {
    warnOnce.shown[text] = 1;
    err(text);
  }
}

var asm2wasmImports = { // special asm2wasm imports
    "f64-rem": function(x, y) {
        return x % y;
    },
    "debugger": function() {
        debugger;
    }
};



var jsCallStartIndex = 1;
var functionPointers = new Array(0);

// Wraps a JS function as a wasm function with a given signature.
function convertJsFunctionToWasm(func, sig) {

  // If the type reflection proposal is available, use the new
  // "WebAssembly.Function" constructor.
  // Otherwise, construct a minimal wasm module importing the JS function and
  // re-exporting it.
  if (typeof WebAssembly.Function === "function") {
    var typeNames = {
      'i': 'i32',
      'j': 'i64',
      'f': 'f32',
      'd': 'f64'
    };
    var type = {
      parameters: [],
      results: sig[0] == 'v' ? [] : [typeNames[sig[0]]]
    };
    for (var i = 1; i < sig.length; ++i) {
      type.parameters.push(typeNames[sig[i]]);
    }
    return new WebAssembly.Function(type, func);
  }

  // The module is static, with the exception of the type section, which is
  // generated based on the signature passed in.
  var typeSection = [
    0x01, // id: section,
    0x00, // length: 0 (placeholder)
    0x01, // count: 1
    0x60, // form: func
  ];
  var sigRet = sig.slice(0, 1);
  var sigParam = sig.slice(1);
  var typeCodes = {
    'i': 0x7f, // i32
    'j': 0x7e, // i64
    'f': 0x7d, // f32
    'd': 0x7c, // f64
  };

  // Parameters, length + signatures
  typeSection.push(sigParam.length);
  for (var i = 0; i < sigParam.length; ++i) {
    typeSection.push(typeCodes[sigParam[i]]);
  }

  // Return values, length + signatures
  // With no multi-return in MVP, either 0 (void) or 1 (anything else)
  if (sigRet == 'v') {
    typeSection.push(0x00);
  } else {
    typeSection = typeSection.concat([0x01, typeCodes[sigRet]]);
  }

  // Write the overall length of the type section back into the section header
  // (excepting the 2 bytes for the section id and length)
  typeSection[1] = typeSection.length - 2;

  // Rest of the module is static
  var bytes = new Uint8Array([
    0x00, 0x61, 0x73, 0x6d, // magic ("\0asm")
    0x01, 0x00, 0x00, 0x00, // version: 1
  ].concat(typeSection, [
    0x02, 0x07, // import section
      // (import "e" "f" (func 0 (type 0)))
      0x01, 0x01, 0x65, 0x01, 0x66, 0x00, 0x00,
    0x07, 0x05, // export section
      // (export "f" (func 0 (type 0)))
      0x01, 0x01, 0x66, 0x00, 0x00,
  ]));

   // We can compile this wasm module synchronously because it is very small.
  // This accepts an import (at "e.f"), that it reroutes to an export (at "f")
  var module = new WebAssembly.Module(bytes);
  var instance = new WebAssembly.Instance(module, {
    'e': {
      'f': func
    }
  });
  var wrappedFunc = instance.exports['f'];
  return wrappedFunc;
}

// Add a wasm function to the table.
function addFunctionWasm(func, sig) {
  var table = wasmTable;
  var ret = table.length;

  // Grow the table
  try {
    table.grow(1);
  } catch (err) {
    if (!err instanceof RangeError) {
      throw err;
    }
    throw 'Unable to grow wasm table. Use a higher value for RESERVED_FUNCTION_POINTERS or set ALLOW_TABLE_GROWTH.';
  }

  // Insert new element
  try {
    // Attempting to call this with JS function will cause of table.set() to fail
    table.set(ret, func);
  } catch (err) {
    if (!err instanceof TypeError) {
      throw err;
    }
    assert(typeof sig !== 'undefined', 'Missing signature argument to addFunction');
    var wrapped = convertJsFunctionToWasm(func, sig);
    table.set(ret, wrapped);
  }

  return ret;
}

function removeFunctionWasm(index) {
  // TODO(sbc): Look into implementing this to allow re-using of table slots
}

// 'sig' parameter is required for the llvm backend but only when func is not
// already a WebAssembly function.
function addFunction(func, sig) {
  assert(typeof func !== 'undefined');


  var base = 0;
  for (var i = base; i < base + 0; i++) {
    if (!functionPointers[i]) {
      functionPointers[i] = func;
      return jsCallStartIndex + i;
    }
  }
  throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';

}

function removeFunction(index) {

  functionPointers[index-jsCallStartIndex] = null;
}

var funcWrappers = {};

function getFuncWrapper(func, sig) {
  if (!func) return; // on null pointer, return undefined
  assert(sig);
  if (!funcWrappers[sig]) {
    funcWrappers[sig] = {};
  }
  var sigCache = funcWrappers[sig];
  if (!sigCache[func]) {
    // optimize away arguments usage in common cases
    if (sig.length === 1) {
      sigCache[func] = function dynCall_wrapper() {
        return dynCall(sig, func);
      };
    } else if (sig.length === 2) {
      sigCache[func] = function dynCall_wrapper(arg) {
        return dynCall(sig, func, [arg]);
      };
    } else {
      // general case
      sigCache[func] = function dynCall_wrapper() {
        return dynCall(sig, func, Array.prototype.slice.call(arguments));
      };
    }
  }
  return sigCache[func];
}


function makeBigInt(low, high, unsigned) {
  return unsigned ? ((+((low>>>0)))+((+((high>>>0)))*4294967296.0)) : ((+((low>>>0)))+((+((high|0)))*4294967296.0));
}

function dynCall(sig, ptr, args) {
  if (args && args.length) {
    assert(args.length == sig.length-1);
    assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
    return Module['dynCall_' + sig].apply(null, [ptr].concat(args));
  } else {
    assert(sig.length == 1);
    assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
    return Module['dynCall_' + sig].call(null, ptr);
  }
}

var tempRet0 = 0;

var setTempRet0 = function(value) {
  tempRet0 = value;
};

var getTempRet0 = function() {
  return tempRet0;
};

function getCompilerSetting(name) {
  throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for getCompilerSetting or emscripten_get_compiler_setting to work';
}

var Runtime = {
  // helpful errors
  getTempRet0: function() { abort('getTempRet0() is now a top-level function, after removing the Runtime object. Remove "Runtime."') },
  staticAlloc: function() { abort('staticAlloc() is now a top-level function, after removing the Runtime object. Remove "Runtime."') },
  stackAlloc: function() { abort('stackAlloc() is now a top-level function, after removing the Runtime object. Remove "Runtime."') },
};

// The address globals begin at. Very low in memory, for code size and optimization opportunities.
// Above 0 is static memory, starting with globals.
// Then the stack.
// Then 'dynamic' memory for sbrk.
var GLOBAL_BASE = 1024;




// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in:
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at:
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html


var wasmBinary;if (Module['wasmBinary']) wasmBinary = Module['wasmBinary'];if (!Object.getOwnPropertyDescriptor(Module, 'wasmBinary')) Object.defineProperty(Module, 'wasmBinary', { configurable: true, get: function() { abort('Module.wasmBinary has been replaced with plain wasmBinary') } });
var noExitRuntime;if (Module['noExitRuntime']) noExitRuntime = Module['noExitRuntime'];if (!Object.getOwnPropertyDescriptor(Module, 'noExitRuntime')) Object.defineProperty(Module, 'noExitRuntime', { configurable: true, get: function() { abort('Module.noExitRuntime has been replaced with plain noExitRuntime') } });


if (typeof WebAssembly !== 'object') {
  abort('No WebAssembly support found. Build with -s WASM=0 to target JavaScript instead.');
}


// In MINIMAL_RUNTIME, setValue() and getValue() are only available when building with safe heap enabled, for heap safety checking.
// In traditional runtime, setValue() and getValue() are always available (although their use is highly discouraged due to perf penalties)

/** @type {function(number, number, string, boolean=)} */
function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[((ptr)>>0)]=value; break;
      case 'i8': HEAP8[((ptr)>>0)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= (+1) ? (tempDouble > (+0) ? ((Math_min((+(Math_floor((tempDouble)/(+4294967296)))), (+4294967295)))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/(+4294967296))))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}

/** @type {function(number, string, boolean=)} */
function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for getValue: ' + type);
    }
  return null;
}





// Wasm globals

var wasmMemory;

// In fastcomp asm.js, we don't need a wasm Table at all.
// In the wasm backend, we polyfill the WebAssembly object,
// so this creates a (non-native-wasm) table for us.
var wasmTable = new WebAssembly.Table({
  'initial': 994,
  'maximum': 994,
  'element': 'anyfunc'
});


//========================================
// Runtime essentials
//========================================

// whether we are quitting the application. no code should run after this.
// set in exit() and abort()
var ABORT = false;

// set by exit() and abort().  Passed to 'onExit' handler.
// NOTE: This is also used as the process return code code in shell environments
// but only when noExitRuntime is false.
var EXITSTATUS = 0;

/** @type {function(*, string=)} */
function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  var func = Module['_' + ident]; // closure exported function
  assert(func, 'Cannot call unknown function ' + ident + ', make sure it is exported');
  return func;
}

// C calling interface.
function ccall(ident, returnType, argTypes, args, opts) {
  // For fast lookup of conversion functions
  var toC = {
    'string': function(str) {
      var ret = 0;
      if (str !== null && str !== undefined && str !== 0) { // null string
        // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
        var len = (str.length << 2) + 1;
        ret = stackAlloc(len);
        stringToUTF8(str, ret, len);
      }
      return ret;
    },
    'array': function(arr) {
      var ret = stackAlloc(arr.length);
      writeArrayToMemory(arr, ret);
      return ret;
    }
  };

  function convertReturnValue(ret) {
    if (returnType === 'string') return UTF8ToString(ret);
    if (returnType === 'boolean') return Boolean(ret);
    return ret;
  }

  var func = getCFunc(ident);
  var cArgs = [];
  var stack = 0;
  assert(returnType !== 'array', 'Return type should not be "array".');
  if (args) {
    for (var i = 0; i < args.length; i++) {
      var converter = toC[argTypes[i]];
      if (converter) {
        if (stack === 0) stack = stackSave();
        cArgs[i] = converter(args[i]);
      } else {
        cArgs[i] = args[i];
      }
    }
  }
  var ret = func.apply(null, cArgs);
  if (typeof EmterpreterAsync === 'object' && EmterpreterAsync.state) {
    assert(opts && opts.async, 'The call to ' + ident + ' is running asynchronously. If this was intended, add the async option to the ccall/cwrap call.');
    assert(!EmterpreterAsync.restartFunc, 'Cannot have multiple async ccalls in flight at once');
    return new Promise(function(resolve) {
      EmterpreterAsync.restartFunc = func;
      EmterpreterAsync.asyncFinalizers.push(function(ret) {
        if (stack !== 0) stackRestore(stack);
        resolve(convertReturnValue(ret));
      });
    });
  }

  ret = convertReturnValue(ret);
  if (stack !== 0) stackRestore(stack);
  // If this is an async ccall, ensure we return a promise
  if (opts && opts.async) return Promise.resolve(ret);
  return ret;
}

function cwrap(ident, returnType, argTypes, opts) {
  return function() {
    return ccall(ident, returnType, argTypes, arguments, opts);
  }
}

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_DYNAMIC = 2; // Cannot be freed except through sbrk
var ALLOC_NONE = 3; // Do not allocate

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
/** @type {function((TypedArray|Array<number>|number), string, number, number=)} */
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [_malloc,
    stackAlloc,
    dynamicAlloc][allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var stop;
    ptr = ret;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)>>0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(/** @type {!Uint8Array} */ (slab), ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }
    assert(type, 'Must know what type to store in allocate!');

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}

// Allocate memory during any stage of startup - static memory early on, dynamic memory later, malloc when ready
function getMemory(size) {
  if (!runtimeInitialized) return dynamicAlloc(size);
  return _malloc(size);
}




/** @type {function(number, number=)} */
function Pointer_stringify(ptr, length) {
  abort("this function has been removed - you should use UTF8ToString(ptr, maxBytesToRead) instead!");
}

// Given a pointer 'ptr' to a null-terminated ASCII-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function AsciiToString(ptr) {
  var str = '';
  while (1) {
    var ch = HEAPU8[((ptr++)>>0)];
    if (!ch) return str;
    str += String.fromCharCode(ch);
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in ASCII form. The copy will require at most str.length+1 bytes of space in the HEAP.

function stringToAscii(str, outPtr) {
  return writeAsciiToMemory(str, outPtr, false);
}


// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the given array that contains uint8 values, returns
// a copy of that string as a Javascript String object.

var UTF8Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf8') : undefined;

/**
 * @param {number} idx
 * @param {number=} maxBytesToRead
 * @return {string}
 */
function UTF8ArrayToString(u8Array, idx, maxBytesToRead) {
  var endIdx = idx + maxBytesToRead;
  var endPtr = idx;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  // (As a tiny code save trick, compare endPtr against endIdx using a negation, so that undefined means Infinity)
  while (u8Array[endPtr] && !(endPtr >= endIdx)) ++endPtr;

  if (endPtr - idx > 16 && u8Array.subarray && UTF8Decoder) {
    return UTF8Decoder.decode(u8Array.subarray(idx, endPtr));
  } else {
    var str = '';
    // If building with TextDecoder, we have already computed the string length above, so test loop end condition against that
    while (idx < endPtr) {
      // For UTF8 byte structure, see:
      // http://en.wikipedia.org/wiki/UTF-8#Description
      // https://www.ietf.org/rfc/rfc2279.txt
      // https://tools.ietf.org/html/rfc3629
      var u0 = u8Array[idx++];
      if (!(u0 & 0x80)) { str += String.fromCharCode(u0); continue; }
      var u1 = u8Array[idx++] & 63;
      if ((u0 & 0xE0) == 0xC0) { str += String.fromCharCode(((u0 & 31) << 6) | u1); continue; }
      var u2 = u8Array[idx++] & 63;
      if ((u0 & 0xF0) == 0xE0) {
        u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;
      } else {
        if ((u0 & 0xF8) != 0xF0) warnOnce('Invalid UTF-8 leading byte 0x' + u0.toString(16) + ' encountered when deserializing a UTF-8 string on the asm.js/wasm heap to a JS string!');
        u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | (u8Array[idx++] & 63);
      }

      if (u0 < 0x10000) {
        str += String.fromCharCode(u0);
      } else {
        var ch = u0 - 0x10000;
        str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
      }
    }
  }
  return str;
}

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the emscripten HEAP, returns a
// copy of that string as a Javascript String object.
// maxBytesToRead: an optional length that specifies the maximum number of bytes to read. You can omit
//                 this parameter to scan the string until the first \0 byte. If maxBytesToRead is
//                 passed, and the string at [ptr, ptr+maxBytesToReadr[ contains a null byte in the
//                 middle, then the string will cut short at that byte index (i.e. maxBytesToRead will
//                 not produce a string of exact length [ptr, ptr+maxBytesToRead[)
//                 N.B. mixing frequent uses of UTF8ToString() with and without maxBytesToRead may
//                 throw JS JIT optimizations off, so it is worth to consider consistently using one
//                 style or the other.
/**
 * @param {number} ptr
 * @param {number=} maxBytesToRead
 * @return {string}
 */
function UTF8ToString(ptr, maxBytesToRead) {
  return ptr ? UTF8ArrayToString(HEAPU8, ptr, maxBytesToRead) : '';
}

// Copies the given Javascript String object 'str' to the given byte array at address 'outIdx',
// encoded in UTF8 form and null-terminated. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outU8Array: the array to copy to. Each index in this array is assumed to be one 8-byte element.
//   outIdx: The starting offset in the array to begin the copying.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array.
//                    This count should include the null terminator,
//                    i.e. if maxBytesToWrite=1, only the null terminator will be written and nothing else.
//                    maxBytesToWrite=0 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8Array(str, outU8Array, outIdx, maxBytesToWrite) {
  if (!(maxBytesToWrite > 0)) // Parameter maxBytesToWrite is not optional. Negative values, 0, null, undefined and false each don't write out any bytes.
    return 0;

  var startIdx = outIdx;
  var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) {
      var u1 = str.charCodeAt(++i);
      u = 0x10000 + ((u & 0x3FF) << 10) | (u1 & 0x3FF);
    }
    if (u <= 0x7F) {
      if (outIdx >= endIdx) break;
      outU8Array[outIdx++] = u;
    } else if (u <= 0x7FF) {
      if (outIdx + 1 >= endIdx) break;
      outU8Array[outIdx++] = 0xC0 | (u >> 6);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0xFFFF) {
      if (outIdx + 2 >= endIdx) break;
      outU8Array[outIdx++] = 0xE0 | (u >> 12);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else {
      if (outIdx + 3 >= endIdx) break;
      if (u >= 0x200000) warnOnce('Invalid Unicode code point 0x' + u.toString(16) + ' encountered when serializing a JS string to an UTF-8 string on the asm.js/wasm heap! (Valid unicode code points should be in range 0-0x1FFFFF).');
      outU8Array[outIdx++] = 0xF0 | (u >> 18);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    }
  }
  // Null-terminate the pointer to the buffer.
  outU8Array[outIdx] = 0;
  return outIdx - startIdx;
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF8 form. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF8(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  return stringToUTF8Array(str, HEAPU8,outPtr, maxBytesToWrite);
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF8 byte array, EXCLUDING the null terminator byte.
function lengthBytesUTF8(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) ++len;
    else if (u <= 0x7FF) len += 2;
    else if (u <= 0xFFFF) len += 3;
    else len += 4;
  }
  return len;
}


// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

var UTF16Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf-16le') : undefined;
function UTF16ToString(ptr) {
  assert(ptr % 2 == 0, 'Pointer passed to UTF16ToString must be aligned to two bytes!');
  var endPtr = ptr;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  var idx = endPtr >> 1;
  while (HEAP16[idx]) ++idx;
  endPtr = idx << 1;

  if (endPtr - ptr > 32 && UTF16Decoder) {
    return UTF16Decoder.decode(HEAPU8.subarray(ptr, endPtr));
  } else {
    var i = 0;

    var str = '';
    while (1) {
      var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
      if (codeUnit == 0) return str;
      ++i;
      // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
      str += String.fromCharCode(codeUnit);
    }
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16 form. The copy will require at most str.length*4+2 bytes of space in the HEAP.
// Use the function lengthBytesUTF16() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=2, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<2 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF16(str, outPtr, maxBytesToWrite) {
  assert(outPtr % 2 == 0, 'Pointer passed to stringToUTF16 must be aligned to two bytes!');
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF16(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 2) return 0;
  maxBytesToWrite -= 2; // Null terminator.
  var startPtr = outPtr;
  var numCharsToWrite = (maxBytesToWrite < str.length*2) ? (maxBytesToWrite / 2) : str.length;
  for (var i = 0; i < numCharsToWrite; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[((outPtr)>>1)]=codeUnit;
    outPtr += 2;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[((outPtr)>>1)]=0;
  return outPtr - startPtr;
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF16(str) {
  return str.length*2;
}

function UTF32ToString(ptr) {
  assert(ptr % 4 == 0, 'Pointer passed to UTF32ToString must be aligned to four bytes!');
  var i = 0;

  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32 form. The copy will require at most str.length*4+4 bytes of space in the HEAP.
// Use the function lengthBytesUTF32() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=4, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<4 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF32(str, outPtr, maxBytesToWrite) {
  assert(outPtr % 4 == 0, 'Pointer passed to stringToUTF32 must be aligned to four bytes!');
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF32(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 4) return 0;
  var startPtr = outPtr;
  var endPtr = startPtr + maxBytesToWrite - 4;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++i);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[((outPtr)>>2)]=codeUnit;
    outPtr += 4;
    if (outPtr + 4 > endPtr) break;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[((outPtr)>>2)]=0;
  return outPtr - startPtr;
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF32(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i);
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) ++i; // possibly a lead surrogate, so skip over the tail surrogate.
    len += 4;
  }

  return len;
}

// Allocate heap space for a JS string, and write it there.
// It is the responsibility of the caller to free() that memory.
function allocateUTF8(str) {
  var size = lengthBytesUTF8(str) + 1;
  var ret = _malloc(size);
  if (ret) stringToUTF8Array(str, HEAP8, ret, size);
  return ret;
}

// Allocate stack space for a JS string, and write it there.
function allocateUTF8OnStack(str) {
  var size = lengthBytesUTF8(str) + 1;
  var ret = stackAlloc(size);
  stringToUTF8Array(str, HEAP8, ret, size);
  return ret;
}

// Deprecated: This function should not be called because it is unsafe and does not provide
// a maximum length limit of how many bytes it is allowed to write. Prefer calling the
// function stringToUTF8Array() instead, which takes in a maximum length that can be used
// to be secure from out of bounds writes.
/** @deprecated */
function writeStringToMemory(string, buffer, dontAddNull) {
  warnOnce('writeStringToMemory is deprecated and should not be called! Use stringToUTF8() instead!');

  var /** @type {number} */ lastChar, /** @type {number} */ end;
  if (dontAddNull) {
    // stringToUTF8Array always appends null. If we don't want to do that, remember the
    // character that existed at the location where the null will be placed, and restore
    // that after the write (below).
    end = buffer + lengthBytesUTF8(string);
    lastChar = HEAP8[end];
  }
  stringToUTF8(string, buffer, Infinity);
  if (dontAddNull) HEAP8[end] = lastChar; // Restore the value under the null character.
}

function writeArrayToMemory(array, buffer) {
  assert(array.length >= 0, 'writeArrayToMemory array must have a length (should be an array or typed array)')
  HEAP8.set(array, buffer);
}

function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; ++i) {
    assert(str.charCodeAt(i) === str.charCodeAt(i)&0xff);
    HEAP8[((buffer++)>>0)]=str.charCodeAt(i);
  }
  // Null-terminate the pointer to the HEAP.
  if (!dontAddNull) HEAP8[((buffer)>>0)]=0;
}




// Memory management

var PAGE_SIZE = 16384;
var WASM_PAGE_SIZE = 65536;
var ASMJS_PAGE_SIZE = 16777216;

function alignUp(x, multiple) {
  if (x % multiple > 0) {
    x += multiple - (x % multiple);
  }
  return x;
}

var HEAP,
/** @type {ArrayBuffer} */
  buffer,
/** @type {Int8Array} */
  HEAP8,
/** @type {Uint8Array} */
  HEAPU8,
/** @type {Int16Array} */
  HEAP16,
/** @type {Uint16Array} */
  HEAPU16,
/** @type {Int32Array} */
  HEAP32,
/** @type {Uint32Array} */
  HEAPU32,
/** @type {Float32Array} */
  HEAPF32,
/** @type {Float64Array} */
  HEAPF64;

function updateGlobalBufferAndViews(buf) {
  buffer = buf;
  Module['HEAP8'] = HEAP8 = new Int8Array(buf);
  Module['HEAP16'] = HEAP16 = new Int16Array(buf);
  Module['HEAP32'] = HEAP32 = new Int32Array(buf);
  Module['HEAPU8'] = HEAPU8 = new Uint8Array(buf);
  Module['HEAPU16'] = HEAPU16 = new Uint16Array(buf);
  Module['HEAPU32'] = HEAPU32 = new Uint32Array(buf);
  Module['HEAPF32'] = HEAPF32 = new Float32Array(buf);
  Module['HEAPF64'] = HEAPF64 = new Float64Array(buf);
}

var STATIC_BASE = 1024,
    STACK_BASE = 63392,
    STACKTOP = STACK_BASE,
    STACK_MAX = 5306272,
    DYNAMIC_BASE = 5306272,
    DYNAMICTOP_PTR = 63200;

assert(STACK_BASE % 16 === 0, 'stack must start aligned');
assert(DYNAMIC_BASE % 16 === 0, 'heap must start aligned');


function abortStackOverflowEmterpreter() {
  abort("Emterpreter stack overflow! Decrease the recursion level or increase EMT_STACK_MAX in tools/emterpretify.py (current value " + EMT_STACK_MAX + ").");
}

var TOTAL_STACK = 5242880;
if (Module['TOTAL_STACK']) assert(TOTAL_STACK === Module['TOTAL_STACK'], 'the stack size can no longer be determined at runtime')

var INITIAL_TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 16777216;if (!Object.getOwnPropertyDescriptor(Module, 'TOTAL_MEMORY')) Object.defineProperty(Module, 'TOTAL_MEMORY', { configurable: true, get: function() { abort('Module.TOTAL_MEMORY has been replaced with plain INITIAL_TOTAL_MEMORY') } });

assert(INITIAL_TOTAL_MEMORY >= TOTAL_STACK, 'TOTAL_MEMORY should be larger than TOTAL_STACK, was ' + INITIAL_TOTAL_MEMORY + '! (TOTAL_STACK=' + TOTAL_STACK + ')');

// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && Int32Array.prototype.subarray !== undefined && Int32Array.prototype.set !== undefined,
       'JS engine does not provide full typed array support');






// In standalone mode, the wasm creates the memory, and the user can't provide it.
// In non-standalone/normal mode, we create the memory here.

// Create the main memory. (Note: this isn't used in STANDALONE_WASM mode since the wasm
// memory is created in the wasm, not in JS.)

  if (Module['wasmMemory']) {
    wasmMemory = Module['wasmMemory'];
  } else
  {
    wasmMemory = new WebAssembly.Memory({
      'initial': INITIAL_TOTAL_MEMORY / WASM_PAGE_SIZE
      ,
      'maximum': INITIAL_TOTAL_MEMORY / WASM_PAGE_SIZE
    });
  }


if (wasmMemory) {
  buffer = wasmMemory.buffer;
}

// If the user provides an incorrect length, just use that length instead rather than providing the user to
// specifically provide the memory length with Module['TOTAL_MEMORY'].
INITIAL_TOTAL_MEMORY = buffer.byteLength;
assert(INITIAL_TOTAL_MEMORY % WASM_PAGE_SIZE === 0);
updateGlobalBufferAndViews(buffer);

HEAP32[DYNAMICTOP_PTR>>2] = DYNAMIC_BASE;




// Initializes the stack cookie. Called at the startup of main and at the startup of each thread in pthreads mode.
function writeStackCookie() {
  assert((STACK_MAX & 3) == 0);
  HEAPU32[(STACK_MAX >> 2)-1] = 0x02135467;
  HEAPU32[(STACK_MAX >> 2)-2] = 0x89BACDFE;
  // Also test the global address 0 for integrity.
  // We don't do this with ASan because ASan does its own checks for this.
  HEAP32[0] = 0x63736d65; /* 'emsc' */
}

function checkStackCookie() {
  var cookie1 = HEAPU32[(STACK_MAX >> 2)-1];
  var cookie2 = HEAPU32[(STACK_MAX >> 2)-2];
  if (cookie1 != 0x02135467 || cookie2 != 0x89BACDFE) {
    abort('Stack overflow! Stack cookie has been overwritten, expected hex dwords 0x89BACDFE and 0x02135467, but received 0x' + cookie2.toString(16) + ' ' + cookie1.toString(16));
  }
  // Also test the global address 0 for integrity.
  // We don't do this with ASan because ASan does its own checks for this.
  if (HEAP32[0] !== 0x63736d65 /* 'emsc' */) abort('Runtime error: The application has corrupted its heap memory area (address zero)!');
}

function abortStackOverflow(allocSize) {
  abort('Stack overflow! Attempted to allocate ' + allocSize + ' bytes on the stack, but stack has only ' + (STACK_MAX - stackSave() + allocSize) + ' bytes available!');
}




// Endianness check (note: assumes compiler arch was little-endian)
(function() {
  var h16 = new Int16Array(1);
  var h8 = new Int8Array(h16.buffer);
  h16[0] = 0x6373;
  if (h8[0] !== 0x73 || h8[1] !== 0x63) throw 'Runtime error: expected the system to be little-endian!';
})();

function abortFnPtrError(ptr, sig) {
	abort("Invalid function pointer " + ptr + " called with signature '" + sig + "'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this). Build with ASSERTIONS=2 for more info.");
}



function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Module['dynCall_v'](func);
      } else {
        Module['dynCall_vi'](func, callback.arg);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the main() is called

var runtimeInitialized = false;
var runtimeExited = false;


function preRun() {

  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }

  callRuntimeCallbacks(__ATPRERUN__);
}

function initRuntime() {
  checkStackCookie();
  assert(!runtimeInitialized);
  runtimeInitialized = true;
  if (!Module["noFSInit"] && !FS.init.initialized) FS.init();
TTY.init();
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  checkStackCookie();
  FS.ignorePermissions = false;
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  checkStackCookie();
  runtimeExited = true;
}

function postRun() {
  checkStackCookie();

  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }

  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}

function addOnExit(cb) {
}

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}

function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}


assert(Math.imul, 'This browser does not support Math.imul(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');
assert(Math.fround, 'This browser does not support Math.fround(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');
assert(Math.clz32, 'This browser does not support Math.clz32(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');
assert(Math.trunc, 'This browser does not support Math.trunc(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');

var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_round = Math.round;
var Math_min = Math.min;
var Math_max = Math.max;
var Math_clz32 = Math.clz32;
var Math_trunc = Math.trunc;



// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// Module.preRun (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled
var runDependencyTracking = {};

function getUniqueRunDependency(id) {
  var orig = id;
  while (1) {
    if (!runDependencyTracking[id]) return id;
    id = orig + Math.random();
  }
  return id;
}

function addRunDependency(id) {
  runDependencies++;

  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }

  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval !== 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(function() {
        if (ABORT) {
          clearInterval(runDependencyWatcher);
          runDependencyWatcher = null;
          return;
        }
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            err('still waiting on run dependencies:');
          }
          err('dependency: ' + dep);
        }
        if (shown) {
          err('(end of list)');
        }
      }, 10000);
    }
  } else {
    err('warning: run dependency added without ID');
  }
}

function removeRunDependency(id) {
  runDependencies--;

  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }

  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    err('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data

var abortDecorators = [];

function abort(what) {
  if (Module['onAbort']) {
    Module['onAbort'](what);
  }

  what += '';
  out(what);
  err(what);

  ABORT = true;
  EXITSTATUS = 1;

  var output = 'abort(' + what + ') at ' + stackTrace();
  abortDecorators.forEach(function(decorator) {
    output = decorator(output, what);
  });
  what = output;

  // Throw a wasm runtime error, because a JS error might be seen as a foreign
  // exception, which means we'd run destructors on it. We need the error to
  // simply make the program stop.
  throw new WebAssembly.RuntimeError(what);
}


var memoryInitializer = null;







// Copyright 2017 The Emscripten Authors.  All rights reserved.
// Emscripten is available under two separate licenses, the MIT license and the
// University of Illinois/NCSA Open Source License.  Both these licenses can be
// found in the LICENSE file.

// Prefix of data URIs emitted by SINGLE_FILE and related options.
var dataURIPrefix = 'data:application/octet-stream;base64,';

// Indicates whether filename is a base64 data URI.
function isDataURI(filename) {
  return String.prototype.startsWith ?
      filename.startsWith(dataURIPrefix) :
      filename.indexOf(dataURIPrefix) === 0;
}




var wasmBinaryFile = 'raylibTemplate.wasm';
if (!isDataURI(wasmBinaryFile)) {
  wasmBinaryFile = locateFile(wasmBinaryFile);
}

function getBinary() {
  try {
    if (wasmBinary) {
      return new Uint8Array(wasmBinary);
    }

    if (readBinary) {
      return readBinary(wasmBinaryFile);
    } else {
      throw "both async and sync fetching of the wasm failed";
    }
  }
  catch (err) {
    abort(err);
  }
}

function getBinaryPromise() {
  // if we don't have the binary yet, and have the Fetch api, use that
  // in some environments, like Electron's render process, Fetch api may be present, but have a different context than expected, let's only use it on the Web
  if (!wasmBinary && (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) && typeof fetch === 'function') {
    return fetch(wasmBinaryFile, { credentials: 'same-origin' }).then(function(response) {
      if (!response['ok']) {
        throw "failed to load wasm binary file at '" + wasmBinaryFile + "'";
      }
      return response['arrayBuffer']();
    }).catch(function () {
      return getBinary();
    });
  }
  // Otherwise, getBinary should be able to get it synchronously
  return new Promise(function(resolve, reject) {
    resolve(getBinary());
  });
}



// Create the wasm instance.
// Receives the wasm imports, returns the exports.
function createWasm() {
  // prepare imports
  var info = {
    'env': asmLibraryArg,
    'wasi_unstable': asmLibraryArg
    ,
    'global': {
      'NaN': NaN,
      'Infinity': Infinity
    },
    'global.Math': Math,
    'asm2wasm': asm2wasmImports
  };
  // Load the wasm module and create an instance of using native support in the JS engine.
  // handle a generated wasm instance, receiving its exports and
  // performing other necessary setup
  function receiveInstance(instance, module) {
    var exports = instance.exports;
    Module['asm'] = exports;
    removeRunDependency('wasm-instantiate');
  }
   // we can't run yet (except in a pthread, where we have a custom sync instantiator)
  addRunDependency('wasm-instantiate');


  // Async compilation can be confusing when an error on the page overwrites Module
  // (for example, if the order of elements is wrong, and the one defining Module is
  // later), so we save Module and check it later.
  var trueModule = Module;
  function receiveInstantiatedSource(output) {
    // 'output' is a WebAssemblyInstantiatedSource object which has both the module and instance.
    // receiveInstance() will swap in the exports (to Module.asm) so they can be called
    assert(Module === trueModule, 'the Module object should not be replaced during async compilation - perhaps the order of HTML elements is wrong?');
    trueModule = null;
      // TODO: Due to Closure regression https://github.com/google/closure-compiler/issues/3193, the above line no longer optimizes out down to the following line.
      // When the regression is fixed, can restore the above USE_PTHREADS-enabled path.
    receiveInstance(output['instance']);
  }


  function instantiateArrayBuffer(receiver) {
    return getBinaryPromise().then(function(binary) {
      return WebAssembly.instantiate(binary, info);
    }).then(receiver, function(reason) {
      err('failed to asynchronously prepare wasm: ' + reason);
      abort(reason);
    });
  }

  // Prefer streaming instantiation if available.
  function instantiateAsync() {
    if (!wasmBinary &&
        typeof WebAssembly.instantiateStreaming === 'function' &&
        !isDataURI(wasmBinaryFile) &&
        typeof fetch === 'function') {
      fetch(wasmBinaryFile, { credentials: 'same-origin' }).then(function (response) {
        var result = WebAssembly.instantiateStreaming(response, info);
        return result.then(receiveInstantiatedSource, function(reason) {
            // We expect the most common failure cause to be a bad MIME type for the binary,
            // in which case falling back to ArrayBuffer instantiation should work.
            err('wasm streaming compile failed: ' + reason);
            err('falling back to ArrayBuffer instantiation');
            instantiateArrayBuffer(receiveInstantiatedSource);
          });
      });
    } else {
      return instantiateArrayBuffer(receiveInstantiatedSource);
    }
  }
  // User shell pages can write their own Module.instantiateWasm = function(imports, successCallback) callback
  // to manually instantiate the Wasm module themselves. This allows pages to run the instantiation parallel
  // to any other async startup actions they are performing.
  if (Module['instantiateWasm']) {
    try {
      var exports = Module['instantiateWasm'](info, receiveInstance);
      return exports;
    } catch(e) {
      err('Module.instantiateWasm callback failed with error: ' + e);
      return false;
    }
  }

  instantiateAsync();
  return {}; // no exports yet; we'll fill them in later
}

Module['asm'] = createWasm;

// Globals used by JS i64 conversions
var tempDouble;
var tempI64;

// === Body ===

var ASM_CONSTS = [];





// STATICTOP = STATIC_BASE + 62368;
/* global initializers */  __ATINIT__.push({ func: function() { globalCtors() } });








/* no memory initializer */
var tempDoublePtr = 63376
assert(tempDoublePtr % 8 == 0);

function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much
  HEAP8[tempDoublePtr] = HEAP8[ptr];
  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];
  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];
  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];
}

function copyTempDouble(ptr) {
  HEAP8[tempDoublePtr] = HEAP8[ptr];
  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];
  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];
  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];
  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];
  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];
  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];
  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];
}

// {{PRE_LIBRARY}}


  function demangle(func) {
      warnOnce('warning: build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling');
      return func;
    }

  function demangleAll(text) {
      var regex =
        /\b__Z[\w\d_]+/g;
      return text.replace(regex,
        function(x) {
          var y = demangle(x);
          return x === y ? x : (y + ' [' + x + ']');
        });
    }

  function jsStackTrace() {
      var err = new Error();
      if (!err.stack) {
        // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
        // so try that as a special-case.
        try {
          throw new Error(0);
        } catch(e) {
          err = e;
        }
        if (!err.stack) {
          return '(no stack trace available)';
        }
      }
      return err.stack.toString();
    }

  function stackTrace() {
      var js = jsStackTrace();
      if (Module['extraStackTrace']) js += '\n' + Module['extraStackTrace']();
      return demangleAll(js);
    }

  function ___assert_fail(condition, filename, line, func) {
      abort('Assertion failed: ' + UTF8ToString(condition) + ', at: ' + [filename ? UTF8ToString(filename) : 'unknown filename', line, func ? UTF8ToString(func) : 'unknown function']);
    }

  function ___cxa_allocate_exception(size) {
      return _malloc(size);
    }

  
  var ___exception_infos={};
  
  var ___exception_caught= [];
  
  function ___exception_addRef(ptr) {
      if (!ptr) return;
      var info = ___exception_infos[ptr];
      info.refcount++;
    }
  
  function ___exception_deAdjust(adjusted) {
      if (!adjusted || ___exception_infos[adjusted]) return adjusted;
      for (var key in ___exception_infos) {
        var ptr = +key; // the iteration key is a string, and if we throw this, it must be an integer as that is what we look for
        var adj = ___exception_infos[ptr].adjusted;
        var len = adj.length;
        for (var i = 0; i < len; i++) {
          if (adj[i] === adjusted) {
            return ptr;
          }
        }
      }
      return adjusted;
    }function ___cxa_begin_catch(ptr) {
      var info = ___exception_infos[ptr];
      if (info && !info.caught) {
        info.caught = true;
        __ZSt18uncaught_exceptionv.uncaught_exceptions--;
      }
      if (info) info.rethrown = false;
      ___exception_caught.push(ptr);
      ___exception_addRef(___exception_deAdjust(ptr));
      return ptr;
    }

  
  var ___exception_last=0;function ___cxa_throw(ptr, type, destructor) {
      ___exception_infos[ptr] = {
        ptr: ptr,
        adjusted: [ptr],
        type: type,
        destructor: destructor,
        refcount: 0,
        caught: false,
        rethrown: false
      };
      ___exception_last = ptr;
      if (!("uncaught_exception" in __ZSt18uncaught_exceptionv)) {
        __ZSt18uncaught_exceptionv.uncaught_exceptions = 1;
      } else {
        __ZSt18uncaught_exceptionv.uncaught_exceptions++;
      }
      throw ptr + " - Exception catching is disabled, this exception cannot be caught. Compile with -s DISABLE_EXCEPTION_CATCHING=0 or DISABLE_EXCEPTION_CATCHING=2 to catch.";
    }

  function ___gxx_personality_v0() {
    }

  function ___lock() {}

  
  function ___setErrNo(value) {
      if (Module['___errno_location']) HEAP32[((Module['___errno_location']())>>2)]=value;
      else err('failed to set errno from JS');
      return value;
    }function ___map_file(pathname, size) {
      ___setErrNo(63);
      return -1;
    }

  
    

  
  
  var PATH={splitPath:function(filename) {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
      },normalizeArray:function(parts, allowAboveRoot) {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];
          if (last === '.') {
            parts.splice(i, 1);
          } else if (last === '..') {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        }
        // if the path is allowed to go above the root, restore leading ..s
        if (allowAboveRoot) {
          for (; up; up--) {
            parts.unshift('..');
          }
        }
        return parts;
      },normalize:function(path) {
        var isAbsolute = path.charAt(0) === '/',
            trailingSlash = path.substr(-1) === '/';
        // Normalize the path
        path = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), !isAbsolute).join('/');
        if (!path && !isAbsolute) {
          path = '.';
        }
        if (path && trailingSlash) {
          path += '/';
        }
        return (isAbsolute ? '/' : '') + path;
      },dirname:function(path) {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];
        if (!root && !dir) {
          // No dirname whatsoever
          return '.';
        }
        if (dir) {
          // It has a dirname, strip trailing slash
          dir = dir.substr(0, dir.length - 1);
        }
        return root + dir;
      },basename:function(path) {
        // EMSCRIPTEN return '/'' for '/', not an empty string
        if (path === '/') return '/';
        var lastSlash = path.lastIndexOf('/');
        if (lastSlash === -1) return path;
        return path.substr(lastSlash+1);
      },extname:function(path) {
        return PATH.splitPath(path)[3];
      },join:function() {
        var paths = Array.prototype.slice.call(arguments, 0);
        return PATH.normalize(paths.join('/'));
      },join2:function(l, r) {
        return PATH.normalize(l + '/' + r);
      }};
  
  
  var PATH_FS={resolve:function() {
        var resolvedPath = '',
          resolvedAbsolute = false;
        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
          var path = (i >= 0) ? arguments[i] : FS.cwd();
          // Skip empty and invalid entries
          if (typeof path !== 'string') {
            throw new TypeError('Arguments to path.resolve must be strings');
          } else if (!path) {
            return ''; // an invalid portion invalidates the whole thing
          }
          resolvedPath = path + '/' + resolvedPath;
          resolvedAbsolute = path.charAt(0) === '/';
        }
        // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter(function(p) {
          return !!p;
        }), !resolvedAbsolute).join('/');
        return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
      },relative:function(from, to) {
        from = PATH_FS.resolve(from).substr(1);
        to = PATH_FS.resolve(to).substr(1);
        function trim(arr) {
          var start = 0;
          for (; start < arr.length; start++) {
            if (arr[start] !== '') break;
          }
          var end = arr.length - 1;
          for (; end >= 0; end--) {
            if (arr[end] !== '') break;
          }
          if (start > end) return [];
          return arr.slice(start, end - start + 1);
        }
        var fromParts = trim(from.split('/'));
        var toParts = trim(to.split('/'));
        var length = Math.min(fromParts.length, toParts.length);
        var samePartsLength = length;
        for (var i = 0; i < length; i++) {
          if (fromParts[i] !== toParts[i]) {
            samePartsLength = i;
            break;
          }
        }
        var outputParts = [];
        for (var i = samePartsLength; i < fromParts.length; i++) {
          outputParts.push('..');
        }
        outputParts = outputParts.concat(toParts.slice(samePartsLength));
        return outputParts.join('/');
      }};
  
  var TTY={ttys:[],init:function () {
        // https://github.com/emscripten-core/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // currently, FS.init does not distinguish if process.stdin is a file or TTY
        //   // device, it always assumes it's a TTY device. because of this, we're forcing
        //   // process.stdin to UTF8 encoding to at least make stdin reading compatible
        //   // with text files until FS.init can be refactored.
        //   process['stdin']['setEncoding']('utf8');
        // }
      },shutdown:function() {
        // https://github.com/emscripten-core/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?
        //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation
        //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?
        //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle
        //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call
        //   process['stdin']['pause']();
        // }
      },register:function(dev, ops) {
        TTY.ttys[dev] = { input: [], output: [], ops: ops };
        FS.registerDevice(dev, TTY.stream_ops);
      },stream_ops:{open:function(stream) {
          var tty = TTY.ttys[stream.node.rdev];
          if (!tty) {
            throw new FS.ErrnoError(43);
          }
          stream.tty = tty;
          stream.seekable = false;
        },close:function(stream) {
          // flush any pending line data
          stream.tty.ops.flush(stream.tty);
        },flush:function(stream) {
          stream.tty.ops.flush(stream.tty);
        },read:function(stream, buffer, offset, length, pos /* ignored */) {
          if (!stream.tty || !stream.tty.ops.get_char) {
            throw new FS.ErrnoError(60);
          }
          var bytesRead = 0;
          for (var i = 0; i < length; i++) {
            var result;
            try {
              result = stream.tty.ops.get_char(stream.tty);
            } catch (e) {
              throw new FS.ErrnoError(29);
            }
            if (result === undefined && bytesRead === 0) {
              throw new FS.ErrnoError(6);
            }
            if (result === null || result === undefined) break;
            bytesRead++;
            buffer[offset+i] = result;
          }
          if (bytesRead) {
            stream.node.timestamp = Date.now();
          }
          return bytesRead;
        },write:function(stream, buffer, offset, length, pos) {
          if (!stream.tty || !stream.tty.ops.put_char) {
            throw new FS.ErrnoError(60);
          }
          try {
            for (var i = 0; i < length; i++) {
              stream.tty.ops.put_char(stream.tty, buffer[offset+i]);
            }
          } catch (e) {
            throw new FS.ErrnoError(29);
          }
          if (length) {
            stream.node.timestamp = Date.now();
          }
          return i;
        }},default_tty_ops:{get_char:function(tty) {
          if (!tty.input.length) {
            var result = null;
            if (ENVIRONMENT_IS_NODE) {
              // we will read data by chunks of BUFSIZE
              var BUFSIZE = 256;
              var buf = Buffer.alloc ? Buffer.alloc(BUFSIZE) : new Buffer(BUFSIZE);
              var bytesRead = 0;
  
              try {
                bytesRead = nodeFS.readSync(process.stdin.fd, buf, 0, BUFSIZE, null);
              } catch(e) {
                // Cross-platform differences: on Windows, reading EOF throws an exception, but on other OSes,
                // reading EOF returns 0. Uniformize behavior by treating the EOF exception to return 0.
                if (e.toString().indexOf('EOF') != -1) bytesRead = 0;
                else throw e;
              }
  
              if (bytesRead > 0) {
                result = buf.slice(0, bytesRead).toString('utf-8');
              } else {
                result = null;
              }
            } else
            if (typeof window != 'undefined' &&
              typeof window.prompt == 'function') {
              // Browser.
              result = window.prompt('Input: ');  // returns null on cancel
              if (result !== null) {
                result += '\n';
              }
            } else if (typeof readline == 'function') {
              // Command line.
              result = readline();
              if (result !== null) {
                result += '\n';
              }
            }
            if (!result) {
              return null;
            }
            tty.input = intArrayFromString(result, true);
          }
          return tty.input.shift();
        },put_char:function(tty, val) {
          if (val === null || val === 10) {
            out(UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val); // val == 0 would cut text output off in the middle.
          }
        },flush:function(tty) {
          if (tty.output && tty.output.length > 0) {
            out(UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }},default_tty1_ops:{put_char:function(tty, val) {
          if (val === null || val === 10) {
            err(UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val);
          }
        },flush:function(tty) {
          if (tty.output && tty.output.length > 0) {
            err(UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }}};
  
  var MEMFS={ops_table:null,mount:function(mount) {
        return MEMFS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createNode:function(parent, name, mode, dev) {
        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
          // no supported
          throw new FS.ErrnoError(63);
        }
        if (!MEMFS.ops_table) {
          MEMFS.ops_table = {
            dir: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                lookup: MEMFS.node_ops.lookup,
                mknod: MEMFS.node_ops.mknod,
                rename: MEMFS.node_ops.rename,
                unlink: MEMFS.node_ops.unlink,
                rmdir: MEMFS.node_ops.rmdir,
                readdir: MEMFS.node_ops.readdir,
                symlink: MEMFS.node_ops.symlink
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek
              }
            },
            file: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek,
                read: MEMFS.stream_ops.read,
                write: MEMFS.stream_ops.write,
                allocate: MEMFS.stream_ops.allocate,
                mmap: MEMFS.stream_ops.mmap,
                msync: MEMFS.stream_ops.msync
              }
            },
            link: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                readlink: MEMFS.node_ops.readlink
              },
              stream: {}
            },
            chrdev: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: FS.chrdev_stream_ops
            }
          };
        }
        var node = FS.createNode(parent, name, mode, dev);
        if (FS.isDir(node.mode)) {
          node.node_ops = MEMFS.ops_table.dir.node;
          node.stream_ops = MEMFS.ops_table.dir.stream;
          node.contents = {};
        } else if (FS.isFile(node.mode)) {
          node.node_ops = MEMFS.ops_table.file.node;
          node.stream_ops = MEMFS.ops_table.file.stream;
          node.usedBytes = 0; // The actual number of bytes used in the typed array, as opposed to contents.length which gives the whole capacity.
          // When the byte data of the file is populated, this will point to either a typed array, or a normal JS array. Typed arrays are preferred
          // for performance, and used by default. However, typed arrays are not resizable like normal JS arrays are, so there is a small disk size
          // penalty involved for appending file writes that continuously grow a file similar to std::vector capacity vs used -scheme.
          node.contents = null; 
        } else if (FS.isLink(node.mode)) {
          node.node_ops = MEMFS.ops_table.link.node;
          node.stream_ops = MEMFS.ops_table.link.stream;
        } else if (FS.isChrdev(node.mode)) {
          node.node_ops = MEMFS.ops_table.chrdev.node;
          node.stream_ops = MEMFS.ops_table.chrdev.stream;
        }
        node.timestamp = Date.now();
        // add the new node to the parent
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },getFileDataAsRegularArray:function(node) {
        if (node.contents && node.contents.subarray) {
          var arr = [];
          for (var i = 0; i < node.usedBytes; ++i) arr.push(node.contents[i]);
          return arr; // Returns a copy of the original data.
        }
        return node.contents; // No-op, the file contents are already in a JS array. Return as-is.
      },getFileDataAsTypedArray:function(node) {
        if (!node.contents) return new Uint8Array;
        if (node.contents.subarray) return node.contents.subarray(0, node.usedBytes); // Make sure to not return excess unused bytes.
        return new Uint8Array(node.contents);
      },expandFileStorage:function(node, newCapacity) {
        var prevCapacity = node.contents ? node.contents.length : 0;
        if (prevCapacity >= newCapacity) return; // No need to expand, the storage was already large enough.
        // Don't expand strictly to the given requested limit if it's only a very small increase, but instead geometrically grow capacity.
        // For small filesizes (<1MB), perform size*2 geometric increase, but for large sizes, do a much more conservative size*1.125 increase to
        // avoid overshooting the allocation cap by a very large margin.
        var CAPACITY_DOUBLING_MAX = 1024 * 1024;
        newCapacity = Math.max(newCapacity, (prevCapacity * (prevCapacity < CAPACITY_DOUBLING_MAX ? 2.0 : 1.125)) | 0);
        if (prevCapacity != 0) newCapacity = Math.max(newCapacity, 256); // At minimum allocate 256b for each file when expanding.
        var oldContents = node.contents;
        node.contents = new Uint8Array(newCapacity); // Allocate new storage.
        if (node.usedBytes > 0) node.contents.set(oldContents.subarray(0, node.usedBytes), 0); // Copy old data over to the new storage.
        return;
      },resizeFileStorage:function(node, newSize) {
        if (node.usedBytes == newSize) return;
        if (newSize == 0) {
          node.contents = null; // Fully decommit when requesting a resize to zero.
          node.usedBytes = 0;
          return;
        }
        if (!node.contents || node.contents.subarray) { // Resize a typed array if that is being used as the backing store.
          var oldContents = node.contents;
          node.contents = new Uint8Array(new ArrayBuffer(newSize)); // Allocate new storage.
          if (oldContents) {
            node.contents.set(oldContents.subarray(0, Math.min(newSize, node.usedBytes))); // Copy old data over to the new storage.
          }
          node.usedBytes = newSize;
          return;
        }
        // Backing with a JS array.
        if (!node.contents) node.contents = [];
        if (node.contents.length > newSize) node.contents.length = newSize;
        else while (node.contents.length < newSize) node.contents.push(0);
        node.usedBytes = newSize;
      },node_ops:{getattr:function(node) {
          var attr = {};
          // device numbers reuse inode numbers.
          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
          attr.ino = node.id;
          attr.mode = node.mode;
          attr.nlink = 1;
          attr.uid = 0;
          attr.gid = 0;
          attr.rdev = node.rdev;
          if (FS.isDir(node.mode)) {
            attr.size = 4096;
          } else if (FS.isFile(node.mode)) {
            attr.size = node.usedBytes;
          } else if (FS.isLink(node.mode)) {
            attr.size = node.link.length;
          } else {
            attr.size = 0;
          }
          attr.atime = new Date(node.timestamp);
          attr.mtime = new Date(node.timestamp);
          attr.ctime = new Date(node.timestamp);
          // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
          //       but this is not required by the standard.
          attr.blksize = 4096;
          attr.blocks = Math.ceil(attr.size / attr.blksize);
          return attr;
        },setattr:function(node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
          if (attr.size !== undefined) {
            MEMFS.resizeFileStorage(node, attr.size);
          }
        },lookup:function(parent, name) {
          throw FS.genericErrors[44];
        },mknod:function(parent, name, mode, dev) {
          return MEMFS.createNode(parent, name, mode, dev);
        },rename:function(old_node, new_dir, new_name) {
          // if we're overwriting a directory at new_name, make sure it's empty.
          if (FS.isDir(old_node.mode)) {
            var new_node;
            try {
              new_node = FS.lookupNode(new_dir, new_name);
            } catch (e) {
            }
            if (new_node) {
              for (var i in new_node.contents) {
                throw new FS.ErrnoError(55);
              }
            }
          }
          // do the internal rewiring
          delete old_node.parent.contents[old_node.name];
          old_node.name = new_name;
          new_dir.contents[new_name] = old_node;
          old_node.parent = new_dir;
        },unlink:function(parent, name) {
          delete parent.contents[name];
        },rmdir:function(parent, name) {
          var node = FS.lookupNode(parent, name);
          for (var i in node.contents) {
            throw new FS.ErrnoError(55);
          }
          delete parent.contents[name];
        },readdir:function(node) {
          var entries = ['.', '..'];
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function(parent, newname, oldpath) {
          var node = MEMFS.createNode(parent, newname, 511 /* 0777 */ | 40960, 0);
          node.link = oldpath;
          return node;
        },readlink:function(node) {
          if (!FS.isLink(node.mode)) {
            throw new FS.ErrnoError(28);
          }
          return node.link;
        }},stream_ops:{read:function(stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          if (position >= stream.node.usedBytes) return 0;
          var size = Math.min(stream.node.usedBytes - position, length);
          assert(size >= 0);
          if (size > 8 && contents.subarray) { // non-trivial, and typed array
            buffer.set(contents.subarray(position, position + size), offset);
          } else {
            for (var i = 0; i < size; i++) buffer[offset + i] = contents[position + i];
          }
          return size;
        },write:function(stream, buffer, offset, length, position, canOwn) {
          // The data buffer should be a typed array view
          assert(!(buffer instanceof ArrayBuffer));
  
          if (!length) return 0;
          var node = stream.node;
          node.timestamp = Date.now();
  
          if (buffer.subarray && (!node.contents || node.contents.subarray)) { // This write is from a typed array to a typed array?
            if (canOwn) {
              assert(position === 0, 'canOwn must imply no weird position inside the file');
              node.contents = buffer.subarray(offset, offset + length);
              node.usedBytes = length;
              return length;
            } else if (node.usedBytes === 0 && position === 0) { // If this is a simple first write to an empty file, do a fast set since we don't need to care about old data.
              node.contents = new Uint8Array(buffer.subarray(offset, offset + length));
              node.usedBytes = length;
              return length;
            } else if (position + length <= node.usedBytes) { // Writing to an already allocated and used subrange of the file?
              node.contents.set(buffer.subarray(offset, offset + length), position);
              return length;
            }
          }
  
          // Appending to an existing file and we need to reallocate, or source data did not come as a typed array.
          MEMFS.expandFileStorage(node, position+length);
          if (node.contents.subarray && buffer.subarray) node.contents.set(buffer.subarray(offset, offset + length), position); // Use typed array write if available.
          else {
            for (var i = 0; i < length; i++) {
             node.contents[position + i] = buffer[offset + i]; // Or fall back to manual write if not.
            }
          }
          node.usedBytes = Math.max(node.usedBytes, position+length);
          return length;
        },llseek:function(stream, offset, whence) {
          var position = offset;
          if (whence === 1) {
            position += stream.position;
          } else if (whence === 2) {
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.usedBytes;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(28);
          }
          return position;
        },allocate:function(stream, offset, length) {
          MEMFS.expandFileStorage(stream.node, offset + length);
          stream.node.usedBytes = Math.max(stream.node.usedBytes, offset + length);
        },mmap:function(stream, buffer, offset, length, position, prot, flags) {
          // The data buffer should be a typed array view
          assert(!(buffer instanceof ArrayBuffer));
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(43);
          }
          var ptr;
          var allocated;
          var contents = stream.node.contents;
          // Only make a new copy when MAP_PRIVATE is specified.
          if ( !(flags & 2) &&
                contents.buffer === buffer.buffer ) {
            // We can't emulate MAP_SHARED when the file is not backed by the buffer
            // we're mapping to (e.g. the HEAP buffer).
            allocated = false;
            ptr = contents.byteOffset;
          } else {
            // Try to avoid unnecessary slices.
            if (position > 0 || position + length < stream.node.usedBytes) {
              if (contents.subarray) {
                contents = contents.subarray(position, position + length);
              } else {
                contents = Array.prototype.slice.call(contents, position, position + length);
              }
            }
            allocated = true;
            // malloc() can lead to growing the heap. If targeting the heap, we need to
            // re-acquire the heap buffer object in case growth had occurred.
            var fromHeap = (buffer.buffer == HEAP8.buffer);
            ptr = _malloc(length);
            if (!ptr) {
              throw new FS.ErrnoError(48);
            }
            (fromHeap ? HEAP8 : buffer).set(contents, ptr);
          }
          return { ptr: ptr, allocated: allocated };
        },msync:function(stream, buffer, offset, length, mmapFlags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(43);
          }
          if (mmapFlags & 2) {
            // MAP_PRIVATE calls need not to be synced back to underlying fs
            return 0;
          }
  
          var bytesWritten = MEMFS.stream_ops.write(stream, buffer, 0, length, offset, false);
          // should we check if bytesWritten and length are the same?
          return 0;
        }}};
  
  var ERRNO_MESSAGES={0:"Success",1:"Arg list too long",2:"Permission denied",3:"Address already in use",4:"Address not available",5:"Address family not supported by protocol family",6:"No more processes",7:"Socket already connected",8:"Bad file number",9:"Trying to read unreadable message",10:"Mount device busy",11:"Operation canceled",12:"No children",13:"Connection aborted",14:"Connection refused",15:"Connection reset by peer",16:"File locking deadlock error",17:"Destination address required",18:"Math arg out of domain of func",19:"Quota exceeded",20:"File exists",21:"Bad address",22:"File too large",23:"Host is unreachable",24:"Identifier removed",25:"Illegal byte sequence",26:"Connection already in progress",27:"Interrupted system call",28:"Invalid argument",29:"I/O error",30:"Socket is already connected",31:"Is a directory",32:"Too many symbolic links",33:"Too many open files",34:"Too many links",35:"Message too long",36:"Multihop attempted",37:"File or path name too long",38:"Network interface is not configured",39:"Connection reset by network",40:"Network is unreachable",41:"Too many open files in system",42:"No buffer space available",43:"No such device",44:"No such file or directory",45:"Exec format error",46:"No record locks available",47:"The link has been severed",48:"Not enough core",49:"No message of desired type",50:"Protocol not available",51:"No space left on device",52:"Function not implemented",53:"Socket is not connected",54:"Not a directory",55:"Directory not empty",56:"State not recoverable",57:"Socket operation on non-socket",59:"Not a typewriter",60:"No such device or address",61:"Value too large for defined data type",62:"Previous owner died",63:"Not super-user",64:"Broken pipe",65:"Protocol error",66:"Unknown protocol",67:"Protocol wrong type for socket",68:"Math result not representable",69:"Read only file system",70:"Illegal seek",71:"No such process",72:"Stale file handle",73:"Connection timed out",74:"Text file busy",75:"Cross-device link",100:"Device not a stream",101:"Bad font file fmt",102:"Invalid slot",103:"Invalid request code",104:"No anode",105:"Block device required",106:"Channel number out of range",107:"Level 3 halted",108:"Level 3 reset",109:"Link number out of range",110:"Protocol driver not attached",111:"No CSI structure available",112:"Level 2 halted",113:"Invalid exchange",114:"Invalid request descriptor",115:"Exchange full",116:"No data (for no delay io)",117:"Timer expired",118:"Out of streams resources",119:"Machine is not on the network",120:"Package not installed",121:"The object is remote",122:"Advertise error",123:"Srmount error",124:"Communication error on send",125:"Cross mount point (not really error)",126:"Given log. name not unique",127:"f.d. invalid for this operation",128:"Remote address changed",129:"Can   access a needed shared lib",130:"Accessing a corrupted shared lib",131:".lib section in a.out corrupted",132:"Attempting to link in too many libs",133:"Attempting to exec a shared library",135:"Streams pipe error",136:"Too many users",137:"Socket type not supported",138:"Not supported",139:"Protocol family not supported",140:"Can't send after socket shutdown",141:"Too many references",142:"Host is down",148:"No medium (in tape drive)",156:"Level 2 not synchronized"};
  
  var ERRNO_CODES={EPERM:63,ENOENT:44,ESRCH:71,EINTR:27,EIO:29,ENXIO:60,E2BIG:1,ENOEXEC:45,EBADF:8,ECHILD:12,EAGAIN:6,EWOULDBLOCK:6,ENOMEM:48,EACCES:2,EFAULT:21,ENOTBLK:105,EBUSY:10,EEXIST:20,EXDEV:75,ENODEV:43,ENOTDIR:54,EISDIR:31,EINVAL:28,ENFILE:41,EMFILE:33,ENOTTY:59,ETXTBSY:74,EFBIG:22,ENOSPC:51,ESPIPE:70,EROFS:69,EMLINK:34,EPIPE:64,EDOM:18,ERANGE:68,ENOMSG:49,EIDRM:24,ECHRNG:106,EL2NSYNC:156,EL3HLT:107,EL3RST:108,ELNRNG:109,EUNATCH:110,ENOCSI:111,EL2HLT:112,EDEADLK:16,ENOLCK:46,EBADE:113,EBADR:114,EXFULL:115,ENOANO:104,EBADRQC:103,EBADSLT:102,EDEADLOCK:16,EBFONT:101,ENOSTR:100,ENODATA:116,ETIME:117,ENOSR:118,ENONET:119,ENOPKG:120,EREMOTE:121,ENOLINK:47,EADV:122,ESRMNT:123,ECOMM:124,EPROTO:65,EMULTIHOP:36,EDOTDOT:125,EBADMSG:9,ENOTUNIQ:126,EBADFD:127,EREMCHG:128,ELIBACC:129,ELIBBAD:130,ELIBSCN:131,ELIBMAX:132,ELIBEXEC:133,ENOSYS:52,ENOTEMPTY:55,ENAMETOOLONG:37,ELOOP:32,EOPNOTSUPP:138,EPFNOSUPPORT:139,ECONNRESET:15,ENOBUFS:42,EAFNOSUPPORT:5,EPROTOTYPE:67,ENOTSOCK:57,ENOPROTOOPT:50,ESHUTDOWN:140,ECONNREFUSED:14,EADDRINUSE:3,ECONNABORTED:13,ENETUNREACH:40,ENETDOWN:38,ETIMEDOUT:73,EHOSTDOWN:142,EHOSTUNREACH:23,EINPROGRESS:26,EALREADY:7,EDESTADDRREQ:17,EMSGSIZE:35,EPROTONOSUPPORT:66,ESOCKTNOSUPPORT:137,EADDRNOTAVAIL:4,ENETRESET:39,EISCONN:30,ENOTCONN:53,ETOOMANYREFS:141,EUSERS:136,EDQUOT:19,ESTALE:72,ENOTSUP:138,ENOMEDIUM:148,EILSEQ:25,EOVERFLOW:61,ECANCELED:11,ENOTRECOVERABLE:56,EOWNERDEAD:62,ESTRPIPE:135};var FS={root:null,mounts:[],devices:{},streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,trackingDelegate:{},tracking:{openFlags:{READ:1,WRITE:2}},ErrnoError:null,genericErrors:{},filesystems:null,syncFSRequests:0,handleFSError:function(e) {
        if (!(e instanceof FS.ErrnoError)) throw e + ' : ' + stackTrace();
        return ___setErrNo(e.errno);
      },lookupPath:function(path, opts) {
        path = PATH_FS.resolve(FS.cwd(), path);
        opts = opts || {};
  
        if (!path) return { path: '', node: null };
  
        var defaults = {
          follow_mount: true,
          recurse_count: 0
        };
        for (var key in defaults) {
          if (opts[key] === undefined) {
            opts[key] = defaults[key];
          }
        }
  
        if (opts.recurse_count > 8) {  // max recursive lookup of 8
          throw new FS.ErrnoError(32);
        }
  
        // split the path
        var parts = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), false);
  
        // start at the root
        var current = FS.root;
        var current_path = '/';
  
        for (var i = 0; i < parts.length; i++) {
          var islast = (i === parts.length-1);
          if (islast && opts.parent) {
            // stop resolving
            break;
          }
  
          current = FS.lookupNode(current, parts[i]);
          current_path = PATH.join2(current_path, parts[i]);
  
          // jump to the mount's root node if this is a mountpoint
          if (FS.isMountpoint(current)) {
            if (!islast || (islast && opts.follow_mount)) {
              current = current.mounted.root;
            }
          }
  
          // by default, lookupPath will not follow a symlink if it is the final path component.
          // setting opts.follow = true will override this behavior.
          if (!islast || opts.follow) {
            var count = 0;
            while (FS.isLink(current.mode)) {
              var link = FS.readlink(current_path);
              current_path = PATH_FS.resolve(PATH.dirname(current_path), link);
  
              var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count });
              current = lookup.node;
  
              if (count++ > 40) {  // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
                throw new FS.ErrnoError(32);
              }
            }
          }
        }
  
        return { path: current_path, node: current };
      },getPath:function(node) {
        var path;
        while (true) {
          if (FS.isRoot(node)) {
            var mount = node.mount.mountpoint;
            if (!path) return mount;
            return mount[mount.length-1] !== '/' ? mount + '/' + path : mount + path;
          }
          path = path ? node.name + '/' + path : node.name;
          node = node.parent;
        }
      },hashName:function(parentid, name) {
        var hash = 0;
  
  
        for (var i = 0; i < name.length; i++) {
          hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
        }
        return ((parentid + hash) >>> 0) % FS.nameTable.length;
      },hashAddNode:function(node) {
        var hash = FS.hashName(node.parent.id, node.name);
        node.name_next = FS.nameTable[hash];
        FS.nameTable[hash] = node;
      },hashRemoveNode:function(node) {
        var hash = FS.hashName(node.parent.id, node.name);
        if (FS.nameTable[hash] === node) {
          FS.nameTable[hash] = node.name_next;
        } else {
          var current = FS.nameTable[hash];
          while (current) {
            if (current.name_next === node) {
              current.name_next = node.name_next;
              break;
            }
            current = current.name_next;
          }
        }
      },lookupNode:function(parent, name) {
        var err = FS.mayLookup(parent);
        if (err) {
          throw new FS.ErrnoError(err, parent);
        }
        var hash = FS.hashName(parent.id, name);
        for (var node = FS.nameTable[hash]; node; node = node.name_next) {
          var nodeName = node.name;
          if (node.parent.id === parent.id && nodeName === name) {
            return node;
          }
        }
        // if we failed to find it in the cache, call into the VFS
        return FS.lookup(parent, name);
      },createNode:function(parent, name, mode, rdev) {
        if (!FS.FSNode) {
          FS.FSNode = function(parent, name, mode, rdev) {
            if (!parent) {
              parent = this;  // root node sets parent to itself
            }
            this.parent = parent;
            this.mount = parent.mount;
            this.mounted = null;
            this.id = FS.nextInode++;
            this.name = name;
            this.mode = mode;
            this.node_ops = {};
            this.stream_ops = {};
            this.rdev = rdev;
          };
  
          FS.FSNode.prototype = {};
  
          // compatibility
          var readMode = 292 | 73;
          var writeMode = 146;
  
          // NOTE we must use Object.defineProperties instead of individual calls to
          // Object.defineProperty in order to make closure compiler happy
          Object.defineProperties(FS.FSNode.prototype, {
            read: {
              get: function() { return (this.mode & readMode) === readMode; },
              set: function(val) { val ? this.mode |= readMode : this.mode &= ~readMode; }
            },
            write: {
              get: function() { return (this.mode & writeMode) === writeMode; },
              set: function(val) { val ? this.mode |= writeMode : this.mode &= ~writeMode; }
            },
            isFolder: {
              get: function() { return FS.isDir(this.mode); }
            },
            isDevice: {
              get: function() { return FS.isChrdev(this.mode); }
            }
          });
        }
  
        var node = new FS.FSNode(parent, name, mode, rdev);
  
        FS.hashAddNode(node);
  
        return node;
      },destroyNode:function(node) {
        FS.hashRemoveNode(node);
      },isRoot:function(node) {
        return node === node.parent;
      },isMountpoint:function(node) {
        return !!node.mounted;
      },isFile:function(mode) {
        return (mode & 61440) === 32768;
      },isDir:function(mode) {
        return (mode & 61440) === 16384;
      },isLink:function(mode) {
        return (mode & 61440) === 40960;
      },isChrdev:function(mode) {
        return (mode & 61440) === 8192;
      },isBlkdev:function(mode) {
        return (mode & 61440) === 24576;
      },isFIFO:function(mode) {
        return (mode & 61440) === 4096;
      },isSocket:function(mode) {
        return (mode & 49152) === 49152;
      },flagModes:{"r":0,"rs":1052672,"r+":2,"w":577,"wx":705,"xw":705,"w+":578,"wx+":706,"xw+":706,"a":1089,"ax":1217,"xa":1217,"a+":1090,"ax+":1218,"xa+":1218},modeStringToFlags:function(str) {
        var flags = FS.flagModes[str];
        if (typeof flags === 'undefined') {
          throw new Error('Unknown file open mode: ' + str);
        }
        return flags;
      },flagsToPermissionString:function(flag) {
        var perms = ['r', 'w', 'rw'][flag & 3];
        if ((flag & 512)) {
          perms += 'w';
        }
        return perms;
      },nodePermissions:function(node, perms) {
        if (FS.ignorePermissions) {
          return 0;
        }
        // return 0 if any user, group or owner bits are set.
        if (perms.indexOf('r') !== -1 && !(node.mode & 292)) {
          return 2;
        } else if (perms.indexOf('w') !== -1 && !(node.mode & 146)) {
          return 2;
        } else if (perms.indexOf('x') !== -1 && !(node.mode & 73)) {
          return 2;
        }
        return 0;
      },mayLookup:function(dir) {
        var err = FS.nodePermissions(dir, 'x');
        if (err) return err;
        if (!dir.node_ops.lookup) return 2;
        return 0;
      },mayCreate:function(dir, name) {
        try {
          var node = FS.lookupNode(dir, name);
          return 20;
        } catch (e) {
        }
        return FS.nodePermissions(dir, 'wx');
      },mayDelete:function(dir, name, isdir) {
        var node;
        try {
          node = FS.lookupNode(dir, name);
        } catch (e) {
          return e.errno;
        }
        var err = FS.nodePermissions(dir, 'wx');
        if (err) {
          return err;
        }
        if (isdir) {
          if (!FS.isDir(node.mode)) {
            return 54;
          }
          if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
            return 10;
          }
        } else {
          if (FS.isDir(node.mode)) {
            return 31;
          }
        }
        return 0;
      },mayOpen:function(node, flags) {
        if (!node) {
          return 44;
        }
        if (FS.isLink(node.mode)) {
          return 32;
        } else if (FS.isDir(node.mode)) {
          if (FS.flagsToPermissionString(flags) !== 'r' || // opening for write
              (flags & 512)) { // TODO: check for O_SEARCH? (== search for dir only)
            return 31;
          }
        }
        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
      },MAX_OPEN_FDS:4096,nextfd:function(fd_start, fd_end) {
        fd_start = fd_start || 0;
        fd_end = fd_end || FS.MAX_OPEN_FDS;
        for (var fd = fd_start; fd <= fd_end; fd++) {
          if (!FS.streams[fd]) {
            return fd;
          }
        }
        throw new FS.ErrnoError(33);
      },getStream:function(fd) {
        return FS.streams[fd];
      },createStream:function(stream, fd_start, fd_end) {
        if (!FS.FSStream) {
          FS.FSStream = function(){};
          FS.FSStream.prototype = {};
          // compatibility
          Object.defineProperties(FS.FSStream.prototype, {
            object: {
              get: function() { return this.node; },
              set: function(val) { this.node = val; }
            },
            isRead: {
              get: function() { return (this.flags & 2097155) !== 1; }
            },
            isWrite: {
              get: function() { return (this.flags & 2097155) !== 0; }
            },
            isAppend: {
              get: function() { return (this.flags & 1024); }
            }
          });
        }
        // clone it, so we can return an instance of FSStream
        var newStream = new FS.FSStream();
        for (var p in stream) {
          newStream[p] = stream[p];
        }
        stream = newStream;
        var fd = FS.nextfd(fd_start, fd_end);
        stream.fd = fd;
        FS.streams[fd] = stream;
        return stream;
      },closeStream:function(fd) {
        FS.streams[fd] = null;
      },chrdev_stream_ops:{open:function(stream) {
          var device = FS.getDevice(stream.node.rdev);
          // override node's stream ops with the device's
          stream.stream_ops = device.stream_ops;
          // forward the open call
          if (stream.stream_ops.open) {
            stream.stream_ops.open(stream);
          }
        },llseek:function() {
          throw new FS.ErrnoError(70);
        }},major:function(dev) {
        return ((dev) >> 8);
      },minor:function(dev) {
        return ((dev) & 0xff);
      },makedev:function(ma, mi) {
        return ((ma) << 8 | (mi));
      },registerDevice:function(dev, ops) {
        FS.devices[dev] = { stream_ops: ops };
      },getDevice:function(dev) {
        return FS.devices[dev];
      },getMounts:function(mount) {
        var mounts = [];
        var check = [mount];
  
        while (check.length) {
          var m = check.pop();
  
          mounts.push(m);
  
          check.push.apply(check, m.mounts);
        }
  
        return mounts;
      },syncfs:function(populate, callback) {
        if (typeof(populate) === 'function') {
          callback = populate;
          populate = false;
        }
  
        FS.syncFSRequests++;
  
        if (FS.syncFSRequests > 1) {
          console.log('warning: ' + FS.syncFSRequests + ' FS.syncfs operations in flight at once, probably just doing extra work');
        }
  
        var mounts = FS.getMounts(FS.root.mount);
        var completed = 0;
  
        function doCallback(err) {
          assert(FS.syncFSRequests > 0);
          FS.syncFSRequests--;
          return callback(err);
        }
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return doCallback(err);
            }
            return;
          }
          if (++completed >= mounts.length) {
            doCallback(null);
          }
        };
  
        // sync all mounts
        mounts.forEach(function (mount) {
          if (!mount.type.syncfs) {
            return done(null);
          }
          mount.type.syncfs(mount, populate, done);
        });
      },mount:function(type, opts, mountpoint) {
        if (typeof type === 'string') {
          // The filesystem was not included, and instead we have an error
          // message stored in the variable.
          throw type;
        }
        var root = mountpoint === '/';
        var pseudo = !mountpoint;
        var node;
  
        if (root && FS.root) {
          throw new FS.ErrnoError(10);
        } else if (!root && !pseudo) {
          var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
          mountpoint = lookup.path;  // use the absolute path
          node = lookup.node;
  
          if (FS.isMountpoint(node)) {
            throw new FS.ErrnoError(10);
          }
  
          if (!FS.isDir(node.mode)) {
            throw new FS.ErrnoError(54);
          }
        }
  
        var mount = {
          type: type,
          opts: opts,
          mountpoint: mountpoint,
          mounts: []
        };
  
        // create a root node for the fs
        var mountRoot = type.mount(mount);
        mountRoot.mount = mount;
        mount.root = mountRoot;
  
        if (root) {
          FS.root = mountRoot;
        } else if (node) {
          // set as a mountpoint
          node.mounted = mount;
  
          // add the new mount to the current mount's children
          if (node.mount) {
            node.mount.mounts.push(mount);
          }
        }
  
        return mountRoot;
      },unmount:function (mountpoint) {
        var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
        if (!FS.isMountpoint(lookup.node)) {
          throw new FS.ErrnoError(28);
        }
  
        // destroy the nodes for this mount, and all its child mounts
        var node = lookup.node;
        var mount = node.mounted;
        var mounts = FS.getMounts(mount);
  
        Object.keys(FS.nameTable).forEach(function (hash) {
          var current = FS.nameTable[hash];
  
          while (current) {
            var next = current.name_next;
  
            if (mounts.indexOf(current.mount) !== -1) {
              FS.destroyNode(current);
            }
  
            current = next;
          }
        });
  
        // no longer a mountpoint
        node.mounted = null;
  
        // remove this mount from the child mounts
        var idx = node.mount.mounts.indexOf(mount);
        assert(idx !== -1);
        node.mount.mounts.splice(idx, 1);
      },lookup:function(parent, name) {
        return parent.node_ops.lookup(parent, name);
      },mknod:function(path, mode, dev) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        if (!name || name === '.' || name === '..') {
          throw new FS.ErrnoError(28);
        }
        var err = FS.mayCreate(parent, name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.mknod) {
          throw new FS.ErrnoError(63);
        }
        return parent.node_ops.mknod(parent, name, mode, dev);
      },create:function(path, mode) {
        mode = mode !== undefined ? mode : 438 /* 0666 */;
        mode &= 4095;
        mode |= 32768;
        return FS.mknod(path, mode, 0);
      },mkdir:function(path, mode) {
        mode = mode !== undefined ? mode : 511 /* 0777 */;
        mode &= 511 | 512;
        mode |= 16384;
        return FS.mknod(path, mode, 0);
      },mkdirTree:function(path, mode) {
        var dirs = path.split('/');
        var d = '';
        for (var i = 0; i < dirs.length; ++i) {
          if (!dirs[i]) continue;
          d += '/' + dirs[i];
          try {
            FS.mkdir(d, mode);
          } catch(e) {
            if (e.errno != 20) throw e;
          }
        }
      },mkdev:function(path, mode, dev) {
        if (typeof(dev) === 'undefined') {
          dev = mode;
          mode = 438 /* 0666 */;
        }
        mode |= 8192;
        return FS.mknod(path, mode, dev);
      },symlink:function(oldpath, newpath) {
        if (!PATH_FS.resolve(oldpath)) {
          throw new FS.ErrnoError(44);
        }
        var lookup = FS.lookupPath(newpath, { parent: true });
        var parent = lookup.node;
        if (!parent) {
          throw new FS.ErrnoError(44);
        }
        var newname = PATH.basename(newpath);
        var err = FS.mayCreate(parent, newname);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.symlink) {
          throw new FS.ErrnoError(63);
        }
        return parent.node_ops.symlink(parent, newname, oldpath);
      },rename:function(old_path, new_path) {
        var old_dirname = PATH.dirname(old_path);
        var new_dirname = PATH.dirname(new_path);
        var old_name = PATH.basename(old_path);
        var new_name = PATH.basename(new_path);
        // parents must exist
        var lookup, old_dir, new_dir;
        try {
          lookup = FS.lookupPath(old_path, { parent: true });
          old_dir = lookup.node;
          lookup = FS.lookupPath(new_path, { parent: true });
          new_dir = lookup.node;
        } catch (e) {
          throw new FS.ErrnoError(10);
        }
        if (!old_dir || !new_dir) throw new FS.ErrnoError(44);
        // need to be part of the same mount
        if (old_dir.mount !== new_dir.mount) {
          throw new FS.ErrnoError(75);
        }
        // source must exist
        var old_node = FS.lookupNode(old_dir, old_name);
        // old path should not be an ancestor of the new path
        var relative = PATH_FS.relative(old_path, new_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(28);
        }
        // new path should not be an ancestor of the old path
        relative = PATH_FS.relative(new_path, old_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(55);
        }
        // see if the new path already exists
        var new_node;
        try {
          new_node = FS.lookupNode(new_dir, new_name);
        } catch (e) {
          // not fatal
        }
        // early out if nothing needs to change
        if (old_node === new_node) {
          return;
        }
        // we'll need to delete the old entry
        var isdir = FS.isDir(old_node.mode);
        var err = FS.mayDelete(old_dir, old_name, isdir);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // need delete permissions if we'll be overwriting.
        // need create permissions if new doesn't already exist.
        err = new_node ?
          FS.mayDelete(new_dir, new_name, isdir) :
          FS.mayCreate(new_dir, new_name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!old_dir.node_ops.rename) {
          throw new FS.ErrnoError(63);
        }
        if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
          throw new FS.ErrnoError(10);
        }
        // if we are going to change the parent, check write permissions
        if (new_dir !== old_dir) {
          err = FS.nodePermissions(old_dir, 'w');
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        try {
          if (FS.trackingDelegate['willMovePath']) {
            FS.trackingDelegate['willMovePath'](old_path, new_path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
        // remove the node from the lookup hash
        FS.hashRemoveNode(old_node);
        // do the underlying fs rename
        try {
          old_dir.node_ops.rename(old_node, new_dir, new_name);
        } catch (e) {
          throw e;
        } finally {
          // add the node back to the hash (in case node_ops.rename
          // changed its name)
          FS.hashAddNode(old_node);
        }
        try {
          if (FS.trackingDelegate['onMovePath']) FS.trackingDelegate['onMovePath'](old_path, new_path);
        } catch(e) {
          console.log("FS.trackingDelegate['onMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
      },rmdir:function(path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, true);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.rmdir) {
          throw new FS.ErrnoError(63);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(10);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.rmdir(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readdir:function(path) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        if (!node.node_ops.readdir) {
          throw new FS.ErrnoError(54);
        }
        return node.node_ops.readdir(node);
      },unlink:function(path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, false);
        if (err) {
          // According to POSIX, we should map EISDIR to EPERM, but
          // we instead do what Linux does (and we must, as we use
          // the musl linux libc).
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.unlink) {
          throw new FS.ErrnoError(63);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(10);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.unlink(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readlink:function(path) {
        var lookup = FS.lookupPath(path);
        var link = lookup.node;
        if (!link) {
          throw new FS.ErrnoError(44);
        }
        if (!link.node_ops.readlink) {
          throw new FS.ErrnoError(28);
        }
        return PATH_FS.resolve(FS.getPath(link.parent), link.node_ops.readlink(link));
      },stat:function(path, dontFollow) {
        var lookup = FS.lookupPath(path, { follow: !dontFollow });
        var node = lookup.node;
        if (!node) {
          throw new FS.ErrnoError(44);
        }
        if (!node.node_ops.getattr) {
          throw new FS.ErrnoError(63);
        }
        return node.node_ops.getattr(node);
      },lstat:function(path) {
        return FS.stat(path, true);
      },chmod:function(path, mode, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(63);
        }
        node.node_ops.setattr(node, {
          mode: (mode & 4095) | (node.mode & ~4095),
          timestamp: Date.now()
        });
      },lchmod:function(path, mode) {
        FS.chmod(path, mode, true);
      },fchmod:function(fd, mode) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(8);
        }
        FS.chmod(stream.node, mode);
      },chown:function(path, uid, gid, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(63);
        }
        node.node_ops.setattr(node, {
          timestamp: Date.now()
          // we ignore the uid / gid for now
        });
      },lchown:function(path, uid, gid) {
        FS.chown(path, uid, gid, true);
      },fchown:function(fd, uid, gid) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(8);
        }
        FS.chown(stream.node, uid, gid);
      },truncate:function(path, len) {
        if (len < 0) {
          throw new FS.ErrnoError(28);
        }
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: true });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(63);
        }
        if (FS.isDir(node.mode)) {
          throw new FS.ErrnoError(31);
        }
        if (!FS.isFile(node.mode)) {
          throw new FS.ErrnoError(28);
        }
        var err = FS.nodePermissions(node, 'w');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        node.node_ops.setattr(node, {
          size: len,
          timestamp: Date.now()
        });
      },ftruncate:function(fd, len) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(8);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(28);
        }
        FS.truncate(stream.node, len);
      },utime:function(path, atime, mtime) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        node.node_ops.setattr(node, {
          timestamp: Math.max(atime, mtime)
        });
      },open:function(path, flags, mode, fd_start, fd_end) {
        if (path === "") {
          throw new FS.ErrnoError(44);
        }
        flags = typeof flags === 'string' ? FS.modeStringToFlags(flags) : flags;
        mode = typeof mode === 'undefined' ? 438 /* 0666 */ : mode;
        if ((flags & 64)) {
          mode = (mode & 4095) | 32768;
        } else {
          mode = 0;
        }
        var node;
        if (typeof path === 'object') {
          node = path;
        } else {
          path = PATH.normalize(path);
          try {
            var lookup = FS.lookupPath(path, {
              follow: !(flags & 131072)
            });
            node = lookup.node;
          } catch (e) {
            // ignore
          }
        }
        // perhaps we need to create the node
        var created = false;
        if ((flags & 64)) {
          if (node) {
            // if O_CREAT and O_EXCL are set, error out if the node already exists
            if ((flags & 128)) {
              throw new FS.ErrnoError(20);
            }
          } else {
            // node doesn't exist, try to create it
            node = FS.mknod(path, mode, 0);
            created = true;
          }
        }
        if (!node) {
          throw new FS.ErrnoError(44);
        }
        // can't truncate a device
        if (FS.isChrdev(node.mode)) {
          flags &= ~512;
        }
        // if asked only for a directory, then this must be one
        if ((flags & 65536) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(54);
        }
        // check permissions, if this is not a file we just created now (it is ok to
        // create and write to a file with read-only permissions; it is read-only
        // for later use)
        if (!created) {
          var err = FS.mayOpen(node, flags);
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        // do truncation if necessary
        if ((flags & 512)) {
          FS.truncate(node, 0);
        }
        // we've already handled these, don't pass down to the underlying vfs
        flags &= ~(128 | 512);
  
        // register the stream with the filesystem
        var stream = FS.createStream({
          node: node,
          path: FS.getPath(node),  // we want the absolute path to the node
          flags: flags,
          seekable: true,
          position: 0,
          stream_ops: node.stream_ops,
          // used by the file family libc calls (fopen, fwrite, ferror, etc.)
          ungotten: [],
          error: false
        }, fd_start, fd_end);
        // call the new stream's open function
        if (stream.stream_ops.open) {
          stream.stream_ops.open(stream);
        }
        if (Module['logReadFiles'] && !(flags & 1)) {
          if (!FS.readFiles) FS.readFiles = {};
          if (!(path in FS.readFiles)) {
            FS.readFiles[path] = 1;
            console.log("FS.trackingDelegate error on read file: " + path);
          }
        }
        try {
          if (FS.trackingDelegate['onOpenFile']) {
            var trackingFlags = 0;
            if ((flags & 2097155) !== 1) {
              trackingFlags |= FS.tracking.openFlags.READ;
            }
            if ((flags & 2097155) !== 0) {
              trackingFlags |= FS.tracking.openFlags.WRITE;
            }
            FS.trackingDelegate['onOpenFile'](path, trackingFlags);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['onOpenFile']('"+path+"', flags) threw an exception: " + e.message);
        }
        return stream;
      },close:function(stream) {
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(8);
        }
        if (stream.getdents) stream.getdents = null; // free readdir state
        try {
          if (stream.stream_ops.close) {
            stream.stream_ops.close(stream);
          }
        } catch (e) {
          throw e;
        } finally {
          FS.closeStream(stream.fd);
        }
        stream.fd = null;
      },isClosed:function(stream) {
        return stream.fd === null;
      },llseek:function(stream, offset, whence) {
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(8);
        }
        if (!stream.seekable || !stream.stream_ops.llseek) {
          throw new FS.ErrnoError(70);
        }
        if (whence != 0 && whence != 1 && whence != 2) {
          throw new FS.ErrnoError(28);
        }
        stream.position = stream.stream_ops.llseek(stream, offset, whence);
        stream.ungotten = [];
        return stream.position;
      },read:function(stream, buffer, offset, length, position) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(28);
        }
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(8);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(8);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(31);
        }
        if (!stream.stream_ops.read) {
          throw new FS.ErrnoError(28);
        }
        var seeking = typeof position !== 'undefined';
        if (!seeking) {
          position = stream.position;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(70);
        }
        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
        if (!seeking) stream.position += bytesRead;
        return bytesRead;
      },write:function(stream, buffer, offset, length, position, canOwn) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(28);
        }
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(8);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(8);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(31);
        }
        if (!stream.stream_ops.write) {
          throw new FS.ErrnoError(28);
        }
        if (stream.flags & 1024) {
          // seek to the end before writing in append mode
          FS.llseek(stream, 0, 2);
        }
        var seeking = typeof position !== 'undefined';
        if (!seeking) {
          position = stream.position;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(70);
        }
        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
        if (!seeking) stream.position += bytesWritten;
        try {
          if (stream.path && FS.trackingDelegate['onWriteToFile']) FS.trackingDelegate['onWriteToFile'](stream.path);
        } catch(e) {
          console.log("FS.trackingDelegate['onWriteToFile']('"+stream.path+"') threw an exception: " + e.message);
        }
        return bytesWritten;
      },allocate:function(stream, offset, length) {
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(8);
        }
        if (offset < 0 || length <= 0) {
          throw new FS.ErrnoError(28);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(8);
        }
        if (!FS.isFile(stream.node.mode) && !FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(43);
        }
        if (!stream.stream_ops.allocate) {
          throw new FS.ErrnoError(138);
        }
        stream.stream_ops.allocate(stream, offset, length);
      },mmap:function(stream, buffer, offset, length, position, prot, flags) {
        // User requests writing to file (prot & PROT_WRITE != 0).
        // Checking if we have permissions to write to the file unless
        // MAP_PRIVATE flag is set. According to POSIX spec it is possible
        // to write to file opened in read-only mode with MAP_PRIVATE flag,
        // as all modifications will be visible only in the memory of
        // the current process.
        if ((prot & 2) !== 0
            && (flags & 2) === 0
            && (stream.flags & 2097155) !== 2) {
          throw new FS.ErrnoError(2);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(2);
        }
        if (!stream.stream_ops.mmap) {
          throw new FS.ErrnoError(43);
        }
        return stream.stream_ops.mmap(stream, buffer, offset, length, position, prot, flags);
      },msync:function(stream, buffer, offset, length, mmapFlags) {
        if (!stream || !stream.stream_ops.msync) {
          return 0;
        }
        return stream.stream_ops.msync(stream, buffer, offset, length, mmapFlags);
      },munmap:function(stream) {
        return 0;
      },ioctl:function(stream, cmd, arg) {
        if (!stream.stream_ops.ioctl) {
          throw new FS.ErrnoError(59);
        }
        return stream.stream_ops.ioctl(stream, cmd, arg);
      },readFile:function(path, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'r';
        opts.encoding = opts.encoding || 'binary';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var ret;
        var stream = FS.open(path, opts.flags);
        var stat = FS.stat(path);
        var length = stat.size;
        var buf = new Uint8Array(length);
        FS.read(stream, buf, 0, length, 0);
        if (opts.encoding === 'utf8') {
          ret = UTF8ArrayToString(buf, 0);
        } else if (opts.encoding === 'binary') {
          ret = buf;
        }
        FS.close(stream);
        return ret;
      },writeFile:function(path, data, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'w';
        var stream = FS.open(path, opts.flags, opts.mode);
        if (typeof data === 'string') {
          var buf = new Uint8Array(lengthBytesUTF8(data)+1);
          var actualNumBytes = stringToUTF8Array(data, buf, 0, buf.length);
          FS.write(stream, buf, 0, actualNumBytes, undefined, opts.canOwn);
        } else if (ArrayBuffer.isView(data)) {
          FS.write(stream, data, 0, data.byteLength, undefined, opts.canOwn);
        } else {
          throw new Error('Unsupported data type');
        }
        FS.close(stream);
      },cwd:function() {
        return FS.currentPath;
      },chdir:function(path) {
        var lookup = FS.lookupPath(path, { follow: true });
        if (lookup.node === null) {
          throw new FS.ErrnoError(44);
        }
        if (!FS.isDir(lookup.node.mode)) {
          throw new FS.ErrnoError(54);
        }
        var err = FS.nodePermissions(lookup.node, 'x');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        FS.currentPath = lookup.path;
      },createDefaultDirectories:function() {
        FS.mkdir('/tmp');
        FS.mkdir('/home');
        FS.mkdir('/home/web_user');
      },createDefaultDevices:function() {
        // create /dev
        FS.mkdir('/dev');
        // setup /dev/null
        FS.registerDevice(FS.makedev(1, 3), {
          read: function() { return 0; },
          write: function(stream, buffer, offset, length, pos) { return length; }
        });
        FS.mkdev('/dev/null', FS.makedev(1, 3));
        // setup /dev/tty and /dev/tty1
        // stderr needs to print output using Module['printErr']
        // so we register a second tty just for it.
        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
        FS.mkdev('/dev/tty', FS.makedev(5, 0));
        FS.mkdev('/dev/tty1', FS.makedev(6, 0));
        // setup /dev/[u]random
        var random_device;
        if (typeof crypto === 'object' && typeof crypto['getRandomValues'] === 'function') {
          // for modern web browsers
          var randomBuffer = new Uint8Array(1);
          random_device = function() { crypto.getRandomValues(randomBuffer); return randomBuffer[0]; };
        } else
        if (ENVIRONMENT_IS_NODE) {
          // for nodejs with or without crypto support included
          try {
            var crypto_module = require('crypto');
            // nodejs has crypto support
            random_device = function() { return crypto_module['randomBytes'](1)[0]; };
          } catch (e) {
            // nodejs doesn't have crypto support
          }
        } else
        {}
        if (!random_device) {
          // we couldn't find a proper implementation, as Math.random() is not suitable for /dev/random, see emscripten-core/emscripten/pull/7096
          random_device = function() { abort("no cryptographic support found for random_device. consider polyfilling it if you want to use something insecure like Math.random(), e.g. put this in a --pre-js: var crypto = { getRandomValues: function(array) { for (var i = 0; i < array.length; i++) array[i] = (Math.random()*256)|0 } };"); };
        }
        FS.createDevice('/dev', 'random', random_device);
        FS.createDevice('/dev', 'urandom', random_device);
        // we're not going to emulate the actual shm device,
        // just create the tmp dirs that reside in it commonly
        FS.mkdir('/dev/shm');
        FS.mkdir('/dev/shm/tmp');
      },createSpecialDirectories:function() {
        // create /proc/self/fd which allows /proc/self/fd/6 => readlink gives the name of the stream for fd 6 (see test_unistd_ttyname)
        FS.mkdir('/proc');
        FS.mkdir('/proc/self');
        FS.mkdir('/proc/self/fd');
        FS.mount({
          mount: function() {
            var node = FS.createNode('/proc/self', 'fd', 16384 | 511 /* 0777 */, 73);
            node.node_ops = {
              lookup: function(parent, name) {
                var fd = +name;
                var stream = FS.getStream(fd);
                if (!stream) throw new FS.ErrnoError(8);
                var ret = {
                  parent: null,
                  mount: { mountpoint: 'fake' },
                  node_ops: { readlink: function() { return stream.path } }
                };
                ret.parent = ret; // make it look like a simple root node
                return ret;
              }
            };
            return node;
          }
        }, {}, '/proc/self/fd');
      },createStandardStreams:function() {
        // TODO deprecate the old functionality of a single
        // input / output callback and that utilizes FS.createDevice
        // and instead require a unique set of stream ops
  
        // by default, we symlink the standard streams to the
        // default tty devices. however, if the standard streams
        // have been overwritten we create a unique device for
        // them instead.
        if (Module['stdin']) {
          FS.createDevice('/dev', 'stdin', Module['stdin']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdin');
        }
        if (Module['stdout']) {
          FS.createDevice('/dev', 'stdout', null, Module['stdout']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdout');
        }
        if (Module['stderr']) {
          FS.createDevice('/dev', 'stderr', null, Module['stderr']);
        } else {
          FS.symlink('/dev/tty1', '/dev/stderr');
        }
  
        // open default streams for the stdin, stdout and stderr devices
        var stdin = FS.open('/dev/stdin', 'r');
        var stdout = FS.open('/dev/stdout', 'w');
        var stderr = FS.open('/dev/stderr', 'w');
        assert(stdin.fd === 0, 'invalid handle for stdin (' + stdin.fd + ')');
        assert(stdout.fd === 1, 'invalid handle for stdout (' + stdout.fd + ')');
        assert(stderr.fd === 2, 'invalid handle for stderr (' + stderr.fd + ')');
      },ensureErrnoError:function() {
        if (FS.ErrnoError) return;
        FS.ErrnoError = function ErrnoError(errno, node) {
          this.node = node;
          this.setErrno = function(errno) {
            this.errno = errno;
            for (var key in ERRNO_CODES) {
              if (ERRNO_CODES[key] === errno) {
                this.code = key;
                break;
              }
            }
          };
          this.setErrno(errno);
          this.message = ERRNO_MESSAGES[errno];
  
          // Try to get a maximally helpful stack trace. On Node.js, getting Error.stack
          // now ensures it shows what we want.
          if (this.stack) {
            // Define the stack property for Node.js 4, which otherwise errors on the next line.
            Object.defineProperty(this, "stack", { value: (new Error).stack, writable: true });
            this.stack = demangleAll(this.stack);
          }
        };
        FS.ErrnoError.prototype = new Error();
        FS.ErrnoError.prototype.constructor = FS.ErrnoError;
        // Some errors may happen quite a bit, to avoid overhead we reuse them (and suffer a lack of stack info)
        [44].forEach(function(code) {
          FS.genericErrors[code] = new FS.ErrnoError(code);
          FS.genericErrors[code].stack = '<generic error, no stack>';
        });
      },staticInit:function() {
        FS.ensureErrnoError();
  
        FS.nameTable = new Array(4096);
  
        FS.mount(MEMFS, {}, '/');
  
        FS.createDefaultDirectories();
        FS.createDefaultDevices();
        FS.createSpecialDirectories();
  
        FS.filesystems = {
          'MEMFS': MEMFS,
        };
      },init:function(input, output, error) {
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;
  
        FS.ensureErrnoError();
  
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        Module['stdin'] = input || Module['stdin'];
        Module['stdout'] = output || Module['stdout'];
        Module['stderr'] = error || Module['stderr'];
  
        FS.createStandardStreams();
      },quit:function() {
        FS.init.initialized = false;
        // force-flush all streams, so we get musl std streams printed out
        var fflush = Module['_fflush'];
        if (fflush) fflush(0);
        // close all of our streams
        for (var i = 0; i < FS.streams.length; i++) {
          var stream = FS.streams[i];
          if (!stream) {
            continue;
          }
          FS.close(stream);
        }
      },getMode:function(canRead, canWrite) {
        var mode = 0;
        if (canRead) mode |= 292 | 73;
        if (canWrite) mode |= 146;
        return mode;
      },joinPath:function(parts, forceRelative) {
        var path = PATH.join.apply(null, parts);
        if (forceRelative && path[0] == '/') path = path.substr(1);
        return path;
      },absolutePath:function(relative, base) {
        return PATH_FS.resolve(base, relative);
      },standardizePath:function(path) {
        return PATH.normalize(path);
      },findObject:function(path, dontResolveLastLink) {
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          ___setErrNo(ret.error);
          return null;
        }
      },analyzePath:function(path, dontResolveLastLink) {
        // operate from within the context of the symlink's target
        try {
          var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          path = lookup.path;
        } catch (e) {
        }
        var ret = {
          isRoot: false, exists: false, error: 0, name: null, path: null, object: null,
          parentExists: false, parentPath: null, parentObject: null
        };
        try {
          var lookup = FS.lookupPath(path, { parent: true });
          ret.parentExists = true;
          ret.parentPath = lookup.path;
          ret.parentObject = lookup.node;
          ret.name = PATH.basename(path);
          lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          ret.exists = true;
          ret.path = lookup.path;
          ret.object = lookup.node;
          ret.name = lookup.node.name;
          ret.isRoot = lookup.path === '/';
        } catch (e) {
          ret.error = e.errno;
        };
        return ret;
      },createFolder:function(parent, name, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.mkdir(path, mode);
      },createPath:function(parent, path, canRead, canWrite) {
        parent = typeof parent === 'string' ? parent : FS.getPath(parent);
        var parts = path.split('/').reverse();
        while (parts.length) {
          var part = parts.pop();
          if (!part) continue;
          var current = PATH.join2(parent, part);
          try {
            FS.mkdir(current);
          } catch (e) {
            // ignore EEXIST
          }
          parent = current;
        }
        return current;
      },createFile:function(parent, name, properties, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.create(path, mode);
      },createDataFile:function(parent, name, data, canRead, canWrite, canOwn) {
        var path = name ? PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name) : parent;
        var mode = FS.getMode(canRead, canWrite);
        var node = FS.create(path, mode);
        if (data) {
          if (typeof data === 'string') {
            var arr = new Array(data.length);
            for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
            data = arr;
          }
          // make sure we can write to the file
          FS.chmod(node, mode | 146);
          var stream = FS.open(node, 'w');
          FS.write(stream, data, 0, data.length, 0, canOwn);
          FS.close(stream);
          FS.chmod(node, mode);
        }
        return node;
      },createDevice:function(parent, name, input, output) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(!!input, !!output);
        if (!FS.createDevice.major) FS.createDevice.major = 64;
        var dev = FS.makedev(FS.createDevice.major++, 0);
        // Create a fake device that a set of stream ops to emulate
        // the old behavior.
        FS.registerDevice(dev, {
          open: function(stream) {
            stream.seekable = false;
          },
          close: function(stream) {
            // flush any pending line data
            if (output && output.buffer && output.buffer.length) {
              output(10);
            }
          },
          read: function(stream, buffer, offset, length, pos /* ignored */) {
            var bytesRead = 0;
            for (var i = 0; i < length; i++) {
              var result;
              try {
                result = input();
              } catch (e) {
                throw new FS.ErrnoError(29);
              }
              if (result === undefined && bytesRead === 0) {
                throw new FS.ErrnoError(6);
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              buffer[offset+i] = result;
            }
            if (bytesRead) {
              stream.node.timestamp = Date.now();
            }
            return bytesRead;
          },
          write: function(stream, buffer, offset, length, pos) {
            for (var i = 0; i < length; i++) {
              try {
                output(buffer[offset+i]);
              } catch (e) {
                throw new FS.ErrnoError(29);
              }
            }
            if (length) {
              stream.node.timestamp = Date.now();
            }
            return i;
          }
        });
        return FS.mkdev(path, mode, dev);
      },createLink:function(parent, name, target, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        return FS.symlink(target, path);
      },forceLoadFile:function(obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (read_) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(read_(obj.url), true);
            obj.usedBytes = obj.contents.length;
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) ___setErrNo(29);
        return success;
      },createLazyFile:function(parent, name, url, canRead, canWrite) {
        // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
        function LazyUint8Array() {
          this.lengthKnown = false;
          this.chunks = []; // Loaded chunks. Index is the chunk number
        }
        LazyUint8Array.prototype.get = function LazyUint8Array_get(idx) {
          if (idx > this.length-1 || idx < 0) {
            return undefined;
          }
          var chunkOffset = idx % this.chunkSize;
          var chunkNum = (idx / this.chunkSize)|0;
          return this.getter(chunkNum)[chunkOffset];
        };
        LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
          this.getter = getter;
        };
        LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
          // Find length
          var xhr = new XMLHttpRequest();
          xhr.open('HEAD', url, false);
          xhr.send(null);
          if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
          var datalength = Number(xhr.getResponseHeader("Content-length"));
          var header;
          var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
          var usesGzip = (header = xhr.getResponseHeader("Content-Encoding")) && header === "gzip";
  
          var chunkSize = 1024*1024; // Chunk size in bytes
  
          if (!hasByteServing) chunkSize = datalength;
  
          // Function to get a range from the remote URL.
          var doXHR = (function(from, to) {
            if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
            if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
  
            // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
            var xhr = new XMLHttpRequest();
            xhr.open('GET', url, false);
            if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
  
            // Some hints to the browser that we want binary data.
            if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
            if (xhr.overrideMimeType) {
              xhr.overrideMimeType('text/plain; charset=x-user-defined');
            }
  
            xhr.send(null);
            if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
            if (xhr.response !== undefined) {
              return new Uint8Array(xhr.response || []);
            } else {
              return intArrayFromString(xhr.responseText || '', true);
            }
          });
          var lazyArray = this;
          lazyArray.setDataGetter(function(chunkNum) {
            var start = chunkNum * chunkSize;
            var end = (chunkNum+1) * chunkSize - 1; // including this byte
            end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
              lazyArray.chunks[chunkNum] = doXHR(start, end);
            }
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
            return lazyArray.chunks[chunkNum];
          });
  
          if (usesGzip || !datalength) {
            // if the server uses gzip or doesn't supply the length, we have to download the whole file to get the (uncompressed) length
            chunkSize = datalength = 1; // this will force getter(0)/doXHR do download the whole file
            datalength = this.getter(0).length;
            chunkSize = datalength;
            console.log("LazyFiles on gzip forces download of the whole file when length is accessed");
          }
  
          this._length = datalength;
          this._chunkSize = chunkSize;
          this.lengthKnown = true;
        };
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          var lazyArray = new LazyUint8Array();
          Object.defineProperties(lazyArray, {
            length: {
              get: function() {
                if(!this.lengthKnown) {
                  this.cacheLength();
                }
                return this._length;
              }
            },
            chunkSize: {
              get: function() {
                if(!this.lengthKnown) {
                  this.cacheLength();
                }
                return this._chunkSize;
              }
            }
          });
  
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
  
        var node = FS.createFile(parent, name, properties, canRead, canWrite);
        // This is a total hack, but I want to get this lazy file code out of the
        // core of MEMFS. If we want to keep this lazy file concept I feel it should
        // be its own thin LAZYFS proxying calls to MEMFS.
        if (properties.contents) {
          node.contents = properties.contents;
        } else if (properties.url) {
          node.contents = null;
          node.url = properties.url;
        }
        // Add a function that defers querying the file size until it is asked the first time.
        Object.defineProperties(node, {
          usedBytes: {
            get: function() { return this.contents.length; }
          }
        });
        // override each stream op with one that tries to force load the lazy file first
        var stream_ops = {};
        var keys = Object.keys(node.stream_ops);
        keys.forEach(function(key) {
          var fn = node.stream_ops[key];
          stream_ops[key] = function forceLoadLazyFile() {
            if (!FS.forceLoadFile(node)) {
              throw new FS.ErrnoError(29);
            }
            return fn.apply(null, arguments);
          };
        });
        // use a custom read function
        stream_ops.read = function stream_ops_read(stream, buffer, offset, length, position) {
          if (!FS.forceLoadFile(node)) {
            throw new FS.ErrnoError(29);
          }
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (contents.slice) { // normal array
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          } else {
            for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
              buffer[offset + i] = contents.get(position + i);
            }
          }
          return size;
        };
        node.stream_ops = stream_ops;
        return node;
      },createPreloadedFile:function(parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn, preFinish) {
        Browser.init(); // XXX perhaps this method should move onto Browser?
        // TODO we should allow people to just pass in a complete filename instead
        // of parent and name being that we just join them anyways
        var fullname = name ? PATH_FS.resolve(PATH.join2(parent, name)) : parent;
        var dep = getUniqueRunDependency('cp ' + fullname); // might have several active requests for the same fullname
        function processData(byteArray) {
          function finish(byteArray) {
            if (preFinish) preFinish();
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
            }
            if (onload) onload();
            removeRunDependency(dep);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency(dep);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency(dep);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },indexedDB:function() {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_NAME:function() {
        return 'EM_FS_' + window.location.pathname;
      },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function(paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
          console.log('creating db');
          var db = openRequest.result;
          db.createObjectStore(FS.DB_STORE_NAME);
        };
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          var transaction = db.transaction([FS.DB_STORE_NAME], 'readwrite');
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var putRequest = files.put(FS.analyzePath(path).object.contents, path);
            putRequest.onsuccess = function putRequest_onsuccess() { ok++; if (ok + fail == total) finish() };
            putRequest.onerror = function putRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      },loadFilesFromDB:function(paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = onerror; // no database to load from
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          try {
            var transaction = db.transaction([FS.DB_STORE_NAME], 'readonly');
          } catch(e) {
            onerror(e);
            return;
          }
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var getRequest = files.get(path);
            getRequest.onsuccess = function getRequest_onsuccess() {
              if (FS.analyzePath(path).exists) {
                FS.unlink(path);
              }
              FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
              ok++;
              if (ok + fail == total) finish();
            };
            getRequest.onerror = function getRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      }};var SYSCALLS={DEFAULT_POLLMASK:5,mappings:{},umask:511,calculateAt:function(dirfd, path) {
        if (path[0] !== '/') {
          // relative path
          var dir;
          if (dirfd === -100) {
            dir = FS.cwd();
          } else {
            var dirstream = FS.getStream(dirfd);
            if (!dirstream) throw new FS.ErrnoError(8);
            dir = dirstream.path;
          }
          path = PATH.join2(dir, path);
        }
        return path;
      },doStat:function(func, path, buf) {
        try {
          var stat = func(path);
        } catch (e) {
          if (e && e.node && PATH.normalize(path) !== PATH.normalize(FS.getPath(e.node))) {
            // an error occurred while trying to look up the path; we should just report ENOTDIR
            return -54;
          }
          throw e;
        }
        HEAP32[((buf)>>2)]=stat.dev;
        HEAP32[(((buf)+(4))>>2)]=0;
        HEAP32[(((buf)+(8))>>2)]=stat.ino;
        HEAP32[(((buf)+(12))>>2)]=stat.mode;
        HEAP32[(((buf)+(16))>>2)]=stat.nlink;
        HEAP32[(((buf)+(20))>>2)]=stat.uid;
        HEAP32[(((buf)+(24))>>2)]=stat.gid;
        HEAP32[(((buf)+(28))>>2)]=stat.rdev;
        HEAP32[(((buf)+(32))>>2)]=0;
        (tempI64 = [stat.size>>>0,(tempDouble=stat.size,(+(Math_abs(tempDouble))) >= (+1) ? (tempDouble > (+0) ? ((Math_min((+(Math_floor((tempDouble)/(+4294967296)))), (+4294967295)))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/(+4294967296))))))>>>0) : 0)],HEAP32[(((buf)+(40))>>2)]=tempI64[0],HEAP32[(((buf)+(44))>>2)]=tempI64[1]);
        HEAP32[(((buf)+(48))>>2)]=4096;
        HEAP32[(((buf)+(52))>>2)]=stat.blocks;
        HEAP32[(((buf)+(56))>>2)]=(stat.atime.getTime() / 1000)|0;
        HEAP32[(((buf)+(60))>>2)]=0;
        HEAP32[(((buf)+(64))>>2)]=(stat.mtime.getTime() / 1000)|0;
        HEAP32[(((buf)+(68))>>2)]=0;
        HEAP32[(((buf)+(72))>>2)]=(stat.ctime.getTime() / 1000)|0;
        HEAP32[(((buf)+(76))>>2)]=0;
        (tempI64 = [stat.ino>>>0,(tempDouble=stat.ino,(+(Math_abs(tempDouble))) >= (+1) ? (tempDouble > (+0) ? ((Math_min((+(Math_floor((tempDouble)/(+4294967296)))), (+4294967295)))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/(+4294967296))))))>>>0) : 0)],HEAP32[(((buf)+(80))>>2)]=tempI64[0],HEAP32[(((buf)+(84))>>2)]=tempI64[1]);
        return 0;
      },doMsync:function(addr, stream, len, flags) {
        var buffer = new Uint8Array(HEAPU8.subarray(addr, addr + len));
        FS.msync(stream, buffer, 0, len, flags);
      },doMkdir:function(path, mode) {
        // remove a trailing slash, if one - /a/b/ has basename of '', but
        // we want to create b in the context of this function
        path = PATH.normalize(path);
        if (path[path.length-1] === '/') path = path.substr(0, path.length-1);
        FS.mkdir(path, mode, 0);
        return 0;
      },doMknod:function(path, mode, dev) {
        // we don't want this in the JS API as it uses mknod to create all nodes.
        switch (mode & 61440) {
          case 32768:
          case 8192:
          case 24576:
          case 4096:
          case 49152:
            break;
          default: return -28;
        }
        FS.mknod(path, mode, dev);
        return 0;
      },doReadlink:function(path, buf, bufsize) {
        if (bufsize <= 0) return -28;
        var ret = FS.readlink(path);
  
        var len = Math.min(bufsize, lengthBytesUTF8(ret));
        var endChar = HEAP8[buf+len];
        stringToUTF8(ret, buf, bufsize+1);
        // readlink is one of the rare functions that write out a C string, but does never append a null to the output buffer(!)
        // stringToUTF8() always appends a null byte, so restore the character under the null byte after the write.
        HEAP8[buf+len] = endChar;
  
        return len;
      },doAccess:function(path, amode) {
        if (amode & ~7) {
          // need a valid mode
          return -28;
        }
        var node;
        var lookup = FS.lookupPath(path, { follow: true });
        node = lookup.node;
        if (!node) {
          return -44;
        }
        var perms = '';
        if (amode & 4) perms += 'r';
        if (amode & 2) perms += 'w';
        if (amode & 1) perms += 'x';
        if (perms /* otherwise, they've just passed F_OK */ && FS.nodePermissions(node, perms)) {
          return -2;
        }
        return 0;
      },doDup:function(path, flags, suggestFD) {
        var suggest = FS.getStream(suggestFD);
        if (suggest) FS.close(suggest);
        return FS.open(path, flags, 0, suggestFD, suggestFD).fd;
      },doReadv:function(stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.read(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
          if (curr < len) break; // nothing more to read
        }
        return ret;
      },doWritev:function(stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.write(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
        }
        return ret;
      },varargs:0,get:function(varargs) {
        SYSCALLS.varargs += 4;
        var ret = HEAP32[(((SYSCALLS.varargs)-(4))>>2)];
        return ret;
      },getStr:function() {
        var ret = UTF8ToString(SYSCALLS.get());
        return ret;
      },getStreamFromFD:function(fd) {
        // TODO: when all syscalls use wasi, can remove the next line
        if (fd === undefined) fd = SYSCALLS.get();
        var stream = FS.getStream(fd);
        if (!stream) throw new FS.ErrnoError(8);
        return stream;
      },get64:function() {
        var low = SYSCALLS.get(), high = SYSCALLS.get();
        if (low >= 0) assert(high === 0);
        else assert(high === -1);
        return low;
      },getZero:function() {
        assert(SYSCALLS.get() === 0);
      }};function ___syscall195(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // SYS_stat64
      var path = SYSCALLS.getStr(), buf = SYSCALLS.get();
      return SYSCALLS.doStat(FS.stat, path, buf);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall221(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // fcntl64
      var stream = SYSCALLS.getStreamFromFD(), cmd = SYSCALLS.get();
      switch (cmd) {
        case 0: {
          var arg = SYSCALLS.get();
          if (arg < 0) {
            return -28;
          }
          var newStream;
          newStream = FS.open(stream.path, stream.flags, 0, arg);
          return newStream.fd;
        }
        case 1:
        case 2:
          return 0;  // FD_CLOEXEC makes no sense for a single process.
        case 3:
          return stream.flags;
        case 4: {
          var arg = SYSCALLS.get();
          stream.flags |= arg;
          return 0;
        }
        case 12:
        /* case 12: Currently in musl F_GETLK64 has same value as F_GETLK, so omitted to avoid duplicate case blocks. If that changes, uncomment this */ {
          
          var arg = SYSCALLS.get();
          var offset = 0;
          // We're always unlocked.
          HEAP16[(((arg)+(offset))>>1)]=2;
          return 0;
        }
        case 13:
        case 14:
        /* case 13: Currently in musl F_SETLK64 has same value as F_SETLK, so omitted to avoid duplicate case blocks. If that changes, uncomment this */
        /* case 14: Currently in musl F_SETLKW64 has same value as F_SETLKW, so omitted to avoid duplicate case blocks. If that changes, uncomment this */
          
          
          return 0; // Pretend that the locking is successful.
        case 16:
        case 8:
          return -28; // These are for sockets. We don't have them fully implemented yet.
        case 9:
          // musl trusts getown return values, due to a bug where they must be, as they overlap with errors. just return -1 here, so fnctl() returns that, and we set errno ourselves.
          ___setErrNo(28);
          return -1;
        default: {
          return -28;
        }
      }
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall5(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // open
      var pathname = SYSCALLS.getStr(), flags = SYSCALLS.get(), mode = SYSCALLS.get(); // optional TODO
      var stream = FS.open(pathname, flags, mode);
      return stream.fd;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall54(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // ioctl
      var stream = SYSCALLS.getStreamFromFD(), op = SYSCALLS.get();
      switch (op) {
        case 21509:
        case 21505: {
          if (!stream.tty) return -59;
          return 0;
        }
        case 21510:
        case 21511:
        case 21512:
        case 21506:
        case 21507:
        case 21508: {
          if (!stream.tty) return -59;
          return 0; // no-op, not actually adjusting terminal settings
        }
        case 21519: {
          if (!stream.tty) return -59;
          var argp = SYSCALLS.get();
          HEAP32[((argp)>>2)]=0;
          return 0;
        }
        case 21520: {
          if (!stream.tty) return -59;
          return -28; // not supported
        }
        case 21531: {
          var argp = SYSCALLS.get();
          return FS.ioctl(stream, op, argp);
        }
        case 21523: {
          // TODO: in theory we should write to the winsize struct that gets
          // passed in, but for now musl doesn't read anything on it
          if (!stream.tty) return -59;
          return 0;
        }
        case 21524: {
          // TODO: technically, this ioctl call should change the window size.
          // but, since emscripten doesn't have any concept of a terminal window
          // yet, we'll just silently throw it away as we do TIOCGWINSZ
          if (!stream.tty) return -59;
          return 0;
        }
        default: abort('bad ioctl syscall ' + op);
      }
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  
  function __emscripten_syscall_munmap(addr, len) {
      if (addr === -1 || len === 0) {
        return -28;
      }
      // TODO: support unmmap'ing parts of allocations
      var info = SYSCALLS.mappings[addr];
      if (!info) return 0;
      if (len === info.len) {
        var stream = FS.getStream(info.fd);
        SYSCALLS.doMsync(addr, stream, len, info.flags);
        FS.munmap(stream);
        SYSCALLS.mappings[addr] = null;
        if (info.allocated) {
          _free(info.malloc);
        }
      }
      return 0;
    }function ___syscall91(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // munmap
      var addr = SYSCALLS.get(), len = SYSCALLS.get();
      return __emscripten_syscall_munmap(addr, len);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  
  
   
  
   
  
  function _llvm_cttz_i32(x) { // Note: Currently doesn't take isZeroUndef()
      x = x | 0;
      return (x ? (31 - (Math_clz32((x ^ (x - 1))) | 0) | 0) : 32) | 0;
    }  

  function ___unlock() {}

  
  function _fd_close(fd) {try {
  
      var stream = SYSCALLS.getStreamFromFD(fd);
      FS.close(stream);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return e.errno;
  }
  }function ___wasi_fd_close(
  ) {
  return _fd_close.apply(null, arguments)
  }

  
  function _fd_read(fd, iov, iovcnt, pnum) {try {
  
      var stream = SYSCALLS.getStreamFromFD(fd);
      var num = SYSCALLS.doReadv(stream, iov, iovcnt);
      HEAP32[((pnum)>>2)]=num
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return e.errno;
  }
  }function ___wasi_fd_read(
  ) {
  return _fd_read.apply(null, arguments)
  }

  
  function _fd_seek(fd, offset_low, offset_high, whence, newOffset) {try {
  
      var stream = SYSCALLS.getStreamFromFD(fd);
      var HIGH_OFFSET = 0x100000000; // 2^32
      // use an unsigned operator on low and shift high by 32-bits
      var offset = offset_high * HIGH_OFFSET + (offset_low >>> 0);
  
      var DOUBLE_LIMIT = 0x20000000000000; // 2^53
      // we also check for equality since DOUBLE_LIMIT + 1 == DOUBLE_LIMIT
      if (offset <= -DOUBLE_LIMIT || offset >= DOUBLE_LIMIT) {
        return -61;
      }
  
      FS.llseek(stream, offset, whence);
      (tempI64 = [stream.position>>>0,(tempDouble=stream.position,(+(Math_abs(tempDouble))) >= (+1) ? (tempDouble > (+0) ? ((Math_min((+(Math_floor((tempDouble)/(+4294967296)))), (+4294967295)))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/(+4294967296))))))>>>0) : 0)],HEAP32[((newOffset)>>2)]=tempI64[0],HEAP32[(((newOffset)+(4))>>2)]=tempI64[1]);
      if (stream.getdents && offset === 0 && whence === 0) stream.getdents = null; // reset readdir state
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return e.errno;
  }
  }function ___wasi_fd_seek(
  ) {
  return _fd_seek.apply(null, arguments)
  }

  
  function _fd_write(fd, iov, iovcnt, pnum) {try {
  
      var stream = SYSCALLS.getStreamFromFD(fd);
      var num = SYSCALLS.doWritev(stream, iov, iovcnt);
      HEAP32[((pnum)>>2)]=num
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return e.errno;
  }
  }function ___wasi_fd_write(
  ) {
  return _fd_write.apply(null, arguments)
  }

  function _abort() {
      abort();
    }

   

   

  
  
  
  
  function _emscripten_set_main_loop_timing(mode, value) {
      Browser.mainLoop.timingMode = mode;
      Browser.mainLoop.timingValue = value;
  
      if (!Browser.mainLoop.func) {
        console.error('emscripten_set_main_loop_timing: Cannot set timing mode for main loop since a main loop does not exist! Call emscripten_set_main_loop first to set one up.');
        return 1; // Return non-zero on failure, can't set timing mode when there is no main loop.
      }
  
      if (mode == 0 /*EM_TIMING_SETTIMEOUT*/) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_setTimeout() {
          var timeUntilNextTick = Math.max(0, Browser.mainLoop.tickStartTime + value - _emscripten_get_now())|0;
          setTimeout(Browser.mainLoop.runner, timeUntilNextTick); // doing this each time means that on exception, we stop
        };
        Browser.mainLoop.method = 'timeout';
      } else if (mode == 1 /*EM_TIMING_RAF*/) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_rAF() {
          Browser.requestAnimationFrame(Browser.mainLoop.runner);
        };
        Browser.mainLoop.method = 'rAF';
      } else if (mode == 2 /*EM_TIMING_SETIMMEDIATE*/) {
        if (typeof setImmediate === 'undefined') {
          // Emulate setImmediate. (note: not a complete polyfill, we don't emulate clearImmediate() to keep code size to minimum, since not needed)
          var setImmediates = [];
          var emscriptenMainLoopMessageId = 'setimmediate';
          var Browser_setImmediate_messageHandler = function(event) {
            // When called in current thread or Worker, the main loop ID is structured slightly different to accommodate for --proxy-to-worker runtime listening to Worker events,
            // so check for both cases.
            if (event.data === emscriptenMainLoopMessageId || event.data.target === emscriptenMainLoopMessageId) {
              event.stopPropagation();
              setImmediates.shift()();
            }
          }
          addEventListener("message", Browser_setImmediate_messageHandler, true);
          setImmediate = function Browser_emulated_setImmediate(func) {
            setImmediates.push(func);
            if (ENVIRONMENT_IS_WORKER) {
              if (Module['setImmediates'] === undefined) Module['setImmediates'] = [];
              Module['setImmediates'].push(func);
              postMessage({target: emscriptenMainLoopMessageId}); // In --proxy-to-worker, route the message via proxyClient.js
            } else postMessage(emscriptenMainLoopMessageId, "*"); // On the main thread, can just send the message to itself.
          }
        }
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_setImmediate() {
          setImmediate(Browser.mainLoop.runner);
        };
        Browser.mainLoop.method = 'immediate';
      }
      return 0;
    }
  
  function _emscripten_get_now() { abort() }function _emscripten_set_main_loop(func, fps, simulateInfiniteLoop, arg, noSetTiming) {
      noExitRuntime = true;
  
      assert(!Browser.mainLoop.func, 'emscripten_set_main_loop: there can only be one main loop function at once: call emscripten_cancel_main_loop to cancel the previous one before setting a new one with different parameters.');
  
      Browser.mainLoop.func = func;
      Browser.mainLoop.arg = arg;
  
      var browserIterationFunc;
      if (typeof arg !== 'undefined') {
        browserIterationFunc = function() {
          Module['dynCall_vi'](func, arg);
        };
      } else {
        browserIterationFunc = function() {
          Module['dynCall_v'](func);
        };
      }
  
      var thisMainLoopId = Browser.mainLoop.currentlyRunningMainloop;
  
      Browser.mainLoop.runner = function Browser_mainLoop_runner() {
        if (ABORT) return;
        if (Browser.mainLoop.queue.length > 0) {
          var start = Date.now();
          var blocker = Browser.mainLoop.queue.shift();
          blocker.func(blocker.arg);
          if (Browser.mainLoop.remainingBlockers) {
            var remaining = Browser.mainLoop.remainingBlockers;
            var next = remaining%1 == 0 ? remaining-1 : Math.floor(remaining);
            if (blocker.counted) {
              Browser.mainLoop.remainingBlockers = next;
            } else {
              // not counted, but move the progress along a tiny bit
              next = next + 0.5; // do not steal all the next one's progress
              Browser.mainLoop.remainingBlockers = (8*remaining + next)/9;
            }
          }
          console.log('main loop blocker "' + blocker.name + '" took ' + (Date.now() - start) + ' ms'); //, left: ' + Browser.mainLoop.remainingBlockers);
          Browser.mainLoop.updateStatus();
  
          // catches pause/resume main loop from blocker execution
          if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  
          setTimeout(Browser.mainLoop.runner, 0);
          return;
        }
  
        // catch pauses from non-main loop sources
        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  
        // Implement very basic swap interval control
        Browser.mainLoop.currentFrameNumber = Browser.mainLoop.currentFrameNumber + 1 | 0;
        if (Browser.mainLoop.timingMode == 1/*EM_TIMING_RAF*/ && Browser.mainLoop.timingValue > 1 && Browser.mainLoop.currentFrameNumber % Browser.mainLoop.timingValue != 0) {
          // Not the scheduled time to render this frame - skip.
          Browser.mainLoop.scheduler();
          return;
        } else if (Browser.mainLoop.timingMode == 0/*EM_TIMING_SETTIMEOUT*/) {
          Browser.mainLoop.tickStartTime = _emscripten_get_now();
        }
  
        // Signal GL rendering layer that processing of a new frame is about to start. This helps it optimize
        // VBO double-buffering and reduce GPU stalls.
  
  
  
        if (Browser.mainLoop.method === 'timeout' && Module.ctx) {
          err('Looks like you are rendering without using requestAnimationFrame for the main loop. You should use 0 for the frame rate in emscripten_set_main_loop in order to use requestAnimationFrame, as that can greatly improve your frame rates!');
          Browser.mainLoop.method = ''; // just warn once per call to set main loop
        }
  
        Browser.mainLoop.runIter(browserIterationFunc);
  
        checkStackCookie();
  
        // catch pauses from the main loop itself
        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  
        // Queue new audio data. This is important to be right after the main loop invocation, so that we will immediately be able
        // to queue the newest produced audio samples.
        // TODO: Consider adding pre- and post- rAF callbacks so that GL.newRenderingFrameStarted() and SDL.audio.queueNewAudioData()
        //       do not need to be hardcoded into this function, but can be more generic.
        if (typeof SDL === 'object' && SDL.audio && SDL.audio.queueNewAudioData) SDL.audio.queueNewAudioData();
  
        Browser.mainLoop.scheduler();
      }
  
      if (!noSetTiming) {
        if (fps && fps > 0) _emscripten_set_main_loop_timing(0/*EM_TIMING_SETTIMEOUT*/, 1000.0 / fps);
        else _emscripten_set_main_loop_timing(1/*EM_TIMING_RAF*/, 1); // Do rAF by rendering each frame (no decimating)
  
        Browser.mainLoop.scheduler();
      }
  
      if (simulateInfiniteLoop) {
        throw 'SimulateInfiniteLoop';
      }
    }var Browser={mainLoop:{scheduler:null,method:"",currentlyRunningMainloop:0,func:null,arg:0,timingMode:0,timingValue:0,currentFrameNumber:0,queue:[],pause:function() {
          Browser.mainLoop.scheduler = null;
          Browser.mainLoop.currentlyRunningMainloop++; // Incrementing this signals the previous main loop that it's now become old, and it must return.
        },resume:function() {
          Browser.mainLoop.currentlyRunningMainloop++;
          var timingMode = Browser.mainLoop.timingMode;
          var timingValue = Browser.mainLoop.timingValue;
          var func = Browser.mainLoop.func;
          Browser.mainLoop.func = null;
          _emscripten_set_main_loop(func, 0, false, Browser.mainLoop.arg, true /* do not set timing and call scheduler, we will do it on the next lines */);
          _emscripten_set_main_loop_timing(timingMode, timingValue);
          Browser.mainLoop.scheduler();
        },updateStatus:function() {
          if (Module['setStatus']) {
            var message = Module['statusMessage'] || 'Please wait...';
            var remaining = Browser.mainLoop.remainingBlockers;
            var expected = Browser.mainLoop.expectedBlockers;
            if (remaining) {
              if (remaining < expected) {
                Module['setStatus'](message + ' (' + (expected - remaining) + '/' + expected + ')');
              } else {
                Module['setStatus'](message);
              }
            } else {
              Module['setStatus']('');
            }
          }
        },runIter:function(func) {
          if (ABORT) return;
          if (Module['preMainLoop']) {
            var preRet = Module['preMainLoop']();
            if (preRet === false) {
              return; // |return false| skips a frame
            }
          }
          try {
            func();
          } catch (e) {
            if (e instanceof ExitStatus) {
              return;
            } else {
              if (e && typeof e === 'object' && e.stack) err('exception thrown: ' + [e, e.stack]);
              throw e;
            }
          }
          if (Module['postMainLoop']) Module['postMainLoop']();
        }},isFullscreen:false,pointerLock:false,moduleContextCreatedCallbacks:[],workers:[],init:function() {
        if (!Module["preloadPlugins"]) Module["preloadPlugins"] = []; // needs to exist even in workers
  
        if (Browser.initted) return;
        Browser.initted = true;
  
        try {
          new Blob();
          Browser.hasBlobConstructor = true;
        } catch(e) {
          Browser.hasBlobConstructor = false;
          console.log("warning: no blob constructor, cannot create blobs with mimetypes");
        }
        Browser.BlobBuilder = typeof MozBlobBuilder != "undefined" ? MozBlobBuilder : (typeof WebKitBlobBuilder != "undefined" ? WebKitBlobBuilder : (!Browser.hasBlobConstructor ? console.log("warning: no BlobBuilder") : null));
        Browser.URLObject = typeof window != "undefined" ? (window.URL ? window.URL : window.webkitURL) : undefined;
        if (!Module.noImageDecoding && typeof Browser.URLObject === 'undefined') {
          console.log("warning: Browser does not support creating object URLs. Built-in browser image decoding will not be available.");
          Module.noImageDecoding = true;
        }
  
        // Support for plugins that can process preloaded files. You can add more of these to
        // your app by creating and appending to Module.preloadPlugins.
        //
        // Each plugin is asked if it can handle a file based on the file's name. If it can,
        // it is given the file's raw data. When it is done, it calls a callback with the file's
        // (possibly modified) data. For example, a plugin might decompress a file, or it
        // might create some side data structure for use later (like an Image element, etc.).
  
        var imagePlugin = {};
        imagePlugin['canHandle'] = function imagePlugin_canHandle(name) {
          return !Module.noImageDecoding && /\.(jpg|jpeg|png|bmp)$/i.test(name);
        };
        imagePlugin['handle'] = function imagePlugin_handle(byteArray, name, onload, onerror) {
          var b = null;
          if (Browser.hasBlobConstructor) {
            try {
              b = new Blob([byteArray], { type: Browser.getMimetype(name) });
              if (b.size !== byteArray.length) { // Safari bug #118630
                // Safari's Blob can only take an ArrayBuffer
                b = new Blob([(new Uint8Array(byteArray)).buffer], { type: Browser.getMimetype(name) });
              }
            } catch(e) {
              warnOnce('Blob constructor present but fails: ' + e + '; falling back to blob builder');
            }
          }
          if (!b) {
            var bb = new Browser.BlobBuilder();
            bb.append((new Uint8Array(byteArray)).buffer); // we need to pass a buffer, and must copy the array to get the right data range
            b = bb.getBlob();
          }
          var url = Browser.URLObject.createObjectURL(b);
          assert(typeof url == 'string', 'createObjectURL must return a url as a string');
          var img = new Image();
          img.onload = function img_onload() {
            assert(img.complete, 'Image ' + name + ' could not be decoded');
            var canvas = document.createElement('canvas');
            canvas.width = img.width;
            canvas.height = img.height;
            var ctx = canvas.getContext('2d');
            ctx.drawImage(img, 0, 0);
            Module["preloadedImages"][name] = canvas;
            Browser.URLObject.revokeObjectURL(url);
            if (onload) onload(byteArray);
          };
          img.onerror = function img_onerror(event) {
            console.log('Image ' + url + ' could not be decoded');
            if (onerror) onerror();
          };
          img.src = url;
        };
        Module['preloadPlugins'].push(imagePlugin);
  
        var audioPlugin = {};
        audioPlugin['canHandle'] = function audioPlugin_canHandle(name) {
          return !Module.noAudioDecoding && name.substr(-4) in { '.ogg': 1, '.wav': 1, '.mp3': 1 };
        };
        audioPlugin['handle'] = function audioPlugin_handle(byteArray, name, onload, onerror) {
          var done = false;
          function finish(audio) {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = audio;
            if (onload) onload(byteArray);
          }
          function fail() {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = new Audio(); // empty shim
            if (onerror) onerror();
          }
          if (Browser.hasBlobConstructor) {
            try {
              var b = new Blob([byteArray], { type: Browser.getMimetype(name) });
            } catch(e) {
              return fail();
            }
            var url = Browser.URLObject.createObjectURL(b); // XXX we never revoke this!
            assert(typeof url == 'string', 'createObjectURL must return a url as a string');
            var audio = new Audio();
            audio.addEventListener('canplaythrough', function() { finish(audio) }, false); // use addEventListener due to chromium bug 124926
            audio.onerror = function audio_onerror(event) {
              if (done) return;
              console.log('warning: browser could not fully decode audio ' + name + ', trying slower base64 approach');
              function encode64(data) {
                var BASE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
                var PAD = '=';
                var ret = '';
                var leftchar = 0;
                var leftbits = 0;
                for (var i = 0; i < data.length; i++) {
                  leftchar = (leftchar << 8) | data[i];
                  leftbits += 8;
                  while (leftbits >= 6) {
                    var curr = (leftchar >> (leftbits-6)) & 0x3f;
                    leftbits -= 6;
                    ret += BASE[curr];
                  }
                }
                if (leftbits == 2) {
                  ret += BASE[(leftchar&3) << 4];
                  ret += PAD + PAD;
                } else if (leftbits == 4) {
                  ret += BASE[(leftchar&0xf) << 2];
                  ret += PAD;
                }
                return ret;
              }
              audio.src = 'data:audio/x-' + name.substr(-3) + ';base64,' + encode64(byteArray);
              finish(audio); // we don't wait for confirmation this worked - but it's worth trying
            };
            audio.src = url;
            // workaround for chrome bug 124926 - we do not always get oncanplaythrough or onerror
            Browser.safeSetTimeout(function() {
              finish(audio); // try to use it even though it is not necessarily ready to play
            }, 10000);
          } else {
            return fail();
          }
        };
        Module['preloadPlugins'].push(audioPlugin);
  
  
        // Canvas event setup
  
        function pointerLockChange() {
          Browser.pointerLock = document['pointerLockElement'] === Module['canvas'] ||
                                document['mozPointerLockElement'] === Module['canvas'] ||
                                document['webkitPointerLockElement'] === Module['canvas'] ||
                                document['msPointerLockElement'] === Module['canvas'];
        }
        var canvas = Module['canvas'];
        if (canvas) {
          // forced aspect ratio can be enabled by defining 'forcedAspectRatio' on Module
          // Module['forcedAspectRatio'] = 4 / 3;
  
          canvas.requestPointerLock = canvas['requestPointerLock'] ||
                                      canvas['mozRequestPointerLock'] ||
                                      canvas['webkitRequestPointerLock'] ||
                                      canvas['msRequestPointerLock'] ||
                                      function(){};
          canvas.exitPointerLock = document['exitPointerLock'] ||
                                   document['mozExitPointerLock'] ||
                                   document['webkitExitPointerLock'] ||
                                   document['msExitPointerLock'] ||
                                   function(){}; // no-op if function does not exist
          canvas.exitPointerLock = canvas.exitPointerLock.bind(document);
  
          document.addEventListener('pointerlockchange', pointerLockChange, false);
          document.addEventListener('mozpointerlockchange', pointerLockChange, false);
          document.addEventListener('webkitpointerlockchange', pointerLockChange, false);
          document.addEventListener('mspointerlockchange', pointerLockChange, false);
  
          if (Module['elementPointerLock']) {
            canvas.addEventListener("click", function(ev) {
              if (!Browser.pointerLock && Module['canvas'].requestPointerLock) {
                Module['canvas'].requestPointerLock();
                ev.preventDefault();
              }
            }, false);
          }
        }
      },createContext:function(canvas, useWebGL, setInModule, webGLContextAttributes) {
        if (useWebGL && Module.ctx && canvas == Module.canvas) return Module.ctx; // no need to recreate GL context if it's already been created for this canvas.
  
        var ctx;
        var contextHandle;
        if (useWebGL) {
          // For GLES2/desktop GL compatibility, adjust a few defaults to be different to WebGL defaults, so that they align better with the desktop defaults.
          var contextAttributes = {
            antialias: false,
            alpha: false,
            majorVersion: 1,
          };
  
          if (webGLContextAttributes) {
            for (var attribute in webGLContextAttributes) {
              contextAttributes[attribute] = webGLContextAttributes[attribute];
            }
          }
  
          // This check of existence of GL is here to satisfy Closure compiler, which yells if variable GL is referenced below but GL object is not
          // actually compiled in because application is not doing any GL operations. TODO: Ideally if GL is not being used, this function
          // Browser.createContext() should not even be emitted.
          if (typeof GL !== 'undefined') {
            contextHandle = GL.createContext(canvas, contextAttributes);
            if (contextHandle) {
              ctx = GL.getContext(contextHandle).GLctx;
            }
          }
        } else {
          ctx = canvas.getContext('2d');
        }
  
        if (!ctx) return null;
  
        if (setInModule) {
          if (!useWebGL) assert(typeof GLctx === 'undefined', 'cannot set in module if GLctx is used, but we are a non-GL context that would replace it');
  
          Module.ctx = ctx;
          if (useWebGL) GL.makeContextCurrent(contextHandle);
          Module.useWebGL = useWebGL;
          Browser.moduleContextCreatedCallbacks.forEach(function(callback) { callback() });
          Browser.init();
        }
        return ctx;
      },destroyContext:function(canvas, useWebGL, setInModule) {},fullscreenHandlersInstalled:false,lockPointer:undefined,resizeCanvas:undefined,requestFullscreen:function(lockPointer, resizeCanvas, vrDevice) {
        Browser.lockPointer = lockPointer;
        Browser.resizeCanvas = resizeCanvas;
        Browser.vrDevice = vrDevice;
        if (typeof Browser.lockPointer === 'undefined') Browser.lockPointer = true;
        if (typeof Browser.resizeCanvas === 'undefined') Browser.resizeCanvas = false;
        if (typeof Browser.vrDevice === 'undefined') Browser.vrDevice = null;
  
        var canvas = Module['canvas'];
        function fullscreenChange() {
          Browser.isFullscreen = false;
          var canvasContainer = canvas.parentNode;
          if ((document['fullscreenElement'] || document['mozFullScreenElement'] ||
               document['msFullscreenElement'] || document['webkitFullscreenElement'] ||
               document['webkitCurrentFullScreenElement']) === canvasContainer) {
            canvas.exitFullscreen = Browser.exitFullscreen;
            if (Browser.lockPointer) canvas.requestPointerLock();
            Browser.isFullscreen = true;
            if (Browser.resizeCanvas) {
              Browser.setFullscreenCanvasSize();
            } else {
              Browser.updateCanvasDimensions(canvas);
            }
          } else {
            // remove the full screen specific parent of the canvas again to restore the HTML structure from before going full screen
            canvasContainer.parentNode.insertBefore(canvas, canvasContainer);
            canvasContainer.parentNode.removeChild(canvasContainer);
  
            if (Browser.resizeCanvas) {
              Browser.setWindowedCanvasSize();
            } else {
              Browser.updateCanvasDimensions(canvas);
            }
          }
          if (Module['onFullScreen']) Module['onFullScreen'](Browser.isFullscreen);
          if (Module['onFullscreen']) Module['onFullscreen'](Browser.isFullscreen);
        }
  
        if (!Browser.fullscreenHandlersInstalled) {
          Browser.fullscreenHandlersInstalled = true;
          document.addEventListener('fullscreenchange', fullscreenChange, false);
          document.addEventListener('mozfullscreenchange', fullscreenChange, false);
          document.addEventListener('webkitfullscreenchange', fullscreenChange, false);
          document.addEventListener('MSFullscreenChange', fullscreenChange, false);
        }
  
        // create a new parent to ensure the canvas has no siblings. this allows browsers to optimize full screen performance when its parent is the full screen root
        var canvasContainer = document.createElement("div");
        canvas.parentNode.insertBefore(canvasContainer, canvas);
        canvasContainer.appendChild(canvas);
  
        // use parent of canvas as full screen root to allow aspect ratio correction (Firefox stretches the root to screen size)
        canvasContainer.requestFullscreen = canvasContainer['requestFullscreen'] ||
                                            canvasContainer['mozRequestFullScreen'] ||
                                            canvasContainer['msRequestFullscreen'] ||
                                           (canvasContainer['webkitRequestFullscreen'] ? function() { canvasContainer['webkitRequestFullscreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null) ||
                                           (canvasContainer['webkitRequestFullScreen'] ? function() { canvasContainer['webkitRequestFullScreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null);
  
        if (vrDevice) {
          canvasContainer.requestFullscreen({ vrDisplay: vrDevice });
        } else {
          canvasContainer.requestFullscreen();
        }
      },requestFullScreen:function() {
        abort('Module.requestFullScreen has been replaced by Module.requestFullscreen (without a capital S)');
      },exitFullscreen:function() {
        // This is workaround for chrome. Trying to exit from fullscreen
        // not in fullscreen state will cause "TypeError: Document not active"
        // in chrome. See https://github.com/emscripten-core/emscripten/pull/8236
        if (!Browser.isFullscreen) {
          return false;
        }
  
        var CFS = document['exitFullscreen'] ||
                  document['cancelFullScreen'] ||
                  document['mozCancelFullScreen'] ||
                  document['msExitFullscreen'] ||
                  document['webkitCancelFullScreen'] ||
            (function() {});
        CFS.apply(document, []);
        return true;
      },nextRAF:0,fakeRequestAnimationFrame:function(func) {
        // try to keep 60fps between calls to here
        var now = Date.now();
        if (Browser.nextRAF === 0) {
          Browser.nextRAF = now + 1000/60;
        } else {
          while (now + 2 >= Browser.nextRAF) { // fudge a little, to avoid timer jitter causing us to do lots of delay:0
            Browser.nextRAF += 1000/60;
          }
        }
        var delay = Math.max(Browser.nextRAF - now, 0);
        setTimeout(func, delay);
      },requestAnimationFrame:function(func) {
        if (typeof requestAnimationFrame === 'function') {
          requestAnimationFrame(func);
          return;
        }
        var RAF = Browser.fakeRequestAnimationFrame;
        RAF(func);
      },safeCallback:function(func) {
        return function() {
          if (!ABORT) return func.apply(null, arguments);
        };
      },allowAsyncCallbacks:true,queuedAsyncCallbacks:[],pauseAsyncCallbacks:function() {
        Browser.allowAsyncCallbacks = false;
      },resumeAsyncCallbacks:function() { // marks future callbacks as ok to execute, and synchronously runs any remaining ones right now
        Browser.allowAsyncCallbacks = true;
        if (Browser.queuedAsyncCallbacks.length > 0) {
          var callbacks = Browser.queuedAsyncCallbacks;
          Browser.queuedAsyncCallbacks = [];
          callbacks.forEach(function(func) {
            func();
          });
        }
      },safeRequestAnimationFrame:function(func) {
        return Browser.requestAnimationFrame(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } else {
            Browser.queuedAsyncCallbacks.push(func);
          }
        });
      },safeSetTimeout:function(func, timeout) {
        noExitRuntime = true;
        return setTimeout(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } else {
            Browser.queuedAsyncCallbacks.push(func);
          }
        }, timeout);
      },safeSetInterval:function(func, timeout) {
        noExitRuntime = true;
        return setInterval(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } // drop it on the floor otherwise, next interval will kick in
        }, timeout);
      },getMimetype:function(name) {
        return {
          'jpg': 'image/jpeg',
          'jpeg': 'image/jpeg',
          'png': 'image/png',
          'bmp': 'image/bmp',
          'ogg': 'audio/ogg',
          'wav': 'audio/wav',
          'mp3': 'audio/mpeg'
        }[name.substr(name.lastIndexOf('.')+1)];
      },getUserMedia:function(func) {
        if(!window.getUserMedia) {
          window.getUserMedia = navigator['getUserMedia'] ||
                                navigator['mozGetUserMedia'];
        }
        window.getUserMedia(func);
      },getMovementX:function(event) {
        return event['movementX'] ||
               event['mozMovementX'] ||
               event['webkitMovementX'] ||
               0;
      },getMovementY:function(event) {
        return event['movementY'] ||
               event['mozMovementY'] ||
               event['webkitMovementY'] ||
               0;
      },getMouseWheelDelta:function(event) {
        var delta = 0;
        switch (event.type) {
          case 'DOMMouseScroll':
            // 3 lines make up a step
            delta = event.detail / 3;
            break;
          case 'mousewheel':
            // 120 units make up a step
            delta = event.wheelDelta / 120;
            break;
          case 'wheel':
            delta = event.deltaY
            switch(event.deltaMode) {
              case 0:
                // DOM_DELTA_PIXEL: 100 pixels make up a step
                delta /= 100;
                break;
              case 1:
                // DOM_DELTA_LINE: 3 lines make up a step
                delta /= 3;
                break;
              case 2:
                // DOM_DELTA_PAGE: A page makes up 80 steps
                delta *= 80;
                break;
              default:
                throw 'unrecognized mouse wheel delta mode: ' + event.deltaMode;
            }
            break;
          default:
            throw 'unrecognized mouse wheel event: ' + event.type;
        }
        return delta;
      },mouseX:0,mouseY:0,mouseMovementX:0,mouseMovementY:0,touches:{},lastTouches:{},calculateMouseEvent:function(event) { // event should be mousemove, mousedown or mouseup
        if (Browser.pointerLock) {
          // When the pointer is locked, calculate the coordinates
          // based on the movement of the mouse.
          // Workaround for Firefox bug 764498
          if (event.type != 'mousemove' &&
              ('mozMovementX' in event)) {
            Browser.mouseMovementX = Browser.mouseMovementY = 0;
          } else {
            Browser.mouseMovementX = Browser.getMovementX(event);
            Browser.mouseMovementY = Browser.getMovementY(event);
          }
  
          // check if SDL is available
          if (typeof SDL != "undefined") {
            Browser.mouseX = SDL.mouseX + Browser.mouseMovementX;
            Browser.mouseY = SDL.mouseY + Browser.mouseMovementY;
          } else {
            // just add the mouse delta to the current absolut mouse position
            // FIXME: ideally this should be clamped against the canvas size and zero
            Browser.mouseX += Browser.mouseMovementX;
            Browser.mouseY += Browser.mouseMovementY;
          }
        } else {
          // Otherwise, calculate the movement based on the changes
          // in the coordinates.
          var rect = Module["canvas"].getBoundingClientRect();
          var cw = Module["canvas"].width;
          var ch = Module["canvas"].height;
  
          // Neither .scrollX or .pageXOffset are defined in a spec, but
          // we prefer .scrollX because it is currently in a spec draft.
          // (see: http://www.w3.org/TR/2013/WD-cssom-view-20131217/)
          var scrollX = ((typeof window.scrollX !== 'undefined') ? window.scrollX : window.pageXOffset);
          var scrollY = ((typeof window.scrollY !== 'undefined') ? window.scrollY : window.pageYOffset);
          // If this assert lands, it's likely because the browser doesn't support scrollX or pageXOffset
          // and we have no viable fallback.
          assert((typeof scrollX !== 'undefined') && (typeof scrollY !== 'undefined'), 'Unable to retrieve scroll position, mouse positions likely broken.');
  
          if (event.type === 'touchstart' || event.type === 'touchend' || event.type === 'touchmove') {
            var touch = event.touch;
            if (touch === undefined) {
              return; // the "touch" property is only defined in SDL
  
            }
            var adjustedX = touch.pageX - (scrollX + rect.left);
            var adjustedY = touch.pageY - (scrollY + rect.top);
  
            adjustedX = adjustedX * (cw / rect.width);
            adjustedY = adjustedY * (ch / rect.height);
  
            var coords = { x: adjustedX, y: adjustedY };
  
            if (event.type === 'touchstart') {
              Browser.lastTouches[touch.identifier] = coords;
              Browser.touches[touch.identifier] = coords;
            } else if (event.type === 'touchend' || event.type === 'touchmove') {
              var last = Browser.touches[touch.identifier];
              if (!last) last = coords;
              Browser.lastTouches[touch.identifier] = last;
              Browser.touches[touch.identifier] = coords;
            }
            return;
          }
  
          var x = event.pageX - (scrollX + rect.left);
          var y = event.pageY - (scrollY + rect.top);
  
          // the canvas might be CSS-scaled compared to its backbuffer;
          // SDL-using content will want mouse coordinates in terms
          // of backbuffer units.
          x = x * (cw / rect.width);
          y = y * (ch / rect.height);
  
          Browser.mouseMovementX = x - Browser.mouseX;
          Browser.mouseMovementY = y - Browser.mouseY;
          Browser.mouseX = x;
          Browser.mouseY = y;
        }
      },asyncLoad:function(url, onload, onerror, noRunDep) {
        var dep = !noRunDep ? getUniqueRunDependency('al ' + url) : '';
        readAsync(url, function(arrayBuffer) {
          assert(arrayBuffer, 'Loading data file "' + url + '" failed (no arrayBuffer).');
          onload(new Uint8Array(arrayBuffer));
          if (dep) removeRunDependency(dep);
        }, function(event) {
          if (onerror) {
            onerror();
          } else {
            throw 'Loading data file "' + url + '" failed.';
          }
        });
        if (dep) addRunDependency(dep);
      },resizeListeners:[],updateResizeListeners:function() {
        var canvas = Module['canvas'];
        Browser.resizeListeners.forEach(function(listener) {
          listener(canvas.width, canvas.height);
        });
      },setCanvasSize:function(width, height, noUpdates) {
        var canvas = Module['canvas'];
        Browser.updateCanvasDimensions(canvas, width, height);
        if (!noUpdates) Browser.updateResizeListeners();
      },windowedWidth:0,windowedHeight:0,setFullscreenCanvasSize:function() {
        // check if SDL is available
        if (typeof SDL != "undefined") {
          var flags = HEAPU32[((SDL.screen)>>2)];
          flags = flags | 0x00800000; // set SDL_FULLSCREEN flag
          HEAP32[((SDL.screen)>>2)]=flags
        }
        Browser.updateCanvasDimensions(Module['canvas']);
        Browser.updateResizeListeners();
      },setWindowedCanvasSize:function() {
        // check if SDL is available
        if (typeof SDL != "undefined") {
          var flags = HEAPU32[((SDL.screen)>>2)];
          flags = flags & ~0x00800000; // clear SDL_FULLSCREEN flag
          HEAP32[((SDL.screen)>>2)]=flags
        }
        Browser.updateCanvasDimensions(Module['canvas']);
        Browser.updateResizeListeners();
      },updateCanvasDimensions:function(canvas, wNative, hNative) {
        if (wNative && hNative) {
          canvas.widthNative = wNative;
          canvas.heightNative = hNative;
        } else {
          wNative = canvas.widthNative;
          hNative = canvas.heightNative;
        }
        var w = wNative;
        var h = hNative;
        if (Module['forcedAspectRatio'] && Module['forcedAspectRatio'] > 0) {
          if (w/h < Module['forcedAspectRatio']) {
            w = Math.round(h * Module['forcedAspectRatio']);
          } else {
            h = Math.round(w / Module['forcedAspectRatio']);
          }
        }
        if (((document['fullscreenElement'] || document['mozFullScreenElement'] ||
             document['msFullscreenElement'] || document['webkitFullscreenElement'] ||
             document['webkitCurrentFullScreenElement']) === canvas.parentNode) && (typeof screen != 'undefined')) {
           var factor = Math.min(screen.width / w, screen.height / h);
           w = Math.round(w * factor);
           h = Math.round(h * factor);
        }
        if (Browser.resizeCanvas) {
          if (canvas.width  != w) canvas.width  = w;
          if (canvas.height != h) canvas.height = h;
          if (typeof canvas.style != 'undefined') {
            canvas.style.removeProperty( "width");
            canvas.style.removeProperty("height");
          }
        } else {
          if (canvas.width  != wNative) canvas.width  = wNative;
          if (canvas.height != hNative) canvas.height = hNative;
          if (typeof canvas.style != 'undefined') {
            if (w != wNative || h != hNative) {
              canvas.style.setProperty( "width", w + "px", "important");
              canvas.style.setProperty("height", h + "px", "important");
            } else {
              canvas.style.removeProperty( "width");
              canvas.style.removeProperty("height");
            }
          }
        }
      },wgetRequests:{},nextWgetRequestHandle:0,getNextWgetRequestHandle:function() {
        var handle = Browser.nextWgetRequestHandle;
        Browser.nextWgetRequestHandle++;
        return handle;
      }};var EGL={errorCode:12288,defaultDisplayInitialized:false,currentContext:0,currentReadSurface:0,currentDrawSurface:0,contextAttributes:{alpha:false,depth:false,stencil:false,antialias:false},stringCache:{},setErrorCode:function(code) {
        EGL.errorCode = code;
      },chooseConfig:function(display, attribList, config, config_size, numConfigs) {
        if (display != 62000 /* Magic ID for Emscripten 'default display' */) {
          EGL.setErrorCode(0x3008 /* EGL_BAD_DISPLAY */);
          return 0;
        }
  
        if (attribList) {
          // read attribList if it is non-null
          for(;;) {
            var param = HEAP32[((attribList)>>2)];
            if (param == 0x3021 /*EGL_ALPHA_SIZE*/) {
              var alphaSize = HEAP32[(((attribList)+(4))>>2)];
              EGL.contextAttributes.alpha = (alphaSize > 0);
            } else if (param == 0x3025 /*EGL_DEPTH_SIZE*/) {
              var depthSize = HEAP32[(((attribList)+(4))>>2)];
              EGL.contextAttributes.depth = (depthSize > 0);
            } else if (param == 0x3026 /*EGL_STENCIL_SIZE*/) {
              var stencilSize = HEAP32[(((attribList)+(4))>>2)];
              EGL.contextAttributes.stencil = (stencilSize > 0);
            } else if (param == 0x3031 /*EGL_SAMPLES*/) {
              var samples = HEAP32[(((attribList)+(4))>>2)];
              EGL.contextAttributes.antialias = (samples > 0);
            } else if (param == 0x3032 /*EGL_SAMPLE_BUFFERS*/) {
              var samples = HEAP32[(((attribList)+(4))>>2)];
              EGL.contextAttributes.antialias = (samples == 1);
            } else if (param == 0x3100 /*EGL_CONTEXT_PRIORITY_LEVEL_IMG*/) {
              var requestedPriority = HEAP32[(((attribList)+(4))>>2)];
              EGL.contextAttributes.lowLatency = (requestedPriority != 0x3103 /*EGL_CONTEXT_PRIORITY_LOW_IMG*/);
            } else if (param == 0x3038 /*EGL_NONE*/) {
                break;
            }
            attribList += 8;
          }
        }
  
        if ((!config || !config_size) && !numConfigs) {
          EGL.setErrorCode(0x300C /* EGL_BAD_PARAMETER */);
          return 0;
        }
        if (numConfigs) {
          HEAP32[((numConfigs)>>2)]=1; // Total number of supported configs: 1.
        }
        if (config && config_size > 0) {
          HEAP32[((config)>>2)]=62002;
        }
  
        EGL.setErrorCode(0x3000 /* EGL_SUCCESS */);
        return 1;
      }};function _eglGetProcAddress(name_) {
      return _emscripten_GetProcAddress(name_);
    }

  
  var JSEvents={keyEvent:0,mouseEvent:0,wheelEvent:0,uiEvent:0,focusEvent:0,deviceOrientationEvent:0,deviceMotionEvent:0,fullscreenChangeEvent:0,pointerlockChangeEvent:0,visibilityChangeEvent:0,touchEvent:0,previousFullscreenElement:null,previousScreenX:null,previousScreenY:null,removeEventListenersRegistered:false,removeAllEventListeners:function() {
        for(var i = JSEvents.eventHandlers.length-1; i >= 0; --i) {
          JSEvents._removeHandler(i);
        }
        JSEvents.eventHandlers = [];
        JSEvents.deferredCalls = [];
      },registerRemoveEventListeners:function() {
        if (!JSEvents.removeEventListenersRegistered) {
          __ATEXIT__.push(JSEvents.removeAllEventListeners);
          JSEvents.removeEventListenersRegistered = true;
        }
      },deferredCalls:[],deferCall:function(targetFunction, precedence, argsList) {
        function arraysHaveEqualContent(arrA, arrB) {
          if (arrA.length != arrB.length) return false;
  
          for(var i in arrA) {
            if (arrA[i] != arrB[i]) return false;
          }
          return true;
        }
        // Test if the given call was already queued, and if so, don't add it again.
        for(var i in JSEvents.deferredCalls) {
          var call = JSEvents.deferredCalls[i];
          if (call.targetFunction == targetFunction && arraysHaveEqualContent(call.argsList, argsList)) {
            return;
          }
        }
        JSEvents.deferredCalls.push({
          targetFunction: targetFunction,
          precedence: precedence,
          argsList: argsList
        });
  
        JSEvents.deferredCalls.sort(function(x,y) { return x.precedence < y.precedence; });
      },removeDeferredCalls:function(targetFunction) {
        for(var i = 0; i < JSEvents.deferredCalls.length; ++i) {
          if (JSEvents.deferredCalls[i].targetFunction == targetFunction) {
            JSEvents.deferredCalls.splice(i, 1);
            --i;
          }
        }
      },canPerformEventHandlerRequests:function() {
        return JSEvents.inEventHandler && JSEvents.currentEventHandler.allowsDeferredCalls;
      },runDeferredCalls:function() {
        if (!JSEvents.canPerformEventHandlerRequests()) {
          return;
        }
        for(var i = 0; i < JSEvents.deferredCalls.length; ++i) {
          var call = JSEvents.deferredCalls[i];
          JSEvents.deferredCalls.splice(i, 1);
          --i;
          call.targetFunction.apply(this, call.argsList);
        }
      },inEventHandler:0,currentEventHandler:null,eventHandlers:[],isInternetExplorer:function() { return navigator.userAgent.indexOf('MSIE') !== -1 || navigator.appVersion.indexOf('Trident/') > 0; },removeAllHandlersOnTarget:function(target, eventTypeString) {
        for(var i = 0; i < JSEvents.eventHandlers.length; ++i) {
          if (JSEvents.eventHandlers[i].target == target && 
            (!eventTypeString || eventTypeString == JSEvents.eventHandlers[i].eventTypeString)) {
             JSEvents._removeHandler(i--);
           }
        }
      },_removeHandler:function(i) {
        var h = JSEvents.eventHandlers[i];
        h.target.removeEventListener(h.eventTypeString, h.eventListenerFunc, h.useCapture);
        JSEvents.eventHandlers.splice(i, 1);
      },registerOrRemoveHandler:function(eventHandler) {
        var jsEventHandler = function jsEventHandler(event) {
          // Increment nesting count for the event handler.
          ++JSEvents.inEventHandler;
          JSEvents.currentEventHandler = eventHandler;
          // Process any old deferred calls the user has placed.
          JSEvents.runDeferredCalls();
          // Process the actual event, calls back to user C code handler.
          eventHandler.handlerFunc(event);
          // Process any new deferred calls that were placed right now from this event handler.
          JSEvents.runDeferredCalls();
          // Out of event handler - restore nesting count.
          --JSEvents.inEventHandler;
        };
        
        if (eventHandler.callbackfunc) {
          eventHandler.eventListenerFunc = jsEventHandler;
          eventHandler.target.addEventListener(eventHandler.eventTypeString, jsEventHandler, eventHandler.useCapture);
          JSEvents.eventHandlers.push(eventHandler);
          JSEvents.registerRemoveEventListeners();
        } else {
          for(var i = 0; i < JSEvents.eventHandlers.length; ++i) {
            if (JSEvents.eventHandlers[i].target == eventHandler.target
             && JSEvents.eventHandlers[i].eventTypeString == eventHandler.eventTypeString) {
               JSEvents._removeHandler(i--);
             }
          }
        }
      },getBoundingClientRectOrZeros:function(target) {
        return target.getBoundingClientRect ? target.getBoundingClientRect() : { left: 0, top: 0 };
      },getNodeNameForTarget:function(target) {
        if (!target) return '';
        if (target == window) return '#window';
        if (target == screen) return '#screen';
        return (target && target.nodeName) ? target.nodeName : '';
      },tick:function() {
        if (window['performance'] && window['performance']['now']) return window['performance']['now']();
        else return Date.now();
      },fullscreenEnabled:function() {
        return document.fullscreenEnabled || document.mozFullScreenEnabled || document.webkitFullscreenEnabled || document.msFullscreenEnabled;
      }};
  
  function __requestPointerLock(target) {
      if (target.requestPointerLock) {
        target.requestPointerLock();
      } else if (target.mozRequestPointerLock) {
        target.mozRequestPointerLock();
      } else if (target.webkitRequestPointerLock) {
        target.webkitRequestPointerLock();
      } else if (target.msRequestPointerLock) {
        target.msRequestPointerLock();
      } else {
        // document.body is known to accept pointer lock, so use that to differentiate if the user passed a bad element,
        // or if the whole browser just doesn't support the feature.
        if (document.body.requestPointerLock || document.body.mozRequestPointerLock || document.body.webkitRequestPointerLock || document.body.msRequestPointerLock) {
          return -3;
        } else {
          return -1;
        }
      }
      return 0;
    }function _emscripten_exit_pointerlock() {
      // Make sure no queued up calls will fire after this.
      JSEvents.removeDeferredCalls(__requestPointerLock);
  
      if (document.exitPointerLock) {
        document.exitPointerLock();
      } else if (document.msExitPointerLock) {
        document.msExitPointerLock();
      } else if (document.mozExitPointerLock) {
        document.mozExitPointerLock();
      } else if (document.webkitExitPointerLock) {
        document.webkitExitPointerLock();
      } else {
        return -1;
      }
      return 0;
    }

  
  
  var __specialEventTargets=[0, typeof document !== 'undefined' ? document : 0, typeof window !== 'undefined' ? window : 0];function __findEventTarget(target) {
      warnOnce('Rules for selecting event targets in HTML5 API are changing: instead of using document.getElementById() that only can refer to elements by their DOM ID, new event target selection mechanism uses the more flexible function document.querySelector() that can look up element names, classes, and complex CSS selectors. Build with -s DISABLE_DEPRECATED_FIND_EVENT_TARGET_BEHAVIOR=1 to change to the new lookup rules. See https://github.com/emscripten-core/emscripten/pull/7977 for more details.');
      try {
        // The sensible "default" target varies between events, but use window as the default
        // since DOM events mostly can default to that. Specific callback registrations
        // override their own defaults.
        if (!target) return window;
        if (typeof target === "number") target = __specialEventTargets[target] || UTF8ToString(target);
        if (target === '#window') return window;
        else if (target === '#document') return document;
        else if (target === '#screen') return screen;
        else if (target === '#canvas') return Module['canvas'];
        return (typeof target === 'string') ? document.getElementById(target) : target;
      } catch(e) {
        // In Web Workers, some objects above, such as '#document' do not exist. Gracefully
        // return null for them.
        return null;
      }
    }function _emscripten_get_element_css_size(target, width, height) {
      target = target ? __findEventTarget(target) : Module['canvas'];
      if (!target) return -4;
  
      if (target.getBoundingClientRect) {
        var rect = target.getBoundingClientRect();
        HEAPF64[((width)>>3)]=rect.right - rect.left;
        HEAPF64[((height)>>3)]=rect.bottom - rect.top;
      } else {
        HEAPF64[((width)>>3)]=target.clientWidth;
        HEAPF64[((height)>>3)]=target.clientHeight;
      }
  
      return 0;
    }

  
  function __fillGamepadEventData(eventStruct, e) {
      HEAPF64[((eventStruct)>>3)]=e.timestamp;
      for(var i = 0; i < e.axes.length; ++i) {
        HEAPF64[(((eventStruct+i*8)+(16))>>3)]=e.axes[i];
      }
      for(var i = 0; i < e.buttons.length; ++i) {
        if (typeof(e.buttons[i]) === 'object') {
          HEAPF64[(((eventStruct+i*8)+(528))>>3)]=e.buttons[i].value;
        } else {
          HEAPF64[(((eventStruct+i*8)+(528))>>3)]=e.buttons[i];
        }
      }
      for(var i = 0; i < e.buttons.length; ++i) {
        if (typeof(e.buttons[i]) === 'object') {
          HEAP32[(((eventStruct+i*4)+(1040))>>2)]=e.buttons[i].pressed;
        } else {
          HEAP32[(((eventStruct+i*4)+(1040))>>2)]=e.buttons[i] == 1.0;
        }
      }
      HEAP32[(((eventStruct)+(1296))>>2)]=e.connected;
      HEAP32[(((eventStruct)+(1300))>>2)]=e.index;
      HEAP32[(((eventStruct)+(8))>>2)]=e.axes.length;
      HEAP32[(((eventStruct)+(12))>>2)]=e.buttons.length;
      stringToUTF8(e.id, eventStruct + 1304, 64);
      stringToUTF8(e.mapping, eventStruct + 1368, 64);
    }function _emscripten_get_gamepad_status(index, gamepadState) {
      if (!JSEvents.lastGamepadState) throw 'emscripten_get_gamepad_status() can only be called after having first called emscripten_sample_gamepad_data() and that function has returned EMSCRIPTEN_RESULT_SUCCESS!';
  
      // INVALID_PARAM is returned on a Gamepad index that never was there.
      if (index < 0 || index >= JSEvents.lastGamepadState.length) return -5;
  
      // NO_DATA is returned on a Gamepad index that was removed.
      // For previously disconnected gamepads there should be an empty slot (null/undefined/false) at the index.
      // This is because gamepads must keep their original position in the array.
      // For example, removing the first of two gamepads produces [null/undefined/false, gamepad].
      if (!JSEvents.lastGamepadState[index]) return -7;
  
      __fillGamepadEventData(gamepadState, JSEvents.lastGamepadState[index]);
      return 0;
    }

  function _emscripten_get_heap_size() {
      return HEAP8.length;
    }

  function _emscripten_get_num_gamepads() {
      if (!JSEvents.lastGamepadState) throw 'emscripten_get_num_gamepads() can only be called after having first called emscripten_sample_gamepad_data() and that function has returned EMSCRIPTEN_RESULT_SUCCESS!';
      // N.B. Do not call emscripten_get_num_gamepads() unless having first called emscripten_sample_gamepad_data(), and that has returned EMSCRIPTEN_RESULT_SUCCESS.
      // Otherwise the following line will throw an exception.
      return JSEvents.lastGamepadState.length;
    }

  
  function __fillPointerlockChangeEventData(eventStruct, e) {
      var pointerLockElement = document.pointerLockElement || document.mozPointerLockElement || document.webkitPointerLockElement || document.msPointerLockElement;
      var isPointerlocked = !!pointerLockElement;
      HEAP32[((eventStruct)>>2)]=isPointerlocked;
      var nodeName = JSEvents.getNodeNameForTarget(pointerLockElement);
      var id = (pointerLockElement && pointerLockElement.id) ? pointerLockElement.id : '';
      stringToUTF8(nodeName, eventStruct + 4, 128);
      stringToUTF8(id, eventStruct + 132, 128);
    }function _emscripten_get_pointerlock_status(pointerlockStatus) {
      if (pointerlockStatus) __fillPointerlockChangeEventData(pointerlockStatus);
      if (!document.body || (!document.body.requestPointerLock && !document.body.mozRequestPointerLock && !document.body.webkitRequestPointerLock && !document.body.msRequestPointerLock)) {
        return -1;
      }
      return 0;
    }

   

  
  var GL={counter:1,lastError:0,buffers:[],mappedBuffers:{},programs:[],framebuffers:[],renderbuffers:[],textures:[],uniforms:[],shaders:[],vaos:[],contexts:{},currentContext:null,offscreenCanvases:{},timerQueriesEXT:[],programInfos:{},stringCache:{},unpackAlignment:4,init:function() {
        GL.miniTempBuffer = new Float32Array(GL.MINI_TEMP_BUFFER_SIZE);
        for (var i = 0; i < GL.MINI_TEMP_BUFFER_SIZE; i++) {
          GL.miniTempBufferViews[i] = GL.miniTempBuffer.subarray(0, i+1);
        }
      },recordError:function recordError(errorCode) {
        if (!GL.lastError) {
          GL.lastError = errorCode;
        }
      },getNewId:function(table) {
        var ret = GL.counter++;
        for (var i = table.length; i < ret; i++) {
          table[i] = null;
        }
        return ret;
      },MINI_TEMP_BUFFER_SIZE:256,miniTempBuffer:null,miniTempBufferViews:[0],getSource:function(shader, count, string, length) {
        var source = '';
        for (var i = 0; i < count; ++i) {
          var len = length ? HEAP32[(((length)+(i*4))>>2)] : -1;
          source += UTF8ToString(HEAP32[(((string)+(i*4))>>2)], len < 0 ? undefined : len);
        }
        return source;
      },createContext:function(canvas, webGLContextAttributes) {
  
  
  
  
        var ctx = 
          (canvas.getContext("webgl", webGLContextAttributes) || canvas.getContext("experimental-webgl", webGLContextAttributes));
  
  
        if (!ctx) return 0;
  
        var handle = GL.registerContext(ctx, webGLContextAttributes);
  
  
  
        return handle;
      },registerContext:function(ctx, webGLContextAttributes) {
        var handle = _malloc(8); // Make space on the heap to store GL context attributes that need to be accessible as shared between threads.
        var context = {
          handle: handle,
          attributes: webGLContextAttributes,
          version: webGLContextAttributes.majorVersion,
          GLctx: ctx
        };
  
  
  
        // Store the created context object so that we can access the context given a canvas without having to pass the parameters again.
        if (ctx.canvas) ctx.canvas.GLctxObject = context;
        GL.contexts[handle] = context;
        if (typeof webGLContextAttributes.enableExtensionsByDefault === 'undefined' || webGLContextAttributes.enableExtensionsByDefault) {
          GL.initExtensions(context);
        }
  
  
  
  
        return handle;
      },makeContextCurrent:function(contextHandle) {
  
        GL.currentContext = GL.contexts[contextHandle]; // Active Emscripten GL layer context object.
        Module.ctx = GLctx = GL.currentContext && GL.currentContext.GLctx; // Active WebGL context object.
        return !(contextHandle && !GLctx);
      },getContext:function(contextHandle) {
        return GL.contexts[contextHandle];
      },deleteContext:function(contextHandle) {
        if (GL.currentContext === GL.contexts[contextHandle]) GL.currentContext = null;
        if (typeof JSEvents === 'object') JSEvents.removeAllHandlersOnTarget(GL.contexts[contextHandle].GLctx.canvas); // Release all JS event handlers on the DOM element that the GL context is associated with since the context is now deleted.
        if (GL.contexts[contextHandle] && GL.contexts[contextHandle].GLctx.canvas) GL.contexts[contextHandle].GLctx.canvas.GLctxObject = undefined; // Make sure the canvas object no longer refers to the context object so there are no GC surprises.
        _free(GL.contexts[contextHandle]);
        GL.contexts[contextHandle] = null;
      },acquireInstancedArraysExtension:function(ctx) {
        // Extension available in WebGL 1 from Firefox 26 and Google Chrome 30 onwards. Core feature in WebGL 2.
        var ext = ctx.getExtension('ANGLE_instanced_arrays');
        if (ext) {
          ctx['vertexAttribDivisor'] = function(index, divisor) { ext['vertexAttribDivisorANGLE'](index, divisor); };
          ctx['drawArraysInstanced'] = function(mode, first, count, primcount) { ext['drawArraysInstancedANGLE'](mode, first, count, primcount); };
          ctx['drawElementsInstanced'] = function(mode, count, type, indices, primcount) { ext['drawElementsInstancedANGLE'](mode, count, type, indices, primcount); };
        }
      },acquireVertexArrayObjectExtension:function(ctx) {
        // Extension available in WebGL 1 from Firefox 25 and WebKit 536.28/desktop Safari 6.0.3 onwards. Core feature in WebGL 2.
        var ext = ctx.getExtension('OES_vertex_array_object');
        if (ext) {
          ctx['createVertexArray'] = function() { return ext['createVertexArrayOES'](); };
          ctx['deleteVertexArray'] = function(vao) { ext['deleteVertexArrayOES'](vao); };
          ctx['bindVertexArray'] = function(vao) { ext['bindVertexArrayOES'](vao); };
          ctx['isVertexArray'] = function(vao) { return ext['isVertexArrayOES'](vao); };
        }
      },acquireDrawBuffersExtension:function(ctx) {
        // Extension available in WebGL 1 from Firefox 28 onwards. Core feature in WebGL 2.
        var ext = ctx.getExtension('WEBGL_draw_buffers');
        if (ext) {
          ctx['drawBuffers'] = function(n, bufs) { ext['drawBuffersWEBGL'](n, bufs); };
        }
      },initExtensions:function(context) {
        // If this function is called without a specific context object, init the extensions of the currently active context.
        if (!context) context = GL.currentContext;
  
        if (context.initExtensionsDone) return;
        context.initExtensionsDone = true;
  
        var GLctx = context.GLctx;
  
        // Detect the presence of a few extensions manually, this GL interop layer itself will need to know if they exist.
  
        if (context.version < 2) {
          GL.acquireInstancedArraysExtension(GLctx);
          GL.acquireVertexArrayObjectExtension(GLctx);
          GL.acquireDrawBuffersExtension(GLctx);
        }
  
        GLctx.disjointTimerQueryExt = GLctx.getExtension("EXT_disjoint_timer_query");
  
        // These are the 'safe' feature-enabling extensions that don't add any performance impact related to e.g. debugging, and
        // should be enabled by default so that client GLES2/GL code will not need to go through extra hoops to get its stuff working.
        // As new extensions are ratified at http://www.khronos.org/registry/webgl/extensions/ , feel free to add your new extensions
        // here, as long as they don't produce a performance impact for users that might not be using those extensions.
        // E.g. debugging-related extensions should probably be off by default.
        var automaticallyEnabledExtensions = [ // Khronos ratified WebGL extensions ordered by number (no debug extensions):
                                               "OES_texture_float", "OES_texture_half_float", "OES_standard_derivatives",
                                               "OES_vertex_array_object", "WEBGL_compressed_texture_s3tc", "WEBGL_depth_texture",
                                               "OES_element_index_uint", "EXT_texture_filter_anisotropic", "EXT_frag_depth",
                                               "WEBGL_draw_buffers", "ANGLE_instanced_arrays", "OES_texture_float_linear",
                                               "OES_texture_half_float_linear", "EXT_blend_minmax", "EXT_shader_texture_lod",
                                               // Community approved WebGL extensions ordered by number:
                                               "WEBGL_compressed_texture_pvrtc", "EXT_color_buffer_half_float", "WEBGL_color_buffer_float",
                                               "EXT_sRGB", "WEBGL_compressed_texture_etc1", "EXT_disjoint_timer_query",
                                               "WEBGL_compressed_texture_etc", "WEBGL_compressed_texture_astc", "EXT_color_buffer_float",
                                               "WEBGL_compressed_texture_s3tc_srgb", "EXT_disjoint_timer_query_webgl2",
                                               // Old style prefixed forms of extensions (but still currently used on e.g. iPhone Xs as
                                               // tested on iOS 12.4.1):
                                               "WEBKIT_WEBGL_compressed_texture_pvrtc"];
  
        function shouldEnableAutomatically(extension) {
          var ret = false;
          automaticallyEnabledExtensions.forEach(function(include) {
            if (extension.indexOf(include) != -1) {
              ret = true;
            }
          });
          return ret;
        }
  
        var exts = GLctx.getSupportedExtensions() || []; // .getSupportedExtensions() can return null if context is lost, so coerce to empty array.
        exts.forEach(function(ext) {
          if (automaticallyEnabledExtensions.indexOf(ext) != -1) {
            GLctx.getExtension(ext); // Calling .getExtension enables that extension permanently, no need to store the return value to be enabled.
          }
        });
      },populateUniformTable:function(program) {
        var p = GL.programs[program];
        var ptable = GL.programInfos[program] = {
          uniforms: {},
          maxUniformLength: 0, // This is eagerly computed below, since we already enumerate all uniforms anyway.
          maxAttributeLength: -1, // This is lazily computed and cached, computed when/if first asked, "-1" meaning not computed yet.
          maxUniformBlockNameLength: -1 // Lazily computed as well
        };
  
        var utable = ptable.uniforms;
        // A program's uniform table maps the string name of an uniform to an integer location of that uniform.
        // The global GL.uniforms map maps integer locations to WebGLUniformLocations.
        var numUniforms = GLctx.getProgramParameter(p, 0x8B86/*GL_ACTIVE_UNIFORMS*/);
        for (var i = 0; i < numUniforms; ++i) {
          var u = GLctx.getActiveUniform(p, i);
  
          var name = u.name;
          ptable.maxUniformLength = Math.max(ptable.maxUniformLength, name.length+1);
  
          // If we are dealing with an array, e.g. vec4 foo[3], strip off the array index part to canonicalize that "foo", "foo[]",
          // and "foo[0]" will mean the same. Loop below will populate foo[1] and foo[2].
          if (name.slice(-1) == ']') {
            name = name.slice(0, name.lastIndexOf('['));
          }
  
          // Optimize memory usage slightly: If we have an array of uniforms, e.g. 'vec3 colors[3];', then
          // only store the string 'colors' in utable, and 'colors[0]', 'colors[1]' and 'colors[2]' will be parsed as 'colors'+i.
          // Note that for the GL.uniforms table, we still need to fetch the all WebGLUniformLocations for all the indices.
          var loc = GLctx.getUniformLocation(p, name);
          if (loc) {
            var id = GL.getNewId(GL.uniforms);
            utable[name] = [u.size, id];
            GL.uniforms[id] = loc;
  
            for (var j = 1; j < u.size; ++j) {
              var n = name + '['+j+']';
              loc = GLctx.getUniformLocation(p, n);
              id = GL.getNewId(GL.uniforms);
  
              GL.uniforms[id] = loc;
            }
          }
        }
      }};function _emscripten_glActiveTexture(x0) { GLctx['activeTexture'](x0) }

  function _emscripten_glAttachShader(program, shader) {
      GLctx.attachShader(GL.programs[program],
                              GL.shaders[shader]);
    }

  function _emscripten_glBeginQueryEXT(target, id) {
      GLctx.disjointTimerQueryExt['beginQueryEXT'](target, GL.timerQueriesEXT[id]);
    }

  function _emscripten_glBindAttribLocation(program, index, name) {
      GLctx.bindAttribLocation(GL.programs[program], index, UTF8ToString(name));
    }

  function _emscripten_glBindBuffer(target, buffer) {
  
      GLctx.bindBuffer(target, GL.buffers[buffer]);
    }

  function _emscripten_glBindFramebuffer(target, framebuffer) {
  
      GLctx.bindFramebuffer(target, GL.framebuffers[framebuffer]);
  
    }

  function _emscripten_glBindRenderbuffer(target, renderbuffer) {
      GLctx.bindRenderbuffer(target, GL.renderbuffers[renderbuffer]);
    }

  function _emscripten_glBindTexture(target, texture) {
      GLctx.bindTexture(target, GL.textures[texture]);
    }

  function _emscripten_glBindVertexArrayOES(vao) {
      GLctx['bindVertexArray'](GL.vaos[vao]);
    }

  function _emscripten_glBlendColor(x0, x1, x2, x3) { GLctx['blendColor'](x0, x1, x2, x3) }

  function _emscripten_glBlendEquation(x0) { GLctx['blendEquation'](x0) }

  function _emscripten_glBlendEquationSeparate(x0, x1) { GLctx['blendEquationSeparate'](x0, x1) }

  function _emscripten_glBlendFunc(x0, x1) { GLctx['blendFunc'](x0, x1) }

  function _emscripten_glBlendFuncSeparate(x0, x1, x2, x3) { GLctx['blendFuncSeparate'](x0, x1, x2, x3) }

  function _emscripten_glBufferData(target, size, data, usage) {
        // N.b. here first form specifies a heap subarray, second form an integer size, so the ?: code here is polymorphic. It is advised to avoid
        // randomly mixing both uses in calling code, to avoid any potential JS engine JIT issues.
        GLctx.bufferData(target, data ? HEAPU8.subarray(data, data+size) : size, usage);
    }

  function _emscripten_glBufferSubData(target, offset, size, data) {
      GLctx.bufferSubData(target, offset, HEAPU8.subarray(data, data+size));
    }

  function _emscripten_glCheckFramebufferStatus(x0) { return GLctx['checkFramebufferStatus'](x0) }

  function _emscripten_glClear(x0) { GLctx['clear'](x0) }

  function _emscripten_glClearColor(x0, x1, x2, x3) { GLctx['clearColor'](x0, x1, x2, x3) }

  function _emscripten_glClearDepthf(x0) { GLctx['clearDepth'](x0) }

  function _emscripten_glClearStencil(x0) { GLctx['clearStencil'](x0) }

  function _emscripten_glColorMask(red, green, blue, alpha) {
      GLctx.colorMask(!!red, !!green, !!blue, !!alpha);
    }

  function _emscripten_glCompileShader(shader) {
      GLctx.compileShader(GL.shaders[shader]);
    }

  function _emscripten_glCompressedTexImage2D(target, level, internalFormat, width, height, border, imageSize, data) {
      GLctx['compressedTexImage2D'](target, level, internalFormat, width, height, border, data ? HEAPU8.subarray((data),(data+imageSize)) : null);
    }

  function _emscripten_glCompressedTexSubImage2D(target, level, xoffset, yoffset, width, height, format, imageSize, data) {
      GLctx['compressedTexSubImage2D'](target, level, xoffset, yoffset, width, height, format, data ? HEAPU8.subarray((data),(data+imageSize)) : null);
    }

  function _emscripten_glCopyTexImage2D(x0, x1, x2, x3, x4, x5, x6, x7) { GLctx['copyTexImage2D'](x0, x1, x2, x3, x4, x5, x6, x7) }

  function _emscripten_glCopyTexSubImage2D(x0, x1, x2, x3, x4, x5, x6, x7) { GLctx['copyTexSubImage2D'](x0, x1, x2, x3, x4, x5, x6, x7) }

  function _emscripten_glCreateProgram() {
      var id = GL.getNewId(GL.programs);
      var program = GLctx.createProgram();
      program.name = id;
      GL.programs[id] = program;
      return id;
    }

  function _emscripten_glCreateShader(shaderType) {
      var id = GL.getNewId(GL.shaders);
      GL.shaders[id] = GLctx.createShader(shaderType);
      return id;
    }

  function _emscripten_glCullFace(x0) { GLctx['cullFace'](x0) }

  function _emscripten_glDeleteBuffers(n, buffers) {
      for (var i = 0; i < n; i++) {
        var id = HEAP32[(((buffers)+(i*4))>>2)];
        var buffer = GL.buffers[id];
  
        // From spec: "glDeleteBuffers silently ignores 0's and names that do not
        // correspond to existing buffer objects."
        if (!buffer) continue;
  
        GLctx.deleteBuffer(buffer);
        buffer.name = 0;
        GL.buffers[id] = null;
  
        if (id == GL.currArrayBuffer) GL.currArrayBuffer = 0;
        if (id == GL.currElementArrayBuffer) GL.currElementArrayBuffer = 0;
      }
    }

  function _emscripten_glDeleteFramebuffers(n, framebuffers) {
      for (var i = 0; i < n; ++i) {
        var id = HEAP32[(((framebuffers)+(i*4))>>2)];
        var framebuffer = GL.framebuffers[id];
        if (!framebuffer) continue; // GL spec: "glDeleteFramebuffers silently ignores 0s and names that do not correspond to existing framebuffer objects".
        GLctx.deleteFramebuffer(framebuffer);
        framebuffer.name = 0;
        GL.framebuffers[id] = null;
      }
    }

  function _emscripten_glDeleteProgram(id) {
      if (!id) return;
      var program = GL.programs[id];
      if (!program) { // glDeleteProgram actually signals an error when deleting a nonexisting object, unlike some other GL delete functions.
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
      GLctx.deleteProgram(program);
      program.name = 0;
      GL.programs[id] = null;
      GL.programInfos[id] = null;
    }

  function _emscripten_glDeleteQueriesEXT(n, ids) {
      for (var i = 0; i < n; i++) {
        var id = HEAP32[(((ids)+(i*4))>>2)];
        var query = GL.timerQueriesEXT[id];
        if (!query) continue; // GL spec: "unused names in ids are ignored, as is the name zero."
        GLctx.disjointTimerQueryExt['deleteQueryEXT'](query);
        GL.timerQueriesEXT[id] = null;
      }
    }

  function _emscripten_glDeleteRenderbuffers(n, renderbuffers) {
      for (var i = 0; i < n; i++) {
        var id = HEAP32[(((renderbuffers)+(i*4))>>2)];
        var renderbuffer = GL.renderbuffers[id];
        if (!renderbuffer) continue; // GL spec: "glDeleteRenderbuffers silently ignores 0s and names that do not correspond to existing renderbuffer objects".
        GLctx.deleteRenderbuffer(renderbuffer);
        renderbuffer.name = 0;
        GL.renderbuffers[id] = null;
      }
    }

  function _emscripten_glDeleteShader(id) {
      if (!id) return;
      var shader = GL.shaders[id];
      if (!shader) { // glDeleteShader actually signals an error when deleting a nonexisting object, unlike some other GL delete functions.
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
      GLctx.deleteShader(shader);
      GL.shaders[id] = null;
    }

  function _emscripten_glDeleteTextures(n, textures) {
      for (var i = 0; i < n; i++) {
        var id = HEAP32[(((textures)+(i*4))>>2)];
        var texture = GL.textures[id];
        if (!texture) continue; // GL spec: "glDeleteTextures silently ignores 0s and names that do not correspond to existing textures".
        GLctx.deleteTexture(texture);
        texture.name = 0;
        GL.textures[id] = null;
      }
    }

  function _emscripten_glDeleteVertexArraysOES(n, vaos) {
      for (var i = 0; i < n; i++) {
        var id = HEAP32[(((vaos)+(i*4))>>2)];
        GLctx['deleteVertexArray'](GL.vaos[id]);
        GL.vaos[id] = null;
      }
    }

  function _emscripten_glDepthFunc(x0) { GLctx['depthFunc'](x0) }

  function _emscripten_glDepthMask(flag) {
      GLctx.depthMask(!!flag);
    }

  function _emscripten_glDepthRangef(x0, x1) { GLctx['depthRange'](x0, x1) }

  function _emscripten_glDetachShader(program, shader) {
      GLctx.detachShader(GL.programs[program],
                              GL.shaders[shader]);
    }

  function _emscripten_glDisable(x0) { GLctx['disable'](x0) }

  function _emscripten_glDisableVertexAttribArray(index) {
      GLctx.disableVertexAttribArray(index);
    }

  function _emscripten_glDrawArrays(mode, first, count) {
  
      GLctx.drawArrays(mode, first, count);
  
    }

  function _emscripten_glDrawArraysInstancedANGLE(mode, first, count, primcount) {
      GLctx['drawArraysInstanced'](mode, first, count, primcount);
    }

  
  var __tempFixedLengthArray=[];function _emscripten_glDrawBuffersWEBGL(n, bufs) {
  
      var bufArray = __tempFixedLengthArray[n];
      for (var i = 0; i < n; i++) {
        bufArray[i] = HEAP32[(((bufs)+(i*4))>>2)];
      }
  
      GLctx['drawBuffers'](bufArray);
    }

  function _emscripten_glDrawElements(mode, count, type, indices) {
  
      GLctx.drawElements(mode, count, type, indices);
  
    }

  function _emscripten_glDrawElementsInstancedANGLE(mode, count, type, indices, primcount) {
      GLctx['drawElementsInstanced'](mode, count, type, indices, primcount);
    }

  function _emscripten_glEnable(x0) { GLctx['enable'](x0) }

  function _emscripten_glEnableVertexAttribArray(index) {
      GLctx.enableVertexAttribArray(index);
    }

  function _emscripten_glEndQueryEXT(target) {
      GLctx.disjointTimerQueryExt['endQueryEXT'](target);
    }

  function _emscripten_glFinish() { GLctx['finish']() }

  function _emscripten_glFlush() { GLctx['flush']() }

  function _emscripten_glFramebufferRenderbuffer(target, attachment, renderbuffertarget, renderbuffer) {
      GLctx.framebufferRenderbuffer(target, attachment, renderbuffertarget,
                                         GL.renderbuffers[renderbuffer]);
    }

  function _emscripten_glFramebufferTexture2D(target, attachment, textarget, texture, level) {
      GLctx.framebufferTexture2D(target, attachment, textarget,
                                      GL.textures[texture], level);
    }

  function _emscripten_glFrontFace(x0) { GLctx['frontFace'](x0) }

  
  function __glGenObject(n, buffers, createFunction, objectTable
      ) {
      for (var i = 0; i < n; i++) {
        var buffer = GLctx[createFunction]();
        var id = buffer && GL.getNewId(objectTable);
        if (buffer) {
          buffer.name = id;
          objectTable[id] = buffer;
        } else {
          GL.recordError(0x0502 /* GL_INVALID_OPERATION */);
        }
        HEAP32[(((buffers)+(i*4))>>2)]=id;
      }
    }function _emscripten_glGenBuffers(n, buffers) {
      __glGenObject(n, buffers, 'createBuffer', GL.buffers
        );
    }

  function _emscripten_glGenFramebuffers(n, ids) {
      __glGenObject(n, ids, 'createFramebuffer', GL.framebuffers
        );
    }

  function _emscripten_glGenQueriesEXT(n, ids) {
      for (var i = 0; i < n; i++) {
        var query = GLctx.disjointTimerQueryExt['createQueryEXT']();
        if (!query) {
          GL.recordError(0x0502 /* GL_INVALID_OPERATION */);
          while(i < n) HEAP32[(((ids)+(i++*4))>>2)]=0;
          return;
        }
        var id = GL.getNewId(GL.timerQueriesEXT);
        query.name = id;
        GL.timerQueriesEXT[id] = query;
        HEAP32[(((ids)+(i*4))>>2)]=id;
      }
    }

  function _emscripten_glGenRenderbuffers(n, renderbuffers) {
      __glGenObject(n, renderbuffers, 'createRenderbuffer', GL.renderbuffers
        );
    }

  function _emscripten_glGenTextures(n, textures) {
      __glGenObject(n, textures, 'createTexture', GL.textures
        );
    }

  function _emscripten_glGenVertexArraysOES(n, arrays) {
      __glGenObject(n, arrays, 'createVertexArray', GL.vaos
        );
    }

  function _emscripten_glGenerateMipmap(x0) { GLctx['generateMipmap'](x0) }

  function _emscripten_glGetActiveAttrib(program, index, bufSize, length, size, type, name) {
      program = GL.programs[program];
      var info = GLctx.getActiveAttrib(program, index);
      if (!info) return; // If an error occurs, nothing will be written to length, size and type and name.
  
      var numBytesWrittenExclNull = (bufSize > 0 && name) ? stringToUTF8(info.name, name, bufSize) : 0;
      if (length) HEAP32[((length)>>2)]=numBytesWrittenExclNull;
      if (size) HEAP32[((size)>>2)]=info.size;
      if (type) HEAP32[((type)>>2)]=info.type;
    }

  function _emscripten_glGetActiveUniform(program, index, bufSize, length, size, type, name) {
      program = GL.programs[program];
      var info = GLctx.getActiveUniform(program, index);
      if (!info) return; // If an error occurs, nothing will be written to length, size, type and name.
  
      var numBytesWrittenExclNull = (bufSize > 0 && name) ? stringToUTF8(info.name, name, bufSize) : 0;
      if (length) HEAP32[((length)>>2)]=numBytesWrittenExclNull;
      if (size) HEAP32[((size)>>2)]=info.size;
      if (type) HEAP32[((type)>>2)]=info.type;
    }

  function _emscripten_glGetAttachedShaders(program, maxCount, count, shaders) {
      var result = GLctx.getAttachedShaders(GL.programs[program]);
      var len = result.length;
      if (len > maxCount) {
        len = maxCount;
      }
      HEAP32[((count)>>2)]=len;
      for (var i = 0; i < len; ++i) {
        var id = GL.shaders.indexOf(result[i]);
        HEAP32[(((shaders)+(i*4))>>2)]=id;
      }
    }

  function _emscripten_glGetAttribLocation(program, name) {
      return GLctx.getAttribLocation(GL.programs[program], UTF8ToString(name));
    }

  
  function emscriptenWebGLGet(name_, p, type) {
      // Guard against user passing a null pointer.
      // Note that GLES2 spec does not say anything about how passing a null pointer should be treated.
      // Testing on desktop core GL 3, the application crashes on glGetIntegerv to a null pointer, but
      // better to report an error instead of doing anything random.
      if (!p) {
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
      var ret = undefined;
      switch(name_) { // Handle a few trivial GLES values
        case 0x8DFA: // GL_SHADER_COMPILER
          ret = 1;
          break;
        case 0x8DF8: // GL_SHADER_BINARY_FORMATS
          if (type != 0 && type != 1) {
            GL.recordError(0x0500); // GL_INVALID_ENUM
          }
          return; // Do not write anything to the out pointer, since no binary formats are supported.
        case 0x8DF9: // GL_NUM_SHADER_BINARY_FORMATS
          ret = 0;
          break;
        case 0x86A2: // GL_NUM_COMPRESSED_TEXTURE_FORMATS
          // WebGL doesn't have GL_NUM_COMPRESSED_TEXTURE_FORMATS (it's obsolete since GL_COMPRESSED_TEXTURE_FORMATS returns a JS array that can be queried for length),
          // so implement it ourselves to allow C++ GLES2 code get the length.
          var formats = GLctx.getParameter(0x86A3 /*GL_COMPRESSED_TEXTURE_FORMATS*/);
          ret = formats ? formats.length : 0;
          break;
      }
  
      if (ret === undefined) {
        var result = GLctx.getParameter(name_);
        switch (typeof(result)) {
          case "number":
            ret = result;
            break;
          case "boolean":
            ret = result ? 1 : 0;
            break;
          case "string":
            GL.recordError(0x0500); // GL_INVALID_ENUM
            return;
          case "object":
            if (result === null) {
              // null is a valid result for some (e.g., which buffer is bound - perhaps nothing is bound), but otherwise
              // can mean an invalid name_, which we need to report as an error
              switch(name_) {
                case 0x8894: // ARRAY_BUFFER_BINDING
                case 0x8B8D: // CURRENT_PROGRAM
                case 0x8895: // ELEMENT_ARRAY_BUFFER_BINDING
                case 0x8CA6: // FRAMEBUFFER_BINDING
                case 0x8CA7: // RENDERBUFFER_BINDING
                case 0x8069: // TEXTURE_BINDING_2D
                case 0x85B5: // WebGL 2 GL_VERTEX_ARRAY_BINDING, or WebGL 1 extension OES_vertex_array_object GL_VERTEX_ARRAY_BINDING_OES
                case 0x8514: { // TEXTURE_BINDING_CUBE_MAP
                  ret = 0;
                  break;
                }
                default: {
                  GL.recordError(0x0500); // GL_INVALID_ENUM
                  return;
                }
              }
            } else if (result instanceof Float32Array ||
                       result instanceof Uint32Array ||
                       result instanceof Int32Array ||
                       result instanceof Array) {
              for (var i = 0; i < result.length; ++i) {
                switch (type) {
                  case 0: HEAP32[(((p)+(i*4))>>2)]=result[i]; break;
                  case 2: HEAPF32[(((p)+(i*4))>>2)]=result[i]; break;
                  case 4: HEAP8[(((p)+(i))>>0)]=result[i] ? 1 : 0; break;
                }
              }
              return;
            } else {
              try {
                ret = result.name | 0;
              } catch(e) {
                GL.recordError(0x0500); // GL_INVALID_ENUM
                err('GL_INVALID_ENUM in glGet' + type + 'v: Unknown object returned from WebGL getParameter(' + name_ + ')! (error: ' + e + ')');
                return;
              }
            }
            break;
          default:
            GL.recordError(0x0500); // GL_INVALID_ENUM
            err('GL_INVALID_ENUM in glGet' + type + 'v: Native code calling glGet' + type + 'v(' + name_ + ') and it returns ' + result + ' of type ' + typeof(result) + '!');
            return;
        }
      }
  
      switch (type) {
        case 1: (tempI64 = [ret>>>0,(tempDouble=ret,(+(Math_abs(tempDouble))) >= (+1) ? (tempDouble > (+0) ? ((Math_min((+(Math_floor((tempDouble)/(+4294967296)))), (+4294967295)))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/(+4294967296))))))>>>0) : 0)],HEAP32[((p)>>2)]=tempI64[0],HEAP32[(((p)+(4))>>2)]=tempI64[1]);    break;
        case 0: HEAP32[((p)>>2)]=ret;    break;
        case 2:   HEAPF32[((p)>>2)]=ret;  break;
        case 4: HEAP8[((p)>>0)]=ret ? 1 : 0; break;
      }
    }function _emscripten_glGetBooleanv(name_, p) {
      emscriptenWebGLGet(name_, p, 4);
    }

  function _emscripten_glGetBufferParameteriv(target, value, data) {
      if (!data) {
        // GLES2 specification does not specify how to behave if data is a null pointer. Since calling this function does not make sense
        // if data == null, issue a GL error to notify user about it.
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
      HEAP32[((data)>>2)]=GLctx.getBufferParameter(target, value);
    }

  function _emscripten_glGetError() {
      var error = GLctx.getError() || GL.lastError;
      GL.lastError = 0/*GL_NO_ERROR*/;
      return error;
    }

  function _emscripten_glGetFloatv(name_, p) {
      emscriptenWebGLGet(name_, p, 2);
    }

  function _emscripten_glGetFramebufferAttachmentParameteriv(target, attachment, pname, params) {
      var result = GLctx.getFramebufferAttachmentParameter(target, attachment, pname);
      if (result instanceof WebGLRenderbuffer ||
          result instanceof WebGLTexture) {
        result = result.name | 0;
      }
      HEAP32[((params)>>2)]=result;
    }

  function _emscripten_glGetIntegerv(name_, p) {
      emscriptenWebGLGet(name_, p, 0);
    }

  function _emscripten_glGetProgramInfoLog(program, maxLength, length, infoLog) {
      var log = GLctx.getProgramInfoLog(GL.programs[program]);
      if (log === null) log = '(unknown error)';
      var numBytesWrittenExclNull = (maxLength > 0 && infoLog) ? stringToUTF8(log, infoLog, maxLength) : 0;
      if (length) HEAP32[((length)>>2)]=numBytesWrittenExclNull;
    }

  function _emscripten_glGetProgramiv(program, pname, p) {
      if (!p) {
        // GLES2 specification does not specify how to behave if p is a null pointer. Since calling this function does not make sense
        // if p == null, issue a GL error to notify user about it.
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
  
      if (program >= GL.counter) {
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
  
      var ptable = GL.programInfos[program];
      if (!ptable) {
        GL.recordError(0x0502 /* GL_INVALID_OPERATION */);
        return;
      }
  
      if (pname == 0x8B84) { // GL_INFO_LOG_LENGTH
        var log = GLctx.getProgramInfoLog(GL.programs[program]);
        if (log === null) log = '(unknown error)';
        HEAP32[((p)>>2)]=log.length + 1;
      } else if (pname == 0x8B87 /* GL_ACTIVE_UNIFORM_MAX_LENGTH */) {
        HEAP32[((p)>>2)]=ptable.maxUniformLength;
      } else if (pname == 0x8B8A /* GL_ACTIVE_ATTRIBUTE_MAX_LENGTH */) {
        if (ptable.maxAttributeLength == -1) {
          program = GL.programs[program];
          var numAttribs = GLctx.getProgramParameter(program, 0x8B89/*GL_ACTIVE_ATTRIBUTES*/);
          ptable.maxAttributeLength = 0; // Spec says if there are no active attribs, 0 must be returned.
          for (var i = 0; i < numAttribs; ++i) {
            var activeAttrib = GLctx.getActiveAttrib(program, i);
            ptable.maxAttributeLength = Math.max(ptable.maxAttributeLength, activeAttrib.name.length+1);
          }
        }
        HEAP32[((p)>>2)]=ptable.maxAttributeLength;
      } else if (pname == 0x8A35 /* GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH */) {
        if (ptable.maxUniformBlockNameLength == -1) {
          program = GL.programs[program];
          var numBlocks = GLctx.getProgramParameter(program, 0x8A36/*GL_ACTIVE_UNIFORM_BLOCKS*/);
          ptable.maxUniformBlockNameLength = 0;
          for (var i = 0; i < numBlocks; ++i) {
            var activeBlockName = GLctx.getActiveUniformBlockName(program, i);
            ptable.maxUniformBlockNameLength = Math.max(ptable.maxUniformBlockNameLength, activeBlockName.length+1);
          }
        }
        HEAP32[((p)>>2)]=ptable.maxUniformBlockNameLength;
      } else {
        HEAP32[((p)>>2)]=GLctx.getProgramParameter(GL.programs[program], pname);
      }
    }

  function _emscripten_glGetQueryObjecti64vEXT(id, pname, params) {
      if (!params) {
        // GLES2 specification does not specify how to behave if params is a null pointer. Since calling this function does not make sense
        // if p == null, issue a GL error to notify user about it.
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
      var query = GL.timerQueriesEXT[id];
      var param = GLctx.disjointTimerQueryExt['getQueryObjectEXT'](query, pname);
      var ret;
      if (typeof param == 'boolean') {
        ret = param ? 1 : 0;
      } else {
        ret = param;
      }
      (tempI64 = [ret>>>0,(tempDouble=ret,(+(Math_abs(tempDouble))) >= (+1) ? (tempDouble > (+0) ? ((Math_min((+(Math_floor((tempDouble)/(+4294967296)))), (+4294967295)))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/(+4294967296))))))>>>0) : 0)],HEAP32[((params)>>2)]=tempI64[0],HEAP32[(((params)+(4))>>2)]=tempI64[1]);
    }

  function _emscripten_glGetQueryObjectivEXT(id, pname, params) {
      if (!params) {
        // GLES2 specification does not specify how to behave if params is a null pointer. Since calling this function does not make sense
        // if p == null, issue a GL error to notify user about it.
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
      var query = GL.timerQueriesEXT[id];
      var param = GLctx.disjointTimerQueryExt['getQueryObjectEXT'](query, pname);
      var ret;
      if (typeof param == 'boolean') {
        ret = param ? 1 : 0;
      } else {
        ret = param;
      }
      HEAP32[((params)>>2)]=ret;
    }

  function _emscripten_glGetQueryObjectui64vEXT(id, pname, params) {
      if (!params) {
        // GLES2 specification does not specify how to behave if params is a null pointer. Since calling this function does not make sense
        // if p == null, issue a GL error to notify user about it.
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
      var query = GL.timerQueriesEXT[id];
      var param = GLctx.disjointTimerQueryExt['getQueryObjectEXT'](query, pname);
      var ret;
      if (typeof param == 'boolean') {
        ret = param ? 1 : 0;
      } else {
        ret = param;
      }
      (tempI64 = [ret>>>0,(tempDouble=ret,(+(Math_abs(tempDouble))) >= (+1) ? (tempDouble > (+0) ? ((Math_min((+(Math_floor((tempDouble)/(+4294967296)))), (+4294967295)))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/(+4294967296))))))>>>0) : 0)],HEAP32[((params)>>2)]=tempI64[0],HEAP32[(((params)+(4))>>2)]=tempI64[1]);
    }

  function _emscripten_glGetQueryObjectuivEXT(id, pname, params) {
      if (!params) {
        // GLES2 specification does not specify how to behave if params is a null pointer. Since calling this function does not make sense
        // if p == null, issue a GL error to notify user about it.
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
      var query = GL.timerQueriesEXT[id];
      var param = GLctx.disjointTimerQueryExt['getQueryObjectEXT'](query, pname);
      var ret;
      if (typeof param == 'boolean') {
        ret = param ? 1 : 0;
      } else {
        ret = param;
      }
      HEAP32[((params)>>2)]=ret;
    }

  function _emscripten_glGetQueryivEXT(target, pname, params) {
      if (!params) {
        // GLES2 specification does not specify how to behave if params is a null pointer. Since calling this function does not make sense
        // if p == null, issue a GL error to notify user about it.
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
      HEAP32[((params)>>2)]=GLctx.disjointTimerQueryExt['getQueryEXT'](target, pname);
    }

  function _emscripten_glGetRenderbufferParameteriv(target, pname, params) {
      if (!params) {
        // GLES2 specification does not specify how to behave if params is a null pointer. Since calling this function does not make sense
        // if params == null, issue a GL error to notify user about it.
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
      HEAP32[((params)>>2)]=GLctx.getRenderbufferParameter(target, pname);
    }

  function _emscripten_glGetShaderInfoLog(shader, maxLength, length, infoLog) {
      var log = GLctx.getShaderInfoLog(GL.shaders[shader]);
      if (log === null) log = '(unknown error)';
      var numBytesWrittenExclNull = (maxLength > 0 && infoLog) ? stringToUTF8(log, infoLog, maxLength) : 0;
      if (length) HEAP32[((length)>>2)]=numBytesWrittenExclNull;
    }

  function _emscripten_glGetShaderPrecisionFormat(shaderType, precisionType, range, precision) {
      var result = GLctx.getShaderPrecisionFormat(shaderType, precisionType);
      HEAP32[((range)>>2)]=result.rangeMin;
      HEAP32[(((range)+(4))>>2)]=result.rangeMax;
      HEAP32[((precision)>>2)]=result.precision;
    }

  function _emscripten_glGetShaderSource(shader, bufSize, length, source) {
      var result = GLctx.getShaderSource(GL.shaders[shader]);
      if (!result) return; // If an error occurs, nothing will be written to length or source.
      var numBytesWrittenExclNull = (bufSize > 0 && source) ? stringToUTF8(result, source, bufSize) : 0;
      if (length) HEAP32[((length)>>2)]=numBytesWrittenExclNull;
    }

  function _emscripten_glGetShaderiv(shader, pname, p) {
      if (!p) {
        // GLES2 specification does not specify how to behave if p is a null pointer. Since calling this function does not make sense
        // if p == null, issue a GL error to notify user about it.
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
      if (pname == 0x8B84) { // GL_INFO_LOG_LENGTH
        var log = GLctx.getShaderInfoLog(GL.shaders[shader]);
        if (log === null) log = '(unknown error)';
        HEAP32[((p)>>2)]=log.length + 1;
      } else if (pname == 0x8B88) { // GL_SHADER_SOURCE_LENGTH
        var source = GLctx.getShaderSource(GL.shaders[shader]);
        var sourceLength = (source === null || source.length == 0) ? 0 : source.length + 1;
        HEAP32[((p)>>2)]=sourceLength;
      } else {
        HEAP32[((p)>>2)]=GLctx.getShaderParameter(GL.shaders[shader], pname);
      }
    }

  
  function stringToNewUTF8(jsString) {
      var length = lengthBytesUTF8(jsString)+1;
      var cString = _malloc(length);
      stringToUTF8(jsString, cString, length);
      return cString;
    }function _emscripten_glGetString(name_) {
      if (GL.stringCache[name_]) return GL.stringCache[name_];
      var ret;
      switch(name_) {
        case 0x1F03 /* GL_EXTENSIONS */:
          var exts = GLctx.getSupportedExtensions() || []; // .getSupportedExtensions() can return null if context is lost, so coerce to empty array.
          exts = exts.concat(exts.map(function(e) { return "GL_" + e; }));
          ret = stringToNewUTF8(exts.join(' '));
          break;
        case 0x1F00 /* GL_VENDOR */:
        case 0x1F01 /* GL_RENDERER */:
        case 0x9245 /* UNMASKED_VENDOR_WEBGL */:
        case 0x9246 /* UNMASKED_RENDERER_WEBGL */:
          var s = GLctx.getParameter(name_);
          if (!s) {
            GL.recordError(0x0500/*GL_INVALID_ENUM*/);
          }
          ret = stringToNewUTF8(s);
          break;
  
        case 0x1F02 /* GL_VERSION */:
          var glVersion = GLctx.getParameter(GLctx.VERSION);
          // return GLES version string corresponding to the version of the WebGL context
          {
            glVersion = 'OpenGL ES 2.0 (' + glVersion + ')';
          }
          ret = stringToNewUTF8(glVersion);
          break;
        case 0x8B8C /* GL_SHADING_LANGUAGE_VERSION */:
          var glslVersion = GLctx.getParameter(GLctx.SHADING_LANGUAGE_VERSION);
          // extract the version number 'N.M' from the string 'WebGL GLSL ES N.M ...'
          var ver_re = /^WebGL GLSL ES ([0-9]\.[0-9][0-9]?)(?:$| .*)/;
          var ver_num = glslVersion.match(ver_re);
          if (ver_num !== null) {
            if (ver_num[1].length == 3) ver_num[1] = ver_num[1] + '0'; // ensure minor version has 2 digits
            glslVersion = 'OpenGL ES GLSL ES ' + ver_num[1] + ' (' + glslVersion + ')';
          }
          ret = stringToNewUTF8(glslVersion);
          break;
        default:
          GL.recordError(0x0500/*GL_INVALID_ENUM*/);
          return 0;
      }
      GL.stringCache[name_] = ret;
      return ret;
    }

  function _emscripten_glGetTexParameterfv(target, pname, params) {
      if (!params) {
        // GLES2 specification does not specify how to behave if params is a null pointer. Since calling this function does not make sense
        // if p == null, issue a GL error to notify user about it.
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
      HEAPF32[((params)>>2)]=GLctx.getTexParameter(target, pname);
    }

  function _emscripten_glGetTexParameteriv(target, pname, params) {
      if (!params) {
        // GLES2 specification does not specify how to behave if params is a null pointer. Since calling this function does not make sense
        // if p == null, issue a GL error to notify user about it.
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
      HEAP32[((params)>>2)]=GLctx.getTexParameter(target, pname);
    }

  function _emscripten_glGetUniformLocation(program, name) {
      name = UTF8ToString(name);
  
      var arrayIndex = 0;
      // If user passed an array accessor "[index]", parse the array index off the accessor.
      if (name[name.length - 1] == ']') {
        var leftBrace = name.lastIndexOf('[');
        arrayIndex = name[leftBrace+1] != ']' ? parseInt(name.slice(leftBrace + 1)) : 0; // "index]", parseInt will ignore the ']' at the end; but treat "foo[]" as "foo[0]"
        name = name.slice(0, leftBrace);
      }
  
      var uniformInfo = GL.programInfos[program] && GL.programInfos[program].uniforms[name]; // returns pair [ dimension_of_uniform_array, uniform_location ]
      if (uniformInfo && arrayIndex >= 0 && arrayIndex < uniformInfo[0]) { // Check if user asked for an out-of-bounds element, i.e. for 'vec4 colors[3];' user could ask for 'colors[10]' which should return -1.
        return uniformInfo[1] + arrayIndex;
      } else {
        return -1;
      }
    }

  
  function emscriptenWebGLGetUniform(program, location, params, type) {
      if (!params) {
        // GLES2 specification does not specify how to behave if params is a null pointer. Since calling this function does not make sense
        // if params == null, issue a GL error to notify user about it.
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
      var data = GLctx.getUniform(GL.programs[program], GL.uniforms[location]);
      if (typeof data == 'number' || typeof data == 'boolean') {
        switch (type) {
          case 0: HEAP32[((params)>>2)]=data; break;
          case 2: HEAPF32[((params)>>2)]=data; break;
          default: throw 'internal emscriptenWebGLGetUniform() error, bad type: ' + type;
        }
      } else {
        for (var i = 0; i < data.length; i++) {
          switch (type) {
            case 0: HEAP32[(((params)+(i*4))>>2)]=data[i]; break;
            case 2: HEAPF32[(((params)+(i*4))>>2)]=data[i]; break;
            default: throw 'internal emscriptenWebGLGetUniform() error, bad type: ' + type;
          }
        }
      }
    }function _emscripten_glGetUniformfv(program, location, params) {
      emscriptenWebGLGetUniform(program, location, params, 2);
    }

  function _emscripten_glGetUniformiv(program, location, params) {
      emscriptenWebGLGetUniform(program, location, params, 0);
    }

  function _emscripten_glGetVertexAttribPointerv(index, pname, pointer) {
      if (!pointer) {
        // GLES2 specification does not specify how to behave if pointer is a null pointer. Since calling this function does not make sense
        // if pointer == null, issue a GL error to notify user about it.
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
      HEAP32[((pointer)>>2)]=GLctx.getVertexAttribOffset(index, pname);
    }

  
  function emscriptenWebGLGetVertexAttrib(index, pname, params, type) {
      if (!params) {
        // GLES2 specification does not specify how to behave if params is a null pointer. Since calling this function does not make sense
        // if params == null, issue a GL error to notify user about it.
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
      var data = GLctx.getVertexAttrib(index, pname);
      if (pname == 0x889F/*VERTEX_ATTRIB_ARRAY_BUFFER_BINDING*/) {
        HEAP32[((params)>>2)]=data["name"];
      } else if (typeof data == 'number' || typeof data == 'boolean') {
        switch (type) {
          case 0: HEAP32[((params)>>2)]=data; break;
          case 2: HEAPF32[((params)>>2)]=data; break;
          case 5: HEAP32[((params)>>2)]=Math.fround(data); break;
          default: throw 'internal emscriptenWebGLGetVertexAttrib() error, bad type: ' + type;
        }
      } else {
        for (var i = 0; i < data.length; i++) {
          switch (type) {
            case 0: HEAP32[(((params)+(i*4))>>2)]=data[i]; break;
            case 2: HEAPF32[(((params)+(i*4))>>2)]=data[i]; break;
            case 5: HEAP32[(((params)+(i*4))>>2)]=Math.fround(data[i]); break;
            default: throw 'internal emscriptenWebGLGetVertexAttrib() error, bad type: ' + type;
          }
        }
      }
    }function _emscripten_glGetVertexAttribfv(index, pname, params) {
      // N.B. This function may only be called if the vertex attribute was specified using the function glVertexAttrib*f(),
      // otherwise the results are undefined. (GLES3 spec 6.1.12)
      emscriptenWebGLGetVertexAttrib(index, pname, params, 2);
    }

  function _emscripten_glGetVertexAttribiv(index, pname, params) {
      // N.B. This function may only be called if the vertex attribute was specified using the function glVertexAttrib*f(),
      // otherwise the results are undefined. (GLES3 spec 6.1.12)
      emscriptenWebGLGetVertexAttrib(index, pname, params, 5);
    }

  function _emscripten_glHint(x0, x1) { GLctx['hint'](x0, x1) }

  function _emscripten_glIsBuffer(buffer) {
      var b = GL.buffers[buffer];
      if (!b) return 0;
      return GLctx.isBuffer(b);
    }

  function _emscripten_glIsEnabled(x0) { return GLctx['isEnabled'](x0) }

  function _emscripten_glIsFramebuffer(framebuffer) {
      var fb = GL.framebuffers[framebuffer];
      if (!fb) return 0;
      return GLctx.isFramebuffer(fb);
    }

  function _emscripten_glIsProgram(program) {
      program = GL.programs[program];
      if (!program) return 0;
      return GLctx.isProgram(program);
    }

  function _emscripten_glIsQueryEXT(id) {
      var query = GL.timerQueriesEXT[id];
      if (!query) return 0;
      return GLctx.disjointTimerQueryExt['isQueryEXT'](query);
    }

  function _emscripten_glIsRenderbuffer(renderbuffer) {
      var rb = GL.renderbuffers[renderbuffer];
      if (!rb) return 0;
      return GLctx.isRenderbuffer(rb);
    }

  function _emscripten_glIsShader(shader) {
      var s = GL.shaders[shader];
      if (!s) return 0;
      return GLctx.isShader(s);
    }

  function _emscripten_glIsTexture(id) {
      var texture = GL.textures[id];
      if (!texture) return 0;
      return GLctx.isTexture(texture);
    }

  function _emscripten_glIsVertexArrayOES(array) {
  
      var vao = GL.vaos[array];
      if (!vao) return 0;
      return GLctx['isVertexArray'](vao);
    }

  function _emscripten_glLineWidth(x0) { GLctx['lineWidth'](x0) }

  function _emscripten_glLinkProgram(program) {
      GLctx.linkProgram(GL.programs[program]);
      GL.populateUniformTable(program);
    }

  function _emscripten_glPixelStorei(pname, param) {
      if (pname == 0x0cf5 /* GL_UNPACK_ALIGNMENT */) {
        GL.unpackAlignment = param;
      }
      GLctx.pixelStorei(pname, param);
    }

  function _emscripten_glPolygonOffset(x0, x1) { GLctx['polygonOffset'](x0, x1) }

  function _emscripten_glQueryCounterEXT(id, target) {
      GLctx.disjointTimerQueryExt['queryCounterEXT'](GL.timerQueriesEXT[id], target);
    }

  
  
  function __computeUnpackAlignedImageSize(width, height, sizePerPixel, alignment) {
      function roundedToNextMultipleOf(x, y) {
        return (x + y - 1) & -y;
      }
      var plainRowSize = width * sizePerPixel;
      var alignedRowSize = roundedToNextMultipleOf(plainRowSize, alignment);
      return height * alignedRowSize;
    }
  
  function __colorChannelsInGlTextureFormat(format) {
      // Micro-optimizations for size: map format to size by subtracting smallest enum value (0x1902) from all values first.
      // Also omit the most common size value (1) from the list, which is assumed by formats not on the list.
      var colorChannels = {
        // 0x1902 /* GL_DEPTH_COMPONENT */ - 0x1902: 1,
        // 0x1906 /* GL_ALPHA */ - 0x1902: 1,
        5: 3,
        6: 4,
        // 0x1909 /* GL_LUMINANCE */ - 0x1902: 1,
        8: 2,
        29502: 3,
        29504: 4,
      };
      return colorChannels[format - 0x1902]||1;
    }
  
  function __heapObjectForWebGLType(type) {
      // Micro-optimization for size: Subtract lowest GL enum number (0x1400/* GL_BYTE */) from type to compare
      // smaller values for the heap, for shorter generated code size.
      // Also the type HEAPU16 is not tested for explicitly, but any unrecognized type will return out HEAPU16.
      // (since most types are HEAPU16)
      type -= 0x1400;
  
      if (type == 1) return HEAPU8;
  
  
      if (type == 4) return HEAP32;
  
      if (type == 6) return HEAPF32;
  
      if (type == 5
        || type == 28922
        )
        return HEAPU32;
  
      return HEAPU16;
    }
  
  function __heapAccessShiftForWebGLHeap(heap) {
      return 31 - Math.clz32(heap.BYTES_PER_ELEMENT);
    }function emscriptenWebGLGetTexPixelData(type, format, width, height, pixels, internalFormat) {
      var heap = __heapObjectForWebGLType(type);
      var shift = __heapAccessShiftForWebGLHeap(heap);
      var byteSize = 1<<shift;
      var sizePerPixel = __colorChannelsInGlTextureFormat(format) * byteSize;
      var bytes = __computeUnpackAlignedImageSize(width, height, sizePerPixel, GL.unpackAlignment);
      return heap.subarray(pixels >> shift, pixels + bytes >> shift);
    }function _emscripten_glReadPixels(x, y, width, height, format, type, pixels) {
      var pixelData = emscriptenWebGLGetTexPixelData(type, format, width, height, pixels, format);
      if (!pixelData) {
        GL.recordError(0x0500/*GL_INVALID_ENUM*/);
        return;
      }
      GLctx.readPixels(x, y, width, height, format, type, pixelData);
    }

  function _emscripten_glReleaseShaderCompiler() {
      // NOP (as allowed by GLES 2.0 spec)
    }

  function _emscripten_glRenderbufferStorage(x0, x1, x2, x3) { GLctx['renderbufferStorage'](x0, x1, x2, x3) }

  function _emscripten_glSampleCoverage(value, invert) {
      GLctx.sampleCoverage(value, !!invert);
    }

  function _emscripten_glScissor(x0, x1, x2, x3) { GLctx['scissor'](x0, x1, x2, x3) }

  function _emscripten_glShaderBinary() {
      GL.recordError(0x0500/*GL_INVALID_ENUM*/);
    }

  function _emscripten_glShaderSource(shader, count, string, length) {
      var source = GL.getSource(shader, count, string, length);
  
  
      GLctx.shaderSource(GL.shaders[shader], source);
    }

  function _emscripten_glStencilFunc(x0, x1, x2) { GLctx['stencilFunc'](x0, x1, x2) }

  function _emscripten_glStencilFuncSeparate(x0, x1, x2, x3) { GLctx['stencilFuncSeparate'](x0, x1, x2, x3) }

  function _emscripten_glStencilMask(x0) { GLctx['stencilMask'](x0) }

  function _emscripten_glStencilMaskSeparate(x0, x1) { GLctx['stencilMaskSeparate'](x0, x1) }

  function _emscripten_glStencilOp(x0, x1, x2) { GLctx['stencilOp'](x0, x1, x2) }

  function _emscripten_glStencilOpSeparate(x0, x1, x2, x3) { GLctx['stencilOpSeparate'](x0, x1, x2, x3) }

  function _emscripten_glTexImage2D(target, level, internalFormat, width, height, border, format, type, pixels) {
      GLctx.texImage2D(target, level, internalFormat, width, height, border, format, type, pixels ? emscriptenWebGLGetTexPixelData(type, format, width, height, pixels, internalFormat) : null);
    }

  function _emscripten_glTexParameterf(x0, x1, x2) { GLctx['texParameterf'](x0, x1, x2) }

  function _emscripten_glTexParameterfv(target, pname, params) {
      var param = HEAPF32[((params)>>2)];
      GLctx.texParameterf(target, pname, param);
    }

  function _emscripten_glTexParameteri(x0, x1, x2) { GLctx['texParameteri'](x0, x1, x2) }

  function _emscripten_glTexParameteriv(target, pname, params) {
      var param = HEAP32[((params)>>2)];
      GLctx.texParameteri(target, pname, param);
    }

  function _emscripten_glTexSubImage2D(target, level, xoffset, yoffset, width, height, format, type, pixels) {
      var pixelData = null;
      if (pixels) pixelData = emscriptenWebGLGetTexPixelData(type, format, width, height, pixels, 0);
      GLctx.texSubImage2D(target, level, xoffset, yoffset, width, height, format, type, pixelData);
    }

  function _emscripten_glUniform1f(location, v0) {
      GLctx.uniform1f(GL.uniforms[location], v0);
    }

  function _emscripten_glUniform1fv(location, count, value) {
  
  
      if (count <= GL.MINI_TEMP_BUFFER_SIZE) {
        // avoid allocation when uploading few enough uniforms
        var view = GL.miniTempBufferViews[count-1];
        for (var i = 0; i < count; ++i) {
          view[i] = HEAPF32[(((value)+(4*i))>>2)];
        }
      } else
      {
        var view = HEAPF32.subarray((value)>>2,(value+count*4)>>2);
      }
      GLctx.uniform1fv(GL.uniforms[location], view);
    }

  function _emscripten_glUniform1i(location, v0) {
      GLctx.uniform1i(GL.uniforms[location], v0);
    }

  function _emscripten_glUniform1iv(location, count, value) {
  
  
      GLctx.uniform1iv(GL.uniforms[location], HEAP32.subarray((value)>>2,(value+count*4)>>2));
    }

  function _emscripten_glUniform2f(location, v0, v1) {
      GLctx.uniform2f(GL.uniforms[location], v0, v1);
    }

  function _emscripten_glUniform2fv(location, count, value) {
  
  
      if (2*count <= GL.MINI_TEMP_BUFFER_SIZE) {
        // avoid allocation when uploading few enough uniforms
        var view = GL.miniTempBufferViews[2*count-1];
        for (var i = 0; i < 2*count; i += 2) {
          view[i] = HEAPF32[(((value)+(4*i))>>2)];
          view[i+1] = HEAPF32[(((value)+(4*i+4))>>2)];
        }
      } else
      {
        var view = HEAPF32.subarray((value)>>2,(value+count*8)>>2);
      }
      GLctx.uniform2fv(GL.uniforms[location], view);
    }

  function _emscripten_glUniform2i(location, v0, v1) {
      GLctx.uniform2i(GL.uniforms[location], v0, v1);
    }

  function _emscripten_glUniform2iv(location, count, value) {
  
  
      GLctx.uniform2iv(GL.uniforms[location], HEAP32.subarray((value)>>2,(value+count*8)>>2));
    }

  function _emscripten_glUniform3f(location, v0, v1, v2) {
      GLctx.uniform3f(GL.uniforms[location], v0, v1, v2);
    }

  function _emscripten_glUniform3fv(location, count, value) {
  
  
      if (3*count <= GL.MINI_TEMP_BUFFER_SIZE) {
        // avoid allocation when uploading few enough uniforms
        var view = GL.miniTempBufferViews[3*count-1];
        for (var i = 0; i < 3*count; i += 3) {
          view[i] = HEAPF32[(((value)+(4*i))>>2)];
          view[i+1] = HEAPF32[(((value)+(4*i+4))>>2)];
          view[i+2] = HEAPF32[(((value)+(4*i+8))>>2)];
        }
      } else
      {
        var view = HEAPF32.subarray((value)>>2,(value+count*12)>>2);
      }
      GLctx.uniform3fv(GL.uniforms[location], view);
    }

  function _emscripten_glUniform3i(location, v0, v1, v2) {
      GLctx.uniform3i(GL.uniforms[location], v0, v1, v2);
    }

  function _emscripten_glUniform3iv(location, count, value) {
  
  
      GLctx.uniform3iv(GL.uniforms[location], HEAP32.subarray((value)>>2,(value+count*12)>>2));
    }

  function _emscripten_glUniform4f(location, v0, v1, v2, v3) {
      GLctx.uniform4f(GL.uniforms[location], v0, v1, v2, v3);
    }

  function _emscripten_glUniform4fv(location, count, value) {
  
  
      if (4*count <= GL.MINI_TEMP_BUFFER_SIZE) {
        // avoid allocation when uploading few enough uniforms
        var view = GL.miniTempBufferViews[4*count-1];
        for (var i = 0; i < 4*count; i += 4) {
          view[i] = HEAPF32[(((value)+(4*i))>>2)];
          view[i+1] = HEAPF32[(((value)+(4*i+4))>>2)];
          view[i+2] = HEAPF32[(((value)+(4*i+8))>>2)];
          view[i+3] = HEAPF32[(((value)+(4*i+12))>>2)];
        }
      } else
      {
        var view = HEAPF32.subarray((value)>>2,(value+count*16)>>2);
      }
      GLctx.uniform4fv(GL.uniforms[location], view);
    }

  function _emscripten_glUniform4i(location, v0, v1, v2, v3) {
      GLctx.uniform4i(GL.uniforms[location], v0, v1, v2, v3);
    }

  function _emscripten_glUniform4iv(location, count, value) {
  
  
      GLctx.uniform4iv(GL.uniforms[location], HEAP32.subarray((value)>>2,(value+count*16)>>2));
    }

  function _emscripten_glUniformMatrix2fv(location, count, transpose, value) {
  
  
      if (4*count <= GL.MINI_TEMP_BUFFER_SIZE) {
        // avoid allocation when uploading few enough uniforms
        var view = GL.miniTempBufferViews[4*count-1];
        for (var i = 0; i < 4*count; i += 4) {
          view[i] = HEAPF32[(((value)+(4*i))>>2)];
          view[i+1] = HEAPF32[(((value)+(4*i+4))>>2)];
          view[i+2] = HEAPF32[(((value)+(4*i+8))>>2)];
          view[i+3] = HEAPF32[(((value)+(4*i+12))>>2)];
        }
      } else
      {
        var view = HEAPF32.subarray((value)>>2,(value+count*16)>>2);
      }
      GLctx.uniformMatrix2fv(GL.uniforms[location], !!transpose, view);
    }

  function _emscripten_glUniformMatrix3fv(location, count, transpose, value) {
  
  
      if (9*count <= GL.MINI_TEMP_BUFFER_SIZE) {
        // avoid allocation when uploading few enough uniforms
        var view = GL.miniTempBufferViews[9*count-1];
        for (var i = 0; i < 9*count; i += 9) {
          view[i] = HEAPF32[(((value)+(4*i))>>2)];
          view[i+1] = HEAPF32[(((value)+(4*i+4))>>2)];
          view[i+2] = HEAPF32[(((value)+(4*i+8))>>2)];
          view[i+3] = HEAPF32[(((value)+(4*i+12))>>2)];
          view[i+4] = HEAPF32[(((value)+(4*i+16))>>2)];
          view[i+5] = HEAPF32[(((value)+(4*i+20))>>2)];
          view[i+6] = HEAPF32[(((value)+(4*i+24))>>2)];
          view[i+7] = HEAPF32[(((value)+(4*i+28))>>2)];
          view[i+8] = HEAPF32[(((value)+(4*i+32))>>2)];
        }
      } else
      {
        var view = HEAPF32.subarray((value)>>2,(value+count*36)>>2);
      }
      GLctx.uniformMatrix3fv(GL.uniforms[location], !!transpose, view);
    }

  function _emscripten_glUniformMatrix4fv(location, count, transpose, value) {
  
  
      if (16*count <= GL.MINI_TEMP_BUFFER_SIZE) {
        // avoid allocation when uploading few enough uniforms
        var view = GL.miniTempBufferViews[16*count-1];
        for (var i = 0; i < 16*count; i += 16) {
          view[i] = HEAPF32[(((value)+(4*i))>>2)];
          view[i+1] = HEAPF32[(((value)+(4*i+4))>>2)];
          view[i+2] = HEAPF32[(((value)+(4*i+8))>>2)];
          view[i+3] = HEAPF32[(((value)+(4*i+12))>>2)];
          view[i+4] = HEAPF32[(((value)+(4*i+16))>>2)];
          view[i+5] = HEAPF32[(((value)+(4*i+20))>>2)];
          view[i+6] = HEAPF32[(((value)+(4*i+24))>>2)];
          view[i+7] = HEAPF32[(((value)+(4*i+28))>>2)];
          view[i+8] = HEAPF32[(((value)+(4*i+32))>>2)];
          view[i+9] = HEAPF32[(((value)+(4*i+36))>>2)];
          view[i+10] = HEAPF32[(((value)+(4*i+40))>>2)];
          view[i+11] = HEAPF32[(((value)+(4*i+44))>>2)];
          view[i+12] = HEAPF32[(((value)+(4*i+48))>>2)];
          view[i+13] = HEAPF32[(((value)+(4*i+52))>>2)];
          view[i+14] = HEAPF32[(((value)+(4*i+56))>>2)];
          view[i+15] = HEAPF32[(((value)+(4*i+60))>>2)];
        }
      } else
      {
        var view = HEAPF32.subarray((value)>>2,(value+count*64)>>2);
      }
      GLctx.uniformMatrix4fv(GL.uniforms[location], !!transpose, view);
    }

  function _emscripten_glUseProgram(program) {
      GLctx.useProgram(GL.programs[program]);
    }

  function _emscripten_glValidateProgram(program) {
      GLctx.validateProgram(GL.programs[program]);
    }

  function _emscripten_glVertexAttrib1f(x0, x1) { GLctx['vertexAttrib1f'](x0, x1) }

  function _emscripten_glVertexAttrib1fv(index, v) {
  
      GLctx.vertexAttrib1f(index, HEAPF32[v>>2]);
    }

  function _emscripten_glVertexAttrib2f(x0, x1, x2) { GLctx['vertexAttrib2f'](x0, x1, x2) }

  function _emscripten_glVertexAttrib2fv(index, v) {
  
      GLctx.vertexAttrib2f(index, HEAPF32[v>>2], HEAPF32[v+4>>2]);
    }

  function _emscripten_glVertexAttrib3f(x0, x1, x2, x3) { GLctx['vertexAttrib3f'](x0, x1, x2, x3) }

  function _emscripten_glVertexAttrib3fv(index, v) {
  
      GLctx.vertexAttrib3f(index, HEAPF32[v>>2], HEAPF32[v+4>>2], HEAPF32[v+8>>2]);
    }

  function _emscripten_glVertexAttrib4f(x0, x1, x2, x3, x4) { GLctx['vertexAttrib4f'](x0, x1, x2, x3, x4) }

  function _emscripten_glVertexAttrib4fv(index, v) {
  
      GLctx.vertexAttrib4f(index, HEAPF32[v>>2], HEAPF32[v+4>>2], HEAPF32[v+8>>2], HEAPF32[v+12>>2]);
    }

  function _emscripten_glVertexAttribDivisorANGLE(index, divisor) {
      GLctx['vertexAttribDivisor'](index, divisor);
    }

  function _emscripten_glVertexAttribPointer(index, size, type, normalized, stride, ptr) {
      GLctx.vertexAttribPointer(index, size, type, !!normalized, stride, ptr);
    }

  function _emscripten_glViewport(x0, x1, x2, x3) { GLctx['viewport'](x0, x1, x2, x3) }

  function _emscripten_request_pointerlock(target, deferUntilInEventHandler) {
      if (!target) target = '#canvas';
      target = __findEventTarget(target);
      if (!target) return -4;
      if (!target.requestPointerLock && !target.mozRequestPointerLock && !target.webkitRequestPointerLock && !target.msRequestPointerLock) {
        return -1;
      }
  
      var canPerformRequests = JSEvents.canPerformEventHandlerRequests();
  
      // Queue this function call if we're not currently in an event handler and the user saw it appropriate to do so.
      if (!canPerformRequests) {
        if (deferUntilInEventHandler) {
          JSEvents.deferCall(__requestPointerLock, 2 /* priority below fullscreen */, [target]);
          return 1;
        } else {
          return -2;
        }
      }
  
      return __requestPointerLock(target);
    }

  
  function abortOnCannotGrowMemory(requestedSize) {
      abort('Cannot enlarge memory arrays to size ' + requestedSize + ' bytes (OOM). Either (1) compile with  -s TOTAL_MEMORY=X  with X higher than the current value ' + HEAP8.length + ', (2) compile with  -s ALLOW_MEMORY_GROWTH=1  which allows increasing the size at runtime, or (3) if you want malloc to return NULL (0) instead of this abort, compile with  -s ABORTING_MALLOC=0 ');
    }function _emscripten_resize_heap(requestedSize) {
      abortOnCannotGrowMemory(requestedSize);
    }

  function _emscripten_run_script(ptr) {
      eval(UTF8ToString(ptr));
    }

  function _emscripten_sample_gamepad_data() {
      return (JSEvents.lastGamepadState = (navigator.getGamepads ? navigator.getGamepads() : (navigator.webkitGetGamepads ? navigator.webkitGetGamepads() : null)))
        ? 0 : -1;
    }

  
  
  function __fillMouseEventData(eventStruct, e, target) {
      HEAPF64[((eventStruct)>>3)]=JSEvents.tick();
      HEAP32[(((eventStruct)+(8))>>2)]=e.screenX;
      HEAP32[(((eventStruct)+(12))>>2)]=e.screenY;
      HEAP32[(((eventStruct)+(16))>>2)]=e.clientX;
      HEAP32[(((eventStruct)+(20))>>2)]=e.clientY;
      HEAP32[(((eventStruct)+(24))>>2)]=e.ctrlKey;
      HEAP32[(((eventStruct)+(28))>>2)]=e.shiftKey;
      HEAP32[(((eventStruct)+(32))>>2)]=e.altKey;
      HEAP32[(((eventStruct)+(36))>>2)]=e.metaKey;
      HEAP16[(((eventStruct)+(40))>>1)]=e.button;
      HEAP16[(((eventStruct)+(42))>>1)]=e.buttons;
      HEAP32[(((eventStruct)+(44))>>2)]=e["movementX"] || e["mozMovementX"] || e["webkitMovementX"] || (e.screenX-JSEvents.previousScreenX);
      HEAP32[(((eventStruct)+(48))>>2)]=e["movementY"] || e["mozMovementY"] || e["webkitMovementY"] || (e.screenY-JSEvents.previousScreenY);
  
      if (Module['canvas']) {
        var rect = Module['canvas'].getBoundingClientRect();
        HEAP32[(((eventStruct)+(60))>>2)]=e.clientX - rect.left;
        HEAP32[(((eventStruct)+(64))>>2)]=e.clientY - rect.top;
      } else { // Canvas is not initialized, return 0.
        HEAP32[(((eventStruct)+(60))>>2)]=0;
        HEAP32[(((eventStruct)+(64))>>2)]=0;
      }
      if (target) {
        var rect = JSEvents.getBoundingClientRectOrZeros(target);
        HEAP32[(((eventStruct)+(52))>>2)]=e.clientX - rect.left;
        HEAP32[(((eventStruct)+(56))>>2)]=e.clientY - rect.top;
      } else { // No specific target passed, return 0.
        HEAP32[(((eventStruct)+(52))>>2)]=0;
        HEAP32[(((eventStruct)+(56))>>2)]=0;
      }
      // wheel and mousewheel events contain wrong screenX/screenY on chrome/opera
        // https://github.com/emscripten-core/emscripten/pull/4997
      // https://bugs.chromium.org/p/chromium/issues/detail?id=699956
      if (e.type !== 'wheel' && e.type !== 'mousewheel') {
        JSEvents.previousScreenX = e.screenX;
        JSEvents.previousScreenY = e.screenY;
      }
    }function __registerMouseEventCallback(target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString, targetThread) {
      if (!JSEvents.mouseEvent) JSEvents.mouseEvent = _malloc( 72 );
      target = __findEventTarget(target);
  
      var mouseEventHandlerFunc = function(ev) {
        var e = ev || event;
  
        // TODO: Make this access thread safe, or this could update live while app is reading it.
        __fillMouseEventData(JSEvents.mouseEvent, e, target);
  
        if (dynCall_iiii(callbackfunc, eventTypeId, JSEvents.mouseEvent, userData)) e.preventDefault();
      };
  
      var eventHandler = {
        target: target,
        allowsDeferredCalls: eventTypeString != 'mousemove' && eventTypeString != 'mouseenter' && eventTypeString != 'mouseleave', // Mouse move events do not allow fullscreen/pointer lock requests to be handled in them!
        eventTypeString: eventTypeString,
        callbackfunc: callbackfunc,
        handlerFunc: mouseEventHandlerFunc,
        useCapture: useCapture
      };
      // In IE, mousedown events don't either allow deferred calls to be run!
      if (JSEvents.isInternetExplorer() && eventTypeString == 'mousedown') eventHandler.allowsDeferredCalls = false;
      JSEvents.registerOrRemoveHandler(eventHandler);
    }function _emscripten_set_click_callback_on_thread(target, userData, useCapture, callbackfunc, targetThread) {
      __registerMouseEventCallback(target, userData, useCapture, callbackfunc, 4, "click", targetThread);
      return 0;
    }

  
  
  function __fillFullscreenChangeEventData(eventStruct, e) {
      var fullscreenElement = document.fullscreenElement || document.mozFullScreenElement || document.webkitFullscreenElement || document.msFullscreenElement;
      var isFullscreen = !!fullscreenElement;
      HEAP32[((eventStruct)>>2)]=isFullscreen;
      HEAP32[(((eventStruct)+(4))>>2)]=JSEvents.fullscreenEnabled();
      // If transitioning to fullscreen, report info about the element that is now fullscreen.
      // If transitioning to windowed mode, report info about the element that just was fullscreen.
      var reportedElement = isFullscreen ? fullscreenElement : JSEvents.previousFullscreenElement;
      var nodeName = JSEvents.getNodeNameForTarget(reportedElement);
      var id = (reportedElement && reportedElement.id) ? reportedElement.id : '';
      stringToUTF8(nodeName, eventStruct + 8, 128);
      stringToUTF8(id, eventStruct + 136, 128);
      HEAP32[(((eventStruct)+(264))>>2)]=reportedElement ? reportedElement.clientWidth : 0;
      HEAP32[(((eventStruct)+(268))>>2)]=reportedElement ? reportedElement.clientHeight : 0;
      HEAP32[(((eventStruct)+(272))>>2)]=screen.width;
      HEAP32[(((eventStruct)+(276))>>2)]=screen.height;
      if (isFullscreen) {
        JSEvents.previousFullscreenElement = fullscreenElement;
      }
    }function __registerFullscreenChangeEventCallback(target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString, targetThread) {
      if (!JSEvents.fullscreenChangeEvent) JSEvents.fullscreenChangeEvent = _malloc( 280 );
  
      var fullscreenChangeEventhandlerFunc = function(ev) {
        var e = ev || event;
  
        var fullscreenChangeEvent = JSEvents.fullscreenChangeEvent;
  
        __fillFullscreenChangeEventData(fullscreenChangeEvent, e);
  
        if (dynCall_iiii(callbackfunc, eventTypeId, fullscreenChangeEvent, userData)) e.preventDefault();
      };
  
      var eventHandler = {
        target: target,
        allowsDeferredCalls: false,
        eventTypeString: eventTypeString,
        callbackfunc: callbackfunc,
        handlerFunc: fullscreenChangeEventhandlerFunc,
        useCapture: useCapture
      };
      JSEvents.registerOrRemoveHandler(eventHandler);
    }function _emscripten_set_fullscreenchange_callback_on_thread(target, userData, useCapture, callbackfunc, targetThread) {
      if (!JSEvents.fullscreenEnabled()) return -1;
      target = target ? __findEventTarget(target) : __specialEventTargets[1];
      if (!target) return -4;
      __registerFullscreenChangeEventCallback(target, userData, useCapture, callbackfunc, 19, "fullscreenchange", targetThread);
      __registerFullscreenChangeEventCallback(target, userData, useCapture, callbackfunc, 19, "mozfullscreenchange", targetThread);
      __registerFullscreenChangeEventCallback(target, userData, useCapture, callbackfunc, 19, "webkitfullscreenchange", targetThread);
      __registerFullscreenChangeEventCallback(target, userData, useCapture, callbackfunc, 19, "msfullscreenchange", targetThread);
      return 0;
    }

  
  function __registerGamepadEventCallback(target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString, targetThread) {
      if (!JSEvents.gamepadEvent) JSEvents.gamepadEvent = _malloc( 1432 );
  
      var gamepadEventHandlerFunc = function(ev) {
        var e = ev || event;
  
        var gamepadEvent = JSEvents.gamepadEvent;
        __fillGamepadEventData(gamepadEvent, e["gamepad"]);
  
        if (dynCall_iiii(callbackfunc, eventTypeId, gamepadEvent, userData)) e.preventDefault();
      };
  
      var eventHandler = {
        target: __findEventTarget(target),
        allowsDeferredCalls: true,
        eventTypeString: eventTypeString,
        callbackfunc: callbackfunc,
        handlerFunc: gamepadEventHandlerFunc,
        useCapture: useCapture
      };
      JSEvents.registerOrRemoveHandler(eventHandler);
    }function _emscripten_set_gamepadconnected_callback_on_thread(userData, useCapture, callbackfunc, targetThread) {
      if (!navigator.getGamepads && !navigator.webkitGetGamepads) return -1;
      __registerGamepadEventCallback(2, userData, useCapture, callbackfunc, 26, "gamepadconnected", targetThread);
      return 0;
    }

  function _emscripten_set_gamepaddisconnected_callback_on_thread(userData, useCapture, callbackfunc, targetThread) {
      if (!navigator.getGamepads && !navigator.webkitGetGamepads) return -1;
      __registerGamepadEventCallback(2, userData, useCapture, callbackfunc, 27, "gamepaddisconnected", targetThread);
      return 0;
    }

  
  function __registerKeyEventCallback(target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString, targetThread) {
      if (!JSEvents.keyEvent) JSEvents.keyEvent = _malloc( 164 );
  
      var keyEventHandlerFunc = function(ev) {
        var e = ev || event;
  
        var keyEventData = JSEvents.keyEvent;
        stringToUTF8(e.key ? e.key : "", keyEventData + 0, 32);
        stringToUTF8(e.code ? e.code : "", keyEventData + 32, 32);
        HEAP32[(((keyEventData)+(64))>>2)]=e.location;
        HEAP32[(((keyEventData)+(68))>>2)]=e.ctrlKey;
        HEAP32[(((keyEventData)+(72))>>2)]=e.shiftKey;
        HEAP32[(((keyEventData)+(76))>>2)]=e.altKey;
        HEAP32[(((keyEventData)+(80))>>2)]=e.metaKey;
        HEAP32[(((keyEventData)+(84))>>2)]=e.repeat;
        stringToUTF8(e.locale ? e.locale : "", keyEventData + 88, 32);
        stringToUTF8(e.char ? e.char : "", keyEventData + 120, 32);
        HEAP32[(((keyEventData)+(152))>>2)]=e.charCode;
        HEAP32[(((keyEventData)+(156))>>2)]=e.keyCode;
        HEAP32[(((keyEventData)+(160))>>2)]=e.which;
  
        if (dynCall_iiii(callbackfunc, eventTypeId, keyEventData, userData)) e.preventDefault();
      };
  
      var eventHandler = {
        target: __findEventTarget(target),
        allowsDeferredCalls: JSEvents.isInternetExplorer() ? false : true, // MSIE doesn't allow fullscreen and pointerlock requests from key handlers, others do.
        eventTypeString: eventTypeString,
        callbackfunc: callbackfunc,
        handlerFunc: keyEventHandlerFunc,
        useCapture: useCapture
      };
      JSEvents.registerOrRemoveHandler(eventHandler);
    }function _emscripten_set_keypress_callback_on_thread(target, userData, useCapture, callbackfunc, targetThread) {
      __registerKeyEventCallback(target, userData, useCapture, callbackfunc, 1, "keypress", targetThread);
      return 0;
    }

  
  function __registerTouchEventCallback(target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString, targetThread) {
      if (!JSEvents.touchEvent) JSEvents.touchEvent = _malloc( 1684 );
  
      target = __findEventTarget(target);
  
      var touchEventHandlerFunc = function(ev) {
        var e = ev || event;
  
        var touches = {};
        for(var i = 0; i < e.touches.length; ++i) {
          var touch = e.touches[i];
          touch.changed = false;
          touches[touch.identifier] = touch;
        }
        for(var i = 0; i < e.changedTouches.length; ++i) {
          var touch = e.changedTouches[i];
          touches[touch.identifier] = touch;
          touch.changed = true;
        }
        for(var i = 0; i < e.targetTouches.length; ++i) {
          var touch = e.targetTouches[i];
          touches[touch.identifier].onTarget = true;
        }
  
        var touchEvent = JSEvents.touchEvent;
        var ptr = touchEvent;
        HEAP32[(((ptr)+(4))>>2)]=e.ctrlKey;
        HEAP32[(((ptr)+(8))>>2)]=e.shiftKey;
        HEAP32[(((ptr)+(12))>>2)]=e.altKey;
        HEAP32[(((ptr)+(16))>>2)]=e.metaKey;
        ptr += 20; // Advance to the start of the touch array.
        var canvasRect = Module['canvas'] ? Module['canvas'].getBoundingClientRect() : undefined;
        var targetRect = JSEvents.getBoundingClientRectOrZeros(target);
        var numTouches = 0;
        for(var i in touches) {
          var t = touches[i];
          HEAP32[((ptr)>>2)]=t.identifier;
          HEAP32[(((ptr)+(4))>>2)]=t.screenX;
          HEAP32[(((ptr)+(8))>>2)]=t.screenY;
          HEAP32[(((ptr)+(12))>>2)]=t.clientX;
          HEAP32[(((ptr)+(16))>>2)]=t.clientY;
          HEAP32[(((ptr)+(20))>>2)]=t.pageX;
          HEAP32[(((ptr)+(24))>>2)]=t.pageY;
          HEAP32[(((ptr)+(28))>>2)]=t.changed;
          HEAP32[(((ptr)+(32))>>2)]=t.onTarget;
          if (canvasRect) {
            HEAP32[(((ptr)+(44))>>2)]=t.clientX - canvasRect.left;
            HEAP32[(((ptr)+(48))>>2)]=t.clientY - canvasRect.top;
          } else {
            HEAP32[(((ptr)+(44))>>2)]=0;
            HEAP32[(((ptr)+(48))>>2)]=0;            
          }
          HEAP32[(((ptr)+(36))>>2)]=t.clientX - targetRect.left;
          HEAP32[(((ptr)+(40))>>2)]=t.clientY - targetRect.top;
  
          ptr += 52;
  
          if (++numTouches >= 32) {
            break;
          }
        }
        HEAP32[((touchEvent)>>2)]=numTouches;
  
        if (dynCall_iiii(callbackfunc, eventTypeId, touchEvent, userData)) e.preventDefault();
      };
  
      var eventHandler = {
        target: target,
        allowsDeferredCalls: eventTypeString == 'touchstart' || eventTypeString == 'touchend',
        eventTypeString: eventTypeString,
        callbackfunc: callbackfunc,
        handlerFunc: touchEventHandlerFunc,
        useCapture: useCapture
      };
      JSEvents.registerOrRemoveHandler(eventHandler);
    }function _emscripten_set_touchcancel_callback_on_thread(target, userData, useCapture, callbackfunc, targetThread) {
      __registerTouchEventCallback(target, userData, useCapture, callbackfunc, 25, "touchcancel", targetThread);
      return 0;
    }

  function _emscripten_set_touchend_callback_on_thread(target, userData, useCapture, callbackfunc, targetThread) {
      __registerTouchEventCallback(target, userData, useCapture, callbackfunc, 23, "touchend", targetThread);
      return 0;
    }

  function _emscripten_set_touchmove_callback_on_thread(target, userData, useCapture, callbackfunc, targetThread) {
      __registerTouchEventCallback(target, userData, useCapture, callbackfunc, 24, "touchmove", targetThread);
      return 0;
    }

  function _emscripten_set_touchstart_callback_on_thread(target, userData, useCapture, callbackfunc, targetThread) {
      __registerTouchEventCallback(target, userData, useCapture, callbackfunc, 22, "touchstart", targetThread);
      return 0;
    }

  
  var EmterpreterAsync={initted:false,state:0,saveStack:"",yieldCallbacks:[],postAsync:null,restartFunc:null,asyncFinalizers:[],ensureInit:function() {
        if (this.initted) return;
        this.initted = true;
        abortDecorators.push(function(output, what) {
          if (EmterpreterAsync.state === 1 || EmterpreterAsync.state === 2) {
            return output + '\nThis error happened during an emterpreter-async operation. Was there non-emterpreted code on the stack during save (which is unallowed)? If so, you may want to adjust EMTERPRETIFY_BLACKLIST, EMTERPRETIFY_WHITELIST. For reference, this is what the stack looked like when we tried to save it: ' + [EmterpreterAsync.state, EmterpreterAsync.saveStack];
          }
          return output;
        });
      },setState:function(s) {
        this.ensureInit();
        this.state = s;
        Module['setAsyncState'](s);
      },handle:function(doAsyncOp, yieldDuring) {
        noExitRuntime = true;
        if (EmterpreterAsync.state === 0) {
          // save the stack we want to resume. this lets other code run in between
          // XXX this assumes that this stack top never ever leak! exceptions might violate that
          var stack = new Int32Array(HEAP32.subarray(EMTSTACKTOP>>2, Module['emtStackSave']()>>2));
          var stacktop = Module['stackSave']();
  
          var resumedCallbacksForYield = false;
          function resumeCallbacksForYield() {
            if (resumedCallbacksForYield) return;
            resumedCallbacksForYield = true;
            // allow async callbacks, and also make sure to call the specified yield callbacks. we must
            // do this when nothing is on the stack, i.e. after it unwound
            EmterpreterAsync.yieldCallbacks.forEach(function(func) {
              func();
            });
            Browser.resumeAsyncCallbacks(); // if we were paused (e.g. we are after a sleep), then since we are now yielding, it is safe to call callbacks
          }
  
          var callingDoAsyncOp = 1; // if resume is called synchronously - during the doAsyncOp - we must make it truly async, for consistency
  
          doAsyncOp(function resume(post) {
            if (ABORT) {
              return;
            }
            if (callingDoAsyncOp) {
              assert(callingDoAsyncOp === 1); // avoid infinite recursion
              callingDoAsyncOp++;
              setTimeout(function() {
                resume(post);
              }, 0);
              return;
            }
  
            assert(EmterpreterAsync.state === 1 || EmterpreterAsync.state === 3);
            EmterpreterAsync.setState(3);
            if (yieldDuring) {
              resumeCallbacksForYield();
            }
            // copy the stack back in and resume
            HEAP32.set(stack, EMTSTACKTOP>>2);
            assert(stacktop === Module['stackSave']()); // nothing should have modified the stack meanwhile
            // we are now starting to restore the stack
            EmterpreterAsync.setState(2);
            // Resume the main loop
            if (Browser.mainLoop.func) {
              Browser.mainLoop.resume();
            }
            assert(!EmterpreterAsync.postAsync);
            EmterpreterAsync.postAsync = post || null;
            var asyncReturnValue;
            if (!EmterpreterAsync.restartFunc) {
              // pc of the first function, from which we can reconstruct the rest, is at position 0 on the stack
              Module['emterpret'](stack[0]);
            } else {
              // the restartFunc knows how to emterpret the proper function, and also returns the return value
              asyncReturnValue = EmterpreterAsync.restartFunc();
            }
            if (!yieldDuring && EmterpreterAsync.state === 0) {
              // if we did *not* do another async operation, then we know that nothing is conceptually on the stack now, and we can re-allow async callbacks as well as run the queued ones right now
              Browser.resumeAsyncCallbacks();
            }
            if (EmterpreterAsync.state === 0) {
              // All async operations have concluded.
              // In particular, if we were in an async ccall, we have
              // consumed the restartFunc and can reset it to null.
              EmterpreterAsync.restartFunc = null;
              // The async finalizers can run now, after all async operations.
              var asyncFinalizers = EmterpreterAsync.asyncFinalizers;
              EmterpreterAsync.asyncFinalizers = [];
              asyncFinalizers.forEach(function(func) {
                func(asyncReturnValue);
              });
            }
          });
  
          callingDoAsyncOp = 0;
  
          EmterpreterAsync.setState(1);
          EmterpreterAsync.saveStack = new Error().stack; // we can't call  stackTrace()  as it calls compiled code
          // Pause the main loop, until we resume
          if (Browser.mainLoop.func) {
            Browser.mainLoop.pause();
          }
          if (yieldDuring) {
            // do this when we are not on the stack, i.e., the stack unwound. we might be too late, in which case we do it in resume()
            setTimeout(function() {
              resumeCallbacksForYield();
            }, 0);
          } else {
            Browser.pauseAsyncCallbacks();
          }
        } else {
          // nothing to do here, the stack was just recreated. reset the state.
          assert(EmterpreterAsync.state === 2);
          EmterpreterAsync.setState(0);
  
          if (EmterpreterAsync.postAsync) {
            var ret = EmterpreterAsync.postAsync();
            EmterpreterAsync.postAsync = null;
            return ret;
          }
        }
      }};function _emscripten_sleep(ms) {
      EmterpreterAsync.handle(function(resume) {
        setTimeout(function() {
          // do this manually; we can't call into Browser.safeSetTimeout, because that is paused/resumed!
          resume();
        }, ms);
      });
    }

  function _exit(status) {
      // void _exit(int status);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/exit.html
      exit(status);
    }

  
  var ENV={};function _getenv(name) {
      // char *getenv(const char *name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/getenv.html
      if (name === 0) return 0;
      name = UTF8ToString(name);
      if (!ENV.hasOwnProperty(name)) return 0;
  
      if (_getenv.ret) _free(_getenv.ret);
      _getenv.ret = allocateUTF8(ENV[name]);
      return _getenv.ret;
    }

  function _glActiveTexture(x0) { GLctx['activeTexture'](x0) }

  function _glAttachShader(program, shader) {
      GLctx.attachShader(GL.programs[program],
                              GL.shaders[shader]);
    }

  function _glBindAttribLocation(program, index, name) {
      GLctx.bindAttribLocation(GL.programs[program], index, UTF8ToString(name));
    }

  function _glBindBuffer(target, buffer) {
  
      GLctx.bindBuffer(target, GL.buffers[buffer]);
    }

  function _glBindTexture(target, texture) {
      GLctx.bindTexture(target, GL.textures[texture]);
    }

  function _glBlendFunc(x0, x1) { GLctx['blendFunc'](x0, x1) }

  function _glBufferData(target, size, data, usage) {
        // N.b. here first form specifies a heap subarray, second form an integer size, so the ?: code here is polymorphic. It is advised to avoid
        // randomly mixing both uses in calling code, to avoid any potential JS engine JIT issues.
        GLctx.bufferData(target, data ? HEAPU8.subarray(data, data+size) : size, usage);
    }

  function _glBufferSubData(target, offset, size, data) {
      GLctx.bufferSubData(target, offset, HEAPU8.subarray(data, data+size));
    }

  function _glClear(x0) { GLctx['clear'](x0) }

  function _glClearColor(x0, x1, x2, x3) { GLctx['clearColor'](x0, x1, x2, x3) }

  function _glClearDepthf(x0) { GLctx['clearDepth'](x0) }

  function _glCompileShader(shader) {
      GLctx.compileShader(GL.shaders[shader]);
    }

  function _glCompressedTexImage2D(target, level, internalFormat, width, height, border, imageSize, data) {
      GLctx['compressedTexImage2D'](target, level, internalFormat, width, height, border, data ? HEAPU8.subarray((data),(data+imageSize)) : null);
    }

  function _glCreateProgram() {
      var id = GL.getNewId(GL.programs);
      var program = GLctx.createProgram();
      program.name = id;
      GL.programs[id] = program;
      return id;
    }

  function _glCreateShader(shaderType) {
      var id = GL.getNewId(GL.shaders);
      GL.shaders[id] = GLctx.createShader(shaderType);
      return id;
    }

  function _glCullFace(x0) { GLctx['cullFace'](x0) }

  function _glDeleteProgram(id) {
      if (!id) return;
      var program = GL.programs[id];
      if (!program) { // glDeleteProgram actually signals an error when deleting a nonexisting object, unlike some other GL delete functions.
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
      GLctx.deleteProgram(program);
      program.name = 0;
      GL.programs[id] = null;
      GL.programInfos[id] = null;
    }

  function _glDepthFunc(x0) { GLctx['depthFunc'](x0) }

  function _glDisable(x0) { GLctx['disable'](x0) }

  function _glDrawArrays(mode, first, count) {
  
      GLctx.drawArrays(mode, first, count);
  
    }

  function _glDrawElements(mode, count, type, indices) {
  
      GLctx.drawElements(mode, count, type, indices);
  
    }

  function _glEnable(x0) { GLctx['enable'](x0) }

  function _glEnableVertexAttribArray(index) {
      GLctx.enableVertexAttribArray(index);
    }

  function _glFrontFace(x0) { GLctx['frontFace'](x0) }

  function _glGenBuffers(n, buffers) {
      __glGenObject(n, buffers, 'createBuffer', GL.buffers
        );
    }

  function _glGenTextures(n, textures) {
      __glGenObject(n, textures, 'createTexture', GL.textures
        );
    }

  function _glGetAttribLocation(program, name) {
      return GLctx.getAttribLocation(GL.programs[program], UTF8ToString(name));
    }

  function _glGetFloatv(name_, p) {
      emscriptenWebGLGet(name_, p, 2);
    }

  function _glGetProgramInfoLog(program, maxLength, length, infoLog) {
      var log = GLctx.getProgramInfoLog(GL.programs[program]);
      if (log === null) log = '(unknown error)';
      var numBytesWrittenExclNull = (maxLength > 0 && infoLog) ? stringToUTF8(log, infoLog, maxLength) : 0;
      if (length) HEAP32[((length)>>2)]=numBytesWrittenExclNull;
    }

  function _glGetProgramiv(program, pname, p) {
      if (!p) {
        // GLES2 specification does not specify how to behave if p is a null pointer. Since calling this function does not make sense
        // if p == null, issue a GL error to notify user about it.
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
  
      if (program >= GL.counter) {
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
  
      var ptable = GL.programInfos[program];
      if (!ptable) {
        GL.recordError(0x0502 /* GL_INVALID_OPERATION */);
        return;
      }
  
      if (pname == 0x8B84) { // GL_INFO_LOG_LENGTH
        var log = GLctx.getProgramInfoLog(GL.programs[program]);
        if (log === null) log = '(unknown error)';
        HEAP32[((p)>>2)]=log.length + 1;
      } else if (pname == 0x8B87 /* GL_ACTIVE_UNIFORM_MAX_LENGTH */) {
        HEAP32[((p)>>2)]=ptable.maxUniformLength;
      } else if (pname == 0x8B8A /* GL_ACTIVE_ATTRIBUTE_MAX_LENGTH */) {
        if (ptable.maxAttributeLength == -1) {
          program = GL.programs[program];
          var numAttribs = GLctx.getProgramParameter(program, 0x8B89/*GL_ACTIVE_ATTRIBUTES*/);
          ptable.maxAttributeLength = 0; // Spec says if there are no active attribs, 0 must be returned.
          for (var i = 0; i < numAttribs; ++i) {
            var activeAttrib = GLctx.getActiveAttrib(program, i);
            ptable.maxAttributeLength = Math.max(ptable.maxAttributeLength, activeAttrib.name.length+1);
          }
        }
        HEAP32[((p)>>2)]=ptable.maxAttributeLength;
      } else if (pname == 0x8A35 /* GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH */) {
        if (ptable.maxUniformBlockNameLength == -1) {
          program = GL.programs[program];
          var numBlocks = GLctx.getProgramParameter(program, 0x8A36/*GL_ACTIVE_UNIFORM_BLOCKS*/);
          ptable.maxUniformBlockNameLength = 0;
          for (var i = 0; i < numBlocks; ++i) {
            var activeBlockName = GLctx.getActiveUniformBlockName(program, i);
            ptable.maxUniformBlockNameLength = Math.max(ptable.maxUniformBlockNameLength, activeBlockName.length+1);
          }
        }
        HEAP32[((p)>>2)]=ptable.maxUniformBlockNameLength;
      } else {
        HEAP32[((p)>>2)]=GLctx.getProgramParameter(GL.programs[program], pname);
      }
    }

  function _glGetShaderInfoLog(shader, maxLength, length, infoLog) {
      var log = GLctx.getShaderInfoLog(GL.shaders[shader]);
      if (log === null) log = '(unknown error)';
      var numBytesWrittenExclNull = (maxLength > 0 && infoLog) ? stringToUTF8(log, infoLog, maxLength) : 0;
      if (length) HEAP32[((length)>>2)]=numBytesWrittenExclNull;
    }

  function _glGetShaderiv(shader, pname, p) {
      if (!p) {
        // GLES2 specification does not specify how to behave if p is a null pointer. Since calling this function does not make sense
        // if p == null, issue a GL error to notify user about it.
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
      if (pname == 0x8B84) { // GL_INFO_LOG_LENGTH
        var log = GLctx.getShaderInfoLog(GL.shaders[shader]);
        if (log === null) log = '(unknown error)';
        HEAP32[((p)>>2)]=log.length + 1;
      } else if (pname == 0x8B88) { // GL_SHADER_SOURCE_LENGTH
        var source = GLctx.getShaderSource(GL.shaders[shader]);
        var sourceLength = (source === null || source.length == 0) ? 0 : source.length + 1;
        HEAP32[((p)>>2)]=sourceLength;
      } else {
        HEAP32[((p)>>2)]=GLctx.getShaderParameter(GL.shaders[shader], pname);
      }
    }

  function _glGetString(name_) {
      if (GL.stringCache[name_]) return GL.stringCache[name_];
      var ret;
      switch(name_) {
        case 0x1F03 /* GL_EXTENSIONS */:
          var exts = GLctx.getSupportedExtensions() || []; // .getSupportedExtensions() can return null if context is lost, so coerce to empty array.
          exts = exts.concat(exts.map(function(e) { return "GL_" + e; }));
          ret = stringToNewUTF8(exts.join(' '));
          break;
        case 0x1F00 /* GL_VENDOR */:
        case 0x1F01 /* GL_RENDERER */:
        case 0x9245 /* UNMASKED_VENDOR_WEBGL */:
        case 0x9246 /* UNMASKED_RENDERER_WEBGL */:
          var s = GLctx.getParameter(name_);
          if (!s) {
            GL.recordError(0x0500/*GL_INVALID_ENUM*/);
          }
          ret = stringToNewUTF8(s);
          break;
  
        case 0x1F02 /* GL_VERSION */:
          var glVersion = GLctx.getParameter(GLctx.VERSION);
          // return GLES version string corresponding to the version of the WebGL context
          {
            glVersion = 'OpenGL ES 2.0 (' + glVersion + ')';
          }
          ret = stringToNewUTF8(glVersion);
          break;
        case 0x8B8C /* GL_SHADING_LANGUAGE_VERSION */:
          var glslVersion = GLctx.getParameter(GLctx.SHADING_LANGUAGE_VERSION);
          // extract the version number 'N.M' from the string 'WebGL GLSL ES N.M ...'
          var ver_re = /^WebGL GLSL ES ([0-9]\.[0-9][0-9]?)(?:$| .*)/;
          var ver_num = glslVersion.match(ver_re);
          if (ver_num !== null) {
            if (ver_num[1].length == 3) ver_num[1] = ver_num[1] + '0'; // ensure minor version has 2 digits
            glslVersion = 'OpenGL ES GLSL ES ' + ver_num[1] + ' (' + glslVersion + ')';
          }
          ret = stringToNewUTF8(glslVersion);
          break;
        default:
          GL.recordError(0x0500/*GL_INVALID_ENUM*/);
          return 0;
      }
      GL.stringCache[name_] = ret;
      return ret;
    }

  function _glGetUniformLocation(program, name) {
      name = UTF8ToString(name);
  
      var arrayIndex = 0;
      // If user passed an array accessor "[index]", parse the array index off the accessor.
      if (name[name.length - 1] == ']') {
        var leftBrace = name.lastIndexOf('[');
        arrayIndex = name[leftBrace+1] != ']' ? parseInt(name.slice(leftBrace + 1)) : 0; // "index]", parseInt will ignore the ']' at the end; but treat "foo[]" as "foo[0]"
        name = name.slice(0, leftBrace);
      }
  
      var uniformInfo = GL.programInfos[program] && GL.programInfos[program].uniforms[name]; // returns pair [ dimension_of_uniform_array, uniform_location ]
      if (uniformInfo && arrayIndex >= 0 && arrayIndex < uniformInfo[0]) { // Check if user asked for an out-of-bounds element, i.e. for 'vec4 colors[3];' user could ask for 'colors[10]' which should return -1.
        return uniformInfo[1] + arrayIndex;
      } else {
        return -1;
      }
    }

  function _glLinkProgram(program) {
      GLctx.linkProgram(GL.programs[program]);
      GL.populateUniformTable(program);
    }

  function _glPixelStorei(pname, param) {
      if (pname == 0x0cf5 /* GL_UNPACK_ALIGNMENT */) {
        GL.unpackAlignment = param;
      }
      GLctx.pixelStorei(pname, param);
    }

  function _glReadPixels(x, y, width, height, format, type, pixels) {
      var pixelData = emscriptenWebGLGetTexPixelData(type, format, width, height, pixels, format);
      if (!pixelData) {
        GL.recordError(0x0500/*GL_INVALID_ENUM*/);
        return;
      }
      GLctx.readPixels(x, y, width, height, format, type, pixelData);
    }

  function _glShaderSource(shader, count, string, length) {
      var source = GL.getSource(shader, count, string, length);
  
  
      GLctx.shaderSource(GL.shaders[shader], source);
    }

  function _glTexImage2D(target, level, internalFormat, width, height, border, format, type, pixels) {
      GLctx.texImage2D(target, level, internalFormat, width, height, border, format, type, pixels ? emscriptenWebGLGetTexPixelData(type, format, width, height, pixels, internalFormat) : null);
    }

  function _glTexParameteri(x0, x1, x2) { GLctx['texParameteri'](x0, x1, x2) }

  function _glUniform1i(location, v0) {
      GLctx.uniform1i(GL.uniforms[location], v0);
    }

  function _glUniform4f(location, v0, v1, v2, v3) {
      GLctx.uniform4f(GL.uniforms[location], v0, v1, v2, v3);
    }

  function _glUniformMatrix4fv(location, count, transpose, value) {
  
  
      if (16*count <= GL.MINI_TEMP_BUFFER_SIZE) {
        // avoid allocation when uploading few enough uniforms
        var view = GL.miniTempBufferViews[16*count-1];
        for (var i = 0; i < 16*count; i += 16) {
          view[i] = HEAPF32[(((value)+(4*i))>>2)];
          view[i+1] = HEAPF32[(((value)+(4*i+4))>>2)];
          view[i+2] = HEAPF32[(((value)+(4*i+8))>>2)];
          view[i+3] = HEAPF32[(((value)+(4*i+12))>>2)];
          view[i+4] = HEAPF32[(((value)+(4*i+16))>>2)];
          view[i+5] = HEAPF32[(((value)+(4*i+20))>>2)];
          view[i+6] = HEAPF32[(((value)+(4*i+24))>>2)];
          view[i+7] = HEAPF32[(((value)+(4*i+28))>>2)];
          view[i+8] = HEAPF32[(((value)+(4*i+32))>>2)];
          view[i+9] = HEAPF32[(((value)+(4*i+36))>>2)];
          view[i+10] = HEAPF32[(((value)+(4*i+40))>>2)];
          view[i+11] = HEAPF32[(((value)+(4*i+44))>>2)];
          view[i+12] = HEAPF32[(((value)+(4*i+48))>>2)];
          view[i+13] = HEAPF32[(((value)+(4*i+52))>>2)];
          view[i+14] = HEAPF32[(((value)+(4*i+56))>>2)];
          view[i+15] = HEAPF32[(((value)+(4*i+60))>>2)];
        }
      } else
      {
        var view = HEAPF32.subarray((value)>>2,(value+count*64)>>2);
      }
      GLctx.uniformMatrix4fv(GL.uniforms[location], !!transpose, view);
    }

  function _glUseProgram(program) {
      GLctx.useProgram(GL.programs[program]);
    }

  function _glVertexAttribPointer(index, size, type, normalized, stride, ptr) {
      GLctx.vertexAttribPointer(index, size, type, !!normalized, stride, ptr);
    }

  function _glViewport(x0, x1, x2, x3) { GLctx['viewport'](x0, x1, x2, x3) }

  
  var GLFW={Window:function(id, width, height, title, monitor, share) {
        this.id = id;
        this.x = 0;
        this.y = 0;
        this.fullscreen = false; // Used to determine if app in fullscreen mode
        this.storedX = 0; // Used to store X before fullscreen
        this.storedY = 0; // Used to store Y before fullscreen
        this.width = width;
        this.height = height;
        this.storedWidth = width; // Used to store width before fullscreen
        this.storedHeight = height; // Used to store height before fullscreen
        this.title = title;
        this.monitor = monitor;
        this.share = share;
        this.attributes = GLFW.hints;
        this.inputModes = {
          0x00033001:0x00034001, // GLFW_CURSOR (GLFW_CURSOR_NORMAL)
          0x00033002:0, // GLFW_STICKY_KEYS
          0x00033003:0, // GLFW_STICKY_MOUSE_BUTTONS
        };
        this.buttons = 0;
        this.keys = new Array();
        this.domKeys = new Array();
        this.shouldClose = 0;
        this.title = null;
        this.windowPosFunc = null; // GLFWwindowposfun
        this.windowSizeFunc = null; // GLFWwindowsizefun
        this.windowCloseFunc = null; // GLFWwindowclosefun
        this.windowRefreshFunc = null; // GLFWwindowrefreshfun
        this.windowFocusFunc = null; // GLFWwindowfocusfun
        this.windowIconifyFunc = null; // GLFWwindowiconifyfun
        this.framebufferSizeFunc = null; // GLFWframebuffersizefun
        this.mouseButtonFunc = null; // GLFWmousebuttonfun
        this.cursorPosFunc = null; // GLFWcursorposfun
        this.cursorEnterFunc = null; // GLFWcursorenterfun
        this.scrollFunc = null; // GLFWscrollfun
        this.dropFunc = null; // GLFWdropfun
        this.keyFunc = null; // GLFWkeyfun
        this.charFunc = null; // GLFWcharfun
        this.userptr = null;
      },WindowFromId:function(id) {
        if (id <= 0 || !GLFW.windows) return null;
        return GLFW.windows[id - 1];
      },joystickFunc:null,errorFunc:null,monitorFunc:null,active:null,windows:null,monitors:null,monitorString:null,versionString:null,initialTime:null,extensions:null,hints:null,defaultHints:{131073:0,131074:0,131075:1,131076:1,131077:1,135169:8,135170:8,135171:8,135172:8,135173:24,135174:8,135175:0,135176:0,135177:0,135178:0,135179:0,135180:0,135181:0,135182:0,135183:0,139265:196609,139266:1,139267:0,139268:0,139269:0,139270:0,139271:0,139272:0},DOMToGLFWKeyCode:function(keycode) {
        switch (keycode) {
          // these keycodes are only defined for GLFW3, assume they are the same for GLFW2
          case 0x20:return 32; // DOM_VK_SPACE -> GLFW_KEY_SPACE
          case 0xDE:return 39; // DOM_VK_QUOTE -> GLFW_KEY_APOSTROPHE
          case 0xBC:return 44; // DOM_VK_COMMA -> GLFW_KEY_COMMA
          case 0xAD:return 45; // DOM_VK_HYPHEN_MINUS -> GLFW_KEY_MINUS
          case 0xBD:return 45; // DOM_VK_MINUS -> GLFW_KEY_MINUS
          case 0xBE:return 46; // DOM_VK_PERIOD -> GLFW_KEY_PERIOD
          case 0xBF:return 47; // DOM_VK_SLASH -> GLFW_KEY_SLASH
          case 0x30:return 48; // DOM_VK_0 -> GLFW_KEY_0
          case 0x31:return 49; // DOM_VK_1 -> GLFW_KEY_1
          case 0x32:return 50; // DOM_VK_2 -> GLFW_KEY_2
          case 0x33:return 51; // DOM_VK_3 -> GLFW_KEY_3
          case 0x34:return 52; // DOM_VK_4 -> GLFW_KEY_4
          case 0x35:return 53; // DOM_VK_5 -> GLFW_KEY_5
          case 0x36:return 54; // DOM_VK_6 -> GLFW_KEY_6
          case 0x37:return 55; // DOM_VK_7 -> GLFW_KEY_7
          case 0x38:return 56; // DOM_VK_8 -> GLFW_KEY_8
          case 0x39:return 57; // DOM_VK_9 -> GLFW_KEY_9
          case 0x3B:return 59; // DOM_VK_SEMICOLON -> GLFW_KEY_SEMICOLON
          case 0x3D:return 61; // DOM_VK_EQUALS -> GLFW_KEY_EQUAL
          case 0xBB:return 61; // DOM_VK_EQUALS -> GLFW_KEY_EQUAL
          case 0x41:return 65; // DOM_VK_A -> GLFW_KEY_A
          case 0x42:return 66; // DOM_VK_B -> GLFW_KEY_B
          case 0x43:return 67; // DOM_VK_C -> GLFW_KEY_C
          case 0x44:return 68; // DOM_VK_D -> GLFW_KEY_D
          case 0x45:return 69; // DOM_VK_E -> GLFW_KEY_E
          case 0x46:return 70; // DOM_VK_F -> GLFW_KEY_F
          case 0x47:return 71; // DOM_VK_G -> GLFW_KEY_G
          case 0x48:return 72; // DOM_VK_H -> GLFW_KEY_H
          case 0x49:return 73; // DOM_VK_I -> GLFW_KEY_I
          case 0x4A:return 74; // DOM_VK_J -> GLFW_KEY_J
          case 0x4B:return 75; // DOM_VK_K -> GLFW_KEY_K
          case 0x4C:return 76; // DOM_VK_L -> GLFW_KEY_L
          case 0x4D:return 77; // DOM_VK_M -> GLFW_KEY_M
          case 0x4E:return 78; // DOM_VK_N -> GLFW_KEY_N
          case 0x4F:return 79; // DOM_VK_O -> GLFW_KEY_O
          case 0x50:return 80; // DOM_VK_P -> GLFW_KEY_P
          case 0x51:return 81; // DOM_VK_Q -> GLFW_KEY_Q
          case 0x52:return 82; // DOM_VK_R -> GLFW_KEY_R
          case 0x53:return 83; // DOM_VK_S -> GLFW_KEY_S
          case 0x54:return 84; // DOM_VK_T -> GLFW_KEY_T
          case 0x55:return 85; // DOM_VK_U -> GLFW_KEY_U
          case 0x56:return 86; // DOM_VK_V -> GLFW_KEY_V
          case 0x57:return 87; // DOM_VK_W -> GLFW_KEY_W
          case 0x58:return 88; // DOM_VK_X -> GLFW_KEY_X
          case 0x59:return 89; // DOM_VK_Y -> GLFW_KEY_Y
          case 0x5a:return 90; // DOM_VK_Z -> GLFW_KEY_Z
          case 0xDB:return 91; // DOM_VK_OPEN_BRACKET -> GLFW_KEY_LEFT_BRACKET
          case 0xDC:return 92; // DOM_VK_BACKSLASH -> GLFW_KEY_BACKSLASH
          case 0xDD:return 93; // DOM_VK_CLOSE_BRACKET -> GLFW_KEY_RIGHT_BRACKET
          case 0xC0:return 94; // DOM_VK_BACK_QUOTE -> GLFW_KEY_GRAVE_ACCENT
  
  
          case 0x1B:return 256; // DOM_VK_ESCAPE -> GLFW_KEY_ESCAPE
          case 0x0D:return 257; // DOM_VK_RETURN -> GLFW_KEY_ENTER
          case 0x09:return 258; // DOM_VK_TAB -> GLFW_KEY_TAB
          case 0x08:return 259; // DOM_VK_BACK -> GLFW_KEY_BACKSPACE
          case 0x2D:return 260; // DOM_VK_INSERT -> GLFW_KEY_INSERT
          case 0x2E:return 261; // DOM_VK_DELETE -> GLFW_KEY_DELETE
          case 0x27:return 262; // DOM_VK_RIGHT -> GLFW_KEY_RIGHT
          case 0x25:return 263; // DOM_VK_LEFT -> GLFW_KEY_LEFT
          case 0x28:return 264; // DOM_VK_DOWN -> GLFW_KEY_DOWN
          case 0x26:return 265; // DOM_VK_UP -> GLFW_KEY_UP
          case 0x21:return 266; // DOM_VK_PAGE_UP -> GLFW_KEY_PAGE_UP
          case 0x22:return 267; // DOM_VK_PAGE_DOWN -> GLFW_KEY_PAGE_DOWN
          case 0x24:return 268; // DOM_VK_HOME -> GLFW_KEY_HOME
          case 0x23:return 269; // DOM_VK_END -> GLFW_KEY_END
          case 0x14:return 280; // DOM_VK_CAPS_LOCK -> GLFW_KEY_CAPS_LOCK
          case 0x91:return 281; // DOM_VK_SCROLL_LOCK -> GLFW_KEY_SCROLL_LOCK
          case 0x90:return 282; // DOM_VK_NUM_LOCK -> GLFW_KEY_NUM_LOCK
          case 0x2C:return 283; // DOM_VK_SNAPSHOT -> GLFW_KEY_PRINT_SCREEN
          case 0x13:return 284; // DOM_VK_PAUSE -> GLFW_KEY_PAUSE
          case 0x70:return 290; // DOM_VK_F1 -> GLFW_KEY_F1
          case 0x71:return 291; // DOM_VK_F2 -> GLFW_KEY_F2
          case 0x72:return 292; // DOM_VK_F3 -> GLFW_KEY_F3
          case 0x73:return 293; // DOM_VK_F4 -> GLFW_KEY_F4
          case 0x74:return 294; // DOM_VK_F5 -> GLFW_KEY_F5
          case 0x75:return 295; // DOM_VK_F6 -> GLFW_KEY_F6
          case 0x76:return 296; // DOM_VK_F7 -> GLFW_KEY_F7
          case 0x77:return 297; // DOM_VK_F8 -> GLFW_KEY_F8
          case 0x78:return 298; // DOM_VK_F9 -> GLFW_KEY_F9
          case 0x79:return 299; // DOM_VK_F10 -> GLFW_KEY_F10
          case 0x7A:return 300; // DOM_VK_F11 -> GLFW_KEY_F11
          case 0x7B:return 301; // DOM_VK_F12 -> GLFW_KEY_F12
          case 0x7C:return 302; // DOM_VK_F13 -> GLFW_KEY_F13
          case 0x7D:return 303; // DOM_VK_F14 -> GLFW_KEY_F14
          case 0x7E:return 304; // DOM_VK_F15 -> GLFW_KEY_F15
          case 0x7F:return 305; // DOM_VK_F16 -> GLFW_KEY_F16
          case 0x80:return 306; // DOM_VK_F17 -> GLFW_KEY_F17
          case 0x81:return 307; // DOM_VK_F18 -> GLFW_KEY_F18
          case 0x82:return 308; // DOM_VK_F19 -> GLFW_KEY_F19
          case 0x83:return 309; // DOM_VK_F20 -> GLFW_KEY_F20
          case 0x84:return 310; // DOM_VK_F21 -> GLFW_KEY_F21
          case 0x85:return 311; // DOM_VK_F22 -> GLFW_KEY_F22
          case 0x86:return 312; // DOM_VK_F23 -> GLFW_KEY_F23
          case 0x87:return 313; // DOM_VK_F24 -> GLFW_KEY_F24
          case 0x88:return 314; // 0x88 (not used?) -> GLFW_KEY_F25
          case 0x60:return 320; // DOM_VK_NUMPAD0 -> GLFW_KEY_KP_0
          case 0x61:return 321; // DOM_VK_NUMPAD1 -> GLFW_KEY_KP_1
          case 0x62:return 322; // DOM_VK_NUMPAD2 -> GLFW_KEY_KP_2
          case 0x63:return 323; // DOM_VK_NUMPAD3 -> GLFW_KEY_KP_3
          case 0x64:return 324; // DOM_VK_NUMPAD4 -> GLFW_KEY_KP_4
          case 0x65:return 325; // DOM_VK_NUMPAD5 -> GLFW_KEY_KP_5
          case 0x66:return 326; // DOM_VK_NUMPAD6 -> GLFW_KEY_KP_6
          case 0x67:return 327; // DOM_VK_NUMPAD7 -> GLFW_KEY_KP_7
          case 0x68:return 328; // DOM_VK_NUMPAD8 -> GLFW_KEY_KP_8
          case 0x69:return 329; // DOM_VK_NUMPAD9 -> GLFW_KEY_KP_9
          case 0x6E:return 330; // DOM_VK_DECIMAL -> GLFW_KEY_KP_DECIMAL
          case 0x6F:return 331; // DOM_VK_DIVIDE -> GLFW_KEY_KP_DIVIDE
          case 0x6A:return 332; // DOM_VK_MULTIPLY -> GLFW_KEY_KP_MULTIPLY
          case 0x6D:return 333; // DOM_VK_SUBTRACT -> GLFW_KEY_KP_SUBTRACT
          case 0x6B:return 334; // DOM_VK_ADD -> GLFW_KEY_KP_ADD
          // case 0x0D:return 335; // DOM_VK_RETURN -> GLFW_KEY_KP_ENTER (DOM_KEY_LOCATION_RIGHT)
          // case 0x61:return 336; // DOM_VK_EQUALS -> GLFW_KEY_KP_EQUAL (DOM_KEY_LOCATION_RIGHT)
          case 0x10:return 340; // DOM_VK_SHIFT -> GLFW_KEY_LEFT_SHIFT
          case 0x11:return 341; // DOM_VK_CONTROL -> GLFW_KEY_LEFT_CONTROL
          case 0x12:return 342; // DOM_VK_ALT -> GLFW_KEY_LEFT_ALT
          case 0x5B:return 343; // DOM_VK_WIN -> GLFW_KEY_LEFT_SUPER
          // case 0x10:return 344; // DOM_VK_SHIFT -> GLFW_KEY_RIGHT_SHIFT (DOM_KEY_LOCATION_RIGHT)
          // case 0x11:return 345; // DOM_VK_CONTROL -> GLFW_KEY_RIGHT_CONTROL (DOM_KEY_LOCATION_RIGHT)
          // case 0x12:return 346; // DOM_VK_ALT -> GLFW_KEY_RIGHT_ALT (DOM_KEY_LOCATION_RIGHT)
          // case 0x5B:return 347; // DOM_VK_WIN -> GLFW_KEY_RIGHT_SUPER (DOM_KEY_LOCATION_RIGHT)
          case 0x5D:return 348; // DOM_VK_CONTEXT_MENU -> GLFW_KEY_MENU
          // XXX: GLFW_KEY_WORLD_1, GLFW_KEY_WORLD_2 what are these?
          default:return -1; // GLFW_KEY_UNKNOWN
        };
      },getModBits:function(win) {
        var mod = 0;
        if (win.keys[340]) mod |= 0x0001; // GLFW_MOD_SHIFT
        if (win.keys[341]) mod |= 0x0002; // GLFW_MOD_CONTROL
        if (win.keys[342]) mod |= 0x0004; // GLFW_MOD_ALT
        if (win.keys[343]) mod |= 0x0008; // GLFW_MOD_SUPER
        return mod;
      },onKeyPress:function(event) {
        if (!GLFW.active || !GLFW.active.charFunc) return;
        if (event.ctrlKey || event.metaKey) return;
  
        // correct unicode charCode is only available with onKeyPress event
        var charCode = event.charCode;
        if (charCode == 0 || (charCode >= 0x00 && charCode <= 0x1F)) return;
  
  
        dynCall_vii(GLFW.active.charFunc, GLFW.active.id, charCode);
      },onKeyChanged:function(keyCode, status) {
        if (!GLFW.active) return;
  
        var key = GLFW.DOMToGLFWKeyCode(keyCode);
        if (key == -1) return;
  
        var repeat = status && GLFW.active.keys[key];
        GLFW.active.keys[key] = status;
        GLFW.active.domKeys[keyCode] = status;
        if (!GLFW.active.keyFunc) return;
  
  
        if (repeat) status = 2; // GLFW_REPEAT
        dynCall_viiiii(GLFW.active.keyFunc, GLFW.active.id, key, keyCode, status, GLFW.getModBits(GLFW.active));
      },onGamepadConnected:function(event) {
        GLFW.refreshJoysticks();
      },onGamepadDisconnected:function(event) {
        GLFW.refreshJoysticks();
      },onKeydown:function(event) {
        GLFW.onKeyChanged(event.keyCode, 1); // GLFW_PRESS or GLFW_REPEAT
  
        // This logic comes directly from the sdl implementation. We cannot
        // call preventDefault on all keydown events otherwise onKeyPress will
        // not get called
        if (event.keyCode === 8 /* backspace */ || event.keyCode === 9 /* tab */) {
          event.preventDefault();
        }
      },onKeyup:function(event) {
        GLFW.onKeyChanged(event.keyCode, 0); // GLFW_RELEASE
      },onBlur:function(event) {
        if (!GLFW.active) return;
  
        for (var i = 0; i < GLFW.active.domKeys.length; ++i) {
          if (GLFW.active.domKeys[i]) {
            GLFW.onKeyChanged(i, 0); // GLFW_RELEASE
          }
        }
      },onMousemove:function(event) {
        if (!GLFW.active) return;
  
        Browser.calculateMouseEvent(event);
  
        if (event.target != Module["canvas"] || !GLFW.active.cursorPosFunc) return;
  
  
        dynCall_vidd(GLFW.active.cursorPosFunc, GLFW.active.id, Browser.mouseX, Browser.mouseY);
      },DOMToGLFWMouseButton:function(event) {
        // DOM and glfw have different button codes.
        // See http://www.w3schools.com/jsref/event_button.asp.
        var eventButton = event['button'];
        if (eventButton > 0) {
          if (eventButton == 1) {
            eventButton = 2;
          } else {
            eventButton = 1;
          }
        }
        return eventButton;
      },onMouseenter:function(event) {
        if (!GLFW.active) return;
  
        if (event.target != Module["canvas"] || !GLFW.active.cursorEnterFunc) return;
  
        dynCall_vii(GLFW.active.cursorEnterFunc, GLFW.active.id, 1);
      },onMouseleave:function(event) {
        if (!GLFW.active) return;
  
        if (event.target != Module["canvas"] || !GLFW.active.cursorEnterFunc) return;
  
        dynCall_vii(GLFW.active.cursorEnterFunc, GLFW.active.id, 0);
      },onMouseButtonChanged:function(event, status) {
        if (!GLFW.active) return;
  
        Browser.calculateMouseEvent(event);
  
        if (event.target != Module["canvas"]) return;
  
        var eventButton = GLFW.DOMToGLFWMouseButton(event);
  
        if (status == 1) { // GLFW_PRESS
          GLFW.active.buttons |= (1 << eventButton);
          try {
            event.target.setCapture();
          } catch (e) {}
        } else {  // GLFW_RELEASE
          GLFW.active.buttons &= ~(1 << eventButton);
        }
  
        if (!GLFW.active.mouseButtonFunc) return;
  
  
        dynCall_viiii(GLFW.active.mouseButtonFunc, GLFW.active.id, eventButton, status, GLFW.getModBits(GLFW.active));
      },onMouseButtonDown:function(event) {
        if (!GLFW.active) return;
        GLFW.onMouseButtonChanged(event, 1); // GLFW_PRESS
      },onMouseButtonUp:function(event) {
        if (!GLFW.active) return;
        GLFW.onMouseButtonChanged(event, 0); // GLFW_RELEASE
      },onMouseWheel:function(event) {
        // Note the minus sign that flips browser wheel direction (positive direction scrolls page down) to native wheel direction (positive direction is mouse wheel up)
        var delta = -Browser.getMouseWheelDelta(event);
        delta = (delta == 0) ? 0 : (delta > 0 ? Math.max(delta, 1) : Math.min(delta, -1)); // Quantize to integer so that minimum scroll is at least +/- 1.
        GLFW.wheelPos += delta;
  
        if (!GLFW.active || !GLFW.active.scrollFunc || event.target != Module['canvas']) return;
  
  
        var sx = 0;
        var sy = 0;
        if (event.type == 'mousewheel') {
          sx = event.wheelDeltaX;
          sy = event.wheelDeltaY;
        } else {
          sx = event.deltaX;
          sy = event.deltaY;
        }
  
        dynCall_vidd(GLFW.active.scrollFunc, GLFW.active.id, sx, sy);
  
        event.preventDefault();
      },onCanvasResize:function(width, height) {
        if (!GLFW.active) return;
  
        var resizeNeeded = true;
  
        // If the client is requesting fullscreen mode
        if (document["fullscreen"] || document["fullScreen"] || document["mozFullScreen"] || document["webkitIsFullScreen"]) {
          GLFW.active.storedX = GLFW.active.x;
          GLFW.active.storedY = GLFW.active.y;
          GLFW.active.storedWidth = GLFW.active.width;
          GLFW.active.storedHeight = GLFW.active.height;
          GLFW.active.x = GLFW.active.y = 0;
          GLFW.active.width = screen.width;
          GLFW.active.height = screen.height;
          GLFW.active.fullscreen = true;
  
        // If the client is reverting from fullscreen mode
        } else if (GLFW.active.fullscreen == true) {
          GLFW.active.x = GLFW.active.storedX;
          GLFW.active.y = GLFW.active.storedY;
          GLFW.active.width = GLFW.active.storedWidth;
          GLFW.active.height = GLFW.active.storedHeight;
          GLFW.active.fullscreen = false;
  
        // If the width/height values do not match current active window sizes
        } else if (GLFW.active.width != width || GLFW.active.height != height) {
            GLFW.active.width = width;
            GLFW.active.height = height;
        } else {
          resizeNeeded = false;
        }
  
        // If any of the above conditions were true, we need to resize the canvas
        if (resizeNeeded) {
          // resets the canvas size to counter the aspect preservation of Browser.updateCanvasDimensions
          Browser.setCanvasSize(GLFW.active.width, GLFW.active.height, true);
          // TODO: Client dimensions (clientWidth/clientHeight) vs pixel dimensions (width/height) of
          // the canvas should drive window and framebuffer size respectfully.
          GLFW.onWindowSizeChanged();
          GLFW.onFramebufferSizeChanged();
        }
      },onWindowSizeChanged:function() {
        if (!GLFW.active) return;
  
        if (!GLFW.active.windowSizeFunc) return;
  
  
        dynCall_viii(GLFW.active.windowSizeFunc, GLFW.active.id, GLFW.active.width, GLFW.active.height);
      },onFramebufferSizeChanged:function() {
        if (!GLFW.active) return;
  
        if (!GLFW.active.framebufferSizeFunc) return;
  
        dynCall_viii(GLFW.active.framebufferSizeFunc, GLFW.active.id, GLFW.active.width, GLFW.active.height);
      },getTime:function() {
        return _emscripten_get_now() / 1000;
      },setWindowTitle:function(winid, title) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
  
        win.title = UTF8ToString(title);
        if (GLFW.active.id == win.id) {
          document.title = win.title;
        }
      },setJoystickCallback:function(cbfun) {
        GLFW.joystickFunc = cbfun;
        GLFW.refreshJoysticks();
      },joys:{},lastGamepadState:null,lastGamepadStateFrame:null,refreshJoysticks:function() {
        // Produce a new Gamepad API sample if we are ticking a new game frame, or if not using emscripten_set_main_loop() at all to drive animation.
        if (Browser.mainLoop.currentFrameNumber !== GLFW.lastGamepadStateFrame || !Browser.mainLoop.currentFrameNumber) {
          GLFW.lastGamepadState = navigator.getGamepads ? navigator.getGamepads() : (navigator.webkitGetGamepads ? navigator.webkitGetGamepads : null);
          GLFW.lastGamepadStateFrame = Browser.mainLoop.currentFrameNumber;
  
          for (var joy = 0; joy < GLFW.lastGamepadState.length; ++joy) {
            var gamepad = GLFW.lastGamepadState[joy];
  
            if (gamepad) {
              if (!GLFW.joys[joy]) {
                console.log('glfw joystick connected:',joy);
                GLFW.joys[joy] = {
                  id: allocate(intArrayFromString(gamepad.id), 'i8', ALLOC_NORMAL),
                  buttonsCount: gamepad.buttons.length,
                  axesCount: gamepad.axes.length,
                  buttons: allocate(new Array(gamepad.buttons.length), 'i8', ALLOC_NORMAL),
                  axes: allocate(new Array(gamepad.axes.length*4), 'float', ALLOC_NORMAL)
                };
  
                if (GLFW.joystickFunc) {
                  dynCall_vii(GLFW.joystickFunc, joy, 0x00040001); // GLFW_CONNECTED
                }
              }
  
              var data = GLFW.joys[joy];
  
              for (var i = 0; i < gamepad.buttons.length;  ++i) {
                setValue(data.buttons + i, gamepad.buttons[i].pressed, 'i8');
              }
  
              for (var i = 0; i < gamepad.axes.length; ++i) {
                setValue(data.axes + i*4, gamepad.axes[i], 'float');
              }
            } else {
              if (GLFW.joys[joy]) {
                console.log('glfw joystick disconnected',joy);
  
                if (GLFW.joystickFunc) {
                  dynCall_vii(GLFW.joystickFunc, joy, 0x00040002); // GLFW_DISCONNECTED
                }
  
                _free(GLFW.joys[joy].id);
                _free(GLFW.joys[joy].buttons);
                _free(GLFW.joys[joy].axes);
  
                delete GLFW.joys[joy];
              }
            }
          }
        }
      },setKeyCallback:function(winid, cbfun) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return null;
        var prevcbfun = win.keyFunc;
        win.keyFunc = cbfun;
        return prevcbfun;
      },setCharCallback:function(winid, cbfun) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return null;
        var prevcbfun = win.charFunc;
        win.charFunc = cbfun;
        return prevcbfun;
      },setMouseButtonCallback:function(winid, cbfun) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return null;
        var prevcbfun = win.mouseButtonFunc;
        win.mouseButtonFunc = cbfun;
        return prevcbfun;
      },setCursorPosCallback:function(winid, cbfun) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return null;
        var prevcbfun = win.cursorPosFunc;
        win.cursorPosFunc = cbfun;
        return prevcbfun;
      },setScrollCallback:function(winid, cbfun) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return null;
        var prevcbfun = win.scrollFunc;
        win.scrollFunc = cbfun;
        return prevcbfun;
      },setDropCallback:function(winid, cbfun) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return null;
        var prevcbfun = win.dropFunc;
        win.dropFunc = cbfun;
        return prevcbfun;
      },onDrop:function(event) {
        if (!GLFW.active || !GLFW.active.dropFunc) return;
        if (!event.dataTransfer || !event.dataTransfer.files || event.dataTransfer.files.length == 0) return;
  
        event.preventDefault();
  
  
        return false;
      },onDragover:function(event) {
        if (!GLFW.active || !GLFW.active.dropFunc) return;
  
        event.preventDefault();
        return false;
      },setWindowSizeCallback:function(winid, cbfun) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return null;
        var prevcbfun = win.windowSizeFunc;
        win.windowSizeFunc = cbfun;
  
  
        return prevcbfun;
      },setWindowCloseCallback:function(winid, cbfun) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return null;
        var prevcbfun = win.windowCloseFunc;
        win.windowCloseFunc = cbfun;
        return prevcbfun;
      },setWindowRefreshCallback:function(winid, cbfun) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return null;
        var prevcbfun = win.windowRefreshFunc;
        win.windowRefreshFunc = cbfun;
        return prevcbfun;
      },onClickRequestPointerLock:function(e) {
        if (!Browser.pointerLock && Module['canvas'].requestPointerLock) {
          Module['canvas'].requestPointerLock();
          e.preventDefault();
        }
      },setInputMode:function(winid, mode, value) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
  
        switch(mode) {
          case 0x00033001: { // GLFW_CURSOR
            switch(value) {
              case 0x00034001: { // GLFW_CURSOR_NORMAL
                win.inputModes[mode] = value;
                Module['canvas'].removeEventListener('click', GLFW.onClickRequestPointerLock, true);
                Module['canvas'].exitPointerLock();
                break;
              }
              case 0x00034002: { // GLFW_CURSOR_HIDDEN
                console.log("glfwSetInputMode called with GLFW_CURSOR_HIDDEN value not implemented.");
                break;
              }
              case 0x00034003: { // GLFW_CURSOR_DISABLED
                win.inputModes[mode] = value;
                Module['canvas'].addEventListener('click', GLFW.onClickRequestPointerLock, true);
                Module['canvas'].requestPointerLock();
                break;
              }
              default: {
                console.log("glfwSetInputMode called with unknown value parameter value: " + value + ".");
                break;
              }
            }
            break;
          }
          case 0x00033002: { // GLFW_STICKY_KEYS
            console.log("glfwSetInputMode called with GLFW_STICKY_KEYS mode not implemented.");
            break;
          }
          case 0x00033003: { // GLFW_STICKY_MOUSE_BUTTONS
            console.log("glfwSetInputMode called with GLFW_STICKY_MOUSE_BUTTONS mode not implemented.");
            break;
          }
          default: {
            console.log("glfwSetInputMode called with unknown mode parameter value: " + mode + ".");
            break;
          }
        }
      },getKey:function(winid, key) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return 0;
        return win.keys[key];
      },getMouseButton:function(winid, button) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return 0;
        return (win.buttons & (1 << button)) > 0;
      },getCursorPos:function(winid, x, y) {
        setValue(x, Browser.mouseX, 'double');
        setValue(y, Browser.mouseY, 'double');
      },getMousePos:function(winid, x, y) {
        setValue(x, Browser.mouseX, 'i32');
        setValue(y, Browser.mouseY, 'i32');
      },setCursorPos:function(winid, x, y) {
      },getWindowPos:function(winid, x, y) {
        var wx = 0;
        var wy = 0;
  
        var win = GLFW.WindowFromId(winid);
        if (win) {
          wx = win.x;
          wy = win.y;
        }
  
        setValue(x, wx, 'i32');
        setValue(y, wy, 'i32');
      },setWindowPos:function(winid, x, y) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
        win.x = x;
        win.y = y;
      },getWindowSize:function(winid, width, height) {
        var ww = 0;
        var wh = 0;
  
        var win = GLFW.WindowFromId(winid);
        if (win) {
          ww = win.width;
          wh = win.height;
        }
  
        setValue(width, ww, 'i32');
        setValue(height, wh, 'i32');
      },setWindowSize:function(winid, width, height) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
  
        if (GLFW.active.id == win.id) {
          if (width == screen.width && height == screen.height) {
            Browser.requestFullscreen();
          } else {
            Browser.exitFullscreen();
            Browser.setCanvasSize(width, height);
            win.width = width;
            win.height = height;
          }
        }
  
        if (!win.windowSizeFunc) return;
  
  
        dynCall_viii(win.windowSizeFunc, win.id, width, height);
      },createWindow:function(width, height, title, monitor, share) {
        var i, id;
        for (i = 0; i < GLFW.windows.length && GLFW.windows[i] !== null; i++);
        if (i > 0) throw "glfwCreateWindow only supports one window at time currently";
  
        // id for window
        id = i + 1;
  
        // not valid
        if (width <= 0 || height <= 0) return 0;
  
        if (monitor) {
          Browser.requestFullscreen();
        } else {
          Browser.setCanvasSize(width, height);
        }
  
        // Create context when there are no existing alive windows
        for (i = 0; i < GLFW.windows.length && GLFW.windows[i] == null; i++);
        if (i == GLFW.windows.length) {
          var contextAttributes = {
            antialias: (GLFW.hints[0x0002100D] > 1), // GLFW_SAMPLES
            depth: (GLFW.hints[0x00021005] > 0),     // GLFW_DEPTH_BITS
            stencil: (GLFW.hints[0x00021006] > 0),   // GLFW_STENCIL_BITS
            alpha: (GLFW.hints[0x00021004] > 0)      // GLFW_ALPHA_BITS
          }
          Module.ctx = Browser.createContext(Module['canvas'], true, true, contextAttributes);
        }
  
        // If context creation failed, do not return a valid window
        if (!Module.ctx) return 0;
  
        // Get non alive id
        var win = new GLFW.Window(id, width, height, title, monitor, share);
  
        // Set window to array
        if (id - 1 == GLFW.windows.length) {
          GLFW.windows.push(win);
        } else {
          GLFW.windows[id - 1] = win;
        }
  
        GLFW.active = win;
        return win.id;
      },destroyWindow:function(winid) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
  
        if (win.windowCloseFunc)
          dynCall_vi(win.windowCloseFunc, win.id);
  
        GLFW.windows[win.id - 1] = null;
        if (GLFW.active.id == win.id)
          GLFW.active = null;
  
        // Destroy context when no alive windows
        for (var i = 0; i < GLFW.windows.length; i++)
          if (GLFW.windows[i] !== null) return;
  
        Module.ctx = Browser.destroyContext(Module['canvas'], true, true);
      },swapBuffers:function(winid) {
      },GLFW2ParamToGLFW3Param:function(param) {
        var table = {
          0x00030001:0, // GLFW_MOUSE_CURSOR
          0x00030002:0, // GLFW_STICKY_KEYS
          0x00030003:0, // GLFW_STICKY_MOUSE_BUTTONS
          0x00030004:0, // GLFW_SYSTEM_KEYS
          0x00030005:0, // GLFW_KEY_REPEAT
          0x00030006:0, // GLFW_AUTO_POLL_EVENTS
          0x00020001:0, // GLFW_OPENED
          0x00020002:0, // GLFW_ACTIVE
          0x00020003:0, // GLFW_ICONIFIED
          0x00020004:0, // GLFW_ACCELERATED
          0x00020005:0x00021001, // GLFW_RED_BITS
          0x00020006:0x00021002, // GLFW_GREEN_BITS
          0x00020007:0x00021003, // GLFW_BLUE_BITS
          0x00020008:0x00021004, // GLFW_ALPHA_BITS
          0x00020009:0x00021005, // GLFW_DEPTH_BITS
          0x0002000A:0x00021006, // GLFW_STENCIL_BITS
          0x0002000B:0x0002100F, // GLFW_REFRESH_RATE
          0x0002000C:0x00021007, // GLFW_ACCUM_RED_BITS
          0x0002000D:0x00021008, // GLFW_ACCUM_GREEN_BITS
          0x0002000E:0x00021009, // GLFW_ACCUM_BLUE_BITS
          0x0002000F:0x0002100A, // GLFW_ACCUM_ALPHA_BITS
          0x00020010:0x0002100B, // GLFW_AUX_BUFFERS
          0x00020011:0x0002100C, // GLFW_STEREO
          0x00020012:0, // GLFW_WINDOW_NO_RESIZE
          0x00020013:0x0002100D, // GLFW_FSAA_SAMPLES
          0x00020014:0x00022002, // GLFW_OPENGL_VERSION_MAJOR
          0x00020015:0x00022003, // GLFW_OPENGL_VERSION_MINOR
          0x00020016:0x00022006, // GLFW_OPENGL_FORWARD_COMPAT
          0x00020017:0x00022007, // GLFW_OPENGL_DEBUG_CONTEXT
          0x00020018:0x00022008, // GLFW_OPENGL_PROFILE
        };
        return table[param];
      }};function _glfwCreateWindow(width, height, title, monitor, share) {
      return GLFW.createWindow(width, height, title, monitor, share);
    }

  function _glfwDefaultWindowHints() {
      GLFW.hints = GLFW.defaultHints;
    }

  function _glfwGetCursorPos(winid, x, y) {
      GLFW.getCursorPos(winid, x, y);
    }

  function _glfwGetKey(winid, key) {
      return GLFW.getKey(winid, key);
    }

  function _glfwGetPrimaryMonitor() {
      return 1;
    }

  function _glfwGetTime() {
      return GLFW.getTime() - GLFW.initialTime;
    }

  function _glfwGetVideoModes(monitor, count) {
      setValue(count, 0, 'i32');
      return 0;
    }

  function _glfwInit() {
      if (GLFW.windows) return 1; // GL_TRUE
  
      GLFW.initialTime = GLFW.getTime();
      GLFW.hints = GLFW.defaultHints;
      GLFW.windows = new Array()
      GLFW.active = null;
  
      window.addEventListener("gamepadconnected", GLFW.onGamepadConnected, true);
      window.addEventListener("gamepaddisconnected", GLFW.onGamepadDisconnected, true);
      window.addEventListener("keydown", GLFW.onKeydown, true);
      window.addEventListener("keypress", GLFW.onKeyPress, true);
      window.addEventListener("keyup", GLFW.onKeyup, true);
      window.addEventListener("blur", GLFW.onBlur, true);
      Module["canvas"].addEventListener("mousemove", GLFW.onMousemove, true);
      Module["canvas"].addEventListener("mousedown", GLFW.onMouseButtonDown, true);
      Module["canvas"].addEventListener("mouseup", GLFW.onMouseButtonUp, true);
      Module["canvas"].addEventListener('wheel', GLFW.onMouseWheel, true);
      Module["canvas"].addEventListener('mousewheel', GLFW.onMouseWheel, true);
      Module["canvas"].addEventListener('mouseenter', GLFW.onMouseenter, true);
      Module["canvas"].addEventListener('mouseleave', GLFW.onMouseleave, true);
      Module["canvas"].addEventListener('drop', GLFW.onDrop, true);
      Module["canvas"].addEventListener('dragover', GLFW.onDragover, true);
  
      Browser.resizeListeners.push(function(width, height) {
         GLFW.onCanvasResize(width, height);
      });
      return 1; // GL_TRUE
    }

  function _glfwMakeContextCurrent(winid) {}

  function _glfwSetCharCallback(winid, cbfun) {
      return GLFW.setCharCallback(winid, cbfun);
    }

  function _glfwSetCursorEnterCallback(winid, cbfun) {
      var win = GLFW.WindowFromId(winid);
      if (!win) return null;
      var prevcbfun = win.cursorEnterFunc;
      win.cursorEnterFunc = cbfun;
      return prevcbfun;
    }

  function _glfwSetCursorPosCallback(winid, cbfun) {
      return GLFW.setCursorPosCallback(winid, cbfun);
    }

  function _glfwSetDropCallback(winid, cbfun) {
      return GLFW.setDropCallback(winid, cbfun);
    }

  function _glfwSetErrorCallback(cbfun) {
      var prevcbfun = GLFW.errorFunc;
      GLFW.errorFunc = cbfun;
      return prevcbfun;
    }

  function _glfwSetKeyCallback(winid, cbfun) {
      return GLFW.setKeyCallback(winid, cbfun);
    }

  function _glfwSetMouseButtonCallback(winid, cbfun) {
      return GLFW.setMouseButtonCallback(winid, cbfun);
    }

  function _glfwSetScrollCallback(winid, cbfun) {
      return GLFW.setScrollCallback(winid, cbfun);
    }

  function _glfwSetWindowIconifyCallback(winid, cbfun) {
      var win = GLFW.WindowFromId(winid);
      if (!win) return null;
      var prevcbfun = win.windowIconifyFunc;
      win.windowIconifyFunc = cbfun;
      return prevcbfun;
    }

  function _glfwSetWindowShouldClose(winid, value) {
      var win = GLFW.WindowFromId(winid);
      if (!win) return;
      win.shouldClose = value;
    }

  function _glfwSetWindowSizeCallback(winid, cbfun) {
      return GLFW.setWindowSizeCallback(winid, cbfun);
    }

  function _glfwSwapBuffers(winid) {
      GLFW.swapBuffers(winid);
    }

  function _glfwSwapInterval(interval) {
      interval = Math.abs(interval); // GLFW uses negative values to enable GLX_EXT_swap_control_tear, which we don't have, so just treat negative and positive the same.
      if (interval == 0) _emscripten_set_main_loop_timing(0/*EM_TIMING_SETTIMEOUT*/, 0);
      else _emscripten_set_main_loop_timing(1/*EM_TIMING_RAF*/, interval);
    }

  function _glfwTerminate() {
      window.removeEventListener("gamepadconnected", GLFW.onGamepadConnected, true);
      window.removeEventListener("gamepaddisconnected", GLFW.onGamepadDisconnected, true);
      window.removeEventListener("keydown", GLFW.onKeydown, true);
      window.removeEventListener("keypress", GLFW.onKeyPress, true);
      window.removeEventListener("keyup", GLFW.onKeyup, true);
      window.removeEventListener("blur", GLFW.onBlur, true);
      Module["canvas"].removeEventListener("mousemove", GLFW.onMousemove, true);
      Module["canvas"].removeEventListener("mousedown", GLFW.onMouseButtonDown, true);
      Module["canvas"].removeEventListener("mouseup", GLFW.onMouseButtonUp, true);
      Module["canvas"].removeEventListener('wheel', GLFW.onMouseWheel, true);
      Module["canvas"].removeEventListener('mousewheel', GLFW.onMouseWheel, true);
      Module["canvas"].removeEventListener('mouseenter', GLFW.onMouseenter, true);
      Module["canvas"].removeEventListener('mouseleave', GLFW.onMouseleave, true);
      Module["canvas"].removeEventListener('drop', GLFW.onDrop, true);
      Module["canvas"].removeEventListener('dragover', GLFW.onDragover, true);
  
  
      Module["canvas"].width = Module["canvas"].height = 1;
      GLFW.windows = null;
      GLFW.active = null;
    }

  function _glfwWindowHint(target, hint) {
      GLFW.hints[target] = hint;
    }



   

  var _llvm_cos_f32=Math_cos;

  
   

  var _llvm_sin_f32=Math_sin;

  function _llvm_stackrestore(p) {
      var self = _llvm_stacksave;
      var ret = self.LLVM_SAVEDSTACKS[p];
      self.LLVM_SAVEDSTACKS.splice(p, 1);
      stackRestore(ret);
    }

  function _llvm_stacksave() {
      var self = _llvm_stacksave;
      if (!self.LLVM_SAVEDSTACKS) {
        self.LLVM_SAVEDSTACKS = [];
      }
      self.LLVM_SAVEDSTACKS.push(stackSave());
      return self.LLVM_SAVEDSTACKS.length-1;
    }

  function _llvm_trap() {
      abort('trap!');
    }

  
  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.set(HEAPU8.subarray(src, src+num), dest);
    }
  
   

   

   

  
  function _usleep(useconds) {
      // int usleep(useconds_t useconds);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/usleep.html
      // We're single-threaded, so use a busy loop. Super-ugly.
      var msec = useconds / 1000;
      if ((ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) && self['performance'] && self['performance']['now']) {
        var start = self['performance']['now']();
        while (self['performance']['now']() - start < msec) {
          // Do nothing.
        }
      } else {
        var start = Date.now();
        while (Date.now() - start < msec) {
          // Do nothing.
        }
      }
      return 0;
    }function _nanosleep(rqtp, rmtp) {
      // int nanosleep(const struct timespec  *rqtp, struct timespec *rmtp);
      if (rqtp === 0) {
        ___setErrNo(28);
        return -1;
      }
      var seconds = HEAP32[((rqtp)>>2)];
      var nanoseconds = HEAP32[(((rqtp)+(4))>>2)];
      if (nanoseconds < 0 || nanoseconds > 999999999 || seconds < 0) {
        ___setErrNo(28);
        return -1;
      }
      if (rmtp !== 0) {
        HEAP32[((rmtp)>>2)]=0;
        HEAP32[(((rmtp)+(4))>>2)]=0;
      }
      return _usleep((seconds * 1e6) + (nanoseconds / 1000));
    }

  
  
  function __isLeapYear(year) {
        return year%4 === 0 && (year%100 !== 0 || year%400 === 0);
    }
  
  function __arraySum(array, index) {
      var sum = 0;
      for (var i = 0; i <= index; sum += array[i++]);
      return sum;
    }
  
  
  var __MONTH_DAYS_LEAP=[31,29,31,30,31,30,31,31,30,31,30,31];
  
  var __MONTH_DAYS_REGULAR=[31,28,31,30,31,30,31,31,30,31,30,31];function __addDays(date, days) {
      var newDate = new Date(date.getTime());
      while(days > 0) {
        var leap = __isLeapYear(newDate.getFullYear());
        var currentMonth = newDate.getMonth();
        var daysInCurrentMonth = (leap ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR)[currentMonth];
  
        if (days > daysInCurrentMonth-newDate.getDate()) {
          // we spill over to next month
          days -= (daysInCurrentMonth-newDate.getDate()+1);
          newDate.setDate(1);
          if (currentMonth < 11) {
            newDate.setMonth(currentMonth+1)
          } else {
            newDate.setMonth(0);
            newDate.setFullYear(newDate.getFullYear()+1);
          }
        } else {
          // we stay in current month
          newDate.setDate(newDate.getDate()+days);
          return newDate;
        }
      }
  
      return newDate;
    }function _strftime(s, maxsize, format, tm) {
      // size_t strftime(char *restrict s, size_t maxsize, const char *restrict format, const struct tm *restrict timeptr);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/strftime.html
  
      var tm_zone = HEAP32[(((tm)+(40))>>2)];
  
      var date = {
        tm_sec: HEAP32[((tm)>>2)],
        tm_min: HEAP32[(((tm)+(4))>>2)],
        tm_hour: HEAP32[(((tm)+(8))>>2)],
        tm_mday: HEAP32[(((tm)+(12))>>2)],
        tm_mon: HEAP32[(((tm)+(16))>>2)],
        tm_year: HEAP32[(((tm)+(20))>>2)],
        tm_wday: HEAP32[(((tm)+(24))>>2)],
        tm_yday: HEAP32[(((tm)+(28))>>2)],
        tm_isdst: HEAP32[(((tm)+(32))>>2)],
        tm_gmtoff: HEAP32[(((tm)+(36))>>2)],
        tm_zone: tm_zone ? UTF8ToString(tm_zone) : ''
      };
  
      var pattern = UTF8ToString(format);
  
      // expand format
      var EXPANSION_RULES_1 = {
        '%c': '%a %b %d %H:%M:%S %Y',     // Replaced by the locale's appropriate date and time representation - e.g., Mon Aug  3 14:02:01 2013
        '%D': '%m/%d/%y',                 // Equivalent to %m / %d / %y
        '%F': '%Y-%m-%d',                 // Equivalent to %Y - %m - %d
        '%h': '%b',                       // Equivalent to %b
        '%r': '%I:%M:%S %p',              // Replaced by the time in a.m. and p.m. notation
        '%R': '%H:%M',                    // Replaced by the time in 24-hour notation
        '%T': '%H:%M:%S',                 // Replaced by the time
        '%x': '%m/%d/%y',                 // Replaced by the locale's appropriate date representation
        '%X': '%H:%M:%S',                 // Replaced by the locale's appropriate time representation
        // Modified Conversion Specifiers
        '%Ec': '%c',                      // Replaced by the locale's alternative appropriate date and time representation.
        '%EC': '%C',                      // Replaced by the name of the base year (period) in the locale's alternative representation.
        '%Ex': '%m/%d/%y',                // Replaced by the locale's alternative date representation.
        '%EX': '%H:%M:%S',                // Replaced by the locale's alternative time representation.
        '%Ey': '%y',                      // Replaced by the offset from %EC (year only) in the locale's alternative representation.
        '%EY': '%Y',                      // Replaced by the full alternative year representation.
        '%Od': '%d',                      // Replaced by the day of the month, using the locale's alternative numeric symbols, filled as needed with leading zeros if there is any alternative symbol for zero; otherwise, with leading <space> characters.
        '%Oe': '%e',                      // Replaced by the day of the month, using the locale's alternative numeric symbols, filled as needed with leading <space> characters.
        '%OH': '%H',                      // Replaced by the hour (24-hour clock) using the locale's alternative numeric symbols.
        '%OI': '%I',                      // Replaced by the hour (12-hour clock) using the locale's alternative numeric symbols.
        '%Om': '%m',                      // Replaced by the month using the locale's alternative numeric symbols.
        '%OM': '%M',                      // Replaced by the minutes using the locale's alternative numeric symbols.
        '%OS': '%S',                      // Replaced by the seconds using the locale's alternative numeric symbols.
        '%Ou': '%u',                      // Replaced by the weekday as a number in the locale's alternative representation (Monday=1).
        '%OU': '%U',                      // Replaced by the week number of the year (Sunday as the first day of the week, rules corresponding to %U ) using the locale's alternative numeric symbols.
        '%OV': '%V',                      // Replaced by the week number of the year (Monday as the first day of the week, rules corresponding to %V ) using the locale's alternative numeric symbols.
        '%Ow': '%w',                      // Replaced by the number of the weekday (Sunday=0) using the locale's alternative numeric symbols.
        '%OW': '%W',                      // Replaced by the week number of the year (Monday as the first day of the week) using the locale's alternative numeric symbols.
        '%Oy': '%y',                      // Replaced by the year (offset from %C ) using the locale's alternative numeric symbols.
      };
      for (var rule in EXPANSION_RULES_1) {
        pattern = pattern.replace(new RegExp(rule, 'g'), EXPANSION_RULES_1[rule]);
      }
  
      var WEEKDAYS = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];
      var MONTHS = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];
  
      function leadingSomething(value, digits, character) {
        var str = typeof value === 'number' ? value.toString() : (value || '');
        while (str.length < digits) {
          str = character[0]+str;
        }
        return str;
      }
  
      function leadingNulls(value, digits) {
        return leadingSomething(value, digits, '0');
      }
  
      function compareByDay(date1, date2) {
        function sgn(value) {
          return value < 0 ? -1 : (value > 0 ? 1 : 0);
        }
  
        var compare;
        if ((compare = sgn(date1.getFullYear()-date2.getFullYear())) === 0) {
          if ((compare = sgn(date1.getMonth()-date2.getMonth())) === 0) {
            compare = sgn(date1.getDate()-date2.getDate());
          }
        }
        return compare;
      }
  
      function getFirstWeekStartDate(janFourth) {
          switch (janFourth.getDay()) {
            case 0: // Sunday
              return new Date(janFourth.getFullYear()-1, 11, 29);
            case 1: // Monday
              return janFourth;
            case 2: // Tuesday
              return new Date(janFourth.getFullYear(), 0, 3);
            case 3: // Wednesday
              return new Date(janFourth.getFullYear(), 0, 2);
            case 4: // Thursday
              return new Date(janFourth.getFullYear(), 0, 1);
            case 5: // Friday
              return new Date(janFourth.getFullYear()-1, 11, 31);
            case 6: // Saturday
              return new Date(janFourth.getFullYear()-1, 11, 30);
          }
      }
  
      function getWeekBasedYear(date) {
          var thisDate = __addDays(new Date(date.tm_year+1900, 0, 1), date.tm_yday);
  
          var janFourthThisYear = new Date(thisDate.getFullYear(), 0, 4);
          var janFourthNextYear = new Date(thisDate.getFullYear()+1, 0, 4);
  
          var firstWeekStartThisYear = getFirstWeekStartDate(janFourthThisYear);
          var firstWeekStartNextYear = getFirstWeekStartDate(janFourthNextYear);
  
          if (compareByDay(firstWeekStartThisYear, thisDate) <= 0) {
            // this date is after the start of the first week of this year
            if (compareByDay(firstWeekStartNextYear, thisDate) <= 0) {
              return thisDate.getFullYear()+1;
            } else {
              return thisDate.getFullYear();
            }
          } else {
            return thisDate.getFullYear()-1;
          }
      }
  
      var EXPANSION_RULES_2 = {
        '%a': function(date) {
          return WEEKDAYS[date.tm_wday].substring(0,3);
        },
        '%A': function(date) {
          return WEEKDAYS[date.tm_wday];
        },
        '%b': function(date) {
          return MONTHS[date.tm_mon].substring(0,3);
        },
        '%B': function(date) {
          return MONTHS[date.tm_mon];
        },
        '%C': function(date) {
          var year = date.tm_year+1900;
          return leadingNulls((year/100)|0,2);
        },
        '%d': function(date) {
          return leadingNulls(date.tm_mday, 2);
        },
        '%e': function(date) {
          return leadingSomething(date.tm_mday, 2, ' ');
        },
        '%g': function(date) {
          // %g, %G, and %V give values according to the ISO 8601:2000 standard week-based year.
          // In this system, weeks begin on a Monday and week 1 of the year is the week that includes
          // January 4th, which is also the week that includes the first Thursday of the year, and
          // is also the first week that contains at least four days in the year.
          // If the first Monday of January is the 2nd, 3rd, or 4th, the preceding days are part of
          // the last week of the preceding year; thus, for Saturday 2nd January 1999,
          // %G is replaced by 1998 and %V is replaced by 53. If December 29th, 30th,
          // or 31st is a Monday, it and any following days are part of week 1 of the following year.
          // Thus, for Tuesday 30th December 1997, %G is replaced by 1998 and %V is replaced by 01.
  
          return getWeekBasedYear(date).toString().substring(2);
        },
        '%G': function(date) {
          return getWeekBasedYear(date);
        },
        '%H': function(date) {
          return leadingNulls(date.tm_hour, 2);
        },
        '%I': function(date) {
          var twelveHour = date.tm_hour;
          if (twelveHour == 0) twelveHour = 12;
          else if (twelveHour > 12) twelveHour -= 12;
          return leadingNulls(twelveHour, 2);
        },
        '%j': function(date) {
          // Day of the year (001-366)
          return leadingNulls(date.tm_mday+__arraySum(__isLeapYear(date.tm_year+1900) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, date.tm_mon-1), 3);
        },
        '%m': function(date) {
          return leadingNulls(date.tm_mon+1, 2);
        },
        '%M': function(date) {
          return leadingNulls(date.tm_min, 2);
        },
        '%n': function() {
          return '\n';
        },
        '%p': function(date) {
          if (date.tm_hour >= 0 && date.tm_hour < 12) {
            return 'AM';
          } else {
            return 'PM';
          }
        },
        '%S': function(date) {
          return leadingNulls(date.tm_sec, 2);
        },
        '%t': function() {
          return '\t';
        },
        '%u': function(date) {
          return date.tm_wday || 7;
        },
        '%U': function(date) {
          // Replaced by the week number of the year as a decimal number [00,53].
          // The first Sunday of January is the first day of week 1;
          // days in the new year before this are in week 0. [ tm_year, tm_wday, tm_yday]
          var janFirst = new Date(date.tm_year+1900, 0, 1);
          var firstSunday = janFirst.getDay() === 0 ? janFirst : __addDays(janFirst, 7-janFirst.getDay());
          var endDate = new Date(date.tm_year+1900, date.tm_mon, date.tm_mday);
  
          // is target date after the first Sunday?
          if (compareByDay(firstSunday, endDate) < 0) {
            // calculate difference in days between first Sunday and endDate
            var februaryFirstUntilEndMonth = __arraySum(__isLeapYear(endDate.getFullYear()) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, endDate.getMonth()-1)-31;
            var firstSundayUntilEndJanuary = 31-firstSunday.getDate();
            var days = firstSundayUntilEndJanuary+februaryFirstUntilEndMonth+endDate.getDate();
            return leadingNulls(Math.ceil(days/7), 2);
          }
  
          return compareByDay(firstSunday, janFirst) === 0 ? '01': '00';
        },
        '%V': function(date) {
          // Replaced by the week number of the year (Monday as the first day of the week)
          // as a decimal number [01,53]. If the week containing 1 January has four
          // or more days in the new year, then it is considered week 1.
          // Otherwise, it is the last week of the previous year, and the next week is week 1.
          // Both January 4th and the first Thursday of January are always in week 1. [ tm_year, tm_wday, tm_yday]
          var janFourthThisYear = new Date(date.tm_year+1900, 0, 4);
          var janFourthNextYear = new Date(date.tm_year+1901, 0, 4);
  
          var firstWeekStartThisYear = getFirstWeekStartDate(janFourthThisYear);
          var firstWeekStartNextYear = getFirstWeekStartDate(janFourthNextYear);
  
          var endDate = __addDays(new Date(date.tm_year+1900, 0, 1), date.tm_yday);
  
          if (compareByDay(endDate, firstWeekStartThisYear) < 0) {
            // if given date is before this years first week, then it belongs to the 53rd week of last year
            return '53';
          }
  
          if (compareByDay(firstWeekStartNextYear, endDate) <= 0) {
            // if given date is after next years first week, then it belongs to the 01th week of next year
            return '01';
          }
  
          // given date is in between CW 01..53 of this calendar year
          var daysDifference;
          if (firstWeekStartThisYear.getFullYear() < date.tm_year+1900) {
            // first CW of this year starts last year
            daysDifference = date.tm_yday+32-firstWeekStartThisYear.getDate()
          } else {
            // first CW of this year starts this year
            daysDifference = date.tm_yday+1-firstWeekStartThisYear.getDate();
          }
          return leadingNulls(Math.ceil(daysDifference/7), 2);
        },
        '%w': function(date) {
          return date.tm_wday;
        },
        '%W': function(date) {
          // Replaced by the week number of the year as a decimal number [00,53].
          // The first Monday of January is the first day of week 1;
          // days in the new year before this are in week 0. [ tm_year, tm_wday, tm_yday]
          var janFirst = new Date(date.tm_year, 0, 1);
          var firstMonday = janFirst.getDay() === 1 ? janFirst : __addDays(janFirst, janFirst.getDay() === 0 ? 1 : 7-janFirst.getDay()+1);
          var endDate = new Date(date.tm_year+1900, date.tm_mon, date.tm_mday);
  
          // is target date after the first Monday?
          if (compareByDay(firstMonday, endDate) < 0) {
            var februaryFirstUntilEndMonth = __arraySum(__isLeapYear(endDate.getFullYear()) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, endDate.getMonth()-1)-31;
            var firstMondayUntilEndJanuary = 31-firstMonday.getDate();
            var days = firstMondayUntilEndJanuary+februaryFirstUntilEndMonth+endDate.getDate();
            return leadingNulls(Math.ceil(days/7), 2);
          }
          return compareByDay(firstMonday, janFirst) === 0 ? '01': '00';
        },
        '%y': function(date) {
          // Replaced by the last two digits of the year as a decimal number [00,99]. [ tm_year]
          return (date.tm_year+1900).toString().substring(2);
        },
        '%Y': function(date) {
          // Replaced by the year as a decimal number (for example, 1997). [ tm_year]
          return date.tm_year+1900;
        },
        '%z': function(date) {
          // Replaced by the offset from UTC in the ISO 8601:2000 standard format ( +hhmm or -hhmm ).
          // For example, "-0430" means 4 hours 30 minutes behind UTC (west of Greenwich).
          var off = date.tm_gmtoff;
          var ahead = off >= 0;
          off = Math.abs(off) / 60;
          // convert from minutes into hhmm format (which means 60 minutes = 100 units)
          off = (off / 60)*100 + (off % 60);
          return (ahead ? '+' : '-') + String("0000" + off).slice(-4);
        },
        '%Z': function(date) {
          return date.tm_zone;
        },
        '%%': function() {
          return '%';
        }
      };
      for (var rule in EXPANSION_RULES_2) {
        if (pattern.indexOf(rule) >= 0) {
          pattern = pattern.replace(new RegExp(rule, 'g'), EXPANSION_RULES_2[rule](date));
        }
      }
  
      var bytes = intArrayFromString(pattern, false);
      if (bytes.length > maxsize) {
        return 0;
      }
  
      writeArrayToMemory(bytes, s);
      return bytes.length-1;
    }function _strftime_l(s, maxsize, format, tm) {
      return _strftime(s, maxsize, format, tm); // no locale support yet
    }

  function _time(ptr) {
      var ret = (Date.now()/1000)|0;
      if (ptr) {
        HEAP32[((ptr)>>2)]=ret;
      }
      return ret;
    }

FS.staticInit();Module["FS_createFolder"] = FS.createFolder;Module["FS_createPath"] = FS.createPath;Module["FS_createDataFile"] = FS.createDataFile;Module["FS_createPreloadedFile"] = FS.createPreloadedFile;Module["FS_createLazyFile"] = FS.createLazyFile;Module["FS_createLink"] = FS.createLink;Module["FS_createDevice"] = FS.createDevice;Module["FS_unlink"] = FS.unlink;;
Module["requestFullscreen"] = function Module_requestFullscreen(lockPointer, resizeCanvas, vrDevice) { Browser.requestFullscreen(lockPointer, resizeCanvas, vrDevice) };
  Module["requestFullScreen"] = function Module_requestFullScreen() { Browser.requestFullScreen() };
  Module["requestAnimationFrame"] = function Module_requestAnimationFrame(func) { Browser.requestAnimationFrame(func) };
  Module["setCanvasSize"] = function Module_setCanvasSize(width, height, noUpdates) { Browser.setCanvasSize(width, height, noUpdates) };
  Module["pauseMainLoop"] = function Module_pauseMainLoop() { Browser.mainLoop.pause() };
  Module["resumeMainLoop"] = function Module_resumeMainLoop() { Browser.mainLoop.resume() };
  Module["getUserMedia"] = function Module_getUserMedia() { Browser.getUserMedia() }
  Module["createContext"] = function Module_createContext(canvas, useWebGL, setInModule, webGLContextAttributes) { return Browser.createContext(canvas, useWebGL, setInModule, webGLContextAttributes) };
if (ENVIRONMENT_IS_NODE) {
    _emscripten_get_now = function _emscripten_get_now_actual() {
      var t = process['hrtime']();
      return t[0] * 1e3 + t[1] / 1e6;
    };
  } else if (typeof dateNow !== 'undefined') {
    _emscripten_get_now = dateNow;
  } else if (typeof performance === 'object' && performance && typeof performance['now'] === 'function') {
    _emscripten_get_now = function() { return performance['now'](); };
  } else {
    _emscripten_get_now = Date.now;
  };
var GLctx; GL.init();
for (var i = 0; i < 32; i++) __tempFixedLengthArray.push(new Array(i));;
var ASSERTIONS = true;

// Copyright 2017 The Emscripten Authors.  All rights reserved.
// Emscripten is available under two separate licenses, the MIT license and the
// University of Illinois/NCSA Open Source License.  Both these licenses can be
// found in the LICENSE file.

/** @type {function(string, boolean=, number=)} */
function intArrayFromString(stringy, dontAddNull, length) {
  var len = length > 0 ? length : lengthBytesUTF8(stringy)+1;
  var u8array = new Array(len);
  var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
  if (dontAddNull) u8array.length = numBytesWritten;
  return u8array;
}

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
      if (ASSERTIONS) {
        assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      }
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}


// ASM_LIBRARY EXTERN PRIMITIVES: Math_imul,Math_clz32,Math_floor,Math_ceil,Int8Array,Int32Array

function nullFunc_ff(x) { abortFnPtrError(x, 'ff'); }
function nullFunc_fff(x) { abortFnPtrError(x, 'fff'); }
function nullFunc_i(x) { abortFnPtrError(x, 'i'); }
function nullFunc_ii(x) { abortFnPtrError(x, 'ii'); }
function nullFunc_iidiiii(x) { abortFnPtrError(x, 'iidiiii'); }
function nullFunc_iii(x) { abortFnPtrError(x, 'iii'); }
function nullFunc_iiii(x) { abortFnPtrError(x, 'iiii'); }
function nullFunc_iiiii(x) { abortFnPtrError(x, 'iiiii'); }
function nullFunc_iiiiid(x) { abortFnPtrError(x, 'iiiiid'); }
function nullFunc_iiiiii(x) { abortFnPtrError(x, 'iiiiii'); }
function nullFunc_iiiiiid(x) { abortFnPtrError(x, 'iiiiiid'); }
function nullFunc_iiiiiii(x) { abortFnPtrError(x, 'iiiiiii'); }
function nullFunc_iiiiiiii(x) { abortFnPtrError(x, 'iiiiiiii'); }
function nullFunc_iiiiiiiii(x) { abortFnPtrError(x, 'iiiiiiiii'); }
function nullFunc_v(x) { abortFnPtrError(x, 'v'); }
function nullFunc_vf(x) { abortFnPtrError(x, 'vf'); }
function nullFunc_vff(x) { abortFnPtrError(x, 'vff'); }
function nullFunc_vffff(x) { abortFnPtrError(x, 'vffff'); }
function nullFunc_vfi(x) { abortFnPtrError(x, 'vfi'); }
function nullFunc_vi(x) { abortFnPtrError(x, 'vi'); }
function nullFunc_vidd(x) { abortFnPtrError(x, 'vidd'); }
function nullFunc_vif(x) { abortFnPtrError(x, 'vif'); }
function nullFunc_viff(x) { abortFnPtrError(x, 'viff'); }
function nullFunc_vifff(x) { abortFnPtrError(x, 'vifff'); }
function nullFunc_viffff(x) { abortFnPtrError(x, 'viffff'); }
function nullFunc_vii(x) { abortFnPtrError(x, 'vii'); }
function nullFunc_viif(x) { abortFnPtrError(x, 'viif'); }
function nullFunc_viii(x) { abortFnPtrError(x, 'viii'); }
function nullFunc_viiii(x) { abortFnPtrError(x, 'viiii'); }
function nullFunc_viiiii(x) { abortFnPtrError(x, 'viiiii'); }
function nullFunc_viiiiii(x) { abortFnPtrError(x, 'viiiiii'); }
function nullFunc_viiiiiii(x) { abortFnPtrError(x, 'viiiiiii'); }
function nullFunc_viiiiiiii(x) { abortFnPtrError(x, 'viiiiiiii'); }
function nullFunc_viiiiiiiii(x) { abortFnPtrError(x, 'viiiiiiiii'); }

var asmGlobalArg = {};

var asmLibraryArg = { "EMTSTACKTOP": EMTSTACKTOP, "EMT_STACK_MAX": EMT_STACK_MAX, "___assert_fail": ___assert_fail, "___cxa_allocate_exception": ___cxa_allocate_exception, "___cxa_begin_catch": ___cxa_begin_catch, "___cxa_throw": ___cxa_throw, "___exception_addRef": ___exception_addRef, "___exception_deAdjust": ___exception_deAdjust, "___gxx_personality_v0": ___gxx_personality_v0, "___lock": ___lock, "___map_file": ___map_file, "___setErrNo": ___setErrNo, "___syscall195": ___syscall195, "___syscall221": ___syscall221, "___syscall5": ___syscall5, "___syscall54": ___syscall54, "___syscall91": ___syscall91, "___unlock": ___unlock, "___wasi_fd_close": ___wasi_fd_close, "___wasi_fd_read": ___wasi_fd_read, "___wasi_fd_seek": ___wasi_fd_seek, "___wasi_fd_write": ___wasi_fd_write, "__addDays": __addDays, "__arraySum": __arraySum, "__colorChannelsInGlTextureFormat": __colorChannelsInGlTextureFormat, "__computeUnpackAlignedImageSize": __computeUnpackAlignedImageSize, "__emscripten_syscall_munmap": __emscripten_syscall_munmap, "__fillFullscreenChangeEventData": __fillFullscreenChangeEventData, "__fillGamepadEventData": __fillGamepadEventData, "__fillMouseEventData": __fillMouseEventData, "__fillPointerlockChangeEventData": __fillPointerlockChangeEventData, "__findEventTarget": __findEventTarget, "__glGenObject": __glGenObject, "__heapAccessShiftForWebGLHeap": __heapAccessShiftForWebGLHeap, "__heapObjectForWebGLType": __heapObjectForWebGLType, "__isLeapYear": __isLeapYear, "__memory_base": 1024, "__registerFullscreenChangeEventCallback": __registerFullscreenChangeEventCallback, "__registerGamepadEventCallback": __registerGamepadEventCallback, "__registerKeyEventCallback": __registerKeyEventCallback, "__registerMouseEventCallback": __registerMouseEventCallback, "__registerTouchEventCallback": __registerTouchEventCallback, "__requestPointerLock": __requestPointerLock, "__table_base": 0, "_abort": _abort, "_eglGetProcAddress": _eglGetProcAddress, "_emscripten_exit_pointerlock": _emscripten_exit_pointerlock, "_emscripten_get_element_css_size": _emscripten_get_element_css_size, "_emscripten_get_gamepad_status": _emscripten_get_gamepad_status, "_emscripten_get_heap_size": _emscripten_get_heap_size, "_emscripten_get_now": _emscripten_get_now, "_emscripten_get_num_gamepads": _emscripten_get_num_gamepads, "_emscripten_get_pointerlock_status": _emscripten_get_pointerlock_status, "_emscripten_glActiveTexture": _emscripten_glActiveTexture, "_emscripten_glAttachShader": _emscripten_glAttachShader, "_emscripten_glBeginQueryEXT": _emscripten_glBeginQueryEXT, "_emscripten_glBindAttribLocation": _emscripten_glBindAttribLocation, "_emscripten_glBindBuffer": _emscripten_glBindBuffer, "_emscripten_glBindFramebuffer": _emscripten_glBindFramebuffer, "_emscripten_glBindRenderbuffer": _emscripten_glBindRenderbuffer, "_emscripten_glBindTexture": _emscripten_glBindTexture, "_emscripten_glBindVertexArrayOES": _emscripten_glBindVertexArrayOES, "_emscripten_glBlendColor": _emscripten_glBlendColor, "_emscripten_glBlendEquation": _emscripten_glBlendEquation, "_emscripten_glBlendEquationSeparate": _emscripten_glBlendEquationSeparate, "_emscripten_glBlendFunc": _emscripten_glBlendFunc, "_emscripten_glBlendFuncSeparate": _emscripten_glBlendFuncSeparate, "_emscripten_glBufferData": _emscripten_glBufferData, "_emscripten_glBufferSubData": _emscripten_glBufferSubData, "_emscripten_glCheckFramebufferStatus": _emscripten_glCheckFramebufferStatus, "_emscripten_glClear": _emscripten_glClear, "_emscripten_glClearColor": _emscripten_glClearColor, "_emscripten_glClearDepthf": _emscripten_glClearDepthf, "_emscripten_glClearStencil": _emscripten_glClearStencil, "_emscripten_glColorMask": _emscripten_glColorMask, "_emscripten_glCompileShader": _emscripten_glCompileShader, "_emscripten_glCompressedTexImage2D": _emscripten_glCompressedTexImage2D, "_emscripten_glCompressedTexSubImage2D": _emscripten_glCompressedTexSubImage2D, "_emscripten_glCopyTexImage2D": _emscripten_glCopyTexImage2D, "_emscripten_glCopyTexSubImage2D": _emscripten_glCopyTexSubImage2D, "_emscripten_glCreateProgram": _emscripten_glCreateProgram, "_emscripten_glCreateShader": _emscripten_glCreateShader, "_emscripten_glCullFace": _emscripten_glCullFace, "_emscripten_glDeleteBuffers": _emscripten_glDeleteBuffers, "_emscripten_glDeleteFramebuffers": _emscripten_glDeleteFramebuffers, "_emscripten_glDeleteProgram": _emscripten_glDeleteProgram, "_emscripten_glDeleteQueriesEXT": _emscripten_glDeleteQueriesEXT, "_emscripten_glDeleteRenderbuffers": _emscripten_glDeleteRenderbuffers, "_emscripten_glDeleteShader": _emscripten_glDeleteShader, "_emscripten_glDeleteTextures": _emscripten_glDeleteTextures, "_emscripten_glDeleteVertexArraysOES": _emscripten_glDeleteVertexArraysOES, "_emscripten_glDepthFunc": _emscripten_glDepthFunc, "_emscripten_glDepthMask": _emscripten_glDepthMask, "_emscripten_glDepthRangef": _emscripten_glDepthRangef, "_emscripten_glDetachShader": _emscripten_glDetachShader, "_emscripten_glDisable": _emscripten_glDisable, "_emscripten_glDisableVertexAttribArray": _emscripten_glDisableVertexAttribArray, "_emscripten_glDrawArrays": _emscripten_glDrawArrays, "_emscripten_glDrawArraysInstancedANGLE": _emscripten_glDrawArraysInstancedANGLE, "_emscripten_glDrawBuffersWEBGL": _emscripten_glDrawBuffersWEBGL, "_emscripten_glDrawElements": _emscripten_glDrawElements, "_emscripten_glDrawElementsInstancedANGLE": _emscripten_glDrawElementsInstancedANGLE, "_emscripten_glEnable": _emscripten_glEnable, "_emscripten_glEnableVertexAttribArray": _emscripten_glEnableVertexAttribArray, "_emscripten_glEndQueryEXT": _emscripten_glEndQueryEXT, "_emscripten_glFinish": _emscripten_glFinish, "_emscripten_glFlush": _emscripten_glFlush, "_emscripten_glFramebufferRenderbuffer": _emscripten_glFramebufferRenderbuffer, "_emscripten_glFramebufferTexture2D": _emscripten_glFramebufferTexture2D, "_emscripten_glFrontFace": _emscripten_glFrontFace, "_emscripten_glGenBuffers": _emscripten_glGenBuffers, "_emscripten_glGenFramebuffers": _emscripten_glGenFramebuffers, "_emscripten_glGenQueriesEXT": _emscripten_glGenQueriesEXT, "_emscripten_glGenRenderbuffers": _emscripten_glGenRenderbuffers, "_emscripten_glGenTextures": _emscripten_glGenTextures, "_emscripten_glGenVertexArraysOES": _emscripten_glGenVertexArraysOES, "_emscripten_glGenerateMipmap": _emscripten_glGenerateMipmap, "_emscripten_glGetActiveAttrib": _emscripten_glGetActiveAttrib, "_emscripten_glGetActiveUniform": _emscripten_glGetActiveUniform, "_emscripten_glGetAttachedShaders": _emscripten_glGetAttachedShaders, "_emscripten_glGetAttribLocation": _emscripten_glGetAttribLocation, "_emscripten_glGetBooleanv": _emscripten_glGetBooleanv, "_emscripten_glGetBufferParameteriv": _emscripten_glGetBufferParameteriv, "_emscripten_glGetError": _emscripten_glGetError, "_emscripten_glGetFloatv": _emscripten_glGetFloatv, "_emscripten_glGetFramebufferAttachmentParameteriv": _emscripten_glGetFramebufferAttachmentParameteriv, "_emscripten_glGetIntegerv": _emscripten_glGetIntegerv, "_emscripten_glGetProgramInfoLog": _emscripten_glGetProgramInfoLog, "_emscripten_glGetProgramiv": _emscripten_glGetProgramiv, "_emscripten_glGetQueryObjecti64vEXT": _emscripten_glGetQueryObjecti64vEXT, "_emscripten_glGetQueryObjectivEXT": _emscripten_glGetQueryObjectivEXT, "_emscripten_glGetQueryObjectui64vEXT": _emscripten_glGetQueryObjectui64vEXT, "_emscripten_glGetQueryObjectuivEXT": _emscripten_glGetQueryObjectuivEXT, "_emscripten_glGetQueryivEXT": _emscripten_glGetQueryivEXT, "_emscripten_glGetRenderbufferParameteriv": _emscripten_glGetRenderbufferParameteriv, "_emscripten_glGetShaderInfoLog": _emscripten_glGetShaderInfoLog, "_emscripten_glGetShaderPrecisionFormat": _emscripten_glGetShaderPrecisionFormat, "_emscripten_glGetShaderSource": _emscripten_glGetShaderSource, "_emscripten_glGetShaderiv": _emscripten_glGetShaderiv, "_emscripten_glGetString": _emscripten_glGetString, "_emscripten_glGetTexParameterfv": _emscripten_glGetTexParameterfv, "_emscripten_glGetTexParameteriv": _emscripten_glGetTexParameteriv, "_emscripten_glGetUniformLocation": _emscripten_glGetUniformLocation, "_emscripten_glGetUniformfv": _emscripten_glGetUniformfv, "_emscripten_glGetUniformiv": _emscripten_glGetUniformiv, "_emscripten_glGetVertexAttribPointerv": _emscripten_glGetVertexAttribPointerv, "_emscripten_glGetVertexAttribfv": _emscripten_glGetVertexAttribfv, "_emscripten_glGetVertexAttribiv": _emscripten_glGetVertexAttribiv, "_emscripten_glHint": _emscripten_glHint, "_emscripten_glIsBuffer": _emscripten_glIsBuffer, "_emscripten_glIsEnabled": _emscripten_glIsEnabled, "_emscripten_glIsFramebuffer": _emscripten_glIsFramebuffer, "_emscripten_glIsProgram": _emscripten_glIsProgram, "_emscripten_glIsQueryEXT": _emscripten_glIsQueryEXT, "_emscripten_glIsRenderbuffer": _emscripten_glIsRenderbuffer, "_emscripten_glIsShader": _emscripten_glIsShader, "_emscripten_glIsTexture": _emscripten_glIsTexture, "_emscripten_glIsVertexArrayOES": _emscripten_glIsVertexArrayOES, "_emscripten_glLineWidth": _emscripten_glLineWidth, "_emscripten_glLinkProgram": _emscripten_glLinkProgram, "_emscripten_glPixelStorei": _emscripten_glPixelStorei, "_emscripten_glPolygonOffset": _emscripten_glPolygonOffset, "_emscripten_glQueryCounterEXT": _emscripten_glQueryCounterEXT, "_emscripten_glReadPixels": _emscripten_glReadPixels, "_emscripten_glReleaseShaderCompiler": _emscripten_glReleaseShaderCompiler, "_emscripten_glRenderbufferStorage": _emscripten_glRenderbufferStorage, "_emscripten_glSampleCoverage": _emscripten_glSampleCoverage, "_emscripten_glScissor": _emscripten_glScissor, "_emscripten_glShaderBinary": _emscripten_glShaderBinary, "_emscripten_glShaderSource": _emscripten_glShaderSource, "_emscripten_glStencilFunc": _emscripten_glStencilFunc, "_emscripten_glStencilFuncSeparate": _emscripten_glStencilFuncSeparate, "_emscripten_glStencilMask": _emscripten_glStencilMask, "_emscripten_glStencilMaskSeparate": _emscripten_glStencilMaskSeparate, "_emscripten_glStencilOp": _emscripten_glStencilOp, "_emscripten_glStencilOpSeparate": _emscripten_glStencilOpSeparate, "_emscripten_glTexImage2D": _emscripten_glTexImage2D, "_emscripten_glTexParameterf": _emscripten_glTexParameterf, "_emscripten_glTexParameterfv": _emscripten_glTexParameterfv, "_emscripten_glTexParameteri": _emscripten_glTexParameteri, "_emscripten_glTexParameteriv": _emscripten_glTexParameteriv, "_emscripten_glTexSubImage2D": _emscripten_glTexSubImage2D, "_emscripten_glUniform1f": _emscripten_glUniform1f, "_emscripten_glUniform1fv": _emscripten_glUniform1fv, "_emscripten_glUniform1i": _emscripten_glUniform1i, "_emscripten_glUniform1iv": _emscripten_glUniform1iv, "_emscripten_glUniform2f": _emscripten_glUniform2f, "_emscripten_glUniform2fv": _emscripten_glUniform2fv, "_emscripten_glUniform2i": _emscripten_glUniform2i, "_emscripten_glUniform2iv": _emscripten_glUniform2iv, "_emscripten_glUniform3f": _emscripten_glUniform3f, "_emscripten_glUniform3fv": _emscripten_glUniform3fv, "_emscripten_glUniform3i": _emscripten_glUniform3i, "_emscripten_glUniform3iv": _emscripten_glUniform3iv, "_emscripten_glUniform4f": _emscripten_glUniform4f, "_emscripten_glUniform4fv": _emscripten_glUniform4fv, "_emscripten_glUniform4i": _emscripten_glUniform4i, "_emscripten_glUniform4iv": _emscripten_glUniform4iv, "_emscripten_glUniformMatrix2fv": _emscripten_glUniformMatrix2fv, "_emscripten_glUniformMatrix3fv": _emscripten_glUniformMatrix3fv, "_emscripten_glUniformMatrix4fv": _emscripten_glUniformMatrix4fv, "_emscripten_glUseProgram": _emscripten_glUseProgram, "_emscripten_glValidateProgram": _emscripten_glValidateProgram, "_emscripten_glVertexAttrib1f": _emscripten_glVertexAttrib1f, "_emscripten_glVertexAttrib1fv": _emscripten_glVertexAttrib1fv, "_emscripten_glVertexAttrib2f": _emscripten_glVertexAttrib2f, "_emscripten_glVertexAttrib2fv": _emscripten_glVertexAttrib2fv, "_emscripten_glVertexAttrib3f": _emscripten_glVertexAttrib3f, "_emscripten_glVertexAttrib3fv": _emscripten_glVertexAttrib3fv, "_emscripten_glVertexAttrib4f": _emscripten_glVertexAttrib4f, "_emscripten_glVertexAttrib4fv": _emscripten_glVertexAttrib4fv, "_emscripten_glVertexAttribDivisorANGLE": _emscripten_glVertexAttribDivisorANGLE, "_emscripten_glVertexAttribPointer": _emscripten_glVertexAttribPointer, "_emscripten_glViewport": _emscripten_glViewport, "_emscripten_memcpy_big": _emscripten_memcpy_big, "_emscripten_request_pointerlock": _emscripten_request_pointerlock, "_emscripten_resize_heap": _emscripten_resize_heap, "_emscripten_run_script": _emscripten_run_script, "_emscripten_sample_gamepad_data": _emscripten_sample_gamepad_data, "_emscripten_set_click_callback_on_thread": _emscripten_set_click_callback_on_thread, "_emscripten_set_fullscreenchange_callback_on_thread": _emscripten_set_fullscreenchange_callback_on_thread, "_emscripten_set_gamepadconnected_callback_on_thread": _emscripten_set_gamepadconnected_callback_on_thread, "_emscripten_set_gamepaddisconnected_callback_on_thread": _emscripten_set_gamepaddisconnected_callback_on_thread, "_emscripten_set_keypress_callback_on_thread": _emscripten_set_keypress_callback_on_thread, "_emscripten_set_main_loop": _emscripten_set_main_loop, "_emscripten_set_main_loop_timing": _emscripten_set_main_loop_timing, "_emscripten_set_touchcancel_callback_on_thread": _emscripten_set_touchcancel_callback_on_thread, "_emscripten_set_touchend_callback_on_thread": _emscripten_set_touchend_callback_on_thread, "_emscripten_set_touchmove_callback_on_thread": _emscripten_set_touchmove_callback_on_thread, "_emscripten_set_touchstart_callback_on_thread": _emscripten_set_touchstart_callback_on_thread, "_emscripten_sleep": _emscripten_sleep, "_exit": _exit, "_fd_close": _fd_close, "_fd_read": _fd_read, "_fd_seek": _fd_seek, "_fd_write": _fd_write, "_getenv": _getenv, "_glActiveTexture": _glActiveTexture, "_glAttachShader": _glAttachShader, "_glBindAttribLocation": _glBindAttribLocation, "_glBindBuffer": _glBindBuffer, "_glBindTexture": _glBindTexture, "_glBlendFunc": _glBlendFunc, "_glBufferData": _glBufferData, "_glBufferSubData": _glBufferSubData, "_glClear": _glClear, "_glClearColor": _glClearColor, "_glClearDepthf": _glClearDepthf, "_glCompileShader": _glCompileShader, "_glCompressedTexImage2D": _glCompressedTexImage2D, "_glCreateProgram": _glCreateProgram, "_glCreateShader": _glCreateShader, "_glCullFace": _glCullFace, "_glDeleteProgram": _glDeleteProgram, "_glDepthFunc": _glDepthFunc, "_glDisable": _glDisable, "_glDrawArrays": _glDrawArrays, "_glDrawElements": _glDrawElements, "_glEnable": _glEnable, "_glEnableVertexAttribArray": _glEnableVertexAttribArray, "_glFrontFace": _glFrontFace, "_glGenBuffers": _glGenBuffers, "_glGenTextures": _glGenTextures, "_glGetAttribLocation": _glGetAttribLocation, "_glGetFloatv": _glGetFloatv, "_glGetProgramInfoLog": _glGetProgramInfoLog, "_glGetProgramiv": _glGetProgramiv, "_glGetShaderInfoLog": _glGetShaderInfoLog, "_glGetShaderiv": _glGetShaderiv, "_glGetString": _glGetString, "_glGetUniformLocation": _glGetUniformLocation, "_glLinkProgram": _glLinkProgram, "_glPixelStorei": _glPixelStorei, "_glReadPixels": _glReadPixels, "_glShaderSource": _glShaderSource, "_glTexImage2D": _glTexImage2D, "_glTexParameteri": _glTexParameteri, "_glUniform1i": _glUniform1i, "_glUniform4f": _glUniform4f, "_glUniformMatrix4fv": _glUniformMatrix4fv, "_glUseProgram": _glUseProgram, "_glVertexAttribPointer": _glVertexAttribPointer, "_glViewport": _glViewport, "_glfwCreateWindow": _glfwCreateWindow, "_glfwDefaultWindowHints": _glfwDefaultWindowHints, "_glfwGetCursorPos": _glfwGetCursorPos, "_glfwGetKey": _glfwGetKey, "_glfwGetPrimaryMonitor": _glfwGetPrimaryMonitor, "_glfwGetTime": _glfwGetTime, "_glfwGetVideoModes": _glfwGetVideoModes, "_glfwInit": _glfwInit, "_glfwMakeContextCurrent": _glfwMakeContextCurrent, "_glfwSetCharCallback": _glfwSetCharCallback, "_glfwSetCursorEnterCallback": _glfwSetCursorEnterCallback, "_glfwSetCursorPosCallback": _glfwSetCursorPosCallback, "_glfwSetDropCallback": _glfwSetDropCallback, "_glfwSetErrorCallback": _glfwSetErrorCallback, "_glfwSetKeyCallback": _glfwSetKeyCallback, "_glfwSetMouseButtonCallback": _glfwSetMouseButtonCallback, "_glfwSetScrollCallback": _glfwSetScrollCallback, "_glfwSetWindowIconifyCallback": _glfwSetWindowIconifyCallback, "_glfwSetWindowShouldClose": _glfwSetWindowShouldClose, "_glfwSetWindowSizeCallback": _glfwSetWindowSizeCallback, "_glfwSwapBuffers": _glfwSwapBuffers, "_glfwSwapInterval": _glfwSwapInterval, "_glfwTerminate": _glfwTerminate, "_glfwWindowHint": _glfwWindowHint, "_llvm_cos_f32": _llvm_cos_f32, "_llvm_cttz_i32": _llvm_cttz_i32, "_llvm_sin_f32": _llvm_sin_f32, "_llvm_stackrestore": _llvm_stackrestore, "_llvm_stacksave": _llvm_stacksave, "_llvm_trap": _llvm_trap, "_nanosleep": _nanosleep, "_strftime": _strftime, "_strftime_l": _strftime_l, "_time": _time, "_usleep": _usleep, "abort": abort, "abortOnCannotGrowMemory": abortOnCannotGrowMemory, "abortStackOverflow": abortStackOverflow, "abortStackOverflowEmterpreter": abortStackOverflowEmterpreter, "demangle": demangle, "demangleAll": demangleAll, "eb": eb, "emscriptenWebGLGet": emscriptenWebGLGet, "emscriptenWebGLGetTexPixelData": emscriptenWebGLGetTexPixelData, "emscriptenWebGLGetUniform": emscriptenWebGLGetUniform, "emscriptenWebGLGetVertexAttrib": emscriptenWebGLGetVertexAttrib, "getTempRet0": getTempRet0, "jsStackTrace": jsStackTrace, "memory": wasmMemory, "nullFunc_ff": nullFunc_ff, "nullFunc_fff": nullFunc_fff, "nullFunc_i": nullFunc_i, "nullFunc_ii": nullFunc_ii, "nullFunc_iidiiii": nullFunc_iidiiii, "nullFunc_iii": nullFunc_iii, "nullFunc_iiii": nullFunc_iiii, "nullFunc_iiiii": nullFunc_iiiii, "nullFunc_iiiiid": nullFunc_iiiiid, "nullFunc_iiiiii": nullFunc_iiiiii, "nullFunc_iiiiiid": nullFunc_iiiiiid, "nullFunc_iiiiiii": nullFunc_iiiiiii, "nullFunc_iiiiiiii": nullFunc_iiiiiiii, "nullFunc_iiiiiiiii": nullFunc_iiiiiiiii, "nullFunc_v": nullFunc_v, "nullFunc_vf": nullFunc_vf, "nullFunc_vff": nullFunc_vff, "nullFunc_vffff": nullFunc_vffff, "nullFunc_vfi": nullFunc_vfi, "nullFunc_vi": nullFunc_vi, "nullFunc_vidd": nullFunc_vidd, "nullFunc_vif": nullFunc_vif, "nullFunc_viff": nullFunc_viff, "nullFunc_vifff": nullFunc_vifff, "nullFunc_viffff": nullFunc_viffff, "nullFunc_vii": nullFunc_vii, "nullFunc_viif": nullFunc_viif, "nullFunc_viii": nullFunc_viii, "nullFunc_viiii": nullFunc_viiii, "nullFunc_viiiii": nullFunc_viiiii, "nullFunc_viiiiii": nullFunc_viiiiii, "nullFunc_viiiiiii": nullFunc_viiiiiii, "nullFunc_viiiiiiii": nullFunc_viiiiiiii, "nullFunc_viiiiiiiii": nullFunc_viiiiiiiii, "setTempRet0": setTempRet0, "stackTrace": stackTrace, "stringToNewUTF8": stringToNewUTF8, "table": wasmTable, "tempDoublePtr": tempDoublePtr };
// EMSCRIPTEN_START_ASM
var asm = (/** @suppress {uselessCode} */ function(global, env, buffer) {
'almost asm';

  var HEAP8 = new global.Int8Array(buffer);
  var HEAP16 = new global.Int16Array(buffer);
  var HEAP32 = new global.Int32Array(buffer);
  var HEAPU8 = new global.Uint8Array(buffer);
  var HEAPU16 = new global.Uint16Array(buffer);
  var HEAPU32 = new global.Uint32Array(buffer);
  var HEAPF32 = new global.Float32Array(buffer);
  var HEAPF64 = new global.Float64Array(buffer);
  var tempDoublePtr=env.tempDoublePtr|0;
  var EMTSTACKTOP=env.EMTSTACKTOP|0;
  var EMT_STACK_MAX=env.EMT_STACK_MAX|0;
  var eb=env.eb|0;
var __THREW__ = 0;
var threwValue = 0;
var setjmpId = 0;
var tempInt = 0;
var tempBigInt = 0;
var tempBigIntS = 0;
var tempValue = 0;
var tempDouble = 0.0;
var nan = global.NaN;
var inf = global.Infinity;

  var Math_floor=global.Math.floor;
  var Math_abs=global.Math.abs;
  var Math_sqrt=global.Math.sqrt;
  var Math_pow=global.Math.pow;
  var Math_cos=global.Math.cos;
  var Math_sin=global.Math.sin;
  var Math_tan=global.Math.tan;
  var Math_acos=global.Math.acos;
  var Math_asin=global.Math.asin;
  var Math_atan=global.Math.atan;
  var Math_atan2=global.Math.atan2;
  var Math_exp=global.Math.exp;
  var Math_log=global.Math.log;
  var Math_ceil=global.Math.ceil;
  var Math_imul=global.Math.imul;
  var Math_min=global.Math.min;
  var Math_max=global.Math.max;
  var Math_clz32=global.Math.clz32;
  var Math_fround=global.Math.fround;
  var abort=env.abort;
  var setTempRet0=env.setTempRet0;
  var getTempRet0=env.getTempRet0;
  var abortStackOverflow=env.abortStackOverflow;
  var abortStackOverflowEmterpreter=env.abortStackOverflowEmterpreter;
  var nullFunc_ff=env.nullFunc_ff;
  var nullFunc_fff=env.nullFunc_fff;
  var nullFunc_i=env.nullFunc_i;
  var nullFunc_ii=env.nullFunc_ii;
  var nullFunc_iidiiii=env.nullFunc_iidiiii;
  var nullFunc_iii=env.nullFunc_iii;
  var nullFunc_iiii=env.nullFunc_iiii;
  var nullFunc_iiiii=env.nullFunc_iiiii;
  var nullFunc_iiiiid=env.nullFunc_iiiiid;
  var nullFunc_iiiiii=env.nullFunc_iiiiii;
  var nullFunc_iiiiiid=env.nullFunc_iiiiiid;
  var nullFunc_iiiiiii=env.nullFunc_iiiiiii;
  var nullFunc_iiiiiiii=env.nullFunc_iiiiiiii;
  var nullFunc_iiiiiiiii=env.nullFunc_iiiiiiiii;
  var nullFunc_v=env.nullFunc_v;
  var nullFunc_vf=env.nullFunc_vf;
  var nullFunc_vff=env.nullFunc_vff;
  var nullFunc_vffff=env.nullFunc_vffff;
  var nullFunc_vfi=env.nullFunc_vfi;
  var nullFunc_vi=env.nullFunc_vi;
  var nullFunc_vidd=env.nullFunc_vidd;
  var nullFunc_vif=env.nullFunc_vif;
  var nullFunc_viff=env.nullFunc_viff;
  var nullFunc_vifff=env.nullFunc_vifff;
  var nullFunc_viffff=env.nullFunc_viffff;
  var nullFunc_vii=env.nullFunc_vii;
  var nullFunc_viif=env.nullFunc_viif;
  var nullFunc_viii=env.nullFunc_viii;
  var nullFunc_viiii=env.nullFunc_viiii;
  var nullFunc_viiiii=env.nullFunc_viiiii;
  var nullFunc_viiiiii=env.nullFunc_viiiiii;
  var nullFunc_viiiiiii=env.nullFunc_viiiiiii;
  var nullFunc_viiiiiiii=env.nullFunc_viiiiiiii;
  var nullFunc_viiiiiiiii=env.nullFunc_viiiiiiiii;
  var ___assert_fail=env.___assert_fail;
  var ___cxa_allocate_exception=env.___cxa_allocate_exception;
  var ___cxa_begin_catch=env.___cxa_begin_catch;
  var ___cxa_throw=env.___cxa_throw;
  var ___exception_addRef=env.___exception_addRef;
  var ___exception_deAdjust=env.___exception_deAdjust;
  var ___gxx_personality_v0=env.___gxx_personality_v0;
  var ___lock=env.___lock;
  var ___map_file=env.___map_file;
  var ___setErrNo=env.___setErrNo;
  var ___syscall195=env.___syscall195;
  var ___syscall221=env.___syscall221;
  var ___syscall5=env.___syscall5;
  var ___syscall54=env.___syscall54;
  var ___syscall91=env.___syscall91;
  var ___unlock=env.___unlock;
  var ___wasi_fd_close=env.___wasi_fd_close;
  var ___wasi_fd_read=env.___wasi_fd_read;
  var ___wasi_fd_seek=env.___wasi_fd_seek;
  var ___wasi_fd_write=env.___wasi_fd_write;
  var __addDays=env.__addDays;
  var __arraySum=env.__arraySum;
  var __colorChannelsInGlTextureFormat=env.__colorChannelsInGlTextureFormat;
  var __computeUnpackAlignedImageSize=env.__computeUnpackAlignedImageSize;
  var __emscripten_syscall_munmap=env.__emscripten_syscall_munmap;
  var __fillFullscreenChangeEventData=env.__fillFullscreenChangeEventData;
  var __fillGamepadEventData=env.__fillGamepadEventData;
  var __fillMouseEventData=env.__fillMouseEventData;
  var __fillPointerlockChangeEventData=env.__fillPointerlockChangeEventData;
  var __findEventTarget=env.__findEventTarget;
  var __glGenObject=env.__glGenObject;
  var __heapAccessShiftForWebGLHeap=env.__heapAccessShiftForWebGLHeap;
  var __heapObjectForWebGLType=env.__heapObjectForWebGLType;
  var __isLeapYear=env.__isLeapYear;
  var __registerFullscreenChangeEventCallback=env.__registerFullscreenChangeEventCallback;
  var __registerGamepadEventCallback=env.__registerGamepadEventCallback;
  var __registerKeyEventCallback=env.__registerKeyEventCallback;
  var __registerMouseEventCallback=env.__registerMouseEventCallback;
  var __registerTouchEventCallback=env.__registerTouchEventCallback;
  var __requestPointerLock=env.__requestPointerLock;
  var _abort=env._abort;
  var _eglGetProcAddress=env._eglGetProcAddress;
  var _emscripten_exit_pointerlock=env._emscripten_exit_pointerlock;
  var _emscripten_get_element_css_size=env._emscripten_get_element_css_size;
  var _emscripten_get_gamepad_status=env._emscripten_get_gamepad_status;
  var _emscripten_get_heap_size=env._emscripten_get_heap_size;
  var _emscripten_get_now=env._emscripten_get_now;
  var _emscripten_get_num_gamepads=env._emscripten_get_num_gamepads;
  var _emscripten_get_pointerlock_status=env._emscripten_get_pointerlock_status;
  var _emscripten_glActiveTexture=env._emscripten_glActiveTexture;
  var _emscripten_glAttachShader=env._emscripten_glAttachShader;
  var _emscripten_glBeginQueryEXT=env._emscripten_glBeginQueryEXT;
  var _emscripten_glBindAttribLocation=env._emscripten_glBindAttribLocation;
  var _emscripten_glBindBuffer=env._emscripten_glBindBuffer;
  var _emscripten_glBindFramebuffer=env._emscripten_glBindFramebuffer;
  var _emscripten_glBindRenderbuffer=env._emscripten_glBindRenderbuffer;
  var _emscripten_glBindTexture=env._emscripten_glBindTexture;
  var _emscripten_glBindVertexArrayOES=env._emscripten_glBindVertexArrayOES;
  var _emscripten_glBlendColor=env._emscripten_glBlendColor;
  var _emscripten_glBlendEquation=env._emscripten_glBlendEquation;
  var _emscripten_glBlendEquationSeparate=env._emscripten_glBlendEquationSeparate;
  var _emscripten_glBlendFunc=env._emscripten_glBlendFunc;
  var _emscripten_glBlendFuncSeparate=env._emscripten_glBlendFuncSeparate;
  var _emscripten_glBufferData=env._emscripten_glBufferData;
  var _emscripten_glBufferSubData=env._emscripten_glBufferSubData;
  var _emscripten_glCheckFramebufferStatus=env._emscripten_glCheckFramebufferStatus;
  var _emscripten_glClear=env._emscripten_glClear;
  var _emscripten_glClearColor=env._emscripten_glClearColor;
  var _emscripten_glClearDepthf=env._emscripten_glClearDepthf;
  var _emscripten_glClearStencil=env._emscripten_glClearStencil;
  var _emscripten_glColorMask=env._emscripten_glColorMask;
  var _emscripten_glCompileShader=env._emscripten_glCompileShader;
  var _emscripten_glCompressedTexImage2D=env._emscripten_glCompressedTexImage2D;
  var _emscripten_glCompressedTexSubImage2D=env._emscripten_glCompressedTexSubImage2D;
  var _emscripten_glCopyTexImage2D=env._emscripten_glCopyTexImage2D;
  var _emscripten_glCopyTexSubImage2D=env._emscripten_glCopyTexSubImage2D;
  var _emscripten_glCreateProgram=env._emscripten_glCreateProgram;
  var _emscripten_glCreateShader=env._emscripten_glCreateShader;
  var _emscripten_glCullFace=env._emscripten_glCullFace;
  var _emscripten_glDeleteBuffers=env._emscripten_glDeleteBuffers;
  var _emscripten_glDeleteFramebuffers=env._emscripten_glDeleteFramebuffers;
  var _emscripten_glDeleteProgram=env._emscripten_glDeleteProgram;
  var _emscripten_glDeleteQueriesEXT=env._emscripten_glDeleteQueriesEXT;
  var _emscripten_glDeleteRenderbuffers=env._emscripten_glDeleteRenderbuffers;
  var _emscripten_glDeleteShader=env._emscripten_glDeleteShader;
  var _emscripten_glDeleteTextures=env._emscripten_glDeleteTextures;
  var _emscripten_glDeleteVertexArraysOES=env._emscripten_glDeleteVertexArraysOES;
  var _emscripten_glDepthFunc=env._emscripten_glDepthFunc;
  var _emscripten_glDepthMask=env._emscripten_glDepthMask;
  var _emscripten_glDepthRangef=env._emscripten_glDepthRangef;
  var _emscripten_glDetachShader=env._emscripten_glDetachShader;
  var _emscripten_glDisable=env._emscripten_glDisable;
  var _emscripten_glDisableVertexAttribArray=env._emscripten_glDisableVertexAttribArray;
  var _emscripten_glDrawArrays=env._emscripten_glDrawArrays;
  var _emscripten_glDrawArraysInstancedANGLE=env._emscripten_glDrawArraysInstancedANGLE;
  var _emscripten_glDrawBuffersWEBGL=env._emscripten_glDrawBuffersWEBGL;
  var _emscripten_glDrawElements=env._emscripten_glDrawElements;
  var _emscripten_glDrawElementsInstancedANGLE=env._emscripten_glDrawElementsInstancedANGLE;
  var _emscripten_glEnable=env._emscripten_glEnable;
  var _emscripten_glEnableVertexAttribArray=env._emscripten_glEnableVertexAttribArray;
  var _emscripten_glEndQueryEXT=env._emscripten_glEndQueryEXT;
  var _emscripten_glFinish=env._emscripten_glFinish;
  var _emscripten_glFlush=env._emscripten_glFlush;
  var _emscripten_glFramebufferRenderbuffer=env._emscripten_glFramebufferRenderbuffer;
  var _emscripten_glFramebufferTexture2D=env._emscripten_glFramebufferTexture2D;
  var _emscripten_glFrontFace=env._emscripten_glFrontFace;
  var _emscripten_glGenBuffers=env._emscripten_glGenBuffers;
  var _emscripten_glGenFramebuffers=env._emscripten_glGenFramebuffers;
  var _emscripten_glGenQueriesEXT=env._emscripten_glGenQueriesEXT;
  var _emscripten_glGenRenderbuffers=env._emscripten_glGenRenderbuffers;
  var _emscripten_glGenTextures=env._emscripten_glGenTextures;
  var _emscripten_glGenVertexArraysOES=env._emscripten_glGenVertexArraysOES;
  var _emscripten_glGenerateMipmap=env._emscripten_glGenerateMipmap;
  var _emscripten_glGetActiveAttrib=env._emscripten_glGetActiveAttrib;
  var _emscripten_glGetActiveUniform=env._emscripten_glGetActiveUniform;
  var _emscripten_glGetAttachedShaders=env._emscripten_glGetAttachedShaders;
  var _emscripten_glGetAttribLocation=env._emscripten_glGetAttribLocation;
  var _emscripten_glGetBooleanv=env._emscripten_glGetBooleanv;
  var _emscripten_glGetBufferParameteriv=env._emscripten_glGetBufferParameteriv;
  var _emscripten_glGetError=env._emscripten_glGetError;
  var _emscripten_glGetFloatv=env._emscripten_glGetFloatv;
  var _emscripten_glGetFramebufferAttachmentParameteriv=env._emscripten_glGetFramebufferAttachmentParameteriv;
  var _emscripten_glGetIntegerv=env._emscripten_glGetIntegerv;
  var _emscripten_glGetProgramInfoLog=env._emscripten_glGetProgramInfoLog;
  var _emscripten_glGetProgramiv=env._emscripten_glGetProgramiv;
  var _emscripten_glGetQueryObjecti64vEXT=env._emscripten_glGetQueryObjecti64vEXT;
  var _emscripten_glGetQueryObjectivEXT=env._emscripten_glGetQueryObjectivEXT;
  var _emscripten_glGetQueryObjectui64vEXT=env._emscripten_glGetQueryObjectui64vEXT;
  var _emscripten_glGetQueryObjectuivEXT=env._emscripten_glGetQueryObjectuivEXT;
  var _emscripten_glGetQueryivEXT=env._emscripten_glGetQueryivEXT;
  var _emscripten_glGetRenderbufferParameteriv=env._emscripten_glGetRenderbufferParameteriv;
  var _emscripten_glGetShaderInfoLog=env._emscripten_glGetShaderInfoLog;
  var _emscripten_glGetShaderPrecisionFormat=env._emscripten_glGetShaderPrecisionFormat;
  var _emscripten_glGetShaderSource=env._emscripten_glGetShaderSource;
  var _emscripten_glGetShaderiv=env._emscripten_glGetShaderiv;
  var _emscripten_glGetString=env._emscripten_glGetString;
  var _emscripten_glGetTexParameterfv=env._emscripten_glGetTexParameterfv;
  var _emscripten_glGetTexParameteriv=env._emscripten_glGetTexParameteriv;
  var _emscripten_glGetUniformLocation=env._emscripten_glGetUniformLocation;
  var _emscripten_glGetUniformfv=env._emscripten_glGetUniformfv;
  var _emscripten_glGetUniformiv=env._emscripten_glGetUniformiv;
  var _emscripten_glGetVertexAttribPointerv=env._emscripten_glGetVertexAttribPointerv;
  var _emscripten_glGetVertexAttribfv=env._emscripten_glGetVertexAttribfv;
  var _emscripten_glGetVertexAttribiv=env._emscripten_glGetVertexAttribiv;
  var _emscripten_glHint=env._emscripten_glHint;
  var _emscripten_glIsBuffer=env._emscripten_glIsBuffer;
  var _emscripten_glIsEnabled=env._emscripten_glIsEnabled;
  var _emscripten_glIsFramebuffer=env._emscripten_glIsFramebuffer;
  var _emscripten_glIsProgram=env._emscripten_glIsProgram;
  var _emscripten_glIsQueryEXT=env._emscripten_glIsQueryEXT;
  var _emscripten_glIsRenderbuffer=env._emscripten_glIsRenderbuffer;
  var _emscripten_glIsShader=env._emscripten_glIsShader;
  var _emscripten_glIsTexture=env._emscripten_glIsTexture;
  var _emscripten_glIsVertexArrayOES=env._emscripten_glIsVertexArrayOES;
  var _emscripten_glLineWidth=env._emscripten_glLineWidth;
  var _emscripten_glLinkProgram=env._emscripten_glLinkProgram;
  var _emscripten_glPixelStorei=env._emscripten_glPixelStorei;
  var _emscripten_glPolygonOffset=env._emscripten_glPolygonOffset;
  var _emscripten_glQueryCounterEXT=env._emscripten_glQueryCounterEXT;
  var _emscripten_glReadPixels=env._emscripten_glReadPixels;
  var _emscripten_glReleaseShaderCompiler=env._emscripten_glReleaseShaderCompiler;
  var _emscripten_glRenderbufferStorage=env._emscripten_glRenderbufferStorage;
  var _emscripten_glSampleCoverage=env._emscripten_glSampleCoverage;
  var _emscripten_glScissor=env._emscripten_glScissor;
  var _emscripten_glShaderBinary=env._emscripten_glShaderBinary;
  var _emscripten_glShaderSource=env._emscripten_glShaderSource;
  var _emscripten_glStencilFunc=env._emscripten_glStencilFunc;
  var _emscripten_glStencilFuncSeparate=env._emscripten_glStencilFuncSeparate;
  var _emscripten_glStencilMask=env._emscripten_glStencilMask;
  var _emscripten_glStencilMaskSeparate=env._emscripten_glStencilMaskSeparate;
  var _emscripten_glStencilOp=env._emscripten_glStencilOp;
  var _emscripten_glStencilOpSeparate=env._emscripten_glStencilOpSeparate;
  var _emscripten_glTexImage2D=env._emscripten_glTexImage2D;
  var _emscripten_glTexParameterf=env._emscripten_glTexParameterf;
  var _emscripten_glTexParameterfv=env._emscripten_glTexParameterfv;
  var _emscripten_glTexParameteri=env._emscripten_glTexParameteri;
  var _emscripten_glTexParameteriv=env._emscripten_glTexParameteriv;
  var _emscripten_glTexSubImage2D=env._emscripten_glTexSubImage2D;
  var _emscripten_glUniform1f=env._emscripten_glUniform1f;
  var _emscripten_glUniform1fv=env._emscripten_glUniform1fv;
  var _emscripten_glUniform1i=env._emscripten_glUniform1i;
  var _emscripten_glUniform1iv=env._emscripten_glUniform1iv;
  var _emscripten_glUniform2f=env._emscripten_glUniform2f;
  var _emscripten_glUniform2fv=env._emscripten_glUniform2fv;
  var _emscripten_glUniform2i=env._emscripten_glUniform2i;
  var _emscripten_glUniform2iv=env._emscripten_glUniform2iv;
  var _emscripten_glUniform3f=env._emscripten_glUniform3f;
  var _emscripten_glUniform3fv=env._emscripten_glUniform3fv;
  var _emscripten_glUniform3i=env._emscripten_glUniform3i;
  var _emscripten_glUniform3iv=env._emscripten_glUniform3iv;
  var _emscripten_glUniform4f=env._emscripten_glUniform4f;
  var _emscripten_glUniform4fv=env._emscripten_glUniform4fv;
  var _emscripten_glUniform4i=env._emscripten_glUniform4i;
  var _emscripten_glUniform4iv=env._emscripten_glUniform4iv;
  var _emscripten_glUniformMatrix2fv=env._emscripten_glUniformMatrix2fv;
  var _emscripten_glUniformMatrix3fv=env._emscripten_glUniformMatrix3fv;
  var _emscripten_glUniformMatrix4fv=env._emscripten_glUniformMatrix4fv;
  var _emscripten_glUseProgram=env._emscripten_glUseProgram;
  var _emscripten_glValidateProgram=env._emscripten_glValidateProgram;
  var _emscripten_glVertexAttrib1f=env._emscripten_glVertexAttrib1f;
  var _emscripten_glVertexAttrib1fv=env._emscripten_glVertexAttrib1fv;
  var _emscripten_glVertexAttrib2f=env._emscripten_glVertexAttrib2f;
  var _emscripten_glVertexAttrib2fv=env._emscripten_glVertexAttrib2fv;
  var _emscripten_glVertexAttrib3f=env._emscripten_glVertexAttrib3f;
  var _emscripten_glVertexAttrib3fv=env._emscripten_glVertexAttrib3fv;
  var _emscripten_glVertexAttrib4f=env._emscripten_glVertexAttrib4f;
  var _emscripten_glVertexAttrib4fv=env._emscripten_glVertexAttrib4fv;
  var _emscripten_glVertexAttribDivisorANGLE=env._emscripten_glVertexAttribDivisorANGLE;
  var _emscripten_glVertexAttribPointer=env._emscripten_glVertexAttribPointer;
  var _emscripten_glViewport=env._emscripten_glViewport;
  var _emscripten_memcpy_big=env._emscripten_memcpy_big;
  var _emscripten_request_pointerlock=env._emscripten_request_pointerlock;
  var _emscripten_resize_heap=env._emscripten_resize_heap;
  var _emscripten_run_script=env._emscripten_run_script;
  var _emscripten_sample_gamepad_data=env._emscripten_sample_gamepad_data;
  var _emscripten_set_click_callback_on_thread=env._emscripten_set_click_callback_on_thread;
  var _emscripten_set_fullscreenchange_callback_on_thread=env._emscripten_set_fullscreenchange_callback_on_thread;
  var _emscripten_set_gamepadconnected_callback_on_thread=env._emscripten_set_gamepadconnected_callback_on_thread;
  var _emscripten_set_gamepaddisconnected_callback_on_thread=env._emscripten_set_gamepaddisconnected_callback_on_thread;
  var _emscripten_set_keypress_callback_on_thread=env._emscripten_set_keypress_callback_on_thread;
  var _emscripten_set_main_loop=env._emscripten_set_main_loop;
  var _emscripten_set_main_loop_timing=env._emscripten_set_main_loop_timing;
  var _emscripten_set_touchcancel_callback_on_thread=env._emscripten_set_touchcancel_callback_on_thread;
  var _emscripten_set_touchend_callback_on_thread=env._emscripten_set_touchend_callback_on_thread;
  var _emscripten_set_touchmove_callback_on_thread=env._emscripten_set_touchmove_callback_on_thread;
  var _emscripten_set_touchstart_callback_on_thread=env._emscripten_set_touchstart_callback_on_thread;
  var _emscripten_sleep=env._emscripten_sleep;
  var _exit=env._exit;
  var _fd_close=env._fd_close;
  var _fd_read=env._fd_read;
  var _fd_seek=env._fd_seek;
  var _fd_write=env._fd_write;
  var _getenv=env._getenv;
  var _glActiveTexture=env._glActiveTexture;
  var _glAttachShader=env._glAttachShader;
  var _glBindAttribLocation=env._glBindAttribLocation;
  var _glBindBuffer=env._glBindBuffer;
  var _glBindTexture=env._glBindTexture;
  var _glBlendFunc=env._glBlendFunc;
  var _glBufferData=env._glBufferData;
  var _glBufferSubData=env._glBufferSubData;
  var _glClear=env._glClear;
  var _glClearColor=env._glClearColor;
  var _glClearDepthf=env._glClearDepthf;
  var _glCompileShader=env._glCompileShader;
  var _glCompressedTexImage2D=env._glCompressedTexImage2D;
  var _glCreateProgram=env._glCreateProgram;
  var _glCreateShader=env._glCreateShader;
  var _glCullFace=env._glCullFace;
  var _glDeleteProgram=env._glDeleteProgram;
  var _glDepthFunc=env._glDepthFunc;
  var _glDisable=env._glDisable;
  var _glDrawArrays=env._glDrawArrays;
  var _glDrawElements=env._glDrawElements;
  var _glEnable=env._glEnable;
  var _glEnableVertexAttribArray=env._glEnableVertexAttribArray;
  var _glFrontFace=env._glFrontFace;
  var _glGenBuffers=env._glGenBuffers;
  var _glGenTextures=env._glGenTextures;
  var _glGetAttribLocation=env._glGetAttribLocation;
  var _glGetFloatv=env._glGetFloatv;
  var _glGetProgramInfoLog=env._glGetProgramInfoLog;
  var _glGetProgramiv=env._glGetProgramiv;
  var _glGetShaderInfoLog=env._glGetShaderInfoLog;
  var _glGetShaderiv=env._glGetShaderiv;
  var _glGetString=env._glGetString;
  var _glGetUniformLocation=env._glGetUniformLocation;
  var _glLinkProgram=env._glLinkProgram;
  var _glPixelStorei=env._glPixelStorei;
  var _glReadPixels=env._glReadPixels;
  var _glShaderSource=env._glShaderSource;
  var _glTexImage2D=env._glTexImage2D;
  var _glTexParameteri=env._glTexParameteri;
  var _glUniform1i=env._glUniform1i;
  var _glUniform4f=env._glUniform4f;
  var _glUniformMatrix4fv=env._glUniformMatrix4fv;
  var _glUseProgram=env._glUseProgram;
  var _glVertexAttribPointer=env._glVertexAttribPointer;
  var _glViewport=env._glViewport;
  var _glfwCreateWindow=env._glfwCreateWindow;
  var _glfwDefaultWindowHints=env._glfwDefaultWindowHints;
  var _glfwGetCursorPos=env._glfwGetCursorPos;
  var _glfwGetKey=env._glfwGetKey;
  var _glfwGetPrimaryMonitor=env._glfwGetPrimaryMonitor;
  var _glfwGetTime=env._glfwGetTime;
  var _glfwGetVideoModes=env._glfwGetVideoModes;
  var _glfwInit=env._glfwInit;
  var _glfwMakeContextCurrent=env._glfwMakeContextCurrent;
  var _glfwSetCharCallback=env._glfwSetCharCallback;
  var _glfwSetCursorEnterCallback=env._glfwSetCursorEnterCallback;
  var _glfwSetCursorPosCallback=env._glfwSetCursorPosCallback;
  var _glfwSetDropCallback=env._glfwSetDropCallback;
  var _glfwSetErrorCallback=env._glfwSetErrorCallback;
  var _glfwSetKeyCallback=env._glfwSetKeyCallback;
  var _glfwSetMouseButtonCallback=env._glfwSetMouseButtonCallback;
  var _glfwSetScrollCallback=env._glfwSetScrollCallback;
  var _glfwSetWindowIconifyCallback=env._glfwSetWindowIconifyCallback;
  var _glfwSetWindowShouldClose=env._glfwSetWindowShouldClose;
  var _glfwSetWindowSizeCallback=env._glfwSetWindowSizeCallback;
  var _glfwSwapBuffers=env._glfwSwapBuffers;
  var _glfwSwapInterval=env._glfwSwapInterval;
  var _glfwTerminate=env._glfwTerminate;
  var _glfwWindowHint=env._glfwWindowHint;
  var _llvm_cos_f32=env._llvm_cos_f32;
  var _llvm_cttz_i32=env._llvm_cttz_i32;
  var _llvm_sin_f32=env._llvm_sin_f32;
  var _llvm_stackrestore=env._llvm_stackrestore;
  var _llvm_stacksave=env._llvm_stacksave;
  var _llvm_trap=env._llvm_trap;
  var _nanosleep=env._nanosleep;
  var _strftime=env._strftime;
  var _strftime_l=env._strftime_l;
  var _time=env._time;
  var _usleep=env._usleep;
  var abortOnCannotGrowMemory=env.abortOnCannotGrowMemory;
  var demangle=env.demangle;
  var demangleAll=env.demangleAll;
  var emscriptenWebGLGet=env.emscriptenWebGLGet;
  var emscriptenWebGLGetTexPixelData=env.emscriptenWebGLGetTexPixelData;
  var emscriptenWebGLGetUniform=env.emscriptenWebGLGetUniform;
  var emscriptenWebGLGetVertexAttrib=env.emscriptenWebGLGetVertexAttrib;
  var jsStackTrace=env.jsStackTrace;
  var stackTrace=env.stackTrace;
  var stringToNewUTF8=env.stringToNewUTF8;
  var STACKTOP = 63392;
  var STACK_MAX = 5306272;
  var tempFloat = Math_fround(0);
  var asyncState = 0;
  const f0 = Math_fround(0);

// EMSCRIPTEN_START_FUNCS
function _malloc($bytes) {
 $bytes = $bytes | 0;
 var $$pre$phi$i$iZ2D = 0, $$pre$phi$i185Z2D = 0, $$pre$phi$i48$iZ2D = 0, $$pre$phi$iZ2D = 0, $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $110 = 0, $114 = 0, $115 = 0, $117 = 0, $119 = 0, $120 = 0, $121 = 0, $124 = 0, $126 = 0, $128 = 0, $13 = 0, $131 = 0, $132 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $143 = 0, $144 = 0, $145 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $162 = 0, $163 = 0, $164 = 0, $166 = 0, $167 = 0, $169 = 0, $172 = 0, $173 = 0, $175 = 0, $178 = 0, $179 = 0, $18 = 0, $181 = 0, $183 = 0, $184 = 0, $185 = 0, $187 = 0, $188 = 0, $19 = 0, $190 = 0, $193 = 0, $194 = 0, $196 = 0, $197 = 0, $2 = 0, $21 = 0, $22 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $38 = 0, $39 = 0, $40 = 0, $43 = 0, $44 = 0, $45 = 0, $47 = 0, $48 = 0, $50 = 0, $54 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $71 = 0, $72 = 0, $73 = 0, $76 = 0, $77 = 0, $78 = 0, $8 = 0, $80 = 0, $81 = 0, $83 = 0, $86 = 0, $87 = 0, $89 = 0, $9 = 0, $90 = 0, $92 = 0, $93 = 0, $96 = 0, $97 = 0, $98 = 0, $F$0$i$i = 0, $F104$0 = 0, $F197$0$i = 0, $F224$0$i$i = 0, $F290$0$i = 0, $I252$0$i$i = 0, $I316$0$i = 0, $I57$0$i$i = 0, $K105$011$i$i = 0, $K305$010$i$i = 0, $K373$017$i = 0, $R$1$i = 0, $R$1$i$be = 0, $R$1$i$i = 0, $R$1$i$i$be = 0, $R$1$i$i$ph = 0, $R$1$i$ph = 0, $R$1$i173 = 0, $R$1$i173$be = 0, $R$1$i173$ph = 0, $R$3$i = 0, $R$3$i$i = 0, $R$3$i177 = 0, $RP$1$i = 0, $RP$1$i$be = 0, $RP$1$i$i = 0, $RP$1$i$i$be = 0, $RP$1$i$i$ph = 0, $RP$1$i$ph = 0, $RP$1$i172 = 0, $RP$1$i172$be = 0, $RP$1$i172$ph = 0, $T$0$lcssa$i = 0, $T$0$lcssa$i$i = 0, $T$0$lcssa$i50$i = 0, $T$010$i$i = 0, $T$016$i = 0, $T$09$i$i = 0, $add$i$i = 0, $add$i188 = 0, $add$ptr$i = 0, $add$ptr$i$i$i = 0, $add$ptr$i164 = 0, $add$ptr14$i$i = 0, $add$ptr16$i$i = 0, $add$ptr166 = 0, $add$ptr17$i$i = 0, $add$ptr193 = 0, $add$ptr2$i$i = 0, $add$ptr227$i = 0, $add$ptr262$i = 0, $add$ptr4$i$i = 0, $add$ptr4$i$i$i = 0, $add$ptr4$i28$i = 0, $add$ptr4$i57$i = 0, $add$ptr7$i$i = 0, $add$ptr81$i$i = 0, $add$ptr95 = 0, $add144 = 0, $add150$i = 0, $add17$i = 0, $add17$i191 = 0, $add177$i = 0, $add215$i = 0, $add26$i$i = 0, $add268$i = 0, $add278$i$i = 0, $add346$i = 0, $add54$i = 0, $add64 = 0, $add8 = 0, $add83$i$i = 0, $add9$i = 0, $and$i145 = 0, $and104$i = 0, $and11$i = 0, $and12$i = 0, $and13$i = 0, $and145 = 0, $and17$i = 0, $and194$i = 0, $and264$i$i = 0, $and268$i$i = 0, $and273$i$i = 0, $and3$i = 0, $and331$i = 0, $and336$i = 0, $and341$i = 0, $and37$i$i = 0, $and41 = 0, $and46 = 0, $and49 = 0, $and53 = 0, $and57 = 0, $and6$i = 0, $and61 = 0, $and64$i = 0, $and69$i$i = 0, $and73$i = 0, $and73$i$i = 0, $and74 = 0, $and77$i = 0, $and78$i$i = 0, $and8$i = 0, $and80$i = 0, $and81$i = 0, $and85$i = 0, $and89$i = 0, $and9$i = 0, $arrayidx = 0, $arrayidx$i$i = 0, $arrayidx$i39$i = 0, $arrayidx103 = 0, $arrayidx103$i$i = 0, $arrayidx107$i$i = 0, $arrayidx113$i = 0, $arrayidx123$i$i = 0, $arrayidx126$i$i = 0, $arrayidx143$i$i = 0, $arrayidx151$i = 0, $arrayidx155$i = 0, $arrayidx161$i = 0, $arrayidx165$i174 = 0, $arrayidx184$i = 0, $arrayidx196$i = 0, $arrayidx204$i = 0, $arrayidx223$i$i = 0, $arrayidx287$i$i = 0, $arrayidx289$i = 0, $arrayidx325$i$i = 0, $arrayidx355$i = 0, $arrayidx394$i = 0, $arrayidx61$i = 0, $arrayidx65$i = 0, $arrayidx66 = 0, $arrayidx71$i = 0, $arrayidx75$i = 0, $arrayidx91$i$i = 0, $arrayidx94$i = 0, $arrayidx96$i$i = 0, $bk = 0, $bk136$i = 0, $bk47$i = 0, $bk78 = 0, $bk82$i$i = 0, $br$2$ph$i = 0, $call131$i = 0, $call132$i = 0, $call37$i = 0, $call68$i = 0, $call83$i = 0, $child$i$i = 0, $child166$i$i = 0, $child289$i$i = 0, $child357$i = 0, $cmp102$i = 0, $cmp141$i = 0, $cmp32$i = 0, $cond = 0, $cond$i$i$i = 0, $cond$i20$i = 0, $cond$i56$i = 0, $cond115$i = 0, $cond13$i$i = 0, $cond5$i = 0, $fd139$i = 0, $fd148$i$i = 0, $fd344$i$i = 0, $fd416$i = 0, $fd50$i = 0, $fd59$i$i = 0, $fd68$pre$phi$i$iZ2D = 0, $fd69 = 0, $fd85$i$i = 0, $fd9 = 0, $head$i$i = 0, $head179 = 0, $head182$i = 0, $head208$i$i = 0, $head25 = 0, $head274$i = 0, $idx$0$i = 0, $magic$i$i = 0, $nb$0 = 0, $neg$i190 = 0, $oldfirst$0$i$i = 0, $qsize$0$i$i = 0, $retval$0 = 0, $rsize$0$i = 0, $rsize$0$i154 = 0, $rsize$1$i = 0, $rsize$3$i = 0, $rsize$4$lcssa$i = 0, $rsize$420$i = 0, $rsize$420$i$ph = 0, $rst$0$i = 0, $rst$1$i = 0, $shl$i146 = 0, $shl105 = 0, $shl198$i = 0, $shl22 = 0, $shl226$i$i = 0, $shl265$i$i = 0, $shl270$i$i = 0, $shl291$i = 0, $shl294$i$i = 0, $shl333$i = 0, $shl338$i = 0, $shl362$i = 0, $shl37 = 0, $shl39$i$i = 0, $shl60$i = 0, $shl70$i$i = 0, $shl75$i$i = 0, $shl9$i = 0, $shl90 = 0, $shl95$i$i = 0, $shr = 0, $shr$i$i = 0, $shr$i141 = 0, $shr$i36$i = 0, $shr101 = 0, $shr11$i = 0, $shr15$i = 0, $shr194$i = 0, $shr214$i$i = 0, $shr253$i$i = 0, $shr283$i = 0, $shr3 = 0, $shr318$i = 0, $shr4$i = 0, $shr47 = 0, $shr51 = 0, $shr55 = 0, $shr58$i$i = 0, $shr59 = 0, $shr7$i = 0, $shr75$i = 0, $shr79$i = 0, $shr83$i = 0, $shr87$i = 0, $size188$i$le = 0, $size245$i = 0, $sizebits$0$i = 0, $sp$0$i$i = 0, $sp$0$i$i$i = 0, $sp$0116$i = 0, $sp$1115$i = 0, $spec$select$i159 = 0, $spec$select100$i = 0, $spec$select3$i = 0, $ssize$2$ph$i = 0, $sub$i140 = 0, $sub$i189 = 0, $sub$ptr$sub$i = 0, $sub$ptr$sub$i$i = 0, $sub101$i = 0, $sub112$i = 0, $sub16$i$i = 0, $sub160 = 0, $sub172$i = 0, $sub18$i$i = 0, $sub190 = 0, $sub2$i = 0, $sub260$i = 0, $sub31$i = 0, $sub33$i = 0, $sub41$i = 0, $sub44 = 0, $sub5$i$i = 0, $sub5$i$i$i = 0, $sub5$i58$i = 0, $sub70$i = 0, $sub91 = 0, $t$0$i = 0, $t$0$i153 = 0, $t$2$i = 0, $t$4$i = 0, $t$519$i = 0, $t$519$i$ph = 0, $tbase$799$i = 0, $tsize$2687886$i = 0, $tsize$4$i = 0, $tsize$798$i = 0, $v$0$i = 0, $v$0$i155 = 0, $v$1$i = 0, $v$3$i = 0, $v$3$i222 = 0, $v$4$lcssa$i = 0, $v$421$i = 0, $v$421$i$ph = 0, label = 0, sp = 0, $181$looptemp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $magic$i$i = sp;
 do if ($bytes >>> 0 < 245) {
  $cond = $bytes >>> 0 < 11 ? 16 : $bytes + 11 & -8;
  $shr = $cond >>> 3;
  $0 = HEAP32[15411] | 0;
  $shr3 = $0 >>> $shr;
  if ($shr3 & 3 | 0) {
   $add8 = ($shr3 & 1 ^ 1) + $shr | 0;
   $arrayidx = 61684 + ($add8 << 1 << 2) | 0;
   $1 = $arrayidx + 8 | 0;
   $2 = HEAP32[$1 >> 2] | 0;
   $fd9 = $2 + 8 | 0;
   $3 = HEAP32[$fd9 >> 2] | 0;
   do if (($3 | 0) == ($arrayidx | 0)) HEAP32[15411] = $0 & ~(1 << $add8); else {
    if ((HEAP32[15415] | 0) >>> 0 > $3 >>> 0) _abort();
    $bk = $3 + 12 | 0;
    if ((HEAP32[$bk >> 2] | 0) == ($2 | 0)) {
     HEAP32[$bk >> 2] = $arrayidx;
     HEAP32[$1 >> 2] = $3;
     break;
    } else _abort();
   } while (0);
   $shl22 = $add8 << 3;
   HEAP32[$2 + 4 >> 2] = $shl22 | 3;
   $head25 = $2 + $shl22 + 4 | 0;
   HEAP32[$head25 >> 2] = HEAP32[$head25 >> 2] | 1;
   $retval$0 = $fd9;
   STACKTOP = sp;
   return $retval$0 | 0;
  }
  $7 = HEAP32[15413] | 0;
  if ($cond >>> 0 > $7 >>> 0) {
   if ($shr3 | 0) {
    $shl37 = 2 << $shr;
    $and41 = $shr3 << $shr & ($shl37 | 0 - $shl37);
    $sub44 = ($and41 & 0 - $and41) + -1 | 0;
    $and46 = $sub44 >>> 12 & 16;
    $shr47 = $sub44 >>> $and46;
    $and49 = $shr47 >>> 5 & 8;
    $shr51 = $shr47 >>> $and49;
    $and53 = $shr51 >>> 2 & 4;
    $shr55 = $shr51 >>> $and53;
    $and57 = $shr55 >>> 1 & 2;
    $shr59 = $shr55 >>> $and57;
    $and61 = $shr59 >>> 1 & 1;
    $add64 = ($and49 | $and46 | $and53 | $and57 | $and61) + ($shr59 >>> $and61) | 0;
    $arrayidx66 = 61684 + ($add64 << 1 << 2) | 0;
    $8 = $arrayidx66 + 8 | 0;
    $9 = HEAP32[$8 >> 2] | 0;
    $fd69 = $9 + 8 | 0;
    $10 = HEAP32[$fd69 >> 2] | 0;
    do if (($10 | 0) == ($arrayidx66 | 0)) {
     $and74 = $0 & ~(1 << $add64);
     HEAP32[15411] = $and74;
     $14 = $and74;
    } else {
     if ((HEAP32[15415] | 0) >>> 0 > $10 >>> 0) _abort();
     $bk78 = $10 + 12 | 0;
     if ((HEAP32[$bk78 >> 2] | 0) == ($9 | 0)) {
      HEAP32[$bk78 >> 2] = $arrayidx66;
      HEAP32[$8 >> 2] = $10;
      $14 = $0;
      break;
     } else _abort();
    } while (0);
    $shl90 = $add64 << 3;
    $sub91 = $shl90 - $cond | 0;
    HEAP32[$9 + 4 >> 2] = $cond | 3;
    $add$ptr95 = $9 + $cond | 0;
    HEAP32[$add$ptr95 + 4 >> 2] = $sub91 | 1;
    HEAP32[$9 + $shl90 >> 2] = $sub91;
    if ($7 | 0) {
     $13 = HEAP32[15416] | 0;
     $shr101 = $7 >>> 3;
     $arrayidx103 = 61684 + ($shr101 << 1 << 2) | 0;
     $shl105 = 1 << $shr101;
     if (!($14 & $shl105)) {
      HEAP32[15411] = $14 | $shl105;
      $$pre$phiZ2D = $arrayidx103 + 8 | 0;
      $F104$0 = $arrayidx103;
     } else {
      $15 = $arrayidx103 + 8 | 0;
      $16 = HEAP32[$15 >> 2] | 0;
      if ((HEAP32[15415] | 0) >>> 0 > $16 >>> 0) _abort(); else {
       $$pre$phiZ2D = $15;
       $F104$0 = $16;
      }
     }
     HEAP32[$$pre$phiZ2D >> 2] = $13;
     HEAP32[$F104$0 + 12 >> 2] = $13;
     HEAP32[$13 + 8 >> 2] = $F104$0;
     HEAP32[$13 + 12 >> 2] = $arrayidx103;
    }
    HEAP32[15413] = $sub91;
    HEAP32[15416] = $add$ptr95;
    $retval$0 = $fd69;
    STACKTOP = sp;
    return $retval$0 | 0;
   }
   $18 = HEAP32[15412] | 0;
   if (!$18) $nb$0 = $cond; else {
    $sub2$i = ($18 & 0 - $18) + -1 | 0;
    $and3$i = $sub2$i >>> 12 & 16;
    $shr4$i = $sub2$i >>> $and3$i;
    $and6$i = $shr4$i >>> 5 & 8;
    $shr7$i = $shr4$i >>> $and6$i;
    $and9$i = $shr7$i >>> 2 & 4;
    $shr11$i = $shr7$i >>> $and9$i;
    $and13$i = $shr11$i >>> 1 & 2;
    $shr15$i = $shr11$i >>> $and13$i;
    $and17$i = $shr15$i >>> 1 & 1;
    $19 = HEAP32[61948 + (($and6$i | $and3$i | $and9$i | $and13$i | $and17$i) + ($shr15$i >>> $and17$i) << 2) >> 2] | 0;
    $rsize$0$i = (HEAP32[$19 + 4 >> 2] & -8) - $cond | 0;
    $t$0$i = $19;
    $v$0$i = $19;
    while (1) {
     $21 = HEAP32[$t$0$i + 16 >> 2] | 0;
     if (!$21) {
      $22 = HEAP32[$t$0$i + 20 >> 2] | 0;
      if (!$22) break; else $cond5$i = $22;
     } else $cond5$i = $21;
     $sub31$i = (HEAP32[$cond5$i + 4 >> 2] & -8) - $cond | 0;
     $cmp32$i = $sub31$i >>> 0 < $rsize$0$i >>> 0;
     $rsize$0$i = $cmp32$i ? $sub31$i : $rsize$0$i;
     $t$0$i = $cond5$i;
     $v$0$i = $cmp32$i ? $cond5$i : $v$0$i;
    }
    $24 = HEAP32[15415] | 0;
    if ($24 >>> 0 > $v$0$i >>> 0) _abort();
    $add$ptr$i = $v$0$i + $cond | 0;
    if ($add$ptr$i >>> 0 <= $v$0$i >>> 0) _abort();
    $25 = HEAP32[$v$0$i + 24 >> 2] | 0;
    $26 = HEAP32[$v$0$i + 12 >> 2] | 0;
    do if (($26 | 0) == ($v$0$i | 0)) {
     $arrayidx61$i = $v$0$i + 20 | 0;
     $30 = HEAP32[$arrayidx61$i >> 2] | 0;
     if (!$30) {
      $arrayidx65$i = $v$0$i + 16 | 0;
      $31 = HEAP32[$arrayidx65$i >> 2] | 0;
      if (!$31) {
       $R$3$i = 0;
       break;
      } else {
       $R$1$i$ph = $31;
       $RP$1$i$ph = $arrayidx65$i;
      }
     } else {
      $R$1$i$ph = $30;
      $RP$1$i$ph = $arrayidx61$i;
     }
     $R$1$i = $R$1$i$ph;
     $RP$1$i = $RP$1$i$ph;
     while (1) {
      $arrayidx71$i = $R$1$i + 20 | 0;
      $32 = HEAP32[$arrayidx71$i >> 2] | 0;
      if (!$32) {
       $arrayidx75$i = $R$1$i + 16 | 0;
       $33 = HEAP32[$arrayidx75$i >> 2] | 0;
       if (!$33) break; else {
        $R$1$i$be = $33;
        $RP$1$i$be = $arrayidx75$i;
       }
      } else {
       $R$1$i$be = $32;
       $RP$1$i$be = $arrayidx71$i;
      }
      $R$1$i = $R$1$i$be;
      $RP$1$i = $RP$1$i$be;
     }
     if ($24 >>> 0 > $RP$1$i >>> 0) _abort(); else {
      HEAP32[$RP$1$i >> 2] = 0;
      $R$3$i = $R$1$i;
      break;
     }
    } else {
     $27 = HEAP32[$v$0$i + 8 >> 2] | 0;
     if ($24 >>> 0 > $27 >>> 0) _abort();
     $bk47$i = $27 + 12 | 0;
     if ((HEAP32[$bk47$i >> 2] | 0) != ($v$0$i | 0)) _abort();
     $fd50$i = $26 + 8 | 0;
     if ((HEAP32[$fd50$i >> 2] | 0) == ($v$0$i | 0)) {
      HEAP32[$bk47$i >> 2] = $26;
      HEAP32[$fd50$i >> 2] = $27;
      $R$3$i = $26;
      break;
     } else _abort();
    } while (0);
    L78 : do if ($25 | 0) {
     $34 = HEAP32[$v$0$i + 28 >> 2] | 0;
     $arrayidx94$i = 61948 + ($34 << 2) | 0;
     do if (($v$0$i | 0) == (HEAP32[$arrayidx94$i >> 2] | 0)) {
      HEAP32[$arrayidx94$i >> 2] = $R$3$i;
      if (!$R$3$i) {
       HEAP32[15412] = $18 & ~(1 << $34);
       break L78;
      }
     } else if ((HEAP32[15415] | 0) >>> 0 > $25 >>> 0) _abort(); else {
      $arrayidx113$i = $25 + 16 | 0;
      HEAP32[((HEAP32[$arrayidx113$i >> 2] | 0) == ($v$0$i | 0) ? $arrayidx113$i : $25 + 20 | 0) >> 2] = $R$3$i;
      if (!$R$3$i) break L78; else break;
     } while (0);
     $38 = HEAP32[15415] | 0;
     if ($38 >>> 0 > $R$3$i >>> 0) _abort();
     HEAP32[$R$3$i + 24 >> 2] = $25;
     $39 = HEAP32[$v$0$i + 16 >> 2] | 0;
     do if ($39 | 0) if ($38 >>> 0 > $39 >>> 0) _abort(); else {
      HEAP32[$R$3$i + 16 >> 2] = $39;
      HEAP32[$39 + 24 >> 2] = $R$3$i;
      break;
     } while (0);
     $40 = HEAP32[$v$0$i + 20 >> 2] | 0;
     if ($40 | 0) if ((HEAP32[15415] | 0) >>> 0 > $40 >>> 0) _abort(); else {
      HEAP32[$R$3$i + 20 >> 2] = $40;
      HEAP32[$40 + 24 >> 2] = $R$3$i;
      break;
     }
    } while (0);
    if ($rsize$0$i >>> 0 < 16) {
     $add177$i = $rsize$0$i + $cond | 0;
     HEAP32[$v$0$i + 4 >> 2] = $add177$i | 3;
     $head182$i = $v$0$i + $add177$i + 4 | 0;
     HEAP32[$head182$i >> 2] = HEAP32[$head182$i >> 2] | 1;
    } else {
     HEAP32[$v$0$i + 4 >> 2] = $cond | 3;
     HEAP32[$add$ptr$i + 4 >> 2] = $rsize$0$i | 1;
     HEAP32[$add$ptr$i + $rsize$0$i >> 2] = $rsize$0$i;
     if ($7 | 0) {
      $43 = HEAP32[15416] | 0;
      $shr194$i = $7 >>> 3;
      $arrayidx196$i = 61684 + ($shr194$i << 1 << 2) | 0;
      $shl198$i = 1 << $shr194$i;
      if (!($shl198$i & $0)) {
       HEAP32[15411] = $shl198$i | $0;
       $$pre$phi$iZ2D = $arrayidx196$i + 8 | 0;
       $F197$0$i = $arrayidx196$i;
      } else {
       $44 = $arrayidx196$i + 8 | 0;
       $45 = HEAP32[$44 >> 2] | 0;
       if ((HEAP32[15415] | 0) >>> 0 > $45 >>> 0) _abort(); else {
        $$pre$phi$iZ2D = $44;
        $F197$0$i = $45;
       }
      }
      HEAP32[$$pre$phi$iZ2D >> 2] = $43;
      HEAP32[$F197$0$i + 12 >> 2] = $43;
      HEAP32[$43 + 8 >> 2] = $F197$0$i;
      HEAP32[$43 + 12 >> 2] = $arrayidx196$i;
     }
     HEAP32[15413] = $rsize$0$i;
     HEAP32[15416] = $add$ptr$i;
    }
    $retval$0 = $v$0$i + 8 | 0;
    STACKTOP = sp;
    return $retval$0 | 0;
   }
  } else $nb$0 = $cond;
 } else if ($bytes >>> 0 > 4294967231) $nb$0 = -1; else {
  $add144 = $bytes + 11 | 0;
  $and145 = $add144 & -8;
  $47 = HEAP32[15412] | 0;
  if (!$47) $nb$0 = $and145; else {
   $sub$i140 = 0 - $and145 | 0;
   $shr$i141 = $add144 >>> 8;
   if (!$shr$i141) $idx$0$i = 0; else if ($and145 >>> 0 > 16777215) $idx$0$i = 31; else {
    $and$i145 = ($shr$i141 + 1048320 | 0) >>> 16 & 8;
    $shl$i146 = $shr$i141 << $and$i145;
    $and8$i = ($shl$i146 + 520192 | 0) >>> 16 & 4;
    $shl9$i = $shl$i146 << $and8$i;
    $and12$i = ($shl9$i + 245760 | 0) >>> 16 & 2;
    $add17$i = 14 - ($and8$i | $and$i145 | $and12$i) + ($shl9$i << $and12$i >>> 15) | 0;
    $idx$0$i = $and145 >>> ($add17$i + 7 | 0) & 1 | $add17$i << 1;
   }
   $48 = HEAP32[61948 + ($idx$0$i << 2) >> 2] | 0;
   L122 : do if (!$48) {
    $rsize$3$i = $sub$i140;
    $t$2$i = 0;
    $v$3$i = 0;
    label = 85;
   } else {
    $rsize$0$i154 = $sub$i140;
    $rst$0$i = 0;
    $sizebits$0$i = $and145 << (($idx$0$i | 0) == 31 ? 0 : 25 - ($idx$0$i >>> 1) | 0);
    $t$0$i153 = $48;
    $v$0$i155 = 0;
    while (1) {
     $sub33$i = (HEAP32[$t$0$i153 + 4 >> 2] & -8) - $and145 | 0;
     if ($sub33$i >>> 0 < $rsize$0$i154 >>> 0) if (!$sub33$i) {
      $rsize$420$i$ph = 0;
      $t$519$i$ph = $t$0$i153;
      $v$421$i$ph = $t$0$i153;
      label = 89;
      break L122;
     } else {
      $rsize$1$i = $sub33$i;
      $v$1$i = $t$0$i153;
     } else {
      $rsize$1$i = $rsize$0$i154;
      $v$1$i = $v$0$i155;
     }
     $50 = HEAP32[$t$0$i153 + 20 >> 2] | 0;
     $t$0$i153 = HEAP32[$t$0$i153 + 16 + ($sizebits$0$i >>> 31 << 2) >> 2] | 0;
     $rst$1$i = ($50 | 0) == 0 | ($50 | 0) == ($t$0$i153 | 0) ? $rst$0$i : $50;
     if (!$t$0$i153) {
      $rsize$3$i = $rsize$1$i;
      $t$2$i = $rst$1$i;
      $v$3$i = $v$1$i;
      label = 85;
      break;
     } else {
      $rsize$0$i154 = $rsize$1$i;
      $rst$0$i = $rst$1$i;
      $sizebits$0$i = $sizebits$0$i << 1;
      $v$0$i155 = $v$1$i;
     }
    }
   } while (0);
   if ((label | 0) == 85) {
    if (($t$2$i | 0) == 0 & ($v$3$i | 0) == 0) {
     $shl60$i = 2 << $idx$0$i;
     $and64$i = ($shl60$i | 0 - $shl60$i) & $47;
     if (!$and64$i) {
      $nb$0 = $and145;
      break;
     }
     $sub70$i = ($and64$i & 0 - $and64$i) + -1 | 0;
     $and73$i = $sub70$i >>> 12 & 16;
     $shr75$i = $sub70$i >>> $and73$i;
     $and77$i = $shr75$i >>> 5 & 8;
     $shr79$i = $shr75$i >>> $and77$i;
     $and81$i = $shr79$i >>> 2 & 4;
     $shr83$i = $shr79$i >>> $and81$i;
     $and85$i = $shr83$i >>> 1 & 2;
     $shr87$i = $shr83$i >>> $and85$i;
     $and89$i = $shr87$i >>> 1 & 1;
     $t$4$i = HEAP32[61948 + (($and77$i | $and73$i | $and81$i | $and85$i | $and89$i) + ($shr87$i >>> $and89$i) << 2) >> 2] | 0;
     $v$3$i222 = 0;
    } else {
     $t$4$i = $t$2$i;
     $v$3$i222 = $v$3$i;
    }
    if (!$t$4$i) {
     $rsize$4$lcssa$i = $rsize$3$i;
     $v$4$lcssa$i = $v$3$i222;
    } else {
     $rsize$420$i$ph = $rsize$3$i;
     $t$519$i$ph = $t$4$i;
     $v$421$i$ph = $v$3$i222;
     label = 89;
    }
   }
   if ((label | 0) == 89) {
    $rsize$420$i = $rsize$420$i$ph;
    $t$519$i = $t$519$i$ph;
    $v$421$i = $v$421$i$ph;
    while (1) {
     $sub101$i = (HEAP32[$t$519$i + 4 >> 2] & -8) - $and145 | 0;
     $cmp102$i = $sub101$i >>> 0 < $rsize$420$i >>> 0;
     $spec$select$i159 = $cmp102$i ? $sub101$i : $rsize$420$i;
     $spec$select3$i = $cmp102$i ? $t$519$i : $v$421$i;
     $54 = HEAP32[$t$519$i + 16 >> 2] | 0;
     if (!$54) $cond115$i = HEAP32[$t$519$i + 20 >> 2] | 0; else $cond115$i = $54;
     if (!$cond115$i) {
      $rsize$4$lcssa$i = $spec$select$i159;
      $v$4$lcssa$i = $spec$select3$i;
      break;
     } else {
      $rsize$420$i = $spec$select$i159;
      $t$519$i = $cond115$i;
      $v$421$i = $spec$select3$i;
     }
    }
   }
   if (!$v$4$lcssa$i) $nb$0 = $and145; else if ($rsize$4$lcssa$i >>> 0 < ((HEAP32[15413] | 0) - $and145 | 0) >>> 0) {
    $57 = HEAP32[15415] | 0;
    if ($57 >>> 0 > $v$4$lcssa$i >>> 0) _abort();
    $add$ptr$i164 = $v$4$lcssa$i + $and145 | 0;
    if ($add$ptr$i164 >>> 0 <= $v$4$lcssa$i >>> 0) _abort();
    $58 = HEAP32[$v$4$lcssa$i + 24 >> 2] | 0;
    $59 = HEAP32[$v$4$lcssa$i + 12 >> 2] | 0;
    do if (($59 | 0) == ($v$4$lcssa$i | 0)) {
     $arrayidx151$i = $v$4$lcssa$i + 20 | 0;
     $63 = HEAP32[$arrayidx151$i >> 2] | 0;
     if (!$63) {
      $arrayidx155$i = $v$4$lcssa$i + 16 | 0;
      $64 = HEAP32[$arrayidx155$i >> 2] | 0;
      if (!$64) {
       $R$3$i177 = 0;
       break;
      } else {
       $R$1$i173$ph = $64;
       $RP$1$i172$ph = $arrayidx155$i;
      }
     } else {
      $R$1$i173$ph = $63;
      $RP$1$i172$ph = $arrayidx151$i;
     }
     $R$1$i173 = $R$1$i173$ph;
     $RP$1$i172 = $RP$1$i172$ph;
     while (1) {
      $arrayidx161$i = $R$1$i173 + 20 | 0;
      $65 = HEAP32[$arrayidx161$i >> 2] | 0;
      if (!$65) {
       $arrayidx165$i174 = $R$1$i173 + 16 | 0;
       $66 = HEAP32[$arrayidx165$i174 >> 2] | 0;
       if (!$66) break; else {
        $R$1$i173$be = $66;
        $RP$1$i172$be = $arrayidx165$i174;
       }
      } else {
       $R$1$i173$be = $65;
       $RP$1$i172$be = $arrayidx161$i;
      }
      $R$1$i173 = $R$1$i173$be;
      $RP$1$i172 = $RP$1$i172$be;
     }
     if ($57 >>> 0 > $RP$1$i172 >>> 0) _abort(); else {
      HEAP32[$RP$1$i172 >> 2] = 0;
      $R$3$i177 = $R$1$i173;
      break;
     }
    } else {
     $60 = HEAP32[$v$4$lcssa$i + 8 >> 2] | 0;
     if ($57 >>> 0 > $60 >>> 0) _abort();
     $bk136$i = $60 + 12 | 0;
     if ((HEAP32[$bk136$i >> 2] | 0) != ($v$4$lcssa$i | 0)) _abort();
     $fd139$i = $59 + 8 | 0;
     if ((HEAP32[$fd139$i >> 2] | 0) == ($v$4$lcssa$i | 0)) {
      HEAP32[$bk136$i >> 2] = $59;
      HEAP32[$fd139$i >> 2] = $60;
      $R$3$i177 = $59;
      break;
     } else _abort();
    } while (0);
    L176 : do if (!$58) $80 = $47; else {
     $67 = HEAP32[$v$4$lcssa$i + 28 >> 2] | 0;
     $arrayidx184$i = 61948 + ($67 << 2) | 0;
     do if (($v$4$lcssa$i | 0) == (HEAP32[$arrayidx184$i >> 2] | 0)) {
      HEAP32[$arrayidx184$i >> 2] = $R$3$i177;
      if (!$R$3$i177) {
       $and194$i = $47 & ~(1 << $67);
       HEAP32[15412] = $and194$i;
       $80 = $and194$i;
       break L176;
      }
     } else if ((HEAP32[15415] | 0) >>> 0 > $58 >>> 0) _abort(); else {
      $arrayidx204$i = $58 + 16 | 0;
      HEAP32[((HEAP32[$arrayidx204$i >> 2] | 0) == ($v$4$lcssa$i | 0) ? $arrayidx204$i : $58 + 20 | 0) >> 2] = $R$3$i177;
      if (!$R$3$i177) {
       $80 = $47;
       break L176;
      } else break;
     } while (0);
     $71 = HEAP32[15415] | 0;
     if ($71 >>> 0 > $R$3$i177 >>> 0) _abort();
     HEAP32[$R$3$i177 + 24 >> 2] = $58;
     $72 = HEAP32[$v$4$lcssa$i + 16 >> 2] | 0;
     do if ($72 | 0) if ($71 >>> 0 > $72 >>> 0) _abort(); else {
      HEAP32[$R$3$i177 + 16 >> 2] = $72;
      HEAP32[$72 + 24 >> 2] = $R$3$i177;
      break;
     } while (0);
     $73 = HEAP32[$v$4$lcssa$i + 20 >> 2] | 0;
     if (!$73) $80 = $47; else if ((HEAP32[15415] | 0) >>> 0 > $73 >>> 0) _abort(); else {
      HEAP32[$R$3$i177 + 20 >> 2] = $73;
      HEAP32[$73 + 24 >> 2] = $R$3$i177;
      $80 = $47;
      break;
     }
    } while (0);
    L200 : do if ($rsize$4$lcssa$i >>> 0 < 16) {
     $add268$i = $rsize$4$lcssa$i + $and145 | 0;
     HEAP32[$v$4$lcssa$i + 4 >> 2] = $add268$i | 3;
     $head274$i = $v$4$lcssa$i + $add268$i + 4 | 0;
     HEAP32[$head274$i >> 2] = HEAP32[$head274$i >> 2] | 1;
    } else {
     HEAP32[$v$4$lcssa$i + 4 >> 2] = $and145 | 3;
     HEAP32[$add$ptr$i164 + 4 >> 2] = $rsize$4$lcssa$i | 1;
     HEAP32[$add$ptr$i164 + $rsize$4$lcssa$i >> 2] = $rsize$4$lcssa$i;
     $shr283$i = $rsize$4$lcssa$i >>> 3;
     if ($rsize$4$lcssa$i >>> 0 < 256) {
      $arrayidx289$i = 61684 + ($shr283$i << 1 << 2) | 0;
      $76 = HEAP32[15411] | 0;
      $shl291$i = 1 << $shr283$i;
      if (!($76 & $shl291$i)) {
       HEAP32[15411] = $76 | $shl291$i;
       $$pre$phi$i185Z2D = $arrayidx289$i + 8 | 0;
       $F290$0$i = $arrayidx289$i;
      } else {
       $77 = $arrayidx289$i + 8 | 0;
       $78 = HEAP32[$77 >> 2] | 0;
       if ((HEAP32[15415] | 0) >>> 0 > $78 >>> 0) _abort(); else {
        $$pre$phi$i185Z2D = $77;
        $F290$0$i = $78;
       }
      }
      HEAP32[$$pre$phi$i185Z2D >> 2] = $add$ptr$i164;
      HEAP32[$F290$0$i + 12 >> 2] = $add$ptr$i164;
      HEAP32[$add$ptr$i164 + 8 >> 2] = $F290$0$i;
      HEAP32[$add$ptr$i164 + 12 >> 2] = $arrayidx289$i;
      break;
     }
     $shr318$i = $rsize$4$lcssa$i >>> 8;
     if (!$shr318$i) $I316$0$i = 0; else if ($rsize$4$lcssa$i >>> 0 > 16777215) $I316$0$i = 31; else {
      $and331$i = ($shr318$i + 1048320 | 0) >>> 16 & 8;
      $shl333$i = $shr318$i << $and331$i;
      $and336$i = ($shl333$i + 520192 | 0) >>> 16 & 4;
      $shl338$i = $shl333$i << $and336$i;
      $and341$i = ($shl338$i + 245760 | 0) >>> 16 & 2;
      $add346$i = 14 - ($and336$i | $and331$i | $and341$i) + ($shl338$i << $and341$i >>> 15) | 0;
      $I316$0$i = $rsize$4$lcssa$i >>> ($add346$i + 7 | 0) & 1 | $add346$i << 1;
     }
     $arrayidx355$i = 61948 + ($I316$0$i << 2) | 0;
     HEAP32[$add$ptr$i164 + 28 >> 2] = $I316$0$i;
     $child357$i = $add$ptr$i164 + 16 | 0;
     HEAP32[$child357$i + 4 >> 2] = 0;
     HEAP32[$child357$i >> 2] = 0;
     $shl362$i = 1 << $I316$0$i;
     if (!($80 & $shl362$i)) {
      HEAP32[15412] = $80 | $shl362$i;
      HEAP32[$arrayidx355$i >> 2] = $add$ptr$i164;
      HEAP32[$add$ptr$i164 + 24 >> 2] = $arrayidx355$i;
      HEAP32[$add$ptr$i164 + 12 >> 2] = $add$ptr$i164;
      HEAP32[$add$ptr$i164 + 8 >> 2] = $add$ptr$i164;
      break;
     }
     $81 = HEAP32[$arrayidx355$i >> 2] | 0;
     L218 : do if ((HEAP32[$81 + 4 >> 2] & -8 | 0) == ($rsize$4$lcssa$i | 0)) $T$0$lcssa$i = $81; else {
      $K373$017$i = $rsize$4$lcssa$i << (($I316$0$i | 0) == 31 ? 0 : 25 - ($I316$0$i >>> 1) | 0);
      $T$016$i = $81;
      while (1) {
       $arrayidx394$i = $T$016$i + 16 + ($K373$017$i >>> 31 << 2) | 0;
       $83 = HEAP32[$arrayidx394$i >> 2] | 0;
       if (!$83) break;
       if ((HEAP32[$83 + 4 >> 2] & -8 | 0) == ($rsize$4$lcssa$i | 0)) {
        $T$0$lcssa$i = $83;
        break L218;
       } else {
        $K373$017$i = $K373$017$i << 1;
        $T$016$i = $83;
       }
      }
      if ((HEAP32[15415] | 0) >>> 0 > $arrayidx394$i >>> 0) _abort(); else {
       HEAP32[$arrayidx394$i >> 2] = $add$ptr$i164;
       HEAP32[$add$ptr$i164 + 24 >> 2] = $T$016$i;
       HEAP32[$add$ptr$i164 + 12 >> 2] = $add$ptr$i164;
       HEAP32[$add$ptr$i164 + 8 >> 2] = $add$ptr$i164;
       break L200;
      }
     } while (0);
     $fd416$i = $T$0$lcssa$i + 8 | 0;
     $86 = HEAP32[$fd416$i >> 2] | 0;
     $87 = HEAP32[15415] | 0;
     if ($87 >>> 0 <= $86 >>> 0 & $87 >>> 0 <= $T$0$lcssa$i >>> 0) {
      HEAP32[$86 + 12 >> 2] = $add$ptr$i164;
      HEAP32[$fd416$i >> 2] = $add$ptr$i164;
      HEAP32[$add$ptr$i164 + 8 >> 2] = $86;
      HEAP32[$add$ptr$i164 + 12 >> 2] = $T$0$lcssa$i;
      HEAP32[$add$ptr$i164 + 24 >> 2] = 0;
      break;
     } else _abort();
    } while (0);
    $retval$0 = $v$4$lcssa$i + 8 | 0;
    STACKTOP = sp;
    return $retval$0 | 0;
   } else $nb$0 = $and145;
  }
 } while (0);
 $89 = HEAP32[15413] | 0;
 if ($89 >>> 0 >= $nb$0 >>> 0) {
  $sub160 = $89 - $nb$0 | 0;
  $90 = HEAP32[15416] | 0;
  if ($sub160 >>> 0 > 15) {
   $add$ptr166 = $90 + $nb$0 | 0;
   HEAP32[15416] = $add$ptr166;
   HEAP32[15413] = $sub160;
   HEAP32[$add$ptr166 + 4 >> 2] = $sub160 | 1;
   HEAP32[$90 + $89 >> 2] = $sub160;
   HEAP32[$90 + 4 >> 2] = $nb$0 | 3;
  } else {
   HEAP32[15413] = 0;
   HEAP32[15416] = 0;
   HEAP32[$90 + 4 >> 2] = $89 | 3;
   $head179 = $90 + $89 + 4 | 0;
   HEAP32[$head179 >> 2] = HEAP32[$head179 >> 2] | 1;
  }
  $retval$0 = $90 + 8 | 0;
  STACKTOP = sp;
  return $retval$0 | 0;
 }
 $92 = HEAP32[15414] | 0;
 if ($92 >>> 0 > $nb$0 >>> 0) {
  $sub190 = $92 - $nb$0 | 0;
  HEAP32[15414] = $sub190;
  $93 = HEAP32[15417] | 0;
  $add$ptr193 = $93 + $nb$0 | 0;
  HEAP32[15417] = $add$ptr193;
  HEAP32[$add$ptr193 + 4 >> 2] = $sub190 | 1;
  HEAP32[$93 + 4 >> 2] = $nb$0 | 3;
  $retval$0 = $93 + 8 | 0;
  STACKTOP = sp;
  return $retval$0 | 0;
 }
 if (!(HEAP32[15529] | 0)) {
  HEAP32[15531] = 4096;
  HEAP32[15530] = 4096;
  HEAP32[15532] = -1;
  HEAP32[15533] = -1;
  HEAP32[15534] = 0;
  HEAP32[15522] = 0;
  HEAP32[15529] = $magic$i$i & -16 ^ 1431655768;
  $96 = 4096;
 } else $96 = HEAP32[15531] | 0;
 $add$i188 = $nb$0 + 48 | 0;
 $sub$i189 = $nb$0 + 47 | 0;
 $add9$i = $96 + $sub$i189 | 0;
 $neg$i190 = 0 - $96 | 0;
 $and11$i = $add9$i & $neg$i190;
 if ($and11$i >>> 0 <= $nb$0 >>> 0) {
  $retval$0 = 0;
  STACKTOP = sp;
  return $retval$0 | 0;
 }
 $97 = HEAP32[15521] | 0;
 if ($97 | 0) {
  $98 = HEAP32[15519] | 0;
  $add17$i191 = $98 + $and11$i | 0;
  if ($add17$i191 >>> 0 <= $98 >>> 0 | $add17$i191 >>> 0 > $97 >>> 0) {
   $retval$0 = 0;
   STACKTOP = sp;
   return $retval$0 | 0;
  }
 }
 L257 : do if (!(HEAP32[15522] & 4)) {
  $100 = HEAP32[15417] | 0;
  L259 : do if (!$100) label = 173; else {
   $sp$0$i$i = 62092;
   while (1) {
    $101 = HEAP32[$sp$0$i$i >> 2] | 0;
    if ($101 >>> 0 <= $100 >>> 0) if (($101 + (HEAP32[$sp$0$i$i + 4 >> 2] | 0) | 0) >>> 0 > $100 >>> 0) break;
    $103 = HEAP32[$sp$0$i$i + 8 >> 2] | 0;
    if (!$103) {
     label = 173;
     break L259;
    } else $sp$0$i$i = $103;
   }
   $and80$i = $add9$i - $92 & $neg$i190;
   if ($and80$i >>> 0 < 2147483647) {
    $call83$i = _sbrk($and80$i) | 0;
    if (($call83$i | 0) == ((HEAP32[$sp$0$i$i >> 2] | 0) + (HEAP32[$sp$0$i$i + 4 >> 2] | 0) | 0)) if (($call83$i | 0) == (-1 | 0)) $tsize$2687886$i = $and80$i; else {
     $tbase$799$i = $call83$i;
     $tsize$798$i = $and80$i;
     label = 190;
     break L257;
    } else {
     $br$2$ph$i = $call83$i;
     $ssize$2$ph$i = $and80$i;
     label = 181;
    }
   } else $tsize$2687886$i = 0;
  } while (0);
  do if ((label | 0) == 173) {
   $call37$i = _sbrk(0) | 0;
   if (($call37$i | 0) == (-1 | 0)) $tsize$2687886$i = 0; else {
    $104 = $call37$i;
    $105 = HEAP32[15530] | 0;
    $sub41$i = $105 + -1 | 0;
    $spec$select100$i = (($sub41$i & $104 | 0) == 0 ? 0 : ($sub41$i + $104 & 0 - $105) - $104 | 0) + $and11$i | 0;
    $106 = HEAP32[15519] | 0;
    $add54$i = $spec$select100$i + $106 | 0;
    if ($spec$select100$i >>> 0 > $nb$0 >>> 0 & $spec$select100$i >>> 0 < 2147483647) {
     $107 = HEAP32[15521] | 0;
     if ($107 | 0) if ($add54$i >>> 0 <= $106 >>> 0 | $add54$i >>> 0 > $107 >>> 0) {
      $tsize$2687886$i = 0;
      break;
     }
     $call68$i = _sbrk($spec$select100$i) | 0;
     if (($call68$i | 0) == ($call37$i | 0)) {
      $tbase$799$i = $call37$i;
      $tsize$798$i = $spec$select100$i;
      label = 190;
      break L257;
     } else {
      $br$2$ph$i = $call68$i;
      $ssize$2$ph$i = $spec$select100$i;
      label = 181;
     }
    } else $tsize$2687886$i = 0;
   }
  } while (0);
  do if ((label | 0) == 181) {
   $sub112$i = 0 - $ssize$2$ph$i | 0;
   if (!($add$i188 >>> 0 > $ssize$2$ph$i >>> 0 & ($ssize$2$ph$i >>> 0 < 2147483647 & ($br$2$ph$i | 0) != (-1 | 0)))) if (($br$2$ph$i | 0) == (-1 | 0)) {
    $tsize$2687886$i = 0;
    break;
   } else {
    $tbase$799$i = $br$2$ph$i;
    $tsize$798$i = $ssize$2$ph$i;
    label = 190;
    break L257;
   }
   $110 = HEAP32[15531] | 0;
   $and104$i = $sub$i189 - $ssize$2$ph$i + $110 & 0 - $110;
   if ($and104$i >>> 0 >= 2147483647) {
    $tbase$799$i = $br$2$ph$i;
    $tsize$798$i = $ssize$2$ph$i;
    label = 190;
    break L257;
   }
   if ((_sbrk($and104$i) | 0) == (-1 | 0)) {
    _sbrk($sub112$i) | 0;
    $tsize$2687886$i = 0;
    break;
   } else {
    $tbase$799$i = $br$2$ph$i;
    $tsize$798$i = $and104$i + $ssize$2$ph$i | 0;
    label = 190;
    break L257;
   }
  } while (0);
  HEAP32[15522] = HEAP32[15522] | 4;
  $tsize$4$i = $tsize$2687886$i;
  label = 188;
 } else {
  $tsize$4$i = 0;
  label = 188;
 } while (0);
 if ((label | 0) == 188) if ($and11$i >>> 0 < 2147483647) {
  $call131$i = _sbrk($and11$i) | 0;
  $call132$i = _sbrk(0) | 0;
  $sub$ptr$sub$i = $call132$i - $call131$i | 0;
  $cmp141$i = $sub$ptr$sub$i >>> 0 > ($nb$0 + 40 | 0) >>> 0;
  if (!(($call131$i | 0) == (-1 | 0) | $cmp141$i ^ 1 | $call131$i >>> 0 < $call132$i >>> 0 & (($call131$i | 0) != (-1 | 0) & ($call132$i | 0) != (-1 | 0)) ^ 1)) {
   $tbase$799$i = $call131$i;
   $tsize$798$i = $cmp141$i ? $sub$ptr$sub$i : $tsize$4$i;
   label = 190;
  }
 }
 if ((label | 0) == 190) {
  $add150$i = (HEAP32[15519] | 0) + $tsize$798$i | 0;
  HEAP32[15519] = $add150$i;
  if ($add150$i >>> 0 > (HEAP32[15520] | 0) >>> 0) HEAP32[15520] = $add150$i;
  $114 = HEAP32[15417] | 0;
  L294 : do if (!$114) {
   $115 = HEAP32[15415] | 0;
   if (($115 | 0) == 0 | $tbase$799$i >>> 0 < $115 >>> 0) HEAP32[15415] = $tbase$799$i;
   HEAP32[15523] = $tbase$799$i;
   HEAP32[15524] = $tsize$798$i;
   HEAP32[15526] = 0;
   HEAP32[15420] = HEAP32[15529];
   HEAP32[15419] = -1;
   HEAP32[15424] = 61684;
   HEAP32[15423] = 61684;
   HEAP32[15426] = 61692;
   HEAP32[15425] = 61692;
   HEAP32[15428] = 61700;
   HEAP32[15427] = 61700;
   HEAP32[15430] = 61708;
   HEAP32[15429] = 61708;
   HEAP32[15432] = 61716;
   HEAP32[15431] = 61716;
   HEAP32[15434] = 61724;
   HEAP32[15433] = 61724;
   HEAP32[15436] = 61732;
   HEAP32[15435] = 61732;
   HEAP32[15438] = 61740;
   HEAP32[15437] = 61740;
   HEAP32[15440] = 61748;
   HEAP32[15439] = 61748;
   HEAP32[15442] = 61756;
   HEAP32[15441] = 61756;
   HEAP32[15444] = 61764;
   HEAP32[15443] = 61764;
   HEAP32[15446] = 61772;
   HEAP32[15445] = 61772;
   HEAP32[15448] = 61780;
   HEAP32[15447] = 61780;
   HEAP32[15450] = 61788;
   HEAP32[15449] = 61788;
   HEAP32[15452] = 61796;
   HEAP32[15451] = 61796;
   HEAP32[15454] = 61804;
   HEAP32[15453] = 61804;
   HEAP32[15456] = 61812;
   HEAP32[15455] = 61812;
   HEAP32[15458] = 61820;
   HEAP32[15457] = 61820;
   HEAP32[15460] = 61828;
   HEAP32[15459] = 61828;
   HEAP32[15462] = 61836;
   HEAP32[15461] = 61836;
   HEAP32[15464] = 61844;
   HEAP32[15463] = 61844;
   HEAP32[15466] = 61852;
   HEAP32[15465] = 61852;
   HEAP32[15468] = 61860;
   HEAP32[15467] = 61860;
   HEAP32[15470] = 61868;
   HEAP32[15469] = 61868;
   HEAP32[15472] = 61876;
   HEAP32[15471] = 61876;
   HEAP32[15474] = 61884;
   HEAP32[15473] = 61884;
   HEAP32[15476] = 61892;
   HEAP32[15475] = 61892;
   HEAP32[15478] = 61900;
   HEAP32[15477] = 61900;
   HEAP32[15480] = 61908;
   HEAP32[15479] = 61908;
   HEAP32[15482] = 61916;
   HEAP32[15481] = 61916;
   HEAP32[15484] = 61924;
   HEAP32[15483] = 61924;
   HEAP32[15486] = 61932;
   HEAP32[15485] = 61932;
   $sub172$i = $tsize$798$i + -40 | 0;
   $117 = $tbase$799$i + 8 | 0;
   $cond$i20$i = ($117 & 7 | 0) == 0 ? 0 : 0 - $117 & 7;
   $add$ptr4$i$i = $tbase$799$i + $cond$i20$i | 0;
   $sub5$i$i = $sub172$i - $cond$i20$i | 0;
   HEAP32[15417] = $add$ptr4$i$i;
   HEAP32[15414] = $sub5$i$i;
   HEAP32[$add$ptr4$i$i + 4 >> 2] = $sub5$i$i | 1;
   HEAP32[$tbase$799$i + $sub172$i + 4 >> 2] = 40;
   HEAP32[15418] = HEAP32[15533];
  } else {
   $sp$0116$i = 62092;
   while (1) {
    $119 = HEAP32[$sp$0116$i >> 2] | 0;
    $120 = HEAP32[$sp$0116$i + 4 >> 2] | 0;
    if (($tbase$799$i | 0) == ($119 + $120 | 0)) {
     label = 199;
     break;
    }
    $121 = HEAP32[$sp$0116$i + 8 >> 2] | 0;
    if (!$121) break; else $sp$0116$i = $121;
   }
   if ((label | 0) == 199) {
    $size188$i$le = $sp$0116$i + 4 | 0;
    if (!(HEAP32[$sp$0116$i + 12 >> 2] & 8)) if ($tbase$799$i >>> 0 > $114 >>> 0 & $119 >>> 0 <= $114 >>> 0) {
     HEAP32[$size188$i$le >> 2] = $120 + $tsize$798$i;
     $add215$i = (HEAP32[15414] | 0) + $tsize$798$i | 0;
     $124 = $114 + 8 | 0;
     $cond$i56$i = ($124 & 7 | 0) == 0 ? 0 : 0 - $124 & 7;
     $add$ptr4$i57$i = $114 + $cond$i56$i | 0;
     $sub5$i58$i = $add215$i - $cond$i56$i | 0;
     HEAP32[15417] = $add$ptr4$i57$i;
     HEAP32[15414] = $sub5$i58$i;
     HEAP32[$add$ptr4$i57$i + 4 >> 2] = $sub5$i58$i | 1;
     HEAP32[$114 + $add215$i + 4 >> 2] = 40;
     HEAP32[15418] = HEAP32[15533];
     break;
    }
   }
   $126 = HEAP32[15415] | 0;
   if ($tbase$799$i >>> 0 < $126 >>> 0) {
    HEAP32[15415] = $tbase$799$i;
    $139 = $tbase$799$i;
   } else $139 = $126;
   $add$ptr227$i = $tbase$799$i + $tsize$798$i | 0;
   $sp$1115$i = 62092;
   while (1) {
    if ((HEAP32[$sp$1115$i >> 2] | 0) == ($add$ptr227$i | 0)) {
     label = 207;
     break;
    }
    $128 = HEAP32[$sp$1115$i + 8 >> 2] | 0;
    if (!$128) break; else $sp$1115$i = $128;
   }
   if ((label | 0) == 207) if (!(HEAP32[$sp$1115$i + 12 >> 2] & 8)) {
    HEAP32[$sp$1115$i >> 2] = $tbase$799$i;
    $size245$i = $sp$1115$i + 4 | 0;
    HEAP32[$size245$i >> 2] = (HEAP32[$size245$i >> 2] | 0) + $tsize$798$i;
    $131 = $tbase$799$i + 8 | 0;
    $add$ptr4$i28$i = $tbase$799$i + (($131 & 7 | 0) == 0 ? 0 : 0 - $131 & 7) | 0;
    $132 = $add$ptr227$i + 8 | 0;
    $add$ptr16$i$i = $add$ptr227$i + (($132 & 7 | 0) == 0 ? 0 : 0 - $132 & 7) | 0;
    $add$ptr17$i$i = $add$ptr4$i28$i + $nb$0 | 0;
    $sub18$i$i = $add$ptr16$i$i - $add$ptr4$i28$i - $nb$0 | 0;
    HEAP32[$add$ptr4$i28$i + 4 >> 2] = $nb$0 | 3;
    L317 : do if (($114 | 0) == ($add$ptr16$i$i | 0)) {
     $add$i$i = (HEAP32[15414] | 0) + $sub18$i$i | 0;
     HEAP32[15414] = $add$i$i;
     HEAP32[15417] = $add$ptr17$i$i;
     HEAP32[$add$ptr17$i$i + 4 >> 2] = $add$i$i | 1;
    } else {
     if ((HEAP32[15416] | 0) == ($add$ptr16$i$i | 0)) {
      $add26$i$i = (HEAP32[15413] | 0) + $sub18$i$i | 0;
      HEAP32[15413] = $add26$i$i;
      HEAP32[15416] = $add$ptr17$i$i;
      HEAP32[$add$ptr17$i$i + 4 >> 2] = $add26$i$i | 1;
      HEAP32[$add$ptr17$i$i + $add26$i$i >> 2] = $add26$i$i;
      break;
     }
     $136 = HEAP32[$add$ptr16$i$i + 4 >> 2] | 0;
     if (($136 & 3 | 0) == 1) {
      $and37$i$i = $136 & -8;
      $shr$i36$i = $136 >>> 3;
      L325 : do if ($136 >>> 0 < 256) {
       $137 = HEAP32[$add$ptr16$i$i + 8 >> 2] | 0;
       $138 = HEAP32[$add$ptr16$i$i + 12 >> 2] | 0;
       $arrayidx$i39$i = 61684 + ($shr$i36$i << 1 << 2) | 0;
       do if (($137 | 0) != ($arrayidx$i39$i | 0)) {
        if ($139 >>> 0 > $137 >>> 0) _abort();
        if ((HEAP32[$137 + 12 >> 2] | 0) == ($add$ptr16$i$i | 0)) break;
        _abort();
       } while (0);
       if (($138 | 0) == ($137 | 0)) {
        HEAP32[15411] = HEAP32[15411] & ~(1 << $shr$i36$i);
        break;
       }
       do if (($138 | 0) == ($arrayidx$i39$i | 0)) $fd68$pre$phi$i$iZ2D = $138 + 8 | 0; else {
        if ($139 >>> 0 > $138 >>> 0) _abort();
        $fd59$i$i = $138 + 8 | 0;
        if ((HEAP32[$fd59$i$i >> 2] | 0) == ($add$ptr16$i$i | 0)) {
         $fd68$pre$phi$i$iZ2D = $fd59$i$i;
         break;
        }
        _abort();
       } while (0);
       HEAP32[$137 + 12 >> 2] = $138;
       HEAP32[$fd68$pre$phi$i$iZ2D >> 2] = $137;
      } else {
       $143 = HEAP32[$add$ptr16$i$i + 24 >> 2] | 0;
       $144 = HEAP32[$add$ptr16$i$i + 12 >> 2] | 0;
       do if (($144 | 0) == ($add$ptr16$i$i | 0)) {
        $child$i$i = $add$ptr16$i$i + 16 | 0;
        $arrayidx96$i$i = $child$i$i + 4 | 0;
        $148 = HEAP32[$arrayidx96$i$i >> 2] | 0;
        if (!$148) {
         $149 = HEAP32[$child$i$i >> 2] | 0;
         if (!$149) {
          $R$3$i$i = 0;
          break;
         } else {
          $R$1$i$i$ph = $149;
          $RP$1$i$i$ph = $child$i$i;
         }
        } else {
         $R$1$i$i$ph = $148;
         $RP$1$i$i$ph = $arrayidx96$i$i;
        }
        $R$1$i$i = $R$1$i$i$ph;
        $RP$1$i$i = $RP$1$i$i$ph;
        while (1) {
         $arrayidx103$i$i = $R$1$i$i + 20 | 0;
         $150 = HEAP32[$arrayidx103$i$i >> 2] | 0;
         if (!$150) {
          $arrayidx107$i$i = $R$1$i$i + 16 | 0;
          $151 = HEAP32[$arrayidx107$i$i >> 2] | 0;
          if (!$151) break; else {
           $R$1$i$i$be = $151;
           $RP$1$i$i$be = $arrayidx107$i$i;
          }
         } else {
          $R$1$i$i$be = $150;
          $RP$1$i$i$be = $arrayidx103$i$i;
         }
         $R$1$i$i = $R$1$i$i$be;
         $RP$1$i$i = $RP$1$i$i$be;
        }
        if ($139 >>> 0 > $RP$1$i$i >>> 0) _abort(); else {
         HEAP32[$RP$1$i$i >> 2] = 0;
         $R$3$i$i = $R$1$i$i;
         break;
        }
       } else {
        $145 = HEAP32[$add$ptr16$i$i + 8 >> 2] | 0;
        if ($139 >>> 0 > $145 >>> 0) _abort();
        $bk82$i$i = $145 + 12 | 0;
        if ((HEAP32[$bk82$i$i >> 2] | 0) != ($add$ptr16$i$i | 0)) _abort();
        $fd85$i$i = $144 + 8 | 0;
        if ((HEAP32[$fd85$i$i >> 2] | 0) == ($add$ptr16$i$i | 0)) {
         HEAP32[$bk82$i$i >> 2] = $144;
         HEAP32[$fd85$i$i >> 2] = $145;
         $R$3$i$i = $144;
         break;
        } else _abort();
       } while (0);
       if (!$143) break;
       $152 = HEAP32[$add$ptr16$i$i + 28 >> 2] | 0;
       $arrayidx123$i$i = 61948 + ($152 << 2) | 0;
       do if ((HEAP32[$arrayidx123$i$i >> 2] | 0) == ($add$ptr16$i$i | 0)) {
        HEAP32[$arrayidx123$i$i >> 2] = $R$3$i$i;
        if ($R$3$i$i | 0) break;
        HEAP32[15412] = HEAP32[15412] & ~(1 << $152);
        break L325;
       } else if ((HEAP32[15415] | 0) >>> 0 > $143 >>> 0) _abort(); else {
        $arrayidx143$i$i = $143 + 16 | 0;
        HEAP32[((HEAP32[$arrayidx143$i$i >> 2] | 0) == ($add$ptr16$i$i | 0) ? $arrayidx143$i$i : $143 + 20 | 0) >> 2] = $R$3$i$i;
        if (!$R$3$i$i) break L325; else break;
       } while (0);
       $157 = HEAP32[15415] | 0;
       if ($157 >>> 0 > $R$3$i$i >>> 0) _abort();
       HEAP32[$R$3$i$i + 24 >> 2] = $143;
       $child166$i$i = $add$ptr16$i$i + 16 | 0;
       $158 = HEAP32[$child166$i$i >> 2] | 0;
       do if ($158 | 0) if ($157 >>> 0 > $158 >>> 0) _abort(); else {
        HEAP32[$R$3$i$i + 16 >> 2] = $158;
        HEAP32[$158 + 24 >> 2] = $R$3$i$i;
        break;
       } while (0);
       $159 = HEAP32[$child166$i$i + 4 >> 2] | 0;
       if (!$159) break;
       if ((HEAP32[15415] | 0) >>> 0 > $159 >>> 0) _abort(); else {
        HEAP32[$R$3$i$i + 20 >> 2] = $159;
        HEAP32[$159 + 24 >> 2] = $R$3$i$i;
        break;
       }
      } while (0);
      $oldfirst$0$i$i = $add$ptr16$i$i + $and37$i$i | 0;
      $qsize$0$i$i = $and37$i$i + $sub18$i$i | 0;
     } else {
      $oldfirst$0$i$i = $add$ptr16$i$i;
      $qsize$0$i$i = $sub18$i$i;
     }
     $head208$i$i = $oldfirst$0$i$i + 4 | 0;
     HEAP32[$head208$i$i >> 2] = HEAP32[$head208$i$i >> 2] & -2;
     HEAP32[$add$ptr17$i$i + 4 >> 2] = $qsize$0$i$i | 1;
     HEAP32[$add$ptr17$i$i + $qsize$0$i$i >> 2] = $qsize$0$i$i;
     $shr214$i$i = $qsize$0$i$i >>> 3;
     if ($qsize$0$i$i >>> 0 < 256) {
      $arrayidx223$i$i = 61684 + ($shr214$i$i << 1 << 2) | 0;
      $162 = HEAP32[15411] | 0;
      $shl226$i$i = 1 << $shr214$i$i;
      do if (!($162 & $shl226$i$i)) {
       HEAP32[15411] = $162 | $shl226$i$i;
       $$pre$phi$i48$iZ2D = $arrayidx223$i$i + 8 | 0;
       $F224$0$i$i = $arrayidx223$i$i;
      } else {
       $163 = $arrayidx223$i$i + 8 | 0;
       $164 = HEAP32[$163 >> 2] | 0;
       if ((HEAP32[15415] | 0) >>> 0 <= $164 >>> 0) {
        $$pre$phi$i48$iZ2D = $163;
        $F224$0$i$i = $164;
        break;
       }
       _abort();
      } while (0);
      HEAP32[$$pre$phi$i48$iZ2D >> 2] = $add$ptr17$i$i;
      HEAP32[$F224$0$i$i + 12 >> 2] = $add$ptr17$i$i;
      HEAP32[$add$ptr17$i$i + 8 >> 2] = $F224$0$i$i;
      HEAP32[$add$ptr17$i$i + 12 >> 2] = $arrayidx223$i$i;
      break;
     }
     $shr253$i$i = $qsize$0$i$i >>> 8;
     do if (!$shr253$i$i) $I252$0$i$i = 0; else {
      if ($qsize$0$i$i >>> 0 > 16777215) {
       $I252$0$i$i = 31;
       break;
      }
      $and264$i$i = ($shr253$i$i + 1048320 | 0) >>> 16 & 8;
      $shl265$i$i = $shr253$i$i << $and264$i$i;
      $and268$i$i = ($shl265$i$i + 520192 | 0) >>> 16 & 4;
      $shl270$i$i = $shl265$i$i << $and268$i$i;
      $and273$i$i = ($shl270$i$i + 245760 | 0) >>> 16 & 2;
      $add278$i$i = 14 - ($and268$i$i | $and264$i$i | $and273$i$i) + ($shl270$i$i << $and273$i$i >>> 15) | 0;
      $I252$0$i$i = $qsize$0$i$i >>> ($add278$i$i + 7 | 0) & 1 | $add278$i$i << 1;
     } while (0);
     $arrayidx287$i$i = 61948 + ($I252$0$i$i << 2) | 0;
     HEAP32[$add$ptr17$i$i + 28 >> 2] = $I252$0$i$i;
     $child289$i$i = $add$ptr17$i$i + 16 | 0;
     HEAP32[$child289$i$i + 4 >> 2] = 0;
     HEAP32[$child289$i$i >> 2] = 0;
     $166 = HEAP32[15412] | 0;
     $shl294$i$i = 1 << $I252$0$i$i;
     if (!($166 & $shl294$i$i)) {
      HEAP32[15412] = $166 | $shl294$i$i;
      HEAP32[$arrayidx287$i$i >> 2] = $add$ptr17$i$i;
      HEAP32[$add$ptr17$i$i + 24 >> 2] = $arrayidx287$i$i;
      HEAP32[$add$ptr17$i$i + 12 >> 2] = $add$ptr17$i$i;
      HEAP32[$add$ptr17$i$i + 8 >> 2] = $add$ptr17$i$i;
      break;
     }
     $167 = HEAP32[$arrayidx287$i$i >> 2] | 0;
     L410 : do if ((HEAP32[$167 + 4 >> 2] & -8 | 0) == ($qsize$0$i$i | 0)) $T$0$lcssa$i50$i = $167; else {
      $K305$010$i$i = $qsize$0$i$i << (($I252$0$i$i | 0) == 31 ? 0 : 25 - ($I252$0$i$i >>> 1) | 0);
      $T$09$i$i = $167;
      while (1) {
       $arrayidx325$i$i = $T$09$i$i + 16 + ($K305$010$i$i >>> 31 << 2) | 0;
       $169 = HEAP32[$arrayidx325$i$i >> 2] | 0;
       if (!$169) break;
       if ((HEAP32[$169 + 4 >> 2] & -8 | 0) == ($qsize$0$i$i | 0)) {
        $T$0$lcssa$i50$i = $169;
        break L410;
       } else {
        $K305$010$i$i = $K305$010$i$i << 1;
        $T$09$i$i = $169;
       }
      }
      if ((HEAP32[15415] | 0) >>> 0 > $arrayidx325$i$i >>> 0) _abort(); else {
       HEAP32[$arrayidx325$i$i >> 2] = $add$ptr17$i$i;
       HEAP32[$add$ptr17$i$i + 24 >> 2] = $T$09$i$i;
       HEAP32[$add$ptr17$i$i + 12 >> 2] = $add$ptr17$i$i;
       HEAP32[$add$ptr17$i$i + 8 >> 2] = $add$ptr17$i$i;
       break L317;
      }
     } while (0);
     $fd344$i$i = $T$0$lcssa$i50$i + 8 | 0;
     $172 = HEAP32[$fd344$i$i >> 2] | 0;
     $173 = HEAP32[15415] | 0;
     if ($173 >>> 0 <= $172 >>> 0 & $173 >>> 0 <= $T$0$lcssa$i50$i >>> 0) {
      HEAP32[$172 + 12 >> 2] = $add$ptr17$i$i;
      HEAP32[$fd344$i$i >> 2] = $add$ptr17$i$i;
      HEAP32[$add$ptr17$i$i + 8 >> 2] = $172;
      HEAP32[$add$ptr17$i$i + 12 >> 2] = $T$0$lcssa$i50$i;
      HEAP32[$add$ptr17$i$i + 24 >> 2] = 0;
      break;
     } else _abort();
    } while (0);
    $retval$0 = $add$ptr4$i28$i + 8 | 0;
    STACKTOP = sp;
    return $retval$0 | 0;
   }
   $sp$0$i$i$i = 62092;
   while (1) {
    $175 = HEAP32[$sp$0$i$i$i >> 2] | 0;
    if ($175 >>> 0 <= $114 >>> 0) {
     $add$ptr$i$i$i = $175 + (HEAP32[$sp$0$i$i$i + 4 >> 2] | 0) | 0;
     if ($add$ptr$i$i$i >>> 0 > $114 >>> 0) break;
    }
    $sp$0$i$i$i = HEAP32[$sp$0$i$i$i + 8 >> 2] | 0;
   }
   $add$ptr2$i$i = $add$ptr$i$i$i + -47 | 0;
   $178 = $add$ptr2$i$i + 8 | 0;
   $add$ptr7$i$i = $add$ptr2$i$i + (($178 & 7 | 0) == 0 ? 0 : 0 - $178 & 7) | 0;
   $add$ptr81$i$i = $114 + 16 | 0;
   $cond13$i$i = $add$ptr7$i$i >>> 0 < $add$ptr81$i$i >>> 0 ? $114 : $add$ptr7$i$i;
   $add$ptr14$i$i = $cond13$i$i + 8 | 0;
   $sub16$i$i = $tsize$798$i + -40 | 0;
   $179 = $tbase$799$i + 8 | 0;
   $cond$i$i$i = ($179 & 7 | 0) == 0 ? 0 : 0 - $179 & 7;
   $add$ptr4$i$i$i = $tbase$799$i + $cond$i$i$i | 0;
   $sub5$i$i$i = $sub16$i$i - $cond$i$i$i | 0;
   HEAP32[15417] = $add$ptr4$i$i$i;
   HEAP32[15414] = $sub5$i$i$i;
   HEAP32[$add$ptr4$i$i$i + 4 >> 2] = $sub5$i$i$i | 1;
   HEAP32[$tbase$799$i + $sub16$i$i + 4 >> 2] = 40;
   HEAP32[15418] = HEAP32[15533];
   $head$i$i = $cond13$i$i + 4 | 0;
   HEAP32[$head$i$i >> 2] = 27;
   HEAP32[$add$ptr14$i$i >> 2] = HEAP32[15523];
   HEAP32[$add$ptr14$i$i + 4 >> 2] = HEAP32[15524];
   HEAP32[$add$ptr14$i$i + 8 >> 2] = HEAP32[15525];
   HEAP32[$add$ptr14$i$i + 12 >> 2] = HEAP32[15526];
   HEAP32[15523] = $tbase$799$i;
   HEAP32[15524] = $tsize$798$i;
   HEAP32[15526] = 0;
   HEAP32[15525] = $add$ptr14$i$i;
   $181 = $cond13$i$i + 24 | 0;
   do {
    $181$looptemp = $181;
    $181 = $181 + 4 | 0;
    HEAP32[$181 >> 2] = 7;
   } while (($181$looptemp + 8 | 0) >>> 0 < $add$ptr$i$i$i >>> 0);
   if (($cond13$i$i | 0) != ($114 | 0)) {
    $sub$ptr$sub$i$i = $cond13$i$i - $114 | 0;
    HEAP32[$head$i$i >> 2] = HEAP32[$head$i$i >> 2] & -2;
    HEAP32[$114 + 4 >> 2] = $sub$ptr$sub$i$i | 1;
    HEAP32[$cond13$i$i >> 2] = $sub$ptr$sub$i$i;
    $shr$i$i = $sub$ptr$sub$i$i >>> 3;
    if ($sub$ptr$sub$i$i >>> 0 < 256) {
     $arrayidx$i$i = 61684 + ($shr$i$i << 1 << 2) | 0;
     $183 = HEAP32[15411] | 0;
     $shl39$i$i = 1 << $shr$i$i;
     if (!($183 & $shl39$i$i)) {
      HEAP32[15411] = $183 | $shl39$i$i;
      $$pre$phi$i$iZ2D = $arrayidx$i$i + 8 | 0;
      $F$0$i$i = $arrayidx$i$i;
     } else {
      $184 = $arrayidx$i$i + 8 | 0;
      $185 = HEAP32[$184 >> 2] | 0;
      if ((HEAP32[15415] | 0) >>> 0 > $185 >>> 0) _abort(); else {
       $$pre$phi$i$iZ2D = $184;
       $F$0$i$i = $185;
      }
     }
     HEAP32[$$pre$phi$i$iZ2D >> 2] = $114;
     HEAP32[$F$0$i$i + 12 >> 2] = $114;
     HEAP32[$114 + 8 >> 2] = $F$0$i$i;
     HEAP32[$114 + 12 >> 2] = $arrayidx$i$i;
     break;
    }
    $shr58$i$i = $sub$ptr$sub$i$i >>> 8;
    if (!$shr58$i$i) $I57$0$i$i = 0; else if ($sub$ptr$sub$i$i >>> 0 > 16777215) $I57$0$i$i = 31; else {
     $and69$i$i = ($shr58$i$i + 1048320 | 0) >>> 16 & 8;
     $shl70$i$i = $shr58$i$i << $and69$i$i;
     $and73$i$i = ($shl70$i$i + 520192 | 0) >>> 16 & 4;
     $shl75$i$i = $shl70$i$i << $and73$i$i;
     $and78$i$i = ($shl75$i$i + 245760 | 0) >>> 16 & 2;
     $add83$i$i = 14 - ($and73$i$i | $and69$i$i | $and78$i$i) + ($shl75$i$i << $and78$i$i >>> 15) | 0;
     $I57$0$i$i = $sub$ptr$sub$i$i >>> ($add83$i$i + 7 | 0) & 1 | $add83$i$i << 1;
    }
    $arrayidx91$i$i = 61948 + ($I57$0$i$i << 2) | 0;
    HEAP32[$114 + 28 >> 2] = $I57$0$i$i;
    HEAP32[$114 + 20 >> 2] = 0;
    HEAP32[$add$ptr81$i$i >> 2] = 0;
    $187 = HEAP32[15412] | 0;
    $shl95$i$i = 1 << $I57$0$i$i;
    if (!($187 & $shl95$i$i)) {
     HEAP32[15412] = $187 | $shl95$i$i;
     HEAP32[$arrayidx91$i$i >> 2] = $114;
     HEAP32[$114 + 24 >> 2] = $arrayidx91$i$i;
     HEAP32[$114 + 12 >> 2] = $114;
     HEAP32[$114 + 8 >> 2] = $114;
     break;
    }
    $188 = HEAP32[$arrayidx91$i$i >> 2] | 0;
    L451 : do if ((HEAP32[$188 + 4 >> 2] & -8 | 0) == ($sub$ptr$sub$i$i | 0)) $T$0$lcssa$i$i = $188; else {
     $K105$011$i$i = $sub$ptr$sub$i$i << (($I57$0$i$i | 0) == 31 ? 0 : 25 - ($I57$0$i$i >>> 1) | 0);
     $T$010$i$i = $188;
     while (1) {
      $arrayidx126$i$i = $T$010$i$i + 16 + ($K105$011$i$i >>> 31 << 2) | 0;
      $190 = HEAP32[$arrayidx126$i$i >> 2] | 0;
      if (!$190) break;
      if ((HEAP32[$190 + 4 >> 2] & -8 | 0) == ($sub$ptr$sub$i$i | 0)) {
       $T$0$lcssa$i$i = $190;
       break L451;
      } else {
       $K105$011$i$i = $K105$011$i$i << 1;
       $T$010$i$i = $190;
      }
     }
     if ((HEAP32[15415] | 0) >>> 0 > $arrayidx126$i$i >>> 0) _abort(); else {
      HEAP32[$arrayidx126$i$i >> 2] = $114;
      HEAP32[$114 + 24 >> 2] = $T$010$i$i;
      HEAP32[$114 + 12 >> 2] = $114;
      HEAP32[$114 + 8 >> 2] = $114;
      break L294;
     }
    } while (0);
    $fd148$i$i = $T$0$lcssa$i$i + 8 | 0;
    $193 = HEAP32[$fd148$i$i >> 2] | 0;
    $194 = HEAP32[15415] | 0;
    if ($194 >>> 0 <= $193 >>> 0 & $194 >>> 0 <= $T$0$lcssa$i$i >>> 0) {
     HEAP32[$193 + 12 >> 2] = $114;
     HEAP32[$fd148$i$i >> 2] = $114;
     HEAP32[$114 + 8 >> 2] = $193;
     HEAP32[$114 + 12 >> 2] = $T$0$lcssa$i$i;
     HEAP32[$114 + 24 >> 2] = 0;
     break;
    } else _abort();
   }
  } while (0);
  $196 = HEAP32[15414] | 0;
  if ($196 >>> 0 > $nb$0 >>> 0) {
   $sub260$i = $196 - $nb$0 | 0;
   HEAP32[15414] = $sub260$i;
   $197 = HEAP32[15417] | 0;
   $add$ptr262$i = $197 + $nb$0 | 0;
   HEAP32[15417] = $add$ptr262$i;
   HEAP32[$add$ptr262$i + 4 >> 2] = $sub260$i | 1;
   HEAP32[$197 + 4 >> 2] = $nb$0 | 3;
   $retval$0 = $197 + 8 | 0;
   STACKTOP = sp;
   return $retval$0 | 0;
  }
 }
 HEAP32[(___errno_location() | 0) >> 2] = 48;
 $retval$0 = 0;
 STACKTOP = sp;
 return $retval$0 | 0;
}

function __ZNSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIcEERNS_10unique_ptrIcPFvPvEEERPcSM_($__b, $__e, $__intl, $__loc, $__flags, $__err, $__neg, $__ct, $__wb, $__wn, $__we) {
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__intl = $__intl | 0;
 $__loc = $__loc | 0;
 $__flags = $__flags | 0;
 $__err = $__err | 0;
 $__neg = $__neg | 0;
 $__ct = $__ct | 0;
 $__wb = $__wb | 0;
 $__wn = $__wn | 0;
 $__we = $__we | 0;
 var $100 = 0, $105 = 0, $106 = 0, $108 = 0, $109 = 0, $110 = 0, $113 = 0, $114 = 0, $115 = 0, $119 = 0, $120 = 0, $121 = 0, $123 = 0, $126 = 0, $128 = 0, $129 = 0, $130 = 0, $134 = 0, $135 = 0, $139 = 0, $14 = 0, $140 = 0, $145 = 0, $146 = 0, $15 = 0, $150 = 0, $154 = 0, $155 = 0, $159 = 0, $160 = 0, $164 = 0, $165 = 0, $171 = 0, $173 = 0, $174 = 0, $177 = 0, $179 = 0, $180 = 0, $181 = 0, $186 = 0, $188 = 0, $190 = 0, $191 = 0, $195 = 0, $196 = 0, $200 = 0, $201 = 0, $207 = 0, $208 = 0, $21 = 0, $213 = 0, $214 = 0, $218 = 0, $219 = 0, $22 = 0, $223 = 0, $224 = 0, $233 = 0, $234 = 0, $238 = 0, $240 = 0, $241 = 0, $248 = 0, $250 = 0, $251 = 0, $255 = 0, $256 = 0, $260 = 0, $261 = 0, $269 = 0, $27 = 0, $270 = 0, $274 = 0, $275 = 0, $278 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $3 = 0, $32 = 0, $33 = 0, $37 = 0, $38 = 0, $4 = 0, $44 = 0, $45 = 0, $49 = 0, $51 = 0, $53 = 0, $54 = 0, $61 = 0, $62 = 0, $66 = 0, $71 = 0, $72 = 0, $76 = 0, $8 = 0, $83 = 0, $84 = 0, $88 = 0, $9 = 0, $95 = 0, $96 = 0, $__dp = 0, $__et = 0, $__fd = 0, $__gb = 0, $__gbuf = 0, $__ge = 0, $__gn = 0, $__grp = 0, $__i$0 = 0, $__i$0$i$i = 0, $__i$0$i$i100 = 0, $__i$0$i$i108 = 0, $__i$0$i$i116 = 0, $__i$0$i$i124 = 0, $__ng$0 = 0, $__ng$2$ph = 0, $__ninp_$i$i = 0, $__ninp_$i$i147 = 0, $__ninp_$i$i224 = 0, $__ninp_$i$i294 = 0, $__ninp_$i$i324 = 0, $__ninp_$i$i367 = 0, $__ninp_$i$i410 = 0, $__ninp_$i$i652 = 0, $__ninp_$i$i755 = 0, $__ninp_$i$i824 = 0, $__ninp_$i$i914 = 0, $__nsn = 0, $__p$0 = 0, $__pat = 0, $__psn = 0, $__size_$i$i = 0, $__size_$i$i$i431 = 0, $__size_$i$i244 = 0, $__size_$i$i464 = 0, $__size_$i$i746 = 0, $__size_$i$i927 = 0, $__size_$i3$i = 0, $__size_$i3$i$i583 = 0, $__size_$i3$i246 = 0, $__size_$i3$i466 = 0, $__size_$i3$i748 = 0, $__size_$i3$i929 = 0, $__spaces = 0, $__sym = 0, $__sym_curr_char$sroa$0$0$ptr = 0, $__sym_space_end$sroa$0$0 = 0, $__sym_space_end$sroa$0$1 = 0, $__tab_$i216 = 0, $__trailing_sign$0 = 0, $__trailing_sign$1 = 0, $__ts = 0, $__we$addr = 0, $add$ptr$i = 0, $add$ptr$i497 = 0, $add$ptr$i497962 = 0, $add$ptr$i552$pre$phiZZZ2D = 0, $agg$tmp26$sroa$0$0$ptr$i = 0, $arrayidx97 = 0, $cmp$i$i282 = 0, $cmp$i$i369 = 0, $cmp102959 = 0, $cmp26 = 0, $cond$i$i$i = 0, $cond$i$i437 = 0, $cond$i$i437992 = 0, $cond$i$i437995 = 0, $cond$i242 = 0, $cond$i250 = 0, $cond$i933 = 0, $conv$i$i468 = 0, $conv$i290 = 0, $conv$i734 = 0, $retval$0$i$i = 0, $retval$0$i$i$i$i = 0, $retval$0$i$i$i$i171 = 0, $retval$0$i$i$i$i511 = 0, $retval$0$i$i$i$i607 = 0, $retval$0$i$i$i$i693 = 0, $retval$0$i$i$i$i779 = 0, $retval$0$i$i$i$i847 = 0, $retval$0$i$i13$i$i = 0, $retval$0$i$i13$i$i192 = 0, $retval$0$i$i13$i$i532 = 0, $retval$0$i$i13$i$i628 = 0, $retval$0$i$i13$i$i714 = 0, $retval$0$i$i13$i$i800 = 0, $retval$0$i$i13$i$i868 = 0, $retval$0$i$i157 = 0, $retval$0$i$i211 = 0, $retval$0$i$i234 = 0, $retval$0$i$i289 = 0, $retval$0$i$i354 = 0, $retval$0$i$i397 = 0, $retval$0$i$i483 = 0, $retval$0$i$i647 = 0, $retval$0$i$i733 = 0, $retval$0$i$i820 = 0, $retval$0$i$i888 = 0, $retval$0$i$i910 = 0, $retval$10 = 0, $sub$ptr$sub$i = 0, $tobool$i$i$i432 = 0, $tobool$i$i$i432991 = 0, $tobool$i$i$i432994 = 0, $tobool$i$i$i581 = 0, $tobool$i$i$i667 = 0, $tobool$i$i465 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 512 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(512);
 $__we$addr = sp + 488 | 0;
 $__gbuf = sp;
 $__gb = sp + 480 | 0;
 $__gn = sp + 472 | 0;
 $__ge = sp + 468 | 0;
 $__pat = sp + 496 | 0;
 $__dp = sp + 493 | 0;
 $__ts = sp + 492 | 0;
 $__grp = sp + 456 | 0;
 $__sym = sp + 444 | 0;
 $__psn = sp + 432 | 0;
 $__nsn = sp + 420 | 0;
 $__spaces = sp + 408 | 0;
 $__fd = sp + 404 | 0;
 $__et = sp + 400 | 0;
 HEAP32[$__we$addr >> 2] = $__we;
 HEAP32[$__gb >> 2] = $__gbuf;
 HEAP32[$__gb + 4 >> 2] = 153;
 HEAP32[$__gn >> 2] = $__gbuf;
 HEAP32[$__ge >> 2] = $__gbuf + 400;
 HEAP32[$__grp >> 2] = 0;
 HEAP32[$__grp + 4 >> 2] = 0;
 HEAP32[$__grp + 8 >> 2] = 0;
 $__i$0$i$i = 0;
 while (1) {
  if (($__i$0$i$i | 0) == 3) break;
  HEAP32[$__grp + ($__i$0$i$i << 2) >> 2] = 0;
  $__i$0$i$i = $__i$0$i$i + 1 | 0;
 }
 HEAP32[$__sym >> 2] = 0;
 HEAP32[$__sym + 4 >> 2] = 0;
 HEAP32[$__sym + 8 >> 2] = 0;
 $__i$0$i$i100 = 0;
 while (1) {
  if (($__i$0$i$i100 | 0) == 3) break;
  HEAP32[$__sym + ($__i$0$i$i100 << 2) >> 2] = 0;
  $__i$0$i$i100 = $__i$0$i$i100 + 1 | 0;
 }
 HEAP32[$__psn >> 2] = 0;
 HEAP32[$__psn + 4 >> 2] = 0;
 HEAP32[$__psn + 8 >> 2] = 0;
 $__i$0$i$i108 = 0;
 while (1) {
  if (($__i$0$i$i108 | 0) == 3) break;
  HEAP32[$__psn + ($__i$0$i$i108 << 2) >> 2] = 0;
  $__i$0$i$i108 = $__i$0$i$i108 + 1 | 0;
 }
 HEAP32[$__nsn >> 2] = 0;
 HEAP32[$__nsn + 4 >> 2] = 0;
 HEAP32[$__nsn + 8 >> 2] = 0;
 $__i$0$i$i116 = 0;
 while (1) {
  if (($__i$0$i$i116 | 0) == 3) break;
  HEAP32[$__nsn + ($__i$0$i$i116 << 2) >> 2] = 0;
  $__i$0$i$i116 = $__i$0$i$i116 + 1 | 0;
 }
 HEAP32[$__spaces >> 2] = 0;
 HEAP32[$__spaces + 4 >> 2] = 0;
 HEAP32[$__spaces + 8 >> 2] = 0;
 $__i$0$i$i124 = 0;
 while (1) {
  if (($__i$0$i$i124 | 0) == 3) break;
  HEAP32[$__spaces + ($__i$0$i$i124 << 2) >> 2] = 0;
  $__i$0$i$i124 = $__i$0$i$i124 + 1 | 0;
 }
 __ZNSt3__211__money_getIcE13__gather_infoEbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_SF_Ri($__intl, $__loc, $__pat, $__dp, $__ts, $__grp, $__sym, $__psn, $__nsn, $__fd);
 HEAP32[$__wn >> 2] = HEAP32[$__wb >> 2];
 $__tab_$i216 = $__ct + 8 | 0;
 $__size_$i$i = $__psn + 11 | 0;
 $__size_$i3$i = $__psn + 4 | 0;
 $__size_$i$i244 = $__nsn + 11 | 0;
 $__size_$i3$i246 = $__nsn + 4 | 0;
 $__size_$i$i746 = $__grp + 11 | 0;
 $__size_$i3$i748 = $__grp + 4 | 0;
 $cmp102959 = ($__flags & 512 | 0) != 0;
 $__size_$i$i$i431 = $__sym + 11 | 0;
 $arrayidx97 = $__pat + 3 | 0;
 $__size_$i3$i$i583 = $__sym + 4 | 0;
 $__size_$i$i464 = $__spaces + 11 | 0;
 $__size_$i3$i466 = $__spaces + 4 | 0;
 $__p$0 = 0;
 $__trailing_sign$0 = 0;
 L21 : while (1) {
  if ($__p$0 >>> 0 >= 4) {
   label = 243;
   break;
  }
  $3 = HEAP32[$__b >> 2] | 0;
  do if (!$3) $280 = 1; else {
   $4 = HEAP32[$3 + 12 >> 2] | 0;
   if (($4 | 0) == (HEAP32[$3 + 16 >> 2] | 0)) $retval$0$i$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$3 >> 2] | 0) + 36 >> 2] & 127]($3) | 0; else $retval$0$i$i$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$4 >> 0] | 0) | 0;
   if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i$i$i, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
    HEAP32[$__b >> 2] = 0;
    $280 = 1;
    break;
   } else {
    $280 = (HEAP32[$__b >> 2] | 0) == 0;
    break;
   }
  } while (0);
  $8 = HEAP32[$__e >> 2] | 0;
  do if (!$8) label = 31; else {
   $9 = HEAP32[$8 + 12 >> 2] | 0;
   if (($9 | 0) == (HEAP32[$8 + 16 >> 2] | 0)) $retval$0$i$i13$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$8 >> 2] | 0) + 36 >> 2] & 127]($8) | 0; else $retval$0$i$i13$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$9 >> 0] | 0) | 0;
   if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i13$i$i, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
    HEAP32[$__e >> 2] = 0;
    label = 31;
    break;
   } else if ($280) {
    $281 = $8;
    break;
   } else {
    label = 243;
    break L21;
   }
  } while (0);
  if ((label | 0) == 31) {
   label = 0;
   if ($280) {
    label = 243;
    break;
   } else $281 = 0;
  }
  L46 : do switch (HEAP8[$__pat + $__p$0 >> 0] | 0) {
  case 1:
   {
    if (($__p$0 | 0) == 3) $__trailing_sign$1 = $__trailing_sign$0; else {
     $14 = HEAP32[$__b >> 2] | 0;
     $15 = HEAP32[$14 + 12 >> 2] | 0;
     if (($15 | 0) == (HEAP32[$14 + 16 >> 2] | 0)) $retval$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$14 >> 2] | 0) + 36 >> 2] & 127]($14) | 0; else $retval$0$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$15 >> 0] | 0) | 0;
     if (($retval$0$i$i & 255) << 24 >> 24 <= -1) {
      label = 45;
      break L21;
     }
     if (!(HEAP16[(HEAP32[$__tab_$i216 >> 2] | 0) + ($retval$0$i$i << 24 >> 24 << 1) >> 1] & 8192)) {
      label = 45;
      break L21;
     }
     $21 = HEAP32[$__b >> 2] | 0;
     $__ninp_$i$i147 = $21 + 12 | 0;
     $22 = HEAP32[$__ninp_$i$i147 >> 2] | 0;
     if (($22 | 0) == (HEAP32[$21 + 16 >> 2] | 0)) $retval$0$i$i157 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$21 >> 2] | 0) + 40 >> 2] & 127]($21) | 0; else {
      HEAP32[$__ninp_$i$i147 >> 2] = $22 + 1;
      $retval$0$i$i157 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$22 >> 0] | 0) | 0;
     }
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($__spaces, $retval$0$i$i157 & 255);
     label = 47;
    }
    break;
   }
  case 0:
   {
    if (($__p$0 | 0) == 3) $__trailing_sign$1 = $__trailing_sign$0; else label = 47;
    break;
   }
  case 3:
   {
    $49 = HEAP8[$__size_$i$i >> 0] | 0;
    $cond$i242 = $49 << 24 >> 24 < 0 ? HEAP32[$__size_$i3$i >> 2] | 0 : $49 & 255;
    $51 = HEAP8[$__size_$i$i244 >> 0] | 0;
    $cond$i250 = $51 << 24 >> 24 < 0 ? HEAP32[$__size_$i3$i246 >> 2] | 0 : $51 & 255;
    if (($cond$i242 | 0) == (0 - $cond$i250 | 0)) $__trailing_sign$1 = $__trailing_sign$0; else {
     $cmp26 = ($cond$i242 | 0) == 0;
     $53 = HEAP32[$__b >> 2] | 0;
     $54 = HEAP32[$53 + 12 >> 2] | 0;
     $cmp$i$i282 = ($54 | 0) == (HEAP32[$53 + 16 >> 2] | 0);
     if ($cmp26 | ($cond$i250 | 0) == 0) {
      if ($cmp$i$i282) $retval$0$i$i289 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$53 >> 2] | 0) + 36 >> 2] & 127]($53) | 0; else $retval$0$i$i289 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$54 >> 0] | 0) | 0;
      $conv$i290 = $retval$0$i$i289 & 255;
      if ($cmp26) {
       if ((HEAP8[((HEAP8[$__size_$i$i244 >> 0] | 0) < 0 ? HEAP32[$__nsn >> 2] | 0 : $__nsn) >> 0] | 0) != $conv$i290 << 24 >> 24) {
        $__trailing_sign$1 = $__trailing_sign$0;
        break L46;
       }
       $71 = HEAP32[$__b >> 2] | 0;
       $__ninp_$i$i324 = $71 + 12 | 0;
       $72 = HEAP32[$__ninp_$i$i324 >> 2] | 0;
       if (($72 | 0) == (HEAP32[$71 + 16 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[$71 >> 2] | 0) + 40 >> 2] & 127]($71) | 0; else {
        HEAP32[$__ninp_$i$i324 >> 2] = $72 + 1;
        __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$72 >> 0] | 0) | 0;
       }
       HEAP8[$__neg >> 0] = 1;
       $76 = HEAP8[$__size_$i$i244 >> 0] | 0;
       $__trailing_sign$1 = ($76 << 24 >> 24 < 0 ? HEAP32[$__size_$i3$i246 >> 2] | 0 : $76 & 255) >>> 0 > 1 ? $__nsn : $__trailing_sign$0;
       break L46;
      }
      if ((HEAP8[((HEAP8[$__size_$i$i >> 0] | 0) < 0 ? HEAP32[$__psn >> 2] | 0 : $__psn) >> 0] | 0) != $conv$i290 << 24 >> 24) {
       HEAP8[$__neg >> 0] = 1;
       $__trailing_sign$1 = $__trailing_sign$0;
       break L46;
      }
      $61 = HEAP32[$__b >> 2] | 0;
      $__ninp_$i$i294 = $61 + 12 | 0;
      $62 = HEAP32[$__ninp_$i$i294 >> 2] | 0;
      if (($62 | 0) == (HEAP32[$61 + 16 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[$61 >> 2] | 0) + 40 >> 2] & 127]($61) | 0; else {
       HEAP32[$__ninp_$i$i294 >> 2] = $62 + 1;
       __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$62 >> 0] | 0) | 0;
      }
      $66 = HEAP8[$__size_$i$i >> 0] | 0;
      $__trailing_sign$1 = ($66 << 24 >> 24 < 0 ? HEAP32[$__size_$i3$i >> 2] | 0 : $66 & 255) >>> 0 > 1 ? $__psn : $__trailing_sign$0;
      break L46;
     }
     if ($cmp$i$i282) $retval$0$i$i354 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$53 >> 2] | 0) + 36 >> 2] & 127]($53) | 0; else $retval$0$i$i354 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$54 >> 0] | 0) | 0;
     $83 = HEAP32[$__b >> 2] | 0;
     $__ninp_$i$i367 = $83 + 12 | 0;
     $84 = HEAP32[$__ninp_$i$i367 >> 2] | 0;
     $cmp$i$i369 = ($84 | 0) == (HEAP32[$83 + 16 >> 2] | 0);
     if ((HEAP8[((HEAP8[$__size_$i$i >> 0] | 0) < 0 ? HEAP32[$__psn >> 2] | 0 : $__psn) >> 0] | 0) == ($retval$0$i$i354 & 255) << 24 >> 24) {
      if ($cmp$i$i369) FUNCTION_TABLE_ii[HEAP32[(HEAP32[$83 >> 2] | 0) + 40 >> 2] & 127]($83) | 0; else {
       HEAP32[$__ninp_$i$i367 >> 2] = $84 + 1;
       __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$84 >> 0] | 0) | 0;
      }
      $88 = HEAP8[$__size_$i$i >> 0] | 0;
      $__trailing_sign$1 = ($88 << 24 >> 24 < 0 ? HEAP32[$__size_$i3$i >> 2] | 0 : $88 & 255) >>> 0 > 1 ? $__psn : $__trailing_sign$0;
      break L46;
     }
     if ($cmp$i$i369) $retval$0$i$i397 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$83 >> 2] | 0) + 36 >> 2] & 127]($83) | 0; else $retval$0$i$i397 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$84 >> 0] | 0) | 0;
     if ((HEAP8[((HEAP8[$__size_$i$i244 >> 0] | 0) < 0 ? HEAP32[$__nsn >> 2] | 0 : $__nsn) >> 0] | 0) != ($retval$0$i$i397 & 255) << 24 >> 24) {
      label = 105;
      break L21;
     }
     $95 = HEAP32[$__b >> 2] | 0;
     $__ninp_$i$i410 = $95 + 12 | 0;
     $96 = HEAP32[$__ninp_$i$i410 >> 2] | 0;
     if (($96 | 0) == (HEAP32[$95 + 16 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[$95 >> 2] | 0) + 40 >> 2] & 127]($95) | 0; else {
      HEAP32[$__ninp_$i$i410 >> 2] = $96 + 1;
      __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$96 >> 0] | 0) | 0;
     }
     HEAP8[$__neg >> 0] = 1;
     $100 = HEAP8[$__size_$i$i244 >> 0] | 0;
     $__trailing_sign$1 = ($100 << 24 >> 24 < 0 ? HEAP32[$__size_$i3$i246 >> 2] | 0 : $100 & 255) >>> 0 > 1 ? $__nsn : $__trailing_sign$0;
    }
    break;
   }
  case 2:
   {
    if ($__p$0 >>> 0 < 2 | ($__trailing_sign$0 | 0) != 0) {
     $108 = HEAP8[$__size_$i$i$i431 >> 0] | 0;
     $tobool$i$i$i432 = $108 << 24 >> 24 < 0;
     $109 = HEAP32[$__sym >> 2] | 0;
     $cond$i$i437 = $tobool$i$i$i432 ? $109 : $__sym;
     $110 = $cond$i$i437;
     if (!$__p$0) {
      $286 = $109;
      $287 = $108;
      $__sym_space_end$sroa$0$1 = $110;
     } else {
      $113 = $108;
      $119 = $110;
      $285 = $109;
      $cond$i$i437995 = $cond$i$i437;
      $tobool$i$i$i432994 = $tobool$i$i$i432;
      label = 110;
     }
    } else {
     if (!($cmp102959 | ($__p$0 | 0) == 2 & (HEAP8[$arrayidx97 >> 0] | 0) != 0)) {
      $__trailing_sign$1 = 0;
      break L46;
     }
     $105 = HEAP8[$__size_$i$i$i431 >> 0] | 0;
     $tobool$i$i$i432991 = $105 << 24 >> 24 < 0;
     $106 = HEAP32[$__sym >> 2] | 0;
     $cond$i$i437992 = $tobool$i$i$i432991 ? $106 : $__sym;
     $113 = $105;
     $119 = $cond$i$i437992;
     $285 = $106;
     $cond$i$i437995 = $cond$i$i437992;
     $tobool$i$i$i432994 = $tobool$i$i$i432991;
     label = 110;
    }
    L109 : do if ((label | 0) == 110) {
     label = 0;
     if ((HEAPU8[$__pat + ($__p$0 + -1) >> 0] | 0) < 2) {
      $add$ptr$i = $cond$i$i437995 + ($tobool$i$i$i432994 ? HEAP32[$__size_$i3$i$i583 >> 2] | 0 : $113 & 255) | 0;
      $__sym_space_end$sroa$0$0 = $119;
      while (1) {
       $114 = $__sym_space_end$sroa$0$0;
       if (($add$ptr$i | 0) == ($114 | 0)) break;
       $115 = HEAP8[$114 >> 0] | 0;
       if ($115 << 24 >> 24 <= -1) break;
       if (!(HEAP16[(HEAP32[$__tab_$i216 >> 2] | 0) + ($115 << 24 >> 24 << 1) >> 1] & 8192)) break;
       $__sym_space_end$sroa$0$0 = $114 + 1 | 0;
      }
      $sub$ptr$sub$i = $__sym_space_end$sroa$0$0 - $119 | 0;
      $120 = HEAP8[$__size_$i$i464 >> 0] | 0;
      $tobool$i$i465 = $120 << 24 >> 24 < 0;
      $121 = HEAP32[$__size_$i3$i466 >> 2] | 0;
      $conv$i$i468 = $120 & 255;
      if ($sub$ptr$sub$i >>> 0 > ($tobool$i$i465 ? $121 : $conv$i$i468) >>> 0) {
       $286 = $285;
       $287 = $113;
       $__sym_space_end$sroa$0$1 = $119;
      } else {
       $add$ptr$i497962 = (HEAP32[$__spaces >> 2] | 0) + $121 | 0;
       $add$ptr$i497 = $__spaces + $conv$i$i468 | 0;
       $add$ptr$i552$pre$phiZZZ2D = $tobool$i$i465 ? $add$ptr$i497962 : $add$ptr$i497;
       $123 = $tobool$i$i465 ? $add$ptr$i497962 + (0 - $sub$ptr$sub$i) | 0 : $add$ptr$i497 + (0 - $sub$ptr$sub$i) | 0;
       $agg$tmp26$sroa$0$0$ptr$i = $cond$i$i437995;
       while (1) {
        if (($123 | 0) == ($add$ptr$i552$pre$phiZZZ2D | 0)) {
         $286 = $285;
         $287 = $113;
         $__sym_space_end$sroa$0$1 = $__sym_space_end$sroa$0$0;
         break L109;
        }
        if ((HEAP8[$123 >> 0] | 0) != (HEAP8[$agg$tmp26$sroa$0$0$ptr$i >> 0] | 0)) {
         $286 = $285;
         $287 = $113;
         $__sym_space_end$sroa$0$1 = $119;
         break L109;
        }
        $123 = $123 + 1 | 0;
        $agg$tmp26$sroa$0$0$ptr$i = $agg$tmp26$sroa$0$0$ptr$i + 1 | 0;
       }
      }
     } else {
      $286 = $285;
      $287 = $113;
      $__sym_space_end$sroa$0$1 = $119;
     }
    } while (0);
    $126 = $287;
    $128 = $286;
    $134 = $281;
    $__sym_curr_char$sroa$0$0$ptr = $__sym_space_end$sroa$0$1;
    L124 : while (1) {
     $tobool$i$i$i581 = $126 << 24 >> 24 < 0;
     if (($__sym_curr_char$sroa$0$0$ptr | 0) == (($tobool$i$i$i581 ? $128 : $__sym) + ($tobool$i$i$i581 ? HEAP32[$__size_$i3$i$i583 >> 2] | 0 : $126 & 255) | 0)) break;
     $129 = HEAP32[$__b >> 2] | 0;
     do if (!$129) $288 = 1; else {
      $130 = HEAP32[$129 + 12 >> 2] | 0;
      if (($130 | 0) == (HEAP32[$129 + 16 >> 2] | 0)) $retval$0$i$i$i$i607 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$129 >> 2] | 0) + 36 >> 2] & 127]($129) | 0; else $retval$0$i$i$i$i607 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$130 >> 0] | 0) | 0;
      if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i$i$i607, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
       HEAP32[$__b >> 2] = 0;
       $288 = 1;
       break;
      } else {
       $288 = (HEAP32[$__b >> 2] | 0) == 0;
       break;
      }
     } while (0);
     do if (!$134) label = 136; else {
      $135 = HEAP32[$134 + 12 >> 2] | 0;
      if (($135 | 0) == (HEAP32[$134 + 16 >> 2] | 0)) $retval$0$i$i13$i$i628 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$134 >> 2] | 0) + 36 >> 2] & 127]($134) | 0; else $retval$0$i$i13$i$i628 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$135 >> 0] | 0) | 0;
      if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i13$i$i628, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
       HEAP32[$__e >> 2] = 0;
       label = 136;
       break;
      } else if ($288) {
       $289 = $134;
       break;
      } else break L124;
     } while (0);
     if ((label | 0) == 136) {
      label = 0;
      if ($288) break; else $289 = 0;
     }
     $139 = HEAP32[$__b >> 2] | 0;
     $140 = HEAP32[$139 + 12 >> 2] | 0;
     if (($140 | 0) == (HEAP32[$139 + 16 >> 2] | 0)) $retval$0$i$i647 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$139 >> 2] | 0) + 36 >> 2] & 127]($139) | 0; else $retval$0$i$i647 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$140 >> 0] | 0) | 0;
     if ((HEAP8[$__sym_curr_char$sroa$0$0$ptr >> 0] | 0) != ($retval$0$i$i647 & 255) << 24 >> 24) break;
     $145 = HEAP32[$__b >> 2] | 0;
     $__ninp_$i$i652 = $145 + 12 | 0;
     $146 = HEAP32[$__ninp_$i$i652 >> 2] | 0;
     if (($146 | 0) == (HEAP32[$145 + 16 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[$145 >> 2] | 0) + 40 >> 2] & 127]($145) | 0; else {
      HEAP32[$__ninp_$i$i652 >> 2] = $146 + 1;
      __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$146 >> 0] | 0) | 0;
     }
     $126 = HEAP8[$__size_$i$i$i431 >> 0] | 0;
     $128 = HEAP32[$__sym >> 2] | 0;
     $134 = $289;
     $__sym_curr_char$sroa$0$0$ptr = $__sym_curr_char$sroa$0$0$ptr + 1 | 0;
    }
    if ($cmp102959) {
     $150 = HEAP8[$__size_$i$i$i431 >> 0] | 0;
     $tobool$i$i$i667 = $150 << 24 >> 24 < 0;
     if (($__sym_curr_char$sroa$0$0$ptr | 0) == (($tobool$i$i$i667 ? HEAP32[$__sym >> 2] | 0 : $__sym) + ($tobool$i$i$i667 ? HEAP32[$__size_$i3$i$i583 >> 2] | 0 : $150 & 255) | 0)) $__trailing_sign$1 = $__trailing_sign$0; else {
      label = 148;
      break L21;
     }
    } else $__trailing_sign$1 = $__trailing_sign$0;
    break;
   }
  case 4:
   {
    $159 = $281;
    $282 = $281;
    $__ng$0 = 0;
    L161 : while (1) {
     $154 = HEAP32[$__b >> 2] | 0;
     do if (!$154) $290 = 1; else {
      $155 = HEAP32[$154 + 12 >> 2] | 0;
      if (($155 | 0) == (HEAP32[$154 + 16 >> 2] | 0)) $retval$0$i$i$i$i693 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$154 >> 2] | 0) + 36 >> 2] & 127]($154) | 0; else $retval$0$i$i$i$i693 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$155 >> 0] | 0) | 0;
      if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i$i$i693, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
       HEAP32[$__b >> 2] = 0;
       $290 = 1;
       break;
      } else {
       $290 = (HEAP32[$__b >> 2] | 0) == 0;
       break;
      }
     } while (0);
     do if (!$159) {
      $291 = $282;
      label = 162;
     } else {
      $160 = HEAP32[$159 + 12 >> 2] | 0;
      if (($160 | 0) == (HEAP32[$159 + 16 >> 2] | 0)) $retval$0$i$i13$i$i714 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$159 >> 2] | 0) + 36 >> 2] & 127]($159) | 0; else $retval$0$i$i13$i$i714 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$160 >> 0] | 0) | 0;
      if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i13$i$i714, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
       HEAP32[$__e >> 2] = 0;
       $291 = 0;
       label = 162;
       break;
      } else if ($290) {
       $292 = $282;
       $293 = $159;
       break;
      } else {
       $195 = $282;
       break L161;
      }
     } while (0);
     if ((label | 0) == 162) {
      label = 0;
      if ($290) {
       $195 = $291;
       break;
      } else {
       $292 = $291;
       $293 = 0;
      }
     }
     $164 = HEAP32[$__b >> 2] | 0;
     $165 = HEAP32[$164 + 12 >> 2] | 0;
     if (($165 | 0) == (HEAP32[$164 + 16 >> 2] | 0)) $retval$0$i$i733 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$164 >> 2] | 0) + 36 >> 2] & 127]($164) | 0; else $retval$0$i$i733 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$165 >> 0] | 0) | 0;
     $conv$i734 = $retval$0$i$i733 & 255;
     if ($conv$i734 << 24 >> 24 > -1) if (!(HEAP16[(HEAP32[$__tab_$i216 >> 2] | 0) + ($retval$0$i$i733 << 24 >> 24 << 1) >> 1] & 2048)) label = 172; else {
      $171 = HEAP32[$__wn >> 2] | 0;
      if (($171 | 0) == (HEAP32[$__we$addr >> 2] | 0)) {
       __ZNSt3__219__double_or_nothingIcEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_($__wb, $__wn, $__we$addr);
       $173 = HEAP32[$__wn >> 2] | 0;
      } else $173 = $171;
      HEAP32[$__wn >> 2] = $173 + 1;
      HEAP8[$173 >> 0] = $conv$i734;
      $__ng$2$ph = $__ng$0 + 1 | 0;
     } else label = 172;
     if ((label | 0) == 172) {
      label = 0;
      $174 = HEAP8[$__size_$i$i746 >> 0] | 0;
      if (!((HEAP8[$__ts >> 0] | 0) == $conv$i734 << 24 >> 24 & ($__ng$0 | 0 ? (($174 << 24 >> 24 < 0 ? HEAP32[$__size_$i3$i748 >> 2] | 0 : $174 & 255) | 0) != 0 : 0))) {
       $195 = $292;
       break;
      }
      $177 = HEAP32[$__gn >> 2] | 0;
      if (($177 | 0) == (HEAP32[$__ge >> 2] | 0)) {
       __ZNSt3__219__double_or_nothingIjEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_($__gb, $__gn, $__ge);
       $179 = HEAP32[$__gn >> 2] | 0;
      } else $179 = $177;
      HEAP32[$__gn >> 2] = $179 + 4;
      HEAP32[$179 >> 2] = $__ng$0;
      $__ng$2$ph = 0;
     }
     $180 = HEAP32[$__b >> 2] | 0;
     $__ninp_$i$i755 = $180 + 12 | 0;
     $181 = HEAP32[$__ninp_$i$i755 >> 2] | 0;
     if (($181 | 0) == (HEAP32[$180 + 16 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[$180 >> 2] | 0) + 40 >> 2] & 127]($180) | 0; else {
      HEAP32[$__ninp_$i$i755 >> 2] = $181 + 1;
      __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$181 >> 0] | 0) | 0;
     }
     $159 = $293;
     $282 = $292;
     $__ng$0 = $__ng$2$ph;
    }
    $186 = HEAP32[$__gn >> 2] | 0;
    if ($__ng$0 | 0 ? (HEAP32[$__gb >> 2] | 0) != ($186 | 0) : 0) {
     if (($186 | 0) == (HEAP32[$__ge >> 2] | 0)) {
      __ZNSt3__219__double_or_nothingIjEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_($__gb, $__gn, $__ge);
      $188 = HEAP32[$__gn >> 2] | 0;
     } else $188 = $186;
     HEAP32[$__gn >> 2] = $188 + 4;
     HEAP32[$188 >> 2] = $__ng$0;
    }
    L213 : do if ((HEAP32[$__fd >> 2] | 0) > 0) {
     $190 = HEAP32[$__b >> 2] | 0;
     do if (!$190) $294 = 1; else {
      $191 = HEAP32[$190 + 12 >> 2] | 0;
      if (($191 | 0) == (HEAP32[$190 + 16 >> 2] | 0)) $retval$0$i$i$i$i779 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$190 >> 2] | 0) + 36 >> 2] & 127]($190) | 0; else $retval$0$i$i$i$i779 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$191 >> 0] | 0) | 0;
      if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i$i$i779, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
       HEAP32[$__b >> 2] = 0;
       $294 = 1;
       break;
      } else {
       $294 = (HEAP32[$__b >> 2] | 0) == 0;
       break;
      }
     } while (0);
     do if (!$195) label = 198; else {
      $196 = HEAP32[$195 + 12 >> 2] | 0;
      if (($196 | 0) == (HEAP32[$195 + 16 >> 2] | 0)) $retval$0$i$i13$i$i800 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$195 >> 2] | 0) + 36 >> 2] & 127]($195) | 0; else $retval$0$i$i13$i$i800 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$196 >> 0] | 0) | 0;
      if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i13$i$i800, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
       HEAP32[$__e >> 2] = 0;
       label = 198;
       break;
      } else if ($294) {
       $295 = $195;
       break;
      } else {
       label = 204;
       break L21;
      }
     } while (0);
     if ((label | 0) == 198) {
      label = 0;
      if ($294) {
       label = 204;
       break L21;
      } else $295 = 0;
     }
     $200 = HEAP32[$__b >> 2] | 0;
     $201 = HEAP32[$200 + 12 >> 2] | 0;
     if (($201 | 0) == (HEAP32[$200 + 16 >> 2] | 0)) $retval$0$i$i820 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$200 >> 2] | 0) + 36 >> 2] & 127]($200) | 0; else $retval$0$i$i820 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$201 >> 0] | 0) | 0;
     if ((HEAP8[$__dp >> 0] | 0) != ($retval$0$i$i820 & 255) << 24 >> 24) {
      label = 204;
      break L21;
     }
     $207 = HEAP32[$__b >> 2] | 0;
     $__ninp_$i$i824 = $207 + 12 | 0;
     $208 = HEAP32[$__ninp_$i$i824 >> 2] | 0;
     if (($208 | 0) == (HEAP32[$207 + 16 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[$207 >> 2] | 0) + 40 >> 2] & 127]($207) | 0; else {
      HEAP32[$__ninp_$i$i824 >> 2] = $208 + 1;
      __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$208 >> 0] | 0) | 0;
     }
     $218 = $295;
     while (1) {
      if ((HEAP32[$__fd >> 2] | 0) <= 0) break L213;
      $213 = HEAP32[$__b >> 2] | 0;
      do if (!$213) $296 = 1; else {
       $214 = HEAP32[$213 + 12 >> 2] | 0;
       if (($214 | 0) == (HEAP32[$213 + 16 >> 2] | 0)) $retval$0$i$i$i$i847 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$213 >> 2] | 0) + 36 >> 2] & 127]($213) | 0; else $retval$0$i$i$i$i847 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$214 >> 0] | 0) | 0;
       if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i$i$i847, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
        HEAP32[$__b >> 2] = 0;
        $296 = 1;
        break;
       } else {
        $296 = (HEAP32[$__b >> 2] | 0) == 0;
        break;
       }
      } while (0);
      do if (!$218) label = 223; else {
       $219 = HEAP32[$218 + 12 >> 2] | 0;
       if (($219 | 0) == (HEAP32[$218 + 16 >> 2] | 0)) $retval$0$i$i13$i$i868 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$218 >> 2] | 0) + 36 >> 2] & 127]($218) | 0; else $retval$0$i$i13$i$i868 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$219 >> 0] | 0) | 0;
       if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i13$i$i868, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
        HEAP32[$__e >> 2] = 0;
        label = 223;
        break;
       } else if ($296) {
        $297 = $218;
        break;
       } else {
        label = 230;
        break L21;
       }
      } while (0);
      if ((label | 0) == 223) {
       label = 0;
       if ($296) {
        label = 230;
        break L21;
       } else $297 = 0;
      }
      $223 = HEAP32[$__b >> 2] | 0;
      $224 = HEAP32[$223 + 12 >> 2] | 0;
      if (($224 | 0) == (HEAP32[$223 + 16 >> 2] | 0)) $retval$0$i$i888 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$223 >> 2] | 0) + 36 >> 2] & 127]($223) | 0; else $retval$0$i$i888 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$224 >> 0] | 0) | 0;
      if (($retval$0$i$i888 & 255) << 24 >> 24 <= -1) {
       label = 230;
       break L21;
      }
      if (!(HEAP16[(HEAP32[$__tab_$i216 >> 2] | 0) + ($retval$0$i$i888 << 24 >> 24 << 1) >> 1] & 2048)) {
       label = 230;
       break L21;
      }
      if ((HEAP32[$__wn >> 2] | 0) == (HEAP32[$__we$addr >> 2] | 0)) __ZNSt3__219__double_or_nothingIcEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_($__wb, $__wn, $__we$addr);
      $233 = HEAP32[$__b >> 2] | 0;
      $234 = HEAP32[$233 + 12 >> 2] | 0;
      if (($234 | 0) == (HEAP32[$233 + 16 >> 2] | 0)) $retval$0$i$i910 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$233 >> 2] | 0) + 36 >> 2] & 127]($233) | 0; else $retval$0$i$i910 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$234 >> 0] | 0) | 0;
      $238 = HEAP32[$__wn >> 2] | 0;
      HEAP32[$__wn >> 2] = $238 + 1;
      HEAP8[$238 >> 0] = $retval$0$i$i910;
      HEAP32[$__fd >> 2] = (HEAP32[$__fd >> 2] | 0) + -1;
      $240 = HEAP32[$__b >> 2] | 0;
      $__ninp_$i$i914 = $240 + 12 | 0;
      $241 = HEAP32[$__ninp_$i$i914 >> 2] | 0;
      if (($241 | 0) == (HEAP32[$240 + 16 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[$240 >> 2] | 0) + 40 >> 2] & 127]($240) | 0; else {
       HEAP32[$__ninp_$i$i914 >> 2] = $241 + 1;
       __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$241 >> 0] | 0) | 0;
      }
      $218 = $297;
     }
    } while (0);
    if ((HEAP32[$__wn >> 2] | 0) == (HEAP32[$__wb >> 2] | 0)) {
     label = 241;
     break L21;
    } else $__trailing_sign$1 = $__trailing_sign$0;
    break;
   }
  default:
   $__trailing_sign$1 = $__trailing_sign$0;
  } while (0);
  L289 : do if ((label | 0) == 47) {
   label = 0;
   $32 = $281;
   while (1) {
    $27 = HEAP32[$__b >> 2] | 0;
    do if (!$27) $283 = 1; else {
     $28 = HEAP32[$27 + 12 >> 2] | 0;
     if (($28 | 0) == (HEAP32[$27 + 16 >> 2] | 0)) $retval$0$i$i$i$i171 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$27 >> 2] | 0) + 36 >> 2] & 127]($27) | 0; else $retval$0$i$i$i$i171 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$28 >> 0] | 0) | 0;
     if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i$i$i171, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
      HEAP32[$__b >> 2] = 0;
      $283 = 1;
      break;
     } else {
      $283 = (HEAP32[$__b >> 2] | 0) == 0;
      break;
     }
    } while (0);
    do if (!$32) label = 61; else {
     $33 = HEAP32[$32 + 12 >> 2] | 0;
     if (($33 | 0) == (HEAP32[$32 + 16 >> 2] | 0)) $retval$0$i$i13$i$i192 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$32 >> 2] | 0) + 36 >> 2] & 127]($32) | 0; else $retval$0$i$i13$i$i192 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$33 >> 0] | 0) | 0;
     if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i13$i$i192, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
      HEAP32[$__e >> 2] = 0;
      label = 61;
      break;
     } else if ($283) {
      $284 = $32;
      break;
     } else {
      $__trailing_sign$1 = $__trailing_sign$0;
      break L289;
     }
    } while (0);
    if ((label | 0) == 61) {
     label = 0;
     if ($283) {
      $__trailing_sign$1 = $__trailing_sign$0;
      break L289;
     } else $284 = 0;
    }
    $37 = HEAP32[$__b >> 2] | 0;
    $38 = HEAP32[$37 + 12 >> 2] | 0;
    if (($38 | 0) == (HEAP32[$37 + 16 >> 2] | 0)) $retval$0$i$i211 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$37 >> 2] | 0) + 36 >> 2] & 127]($37) | 0; else $retval$0$i$i211 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$38 >> 0] | 0) | 0;
    if (($retval$0$i$i211 & 255) << 24 >> 24 <= -1) {
     $__trailing_sign$1 = $__trailing_sign$0;
     break L289;
    }
    if (!(HEAP16[(HEAP32[$__tab_$i216 >> 2] | 0) + ($retval$0$i$i211 << 24 >> 24 << 1) >> 1] & 8192)) {
     $__trailing_sign$1 = $__trailing_sign$0;
     break L289;
    }
    $44 = HEAP32[$__b >> 2] | 0;
    $__ninp_$i$i224 = $44 + 12 | 0;
    $45 = HEAP32[$__ninp_$i$i224 >> 2] | 0;
    if (($45 | 0) == (HEAP32[$44 + 16 >> 2] | 0)) $retval$0$i$i234 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$44 >> 2] | 0) + 40 >> 2] & 127]($44) | 0; else {
     HEAP32[$__ninp_$i$i224 >> 2] = $45 + 1;
     $retval$0$i$i234 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$45 >> 0] | 0) | 0;
    }
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($__spaces, $retval$0$i$i234 & 255);
    $32 = $284;
   }
  } while (0);
  $__p$0 = $__p$0 + 1 | 0;
  $__trailing_sign$0 = $__trailing_sign$1;
 }
 L326 : do if ((label | 0) == 45) {
  HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 4;
  $retval$10 = 0;
 } else if ((label | 0) == 105) {
  HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 4;
  $retval$10 = 0;
 } else if ((label | 0) == 148) {
  HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 4;
  $retval$10 = 0;
 } else if ((label | 0) == 204) {
  HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 4;
  $retval$10 = 0;
 } else if ((label | 0) == 230) {
  HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 4;
  $retval$10 = 0;
 } else if ((label | 0) == 241) {
  HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 4;
  $retval$10 = 0;
 } else if ((label | 0) == 243) {
  L328 : do if ($__trailing_sign$0 | 0) {
   $__size_$i$i927 = $__trailing_sign$0 + 11 | 0;
   $__size_$i3$i929 = $__trailing_sign$0 + 4 | 0;
   $__i$0 = 1;
   L330 : while (1) {
    $248 = HEAP8[$__size_$i$i927 >> 0] | 0;
    if ($248 << 24 >> 24 < 0) $cond$i933 = HEAP32[$__size_$i3$i929 >> 2] | 0; else $cond$i933 = $248 & 255;
    if ($__i$0 >>> 0 >= $cond$i933 >>> 0) break L328;
    $250 = HEAP32[$__b >> 2] | 0;
    do if (!$250) $298 = 1; else {
     $251 = HEAP32[$250 + 12 >> 2] | 0;
     if (($251 | 0) == (HEAP32[$250 + 16 >> 2] | 0)) $retval$0$i$i$i$i511 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$250 >> 2] | 0) + 36 >> 2] & 127]($250) | 0; else $retval$0$i$i$i$i511 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$251 >> 0] | 0) | 0;
     if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i$i$i511, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
      HEAP32[$__b >> 2] = 0;
      $298 = 1;
      break;
     } else {
      $298 = (HEAP32[$__b >> 2] | 0) == 0;
      break;
     }
    } while (0);
    $255 = HEAP32[$__e >> 2] | 0;
    do if (!$255) label = 262; else {
     $256 = HEAP32[$255 + 12 >> 2] | 0;
     if (($256 | 0) == (HEAP32[$255 + 16 >> 2] | 0)) $retval$0$i$i13$i$i532 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$255 >> 2] | 0) + 36 >> 2] & 127]($255) | 0; else $retval$0$i$i13$i$i532 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$256 >> 0] | 0) | 0;
     if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i13$i$i532, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
      HEAP32[$__e >> 2] = 0;
      label = 262;
      break;
     } else if ($298) break; else break L330;
    } while (0);
    if ((label | 0) == 262) {
     label = 0;
     if ($298) break;
    }
    $260 = HEAP32[$__b >> 2] | 0;
    $261 = HEAP32[$260 + 12 >> 2] | 0;
    if (($261 | 0) == (HEAP32[$260 + 16 >> 2] | 0)) $retval$0$i$i483 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$260 >> 2] | 0) + 36 >> 2] & 127]($260) | 0; else $retval$0$i$i483 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$261 >> 0] | 0) | 0;
    if ((HEAP8[$__size_$i$i927 >> 0] | 0) < 0) $cond$i$i$i = HEAP32[$__trailing_sign$0 >> 2] | 0; else $cond$i$i$i = $__trailing_sign$0;
    if ((HEAP8[$cond$i$i$i + $__i$0 >> 0] | 0) != ($retval$0$i$i483 & 255) << 24 >> 24) break;
    $269 = HEAP32[$__b >> 2] | 0;
    $__ninp_$i$i = $269 + 12 | 0;
    $270 = HEAP32[$__ninp_$i$i >> 2] | 0;
    if (($270 | 0) == (HEAP32[$269 + 16 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[$269 >> 2] | 0) + 40 >> 2] & 127]($269) | 0; else {
     HEAP32[$__ninp_$i$i >> 2] = $270 + 1;
     __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$270 >> 0] | 0) | 0;
    }
    $__i$0 = $__i$0 + 1 | 0;
   }
   HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 4;
   $retval$10 = 0;
   break L326;
  } while (0);
  $274 = HEAP32[$__gb >> 2] | 0;
  $275 = HEAP32[$__gn >> 2] | 0;
  if (($274 | 0) == ($275 | 0)) $retval$10 = 1; else {
   HEAP32[$__et >> 2] = 0;
   __ZNSt3__216__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grp, $274, $275, $__et);
   if (!(HEAP32[$__et >> 2] | 0)) {
    $retval$10 = 1;
    break;
   } else {
    HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 4;
    $retval$10 = 0;
    break;
   }
  }
 } while (0);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__spaces);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__nsn);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__psn);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__sym);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grp);
 $278 = HEAP32[$__gb >> 2] | 0;
 HEAP32[$__gb >> 2] = 0;
 if ($278 | 0) FUNCTION_TABLE_vi[HEAP32[$__gb + 4 >> 2] & 255]($278);
 STACKTOP = sp;
 return $retval$10 | 0;
}

function __ZNSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIwEERNS_10unique_ptrIwPFvPvEEERPwSM_($__b, $__e, $__intl, $__loc, $__flags, $__err, $__neg, $__ct, $__wb, $__wn, $__we) {
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__intl = $__intl | 0;
 $__loc = $__loc | 0;
 $__flags = $__flags | 0;
 $__err = $__err | 0;
 $__neg = $__neg | 0;
 $__ct = $__ct | 0;
 $__wb = $__wb | 0;
 $__wn = $__wn | 0;
 $__we = $__we | 0;
 var $102 = 0, $107 = 0, $108 = 0, $110 = 0, $111 = 0, $112 = 0, $114 = 0, $116 = 0, $117 = 0, $12 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $127 = 0, $13 = 0, $130 = 0, $132 = 0, $133 = 0, $134 = 0, $138 = 0, $139 = 0, $143 = 0, $144 = 0, $149 = 0, $150 = 0, $154 = 0, $158 = 0, $159 = 0, $163 = 0, $164 = 0, $168 = 0, $169 = 0, $174 = 0, $176 = 0, $177 = 0, $18 = 0, $180 = 0, $182 = 0, $183 = 0, $184 = 0, $189 = 0, $19 = 0, $191 = 0, $193 = 0, $194 = 0, $198 = 0, $199 = 0, $203 = 0, $204 = 0, $210 = 0, $211 = 0, $216 = 0, $217 = 0, $221 = 0, $222 = 0, $226 = 0, $227 = 0, $235 = 0, $236 = 0, $24 = 0, $240 = 0, $242 = 0, $243 = 0, $25 = 0, $251 = 0, $253 = 0, $254 = 0, $258 = 0, $259 = 0, $263 = 0, $264 = 0, $272 = 0, $273 = 0, $277 = 0, $278 = 0, $281 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $31 = 0, $35 = 0, $36 = 0, $40 = 0, $41 = 0, $46 = 0, $47 = 0, $51 = 0, $53 = 0, $55 = 0, $56 = 0, $63 = 0, $64 = 0, $68 = 0, $7 = 0, $73 = 0, $74 = 0, $78 = 0, $8 = 0, $85 = 0, $86 = 0, $90 = 0, $97 = 0, $98 = 0, $__dp = 0, $__et = 0, $__fd = 0, $__gb = 0, $__gbuf = 0, $__ge = 0, $__gn = 0, $__grp = 0, $__i$0 = 0, $__i$0$i$i = 0, $__i$0$i$i101 = 0, $__i$0$i$i108 = 0, $__i$0$i$i116 = 0, $__i$0$i$i124 = 0, $__ng$0 = 0, $__ng$2$ph = 0, $__ninp_$i$i = 0, $__ninp_$i$i146 = 0, $__ninp_$i$i215 = 0, $__ninp_$i$i277 = 0, $__ninp_$i$i305 = 0, $__ninp_$i$i345 = 0, $__ninp_$i$i385 = 0, $__ninp_$i$i609 = 0, $__ninp_$i$i701 = 0, $__ninp_$i$i769 = 0, $__ninp_$i$i851 = 0, $__nsn = 0, $__p$0 = 0, $__pat = 0, $__psn = 0, $__size_$i$i = 0, $__size_$i$i$i404 = 0, $__size_$i$i231 = 0, $__size_$i$i428 = 0, $__size_$i$i694 = 0, $__size_$i$i863 = 0, $__size_$i2$i = 0, $__size_$i2$i$i541 = 0, $__size_$i2$i233 = 0, $__size_$i2$i430 = 0, $__size_$i2$i865 = 0, $__size_$i3$i = 0, $__spaces = 0, $__sym = 0, $__sym_curr_char$sroa$0$0$ptr = 0, $__sym_space_end$sroa$0$0 = 0, $__sym_space_end$sroa$0$1 = 0, $__trailing_sign$0 = 0, $__trailing_sign$1 = 0, $__ts = 0, $__we$addr = 0, $add$ptr$i446 = 0, $add$ptr$i446898 = 0, $add$ptr$i458$pre$phiZZZ2D = 0, $agg$tmp26$sroa$0$0$ptr$i = 0, $arrayidx89 = 0, $cmp$i$i266 = 0, $cmp$i$i347 = 0, $cmp26 = 0, $cmp94895 = 0, $cond$i = 0, $cond$i$i$i = 0, $cond$i$i426 = 0, $cond$i237 = 0, $cond$i869 = 0, $conv$i$i432 = 0, $retval$0$i$i = 0, $retval$0$i$i$i$i = 0, $retval$0$i$i$i$i169 = 0, $retval$0$i$i$i$i500 = 0, $retval$0$i$i$i$i565 = 0, $retval$0$i$i$i$i649 = 0, $retval$0$i$i$i$i725 = 0, $retval$0$i$i$i$i792 = 0, $retval$0$i$i13$i$i = 0, $retval$0$i$i13$i$i190 = 0, $retval$0$i$i13$i$i521 = 0, $retval$0$i$i13$i$i586 = 0, $retval$0$i$i13$i$i670 = 0, $retval$0$i$i13$i$i746 = 0, $retval$0$i$i13$i$i813 = 0, $retval$0$i$i156 = 0, $retval$0$i$i209 = 0, $retval$0$i$i225 = 0, $retval$0$i$i273 = 0, $retval$0$i$i334 = 0, $retval$0$i$i374 = 0, $retval$0$i$i471 = 0, $retval$0$i$i605 = 0, $retval$0$i$i689 = 0, $retval$0$i$i766 = 0, $retval$0$i$i833 = 0, $retval$0$i$i848 = 0, $retval$10 = 0, $sub$ptr$div$i = 0, $tobool$i$i$i412 = 0, $tobool$i$i$i539 = 0, $tobool$i$i$i623 = 0, $tobool$i$i429 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 512 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(512);
 $__we$addr = sp + 496 | 0;
 $__gbuf = sp;
 $__gb = sp + 488 | 0;
 $__gn = sp + 480 | 0;
 $__ge = sp + 476 | 0;
 $__pat = sp + 500 | 0;
 $__dp = sp + 472 | 0;
 $__ts = sp + 468 | 0;
 $__grp = sp + 456 | 0;
 $__sym = sp + 444 | 0;
 $__psn = sp + 432 | 0;
 $__nsn = sp + 420 | 0;
 $__spaces = sp + 408 | 0;
 $__fd = sp + 404 | 0;
 $__et = sp + 400 | 0;
 HEAP32[$__we$addr >> 2] = $__we;
 HEAP32[$__gb >> 2] = $__gbuf;
 HEAP32[$__gb + 4 >> 2] = 153;
 HEAP32[$__gn >> 2] = $__gbuf;
 HEAP32[$__ge >> 2] = $__gbuf + 400;
 HEAP32[$__grp >> 2] = 0;
 HEAP32[$__grp + 4 >> 2] = 0;
 HEAP32[$__grp + 8 >> 2] = 0;
 $__i$0$i$i = 0;
 while (1) {
  if (($__i$0$i$i | 0) == 3) break;
  HEAP32[$__grp + ($__i$0$i$i << 2) >> 2] = 0;
  $__i$0$i$i = $__i$0$i$i + 1 | 0;
 }
 HEAP32[$__sym >> 2] = 0;
 HEAP32[$__sym + 4 >> 2] = 0;
 HEAP32[$__sym + 8 >> 2] = 0;
 $__i$0$i$i101 = 0;
 while (1) {
  if (($__i$0$i$i101 | 0) == 3) break;
  HEAP32[$__sym + ($__i$0$i$i101 << 2) >> 2] = 0;
  $__i$0$i$i101 = $__i$0$i$i101 + 1 | 0;
 }
 HEAP32[$__psn >> 2] = 0;
 HEAP32[$__psn + 4 >> 2] = 0;
 HEAP32[$__psn + 8 >> 2] = 0;
 $__i$0$i$i108 = 0;
 while (1) {
  if (($__i$0$i$i108 | 0) == 3) break;
  HEAP32[$__psn + ($__i$0$i$i108 << 2) >> 2] = 0;
  $__i$0$i$i108 = $__i$0$i$i108 + 1 | 0;
 }
 HEAP32[$__nsn >> 2] = 0;
 HEAP32[$__nsn + 4 >> 2] = 0;
 HEAP32[$__nsn + 8 >> 2] = 0;
 $__i$0$i$i116 = 0;
 while (1) {
  if (($__i$0$i$i116 | 0) == 3) break;
  HEAP32[$__nsn + ($__i$0$i$i116 << 2) >> 2] = 0;
  $__i$0$i$i116 = $__i$0$i$i116 + 1 | 0;
 }
 HEAP32[$__spaces >> 2] = 0;
 HEAP32[$__spaces + 4 >> 2] = 0;
 HEAP32[$__spaces + 8 >> 2] = 0;
 $__i$0$i$i124 = 0;
 while (1) {
  if (($__i$0$i$i124 | 0) == 3) break;
  HEAP32[$__spaces + ($__i$0$i$i124 << 2) >> 2] = 0;
  $__i$0$i$i124 = $__i$0$i$i124 + 1 | 0;
 }
 __ZNSt3__211__money_getIwE13__gather_infoEbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_SJ_Ri($__intl, $__loc, $__pat, $__dp, $__ts, $__grp, $__sym, $__psn, $__nsn, $__fd);
 HEAP32[$__wn >> 2] = HEAP32[$__wb >> 2];
 $__size_$i$i = $__psn + 8 + 3 | 0;
 $__size_$i2$i = $__psn + 4 | 0;
 $__size_$i$i231 = $__nsn + 8 + 3 | 0;
 $__size_$i2$i233 = $__nsn + 4 | 0;
 $__size_$i$i694 = $__grp + 11 | 0;
 $__size_$i3$i = $__grp + 4 | 0;
 $cmp94895 = ($__flags & 512 | 0) != 0;
 $__size_$i$i$i404 = $__sym + 8 + 3 | 0;
 $arrayidx89 = $__pat + 3 | 0;
 $__size_$i2$i$i541 = $__sym + 4 | 0;
 $__size_$i$i428 = $__spaces + 8 + 3 | 0;
 $__size_$i2$i430 = $__spaces + 4 | 0;
 $__p$0 = 0;
 $__trailing_sign$0 = 0;
 L21 : while (1) {
  if ($__p$0 >>> 0 >= 4) {
   label = 239;
   break;
  }
  $7 = HEAP32[$__b >> 2] | 0;
  do if (!$7) $283 = 1; else {
   $8 = HEAP32[$7 + 12 >> 2] | 0;
   if (($8 | 0) == (HEAP32[$7 + 16 >> 2] | 0)) $retval$0$i$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$7 >> 2] | 0) + 36 >> 2] & 127]($7) | 0; else $retval$0$i$i$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$8 >> 2] | 0) | 0;
   if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i$i$i, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
    HEAP32[$__b >> 2] = 0;
    $283 = 1;
    break;
   } else {
    $283 = (HEAP32[$__b >> 2] | 0) == 0;
    break;
   }
  } while (0);
  $12 = HEAP32[$__e >> 2] | 0;
  do if (!$12) label = 31; else {
   $13 = HEAP32[$12 + 12 >> 2] | 0;
   if (($13 | 0) == (HEAP32[$12 + 16 >> 2] | 0)) $retval$0$i$i13$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$12 >> 2] | 0) + 36 >> 2] & 127]($12) | 0; else $retval$0$i$i13$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$13 >> 2] | 0) | 0;
   if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i13$i$i, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
    HEAP32[$__e >> 2] = 0;
    label = 31;
    break;
   } else if ($283) {
    $284 = $12;
    break;
   } else {
    label = 239;
    break L21;
   }
  } while (0);
  if ((label | 0) == 31) {
   label = 0;
   if ($283) {
    label = 239;
    break;
   } else $284 = 0;
  }
  L46 : do switch (HEAP8[$__pat + $__p$0 >> 0] | 0) {
  case 1:
   {
    if (($__p$0 | 0) == 3) $__trailing_sign$1 = $__trailing_sign$0; else {
     $18 = HEAP32[$__b >> 2] | 0;
     $19 = HEAP32[$18 + 12 >> 2] | 0;
     if (($19 | 0) == (HEAP32[$18 + 16 >> 2] | 0)) $retval$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$18 >> 2] | 0) + 36 >> 2] & 127]($18) | 0; else $retval$0$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$19 >> 2] | 0) | 0;
     if (!(FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$__ct >> 2] | 0) + 12 >> 2] & 63]($__ct, 8192, $retval$0$i$i) | 0)) {
      label = 44;
      break L21;
     }
     $24 = HEAP32[$__b >> 2] | 0;
     $__ninp_$i$i146 = $24 + 12 | 0;
     $25 = HEAP32[$__ninp_$i$i146 >> 2] | 0;
     if (($25 | 0) == (HEAP32[$24 + 16 >> 2] | 0)) $retval$0$i$i156 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$24 >> 2] | 0) + 40 >> 2] & 127]($24) | 0; else {
      HEAP32[$__ninp_$i$i146 >> 2] = $25 + 4;
      $retval$0$i$i156 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$25 >> 2] | 0) | 0;
     }
     __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9push_backEw($__spaces, $retval$0$i$i156);
     label = 46;
    }
    break;
   }
  case 0:
   {
    if (($__p$0 | 0) == 3) $__trailing_sign$1 = $__trailing_sign$0; else label = 46;
    break;
   }
  case 3:
   {
    $51 = HEAP8[$__size_$i$i >> 0] | 0;
    $cond$i = $51 << 24 >> 24 < 0 ? HEAP32[$__size_$i2$i >> 2] | 0 : $51 & 255;
    $53 = HEAP8[$__size_$i$i231 >> 0] | 0;
    $cond$i237 = $53 << 24 >> 24 < 0 ? HEAP32[$__size_$i2$i233 >> 2] | 0 : $53 & 255;
    if (($cond$i | 0) == (0 - $cond$i237 | 0)) $__trailing_sign$1 = $__trailing_sign$0; else {
     $cmp26 = ($cond$i | 0) == 0;
     $55 = HEAP32[$__b >> 2] | 0;
     $56 = HEAP32[$55 + 12 >> 2] | 0;
     $cmp$i$i266 = ($56 | 0) == (HEAP32[$55 + 16 >> 2] | 0);
     if ($cmp26 | ($cond$i237 | 0) == 0) {
      if ($cmp$i$i266) $retval$0$i$i273 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$55 >> 2] | 0) + 36 >> 2] & 127]($55) | 0; else $retval$0$i$i273 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$56 >> 2] | 0) | 0;
      if ($cmp26) {
       if (($retval$0$i$i273 | 0) != (HEAP32[((HEAP8[$__size_$i$i231 >> 0] | 0) < 0 ? HEAP32[$__nsn >> 2] | 0 : $__nsn) >> 2] | 0)) {
        $__trailing_sign$1 = $__trailing_sign$0;
        break L46;
       }
       $73 = HEAP32[$__b >> 2] | 0;
       $__ninp_$i$i305 = $73 + 12 | 0;
       $74 = HEAP32[$__ninp_$i$i305 >> 2] | 0;
       if (($74 | 0) == (HEAP32[$73 + 16 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[$73 >> 2] | 0) + 40 >> 2] & 127]($73) | 0; else {
        HEAP32[$__ninp_$i$i305 >> 2] = $74 + 4;
        __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$74 >> 2] | 0) | 0;
       }
       HEAP8[$__neg >> 0] = 1;
       $78 = HEAP8[$__size_$i$i231 >> 0] | 0;
       $__trailing_sign$1 = ($78 << 24 >> 24 < 0 ? HEAP32[$__size_$i2$i233 >> 2] | 0 : $78 & 255) >>> 0 > 1 ? $__nsn : $__trailing_sign$0;
       break L46;
      }
      if (($retval$0$i$i273 | 0) != (HEAP32[((HEAP8[$__size_$i$i >> 0] | 0) < 0 ? HEAP32[$__psn >> 2] | 0 : $__psn) >> 2] | 0)) {
       HEAP8[$__neg >> 0] = 1;
       $__trailing_sign$1 = $__trailing_sign$0;
       break L46;
      }
      $63 = HEAP32[$__b >> 2] | 0;
      $__ninp_$i$i277 = $63 + 12 | 0;
      $64 = HEAP32[$__ninp_$i$i277 >> 2] | 0;
      if (($64 | 0) == (HEAP32[$63 + 16 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[$63 >> 2] | 0) + 40 >> 2] & 127]($63) | 0; else {
       HEAP32[$__ninp_$i$i277 >> 2] = $64 + 4;
       __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$64 >> 2] | 0) | 0;
      }
      $68 = HEAP8[$__size_$i$i >> 0] | 0;
      $__trailing_sign$1 = ($68 << 24 >> 24 < 0 ? HEAP32[$__size_$i2$i >> 2] | 0 : $68 & 255) >>> 0 > 1 ? $__psn : $__trailing_sign$0;
      break L46;
     }
     if ($cmp$i$i266) $retval$0$i$i334 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$55 >> 2] | 0) + 36 >> 2] & 127]($55) | 0; else $retval$0$i$i334 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$56 >> 2] | 0) | 0;
     $85 = HEAP32[$__b >> 2] | 0;
     $__ninp_$i$i345 = $85 + 12 | 0;
     $86 = HEAP32[$__ninp_$i$i345 >> 2] | 0;
     $cmp$i$i347 = ($86 | 0) == (HEAP32[$85 + 16 >> 2] | 0);
     if (($retval$0$i$i334 | 0) == (HEAP32[((HEAP8[$__size_$i$i >> 0] | 0) < 0 ? HEAP32[$__psn >> 2] | 0 : $__psn) >> 2] | 0)) {
      if ($cmp$i$i347) FUNCTION_TABLE_ii[HEAP32[(HEAP32[$85 >> 2] | 0) + 40 >> 2] & 127]($85) | 0; else {
       HEAP32[$__ninp_$i$i345 >> 2] = $86 + 4;
       __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$86 >> 2] | 0) | 0;
      }
      $90 = HEAP8[$__size_$i$i >> 0] | 0;
      $__trailing_sign$1 = ($90 << 24 >> 24 < 0 ? HEAP32[$__size_$i2$i >> 2] | 0 : $90 & 255) >>> 0 > 1 ? $__psn : $__trailing_sign$0;
      break L46;
     }
     if ($cmp$i$i347) $retval$0$i$i374 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$85 >> 2] | 0) + 36 >> 2] & 127]($85) | 0; else $retval$0$i$i374 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$86 >> 2] | 0) | 0;
     if (($retval$0$i$i374 | 0) != (HEAP32[((HEAP8[$__size_$i$i231 >> 0] | 0) < 0 ? HEAP32[$__nsn >> 2] | 0 : $__nsn) >> 2] | 0)) {
      label = 103;
      break L21;
     }
     $97 = HEAP32[$__b >> 2] | 0;
     $__ninp_$i$i385 = $97 + 12 | 0;
     $98 = HEAP32[$__ninp_$i$i385 >> 2] | 0;
     if (($98 | 0) == (HEAP32[$97 + 16 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[$97 >> 2] | 0) + 40 >> 2] & 127]($97) | 0; else {
      HEAP32[$__ninp_$i$i385 >> 2] = $98 + 4;
      __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$98 >> 2] | 0) | 0;
     }
     HEAP8[$__neg >> 0] = 1;
     $102 = HEAP8[$__size_$i$i231 >> 0] | 0;
     $__trailing_sign$1 = ($102 << 24 >> 24 < 0 ? HEAP32[$__size_$i2$i233 >> 2] | 0 : $102 & 255) >>> 0 > 1 ? $__nsn : $__trailing_sign$0;
    }
    break;
   }
  case 2:
   {
    if ($__p$0 >>> 0 < 2 | ($__trailing_sign$0 | 0) != 0) {
     $110 = HEAP8[$__size_$i$i$i404 >> 0] | 0;
     $111 = HEAP32[$__sym >> 2] | 0;
     $112 = $110 << 24 >> 24 < 0 ? $111 : $__sym;
     if (!$__p$0) {
      $291 = $111;
      $292 = $110;
      $__sym_space_end$sroa$0$1 = $112;
     } else {
      $288 = $112;
      $289 = $111;
      $290 = $110;
      label = 108;
     }
    } else {
     if (!($cmp94895 | ($__p$0 | 0) == 2 & (HEAP8[$arrayidx89 >> 0] | 0) != 0)) {
      $__trailing_sign$1 = 0;
      break L46;
     }
     $107 = HEAP8[$__size_$i$i$i404 >> 0] | 0;
     $108 = HEAP32[$__sym >> 2] | 0;
     $288 = $107 << 24 >> 24 < 0 ? $108 : $__sym;
     $289 = $108;
     $290 = $107;
     label = 108;
    }
    L108 : do if ((label | 0) == 108) {
     label = 0;
     if ((HEAPU8[$__pat + ($__p$0 + -1) >> 0] | 0) < 2) {
      $114 = $290;
      $116 = $289;
      $__sym_space_end$sroa$0$0 = $288;
      while (1) {
       $tobool$i$i$i412 = $114 << 24 >> 24 < 0;
       $117 = $__sym_space_end$sroa$0$0;
       if ((($tobool$i$i$i412 ? $116 : $__sym) + (($tobool$i$i$i412 ? HEAP32[$__size_$i2$i$i541 >> 2] | 0 : $114 & 255) << 2) | 0) == ($117 | 0)) {
        $121 = $114;
        $122 = $116;
        break;
       }
       if (!(FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$__ct >> 2] | 0) + 12 >> 2] & 63]($__ct, 8192, HEAP32[$117 >> 2] | 0) | 0)) {
        label = 112;
        break;
       }
       $114 = HEAP8[$__size_$i$i$i404 >> 0] | 0;
       $116 = HEAP32[$__sym >> 2] | 0;
       $__sym_space_end$sroa$0$0 = $117 + 4 | 0;
      }
      if ((label | 0) == 112) {
       label = 0;
       $121 = HEAP8[$__size_$i$i$i404 >> 0] | 0;
       $122 = HEAP32[$__sym >> 2] | 0;
      }
      $cond$i$i426 = $121 << 24 >> 24 < 0 ? $122 : $__sym;
      $123 = $cond$i$i426;
      $sub$ptr$div$i = $__sym_space_end$sroa$0$0 - $123 >> 2;
      $124 = HEAP8[$__size_$i$i428 >> 0] | 0;
      $tobool$i$i429 = $124 << 24 >> 24 < 0;
      $125 = HEAP32[$__size_$i2$i430 >> 2] | 0;
      $conv$i$i432 = $124 & 255;
      if ($sub$ptr$div$i >>> 0 > ($tobool$i$i429 ? $125 : $conv$i$i432) >>> 0) {
       $291 = $122;
       $292 = $121;
       $__sym_space_end$sroa$0$1 = $123;
      } else {
       $add$ptr$i446898 = (HEAP32[$__spaces >> 2] | 0) + ($125 << 2) | 0;
       $add$ptr$i446 = $__spaces + ($conv$i$i432 << 2) | 0;
       $add$ptr$i458$pre$phiZZZ2D = $tobool$i$i429 ? $add$ptr$i446898 : $add$ptr$i446;
       $127 = ($tobool$i$i429 ? $add$ptr$i446898 : $add$ptr$i446) + (0 - $sub$ptr$div$i << 2) | 0;
       $agg$tmp26$sroa$0$0$ptr$i = $cond$i$i426;
       while (1) {
        if (($127 | 0) == ($add$ptr$i458$pre$phiZZZ2D | 0)) {
         $291 = $122;
         $292 = $121;
         $__sym_space_end$sroa$0$1 = $__sym_space_end$sroa$0$0;
         break L108;
        }
        if ((HEAP32[$127 >> 2] | 0) != (HEAP32[$agg$tmp26$sroa$0$0$ptr$i >> 2] | 0)) {
         $291 = $122;
         $292 = $121;
         $__sym_space_end$sroa$0$1 = $123;
         break L108;
        }
        $127 = $127 + 4 | 0;
        $agg$tmp26$sroa$0$0$ptr$i = $agg$tmp26$sroa$0$0$ptr$i + 4 | 0;
       }
      }
     } else {
      $291 = $289;
      $292 = $290;
      $__sym_space_end$sroa$0$1 = $288;
     }
    } while (0);
    $130 = $292;
    $132 = $291;
    $138 = $284;
    $__sym_curr_char$sroa$0$0$ptr = $__sym_space_end$sroa$0$1;
    L124 : while (1) {
     $tobool$i$i$i539 = $130 << 24 >> 24 < 0;
     if (($__sym_curr_char$sroa$0$0$ptr | 0) == (($tobool$i$i$i539 ? $132 : $__sym) + (($tobool$i$i$i539 ? HEAP32[$__size_$i2$i$i541 >> 2] | 0 : $130 & 255) << 2) | 0)) break;
     $133 = HEAP32[$__b >> 2] | 0;
     do if (!$133) $293 = 1; else {
      $134 = HEAP32[$133 + 12 >> 2] | 0;
      if (($134 | 0) == (HEAP32[$133 + 16 >> 2] | 0)) $retval$0$i$i$i$i565 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$133 >> 2] | 0) + 36 >> 2] & 127]($133) | 0; else $retval$0$i$i$i$i565 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$134 >> 2] | 0) | 0;
      if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i$i$i565, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
       HEAP32[$__b >> 2] = 0;
       $293 = 1;
       break;
      } else {
       $293 = (HEAP32[$__b >> 2] | 0) == 0;
       break;
      }
     } while (0);
     do if (!$138) label = 134; else {
      $139 = HEAP32[$138 + 12 >> 2] | 0;
      if (($139 | 0) == (HEAP32[$138 + 16 >> 2] | 0)) $retval$0$i$i13$i$i586 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$138 >> 2] | 0) + 36 >> 2] & 127]($138) | 0; else $retval$0$i$i13$i$i586 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$139 >> 2] | 0) | 0;
      if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i13$i$i586, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
       HEAP32[$__e >> 2] = 0;
       label = 134;
       break;
      } else if ($293) {
       $294 = $138;
       break;
      } else break L124;
     } while (0);
     if ((label | 0) == 134) {
      label = 0;
      if ($293) break; else $294 = 0;
     }
     $143 = HEAP32[$__b >> 2] | 0;
     $144 = HEAP32[$143 + 12 >> 2] | 0;
     if (($144 | 0) == (HEAP32[$143 + 16 >> 2] | 0)) $retval$0$i$i605 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$143 >> 2] | 0) + 36 >> 2] & 127]($143) | 0; else $retval$0$i$i605 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$144 >> 2] | 0) | 0;
     if (($retval$0$i$i605 | 0) != (HEAP32[$__sym_curr_char$sroa$0$0$ptr >> 2] | 0)) break;
     $149 = HEAP32[$__b >> 2] | 0;
     $__ninp_$i$i609 = $149 + 12 | 0;
     $150 = HEAP32[$__ninp_$i$i609 >> 2] | 0;
     if (($150 | 0) == (HEAP32[$149 + 16 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[$149 >> 2] | 0) + 40 >> 2] & 127]($149) | 0; else {
      HEAP32[$__ninp_$i$i609 >> 2] = $150 + 4;
      __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$150 >> 2] | 0) | 0;
     }
     $130 = HEAP8[$__size_$i$i$i404 >> 0] | 0;
     $132 = HEAP32[$__sym >> 2] | 0;
     $138 = $294;
     $__sym_curr_char$sroa$0$0$ptr = $__sym_curr_char$sroa$0$0$ptr + 4 | 0;
    }
    if ($cmp94895) {
     $154 = HEAP8[$__size_$i$i$i404 >> 0] | 0;
     $tobool$i$i$i623 = $154 << 24 >> 24 < 0;
     if (($__sym_curr_char$sroa$0$0$ptr | 0) == (($tobool$i$i$i623 ? HEAP32[$__sym >> 2] | 0 : $__sym) + (($tobool$i$i$i623 ? HEAP32[$__size_$i2$i$i541 >> 2] | 0 : $154 & 255) << 2) | 0)) $__trailing_sign$1 = $__trailing_sign$0; else {
      label = 146;
      break L21;
     }
    } else $__trailing_sign$1 = $__trailing_sign$0;
    break;
   }
  case 4:
   {
    $163 = $284;
    $285 = $284;
    $__ng$0 = 0;
    L161 : while (1) {
     $158 = HEAP32[$__b >> 2] | 0;
     do if (!$158) $295 = 1; else {
      $159 = HEAP32[$158 + 12 >> 2] | 0;
      if (($159 | 0) == (HEAP32[$158 + 16 >> 2] | 0)) $retval$0$i$i$i$i649 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$158 >> 2] | 0) + 36 >> 2] & 127]($158) | 0; else $retval$0$i$i$i$i649 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$159 >> 2] | 0) | 0;
      if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i$i$i649, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
       HEAP32[$__b >> 2] = 0;
       $295 = 1;
       break;
      } else {
       $295 = (HEAP32[$__b >> 2] | 0) == 0;
       break;
      }
     } while (0);
     do if (!$163) {
      $296 = $285;
      label = 160;
     } else {
      $164 = HEAP32[$163 + 12 >> 2] | 0;
      if (($164 | 0) == (HEAP32[$163 + 16 >> 2] | 0)) $retval$0$i$i13$i$i670 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$163 >> 2] | 0) + 36 >> 2] & 127]($163) | 0; else $retval$0$i$i13$i$i670 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$164 >> 2] | 0) | 0;
      if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i13$i$i670, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
       HEAP32[$__e >> 2] = 0;
       $296 = 0;
       label = 160;
       break;
      } else if ($295) {
       $297 = $285;
       $298 = $163;
       break;
      } else {
       $198 = $285;
       break L161;
      }
     } while (0);
     if ((label | 0) == 160) {
      label = 0;
      if ($295) {
       $198 = $296;
       break;
      } else {
       $297 = $296;
       $298 = 0;
      }
     }
     $168 = HEAP32[$__b >> 2] | 0;
     $169 = HEAP32[$168 + 12 >> 2] | 0;
     if (($169 | 0) == (HEAP32[$168 + 16 >> 2] | 0)) $retval$0$i$i689 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$168 >> 2] | 0) + 36 >> 2] & 127]($168) | 0; else $retval$0$i$i689 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$169 >> 2] | 0) | 0;
     if (FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$__ct >> 2] | 0) + 12 >> 2] & 63]($__ct, 2048, $retval$0$i$i689) | 0) {
      $174 = HEAP32[$__wn >> 2] | 0;
      if (($174 | 0) == (HEAP32[$__we$addr >> 2] | 0)) {
       __ZNSt3__219__double_or_nothingIwEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_($__wb, $__wn, $__we$addr);
       $176 = HEAP32[$__wn >> 2] | 0;
      } else $176 = $174;
      HEAP32[$__wn >> 2] = $176 + 4;
      HEAP32[$176 >> 2] = $retval$0$i$i689;
      $__ng$2$ph = $__ng$0 + 1 | 0;
     } else {
      $177 = HEAP8[$__size_$i$i694 >> 0] | 0;
      if (!(($retval$0$i$i689 | 0) == (HEAP32[$__ts >> 2] | 0) & ($__ng$0 | 0 ? (($177 << 24 >> 24 < 0 ? HEAP32[$__size_$i3$i >> 2] | 0 : $177 & 255) | 0) != 0 : 0))) {
       $198 = $297;
       break;
      }
      $180 = HEAP32[$__gn >> 2] | 0;
      if (($180 | 0) == (HEAP32[$__ge >> 2] | 0)) {
       __ZNSt3__219__double_or_nothingIjEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_($__gb, $__gn, $__ge);
       $182 = HEAP32[$__gn >> 2] | 0;
      } else $182 = $180;
      HEAP32[$__gn >> 2] = $182 + 4;
      HEAP32[$182 >> 2] = $__ng$0;
      $__ng$2$ph = 0;
     }
     $183 = HEAP32[$__b >> 2] | 0;
     $__ninp_$i$i701 = $183 + 12 | 0;
     $184 = HEAP32[$__ninp_$i$i701 >> 2] | 0;
     if (($184 | 0) == (HEAP32[$183 + 16 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[$183 >> 2] | 0) + 40 >> 2] & 127]($183) | 0; else {
      HEAP32[$__ninp_$i$i701 >> 2] = $184 + 4;
      __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$184 >> 2] | 0) | 0;
     }
     $163 = $298;
     $285 = $297;
     $__ng$0 = $__ng$2$ph;
    }
    $189 = HEAP32[$__gn >> 2] | 0;
    if ($__ng$0 | 0 ? (HEAP32[$__gb >> 2] | 0) != ($189 | 0) : 0) {
     if (($189 | 0) == (HEAP32[$__ge >> 2] | 0)) {
      __ZNSt3__219__double_or_nothingIjEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_($__gb, $__gn, $__ge);
      $191 = HEAP32[$__gn >> 2] | 0;
     } else $191 = $189;
     HEAP32[$__gn >> 2] = $191 + 4;
     HEAP32[$191 >> 2] = $__ng$0;
    }
    L211 : do if ((HEAP32[$__fd >> 2] | 0) > 0) {
     $193 = HEAP32[$__b >> 2] | 0;
     do if (!$193) $299 = 1; else {
      $194 = HEAP32[$193 + 12 >> 2] | 0;
      if (($194 | 0) == (HEAP32[$193 + 16 >> 2] | 0)) $retval$0$i$i$i$i725 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$193 >> 2] | 0) + 36 >> 2] & 127]($193) | 0; else $retval$0$i$i$i$i725 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$194 >> 2] | 0) | 0;
      if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i$i$i725, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
       HEAP32[$__b >> 2] = 0;
       $299 = 1;
       break;
      } else {
       $299 = (HEAP32[$__b >> 2] | 0) == 0;
       break;
      }
     } while (0);
     do if (!$198) label = 195; else {
      $199 = HEAP32[$198 + 12 >> 2] | 0;
      if (($199 | 0) == (HEAP32[$198 + 16 >> 2] | 0)) $retval$0$i$i13$i$i746 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$198 >> 2] | 0) + 36 >> 2] & 127]($198) | 0; else $retval$0$i$i13$i$i746 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$199 >> 2] | 0) | 0;
      if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i13$i$i746, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
       HEAP32[$__e >> 2] = 0;
       label = 195;
       break;
      } else if ($299) {
       $300 = $198;
       break;
      } else {
       label = 201;
       break L21;
      }
     } while (0);
     if ((label | 0) == 195) {
      label = 0;
      if ($299) {
       label = 201;
       break L21;
      } else $300 = 0;
     }
     $203 = HEAP32[$__b >> 2] | 0;
     $204 = HEAP32[$203 + 12 >> 2] | 0;
     if (($204 | 0) == (HEAP32[$203 + 16 >> 2] | 0)) $retval$0$i$i766 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$203 >> 2] | 0) + 36 >> 2] & 127]($203) | 0; else $retval$0$i$i766 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$204 >> 2] | 0) | 0;
     if (($retval$0$i$i766 | 0) != (HEAP32[$__dp >> 2] | 0)) {
      label = 201;
      break L21;
     }
     $210 = HEAP32[$__b >> 2] | 0;
     $__ninp_$i$i769 = $210 + 12 | 0;
     $211 = HEAP32[$__ninp_$i$i769 >> 2] | 0;
     if (($211 | 0) == (HEAP32[$210 + 16 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[$210 >> 2] | 0) + 40 >> 2] & 127]($210) | 0; else {
      HEAP32[$__ninp_$i$i769 >> 2] = $211 + 4;
      __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$211 >> 2] | 0) | 0;
     }
     $221 = $300;
     while (1) {
      if ((HEAP32[$__fd >> 2] | 0) <= 0) break L211;
      $216 = HEAP32[$__b >> 2] | 0;
      do if (!$216) $301 = 1; else {
       $217 = HEAP32[$216 + 12 >> 2] | 0;
       if (($217 | 0) == (HEAP32[$216 + 16 >> 2] | 0)) $retval$0$i$i$i$i792 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$216 >> 2] | 0) + 36 >> 2] & 127]($216) | 0; else $retval$0$i$i$i$i792 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$217 >> 2] | 0) | 0;
       if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i$i$i792, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
        HEAP32[$__b >> 2] = 0;
        $301 = 1;
        break;
       } else {
        $301 = (HEAP32[$__b >> 2] | 0) == 0;
        break;
       }
      } while (0);
      do if (!$221) label = 220; else {
       $222 = HEAP32[$221 + 12 >> 2] | 0;
       if (($222 | 0) == (HEAP32[$221 + 16 >> 2] | 0)) $retval$0$i$i13$i$i813 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$221 >> 2] | 0) + 36 >> 2] & 127]($221) | 0; else $retval$0$i$i13$i$i813 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$222 >> 2] | 0) | 0;
       if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i13$i$i813, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
        HEAP32[$__e >> 2] = 0;
        label = 220;
        break;
       } else if ($301) {
        $302 = $221;
        break;
       } else {
        label = 226;
        break L21;
       }
      } while (0);
      if ((label | 0) == 220) {
       label = 0;
       if ($301) {
        label = 226;
        break L21;
       } else $302 = 0;
      }
      $226 = HEAP32[$__b >> 2] | 0;
      $227 = HEAP32[$226 + 12 >> 2] | 0;
      if (($227 | 0) == (HEAP32[$226 + 16 >> 2] | 0)) $retval$0$i$i833 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$226 >> 2] | 0) + 36 >> 2] & 127]($226) | 0; else $retval$0$i$i833 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$227 >> 2] | 0) | 0;
      if (!(FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$__ct >> 2] | 0) + 12 >> 2] & 63]($__ct, 2048, $retval$0$i$i833) | 0)) {
       label = 226;
       break L21;
      }
      if ((HEAP32[$__wn >> 2] | 0) == (HEAP32[$__we$addr >> 2] | 0)) __ZNSt3__219__double_or_nothingIwEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_($__wb, $__wn, $__we$addr);
      $235 = HEAP32[$__b >> 2] | 0;
      $236 = HEAP32[$235 + 12 >> 2] | 0;
      if (($236 | 0) == (HEAP32[$235 + 16 >> 2] | 0)) $retval$0$i$i848 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$235 >> 2] | 0) + 36 >> 2] & 127]($235) | 0; else $retval$0$i$i848 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$236 >> 2] | 0) | 0;
      $240 = HEAP32[$__wn >> 2] | 0;
      HEAP32[$__wn >> 2] = $240 + 4;
      HEAP32[$240 >> 2] = $retval$0$i$i848;
      HEAP32[$__fd >> 2] = (HEAP32[$__fd >> 2] | 0) + -1;
      $242 = HEAP32[$__b >> 2] | 0;
      $__ninp_$i$i851 = $242 + 12 | 0;
      $243 = HEAP32[$__ninp_$i$i851 >> 2] | 0;
      if (($243 | 0) == (HEAP32[$242 + 16 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[$242 >> 2] | 0) + 40 >> 2] & 127]($242) | 0; else {
       HEAP32[$__ninp_$i$i851 >> 2] = $243 + 4;
       __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$243 >> 2] | 0) | 0;
      }
      $221 = $302;
     }
    } while (0);
    if ((HEAP32[$__wn >> 2] | 0) == (HEAP32[$__wb >> 2] | 0)) {
     label = 237;
     break L21;
    } else $__trailing_sign$1 = $__trailing_sign$0;
    break;
   }
  default:
   $__trailing_sign$1 = $__trailing_sign$0;
  } while (0);
  L286 : do if ((label | 0) == 46) {
   label = 0;
   $35 = $284;
   while (1) {
    $30 = HEAP32[$__b >> 2] | 0;
    do if (!$30) $286 = 1; else {
     $31 = HEAP32[$30 + 12 >> 2] | 0;
     if (($31 | 0) == (HEAP32[$30 + 16 >> 2] | 0)) $retval$0$i$i$i$i169 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$30 >> 2] | 0) + 36 >> 2] & 127]($30) | 0; else $retval$0$i$i$i$i169 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$31 >> 2] | 0) | 0;
     if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i$i$i169, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
      HEAP32[$__b >> 2] = 0;
      $286 = 1;
      break;
     } else {
      $286 = (HEAP32[$__b >> 2] | 0) == 0;
      break;
     }
    } while (0);
    do if (!$35) label = 60; else {
     $36 = HEAP32[$35 + 12 >> 2] | 0;
     if (($36 | 0) == (HEAP32[$35 + 16 >> 2] | 0)) $retval$0$i$i13$i$i190 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$35 >> 2] | 0) + 36 >> 2] & 127]($35) | 0; else $retval$0$i$i13$i$i190 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$36 >> 2] | 0) | 0;
     if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i13$i$i190, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
      HEAP32[$__e >> 2] = 0;
      label = 60;
      break;
     } else if ($286) {
      $287 = $35;
      break;
     } else {
      $__trailing_sign$1 = $__trailing_sign$0;
      break L286;
     }
    } while (0);
    if ((label | 0) == 60) {
     label = 0;
     if ($286) {
      $__trailing_sign$1 = $__trailing_sign$0;
      break L286;
     } else $287 = 0;
    }
    $40 = HEAP32[$__b >> 2] | 0;
    $41 = HEAP32[$40 + 12 >> 2] | 0;
    if (($41 | 0) == (HEAP32[$40 + 16 >> 2] | 0)) $retval$0$i$i209 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$40 >> 2] | 0) + 36 >> 2] & 127]($40) | 0; else $retval$0$i$i209 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$41 >> 2] | 0) | 0;
    if (!(FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$__ct >> 2] | 0) + 12 >> 2] & 63]($__ct, 8192, $retval$0$i$i209) | 0)) {
     $__trailing_sign$1 = $__trailing_sign$0;
     break L286;
    }
    $46 = HEAP32[$__b >> 2] | 0;
    $__ninp_$i$i215 = $46 + 12 | 0;
    $47 = HEAP32[$__ninp_$i$i215 >> 2] | 0;
    if (($47 | 0) == (HEAP32[$46 + 16 >> 2] | 0)) $retval$0$i$i225 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$46 >> 2] | 0) + 40 >> 2] & 127]($46) | 0; else {
     HEAP32[$__ninp_$i$i215 >> 2] = $47 + 4;
     $retval$0$i$i225 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$47 >> 2] | 0) | 0;
    }
    __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9push_backEw($__spaces, $retval$0$i$i225);
    $35 = $287;
   }
  } while (0);
  $__p$0 = $__p$0 + 1 | 0;
  $__trailing_sign$0 = $__trailing_sign$1;
 }
 L322 : do if ((label | 0) == 44) {
  HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 4;
  $retval$10 = 0;
 } else if ((label | 0) == 103) {
  HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 4;
  $retval$10 = 0;
 } else if ((label | 0) == 146) {
  HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 4;
  $retval$10 = 0;
 } else if ((label | 0) == 201) {
  HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 4;
  $retval$10 = 0;
 } else if ((label | 0) == 226) {
  HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 4;
  $retval$10 = 0;
 } else if ((label | 0) == 237) {
  HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 4;
  $retval$10 = 0;
 } else if ((label | 0) == 239) {
  L324 : do if ($__trailing_sign$0 | 0) {
   $__size_$i$i863 = $__trailing_sign$0 + 8 + 3 | 0;
   $__size_$i2$i865 = $__trailing_sign$0 + 4 | 0;
   $__i$0 = 1;
   L326 : while (1) {
    $251 = HEAP8[$__size_$i$i863 >> 0] | 0;
    if ($251 << 24 >> 24 < 0) $cond$i869 = HEAP32[$__size_$i2$i865 >> 2] | 0; else $cond$i869 = $251 & 255;
    if ($__i$0 >>> 0 >= $cond$i869 >>> 0) break L324;
    $253 = HEAP32[$__b >> 2] | 0;
    do if (!$253) $303 = 1; else {
     $254 = HEAP32[$253 + 12 >> 2] | 0;
     if (($254 | 0) == (HEAP32[$253 + 16 >> 2] | 0)) $retval$0$i$i$i$i500 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$253 >> 2] | 0) + 36 >> 2] & 127]($253) | 0; else $retval$0$i$i$i$i500 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$254 >> 2] | 0) | 0;
     if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i$i$i500, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
      HEAP32[$__b >> 2] = 0;
      $303 = 1;
      break;
     } else {
      $303 = (HEAP32[$__b >> 2] | 0) == 0;
      break;
     }
    } while (0);
    $258 = HEAP32[$__e >> 2] | 0;
    do if (!$258) label = 258; else {
     $259 = HEAP32[$258 + 12 >> 2] | 0;
     if (($259 | 0) == (HEAP32[$258 + 16 >> 2] | 0)) $retval$0$i$i13$i$i521 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$258 >> 2] | 0) + 36 >> 2] & 127]($258) | 0; else $retval$0$i$i13$i$i521 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$259 >> 2] | 0) | 0;
     if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i13$i$i521, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
      HEAP32[$__e >> 2] = 0;
      label = 258;
      break;
     } else if ($303) break; else break L326;
    } while (0);
    if ((label | 0) == 258) {
     label = 0;
     if ($303) break;
    }
    $263 = HEAP32[$__b >> 2] | 0;
    $264 = HEAP32[$263 + 12 >> 2] | 0;
    if (($264 | 0) == (HEAP32[$263 + 16 >> 2] | 0)) $retval$0$i$i471 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$263 >> 2] | 0) + 36 >> 2] & 127]($263) | 0; else $retval$0$i$i471 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$264 >> 2] | 0) | 0;
    if ((HEAP8[$__size_$i$i863 >> 0] | 0) < 0) $cond$i$i$i = HEAP32[$__trailing_sign$0 >> 2] | 0; else $cond$i$i$i = $__trailing_sign$0;
    if (($retval$0$i$i471 | 0) != (HEAP32[$cond$i$i$i + ($__i$0 << 2) >> 2] | 0)) break;
    $272 = HEAP32[$__b >> 2] | 0;
    $__ninp_$i$i = $272 + 12 | 0;
    $273 = HEAP32[$__ninp_$i$i >> 2] | 0;
    if (($273 | 0) == (HEAP32[$272 + 16 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[$272 >> 2] | 0) + 40 >> 2] & 127]($272) | 0; else {
     HEAP32[$__ninp_$i$i >> 2] = $273 + 4;
     __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$273 >> 2] | 0) | 0;
    }
    $__i$0 = $__i$0 + 1 | 0;
   }
   HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 4;
   $retval$10 = 0;
   break L322;
  } while (0);
  $277 = HEAP32[$__gb >> 2] | 0;
  $278 = HEAP32[$__gn >> 2] | 0;
  if (($277 | 0) == ($278 | 0)) $retval$10 = 1; else {
   HEAP32[$__et >> 2] = 0;
   __ZNSt3__216__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grp, $277, $278, $__et);
   if (!(HEAP32[$__et >> 2] | 0)) {
    $retval$10 = 1;
    break;
   } else {
    HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 4;
    $retval$10 = 0;
    break;
   }
  }
 } while (0);
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($__spaces);
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($__nsn);
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($__psn);
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($__sym);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grp);
 $281 = HEAP32[$__gb >> 2] | 0;
 HEAP32[$__gb >> 2] = 0;
 if ($281 | 0) FUNCTION_TABLE_vi[HEAP32[$__gb + 4 >> 2] & 255]($281);
 STACKTOP = sp;
 return $retval$10 | 0;
}

function _stbi__create_png_image_raw($a, $raw, $raw_len, $out_n, $x, $y, $depth, $color) {
 $a = $a | 0;
 $raw = $raw | 0;
 $raw_len = $raw_len | 0;
 $out_n = $out_n | 0;
 $x = $x | 0;
 $y = $y | 0;
 $depth = $depth | 0;
 $color = $color | 0;
 var $41 = 0, $430 = 0, $434 = 0, $441 = 0, $449 = 0, $453 = 0, $457 = 0, $461 = 0, $468 = 0, $473 = 0, $478 = 0, $486 = 0, $490 = 0, $494 = 0, $498 = 0, $502 = 0, $506 = 0, $510 = 0, $514 = 0, $521 = 0, $526 = 0, $531 = 0, $536 = 0, $541 = 0, $546 = 0, $551 = 0, $607 = 0, $a$addr = 0, $add$ptr496 = 0, $add$ptr498 = 0, $bytes = 0, $call = 0, $color$addr = 0, $cond505 = 0, $conv193 = 0, $conv205 = 0, $conv234 = 0, $conv241 = 0, $conv377 = 0, $conv389 = 0, $conv442 = 0, $conv449 = 0, $conv519 = 0, $conv525 = 0, $conv538 = 0, $conv554 = 0, $conv561 = 0, $conv568 = 0, $conv574 = 0, $conv587 = 0, $conv598 = 0, $conv609 = 0, $conv625 = 0, $conv632 = 0, $conv639 = 0, $conv646 = 0, $conv653 = 0, $conv660 = 0, $conv667 = 0, $conv673 = 0, $conv686 = 0, $conv697 = 0, $conv708 = 0, $conv719 = 0, $conv730 = 0, $conv741 = 0, $conv752 = 0, $conv86 = 0, $cur = 0, $cur16 = 0, $cur490 = 0, $cur826 = 0, $depth$addr = 0, $filter = 0, $filter_bytes = 0, $i = 0, $img_len = 0, $img_n = 0, $img_width_bytes = 0, $in = 0, $j = 0, $k = 0, $mul = 0, $mul17 = 0, $mul42 = 0, $mul829 = 0, $nk = 0, $out_n$addr = 0, $output_bytes = 0, $prior = 0, $q = 0, $raw$addr = 0, $raw_len$addr = 0, $retval = 0, $s = 0, $scale = 0, $stride = 0, $width = 0, $x$addr = 0, $y$addr = 0, label = 0, sp = 0, CSE$0 = 0, CSE$1 = 0, CSE$2 = 0, CSE$3 = 0, CSE$4 = 0, CSE$5 = 0, CSE$6 = 0, CSE$7 = 0, CSE$8 = 0, CSE$9 = 0, CSE$10 = 0, CSE$11 = 0, CSE$12 = 0, CSE$13 = 0, CSE$14 = 0, CSE$15 = 0, CSE$16 = 0, CSE$17 = 0, CSE$18 = 0, CSE$19 = 0, CSE$20 = 0, CSE$21 = 0, CSE$22 = 0, CSE$23 = 0, CSE$24 = 0, CSE$25 = 0, CSE$26 = 0, CSE$27 = 0, CSE$28 = 0, CSE$29 = 0, CSE$30 = 0, CSE$31 = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(128);
 $retval = sp + 116 | 0;
 $a$addr = sp + 112 | 0;
 $raw$addr = sp + 108 | 0;
 $raw_len$addr = sp + 104 | 0;
 $out_n$addr = sp + 100 | 0;
 $x$addr = sp + 96 | 0;
 $y$addr = sp + 92 | 0;
 $depth$addr = sp + 88 | 0;
 $color$addr = sp + 84 | 0;
 $bytes = sp + 80 | 0;
 $s = sp + 76 | 0;
 $i = sp + 72 | 0;
 $j = sp + 68 | 0;
 $stride = sp + 64 | 0;
 $img_len = sp + 60 | 0;
 $img_width_bytes = sp + 56 | 0;
 $k = sp + 52 | 0;
 $img_n = sp + 48 | 0;
 $output_bytes = sp + 44 | 0;
 $filter_bytes = sp + 40 | 0;
 $width = sp + 36 | 0;
 $cur = sp + 32 | 0;
 $prior = sp + 28 | 0;
 $filter = sp + 24 | 0;
 $nk = sp + 20 | 0;
 $cur490 = sp + 16 | 0;
 $in = sp + 12 | 0;
 $scale = sp + 120 | 0;
 $q = sp + 8 | 0;
 $cur826 = sp + 4 | 0;
 $cur16 = sp;
 HEAP32[$a$addr >> 2] = $a;
 HEAP32[$raw$addr >> 2] = $raw;
 HEAP32[$raw_len$addr >> 2] = $raw_len;
 HEAP32[$out_n$addr >> 2] = $out_n;
 HEAP32[$x$addr >> 2] = $x;
 HEAP32[$y$addr >> 2] = $y;
 HEAP32[$depth$addr >> 2] = $depth;
 HEAP32[$color$addr >> 2] = $color;
 HEAP32[$bytes >> 2] = (HEAP32[$depth$addr >> 2] | 0) == 16 ? 2 : 1;
 HEAP32[$s >> 2] = HEAP32[HEAP32[$a$addr >> 2] >> 2];
 $mul = Math_imul(HEAP32[$x$addr >> 2] | 0, HEAP32[$out_n$addr >> 2] | 0) | 0;
 HEAP32[$stride >> 2] = Math_imul($mul, HEAP32[$bytes >> 2] | 0) | 0;
 HEAP32[$img_n >> 2] = HEAP32[(HEAP32[$s >> 2] | 0) + 8 >> 2];
 HEAP32[$output_bytes >> 2] = Math_imul(HEAP32[$out_n$addr >> 2] | 0, HEAP32[$bytes >> 2] | 0) | 0;
 HEAP32[$filter_bytes >> 2] = Math_imul(HEAP32[$img_n >> 2] | 0, HEAP32[$bytes >> 2] | 0) | 0;
 HEAP32[$width >> 2] = HEAP32[$x$addr >> 2];
 if ((HEAP32[$out_n$addr >> 2] | 0) != (HEAP32[(HEAP32[$s >> 2] | 0) + 8 >> 2] | 0)) if ((HEAP32[$out_n$addr >> 2] | 0) != ((HEAP32[(HEAP32[$s >> 2] | 0) + 8 >> 2] | 0) + 1 | 0)) ___assert_fail(33511, 32781, 4410, 33552);
 $call = _stbi__malloc_mad3(HEAP32[$x$addr >> 2] | 0, HEAP32[$y$addr >> 2] | 0, HEAP32[$output_bytes >> 2] | 0, 0) | 0;
 HEAP32[(HEAP32[$a$addr >> 2] | 0) + 12 >> 2] = $call;
 if (!(HEAP32[(HEAP32[$a$addr >> 2] | 0) + 12 >> 2] | 0)) {
  HEAP32[$retval >> 2] = _stbi__err(32857) | 0;
  $607 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $607 | 0;
 }
 if (!(_stbi__mad3sizes_valid(HEAP32[$img_n >> 2] | 0, HEAP32[$x$addr >> 2] | 0, HEAP32[$depth$addr >> 2] | 0, 7) | 0)) {
  HEAP32[$retval >> 2] = _stbi__err(32985) | 0;
  $607 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $607 | 0;
 }
 $mul17 = Math_imul(HEAP32[$img_n >> 2] | 0, HEAP32[$x$addr >> 2] | 0) | 0;
 HEAP32[$img_width_bytes >> 2] = ((Math_imul($mul17, HEAP32[$depth$addr >> 2] | 0) | 0) + 7 | 0) >>> 3;
 HEAP32[$img_len >> 2] = Math_imul((HEAP32[$img_width_bytes >> 2] | 0) + 1 | 0, HEAP32[$y$addr >> 2] | 0) | 0;
 if ((HEAP32[$raw_len$addr >> 2] | 0) >>> 0 < (HEAP32[$img_len >> 2] | 0) >>> 0) {
  HEAP32[$retval >> 2] = _stbi__err(33579) | 0;
  $607 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $607 | 0;
 }
 HEAP32[$j >> 2] = 0;
 L17 : while (1) {
  if ((HEAP32[$j >> 2] | 0) >>> 0 >= (HEAP32[$y$addr >> 2] | 0) >>> 0) {
   label = 113;
   break;
  }
  HEAP32[$cur >> 2] = (HEAP32[(HEAP32[$a$addr >> 2] | 0) + 12 >> 2] | 0) + (Math_imul(HEAP32[$stride >> 2] | 0, HEAP32[$j >> 2] | 0) | 0);
  $41 = HEAP32[$raw$addr >> 2] | 0;
  HEAP32[$raw$addr >> 2] = $41 + 1;
  HEAP32[$filter >> 2] = HEAPU8[$41 >> 0];
  if ((HEAP32[$filter >> 2] | 0) > 4) {
   label = 13;
   break;
  }
  if ((HEAP32[$depth$addr >> 2] | 0) < 8) {
   if ((HEAP32[$img_width_bytes >> 2] | 0) >>> 0 > (HEAP32[$x$addr >> 2] | 0) >>> 0) {
    label = 16;
    break;
   }
   $mul42 = Math_imul(HEAP32[$x$addr >> 2] | 0, HEAP32[$out_n$addr >> 2] | 0) | 0;
   HEAP32[$cur >> 2] = (HEAP32[$cur >> 2] | 0) + ($mul42 - (HEAP32[$img_width_bytes >> 2] | 0));
   HEAP32[$filter_bytes >> 2] = 1;
   HEAP32[$width >> 2] = HEAP32[$img_width_bytes >> 2];
  }
  HEAP32[$prior >> 2] = (HEAP32[$cur >> 2] | 0) + (0 - (HEAP32[$stride >> 2] | 0));
  if (!(HEAP32[$j >> 2] | 0)) HEAP32[$filter >> 2] = HEAPU8[33633 + (HEAP32[$filter >> 2] | 0) >> 0];
  HEAP32[$k >> 2] = 0;
  while (1) {
   if ((HEAP32[$k >> 2] | 0) >= (HEAP32[$filter_bytes >> 2] | 0)) break;
   switch (HEAP32[$filter >> 2] | 0) {
   case 0:
    {
     CSE$0 = HEAP32[$k >> 2] | 0;
     HEAP8[(HEAP32[$cur >> 2] | 0) + CSE$0 >> 0] = HEAP8[(HEAP32[$raw$addr >> 2] | 0) + CSE$0 >> 0] | 0;
     break;
    }
   case 1:
    {
     CSE$1 = HEAP32[$k >> 2] | 0;
     HEAP8[(HEAP32[$cur >> 2] | 0) + CSE$1 >> 0] = HEAP8[(HEAP32[$raw$addr >> 2] | 0) + CSE$1 >> 0] | 0;
     break;
    }
   case 2:
    {
     CSE$2 = HEAP32[$k >> 2] | 0;
     HEAP8[(HEAP32[$cur >> 2] | 0) + CSE$2 >> 0] = (HEAPU8[(HEAP32[$raw$addr >> 2] | 0) + CSE$2 >> 0] | 0) + (HEAPU8[(HEAP32[$prior >> 2] | 0) + CSE$2 >> 0] | 0);
     break;
    }
   case 3:
    {
     CSE$3 = HEAP32[$k >> 2] | 0;
     HEAP8[(HEAP32[$cur >> 2] | 0) + CSE$3 >> 0] = (HEAPU8[(HEAP32[$raw$addr >> 2] | 0) + CSE$3 >> 0] | 0) + (HEAPU8[(HEAP32[$prior >> 2] | 0) + CSE$3 >> 0] >> 1);
     break;
    }
   case 4:
    {
     CSE$4 = HEAP32[$k >> 2] | 0;
     $conv86 = (HEAPU8[(HEAP32[$raw$addr >> 2] | 0) + CSE$4 >> 0] | 0) + (_stbi__paeth(0, HEAPU8[(HEAP32[$prior >> 2] | 0) + CSE$4 >> 0] | 0, 0) | 0) & 255;
     HEAP8[(HEAP32[$cur >> 2] | 0) + (HEAP32[$k >> 2] | 0) >> 0] = $conv86;
     break;
    }
   case 5:
    {
     CSE$5 = HEAP32[$k >> 2] | 0;
     HEAP8[(HEAP32[$cur >> 2] | 0) + CSE$5 >> 0] = HEAP8[(HEAP32[$raw$addr >> 2] | 0) + CSE$5 >> 0] | 0;
     break;
    }
   case 6:
    {
     CSE$6 = HEAP32[$k >> 2] | 0;
     HEAP8[(HEAP32[$cur >> 2] | 0) + CSE$6 >> 0] = HEAP8[(HEAP32[$raw$addr >> 2] | 0) + CSE$6 >> 0] | 0;
     break;
    }
   default:
    {}
   }
   HEAP32[$k >> 2] = (HEAP32[$k >> 2] | 0) + 1;
  }
  do if ((HEAP32[$depth$addr >> 2] | 0) == 8) {
   if ((HEAP32[$img_n >> 2] | 0) != (HEAP32[$out_n$addr >> 2] | 0)) HEAP8[(HEAP32[$cur >> 2] | 0) + (HEAP32[$img_n >> 2] | 0) >> 0] = -1;
   HEAP32[$raw$addr >> 2] = (HEAP32[$raw$addr >> 2] | 0) + (HEAP32[$img_n >> 2] | 0);
   HEAP32[$cur >> 2] = (HEAP32[$cur >> 2] | 0) + (HEAP32[$out_n$addr >> 2] | 0);
   HEAP32[$prior >> 2] = (HEAP32[$prior >> 2] | 0) + (HEAP32[$out_n$addr >> 2] | 0);
  } else {
   if ((HEAP32[$depth$addr >> 2] | 0) != 16) {
    HEAP32[$raw$addr >> 2] = (HEAP32[$raw$addr >> 2] | 0) + 1;
    HEAP32[$cur >> 2] = (HEAP32[$cur >> 2] | 0) + 1;
    HEAP32[$prior >> 2] = (HEAP32[$prior >> 2] | 0) + 1;
    break;
   }
   if ((HEAP32[$img_n >> 2] | 0) != (HEAP32[$out_n$addr >> 2] | 0)) {
    HEAP8[(HEAP32[$cur >> 2] | 0) + (HEAP32[$filter_bytes >> 2] | 0) >> 0] = -1;
    HEAP8[(HEAP32[$cur >> 2] | 0) + ((HEAP32[$filter_bytes >> 2] | 0) + 1) >> 0] = -1;
   }
   HEAP32[$raw$addr >> 2] = (HEAP32[$raw$addr >> 2] | 0) + (HEAP32[$filter_bytes >> 2] | 0);
   HEAP32[$cur >> 2] = (HEAP32[$cur >> 2] | 0) + (HEAP32[$output_bytes >> 2] | 0);
   HEAP32[$prior >> 2] = (HEAP32[$prior >> 2] | 0) + (HEAP32[$output_bytes >> 2] | 0);
  } while (0);
  L54 : do if ((HEAP32[$depth$addr >> 2] | 0) < 8) label = 42; else if ((HEAP32[$img_n >> 2] | 0) == (HEAP32[$out_n$addr >> 2] | 0)) label = 42; else {
   if (((HEAP32[$img_n >> 2] | 0) + 1 | 0) != (HEAP32[$out_n$addr >> 2] | 0)) {
    label = 64;
    break L17;
   }
   L58 : do switch (HEAP32[$filter >> 2] | 0) {
   case 0:
    {
     HEAP32[$i >> 2] = (HEAP32[$x$addr >> 2] | 0) - 1;
     while (1) {
      if ((HEAP32[$i >> 2] | 0) >>> 0 < 1) break L58;
      HEAP32[$k >> 2] = 0;
      while (1) {
       if ((HEAP32[$k >> 2] | 0) >= (HEAP32[$filter_bytes >> 2] | 0)) break;
       CSE$7 = HEAP32[$k >> 2] | 0;
       HEAP8[(HEAP32[$cur >> 2] | 0) + CSE$7 >> 0] = HEAP8[(HEAP32[$raw$addr >> 2] | 0) + CSE$7 >> 0] | 0;
       HEAP32[$k >> 2] = (HEAP32[$k >> 2] | 0) + 1;
      }
      HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + -1;
      HEAP8[(HEAP32[$cur >> 2] | 0) + (HEAP32[$filter_bytes >> 2] | 0) >> 0] = -1;
      HEAP32[$raw$addr >> 2] = (HEAP32[$raw$addr >> 2] | 0) + (HEAP32[$filter_bytes >> 2] | 0);
      HEAP32[$cur >> 2] = (HEAP32[$cur >> 2] | 0) + (HEAP32[$output_bytes >> 2] | 0);
      HEAP32[$prior >> 2] = (HEAP32[$prior >> 2] | 0) + (HEAP32[$output_bytes >> 2] | 0);
     }
     break;
    }
   case 1:
    {
     HEAP32[$i >> 2] = (HEAP32[$x$addr >> 2] | 0) - 1;
     while (1) {
      if ((HEAP32[$i >> 2] | 0) >>> 0 < 1) break L58;
      HEAP32[$k >> 2] = 0;
      while (1) {
       if ((HEAP32[$k >> 2] | 0) >= (HEAP32[$filter_bytes >> 2] | 0)) break;
       CSE$8 = HEAP32[$k >> 2] | 0;
       CSE$9 = HEAP32[$cur >> 2] | 0;
       HEAP8[CSE$9 + CSE$8 >> 0] = (HEAPU8[(HEAP32[$raw$addr >> 2] | 0) + CSE$8 >> 0] | 0) + (HEAPU8[CSE$9 + (CSE$8 - (HEAP32[$output_bytes >> 2] | 0)) >> 0] | 0);
       HEAP32[$k >> 2] = (HEAP32[$k >> 2] | 0) + 1;
      }
      HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + -1;
      HEAP8[(HEAP32[$cur >> 2] | 0) + (HEAP32[$filter_bytes >> 2] | 0) >> 0] = -1;
      HEAP32[$raw$addr >> 2] = (HEAP32[$raw$addr >> 2] | 0) + (HEAP32[$filter_bytes >> 2] | 0);
      HEAP32[$cur >> 2] = (HEAP32[$cur >> 2] | 0) + (HEAP32[$output_bytes >> 2] | 0);
      HEAP32[$prior >> 2] = (HEAP32[$prior >> 2] | 0) + (HEAP32[$output_bytes >> 2] | 0);
     }
     break;
    }
   case 2:
    {
     HEAP32[$i >> 2] = (HEAP32[$x$addr >> 2] | 0) - 1;
     while (1) {
      if ((HEAP32[$i >> 2] | 0) >>> 0 < 1) break L58;
      HEAP32[$k >> 2] = 0;
      while (1) {
       if ((HEAP32[$k >> 2] | 0) >= (HEAP32[$filter_bytes >> 2] | 0)) break;
       CSE$10 = HEAP32[$k >> 2] | 0;
       HEAP8[(HEAP32[$cur >> 2] | 0) + CSE$10 >> 0] = (HEAPU8[(HEAP32[$raw$addr >> 2] | 0) + CSE$10 >> 0] | 0) + (HEAPU8[(HEAP32[$prior >> 2] | 0) + CSE$10 >> 0] | 0);
       HEAP32[$k >> 2] = (HEAP32[$k >> 2] | 0) + 1;
      }
      HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + -1;
      HEAP8[(HEAP32[$cur >> 2] | 0) + (HEAP32[$filter_bytes >> 2] | 0) >> 0] = -1;
      HEAP32[$raw$addr >> 2] = (HEAP32[$raw$addr >> 2] | 0) + (HEAP32[$filter_bytes >> 2] | 0);
      HEAP32[$cur >> 2] = (HEAP32[$cur >> 2] | 0) + (HEAP32[$output_bytes >> 2] | 0);
      HEAP32[$prior >> 2] = (HEAP32[$prior >> 2] | 0) + (HEAP32[$output_bytes >> 2] | 0);
     }
     break;
    }
   case 3:
    {
     HEAP32[$i >> 2] = (HEAP32[$x$addr >> 2] | 0) - 1;
     while (1) {
      if ((HEAP32[$i >> 2] | 0) >>> 0 < 1) break L58;
      HEAP32[$k >> 2] = 0;
      while (1) {
       if ((HEAP32[$k >> 2] | 0) >= (HEAP32[$filter_bytes >> 2] | 0)) break;
       CSE$11 = HEAP32[$k >> 2] | 0;
       CSE$12 = HEAP32[$cur >> 2] | 0;
       HEAP8[CSE$12 + CSE$11 >> 0] = (HEAPU8[(HEAP32[$raw$addr >> 2] | 0) + CSE$11 >> 0] | 0) + ((HEAPU8[(HEAP32[$prior >> 2] | 0) + CSE$11 >> 0] | 0) + (HEAPU8[CSE$12 + (CSE$11 - (HEAP32[$output_bytes >> 2] | 0)) >> 0] | 0) >> 1);
       HEAP32[$k >> 2] = (HEAP32[$k >> 2] | 0) + 1;
      }
      HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + -1;
      HEAP8[(HEAP32[$cur >> 2] | 0) + (HEAP32[$filter_bytes >> 2] | 0) >> 0] = -1;
      HEAP32[$raw$addr >> 2] = (HEAP32[$raw$addr >> 2] | 0) + (HEAP32[$filter_bytes >> 2] | 0);
      HEAP32[$cur >> 2] = (HEAP32[$cur >> 2] | 0) + (HEAP32[$output_bytes >> 2] | 0);
      HEAP32[$prior >> 2] = (HEAP32[$prior >> 2] | 0) + (HEAP32[$output_bytes >> 2] | 0);
     }
     break;
    }
   case 4:
    {
     HEAP32[$i >> 2] = (HEAP32[$x$addr >> 2] | 0) - 1;
     while (1) {
      if ((HEAP32[$i >> 2] | 0) >>> 0 < 1) break L58;
      HEAP32[$k >> 2] = 0;
      while (1) {
       if ((HEAP32[$k >> 2] | 0) >= (HEAP32[$filter_bytes >> 2] | 0)) break;
       $conv377 = HEAPU8[(HEAP32[$raw$addr >> 2] | 0) + (HEAP32[$k >> 2] | 0) >> 0] | 0;
       CSE$13 = HEAP32[$k >> 2] | 0;
       CSE$14 = HEAP32[$prior >> 2] | 0;
       CSE$15 = (HEAP32[$k >> 2] | 0) - (HEAP32[$output_bytes >> 2] | 0) | 0;
       $conv389 = $conv377 + (_stbi__paeth(HEAPU8[(HEAP32[$cur >> 2] | 0) + CSE$15 >> 0] | 0, HEAPU8[CSE$14 + CSE$13 >> 0] | 0, HEAPU8[CSE$14 + CSE$15 >> 0] | 0) | 0) & 255;
       HEAP8[(HEAP32[$cur >> 2] | 0) + (HEAP32[$k >> 2] | 0) >> 0] = $conv389;
       HEAP32[$k >> 2] = (HEAP32[$k >> 2] | 0) + 1;
      }
      HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + -1;
      HEAP8[(HEAP32[$cur >> 2] | 0) + (HEAP32[$filter_bytes >> 2] | 0) >> 0] = -1;
      HEAP32[$raw$addr >> 2] = (HEAP32[$raw$addr >> 2] | 0) + (HEAP32[$filter_bytes >> 2] | 0);
      HEAP32[$cur >> 2] = (HEAP32[$cur >> 2] | 0) + (HEAP32[$output_bytes >> 2] | 0);
      HEAP32[$prior >> 2] = (HEAP32[$prior >> 2] | 0) + (HEAP32[$output_bytes >> 2] | 0);
     }
     break;
    }
   case 5:
    {
     HEAP32[$i >> 2] = (HEAP32[$x$addr >> 2] | 0) - 1;
     while (1) {
      if ((HEAP32[$i >> 2] | 0) >>> 0 < 1) break L58;
      HEAP32[$k >> 2] = 0;
      while (1) {
       if ((HEAP32[$k >> 2] | 0) >= (HEAP32[$filter_bytes >> 2] | 0)) break;
       CSE$16 = HEAP32[$k >> 2] | 0;
       CSE$17 = HEAP32[$cur >> 2] | 0;
       HEAP8[CSE$17 + CSE$16 >> 0] = (HEAPU8[(HEAP32[$raw$addr >> 2] | 0) + CSE$16 >> 0] | 0) + (HEAPU8[CSE$17 + (CSE$16 - (HEAP32[$output_bytes >> 2] | 0)) >> 0] >> 1);
       HEAP32[$k >> 2] = (HEAP32[$k >> 2] | 0) + 1;
      }
      HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + -1;
      HEAP8[(HEAP32[$cur >> 2] | 0) + (HEAP32[$filter_bytes >> 2] | 0) >> 0] = -1;
      HEAP32[$raw$addr >> 2] = (HEAP32[$raw$addr >> 2] | 0) + (HEAP32[$filter_bytes >> 2] | 0);
      HEAP32[$cur >> 2] = (HEAP32[$cur >> 2] | 0) + (HEAP32[$output_bytes >> 2] | 0);
      HEAP32[$prior >> 2] = (HEAP32[$prior >> 2] | 0) + (HEAP32[$output_bytes >> 2] | 0);
     }
     break;
    }
   case 6:
    {
     HEAP32[$i >> 2] = (HEAP32[$x$addr >> 2] | 0) - 1;
     while (1) {
      if ((HEAP32[$i >> 2] | 0) >>> 0 < 1) break L58;
      HEAP32[$k >> 2] = 0;
      while (1) {
       if ((HEAP32[$k >> 2] | 0) >= (HEAP32[$filter_bytes >> 2] | 0)) break;
       $conv442 = HEAPU8[(HEAP32[$raw$addr >> 2] | 0) + (HEAP32[$k >> 2] | 0) >> 0] | 0;
       $conv449 = $conv442 + (_stbi__paeth(HEAPU8[(HEAP32[$cur >> 2] | 0) + ((HEAP32[$k >> 2] | 0) - (HEAP32[$output_bytes >> 2] | 0)) >> 0] | 0, 0, 0) | 0) & 255;
       HEAP8[(HEAP32[$cur >> 2] | 0) + (HEAP32[$k >> 2] | 0) >> 0] = $conv449;
       HEAP32[$k >> 2] = (HEAP32[$k >> 2] | 0) + 1;
      }
      HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + -1;
      HEAP8[(HEAP32[$cur >> 2] | 0) + (HEAP32[$filter_bytes >> 2] | 0) >> 0] = -1;
      HEAP32[$raw$addr >> 2] = (HEAP32[$raw$addr >> 2] | 0) + (HEAP32[$filter_bytes >> 2] | 0);
      HEAP32[$cur >> 2] = (HEAP32[$cur >> 2] | 0) + (HEAP32[$output_bytes >> 2] | 0);
      HEAP32[$prior >> 2] = (HEAP32[$prior >> 2] | 0) + (HEAP32[$output_bytes >> 2] | 0);
     }
     break;
    }
   default:
    {}
   } while (0);
   if ((HEAP32[$depth$addr >> 2] | 0) == 16) {
    HEAP32[$cur >> 2] = (HEAP32[(HEAP32[$a$addr >> 2] | 0) + 12 >> 2] | 0) + (Math_imul(HEAP32[$stride >> 2] | 0, HEAP32[$j >> 2] | 0) | 0);
    HEAP32[$i >> 2] = 0;
    while (1) {
     if ((HEAP32[$i >> 2] | 0) >>> 0 >= (HEAP32[$x$addr >> 2] | 0) >>> 0) break L54;
     HEAP8[(HEAP32[$cur >> 2] | 0) + ((HEAP32[$filter_bytes >> 2] | 0) + 1) >> 0] = -1;
     HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
     HEAP32[$cur >> 2] = (HEAP32[$cur >> 2] | 0) + (HEAP32[$output_bytes >> 2] | 0);
    }
   }
  } while (0);
  if ((label | 0) == 42) {
   label = 0;
   HEAP32[$nk >> 2] = Math_imul((HEAP32[$width >> 2] | 0) - 1 | 0, HEAP32[$filter_bytes >> 2] | 0) | 0;
   L122 : do switch (HEAP32[$filter >> 2] | 0) {
   case 0:
    {
     _memcpy(HEAP32[$cur >> 2] | 0, HEAP32[$raw$addr >> 2] | 0, HEAP32[$nk >> 2] | 0) | 0;
     break;
    }
   case 1:
    {
     HEAP32[$k >> 2] = 0;
     while (1) {
      if ((HEAP32[$k >> 2] | 0) >= (HEAP32[$nk >> 2] | 0)) break L122;
      CSE$18 = HEAP32[$k >> 2] | 0;
      CSE$19 = HEAP32[$cur >> 2] | 0;
      HEAP8[CSE$19 + CSE$18 >> 0] = (HEAPU8[(HEAP32[$raw$addr >> 2] | 0) + CSE$18 >> 0] | 0) + (HEAPU8[CSE$19 + (CSE$18 - (HEAP32[$filter_bytes >> 2] | 0)) >> 0] | 0);
      HEAP32[$k >> 2] = (HEAP32[$k >> 2] | 0) + 1;
     }
     break;
    }
   case 2:
    {
     HEAP32[$k >> 2] = 0;
     while (1) {
      if ((HEAP32[$k >> 2] | 0) >= (HEAP32[$nk >> 2] | 0)) break L122;
      CSE$20 = HEAP32[$k >> 2] | 0;
      HEAP8[(HEAP32[$cur >> 2] | 0) + CSE$20 >> 0] = (HEAPU8[(HEAP32[$raw$addr >> 2] | 0) + CSE$20 >> 0] | 0) + (HEAPU8[(HEAP32[$prior >> 2] | 0) + CSE$20 >> 0] | 0);
      HEAP32[$k >> 2] = (HEAP32[$k >> 2] | 0) + 1;
     }
     break;
    }
   case 3:
    {
     HEAP32[$k >> 2] = 0;
     while (1) {
      if ((HEAP32[$k >> 2] | 0) >= (HEAP32[$nk >> 2] | 0)) break L122;
      CSE$21 = HEAP32[$k >> 2] | 0;
      CSE$22 = HEAP32[$cur >> 2] | 0;
      HEAP8[CSE$22 + CSE$21 >> 0] = (HEAPU8[(HEAP32[$raw$addr >> 2] | 0) + CSE$21 >> 0] | 0) + ((HEAPU8[(HEAP32[$prior >> 2] | 0) + CSE$21 >> 0] | 0) + (HEAPU8[CSE$22 + (CSE$21 - (HEAP32[$filter_bytes >> 2] | 0)) >> 0] | 0) >> 1);
      HEAP32[$k >> 2] = (HEAP32[$k >> 2] | 0) + 1;
     }
     break;
    }
   case 4:
    {
     HEAP32[$k >> 2] = 0;
     while (1) {
      if ((HEAP32[$k >> 2] | 0) >= (HEAP32[$nk >> 2] | 0)) break L122;
      $conv193 = HEAPU8[(HEAP32[$raw$addr >> 2] | 0) + (HEAP32[$k >> 2] | 0) >> 0] | 0;
      CSE$23 = HEAP32[$k >> 2] | 0;
      CSE$24 = HEAP32[$prior >> 2] | 0;
      CSE$25 = (HEAP32[$k >> 2] | 0) - (HEAP32[$filter_bytes >> 2] | 0) | 0;
      $conv205 = $conv193 + (_stbi__paeth(HEAPU8[(HEAP32[$cur >> 2] | 0) + CSE$25 >> 0] | 0, HEAPU8[CSE$24 + CSE$23 >> 0] | 0, HEAPU8[CSE$24 + CSE$25 >> 0] | 0) | 0) & 255;
      HEAP8[(HEAP32[$cur >> 2] | 0) + (HEAP32[$k >> 2] | 0) >> 0] = $conv205;
      HEAP32[$k >> 2] = (HEAP32[$k >> 2] | 0) + 1;
     }
     break;
    }
   case 5:
    {
     HEAP32[$k >> 2] = 0;
     while (1) {
      if ((HEAP32[$k >> 2] | 0) >= (HEAP32[$nk >> 2] | 0)) break L122;
      CSE$26 = HEAP32[$k >> 2] | 0;
      CSE$27 = HEAP32[$cur >> 2] | 0;
      HEAP8[CSE$27 + CSE$26 >> 0] = (HEAPU8[(HEAP32[$raw$addr >> 2] | 0) + CSE$26 >> 0] | 0) + (HEAPU8[CSE$27 + (CSE$26 - (HEAP32[$filter_bytes >> 2] | 0)) >> 0] >> 1);
      HEAP32[$k >> 2] = (HEAP32[$k >> 2] | 0) + 1;
     }
     break;
    }
   case 6:
    {
     HEAP32[$k >> 2] = 0;
     while (1) {
      if ((HEAP32[$k >> 2] | 0) >= (HEAP32[$nk >> 2] | 0)) break L122;
      $conv234 = HEAPU8[(HEAP32[$raw$addr >> 2] | 0) + (HEAP32[$k >> 2] | 0) >> 0] | 0;
      $conv241 = $conv234 + (_stbi__paeth(HEAPU8[(HEAP32[$cur >> 2] | 0) + ((HEAP32[$k >> 2] | 0) - (HEAP32[$filter_bytes >> 2] | 0)) >> 0] | 0, 0, 0) | 0) & 255;
      HEAP8[(HEAP32[$cur >> 2] | 0) + (HEAP32[$k >> 2] | 0) >> 0] = $conv241;
      HEAP32[$k >> 2] = (HEAP32[$k >> 2] | 0) + 1;
     }
     break;
    }
   default:
    {}
   } while (0);
   HEAP32[$raw$addr >> 2] = (HEAP32[$raw$addr >> 2] | 0) + (HEAP32[$nk >> 2] | 0);
  }
  HEAP32[$j >> 2] = (HEAP32[$j >> 2] | 0) + 1;
 }
 if ((label | 0) == 13) {
  HEAP32[$retval >> 2] = _stbi__err(33597) | 0;
  $607 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $607 | 0;
 } else if ((label | 0) == 16) ___assert_fail(33612, 32781, 4432, 33552); else if ((label | 0) == 64) ___assert_fail(33638, 32781, 4494, 33552); else if ((label | 0) == 113) {
  L152 : do if ((HEAP32[$depth$addr >> 2] | 0) < 8) {
   HEAP32[$j >> 2] = 0;
   L154 : while (1) {
    if ((HEAP32[$j >> 2] | 0) >>> 0 >= (HEAP32[$y$addr >> 2] | 0) >>> 0) break L152;
    HEAP32[$cur490 >> 2] = (HEAP32[(HEAP32[$a$addr >> 2] | 0) + 12 >> 2] | 0) + (Math_imul(HEAP32[$stride >> 2] | 0, HEAP32[$j >> 2] | 0) | 0);
    $add$ptr496 = (HEAP32[(HEAP32[$a$addr >> 2] | 0) + 12 >> 2] | 0) + (Math_imul(HEAP32[$stride >> 2] | 0, HEAP32[$j >> 2] | 0) | 0) | 0;
    $add$ptr498 = $add$ptr496 + (Math_imul(HEAP32[$x$addr >> 2] | 0, HEAP32[$out_n$addr >> 2] | 0) | 0) | 0;
    HEAP32[$in >> 2] = $add$ptr498 + (0 - (HEAP32[$img_width_bytes >> 2] | 0));
    if (!(HEAP32[$color$addr >> 2] | 0)) $cond505 = HEAPU8[33361 + (HEAP32[$depth$addr >> 2] | 0) >> 0] | 0; else $cond505 = 1;
    HEAP8[$scale >> 0] = $cond505;
    do if ((HEAP32[$depth$addr >> 2] | 0) == 4) {
     HEAP32[$k >> 2] = Math_imul(HEAP32[$x$addr >> 2] | 0, HEAP32[$img_n >> 2] | 0) | 0;
     while (1) {
      if ((HEAP32[$k >> 2] | 0) < 2) break;
      $conv519 = (Math_imul(HEAPU8[$scale >> 0] | 0, HEAPU8[HEAP32[$in >> 2] >> 0] >> 4) | 0) & 255;
      $430 = HEAP32[$cur490 >> 2] | 0;
      HEAP32[$cur490 >> 2] = $430 + 1;
      HEAP8[$430 >> 0] = $conv519;
      $conv525 = (Math_imul(HEAPU8[$scale >> 0] | 0, HEAPU8[HEAP32[$in >> 2] >> 0] & 15) | 0) & 255;
      $434 = HEAP32[$cur490 >> 2] | 0;
      HEAP32[$cur490 >> 2] = $434 + 1;
      HEAP8[$434 >> 0] = $conv525;
      HEAP32[$k >> 2] = (HEAP32[$k >> 2] | 0) - 2;
      HEAP32[$in >> 2] = (HEAP32[$in >> 2] | 0) + 1;
     }
     if ((HEAP32[$k >> 2] | 0) > 0) {
      $conv538 = (Math_imul(HEAPU8[$scale >> 0] | 0, HEAPU8[HEAP32[$in >> 2] >> 0] >> 4) | 0) & 255;
      $441 = HEAP32[$cur490 >> 2] | 0;
      HEAP32[$cur490 >> 2] = $441 + 1;
      HEAP8[$441 >> 0] = $conv538;
     }
    } else {
     if ((HEAP32[$depth$addr >> 2] | 0) == 2) {
      HEAP32[$k >> 2] = Math_imul(HEAP32[$x$addr >> 2] | 0, HEAP32[$img_n >> 2] | 0) | 0;
      while (1) {
       if ((HEAP32[$k >> 2] | 0) < 4) break;
       $conv554 = (Math_imul(HEAPU8[$scale >> 0] | 0, HEAPU8[HEAP32[$in >> 2] >> 0] >> 6) | 0) & 255;
       $449 = HEAP32[$cur490 >> 2] | 0;
       HEAP32[$cur490 >> 2] = $449 + 1;
       HEAP8[$449 >> 0] = $conv554;
       $conv561 = (Math_imul(HEAPU8[$scale >> 0] | 0, HEAPU8[HEAP32[$in >> 2] >> 0] >> 4 & 3) | 0) & 255;
       $453 = HEAP32[$cur490 >> 2] | 0;
       HEAP32[$cur490 >> 2] = $453 + 1;
       HEAP8[$453 >> 0] = $conv561;
       $conv568 = (Math_imul(HEAPU8[$scale >> 0] | 0, HEAPU8[HEAP32[$in >> 2] >> 0] >> 2 & 3) | 0) & 255;
       $457 = HEAP32[$cur490 >> 2] | 0;
       HEAP32[$cur490 >> 2] = $457 + 1;
       HEAP8[$457 >> 0] = $conv568;
       $conv574 = (Math_imul(HEAPU8[$scale >> 0] | 0, HEAPU8[HEAP32[$in >> 2] >> 0] & 3) | 0) & 255;
       $461 = HEAP32[$cur490 >> 2] | 0;
       HEAP32[$cur490 >> 2] = $461 + 1;
       HEAP8[$461 >> 0] = $conv574;
       HEAP32[$k >> 2] = (HEAP32[$k >> 2] | 0) - 4;
       HEAP32[$in >> 2] = (HEAP32[$in >> 2] | 0) + 1;
      }
      if ((HEAP32[$k >> 2] | 0) > 0) {
       $conv587 = (Math_imul(HEAPU8[$scale >> 0] | 0, HEAPU8[HEAP32[$in >> 2] >> 0] >> 6) | 0) & 255;
       $468 = HEAP32[$cur490 >> 2] | 0;
       HEAP32[$cur490 >> 2] = $468 + 1;
       HEAP8[$468 >> 0] = $conv587;
      }
      if ((HEAP32[$k >> 2] | 0) > 1) {
       $conv598 = (Math_imul(HEAPU8[$scale >> 0] | 0, HEAPU8[HEAP32[$in >> 2] >> 0] >> 4 & 3) | 0) & 255;
       $473 = HEAP32[$cur490 >> 2] | 0;
       HEAP32[$cur490 >> 2] = $473 + 1;
       HEAP8[$473 >> 0] = $conv598;
      }
      if ((HEAP32[$k >> 2] | 0) <= 2) break;
      $conv609 = (Math_imul(HEAPU8[$scale >> 0] | 0, HEAPU8[HEAP32[$in >> 2] >> 0] >> 2 & 3) | 0) & 255;
      $478 = HEAP32[$cur490 >> 2] | 0;
      HEAP32[$cur490 >> 2] = $478 + 1;
      HEAP8[$478 >> 0] = $conv609;
      break;
     }
     if ((HEAP32[$depth$addr >> 2] | 0) == 1) {
      HEAP32[$k >> 2] = Math_imul(HEAP32[$x$addr >> 2] | 0, HEAP32[$img_n >> 2] | 0) | 0;
      while (1) {
       if ((HEAP32[$k >> 2] | 0) < 8) break;
       $conv625 = (Math_imul(HEAPU8[$scale >> 0] | 0, HEAPU8[HEAP32[$in >> 2] >> 0] >> 7) | 0) & 255;
       $486 = HEAP32[$cur490 >> 2] | 0;
       HEAP32[$cur490 >> 2] = $486 + 1;
       HEAP8[$486 >> 0] = $conv625;
       $conv632 = (Math_imul(HEAPU8[$scale >> 0] | 0, HEAPU8[HEAP32[$in >> 2] >> 0] >> 6 & 1) | 0) & 255;
       $490 = HEAP32[$cur490 >> 2] | 0;
       HEAP32[$cur490 >> 2] = $490 + 1;
       HEAP8[$490 >> 0] = $conv632;
       $conv639 = (Math_imul(HEAPU8[$scale >> 0] | 0, HEAPU8[HEAP32[$in >> 2] >> 0] >> 5 & 1) | 0) & 255;
       $494 = HEAP32[$cur490 >> 2] | 0;
       HEAP32[$cur490 >> 2] = $494 + 1;
       HEAP8[$494 >> 0] = $conv639;
       $conv646 = (Math_imul(HEAPU8[$scale >> 0] | 0, HEAPU8[HEAP32[$in >> 2] >> 0] >> 4 & 1) | 0) & 255;
       $498 = HEAP32[$cur490 >> 2] | 0;
       HEAP32[$cur490 >> 2] = $498 + 1;
       HEAP8[$498 >> 0] = $conv646;
       $conv653 = (Math_imul(HEAPU8[$scale >> 0] | 0, HEAPU8[HEAP32[$in >> 2] >> 0] >> 3 & 1) | 0) & 255;
       $502 = HEAP32[$cur490 >> 2] | 0;
       HEAP32[$cur490 >> 2] = $502 + 1;
       HEAP8[$502 >> 0] = $conv653;
       $conv660 = (Math_imul(HEAPU8[$scale >> 0] | 0, HEAPU8[HEAP32[$in >> 2] >> 0] >> 2 & 1) | 0) & 255;
       $506 = HEAP32[$cur490 >> 2] | 0;
       HEAP32[$cur490 >> 2] = $506 + 1;
       HEAP8[$506 >> 0] = $conv660;
       $conv667 = (Math_imul(HEAPU8[$scale >> 0] | 0, HEAPU8[HEAP32[$in >> 2] >> 0] >> 1 & 1) | 0) & 255;
       $510 = HEAP32[$cur490 >> 2] | 0;
       HEAP32[$cur490 >> 2] = $510 + 1;
       HEAP8[$510 >> 0] = $conv667;
       $conv673 = (Math_imul(HEAPU8[$scale >> 0] | 0, HEAPU8[HEAP32[$in >> 2] >> 0] & 1) | 0) & 255;
       $514 = HEAP32[$cur490 >> 2] | 0;
       HEAP32[$cur490 >> 2] = $514 + 1;
       HEAP8[$514 >> 0] = $conv673;
       HEAP32[$k >> 2] = (HEAP32[$k >> 2] | 0) - 8;
       HEAP32[$in >> 2] = (HEAP32[$in >> 2] | 0) + 1;
      }
      if ((HEAP32[$k >> 2] | 0) > 0) {
       $conv686 = (Math_imul(HEAPU8[$scale >> 0] | 0, HEAPU8[HEAP32[$in >> 2] >> 0] >> 7) | 0) & 255;
       $521 = HEAP32[$cur490 >> 2] | 0;
       HEAP32[$cur490 >> 2] = $521 + 1;
       HEAP8[$521 >> 0] = $conv686;
      }
      if ((HEAP32[$k >> 2] | 0) > 1) {
       $conv697 = (Math_imul(HEAPU8[$scale >> 0] | 0, HEAPU8[HEAP32[$in >> 2] >> 0] >> 6 & 1) | 0) & 255;
       $526 = HEAP32[$cur490 >> 2] | 0;
       HEAP32[$cur490 >> 2] = $526 + 1;
       HEAP8[$526 >> 0] = $conv697;
      }
      if ((HEAP32[$k >> 2] | 0) > 2) {
       $conv708 = (Math_imul(HEAPU8[$scale >> 0] | 0, HEAPU8[HEAP32[$in >> 2] >> 0] >> 5 & 1) | 0) & 255;
       $531 = HEAP32[$cur490 >> 2] | 0;
       HEAP32[$cur490 >> 2] = $531 + 1;
       HEAP8[$531 >> 0] = $conv708;
      }
      if ((HEAP32[$k >> 2] | 0) > 3) {
       $conv719 = (Math_imul(HEAPU8[$scale >> 0] | 0, HEAPU8[HEAP32[$in >> 2] >> 0] >> 4 & 1) | 0) & 255;
       $536 = HEAP32[$cur490 >> 2] | 0;
       HEAP32[$cur490 >> 2] = $536 + 1;
       HEAP8[$536 >> 0] = $conv719;
      }
      if ((HEAP32[$k >> 2] | 0) > 4) {
       $conv730 = (Math_imul(HEAPU8[$scale >> 0] | 0, HEAPU8[HEAP32[$in >> 2] >> 0] >> 3 & 1) | 0) & 255;
       $541 = HEAP32[$cur490 >> 2] | 0;
       HEAP32[$cur490 >> 2] = $541 + 1;
       HEAP8[$541 >> 0] = $conv730;
      }
      if ((HEAP32[$k >> 2] | 0) > 5) {
       $conv741 = (Math_imul(HEAPU8[$scale >> 0] | 0, HEAPU8[HEAP32[$in >> 2] >> 0] >> 2 & 1) | 0) & 255;
       $546 = HEAP32[$cur490 >> 2] | 0;
       HEAP32[$cur490 >> 2] = $546 + 1;
       HEAP8[$546 >> 0] = $conv741;
      }
      if ((HEAP32[$k >> 2] | 0) <= 6) break;
      $conv752 = (Math_imul(HEAPU8[$scale >> 0] | 0, HEAPU8[HEAP32[$in >> 2] >> 0] >> 1 & 1) | 0) & 255;
      $551 = HEAP32[$cur490 >> 2] | 0;
      HEAP32[$cur490 >> 2] = $551 + 1;
      HEAP8[$551 >> 0] = $conv752;
     }
    } while (0);
    L207 : do if ((HEAP32[$img_n >> 2] | 0) != (HEAP32[$out_n$addr >> 2] | 0)) {
     HEAP32[$cur490 >> 2] = (HEAP32[(HEAP32[$a$addr >> 2] | 0) + 12 >> 2] | 0) + (Math_imul(HEAP32[$stride >> 2] | 0, HEAP32[$j >> 2] | 0) | 0);
     if ((HEAP32[$img_n >> 2] | 0) == 1) {
      HEAP32[$q >> 2] = (HEAP32[$x$addr >> 2] | 0) - 1;
      while (1) {
       if ((HEAP32[$q >> 2] | 0) < 0) break L207;
       HEAP8[(HEAP32[$cur490 >> 2] | 0) + ((HEAP32[$q >> 2] << 1) + 1) >> 0] = -1;
       CSE$28 = HEAP32[$cur490 >> 2] | 0;
       HEAP8[CSE$28 + ((HEAP32[$q >> 2] << 1) + 0) >> 0] = HEAP8[CSE$28 + (HEAP32[$q >> 2] | 0) >> 0] | 0;
       HEAP32[$q >> 2] = (HEAP32[$q >> 2] | 0) + -1;
      }
     }
     if ((HEAP32[$img_n >> 2] | 0) != 3) break L154;
     HEAP32[$q >> 2] = (HEAP32[$x$addr >> 2] | 0) - 1;
     while (1) {
      if ((HEAP32[$q >> 2] | 0) < 0) break L207;
      HEAP8[(HEAP32[$cur490 >> 2] | 0) + ((HEAP32[$q >> 2] << 2) + 3) >> 0] = -1;
      CSE$29 = HEAP32[$cur490 >> 2] | 0;
      HEAP8[CSE$29 + ((HEAP32[$q >> 2] << 2) + 2) >> 0] = HEAP8[CSE$29 + (((HEAP32[$q >> 2] | 0) * 3 | 0) + 2) >> 0] | 0;
      CSE$30 = HEAP32[$cur490 >> 2] | 0;
      HEAP8[CSE$30 + ((HEAP32[$q >> 2] << 2) + 1) >> 0] = HEAP8[CSE$30 + (((HEAP32[$q >> 2] | 0) * 3 | 0) + 1) >> 0] | 0;
      CSE$31 = HEAP32[$cur490 >> 2] | 0;
      HEAP8[CSE$31 + ((HEAP32[$q >> 2] << 2) + 0) >> 0] = HEAP8[CSE$31 + (((HEAP32[$q >> 2] | 0) * 3 | 0) + 0) >> 0] | 0;
      HEAP32[$q >> 2] = (HEAP32[$q >> 2] | 0) + -1;
     }
    } while (0);
    HEAP32[$j >> 2] = (HEAP32[$j >> 2] | 0) + 1;
   }
   ___assert_fail(33655, 32781, 4583, 33552);
  } else if ((HEAP32[$depth$addr >> 2] | 0) == 16) {
   HEAP32[$cur826 >> 2] = HEAP32[(HEAP32[$a$addr >> 2] | 0) + 12 >> 2];
   HEAP32[$cur16 >> 2] = HEAP32[$cur826 >> 2];
   HEAP32[$i >> 2] = 0;
   while (1) {
    $mul829 = Math_imul(HEAP32[$x$addr >> 2] | 0, HEAP32[$y$addr >> 2] | 0) | 0;
    if ((HEAP32[$i >> 2] | 0) >>> 0 >= (Math_imul($mul829, HEAP32[$out_n$addr >> 2] | 0) | 0) >>> 0) break L152;
    HEAP16[HEAP32[$cur16 >> 2] >> 1] = HEAPU8[HEAP32[$cur826 >> 2] >> 0] << 8 | HEAPU8[(HEAP32[$cur826 >> 2] | 0) + 1 >> 0];
    HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
    HEAP32[$cur16 >> 2] = (HEAP32[$cur16 >> 2] | 0) + 2;
    HEAP32[$cur826 >> 2] = (HEAP32[$cur826 >> 2] | 0) + 2;
   }
  } while (0);
  HEAP32[$retval >> 2] = 1;
  $607 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $607 | 0;
 }
 return 0;
}

function __ZN4tson5Layer5parseERKN8nlohmann10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS1_14adl_serializerEEE($this, $json) {
 $this = $this | 0;
 $json = $json | 0;
 var $1 = 0, $13 = 0, $17 = 0, $20 = 0, $25 = 0, $26 = 0, $30 = 0, $35 = 0, $36 = 0, $40 = 0, $41 = 0, $43 = 0, $47 = 0, $5 = 0, $9 = 0, $__cap_$i$i$i$i$i = 0, $__cap_$i$i$i$i$i108 = 0, $__cap_$i$i$i$i$i126 = 0, $__cap_$i$i$i$i$i144 = 0, $__cap_$i$i$i$i$i163 = 0, $__cap_$i$i$i$i$i72 = 0, $__cap_$i$i$i$i$i90 = 0, $__size_$i1$i$i$i$i = 0, $__size_$i1$i$i$i$i117 = 0, $__size_$i1$i$i$i$i135 = 0, $__size_$i1$i$i$i$i154 = 0, $__size_$i1$i$i$i$i63 = 0, $__size_$i1$i$i$i$i81 = 0, $__size_$i1$i$i$i$i99 = 0, $agg$tmp = 0, $agg$tmp112 = 0, $agg$tmp128 = 0, $agg$tmp130 = 0, $agg$tmp143 = 0, $agg$tmp145 = 0, $agg$tmp147196 = 0, $agg$tmp158 = 0, $agg$tmp160 = 0, $agg$tmp173 = 0, $agg$tmp175 = 0, $allFound$0$off0 = 0, $allFound$1$off0 = 0, $allFound$2$off0 = 0, $allFound$3$off0 = 0, $allFound$4$off0 = 0, $allFound$5$off0 = 0, $allFound$6$off0 = 0, $call45 = f0, $call64 = 0, $m_base64Data = 0, $m_compression = 0, $m_drawOrder = 0, $m_encoding = 0, $m_image = 0, $m_name = 0, $m_typeStr = 0, $ref$tmp = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(192);
 $agg$tmp147196 = sp;
 $ref$tmp = sp + 8 | 0;
 $agg$tmp = sp + 168 | 0;
 $agg$tmp112 = sp + 152 | 0;
 $agg$tmp128 = sp + 136 | 0;
 $agg$tmp130 = sp + 120 | 0;
 $agg$tmp143 = sp + 104 | 0;
 $agg$tmp145 = sp + 88 | 0;
 $agg$tmp158 = sp + 72 | 0;
 $agg$tmp160 = sp + 56 | 0;
 $agg$tmp173 = sp + 40 | 0;
 $agg$tmp175 = sp + 24 | 0;
 if (__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE5countIRA12_KcEEmOT_($json, 23206) | 0) {
  __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE3getIS9_S9_Li0EEET0_v($ref$tmp, __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEixIKcEERKSB_PT_($json, 23206) | 0);
  $m_compression = $this + 12 | 0;
  $__size_$i1$i$i$i$i = $m_compression + 11 | 0;
  if ((HEAP8[$__size_$i1$i$i$i$i >> 0] | 0) < 0) {
   $1 = HEAP32[$m_compression >> 2] | 0;
   HEAP8[$agg$tmp147196 >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($1, $agg$tmp147196);
   HEAP32[$this + 16 >> 2] = 0;
   if ((HEAP8[$__size_$i1$i$i$i$i >> 0] | 0) < 0) {
    $__cap_$i$i$i$i$i = $this + 20 | 0;
    __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm(HEAP32[$m_compression >> 2] | 0, HEAP32[$__cap_$i$i$i$i$i >> 2] & 2147483647);
    HEAP32[$__cap_$i$i$i$i$i >> 2] = 0;
   }
  } else {
   HEAP8[$agg$tmp147196 >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($m_compression, $agg$tmp147196);
   HEAP8[$__size_$i1$i$i$i$i >> 0] = 0;
  };
  HEAP32[$m_compression >> 2] = HEAP32[$ref$tmp >> 2];
  HEAP32[$m_compression + 4 >> 2] = HEAP32[$ref$tmp + 4 >> 2];
  HEAP32[$m_compression + 8 >> 2] = HEAP32[$ref$tmp + 8 >> 2];
  HEAP32[$ref$tmp >> 2] = 0;
  HEAP32[$ref$tmp + 4 >> 2] = 0;
  HEAP32[$ref$tmp + 8 >> 2] = 0;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp);
 }
 if (__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE5countIRA10_KcEEmOT_($json, 23218) | 0) {
  __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE3getIS9_S9_Li0EEET0_v($ref$tmp, __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEixIKcEERKSB_PT_($json, 23218) | 0);
  $m_drawOrder = $this + 48 | 0;
  $__size_$i1$i$i$i$i63 = $m_drawOrder + 11 | 0;
  if ((HEAP8[$__size_$i1$i$i$i$i63 >> 0] | 0) < 0) {
   $5 = HEAP32[$m_drawOrder >> 2] | 0;
   HEAP8[$agg$tmp147196 >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($5, $agg$tmp147196);
   HEAP32[$this + 52 >> 2] = 0;
   if ((HEAP8[$__size_$i1$i$i$i$i63 >> 0] | 0) < 0) {
    $__cap_$i$i$i$i$i72 = $this + 56 | 0;
    __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm(HEAP32[$m_drawOrder >> 2] | 0, HEAP32[$__cap_$i$i$i$i$i72 >> 2] & 2147483647);
    HEAP32[$__cap_$i$i$i$i$i72 >> 2] = 0;
   }
  } else {
   HEAP8[$agg$tmp147196 >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($m_drawOrder, $agg$tmp147196);
   HEAP8[$__size_$i1$i$i$i$i63 >> 0] = 0;
  };
  HEAP32[$m_drawOrder >> 2] = HEAP32[$ref$tmp >> 2];
  HEAP32[$m_drawOrder + 4 >> 2] = HEAP32[$ref$tmp + 4 >> 2];
  HEAP32[$m_drawOrder + 8 >> 2] = HEAP32[$ref$tmp + 8 >> 2];
  HEAP32[$ref$tmp >> 2] = 0;
  HEAP32[$ref$tmp + 4 >> 2] = 0;
  HEAP32[$ref$tmp + 8 >> 2] = 0;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp);
 }
 if (__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE5countIRA9_KcEEmOT_($json, 23228) | 0) {
  __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE3getIS9_S9_Li0EEET0_v($ref$tmp, __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEixIKcEERKSB_PT_($json, 23228) | 0);
  $m_encoding = $this + 60 | 0;
  $__size_$i1$i$i$i$i81 = $m_encoding + 11 | 0;
  if ((HEAP8[$__size_$i1$i$i$i$i81 >> 0] | 0) < 0) {
   $9 = HEAP32[$m_encoding >> 2] | 0;
   HEAP8[$agg$tmp147196 >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($9, $agg$tmp147196);
   HEAP32[$this + 64 >> 2] = 0;
   if ((HEAP8[$__size_$i1$i$i$i$i81 >> 0] | 0) < 0) {
    $__cap_$i$i$i$i$i90 = $this + 68 | 0;
    __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm(HEAP32[$m_encoding >> 2] | 0, HEAP32[$__cap_$i$i$i$i$i90 >> 2] & 2147483647);
    HEAP32[$__cap_$i$i$i$i$i90 >> 2] = 0;
   }
  } else {
   HEAP8[$agg$tmp147196 >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($m_encoding, $agg$tmp147196);
   HEAP8[$__size_$i1$i$i$i$i81 >> 0] = 0;
  };
  HEAP32[$m_encoding >> 2] = HEAP32[$ref$tmp >> 2];
  HEAP32[$m_encoding + 4 >> 2] = HEAP32[$ref$tmp + 4 >> 2];
  HEAP32[$m_encoding + 8 >> 2] = HEAP32[$ref$tmp + 8 >> 2];
  HEAP32[$ref$tmp >> 2] = 0;
  HEAP32[$ref$tmp + 4 >> 2] = 0;
  HEAP32[$ref$tmp + 8 >> 2] = 0;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp);
 }
 if (__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE5countIRA3_KcEEmOT_($json, 23157) | 0) HEAP32[$this + 72 >> 2] = __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE3getIiiLi0EEET0_v(__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEixIKcEERKSB_PT_($json, 23157) | 0) | 0;
 if (__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE5countIRA6_KcEEmOT_($json, 23037) | 0) {
  __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE3getIS9_S9_Li0EEET0_v($ref$tmp, __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEixIKcEERKSB_PT_($json, 23037) | 0);
  $m_image = $this + 76 | 0;
  $__size_$i1$i$i$i$i99 = $m_image + 11 | 0;
  if ((HEAP8[$__size_$i1$i$i$i$i99 >> 0] | 0) < 0) {
   $13 = HEAP32[$m_image >> 2] | 0;
   HEAP8[$agg$tmp147196 >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($13, $agg$tmp147196);
   HEAP32[$this + 80 >> 2] = 0;
   if ((HEAP8[$__size_$i1$i$i$i$i99 >> 0] | 0) < 0) {
    $__cap_$i$i$i$i$i108 = $this + 84 | 0;
    __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm(HEAP32[$m_image >> 2] | 0, HEAP32[$__cap_$i$i$i$i$i108 >> 2] & 2147483647);
    HEAP32[$__cap_$i$i$i$i$i108 >> 2] = 0;
   }
  } else {
   HEAP8[$agg$tmp147196 >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($m_image, $agg$tmp147196);
   HEAP8[$__size_$i1$i$i$i$i99 >> 0] = 0;
  };
  HEAP32[$m_image >> 2] = HEAP32[$ref$tmp >> 2];
  HEAP32[$m_image + 4 >> 2] = HEAP32[$ref$tmp + 4 >> 2];
  HEAP32[$m_image + 8 >> 2] = HEAP32[$ref$tmp + 8 >> 2];
  HEAP32[$ref$tmp >> 2] = 0;
  HEAP32[$ref$tmp + 4 >> 2] = 0;
  HEAP32[$ref$tmp + 8 >> 2] = 0;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp);
 }
 if (!(__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE5countIRA5_KcEEmOT_($json, 22602) | 0)) $allFound$0$off0 = 0; else {
  __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE3getIS9_S9_Li0EEET0_v($ref$tmp, __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEixIKcEERKSB_PT_($json, 22602) | 0);
  $m_name = $this + 100 | 0;
  $__size_$i1$i$i$i$i117 = $m_name + 11 | 0;
  if ((HEAP8[$__size_$i1$i$i$i$i117 >> 0] | 0) < 0) {
   $17 = HEAP32[$m_name >> 2] | 0;
   HEAP8[$agg$tmp147196 >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($17, $agg$tmp147196);
   HEAP32[$this + 104 >> 2] = 0;
   if ((HEAP8[$__size_$i1$i$i$i$i117 >> 0] | 0) < 0) {
    $__cap_$i$i$i$i$i126 = $this + 108 | 0;
    __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm(HEAP32[$m_name >> 2] | 0, HEAP32[$__cap_$i$i$i$i$i126 >> 2] & 2147483647);
    HEAP32[$__cap_$i$i$i$i$i126 >> 2] = 0;
   }
  } else {
   HEAP8[$agg$tmp147196 >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($m_name, $agg$tmp147196);
   HEAP8[$__size_$i1$i$i$i$i117 >> 0] = 0;
  };
  HEAP32[$m_name >> 2] = HEAP32[$ref$tmp >> 2];
  HEAP32[$m_name + 4 >> 2] = HEAP32[$ref$tmp + 4 >> 2];
  HEAP32[$m_name + 8 >> 2] = HEAP32[$ref$tmp + 8 >> 2];
  HEAP32[$ref$tmp >> 2] = 0;
  HEAP32[$ref$tmp + 4 >> 2] = 0;
  HEAP32[$ref$tmp + 8 >> 2] = 0;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp);
  $allFound$0$off0 = 1;
 }
 if (__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE5countIRA8_KcEEmOT_($json, 23237) | 0) if (__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE5countIRA8_KcEEmOT_($json, 23245) | 0) {
  $call45 = Math_fround(__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE3getIffLi0EEET0_v(__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEixIKcEERKSB_PT_($json, 23237) | 0));
  __ZN4tson7Vector2IfEC2Eff($agg$tmp147196, $call45, Math_fround(__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE3getIffLi0EEET0_v(__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEixIKcEERKSB_PT_($json, 23245) | 0)));
  $20 = $agg$tmp147196;
  $25 = HEAP32[$20 + 4 >> 2] | 0;
  $26 = $this + 124 | 0;
  HEAP32[$26 >> 2] = HEAP32[$20 >> 2];
  HEAP32[$26 + 4 >> 2] = $25;
 }
 if (!(__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE5countIRA8_KcEEmOT_($json, 23253) | 0)) $allFound$1$off0 = 0; else {
  HEAPF32[$this + 132 >> 2] = Math_fround(__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE3getIffLi0EEET0_v(__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEixIKcEERKSB_PT_($json, 23253) | 0));
  $allFound$1$off0 = $allFound$0$off0;
 }
 if (!(__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE5countIRA6_KcEEmOT_($json, 22412) | 0)) $allFound$2$off0 = 0; else if (!(__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE5countIRA7_KcEEmOT_($json, 22418) | 0)) $allFound$2$off0 = 0; else {
  $call64 = __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE3getIiiLi0EEET0_v(__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEixIKcEERKSB_PT_($json, 22412) | 0) | 0;
  __ZN4tson7Vector2IiEC2Eii($agg$tmp147196, $call64, __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE3getIiiLi0EEET0_v(__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEixIKcEERKSB_PT_($json, 22418) | 0) | 0);
  $30 = $agg$tmp147196;
  $35 = HEAP32[$30 + 4 >> 2] | 0;
  $36 = $this + 160 | 0;
  HEAP32[$36 >> 2] = HEAP32[$30 >> 2];
  HEAP32[$36 + 4 >> 2] = $35;
  $allFound$2$off0 = $allFound$1$off0;
 }
 if (__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE5countIRA17_KcEEmOT_($json, 23068) | 0) {
  __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE3getIS9_S9_Li0EEET0_v($ref$tmp, __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEixIKcEERKSB_PT_($json, 23068) | 0);
  __ZN4tson5ColorIhEC2ERKNSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE($agg$tmp147196, $ref$tmp);
  $40 = $this + 168 | 0;
  $41 = HEAP32[$agg$tmp147196 >> 2] | 0;
  HEAP8[$40 >> 0] = $41;
  HEAP8[$40 + 1 >> 0] = $41 >> 8;
  HEAP8[$40 + 2 >> 0] = $41 >> 16;
  HEAP8[$40 + 3 >> 0] = $41 >> 24;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp);
 }
 if (!(__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE5countIRA5_KcEEmOT_($json, 22556) | 0)) $allFound$3$off0 = 0; else {
  __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE3getIS9_S9_Li0EEET0_v($ref$tmp, __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEixIKcEERKSB_PT_($json, 22556) | 0);
  $m_typeStr = $this + 172 | 0;
  $__size_$i1$i$i$i$i135 = $m_typeStr + 11 | 0;
  if ((HEAP8[$__size_$i1$i$i$i$i135 >> 0] | 0) < 0) {
   $43 = HEAP32[$m_typeStr >> 2] | 0;
   HEAP8[$agg$tmp147196 >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($43, $agg$tmp147196);
   HEAP32[$this + 176 >> 2] = 0;
   if ((HEAP8[$__size_$i1$i$i$i$i135 >> 0] | 0) < 0) {
    $__cap_$i$i$i$i$i144 = $this + 180 | 0;
    __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm(HEAP32[$m_typeStr >> 2] | 0, HEAP32[$__cap_$i$i$i$i$i144 >> 2] & 2147483647);
    HEAP32[$__cap_$i$i$i$i$i144 >> 2] = 0;
   }
  } else {
   HEAP8[$agg$tmp147196 >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($m_typeStr, $agg$tmp147196);
   HEAP8[$__size_$i1$i$i$i$i135 >> 0] = 0;
  };
  HEAP32[$m_typeStr >> 2] = HEAP32[$ref$tmp >> 2];
  HEAP32[$m_typeStr + 4 >> 2] = HEAP32[$ref$tmp + 4 >> 2];
  HEAP32[$m_typeStr + 8 >> 2] = HEAP32[$ref$tmp + 8 >> 2];
  HEAP32[$ref$tmp >> 2] = 0;
  HEAP32[$ref$tmp + 4 >> 2] = 0;
  HEAP32[$ref$tmp + 8 >> 2] = 0;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp);
  $allFound$3$off0 = $allFound$2$off0;
 }
 if (!(__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE5countIRA8_KcEEmOT_($json, 23261) | 0)) $allFound$4$off0 = 0; else {
  HEAP8[$this + 185 >> 0] = (__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE3getIbbLi0EEET0_v(__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEixIKcEERKSB_PT_($json, 23261) | 0) | 0) & 1;
  $allFound$4$off0 = $allFound$3$off0;
 }
 if (!(__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE5countIRA2_KcEEmOT_($json, 23124) | 0)) $allFound$5$off0 = 0; else {
  HEAP32[$this + 188 >> 2] = __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE3getIiiLi0EEET0_v(__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEixIKcEERKSB_PT_($json, 23124) | 0) | 0;
  $allFound$5$off0 = $allFound$4$off0;
 }
 if (!(__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE5countIRA2_KcEEmOT_($json, 23126) | 0)) $allFound$6$off0 = 0; else {
  HEAP32[$this + 192 >> 2] = __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE3getIiiLi0EEET0_v(__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEixIKcEERKSB_PT_($json, 23126) | 0) | 0;
  $allFound$6$off0 = $allFound$5$off0;
 }
 do if (__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE5countIRA5_KcEEmOT_($json, 23269) | 0) {
  if (__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE8is_arrayEv(__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEixIKcEERKSB_PT_($json, 23269) | 0) | 0) {
   __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE5beginEv($agg$tmp, __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEixIKcEERKSB_PT_($json, 23269) | 0);
   __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE3endEv($agg$tmp112, __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEixIKcEERKSB_PT_($json, 23269) | 0);
   HEAP32[$agg$tmp147196 >> 2] = $this;
   if (__ZNK8nlohmann6detail9iter_implIKNS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEEneERKSF_($agg$tmp, $agg$tmp112) | 0) do {
    __ZZN4tson5Layer5parseERKN8nlohmann10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS1_14adl_serializerEEEENKUlSF_E_clESF_($agg$tmp147196, __ZNK8nlohmann6detail9iter_implIKNS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEEdeEv($agg$tmp) | 0);
    __ZN8nlohmann6detail9iter_implIKNS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEEppEv($agg$tmp) | 0;
   } while (__ZNK8nlohmann6detail9iter_implIKNS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEEneERKSF_($agg$tmp, $agg$tmp112) | 0);
   break;
  }
  __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE3getIS9_S9_Li0EEET0_v($ref$tmp, __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEixIKcEERKSB_PT_($json, 23269) | 0);
  $m_base64Data = $this + 36 | 0;
  $__size_$i1$i$i$i$i154 = $m_base64Data + 11 | 0;
  if ((HEAP8[$__size_$i1$i$i$i$i154 >> 0] | 0) < 0) {
   $47 = HEAP32[$m_base64Data >> 2] | 0;
   HEAP8[$agg$tmp147196 >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($47, $agg$tmp147196);
   HEAP32[$this + 40 >> 2] = 0;
   if ((HEAP8[$__size_$i1$i$i$i$i154 >> 0] | 0) < 0) {
    $__cap_$i$i$i$i$i163 = $this + 44 | 0;
    __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm(HEAP32[$m_base64Data >> 2] | 0, HEAP32[$__cap_$i$i$i$i$i163 >> 2] & 2147483647);
    HEAP32[$__cap_$i$i$i$i$i163 >> 2] = 0;
   }
  } else {
   HEAP8[$agg$tmp147196 >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($m_base64Data, $agg$tmp147196);
   HEAP8[$__size_$i1$i$i$i$i154 >> 0] = 0;
  };
  HEAP32[$m_base64Data >> 2] = HEAP32[$ref$tmp >> 2];
  HEAP32[$m_base64Data + 4 >> 2] = HEAP32[$ref$tmp + 4 >> 2];
  HEAP32[$m_base64Data + 8 >> 2] = HEAP32[$ref$tmp + 8 >> 2];
  HEAP32[$ref$tmp >> 2] = 0;
  HEAP32[$ref$tmp + 4 >> 2] = 0;
  HEAP32[$ref$tmp + 8 >> 2] = 0;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp);
 } while (0);
 if (__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE5countIRA7_KcEEmOT_($json, 23274) | 0) if (__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE8is_arrayEv(__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEixIKcEERKSB_PT_($json, 23274) | 0) | 0) {
  __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE5beginEv($agg$tmp128, __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEixIKcEERKSB_PT_($json, 23274) | 0);
  __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE3endEv($agg$tmp130, __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEixIKcEERKSB_PT_($json, 23274) | 0);
  HEAP32[$agg$tmp147196 >> 2] = $this;
  if (__ZNK8nlohmann6detail9iter_implIKNS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEEneERKSF_($agg$tmp128, $agg$tmp130) | 0) do {
   __ZZN4tson5Layer5parseERKN8nlohmann10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS1_14adl_serializerEEEENKUlSF_E0_clESF_($agg$tmp147196, __ZNK8nlohmann6detail9iter_implIKNS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEEdeEv($agg$tmp128) | 0);
   __ZN8nlohmann6detail9iter_implIKNS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEEppEv($agg$tmp128) | 0;
  } while (__ZNK8nlohmann6detail9iter_implIKNS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEEneERKSF_($agg$tmp128, $agg$tmp130) | 0);
 }
 if (__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE5countIRA7_KcEEmOT_($json, 22569) | 0) if (__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE8is_arrayEv(__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEixIKcEERKSB_PT_($json, 22569) | 0) | 0) {
  __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE5beginEv($agg$tmp143, __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEixIKcEERKSB_PT_($json, 22569) | 0);
  __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE3endEv($agg$tmp145, __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEixIKcEERKSB_PT_($json, 22569) | 0);
  HEAP32[$agg$tmp147196 >> 2] = $this;
  if (__ZNK8nlohmann6detail9iter_implIKNS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEEneERKSF_($agg$tmp143, $agg$tmp145) | 0) do {
   __ZZN4tson5Layer5parseERKN8nlohmann10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS1_14adl_serializerEEEENKUlSF_E1_clESF_($agg$tmp147196, __ZNK8nlohmann6detail9iter_implIKNS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEEdeEv($agg$tmp143) | 0);
   __ZN8nlohmann6detail9iter_implIKNS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEEppEv($agg$tmp143) | 0;
  } while (__ZNK8nlohmann6detail9iter_implIKNS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEEneERKSF_($agg$tmp143, $agg$tmp145) | 0);
 }
 if (__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE5countIRA8_KcEEmOT_($json, 23281) | 0) if (__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE8is_arrayEv(__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEixIKcEERKSB_PT_($json, 23281) | 0) | 0) {
  __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE5beginEv($agg$tmp158, __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEixIKcEERKSB_PT_($json, 23281) | 0);
  __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE3endEv($agg$tmp160, __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEixIKcEERKSB_PT_($json, 23281) | 0);
  HEAP32[$agg$tmp147196 >> 2] = $this;
  if (__ZNK8nlohmann6detail9iter_implIKNS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEEneERKSF_($agg$tmp158, $agg$tmp160) | 0) do {
   __ZZN4tson5Layer5parseERKN8nlohmann10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS1_14adl_serializerEEEENKUlSF_E2_clESF_($agg$tmp147196, __ZNK8nlohmann6detail9iter_implIKNS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEEdeEv($agg$tmp158) | 0);
   __ZN8nlohmann6detail9iter_implIKNS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEEppEv($agg$tmp158) | 0;
  } while (__ZNK8nlohmann6detail9iter_implIKNS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEEneERKSF_($agg$tmp158, $agg$tmp160) | 0);
 }
 do if (__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE5countIRA11_KcEEmOT_($json, 22585) | 0) {
  if (!(__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE8is_arrayEv(__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEixIKcEERKSB_PT_($json, 22585) | 0) | 0)) break;
  __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE5beginEv($agg$tmp173, __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEixIKcEERKSB_PT_($json, 22585) | 0);
  __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE3endEv($agg$tmp175, __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEixIKcEERKSB_PT_($json, 22585) | 0);
  HEAP32[$agg$tmp147196 >> 2] = $this;
  if (__ZNK8nlohmann6detail9iter_implIKNS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEEneERKSF_($agg$tmp173, $agg$tmp175) | 0) do {
   __ZZN4tson5Layer5parseERKN8nlohmann10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS1_14adl_serializerEEEENKUlSF_E3_clESF_($agg$tmp147196, __ZNK8nlohmann6detail9iter_implIKNS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEEdeEv($agg$tmp173) | 0);
   __ZN8nlohmann6detail9iter_implIKNS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEEppEv($agg$tmp173) | 0;
  } while (__ZNK8nlohmann6detail9iter_implIKNS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEEneERKSF_($agg$tmp173, $agg$tmp175) | 0);
 } while (0);
 __ZN4tson5Layer15setTypeByStringEv($this);
 STACKTOP = sp;
 return $allFound$6$off0 | 0;
}

function __ZN8nlohmann6detail6parserINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE18sax_parse_internalINS0_28json_sax_dom_callback_parserISD_EEEEbPT_($this, $sax) {
 $this = $this | 0;
 $sax = $sax | 0;
 var $1 = 0, $14 = 0, $18 = 0, $20 = 0, $__size_$i = 0, $call$i3435 = 0, $call$i3637 = 0, $call147 = 0.0, $call160 = 0, $call180 = 0, $call283 = 0, $call29 = 0, $call301 = 0, $call314 = 0, $call332 = 0, $call382 = 0, $call400 = 0, $call427 = 0, $call445 = 0, $call46 = 0, $call481 = 0, $call499 = 0, $call540 = 0, $call558 = 0, $call80 = 0, $call98 = 0, $cmp413 = 0, $last_token = 0, $m_lexer = 0, $ref$tmp = 0, $ref$tmp33 = 0, $ref$tmp34 = 0, $ref$tmp36 = 0, $ref$tmp37 = 0, $retval$3 = 0, $states = 0, $storemerge$in = 0, $sub$i = 0, $tmp = 0, $tmp157 = 0, $tmp281 = 0, $tmp312 = 0, $tmp380 = 0, $tmp425 = 0, $tmp479 = 0, $tmp538 = 0, $tmp78 = 0, $tobool$i = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(192);
 $states = sp + 176 | 0;
 $tmp = sp + 152 | 0;
 $ref$tmp = sp + 164 | 0;
 $ref$tmp33 = sp + 132 | 0;
 $ref$tmp34 = sp + 120 | 0;
 $ref$tmp36 = sp + 108 | 0;
 $ref$tmp37 = sp + 96 | 0;
 $tmp78 = sp + 84 | 0;
 $tmp157 = sp + 72 | 0;
 $tmp281 = sp + 60 | 0;
 $tmp312 = sp + 48 | 0;
 $tmp380 = sp + 36 | 0;
 $tmp425 = sp + 24 | 0;
 $tmp479 = sp + 12 | 0;
 $tmp538 = sp;
 HEAP32[$states >> 2] = 0;
 $__size_$i = $states + 4 | 0;
 HEAP32[$__size_$i >> 2] = 0;
 HEAP32[$states + 8 >> 2] = 0;
 $last_token = $this + 16 | 0;
 $m_lexer = $this + 24 | 0;
 L1 : while (1) {
  L3 : do switch (HEAP32[$last_token >> 2] | 0) {
  case 14:
   {
    label = 28;
    break L1;
    break;
   }
  case 9:
   {
    if (!(__ZN8nlohmann6detail28json_sax_dom_callback_parserINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE12start_objectEm($sax, -1) | 0)) {
     $retval$3 = 0;
     break L1;
    }
    if ((__ZN8nlohmann6detail6parserINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE9get_tokenEv($this) | 0) == 11) if (__ZN8nlohmann6detail28json_sax_dom_callback_parserINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE10end_objectEv($sax) | 0) {
     label = 6;
     break L3;
    } else {
     $retval$3 = 0;
     break L1;
    }
    if ((HEAP32[$last_token >> 2] | 0) != 4) {
     label = 9;
     break L1;
    }
    if (!(__ZN8nlohmann6detail28json_sax_dom_callback_parserINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE3keyERSB_($sax, __ZN8nlohmann6detail5lexerINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE10get_stringEv($m_lexer) | 0) | 0)) {
     $retval$3 = 0;
     break L1;
    }
    if ((__ZN8nlohmann6detail6parserINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE9get_tokenEv($this) | 0) != 12) {
     label = 12;
     break L1;
    }
    HEAP8[$ref$tmp >> 0] = 0;
    __ZNSt3__26vectorIbNS_9allocatorIbEEE9push_backERKb($states, $ref$tmp);
    __ZN8nlohmann6detail6parserINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE9get_tokenEv($this) | 0;
    break;
   }
  case 8:
   {
    if (!(__ZN8nlohmann6detail28json_sax_dom_callback_parserINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE11start_arrayEm($sax, -1) | 0)) {
     $retval$3 = 0;
     break L1;
    }
    if ((__ZN8nlohmann6detail6parserINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE9get_tokenEv($this) | 0) == 10) if (__ZN8nlohmann6detail28json_sax_dom_callback_parserINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE9end_arrayEv($sax) | 0) {
     label = 6;
     break L3;
    } else {
     $retval$3 = 0;
     break L1;
    } else {
     HEAP8[$ref$tmp >> 0] = 1;
     __ZNSt3__26vectorIbNS_9allocatorIbEEE9push_backERKb($states, $ref$tmp);
     break L3;
    }
    break;
   }
  case 7:
   {
    $call147 = +__ZNK8nlohmann6detail5lexerINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE16get_number_floatEv($m_lexer);
    __ZL13__DOUBLE_BITSd($call147) | 0;
    if (0 == 0 & ((getTempRet0() | 0) & 2146435072 | 0) == 2146435072) {
     label = 20;
     break L1;
    }
    if (__ZN8nlohmann6detail28json_sax_dom_callback_parserINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE12number_floatEdRKSB_($sax, $call147, __ZN8nlohmann6detail5lexerINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE10get_stringEv($m_lexer) | 0) | 0) label = 6; else {
     $retval$3 = 0;
     break L1;
    }
    break;
   }
  case 2:
   {
    if (__ZN8nlohmann6detail28json_sax_dom_callback_parserINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE7booleanEb($sax, 0) | 0) label = 6; else {
     $retval$3 = 0;
     break L1;
    }
    break;
   }
  case 3:
   {
    if (__ZN8nlohmann6detail28json_sax_dom_callback_parserINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE4nullEv($sax) | 0) label = 6; else {
     $retval$3 = 0;
     break L1;
    }
    break;
   }
  case 1:
   {
    if (__ZN8nlohmann6detail28json_sax_dom_callback_parserINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE7booleanEb($sax, 1) | 0) label = 6; else {
     $retval$3 = 0;
     break L1;
    }
    break;
   }
  case 6:
   {
    if (__ZN8nlohmann6detail28json_sax_dom_callback_parserINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE14number_integerEx($sax, __ZNK8nlohmann6detail5lexerINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE18get_number_integerEv($m_lexer) | 0, getTempRet0() | 0) | 0) label = 6; else {
     $retval$3 = 0;
     break L1;
    }
    break;
   }
  case 4:
   {
    if (__ZN8nlohmann6detail28json_sax_dom_callback_parserINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE6stringERSB_($sax, __ZN8nlohmann6detail5lexerINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE10get_stringEv($m_lexer) | 0) | 0) label = 6; else {
     $retval$3 = 0;
     break L1;
    }
    break;
   }
  case 5:
   {
    if (__ZN8nlohmann6detail28json_sax_dom_callback_parserINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE15number_unsignedEy($sax, __ZNK8nlohmann6detail5lexerINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE19get_number_unsignedEv($m_lexer) | 0, getTempRet0() | 0) | 0) label = 6; else {
     $retval$3 = 0;
     break L1;
    }
    break;
   }
  default:
   {
    label = 29;
    break L1;
   }
  } while (0);
  do if ((label | 0) == 6) {
   label = 0;
   $1 = HEAP32[$__size_$i >> 2] | 0;
   if (!$1) {
    $retval$3 = 1;
    break L1;
   }
   $14 = $1;
   while (1) {
    $sub$i = $14 + -1 | 0;
    $tobool$i = (HEAP32[(HEAP32[$states >> 2] | 0) + ($sub$i >>> 5 << 2) >> 2] & 1 << ($sub$i & 31) | 0) == 0;
    $cmp413 = (__ZN8nlohmann6detail6parserINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE9get_tokenEv($this) | 0) == 13;
    if ($tobool$i) {
     if ($cmp413) break;
     if ((HEAP32[$last_token >> 2] | 0) != 11) {
      label = 50;
      break L1;
     }
     if (!(__ZN8nlohmann6detail28json_sax_dom_callback_parserINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE10end_objectEv($sax) | 0)) {
      $retval$3 = 0;
      break L1;
     }
     $20 = HEAP32[$__size_$i >> 2] | 0;
     if (!$20) {
      label = 48;
      break L1;
     } else $storemerge$in = $20;
    } else {
     if ($cmp413) {
      label = 32;
      break;
     }
     if ((HEAP32[$last_token >> 2] | 0) != 10) {
      label = 37;
      break L1;
     }
     if (!(__ZN8nlohmann6detail28json_sax_dom_callback_parserINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE9end_arrayEv($sax) | 0)) {
      $retval$3 = 0;
      break L1;
     }
     $18 = HEAP32[$__size_$i >> 2] | 0;
     if (!$18) {
      label = 36;
      break L1;
     } else $storemerge$in = $18;
    }
    $14 = $storemerge$in + -1 | 0;
    HEAP32[$__size_$i >> 2] = $14;
    if (!$14) {
     $retval$3 = 1;
     break L1;
    }
   }
   if ((label | 0) == 32) {
    label = 0;
    __ZN8nlohmann6detail6parserINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE9get_tokenEv($this) | 0;
    break;
   }
   if ((__ZN8nlohmann6detail6parserINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE9get_tokenEv($this) | 0) != 4) {
    label = 40;
    break L1;
   }
   if (!(__ZN8nlohmann6detail28json_sax_dom_callback_parserINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE3keyERSB_($sax, __ZN8nlohmann6detail5lexerINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE10get_stringEv($m_lexer) | 0) | 0)) {
    $retval$3 = 0;
    break L1;
   }
   if ((__ZN8nlohmann6detail6parserINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE9get_tokenEv($this) | 0) != 12) {
    label = 43;
    break L1;
   }
   __ZN8nlohmann6detail6parserINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE9get_tokenEv($this) | 0;
  } while (0);
 }
 switch (label | 0) {
 case 9:
  {
   __ZNK8nlohmann6detail5lexerINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE12get_positionEv($tmp, $m_lexer);
   $call29 = __ZNK8nlohmann6detail10position_tcvmEv($tmp) | 0;
   __ZNK8nlohmann6detail5lexerINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE16get_token_stringEv($ref$tmp, $m_lexer);
   __ZNK8nlohmann6detail5lexerINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE12get_positionEv($ref$tmp34, $m_lexer);
   HEAP32[$ref$tmp37 >> 2] = 0;
   HEAP32[$ref$tmp37 + 4 >> 2] = 0;
   HEAP32[$ref$tmp37 + 8 >> 2] = 0;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcm($ref$tmp37, 24041, __ZNSt3__211char_traitsIcE6lengthEPKc(24041) | 0);
   __ZN8nlohmann6detail6parserINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE17exception_messageENS0_5lexerISD_E10token_typeERKSB_($ref$tmp36, $this, 4, $ref$tmp37);
   __ZN8nlohmann6detail11parse_error6createEiRKNS0_10position_tERKNSt3__212basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEE($ref$tmp33, 101, $ref$tmp34, $ref$tmp36);
   $call46 = __ZN8nlohmann6detail28json_sax_dom_callback_parserINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE11parse_errorEmRKSB_RKNS0_9exceptionE($sax, $call29, $ref$tmp, $ref$tmp33) | 0;
   __ZN8nlohmann6detail9exceptionD2Ev($ref$tmp33);
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp36);
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp37);
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp);
   $retval$3 = $call46;
   break;
  }
 case 12:
  {
   __ZNK8nlohmann6detail5lexerINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE12get_positionEv($tmp78, $m_lexer);
   $call80 = __ZNK8nlohmann6detail10position_tcvmEv($tmp78) | 0;
   __ZNK8nlohmann6detail5lexerINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE16get_token_stringEv($ref$tmp, $m_lexer);
   __ZNK8nlohmann6detail5lexerINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE12get_positionEv($ref$tmp34, $m_lexer);
   HEAP32[$ref$tmp37 >> 2] = 0;
   HEAP32[$ref$tmp37 + 4 >> 2] = 0;
   HEAP32[$ref$tmp37 + 8 >> 2] = 0;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcm($ref$tmp37, 24052, __ZNSt3__211char_traitsIcE6lengthEPKc(24052) | 0);
   __ZN8nlohmann6detail6parserINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE17exception_messageENS0_5lexerISD_E10token_typeERKSB_($ref$tmp36, $this, 12, $ref$tmp37);
   __ZN8nlohmann6detail11parse_error6createEiRKNS0_10position_tERKNSt3__212basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEE($ref$tmp33, 101, $ref$tmp34, $ref$tmp36);
   $call98 = __ZN8nlohmann6detail28json_sax_dom_callback_parserINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE11parse_errorEmRKSB_RKNS0_9exceptionE($sax, $call80, $ref$tmp, $ref$tmp33) | 0;
   __ZN8nlohmann6detail9exceptionD2Ev($ref$tmp33);
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp36);
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp37);
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp);
   $retval$3 = $call98;
   break;
  }
 case 20:
  {
   __ZNK8nlohmann6detail5lexerINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE12get_positionEv($tmp157, $m_lexer);
   $call160 = __ZNK8nlohmann6detail10position_tcvmEv($tmp157) | 0;
   __ZNK8nlohmann6detail5lexerINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE16get_token_stringEv($ref$tmp, $m_lexer);
   __ZNK8nlohmann6detail5lexerINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE16get_token_stringEv($ref$tmp37, $m_lexer);
   $call$i3435 = __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6insertEmPKc($ref$tmp37, 0, 24069) | 0;
   HEAP32[$ref$tmp36 >> 2] = HEAP32[$call$i3435 >> 2];
   HEAP32[$ref$tmp36 + 4 >> 2] = HEAP32[$call$i3435 + 4 >> 2];
   HEAP32[$ref$tmp36 + 8 >> 2] = HEAP32[$call$i3435 + 8 >> 2];
   HEAP32[$call$i3435 >> 2] = 0;
   HEAP32[$call$i3435 + 4 >> 2] = 0;
   HEAP32[$call$i3435 + 8 >> 2] = 0;
   $call$i3637 = __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc($ref$tmp36, 24095) | 0;
   HEAP32[$ref$tmp34 >> 2] = HEAP32[$call$i3637 >> 2];
   HEAP32[$ref$tmp34 + 4 >> 2] = HEAP32[$call$i3637 + 4 >> 2];
   HEAP32[$ref$tmp34 + 8 >> 2] = HEAP32[$call$i3637 + 8 >> 2];
   HEAP32[$call$i3637 >> 2] = 0;
   HEAP32[$call$i3637 + 4 >> 2] = 0;
   HEAP32[$call$i3637 + 8 >> 2] = 0;
   __ZN8nlohmann6detail12out_of_range6createEiRKNSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE($ref$tmp33, 406, $ref$tmp34);
   $call180 = __ZN8nlohmann6detail28json_sax_dom_callback_parserINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE11parse_errorEmRKSB_RKNS0_9exceptionE($sax, $call160, $ref$tmp, $ref$tmp33) | 0;
   __ZN8nlohmann6detail9exceptionD2Ev($ref$tmp33);
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp34);
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp36);
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp37);
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp);
   $retval$3 = $call180;
   break;
  }
 case 28:
  {
   __ZNK8nlohmann6detail5lexerINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE12get_positionEv($tmp281, $m_lexer);
   $call283 = __ZNK8nlohmann6detail10position_tcvmEv($tmp281) | 0;
   __ZNK8nlohmann6detail5lexerINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE16get_token_stringEv($ref$tmp, $m_lexer);
   __ZNK8nlohmann6detail5lexerINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE12get_positionEv($ref$tmp34, $m_lexer);
   HEAP32[$ref$tmp37 >> 2] = 0;
   HEAP32[$ref$tmp37 + 4 >> 2] = 0;
   HEAP32[$ref$tmp37 + 8 >> 2] = 0;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcm($ref$tmp37, 22596, __ZNSt3__211char_traitsIcE6lengthEPKc(22596) | 0);
   __ZN8nlohmann6detail6parserINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE17exception_messageENS0_5lexerISD_E10token_typeERKSB_($ref$tmp36, $this, 0, $ref$tmp37);
   __ZN8nlohmann6detail11parse_error6createEiRKNS0_10position_tERKNSt3__212basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEE($ref$tmp33, 101, $ref$tmp34, $ref$tmp36);
   $call301 = __ZN8nlohmann6detail28json_sax_dom_callback_parserINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE11parse_errorEmRKSB_RKNS0_9exceptionE($sax, $call283, $ref$tmp, $ref$tmp33) | 0;
   __ZN8nlohmann6detail9exceptionD2Ev($ref$tmp33);
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp36);
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp37);
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp);
   $retval$3 = $call301;
   break;
  }
 case 29:
  {
   __ZNK8nlohmann6detail5lexerINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE12get_positionEv($tmp312, $m_lexer);
   $call314 = __ZNK8nlohmann6detail10position_tcvmEv($tmp312) | 0;
   __ZNK8nlohmann6detail5lexerINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE16get_token_stringEv($ref$tmp, $m_lexer);
   __ZNK8nlohmann6detail5lexerINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE12get_positionEv($ref$tmp34, $m_lexer);
   HEAP32[$ref$tmp37 >> 2] = 0;
   HEAP32[$ref$tmp37 + 4 >> 2] = 0;
   HEAP32[$ref$tmp37 + 8 >> 2] = 0;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcm($ref$tmp37, 22596, __ZNSt3__211char_traitsIcE6lengthEPKc(22596) | 0);
   __ZN8nlohmann6detail6parserINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE17exception_messageENS0_5lexerISD_E10token_typeERKSB_($ref$tmp36, $this, 16, $ref$tmp37);
   __ZN8nlohmann6detail11parse_error6createEiRKNS0_10position_tERKNSt3__212basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEE($ref$tmp33, 101, $ref$tmp34, $ref$tmp36);
   $call332 = __ZN8nlohmann6detail28json_sax_dom_callback_parserINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE11parse_errorEmRKSB_RKNS0_9exceptionE($sax, $call314, $ref$tmp, $ref$tmp33) | 0;
   __ZN8nlohmann6detail9exceptionD2Ev($ref$tmp33);
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp36);
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp37);
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp);
   $retval$3 = $call332;
   break;
  }
 case 36:
  {
   ___assert_fail(24097, 22221, 8885, 24116);
   break;
  }
 case 37:
  {
   __ZNK8nlohmann6detail5lexerINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE12get_positionEv($tmp380, $m_lexer);
   $call382 = __ZNK8nlohmann6detail10position_tcvmEv($tmp380) | 0;
   __ZNK8nlohmann6detail5lexerINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE16get_token_stringEv($ref$tmp, $m_lexer);
   __ZNK8nlohmann6detail5lexerINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE12get_positionEv($ref$tmp34, $m_lexer);
   HEAP32[$ref$tmp37 >> 2] = 0;
   HEAP32[$ref$tmp37 + 4 >> 2] = 0;
   HEAP32[$ref$tmp37 + 8 >> 2] = 0;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcm($ref$tmp37, 22860, __ZNSt3__211char_traitsIcE6lengthEPKc(22860) | 0);
   __ZN8nlohmann6detail6parserINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE17exception_messageENS0_5lexerISD_E10token_typeERKSB_($ref$tmp36, $this, 10, $ref$tmp37);
   __ZN8nlohmann6detail11parse_error6createEiRKNS0_10position_tERKNSt3__212basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEE($ref$tmp33, 101, $ref$tmp34, $ref$tmp36);
   $call400 = __ZN8nlohmann6detail28json_sax_dom_callback_parserINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE11parse_errorEmRKSB_RKNS0_9exceptionE($sax, $call382, $ref$tmp, $ref$tmp33) | 0;
   __ZN8nlohmann6detail9exceptionD2Ev($ref$tmp33);
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp36);
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp37);
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp);
   $retval$3 = $call400;
   break;
  }
 case 40:
  {
   __ZNK8nlohmann6detail5lexerINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE12get_positionEv($tmp425, $m_lexer);
   $call427 = __ZNK8nlohmann6detail10position_tcvmEv($tmp425) | 0;
   __ZNK8nlohmann6detail5lexerINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE16get_token_stringEv($ref$tmp, $m_lexer);
   __ZNK8nlohmann6detail5lexerINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE12get_positionEv($ref$tmp34, $m_lexer);
   HEAP32[$ref$tmp37 >> 2] = 0;
   HEAP32[$ref$tmp37 + 4 >> 2] = 0;
   HEAP32[$ref$tmp37 + 8 >> 2] = 0;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcm($ref$tmp37, 24041, __ZNSt3__211char_traitsIcE6lengthEPKc(24041) | 0);
   __ZN8nlohmann6detail6parserINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE17exception_messageENS0_5lexerISD_E10token_typeERKSB_($ref$tmp36, $this, 4, $ref$tmp37);
   __ZN8nlohmann6detail11parse_error6createEiRKNS0_10position_tERKNSt3__212basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEE($ref$tmp33, 101, $ref$tmp34, $ref$tmp36);
   $call445 = __ZN8nlohmann6detail28json_sax_dom_callback_parserINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE11parse_errorEmRKSB_RKNS0_9exceptionE($sax, $call427, $ref$tmp, $ref$tmp33) | 0;
   __ZN8nlohmann6detail9exceptionD2Ev($ref$tmp33);
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp36);
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp37);
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp);
   $retval$3 = $call445;
   break;
  }
 case 43:
  {
   __ZNK8nlohmann6detail5lexerINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE12get_positionEv($tmp479, $m_lexer);
   $call481 = __ZNK8nlohmann6detail10position_tcvmEv($tmp479) | 0;
   __ZNK8nlohmann6detail5lexerINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE16get_token_stringEv($ref$tmp, $m_lexer);
   __ZNK8nlohmann6detail5lexerINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE12get_positionEv($ref$tmp34, $m_lexer);
   HEAP32[$ref$tmp37 >> 2] = 0;
   HEAP32[$ref$tmp37 + 4 >> 2] = 0;
   HEAP32[$ref$tmp37 + 8 >> 2] = 0;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcm($ref$tmp37, 24052, __ZNSt3__211char_traitsIcE6lengthEPKc(24052) | 0);
   __ZN8nlohmann6detail6parserINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE17exception_messageENS0_5lexerISD_E10token_typeERKSB_($ref$tmp36, $this, 12, $ref$tmp37);
   __ZN8nlohmann6detail11parse_error6createEiRKNS0_10position_tERKNSt3__212basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEE($ref$tmp33, 101, $ref$tmp34, $ref$tmp36);
   $call499 = __ZN8nlohmann6detail28json_sax_dom_callback_parserINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE11parse_errorEmRKSB_RKNS0_9exceptionE($sax, $call481, $ref$tmp, $ref$tmp33) | 0;
   __ZN8nlohmann6detail9exceptionD2Ev($ref$tmp33);
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp36);
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp37);
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp);
   $retval$3 = $call499;
   break;
  }
 case 48:
  {
   ___assert_fail(24097, 22221, 8941, 24116);
   break;
  }
 case 50:
  {
   __ZNK8nlohmann6detail5lexerINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE12get_positionEv($tmp538, $m_lexer);
   $call540 = __ZNK8nlohmann6detail10position_tcvmEv($tmp538) | 0;
   __ZNK8nlohmann6detail5lexerINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE16get_token_stringEv($ref$tmp, $m_lexer);
   __ZNK8nlohmann6detail5lexerINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE12get_positionEv($ref$tmp34, $m_lexer);
   HEAP32[$ref$tmp37 >> 2] = 0;
   HEAP32[$ref$tmp37 + 4 >> 2] = 0;
   HEAP32[$ref$tmp37 + 8 >> 2] = 0;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcm($ref$tmp37, 22866, __ZNSt3__211char_traitsIcE6lengthEPKc(22866) | 0);
   __ZN8nlohmann6detail6parserINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE17exception_messageENS0_5lexerISD_E10token_typeERKSB_($ref$tmp36, $this, 11, $ref$tmp37);
   __ZN8nlohmann6detail11parse_error6createEiRKNS0_10position_tERKNSt3__212basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEE($ref$tmp33, 101, $ref$tmp34, $ref$tmp36);
   $call558 = __ZN8nlohmann6detail28json_sax_dom_callback_parserINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE11parse_errorEmRKSB_RKNS0_9exceptionE($sax, $call540, $ref$tmp, $ref$tmp33) | 0;
   __ZN8nlohmann6detail9exceptionD2Ev($ref$tmp33);
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp36);
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp37);
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp);
   $retval$3 = $call558;
   break;
  }
 }
 __ZNSt3__26vectorIbNS_9allocatorIbEEED2Ev($states);
 STACKTOP = sp;
 return $retval$3 | 0;
}

function __ZN8nlohmann6detail6parserINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE18sax_parse_internalINS0_19json_sax_dom_parserISD_EEEEbPT_($this, $sax) {
 $this = $this | 0;
 $sax = $sax | 0;
 var $1 = 0, $14 = 0, $18 = 0, $20 = 0, $__size_$i = 0, $call$i3435 = 0, $call$i3637 = 0, $call147 = 0.0, $call160 = 0, $call180 = 0, $call283 = 0, $call29 = 0, $call301 = 0, $call314 = 0, $call332 = 0, $call382 = 0, $call400 = 0, $call427 = 0, $call445 = 0, $call46 = 0, $call481 = 0, $call499 = 0, $call540 = 0, $call558 = 0, $call80 = 0, $call98 = 0, $cmp413 = 0, $last_token = 0, $m_lexer = 0, $ref$tmp = 0, $ref$tmp33 = 0, $ref$tmp34 = 0, $ref$tmp36 = 0, $ref$tmp37 = 0, $retval$3 = 0, $states = 0, $storemerge$in = 0, $sub$i = 0, $tmp = 0, $tmp157 = 0, $tmp281 = 0, $tmp312 = 0, $tmp380 = 0, $tmp425 = 0, $tmp479 = 0, $tmp538 = 0, $tmp78 = 0, $tobool$i = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(192);
 $states = sp + 176 | 0;
 $tmp = sp + 152 | 0;
 $ref$tmp = sp + 164 | 0;
 $ref$tmp33 = sp + 132 | 0;
 $ref$tmp34 = sp + 120 | 0;
 $ref$tmp36 = sp + 108 | 0;
 $ref$tmp37 = sp + 96 | 0;
 $tmp78 = sp + 84 | 0;
 $tmp157 = sp + 72 | 0;
 $tmp281 = sp + 60 | 0;
 $tmp312 = sp + 48 | 0;
 $tmp380 = sp + 36 | 0;
 $tmp425 = sp + 24 | 0;
 $tmp479 = sp + 12 | 0;
 $tmp538 = sp;
 HEAP32[$states >> 2] = 0;
 $__size_$i = $states + 4 | 0;
 HEAP32[$__size_$i >> 2] = 0;
 HEAP32[$states + 8 >> 2] = 0;
 $last_token = $this + 16 | 0;
 $m_lexer = $this + 24 | 0;
 L1 : while (1) {
  L3 : do switch (HEAP32[$last_token >> 2] | 0) {
  case 14:
   {
    label = 28;
    break L1;
    break;
   }
  case 9:
   {
    if (!(__ZN8nlohmann6detail19json_sax_dom_parserINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE12start_objectEm($sax, -1) | 0)) {
     $retval$3 = 0;
     break L1;
    }
    if ((__ZN8nlohmann6detail6parserINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE9get_tokenEv($this) | 0) == 11) if (__ZN8nlohmann6detail19json_sax_dom_parserINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE10end_objectEv($sax) | 0) {
     label = 6;
     break L3;
    } else {
     $retval$3 = 0;
     break L1;
    }
    if ((HEAP32[$last_token >> 2] | 0) != 4) {
     label = 9;
     break L1;
    }
    if (!(__ZN8nlohmann6detail19json_sax_dom_parserINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE3keyERSB_($sax, __ZN8nlohmann6detail5lexerINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE10get_stringEv($m_lexer) | 0) | 0)) {
     $retval$3 = 0;
     break L1;
    }
    if ((__ZN8nlohmann6detail6parserINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE9get_tokenEv($this) | 0) != 12) {
     label = 12;
     break L1;
    }
    HEAP8[$ref$tmp >> 0] = 0;
    __ZNSt3__26vectorIbNS_9allocatorIbEEE9push_backERKb($states, $ref$tmp);
    __ZN8nlohmann6detail6parserINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE9get_tokenEv($this) | 0;
    break;
   }
  case 8:
   {
    if (!(__ZN8nlohmann6detail19json_sax_dom_parserINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE11start_arrayEm($sax, -1) | 0)) {
     $retval$3 = 0;
     break L1;
    }
    if ((__ZN8nlohmann6detail6parserINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE9get_tokenEv($this) | 0) == 10) if (__ZN8nlohmann6detail19json_sax_dom_parserINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE9end_arrayEv($sax) | 0) {
     label = 6;
     break L3;
    } else {
     $retval$3 = 0;
     break L1;
    } else {
     HEAP8[$ref$tmp >> 0] = 1;
     __ZNSt3__26vectorIbNS_9allocatorIbEEE9push_backERKb($states, $ref$tmp);
     break L3;
    }
    break;
   }
  case 7:
   {
    $call147 = +__ZNK8nlohmann6detail5lexerINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE16get_number_floatEv($m_lexer);
    __ZL13__DOUBLE_BITSd($call147) | 0;
    if (0 == 0 & ((getTempRet0() | 0) & 2146435072 | 0) == 2146435072) {
     label = 20;
     break L1;
    }
    if (__ZN8nlohmann6detail19json_sax_dom_parserINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE12number_floatEdRKSB_($sax, $call147, __ZN8nlohmann6detail5lexerINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE10get_stringEv($m_lexer) | 0) | 0) label = 6; else {
     $retval$3 = 0;
     break L1;
    }
    break;
   }
  case 2:
   {
    if (__ZN8nlohmann6detail19json_sax_dom_parserINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE7booleanEb($sax, 0) | 0) label = 6; else {
     $retval$3 = 0;
     break L1;
    }
    break;
   }
  case 3:
   {
    if (__ZN8nlohmann6detail19json_sax_dom_parserINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE4nullEv($sax) | 0) label = 6; else {
     $retval$3 = 0;
     break L1;
    }
    break;
   }
  case 1:
   {
    if (__ZN8nlohmann6detail19json_sax_dom_parserINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE7booleanEb($sax, 1) | 0) label = 6; else {
     $retval$3 = 0;
     break L1;
    }
    break;
   }
  case 6:
   {
    if (__ZN8nlohmann6detail19json_sax_dom_parserINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE14number_integerEx($sax, __ZNK8nlohmann6detail5lexerINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE18get_number_integerEv($m_lexer) | 0, getTempRet0() | 0) | 0) label = 6; else {
     $retval$3 = 0;
     break L1;
    }
    break;
   }
  case 4:
   {
    if (__ZN8nlohmann6detail19json_sax_dom_parserINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE6stringERSB_($sax, __ZN8nlohmann6detail5lexerINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE10get_stringEv($m_lexer) | 0) | 0) label = 6; else {
     $retval$3 = 0;
     break L1;
    }
    break;
   }
  case 5:
   {
    if (__ZN8nlohmann6detail19json_sax_dom_parserINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE15number_unsignedEy($sax, __ZNK8nlohmann6detail5lexerINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE19get_number_unsignedEv($m_lexer) | 0, getTempRet0() | 0) | 0) label = 6; else {
     $retval$3 = 0;
     break L1;
    }
    break;
   }
  default:
   {
    label = 29;
    break L1;
   }
  } while (0);
  do if ((label | 0) == 6) {
   label = 0;
   $1 = HEAP32[$__size_$i >> 2] | 0;
   if (!$1) {
    $retval$3 = 1;
    break L1;
   }
   $14 = $1;
   while (1) {
    $sub$i = $14 + -1 | 0;
    $tobool$i = (HEAP32[(HEAP32[$states >> 2] | 0) + ($sub$i >>> 5 << 2) >> 2] & 1 << ($sub$i & 31) | 0) == 0;
    $cmp413 = (__ZN8nlohmann6detail6parserINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE9get_tokenEv($this) | 0) == 13;
    if ($tobool$i) {
     if ($cmp413) break;
     if ((HEAP32[$last_token >> 2] | 0) != 11) {
      label = 50;
      break L1;
     }
     if (!(__ZN8nlohmann6detail19json_sax_dom_parserINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE10end_objectEv($sax) | 0)) {
      $retval$3 = 0;
      break L1;
     }
     $20 = HEAP32[$__size_$i >> 2] | 0;
     if (!$20) {
      label = 48;
      break L1;
     } else $storemerge$in = $20;
    } else {
     if ($cmp413) {
      label = 32;
      break;
     }
     if ((HEAP32[$last_token >> 2] | 0) != 10) {
      label = 37;
      break L1;
     }
     if (!(__ZN8nlohmann6detail19json_sax_dom_parserINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE9end_arrayEv($sax) | 0)) {
      $retval$3 = 0;
      break L1;
     }
     $18 = HEAP32[$__size_$i >> 2] | 0;
     if (!$18) {
      label = 36;
      break L1;
     } else $storemerge$in = $18;
    }
    $14 = $storemerge$in + -1 | 0;
    HEAP32[$__size_$i >> 2] = $14;
    if (!$14) {
     $retval$3 = 1;
     break L1;
    }
   }
   if ((label | 0) == 32) {
    label = 0;
    __ZN8nlohmann6detail6parserINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE9get_tokenEv($this) | 0;
    break;
   }
   if ((__ZN8nlohmann6detail6parserINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE9get_tokenEv($this) | 0) != 4) {
    label = 40;
    break L1;
   }
   if (!(__ZN8nlohmann6detail19json_sax_dom_parserINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE3keyERSB_($sax, __ZN8nlohmann6detail5lexerINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE10get_stringEv($m_lexer) | 0) | 0)) {
    $retval$3 = 0;
    break L1;
   }
   if ((__ZN8nlohmann6detail6parserINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE9get_tokenEv($this) | 0) != 12) {
    label = 43;
    break L1;
   }
   __ZN8nlohmann6detail6parserINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE9get_tokenEv($this) | 0;
  } while (0);
 }
 switch (label | 0) {
 case 9:
  {
   __ZNK8nlohmann6detail5lexerINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE12get_positionEv($tmp, $m_lexer);
   $call29 = __ZNK8nlohmann6detail10position_tcvmEv($tmp) | 0;
   __ZNK8nlohmann6detail5lexerINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE16get_token_stringEv($ref$tmp, $m_lexer);
   __ZNK8nlohmann6detail5lexerINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE12get_positionEv($ref$tmp34, $m_lexer);
   HEAP32[$ref$tmp37 >> 2] = 0;
   HEAP32[$ref$tmp37 + 4 >> 2] = 0;
   HEAP32[$ref$tmp37 + 8 >> 2] = 0;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcm($ref$tmp37, 24041, __ZNSt3__211char_traitsIcE6lengthEPKc(24041) | 0);
   __ZN8nlohmann6detail6parserINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE17exception_messageENS0_5lexerISD_E10token_typeERKSB_($ref$tmp36, $this, 4, $ref$tmp37);
   __ZN8nlohmann6detail11parse_error6createEiRKNS0_10position_tERKNSt3__212basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEE($ref$tmp33, 101, $ref$tmp34, $ref$tmp36);
   $call46 = __ZN8nlohmann6detail19json_sax_dom_parserINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE11parse_errorEmRKSB_RKNS0_9exceptionE($sax, $call29, $ref$tmp, $ref$tmp33) | 0;
   __ZN8nlohmann6detail9exceptionD2Ev($ref$tmp33);
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp36);
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp37);
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp);
   $retval$3 = $call46;
   break;
  }
 case 12:
  {
   __ZNK8nlohmann6detail5lexerINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE12get_positionEv($tmp78, $m_lexer);
   $call80 = __ZNK8nlohmann6detail10position_tcvmEv($tmp78) | 0;
   __ZNK8nlohmann6detail5lexerINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE16get_token_stringEv($ref$tmp, $m_lexer);
   __ZNK8nlohmann6detail5lexerINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE12get_positionEv($ref$tmp34, $m_lexer);
   HEAP32[$ref$tmp37 >> 2] = 0;
   HEAP32[$ref$tmp37 + 4 >> 2] = 0;
   HEAP32[$ref$tmp37 + 8 >> 2] = 0;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcm($ref$tmp37, 24052, __ZNSt3__211char_traitsIcE6lengthEPKc(24052) | 0);
   __ZN8nlohmann6detail6parserINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE17exception_messageENS0_5lexerISD_E10token_typeERKSB_($ref$tmp36, $this, 12, $ref$tmp37);
   __ZN8nlohmann6detail11parse_error6createEiRKNS0_10position_tERKNSt3__212basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEE($ref$tmp33, 101, $ref$tmp34, $ref$tmp36);
   $call98 = __ZN8nlohmann6detail19json_sax_dom_parserINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE11parse_errorEmRKSB_RKNS0_9exceptionE($sax, $call80, $ref$tmp, $ref$tmp33) | 0;
   __ZN8nlohmann6detail9exceptionD2Ev($ref$tmp33);
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp36);
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp37);
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp);
   $retval$3 = $call98;
   break;
  }
 case 20:
  {
   __ZNK8nlohmann6detail5lexerINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE12get_positionEv($tmp157, $m_lexer);
   $call160 = __ZNK8nlohmann6detail10position_tcvmEv($tmp157) | 0;
   __ZNK8nlohmann6detail5lexerINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE16get_token_stringEv($ref$tmp, $m_lexer);
   __ZNK8nlohmann6detail5lexerINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE16get_token_stringEv($ref$tmp37, $m_lexer);
   $call$i3435 = __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6insertEmPKc($ref$tmp37, 0, 24069) | 0;
   HEAP32[$ref$tmp36 >> 2] = HEAP32[$call$i3435 >> 2];
   HEAP32[$ref$tmp36 + 4 >> 2] = HEAP32[$call$i3435 + 4 >> 2];
   HEAP32[$ref$tmp36 + 8 >> 2] = HEAP32[$call$i3435 + 8 >> 2];
   HEAP32[$call$i3435 >> 2] = 0;
   HEAP32[$call$i3435 + 4 >> 2] = 0;
   HEAP32[$call$i3435 + 8 >> 2] = 0;
   $call$i3637 = __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc($ref$tmp36, 24095) | 0;
   HEAP32[$ref$tmp34 >> 2] = HEAP32[$call$i3637 >> 2];
   HEAP32[$ref$tmp34 + 4 >> 2] = HEAP32[$call$i3637 + 4 >> 2];
   HEAP32[$ref$tmp34 + 8 >> 2] = HEAP32[$call$i3637 + 8 >> 2];
   HEAP32[$call$i3637 >> 2] = 0;
   HEAP32[$call$i3637 + 4 >> 2] = 0;
   HEAP32[$call$i3637 + 8 >> 2] = 0;
   __ZN8nlohmann6detail12out_of_range6createEiRKNSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE($ref$tmp33, 406, $ref$tmp34);
   $call180 = __ZN8nlohmann6detail19json_sax_dom_parserINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE11parse_errorEmRKSB_RKNS0_9exceptionE($sax, $call160, $ref$tmp, $ref$tmp33) | 0;
   __ZN8nlohmann6detail9exceptionD2Ev($ref$tmp33);
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp34);
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp36);
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp37);
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp);
   $retval$3 = $call180;
   break;
  }
 case 28:
  {
   __ZNK8nlohmann6detail5lexerINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE12get_positionEv($tmp281, $m_lexer);
   $call283 = __ZNK8nlohmann6detail10position_tcvmEv($tmp281) | 0;
   __ZNK8nlohmann6detail5lexerINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE16get_token_stringEv($ref$tmp, $m_lexer);
   __ZNK8nlohmann6detail5lexerINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE12get_positionEv($ref$tmp34, $m_lexer);
   HEAP32[$ref$tmp37 >> 2] = 0;
   HEAP32[$ref$tmp37 + 4 >> 2] = 0;
   HEAP32[$ref$tmp37 + 8 >> 2] = 0;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcm($ref$tmp37, 22596, __ZNSt3__211char_traitsIcE6lengthEPKc(22596) | 0);
   __ZN8nlohmann6detail6parserINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE17exception_messageENS0_5lexerISD_E10token_typeERKSB_($ref$tmp36, $this, 0, $ref$tmp37);
   __ZN8nlohmann6detail11parse_error6createEiRKNS0_10position_tERKNSt3__212basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEE($ref$tmp33, 101, $ref$tmp34, $ref$tmp36);
   $call301 = __ZN8nlohmann6detail19json_sax_dom_parserINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE11parse_errorEmRKSB_RKNS0_9exceptionE($sax, $call283, $ref$tmp, $ref$tmp33) | 0;
   __ZN8nlohmann6detail9exceptionD2Ev($ref$tmp33);
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp36);
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp37);
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp);
   $retval$3 = $call301;
   break;
  }
 case 29:
  {
   __ZNK8nlohmann6detail5lexerINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE12get_positionEv($tmp312, $m_lexer);
   $call314 = __ZNK8nlohmann6detail10position_tcvmEv($tmp312) | 0;
   __ZNK8nlohmann6detail5lexerINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE16get_token_stringEv($ref$tmp, $m_lexer);
   __ZNK8nlohmann6detail5lexerINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE12get_positionEv($ref$tmp34, $m_lexer);
   HEAP32[$ref$tmp37 >> 2] = 0;
   HEAP32[$ref$tmp37 + 4 >> 2] = 0;
   HEAP32[$ref$tmp37 + 8 >> 2] = 0;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcm($ref$tmp37, 22596, __ZNSt3__211char_traitsIcE6lengthEPKc(22596) | 0);
   __ZN8nlohmann6detail6parserINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE17exception_messageENS0_5lexerISD_E10token_typeERKSB_($ref$tmp36, $this, 16, $ref$tmp37);
   __ZN8nlohmann6detail11parse_error6createEiRKNS0_10position_tERKNSt3__212basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEE($ref$tmp33, 101, $ref$tmp34, $ref$tmp36);
   $call332 = __ZN8nlohmann6detail19json_sax_dom_parserINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE11parse_errorEmRKSB_RKNS0_9exceptionE($sax, $call314, $ref$tmp, $ref$tmp33) | 0;
   __ZN8nlohmann6detail9exceptionD2Ev($ref$tmp33);
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp36);
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp37);
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp);
   $retval$3 = $call332;
   break;
  }
 case 36:
  {
   ___assert_fail(24097, 22221, 8885, 24116);
   break;
  }
 case 37:
  {
   __ZNK8nlohmann6detail5lexerINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE12get_positionEv($tmp380, $m_lexer);
   $call382 = __ZNK8nlohmann6detail10position_tcvmEv($tmp380) | 0;
   __ZNK8nlohmann6detail5lexerINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE16get_token_stringEv($ref$tmp, $m_lexer);
   __ZNK8nlohmann6detail5lexerINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE12get_positionEv($ref$tmp34, $m_lexer);
   HEAP32[$ref$tmp37 >> 2] = 0;
   HEAP32[$ref$tmp37 + 4 >> 2] = 0;
   HEAP32[$ref$tmp37 + 8 >> 2] = 0;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcm($ref$tmp37, 22860, __ZNSt3__211char_traitsIcE6lengthEPKc(22860) | 0);
   __ZN8nlohmann6detail6parserINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE17exception_messageENS0_5lexerISD_E10token_typeERKSB_($ref$tmp36, $this, 10, $ref$tmp37);
   __ZN8nlohmann6detail11parse_error6createEiRKNS0_10position_tERKNSt3__212basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEE($ref$tmp33, 101, $ref$tmp34, $ref$tmp36);
   $call400 = __ZN8nlohmann6detail19json_sax_dom_parserINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE11parse_errorEmRKSB_RKNS0_9exceptionE($sax, $call382, $ref$tmp, $ref$tmp33) | 0;
   __ZN8nlohmann6detail9exceptionD2Ev($ref$tmp33);
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp36);
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp37);
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp);
   $retval$3 = $call400;
   break;
  }
 case 40:
  {
   __ZNK8nlohmann6detail5lexerINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE12get_positionEv($tmp425, $m_lexer);
   $call427 = __ZNK8nlohmann6detail10position_tcvmEv($tmp425) | 0;
   __ZNK8nlohmann6detail5lexerINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE16get_token_stringEv($ref$tmp, $m_lexer);
   __ZNK8nlohmann6detail5lexerINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE12get_positionEv($ref$tmp34, $m_lexer);
   HEAP32[$ref$tmp37 >> 2] = 0;
   HEAP32[$ref$tmp37 + 4 >> 2] = 0;
   HEAP32[$ref$tmp37 + 8 >> 2] = 0;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcm($ref$tmp37, 24041, __ZNSt3__211char_traitsIcE6lengthEPKc(24041) | 0);
   __ZN8nlohmann6detail6parserINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE17exception_messageENS0_5lexerISD_E10token_typeERKSB_($ref$tmp36, $this, 4, $ref$tmp37);
   __ZN8nlohmann6detail11parse_error6createEiRKNS0_10position_tERKNSt3__212basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEE($ref$tmp33, 101, $ref$tmp34, $ref$tmp36);
   $call445 = __ZN8nlohmann6detail19json_sax_dom_parserINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE11parse_errorEmRKSB_RKNS0_9exceptionE($sax, $call427, $ref$tmp, $ref$tmp33) | 0;
   __ZN8nlohmann6detail9exceptionD2Ev($ref$tmp33);
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp36);
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp37);
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp);
   $retval$3 = $call445;
   break;
  }
 case 43:
  {
   __ZNK8nlohmann6detail5lexerINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE12get_positionEv($tmp479, $m_lexer);
   $call481 = __ZNK8nlohmann6detail10position_tcvmEv($tmp479) | 0;
   __ZNK8nlohmann6detail5lexerINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE16get_token_stringEv($ref$tmp, $m_lexer);
   __ZNK8nlohmann6detail5lexerINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE12get_positionEv($ref$tmp34, $m_lexer);
   HEAP32[$ref$tmp37 >> 2] = 0;
   HEAP32[$ref$tmp37 + 4 >> 2] = 0;
   HEAP32[$ref$tmp37 + 8 >> 2] = 0;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcm($ref$tmp37, 24052, __ZNSt3__211char_traitsIcE6lengthEPKc(24052) | 0);
   __ZN8nlohmann6detail6parserINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE17exception_messageENS0_5lexerISD_E10token_typeERKSB_($ref$tmp36, $this, 12, $ref$tmp37);
   __ZN8nlohmann6detail11parse_error6createEiRKNS0_10position_tERKNSt3__212basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEE($ref$tmp33, 101, $ref$tmp34, $ref$tmp36);
   $call499 = __ZN8nlohmann6detail19json_sax_dom_parserINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE11parse_errorEmRKSB_RKNS0_9exceptionE($sax, $call481, $ref$tmp, $ref$tmp33) | 0;
   __ZN8nlohmann6detail9exceptionD2Ev($ref$tmp33);
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp36);
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp37);
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp);
   $retval$3 = $call499;
   break;
  }
 case 48:
  {
   ___assert_fail(24097, 22221, 8941, 24116);
   break;
  }
 case 50:
  {
   __ZNK8nlohmann6detail5lexerINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE12get_positionEv($tmp538, $m_lexer);
   $call540 = __ZNK8nlohmann6detail10position_tcvmEv($tmp538) | 0;
   __ZNK8nlohmann6detail5lexerINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE16get_token_stringEv($ref$tmp, $m_lexer);
   __ZNK8nlohmann6detail5lexerINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE12get_positionEv($ref$tmp34, $m_lexer);
   HEAP32[$ref$tmp37 >> 2] = 0;
   HEAP32[$ref$tmp37 + 4 >> 2] = 0;
   HEAP32[$ref$tmp37 + 8 >> 2] = 0;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcm($ref$tmp37, 22866, __ZNSt3__211char_traitsIcE6lengthEPKc(22866) | 0);
   __ZN8nlohmann6detail6parserINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE17exception_messageENS0_5lexerISD_E10token_typeERKSB_($ref$tmp36, $this, 11, $ref$tmp37);
   __ZN8nlohmann6detail11parse_error6createEiRKNS0_10position_tERKNSt3__212basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEE($ref$tmp33, 101, $ref$tmp34, $ref$tmp36);
   $call558 = __ZN8nlohmann6detail19json_sax_dom_parserINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE11parse_errorEmRKSB_RKNS0_9exceptionE($sax, $call540, $ref$tmp, $ref$tmp33) | 0;
   __ZN8nlohmann6detail9exceptionD2Ev($ref$tmp33);
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp36);
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp37);
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp);
   $retval$3 = $call558;
   break;
  }
 }
 __ZNSt3__26vectorIbNS_9allocatorIbEEED2Ev($states);
 STACKTOP = sp;
 return $retval$3 | 0;
}

function __ZN4tson3Map5parseERKN8nlohmann10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS1_14adl_serializerEEE($this, $json) {
 $this = $this | 0;
 $json = $json | 0;
 var $0 = 0, $1 = 0, $12 = 0, $16 = 0, $20 = 0, $24 = 0, $28 = 0, $31 = 0, $36 = 0, $37 = 0, $42 = 0, $6 = 0, $7 = 0, $__cap_$i$i$i$i$i = 0, $__cap_$i$i$i$i$i116 = 0, $__cap_$i$i$i$i$i134 = 0, $__cap_$i$i$i$i$i62 = 0, $__cap_$i$i$i$i$i80 = 0, $__cap_$i$i$i$i$i98 = 0, $__size_$i1$i$i$i$i = 0, $__size_$i1$i$i$i$i107 = 0, $__size_$i1$i$i$i$i125 = 0, $__size_$i1$i$i$i$i53 = 0, $__size_$i1$i$i$i$i71 = 0, $__size_$i1$i$i$i$i89 = 0, $agg$tmp = 0, $agg$tmp111 = 0, $agg$tmp122 = 0, $agg$tmp124 = 0, $agg$tmp137 = 0, $agg$tmp139 = 0, $agg$tmp141150 = 0, $allFound$0$off0 = 0, $allFound$1$off0 = 0, $allFound$2$off0 = 0, $allFound$3$off0 = 0, $allFound$4$off0 = 0, $allFound$5$off0 = 0, $call11 = 0, $call85 = 0, $m_orientation = 0, $m_renderOrder = 0, $m_staggerAxis = 0, $m_staggerIndex = 0, $m_tiledVersion = 0, $m_type = 0, $ref$tmp2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(128);
 $agg$tmp141150 = sp;
 $ref$tmp2 = sp + 8 | 0;
 $agg$tmp = sp + 104 | 0;
 $agg$tmp111 = sp + 88 | 0;
 $agg$tmp122 = sp + 72 | 0;
 $agg$tmp124 = sp + 56 | 0;
 $agg$tmp137 = sp + 40 | 0;
 $agg$tmp139 = sp + 24 | 0;
 if (__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE5countIRA16_KcEEmOT_($json, 22396) | 0) {
  __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE3getIS9_S9_Li0EEET0_v($ref$tmp2, __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEixIKcEERKSB_PT_($json, 22396) | 0);
  __ZN4tson5ColorIhEC2ERKNSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE($agg$tmp141150, $ref$tmp2);
  $0 = HEAP32[$agg$tmp141150 >> 2] | 0;
  HEAP8[$this >> 0] = $0;
  HEAP8[$this + 1 >> 0] = $0 >> 8;
  HEAP8[$this + 2 >> 0] = $0 >> 16;
  HEAP8[$this + 3 >> 0] = $0 >> 24;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp2);
 }
 if (!(__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE5countIRA6_KcEEmOT_($json, 22412) | 0)) $allFound$0$off0 = 0; else if (!(__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE5countIRA7_KcEEmOT_($json, 22418) | 0)) $allFound$0$off0 = 0; else {
  $call11 = __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE3getIiiLi0EEET0_v(__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEixIKcEERKSB_PT_($json, 22412) | 0) | 0;
  __ZN4tson7Vector2IiEC2Eii($agg$tmp141150, $call11, __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE3getIiiLi0EEET0_v(__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEixIKcEERKSB_PT_($json, 22418) | 0) | 0);
  $1 = $agg$tmp141150;
  $6 = HEAP32[$1 + 4 >> 2] | 0;
  $7 = $this + 4 | 0;
  HEAP32[$7 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$7 + 4 >> 2] = $6;
  $allFound$0$off0 = 1;
 }
 if (__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE5countIRA14_KcEEmOT_($json, 22425) | 0) HEAP32[$this + 12 >> 2] = __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE3getIiiLi0EEET0_v(__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEixIKcEERKSB_PT_($json, 22425) | 0) | 0;
 if (__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE5countIRA9_KcEEmOT_($json, 22439) | 0) HEAP8[$this + 16 >> 0] = (__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE3getIbbLi0EEET0_v(__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEixIKcEERKSB_PT_($json, 22439) | 0) | 0) & 1;
 if (__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE5countIRA12_KcEEmOT_($json, 22448) | 0) HEAP32[$this + 32 >> 2] = __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE3getIiiLi0EEET0_v(__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEixIKcEERKSB_PT_($json, 22448) | 0) | 0;
 if (!(__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE5countIRA13_KcEEmOT_($json, 22460) | 0)) $allFound$1$off0 = 0; else {
  HEAP32[$this + 36 >> 2] = __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE3getIiiLi0EEET0_v(__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEixIKcEERKSB_PT_($json, 22460) | 0) | 0;
  $allFound$1$off0 = $allFound$0$off0;
 }
 if (!(__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE5countIRA12_KcEEmOT_($json, 22473) | 0)) $allFound$2$off0 = 0; else {
  __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE3getIS9_S9_Li0EEET0_v($ref$tmp2, __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEixIKcEERKSB_PT_($json, 22473) | 0);
  $m_orientation = $this + 40 | 0;
  $__size_$i1$i$i$i$i = $m_orientation + 11 | 0;
  if ((HEAP8[$__size_$i1$i$i$i$i >> 0] | 0) < 0) {
   $12 = HEAP32[$m_orientation >> 2] | 0;
   HEAP8[$agg$tmp141150 >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($12, $agg$tmp141150);
   HEAP32[$this + 44 >> 2] = 0;
   if ((HEAP8[$__size_$i1$i$i$i$i >> 0] | 0) < 0) {
    $__cap_$i$i$i$i$i = $this + 48 | 0;
    __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm(HEAP32[$m_orientation >> 2] | 0, HEAP32[$__cap_$i$i$i$i$i >> 2] & 2147483647);
    HEAP32[$__cap_$i$i$i$i$i >> 2] = 0;
   }
  } else {
   HEAP8[$agg$tmp141150 >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($m_orientation, $agg$tmp141150);
   HEAP8[$__size_$i1$i$i$i$i >> 0] = 0;
  };
  HEAP32[$m_orientation >> 2] = HEAP32[$ref$tmp2 >> 2];
  HEAP32[$m_orientation + 4 >> 2] = HEAP32[$ref$tmp2 + 4 >> 2];
  HEAP32[$m_orientation + 8 >> 2] = HEAP32[$ref$tmp2 + 8 >> 2];
  HEAP32[$ref$tmp2 >> 2] = 0;
  HEAP32[$ref$tmp2 + 4 >> 2] = 0;
  HEAP32[$ref$tmp2 + 8 >> 2] = 0;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp2);
  $allFound$2$off0 = $allFound$1$off0;
 }
 if (__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE5countIRA12_KcEEmOT_($json, 22485) | 0) {
  __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE3getIS9_S9_Li0EEET0_v($ref$tmp2, __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEixIKcEERKSB_PT_($json, 22485) | 0);
  $m_renderOrder = $this + 76 | 0;
  $__size_$i1$i$i$i$i53 = $m_renderOrder + 11 | 0;
  if ((HEAP8[$__size_$i1$i$i$i$i53 >> 0] | 0) < 0) {
   $16 = HEAP32[$m_renderOrder >> 2] | 0;
   HEAP8[$agg$tmp141150 >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($16, $agg$tmp141150);
   HEAP32[$this + 80 >> 2] = 0;
   if ((HEAP8[$__size_$i1$i$i$i$i53 >> 0] | 0) < 0) {
    $__cap_$i$i$i$i$i62 = $this + 84 | 0;
    __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm(HEAP32[$m_renderOrder >> 2] | 0, HEAP32[$__cap_$i$i$i$i$i62 >> 2] & 2147483647);
    HEAP32[$__cap_$i$i$i$i$i62 >> 2] = 0;
   }
  } else {
   HEAP8[$agg$tmp141150 >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($m_renderOrder, $agg$tmp141150);
   HEAP8[$__size_$i1$i$i$i$i53 >> 0] = 0;
  };
  HEAP32[$m_renderOrder >> 2] = HEAP32[$ref$tmp2 >> 2];
  HEAP32[$m_renderOrder + 4 >> 2] = HEAP32[$ref$tmp2 + 4 >> 2];
  HEAP32[$m_renderOrder + 8 >> 2] = HEAP32[$ref$tmp2 + 8 >> 2];
  HEAP32[$ref$tmp2 >> 2] = 0;
  HEAP32[$ref$tmp2 + 4 >> 2] = 0;
  HEAP32[$ref$tmp2 + 8 >> 2] = 0;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp2);
 }
 if (__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE5countIRA12_KcEEmOT_($json, 22497) | 0) {
  __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE3getIS9_S9_Li0EEET0_v($ref$tmp2, __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEixIKcEERKSB_PT_($json, 22497) | 0);
  $m_staggerAxis = $this + 88 | 0;
  $__size_$i1$i$i$i$i71 = $m_staggerAxis + 11 | 0;
  if ((HEAP8[$__size_$i1$i$i$i$i71 >> 0] | 0) < 0) {
   $20 = HEAP32[$m_staggerAxis >> 2] | 0;
   HEAP8[$agg$tmp141150 >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($20, $agg$tmp141150);
   HEAP32[$this + 92 >> 2] = 0;
   if ((HEAP8[$__size_$i1$i$i$i$i71 >> 0] | 0) < 0) {
    $__cap_$i$i$i$i$i80 = $this + 96 | 0;
    __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm(HEAP32[$m_staggerAxis >> 2] | 0, HEAP32[$__cap_$i$i$i$i$i80 >> 2] & 2147483647);
    HEAP32[$__cap_$i$i$i$i$i80 >> 2] = 0;
   }
  } else {
   HEAP8[$agg$tmp141150 >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($m_staggerAxis, $agg$tmp141150);
   HEAP8[$__size_$i1$i$i$i$i71 >> 0] = 0;
  };
  HEAP32[$m_staggerAxis >> 2] = HEAP32[$ref$tmp2 >> 2];
  HEAP32[$m_staggerAxis + 4 >> 2] = HEAP32[$ref$tmp2 + 4 >> 2];
  HEAP32[$m_staggerAxis + 8 >> 2] = HEAP32[$ref$tmp2 + 8 >> 2];
  HEAP32[$ref$tmp2 >> 2] = 0;
  HEAP32[$ref$tmp2 + 4 >> 2] = 0;
  HEAP32[$ref$tmp2 + 8 >> 2] = 0;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp2);
 }
 if (__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE5countIRA13_KcEEmOT_($json, 22509) | 0) {
  __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE3getIS9_S9_Li0EEET0_v($ref$tmp2, __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEixIKcEERKSB_PT_($json, 22509) | 0);
  $m_staggerIndex = $this + 100 | 0;
  $__size_$i1$i$i$i$i89 = $m_staggerIndex + 11 | 0;
  if ((HEAP8[$__size_$i1$i$i$i$i89 >> 0] | 0) < 0) {
   $24 = HEAP32[$m_staggerIndex >> 2] | 0;
   HEAP8[$agg$tmp141150 >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($24, $agg$tmp141150);
   HEAP32[$this + 104 >> 2] = 0;
   if ((HEAP8[$__size_$i1$i$i$i$i89 >> 0] | 0) < 0) {
    $__cap_$i$i$i$i$i98 = $this + 108 | 0;
    __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm(HEAP32[$m_staggerIndex >> 2] | 0, HEAP32[$__cap_$i$i$i$i$i98 >> 2] & 2147483647);
    HEAP32[$__cap_$i$i$i$i$i98 >> 2] = 0;
   }
  } else {
   HEAP8[$agg$tmp141150 >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($m_staggerIndex, $agg$tmp141150);
   HEAP8[$__size_$i1$i$i$i$i89 >> 0] = 0;
  };
  HEAP32[$m_staggerIndex >> 2] = HEAP32[$ref$tmp2 >> 2];
  HEAP32[$m_staggerIndex + 4 >> 2] = HEAP32[$ref$tmp2 + 4 >> 2];
  HEAP32[$m_staggerIndex + 8 >> 2] = HEAP32[$ref$tmp2 + 8 >> 2];
  HEAP32[$ref$tmp2 >> 2] = 0;
  HEAP32[$ref$tmp2 + 4 >> 2] = 0;
  HEAP32[$ref$tmp2 + 8 >> 2] = 0;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp2);
 }
 if (!(__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE5countIRA13_KcEEmOT_($json, 22522) | 0)) $allFound$3$off0 = 0; else {
  __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE3getIS9_S9_Li0EEET0_v($ref$tmp2, __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEixIKcEERKSB_PT_($json, 22522) | 0);
  $m_tiledVersion = $this + 112 | 0;
  $__size_$i1$i$i$i$i107 = $m_tiledVersion + 11 | 0;
  if ((HEAP8[$__size_$i1$i$i$i$i107 >> 0] | 0) < 0) {
   $28 = HEAP32[$m_tiledVersion >> 2] | 0;
   HEAP8[$agg$tmp141150 >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($28, $agg$tmp141150);
   HEAP32[$this + 116 >> 2] = 0;
   if ((HEAP8[$__size_$i1$i$i$i$i107 >> 0] | 0) < 0) {
    $__cap_$i$i$i$i$i116 = $this + 120 | 0;
    __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm(HEAP32[$m_tiledVersion >> 2] | 0, HEAP32[$__cap_$i$i$i$i$i116 >> 2] & 2147483647);
    HEAP32[$__cap_$i$i$i$i$i116 >> 2] = 0;
   }
  } else {
   HEAP8[$agg$tmp141150 >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($m_tiledVersion, $agg$tmp141150);
   HEAP8[$__size_$i1$i$i$i$i107 >> 0] = 0;
  };
  HEAP32[$m_tiledVersion >> 2] = HEAP32[$ref$tmp2 >> 2];
  HEAP32[$m_tiledVersion + 4 >> 2] = HEAP32[$ref$tmp2 + 4 >> 2];
  HEAP32[$m_tiledVersion + 8 >> 2] = HEAP32[$ref$tmp2 + 8 >> 2];
  HEAP32[$ref$tmp2 >> 2] = 0;
  HEAP32[$ref$tmp2 + 4 >> 2] = 0;
  HEAP32[$ref$tmp2 + 8 >> 2] = 0;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp2);
  $allFound$3$off0 = $allFound$2$off0;
 }
 if (!(__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE5countIRA10_KcEEmOT_($json, 22535) | 0)) $allFound$4$off0 = 0; else if (!(__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE5countIRA11_KcEEmOT_($json, 22545) | 0)) $allFound$4$off0 = 0; else {
  $call85 = __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE3getIiiLi0EEET0_v(__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEixIKcEERKSB_PT_($json, 22535) | 0) | 0;
  __ZN4tson7Vector2IiEC2Eii($agg$tmp141150, $call85, __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE3getIiiLi0EEET0_v(__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEixIKcEERKSB_PT_($json, 22545) | 0) | 0);
  $31 = $agg$tmp141150;
  $36 = HEAP32[$31 + 4 >> 2] | 0;
  $37 = $this + 124 | 0;
  HEAP32[$37 >> 2] = HEAP32[$31 >> 2];
  HEAP32[$37 + 4 >> 2] = $36;
  $allFound$4$off0 = $allFound$3$off0;
 }
 if (__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE5countIRA5_KcEEmOT_($json, 22556) | 0) {
  __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE3getIS9_S9_Li0EEET0_v($ref$tmp2, __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEixIKcEERKSB_PT_($json, 22556) | 0);
  $m_type = $this + 144 | 0;
  $__size_$i1$i$i$i$i125 = $m_type + 11 | 0;
  if ((HEAP8[$__size_$i1$i$i$i$i125 >> 0] | 0) < 0) {
   $42 = HEAP32[$m_type >> 2] | 0;
   HEAP8[$agg$tmp141150 >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($42, $agg$tmp141150);
   HEAP32[$this + 148 >> 2] = 0;
   if ((HEAP8[$__size_$i1$i$i$i$i125 >> 0] | 0) < 0) {
    $__cap_$i$i$i$i$i134 = $this + 152 | 0;
    __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm(HEAP32[$m_type >> 2] | 0, HEAP32[$__cap_$i$i$i$i$i134 >> 2] & 2147483647);
    HEAP32[$__cap_$i$i$i$i$i134 >> 2] = 0;
   }
  } else {
   HEAP8[$agg$tmp141150 >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($m_type, $agg$tmp141150);
   HEAP8[$__size_$i1$i$i$i$i125 >> 0] = 0;
  };
  HEAP32[$m_type >> 2] = HEAP32[$ref$tmp2 >> 2];
  HEAP32[$m_type + 4 >> 2] = HEAP32[$ref$tmp2 + 4 >> 2];
  HEAP32[$m_type + 8 >> 2] = HEAP32[$ref$tmp2 + 8 >> 2];
  HEAP32[$ref$tmp2 >> 2] = 0;
  HEAP32[$ref$tmp2 + 4 >> 2] = 0;
  HEAP32[$ref$tmp2 + 8 >> 2] = 0;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp2);
 }
 if (!(__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE5countIRA8_KcEEmOT_($json, 22561) | 0)) $allFound$5$off0 = 0; else {
  HEAP32[$this + 156 >> 2] = __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE3getIiiLi0EEET0_v(__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEixIKcEERKSB_PT_($json, 22561) | 0) | 0;
  $allFound$5$off0 = $allFound$4$off0;
 }
 if (__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE5countIRA7_KcEEmOT_($json, 22569) | 0) if (__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE8is_arrayEv(__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEixIKcEERKSB_PT_($json, 22569) | 0) | 0) {
  __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE5beginEv($agg$tmp, __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEixIKcEERKSB_PT_($json, 22569) | 0);
  __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE3endEv($agg$tmp111, __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEixIKcEERKSB_PT_($json, 22569) | 0);
  HEAP32[$agg$tmp141150 >> 2] = $this;
  if (__ZNK8nlohmann6detail9iter_implIKNS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEEneERKSF_($agg$tmp, $agg$tmp111) | 0) do {
   __ZZN4tson3Map5parseERKN8nlohmann10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS1_14adl_serializerEEEENKUlSF_E_clESF_($agg$tmp141150, __ZNK8nlohmann6detail9iter_implIKNS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEEdeEv($agg$tmp) | 0);
   __ZN8nlohmann6detail9iter_implIKNS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEEppEv($agg$tmp) | 0;
  } while (__ZNK8nlohmann6detail9iter_implIKNS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEEneERKSF_($agg$tmp, $agg$tmp111) | 0);
 }
 if (__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE5countIRA9_KcEEmOT_($json, 22576) | 0) if (__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE8is_arrayEv(__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEixIKcEERKSB_PT_($json, 22576) | 0) | 0) {
  __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE5beginEv($agg$tmp122, __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEixIKcEERKSB_PT_($json, 22576) | 0);
  __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE3endEv($agg$tmp124, __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEixIKcEERKSB_PT_($json, 22576) | 0);
  HEAP32[$agg$tmp141150 >> 2] = $this;
  if (__ZNK8nlohmann6detail9iter_implIKNS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEEneERKSF_($agg$tmp122, $agg$tmp124) | 0) do {
   __ZZN4tson3Map5parseERKN8nlohmann10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS1_14adl_serializerEEEENKUlSF_E0_clESF_($agg$tmp141150, __ZNK8nlohmann6detail9iter_implIKNS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEEdeEv($agg$tmp122) | 0);
   __ZN8nlohmann6detail9iter_implIKNS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEEppEv($agg$tmp122) | 0;
  } while (__ZNK8nlohmann6detail9iter_implIKNS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEEneERKSF_($agg$tmp122, $agg$tmp124) | 0);
 }
 if (__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE5countIRA11_KcEEmOT_($json, 22585) | 0) if (__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE8is_arrayEv(__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEixIKcEERKSB_PT_($json, 22585) | 0) | 0) {
  __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE5beginEv($agg$tmp137, __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEixIKcEERKSB_PT_($json, 22585) | 0);
  __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE3endEv($agg$tmp139, __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEixIKcEERKSB_PT_($json, 22585) | 0);
  HEAP32[$agg$tmp141150 >> 2] = $this;
  if (__ZNK8nlohmann6detail9iter_implIKNS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEEneERKSF_($agg$tmp137, $agg$tmp139) | 0) do {
   __ZZN4tson3Map5parseERKN8nlohmann10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS1_14adl_serializerEEEENKUlSF_E1_clESF_($agg$tmp141150, __ZNK8nlohmann6detail9iter_implIKNS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEEdeEv($agg$tmp137) | 0);
   __ZN8nlohmann6detail9iter_implIKNS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEEppEv($agg$tmp137) | 0;
  } while (__ZNK8nlohmann6detail9iter_implIKNS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEEneERKSF_($agg$tmp137, $agg$tmp139) | 0);
 }
 __ZN4tson3Map11processDataEv($this);
 STACKTOP = sp;
 return $allFound$5$off0 | 0;
}

function __ZN4tson7Tileset5parseERKN8nlohmann10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS1_14adl_serializerEEE($this, $json) {
 $this = $this | 0;
 $json = $json | 0;
 var $1 = 0, $11 = 0, $14 = 0, $19 = 0, $20 = 0, $24 = 0, $29 = 0, $30 = 0, $34 = 0, $39 = 0, $40 = 0, $5 = 0, $8 = 0, $9 = 0, $__cap_$i$i$i$i$i = 0, $__cap_$i$i$i$i$i$i = 0, $__cap_$i$i$i$i$i70 = 0, $__size_$i1$i$i$i$i = 0, $__size_$i1$i$i$i$i$i = 0, $__size_$i1$i$i$i$i61 = 0, $agg$tmp = 0, $agg$tmp112 = 0, $agg$tmp123 = 0, $agg$tmp125 = 0, $agg$tmp138 = 0, $agg$tmp140 = 0, $agg$tmp153 = 0, $agg$tmp155 = 0, $agg$tmp15795 = 0, $allFound$0$off0 = 0, $allFound$1$off0 = 0, $allFound$2$off0 = 0, $allFound$3$off0 = 0, $allFound$4$off0 = 0, $allFound$5$off0 = 0, $allFound$6$off0 = 0, $allFound$7$off0 = 0, $allFound$8$off0 = 0, $call100 = 0, $call76 = 0, $call89 = 0, $m_image = 0, $m_name = 0, $m_type = 0, $ref$tmp = 0, $ref$tmp14 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(176);
 $agg$tmp15795 = sp;
 $ref$tmp = sp + 32 | 0;
 $ref$tmp14 = sp + 20 | 0;
 $agg$tmp = sp + 160 | 0;
 $agg$tmp112 = sp + 144 | 0;
 $agg$tmp123 = sp + 128 | 0;
 $agg$tmp125 = sp + 112 | 0;
 $agg$tmp138 = sp + 96 | 0;
 $agg$tmp140 = sp + 80 | 0;
 $agg$tmp153 = sp + 64 | 0;
 $agg$tmp155 = sp + 48 | 0;
 if (!(__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE5countIRA8_KcEEmOT_($json, 23020) | 0)) $allFound$0$off0 = 0; else {
  HEAP32[$this >> 2] = __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE3getIiiLi0EEET0_v(__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEixIKcEERKSB_PT_($json, 23020) | 0) | 0;
  $allFound$0$off0 = 1;
 }
 if (!(__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE5countIRA9_KcEEmOT_($json, 23028) | 0)) $allFound$1$off0 = 0; else {
  HEAP32[$this + 4 >> 2] = __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE3getIiiLi0EEET0_v(__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEixIKcEERKSB_PT_($json, 23028) | 0) | 0;
  $allFound$1$off0 = $allFound$0$off0;
 }
 if (!(__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE5countIRA6_KcEEmOT_($json, 23037) | 0)) $allFound$2$off0 = 0; else {
  __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE3getIS9_S9_Li0EEET0_v($ref$tmp14, __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEixIKcEERKSB_PT_($json, 23037) | 0);
  HEAP32[$ref$tmp >> 2] = HEAP32[$ref$tmp14 >> 2];
  HEAP32[$ref$tmp + 4 >> 2] = HEAP32[$ref$tmp14 + 4 >> 2];
  HEAP32[$ref$tmp + 8 >> 2] = HEAP32[$ref$tmp14 + 8 >> 2];
  HEAP32[$ref$tmp14 >> 2] = 0;
  HEAP32[$ref$tmp14 + 4 >> 2] = 0;
  HEAP32[$ref$tmp14 + 8 >> 2] = 0;
  $m_image = $this + 8 | 0;
  $__size_$i1$i$i$i$i$i = $m_image + 11 | 0;
  if ((HEAP8[$__size_$i1$i$i$i$i$i >> 0] | 0) < 0) {
   $1 = HEAP32[$m_image >> 2] | 0;
   HEAP8[$agg$tmp15795 >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($1, $agg$tmp15795);
   HEAP32[$this + 12 >> 2] = 0;
   if ((HEAP8[$__size_$i1$i$i$i$i$i >> 0] | 0) < 0) {
    $__cap_$i$i$i$i$i$i = $this + 16 | 0;
    __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm(HEAP32[$m_image >> 2] | 0, HEAP32[$__cap_$i$i$i$i$i$i >> 2] & 2147483647);
    HEAP32[$__cap_$i$i$i$i$i$i >> 2] = 0;
   }
  } else {
   HEAP8[$agg$tmp15795 >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($m_image, $agg$tmp15795);
   HEAP8[$__size_$i1$i$i$i$i$i >> 0] = 0;
  };
  HEAP32[$m_image >> 2] = HEAP32[$ref$tmp >> 2];
  HEAP32[$m_image + 4 >> 2] = HEAP32[$ref$tmp + 4 >> 2];
  HEAP32[$m_image + 8 >> 2] = HEAP32[$ref$tmp + 8 >> 2];
  HEAP32[$ref$tmp >> 2] = 0;
  HEAP32[$ref$tmp + 4 >> 2] = 0;
  HEAP32[$ref$tmp + 8 >> 2] = 0;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp);
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp14);
  $allFound$2$off0 = $allFound$1$off0;
 }
 if (!(__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE5countIRA7_KcEEmOT_($json, 23043) | 0)) $allFound$3$off0 = 0; else {
  HEAP32[$this + 28 >> 2] = __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE3getIiiLi0EEET0_v(__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEixIKcEERKSB_PT_($json, 23043) | 0) | 0;
  $allFound$3$off0 = $allFound$2$off0;
 }
 if (!(__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE5countIRA5_KcEEmOT_($json, 22602) | 0)) $allFound$4$off0 = 0; else {
  __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE3getIS9_S9_Li0EEET0_v($ref$tmp, __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEixIKcEERKSB_PT_($json, 22602) | 0);
  $m_name = $this + 32 | 0;
  $__size_$i1$i$i$i$i = $m_name + 11 | 0;
  if ((HEAP8[$__size_$i1$i$i$i$i >> 0] | 0) < 0) {
   $5 = HEAP32[$m_name >> 2] | 0;
   HEAP8[$agg$tmp15795 >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($5, $agg$tmp15795);
   HEAP32[$this + 36 >> 2] = 0;
   if ((HEAP8[$__size_$i1$i$i$i$i >> 0] | 0) < 0) {
    $__cap_$i$i$i$i$i = $this + 40 | 0;
    __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm(HEAP32[$m_name >> 2] | 0, HEAP32[$__cap_$i$i$i$i$i >> 2] & 2147483647);
    HEAP32[$__cap_$i$i$i$i$i >> 2] = 0;
   }
  } else {
   HEAP8[$agg$tmp15795 >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($m_name, $agg$tmp15795);
   HEAP8[$__size_$i1$i$i$i$i >> 0] = 0;
  };
  HEAP32[$m_name >> 2] = HEAP32[$ref$tmp >> 2];
  HEAP32[$m_name + 4 >> 2] = HEAP32[$ref$tmp + 4 >> 2];
  HEAP32[$m_name + 8 >> 2] = HEAP32[$ref$tmp + 8 >> 2];
  HEAP32[$ref$tmp >> 2] = 0;
  HEAP32[$ref$tmp + 4 >> 2] = 0;
  HEAP32[$ref$tmp + 8 >> 2] = 0;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp);
  $allFound$4$off0 = $allFound$3$off0;
 }
 if (!(__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE5countIRA8_KcEEmOT_($json, 23050) | 0)) $allFound$5$off0 = 0; else {
  HEAP32[$this + 44 >> 2] = __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE3getIiiLi0EEET0_v(__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEixIKcEERKSB_PT_($json, 23050) | 0) | 0;
  $allFound$5$off0 = $allFound$4$off0;
 }
 if (!(__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE5countIRA10_KcEEmOT_($json, 23058) | 0)) $allFound$6$off0 = 0; else {
  HEAP32[$this + 48 >> 2] = __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE3getIiiLi0EEET0_v(__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEixIKcEERKSB_PT_($json, 23058) | 0) | 0;
  $allFound$6$off0 = $allFound$5$off0;
 }
 if (__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE5countIRA17_KcEEmOT_($json, 23068) | 0) {
  __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE3getIS9_S9_Li0EEET0_v($ref$tmp, __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEixIKcEERKSB_PT_($json, 23068) | 0);
  __ZN4tson5ColorIhEC2ERKNSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE($agg$tmp15795, $ref$tmp);
  $8 = $this + 60 | 0;
  $9 = HEAP32[$agg$tmp15795 >> 2] | 0;
  HEAP8[$8 >> 0] = $9;
  HEAP8[$8 + 1 >> 0] = $9 >> 8;
  HEAP8[$8 + 2 >> 0] = $9 >> 16;
  HEAP8[$8 + 3 >> 0] = $9 >> 24;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp);
 }
 if (__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE5countIRA5_KcEEmOT_($json, 22556) | 0) {
  __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE3getIS9_S9_Li0EEET0_v($ref$tmp, __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEixIKcEERKSB_PT_($json, 22556) | 0);
  $m_type = $this + 64 | 0;
  $__size_$i1$i$i$i$i61 = $m_type + 11 | 0;
  if ((HEAP8[$__size_$i1$i$i$i$i61 >> 0] | 0) < 0) {
   $11 = HEAP32[$m_type >> 2] | 0;
   HEAP8[$agg$tmp15795 >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($11, $agg$tmp15795);
   HEAP32[$this + 68 >> 2] = 0;
   if ((HEAP8[$__size_$i1$i$i$i$i61 >> 0] | 0) < 0) {
    $__cap_$i$i$i$i$i70 = $this + 72 | 0;
    __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm(HEAP32[$m_type >> 2] | 0, HEAP32[$__cap_$i$i$i$i$i70 >> 2] & 2147483647);
    HEAP32[$__cap_$i$i$i$i$i70 >> 2] = 0;
   }
  } else {
   HEAP8[$agg$tmp15795 >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($m_type, $agg$tmp15795);
   HEAP8[$__size_$i1$i$i$i$i61 >> 0] = 0;
  };
  HEAP32[$m_type >> 2] = HEAP32[$ref$tmp >> 2];
  HEAP32[$m_type + 4 >> 2] = HEAP32[$ref$tmp + 4 >> 2];
  HEAP32[$m_type + 8 >> 2] = HEAP32[$ref$tmp + 8 >> 2];
  HEAP32[$ref$tmp >> 2] = 0;
  HEAP32[$ref$tmp + 4 >> 2] = 0;
  HEAP32[$ref$tmp + 8 >> 2] = 0;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp);
 }
 if (__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE5countIRA5_KcEEmOT_($json, 23085) | 0) {
  __ZN4tson4GridC2ERKN8nlohmann10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS1_14adl_serializerEEE($agg$tmp15795, __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEixIKcEERKSB_PT_($json, 23085) | 0);
  __ZN4tson4GridaSEOS0_($this + 144 | 0, $agg$tmp15795) | 0;
  __ZN4tson4GridD2Ev($agg$tmp15795);
 }
 if (!(__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE5countIRA11_KcEEmOT_($json, 23090) | 0)) $allFound$7$off0 = 0; else if (!(__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE5countIRA12_KcEEmOT_($json, 23101) | 0)) $allFound$7$off0 = 0; else {
  $call76 = __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE3getIiiLi0EEET0_v(__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEixIKcEERKSB_PT_($json, 23090) | 0) | 0;
  __ZN4tson7Vector2IiEC2Eii($agg$tmp15795, $call76, __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE3getIiiLi0EEET0_v(__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEixIKcEERKSB_PT_($json, 23101) | 0) | 0);
  $14 = $agg$tmp15795;
  $19 = HEAP32[$14 + 4 >> 2] | 0;
  $20 = $this + 20 | 0;
  HEAP32[$20 >> 2] = HEAP32[$14 >> 2];
  HEAP32[$20 + 4 >> 2] = $19;
  $allFound$7$off0 = $allFound$6$off0;
 }
 if (!(__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE5countIRA10_KcEEmOT_($json, 22535) | 0)) $allFound$8$off0 = 0; else if (!(__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE5countIRA11_KcEEmOT_($json, 22545) | 0)) $allFound$8$off0 = 0; else {
  $call89 = __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE3getIiiLi0EEET0_v(__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEixIKcEERKSB_PT_($json, 22535) | 0) | 0;
  __ZN4tson7Vector2IiEC2Eii($agg$tmp15795, $call89, __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE3getIiiLi0EEET0_v(__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEixIKcEERKSB_PT_($json, 22545) | 0) | 0);
  $24 = $agg$tmp15795;
  $29 = HEAP32[$24 + 4 >> 2] | 0;
  $30 = $this + 52 | 0;
  HEAP32[$30 >> 2] = HEAP32[$24 >> 2];
  HEAP32[$30 + 4 >> 2] = $29;
  $allFound$8$off0 = $allFound$7$off0;
 }
 if (__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE5countIRA11_KcEEmOT_($json, 23113) | 0) {
  $call100 = __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE3getIiiLi0EEET0_v(__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEixIKcEERKSB_PT_(__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEixIKcEERKSB_PT_($json, 23113) | 0, 23124) | 0) | 0;
  __ZN4tson7Vector2IiEC2Eii($agg$tmp15795, $call100, __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE3getIiiLi0EEET0_v(__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEixIKcEERKSB_PT_(__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEixIKcEERKSB_PT_($json, 23113) | 0, 23126) | 0) | 0);
  $34 = $agg$tmp15795;
  $39 = HEAP32[$34 + 4 >> 2] | 0;
  $40 = $this + 136 | 0;
  HEAP32[$40 >> 2] = HEAP32[$34 >> 2];
  HEAP32[$40 + 4 >> 2] = $39;
 }
 if (__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE5countIRA9_KcEEmOT_($json, 23128) | 0) if (__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE8is_arrayEv(__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEixIKcEERKSB_PT_($json, 23128) | 0) | 0) {
  __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE5beginEv($agg$tmp, __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEixIKcEERKSB_PT_($json, 23128) | 0);
  __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE3endEv($agg$tmp112, __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEixIKcEERKSB_PT_($json, 23128) | 0);
  HEAP32[$agg$tmp15795 >> 2] = $this;
  if (__ZNK8nlohmann6detail9iter_implIKNS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEEneERKSF_($agg$tmp, $agg$tmp112) | 0) do {
   __ZZN4tson7Tileset5parseERKN8nlohmann10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS1_14adl_serializerEEEENKUlSF_E_clESF_($agg$tmp15795, __ZNK8nlohmann6detail9iter_implIKNS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEEdeEv($agg$tmp) | 0);
   __ZN8nlohmann6detail9iter_implIKNS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEEppEv($agg$tmp) | 0;
  } while (__ZNK8nlohmann6detail9iter_implIKNS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEEneERKSF_($agg$tmp, $agg$tmp112) | 0);
 }
 if (__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE5countIRA6_KcEEmOT_($json, 23137) | 0) if (__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE8is_arrayEv(__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEixIKcEERKSB_PT_($json, 23137) | 0) | 0) {
  __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE5beginEv($agg$tmp123, __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEixIKcEERKSB_PT_($json, 23137) | 0);
  __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE3endEv($agg$tmp125, __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEixIKcEERKSB_PT_($json, 23137) | 0);
  HEAP32[$agg$tmp15795 >> 2] = $this;
  if (__ZNK8nlohmann6detail9iter_implIKNS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEEneERKSF_($agg$tmp123, $agg$tmp125) | 0) do {
   __ZZN4tson7Tileset5parseERKN8nlohmann10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS1_14adl_serializerEEEENKUlSF_E0_clESF_($agg$tmp15795, __ZNK8nlohmann6detail9iter_implIKNS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEEdeEv($agg$tmp123) | 0);
   __ZN8nlohmann6detail9iter_implIKNS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEEppEv($agg$tmp123) | 0;
  } while (__ZNK8nlohmann6detail9iter_implIKNS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEEneERKSF_($agg$tmp123, $agg$tmp125) | 0);
 }
 if (__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE5countIRA9_KcEEmOT_($json, 23143) | 0) if (__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE8is_arrayEv(__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEixIKcEERKSB_PT_($json, 23143) | 0) | 0) {
  __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE5beginEv($agg$tmp138, __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEixIKcEERKSB_PT_($json, 23143) | 0);
  __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE3endEv($agg$tmp140, __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEixIKcEERKSB_PT_($json, 23143) | 0);
  HEAP32[$agg$tmp15795 >> 2] = $this;
  if (__ZNK8nlohmann6detail9iter_implIKNS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEEneERKSF_($agg$tmp138, $agg$tmp140) | 0) do {
   __ZZN4tson7Tileset5parseERKN8nlohmann10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS1_14adl_serializerEEEENKUlSF_E1_clESF_($agg$tmp15795, __ZNK8nlohmann6detail9iter_implIKNS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEEdeEv($agg$tmp138) | 0);
   __ZN8nlohmann6detail9iter_implIKNS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEEppEv($agg$tmp138) | 0;
  } while (__ZNK8nlohmann6detail9iter_implIKNS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEEneERKSF_($agg$tmp138, $agg$tmp140) | 0);
 }
 if (__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE5countIRA11_KcEEmOT_($json, 22585) | 0) if (__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE8is_arrayEv(__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEixIKcEERKSB_PT_($json, 22585) | 0) | 0) {
  __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE5beginEv($agg$tmp153, __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEixIKcEERKSB_PT_($json, 22585) | 0);
  __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE3endEv($agg$tmp155, __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEixIKcEERKSB_PT_($json, 22585) | 0);
  HEAP32[$agg$tmp15795 >> 2] = $this;
  if (__ZNK8nlohmann6detail9iter_implIKNS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEEneERKSF_($agg$tmp153, $agg$tmp155) | 0) do {
   __ZZN4tson7Tileset5parseERKN8nlohmann10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS1_14adl_serializerEEEENKUlSF_E2_clESF_($agg$tmp15795, __ZNK8nlohmann6detail9iter_implIKNS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEEdeEv($agg$tmp153) | 0);
   __ZN8nlohmann6detail9iter_implIKNS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEEppEv($agg$tmp153) | 0;
  } while (__ZNK8nlohmann6detail9iter_implIKNS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEEneERKSF_($agg$tmp153, $agg$tmp155) | 0);
 }
 __ZN4tson7Tileset20generateMissingTilesEv($this);
 STACKTOP = sp;
 return $allFound$8$off0 | 0;
}

function _vfscanf($f, $fmt, $ap) {
 $f = $f | 0;
 $fmt = $fmt | 0;
 $ap = $ap | 0;
 var $$compoundliteral$sroa$2$0$$sroa_idx8 = 0, $$compoundliteral333 = 0, $$ph$ph = 0, $1 = 0, $10 = 0, $102 = 0, $109 = 0, $116 = 0, $119 = 0, $120 = 0, $127 = 0, $128 = 0, $129 = 0, $131 = 0, $134 = 0, $139 = 0, $145 = 0, $147 = 0, $150 = 0, $155 = 0, $160 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $174 = 0, $177 = 0, $178 = 0, $179 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $24 = 0, $27 = 0, $28 = 0, $34 = 0, $4 = 0, $43 = 0, $44 = 0, $48 = 0, $49 = 0, $54 = 0, $60 = 0, $67 = 0, $70 = 0, $72 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $94 = 0, $98 = 0, $add$ptr = 0, $alloc$0 = 0, $alloc$1 = 0, $alloc$2 = 0, $arrayidx = 0, $arrayidx213 = 0, $arrayidx218 = 0, $arrayidx239 = 0, $arrayidx248 = 0, $arrayidx263 = 0, $arrayidx34 = 0, $base$0 = 0, $c$0304 = 0, $call310 = 0, $call352 = 0, $call365 = 0, $call395 = 0, $call529 = 0.0, $cmp112 = 0, $cmp120 = 0, $cmp132 = 0, $cmp202 = 0, $cmp223 = 0, $cmp304 = 0, $cmp32 = 0, $cond = 0, $cond155 = 0, $cond16 = 0, $cond303 = 0, $cond328 = 0, $cond381 = 0, $cond419 = 0, $cond441 = 0, $cond53 = 0, $conv131 = 0, $conv238 = 0, $conv247 = 0, $conv289$pre$phiZ2D = 0, $dest$0 = 0, $i$0$ph = 0, $i$0$ph$ph = 0, $i$1 = 0, $i$2 = 0, $i$2$ph = 0, $i$3 = 0, $i$4 = 0, $incdec$ptr106 = 0, $incdec$ptr109$pre$phiZZ2D = 0, $incdec$ptr164 = 0, $incdec$ptr221 = 0, $incdec$ptr25 = 0, $incdec$ptr454 = 0, $incdec$ptr99 = 0, $invert$0 = 0, $k$0$ph$ph = 0, $k$2$ph = 0, $matches$0308 = 0, $matches$1 = 0, $matches$2 = 0, $matches$3 = 0, $p$0312 = 0, $p$1 = 0, $p$10 = 0, $p$11 = 0, $p$12 = 0, $p$2 = 0, $p$3$lcssa = 0, $p$3299 = 0, $p$4 = 0, $p$5 = 0, $p$6 = 0, $p$7 = 0, $p$8 = 0, $p$9 = 0, $rend = 0, $rpos42 = 0, $s$0306 = 0, $s$1 = 0, $s$10 = 0, $s$2$ph = 0, $s$5 = 0, $s$6 = 0, $s$7 = 0, $s$8 = 0, $s$9 = 0, $scanset = 0, $shcnt = 0, $shend43 = 0, $size$0 = 0, $spec$select = 0, $spec$select219 = 0, $st = 0, $sub$ptr$sub = 0, $sub$ptr$sub172 = 0, $sub$ptr$sub462 = 0, $sub$ptr$sub514 = 0, $sub$ptr$sub535 = 0, $sub$ptr$sub555 = 0, $sub98 = 0, $tobool307 = 0, $tobool339 = 0, $trunc = 0, $wc = 0, $wcs$6 = 0, $width$0$lcssa = 0, $width$0300 = 0, $width$1 = 0, label = 0, sp = 0, $i$2$looptemp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 288 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(288);
 $st = sp + 264 | 0;
 $scanset = sp;
 $wc = sp + 260 | 0;
 $$compoundliteral333 = sp + 272 | 0;
 if ((HEAP32[$f + 76 >> 2] | 0) > -1) $cond = ___lockfile($f) | 0; else $cond = 0;
 $1 = HEAP8[$fmt >> 0] | 0;
 L4 : do if (!($1 << 24 >> 24)) $matches$3 = 0; else {
  $rpos42 = $f + 4 | 0;
  $shend43 = $f + 104 | 0;
  $shcnt = $f + 120 | 0;
  $rend = $f + 8 | 0;
  $arrayidx213 = $scanset + 10 | 0;
  $arrayidx218 = $scanset + 33 | 0;
  $arrayidx239 = $scanset + 46 | 0;
  $arrayidx248 = $scanset + 94 | 0;
  $$compoundliteral$sroa$2$0$$sroa_idx8 = $st + 4 | 0;
  $178 = 0;
  $2 = $1;
  $20 = 0;
  $21 = 0;
  $matches$0308 = 0;
  $p$0312 = $fmt;
  $s$0306 = 0;
  L6 : while (1) {
   L8 : do if (!(_isspace($2 & 255) | 0)) {
    $cmp32 = (HEAP8[$p$0312 >> 0] | 0) == 37;
    L10 : do if ($cmp32) {
     $arrayidx34 = $p$0312 + 1 | 0;
     $27 = HEAP8[$arrayidx34 >> 0] | 0;
     L12 : do switch ($27 << 24 >> 24) {
     case 37:
      {
       break L10;
       break;
      }
     case 42:
      {
       $dest$0 = 0;
       $p$2 = $p$0312 + 2 | 0;
       break;
      }
     default:
      {
       if (_isdigit($27 & 255) | 0) if ((HEAP8[$p$0312 + 2 >> 0] | 0) == 36) {
        $dest$0 = _arg_n($ap, (HEAPU8[$arrayidx34 >> 0] | 0) + -48 | 0) | 0;
        $p$2 = $p$0312 + 3 | 0;
        break L12;
       }
       $43 = (HEAP32[$ap >> 2] | 0) + (4 - 1) & ~(4 - 1);
       $44 = HEAP32[$43 >> 2] | 0;
       HEAP32[$ap >> 2] = $43 + 4;
       $dest$0 = $44;
       $p$2 = $arrayidx34;
      }
     } while (0);
     if (!(_isdigit(HEAPU8[$p$2 >> 0] | 0) | 0)) {
      $p$3$lcssa = $p$2;
      $width$0$lcssa = 0;
     } else {
      $p$3299 = $p$2;
      $width$0300 = 0;
      while (1) {
       $sub98 = ($width$0300 * 10 | 0) + -48 + (HEAPU8[$p$3299 >> 0] | 0) | 0;
       $incdec$ptr99 = $p$3299 + 1 | 0;
       if (!(_isdigit(HEAPU8[$incdec$ptr99 >> 0] | 0) | 0)) {
        $p$3$lcssa = $incdec$ptr99;
        $width$0$lcssa = $sub98;
        break;
       } else {
        $p$3299 = $incdec$ptr99;
        $width$0300 = $sub98;
       }
      }
     }
     $48 = HEAP8[$p$3$lcssa >> 0] | 0;
     $incdec$ptr106 = $p$3$lcssa + 1 | 0;
     if ($48 << 24 >> 24 == 109) {
      $183 = 0;
      $49 = HEAP8[$incdec$ptr106 >> 0] | 0;
      $alloc$0 = ($dest$0 | 0) != 0 & 1;
      $incdec$ptr109$pre$phiZZ2D = $p$3$lcssa + 2 | 0;
      $p$4 = $incdec$ptr106;
      $s$1 = 0;
     } else {
      $183 = $178;
      $49 = $48;
      $alloc$0 = 0;
      $incdec$ptr109$pre$phiZZ2D = $incdec$ptr106;
      $p$4 = $p$3$lcssa;
      $s$1 = $s$0306;
     }
     switch ($49 << 24 >> 24) {
     case 104:
      {
       $cmp112 = (HEAP8[$incdec$ptr109$pre$phiZZ2D >> 0] | 0) == 104;
       $p$5 = $cmp112 ? $p$4 + 2 | 0 : $incdec$ptr109$pre$phiZZ2D;
       $size$0 = $cmp112 ? -2 : -1;
       break;
      }
     case 108:
      {
       $cmp120 = (HEAP8[$incdec$ptr109$pre$phiZZ2D >> 0] | 0) == 108;
       $p$5 = $cmp120 ? $p$4 + 2 | 0 : $incdec$ptr109$pre$phiZZ2D;
       $size$0 = $cmp120 ? 3 : 1;
       break;
      }
     case 106:
      {
       $p$5 = $incdec$ptr109$pre$phiZZ2D;
       $size$0 = 3;
       break;
      }
     case 116:
     case 122:
      {
       $p$5 = $incdec$ptr109$pre$phiZZ2D;
       $size$0 = 1;
       break;
      }
     case 76:
      {
       $p$5 = $incdec$ptr109$pre$phiZZ2D;
       $size$0 = 2;
       break;
      }
     case 110:
     case 112:
     case 67:
     case 83:
     case 91:
     case 99:
     case 115:
     case 88:
     case 71:
     case 70:
     case 69:
     case 65:
     case 103:
     case 102:
     case 101:
     case 97:
     case 120:
     case 117:
     case 111:
     case 105:
     case 100:
      {
       $p$5 = $p$4;
       $size$0 = 0;
       break;
      }
     default:
      {
       $184 = $183;
       $s$8 = $s$1;
       label = 143;
       break L6;
      }
     }
     $conv131 = HEAPU8[$p$5 >> 0] | 0;
     $cmp132 = ($conv131 & 47 | 0) == 3;
     $spec$select = $cmp132 ? $conv131 | 32 : $conv131;
     $spec$select219 = $cmp132 ? 1 : $size$0;
     $trunc = $spec$select & 255;
     switch ($trunc << 24 >> 24) {
     case 99:
      {
       $170 = $20;
       $171 = $21;
       $width$1 = ($width$0$lcssa | 0) > 1 ? $width$0$lcssa : 1;
       break;
      }
     case 91:
      {
       $170 = $20;
       $171 = $21;
       $width$1 = $width$0$lcssa;
       break;
      }
     case 110:
      {
       _store_int($dest$0, $spec$select219, $20, $21);
       $179 = $183;
       $180 = $20;
       $181 = $21;
       $matches$1 = $matches$0308;
       $p$12 = $p$5;
       $s$7 = $s$1;
       break L8;
       break;
      }
     default:
      {
       ___shlim($f, 0, 0);
       do {
        $54 = HEAP32[$rpos42 >> 2] | 0;
        if ($54 >>> 0 < (HEAP32[$shend43 >> 2] | 0) >>> 0) {
         HEAP32[$rpos42 >> 2] = $54 + 1;
         $cond155 = HEAPU8[$54 >> 0] | 0;
        } else $cond155 = ___shgetc($f) | 0;
       } while ((_isspace($cond155) | 0) != 0);
       if (!(HEAP32[$shend43 >> 2] | 0)) $67 = HEAP32[$rpos42 >> 2] | 0; else {
        $incdec$ptr164 = (HEAP32[$rpos42 >> 2] | 0) + -1 | 0;
        HEAP32[$rpos42 >> 2] = $incdec$ptr164;
        $67 = $incdec$ptr164;
       }
       $60 = $shcnt;
       $sub$ptr$sub172 = $67 - (HEAP32[$rend >> 2] | 0) | 0;
       $70 = _i64Add(HEAP32[$60 >> 2] | 0, HEAP32[$60 + 4 >> 2] | 0, $20 | 0, $21 | 0) | 0;
       $72 = _i64Add($70 | 0, getTempRet0() | 0, $sub$ptr$sub172 | 0, (($sub$ptr$sub172 | 0) < 0) << 31 >> 31 | 0) | 0;
       $170 = $72;
       $171 = getTempRet0() | 0;
       $width$1 = $width$0$lcssa;
      }
     }
     $75 = (($width$1 | 0) < 0) << 31 >> 31;
     ___shlim($f, $width$1, $75);
     $76 = HEAP32[$rpos42 >> 2] | 0;
     $77 = HEAP32[$shend43 >> 2] | 0;
     if ($76 >>> 0 < $77 >>> 0) {
      HEAP32[$rpos42 >> 2] = $76 + 1;
      $78 = $77;
     } else {
      if ((___shgetc($f) | 0) < 0) {
       $184 = $183;
       $s$8 = $s$1;
       label = 143;
       break L6;
      }
      $78 = HEAP32[$shend43 >> 2] | 0;
     }
     if ($78 | 0) HEAP32[$rpos42 >> 2] = (HEAP32[$rpos42 >> 2] | 0) + -1;
     L59 : do switch ($trunc << 24 >> 24) {
     case 91:
     case 99:
     case 115:
      {
       $cmp202 = ($spec$select | 0) == 99;
       L61 : do if (($spec$select | 16 | 0) == 115) {
        _memset($scanset | 0, -1, 257) | 0;
        HEAP8[$scanset >> 0] = 0;
        if (($spec$select | 0) == 115) {
         HEAP8[$arrayidx218 >> 0] = 0;
         HEAP16[$arrayidx213 >> 1] = 0;
         HEAP16[$arrayidx213 + 2 >> 1] = 0;
         HEAP8[$arrayidx213 + 4 >> 0] = 0;
         $p$10 = $p$5;
        } else $p$10 = $p$5;
       } else {
        $incdec$ptr221 = $p$5 + 1 | 0;
        $cmp223 = (HEAP8[$incdec$ptr221 >> 0] | 0) == 94;
        $invert$0 = $cmp223 & 1;
        $p$6 = $cmp223 ? $p$5 + 2 | 0 : $incdec$ptr221;
        _memset($scanset | 0, $invert$0 | 0, 257) | 0;
        HEAP8[$scanset >> 0] = 0;
        switch (HEAP8[$p$6 >> 0] | 0) {
        case 45:
         {
          $conv238 = ($invert$0 ^ 1) & 255;
          HEAP8[$arrayidx239 >> 0] = $conv238;
          $conv289$pre$phiZ2D = $conv238;
          $p$7 = $p$6 + 1 | 0;
          break;
         }
        case 93:
         {
          $conv247 = ($invert$0 ^ 1) & 255;
          HEAP8[$arrayidx248 >> 0] = $conv247;
          $conv289$pre$phiZ2D = $conv247;
          $p$7 = $p$6 + 1 | 0;
          break;
         }
        default:
         {
          $conv289$pre$phiZ2D = ($invert$0 ^ 1) & 255;
          $p$7 = $p$6;
         }
        }
        $p$8 = $p$7;
        while (1) {
         $84 = HEAP8[$p$8 >> 0] | 0;
         L72 : do switch ($84 << 24 >> 24) {
         case 0:
          {
           $184 = $183;
           $s$8 = $s$1;
           label = 143;
           break L6;
           break;
          }
         case 93:
          {
           $p$10 = $p$8;
           break L61;
           break;
          }
         case 45:
          {
           $arrayidx263 = $p$8 + 1 | 0;
           $85 = HEAP8[$arrayidx263 >> 0] | 0;
           switch ($85 << 24 >> 24) {
           case 93:
           case 0:
            {
             $88 = 45;
             $p$9 = $p$8;
             break L72;
             break;
            }
           default:
            {}
           }
           $86 = HEAP8[$p$8 + -1 >> 0] | 0;
           if (($86 & 255) < ($85 & 255)) {
            $c$0304 = $86 & 255;
            do {
             $c$0304 = $c$0304 + 1 | 0;
             HEAP8[$scanset + $c$0304 >> 0] = $conv289$pre$phiZ2D;
             $87 = HEAP8[$arrayidx263 >> 0] | 0;
            } while ($c$0304 >>> 0 < ($87 & 255) >>> 0);
            $88 = $87;
            $p$9 = $arrayidx263;
           } else {
            $88 = $85;
            $p$9 = $arrayidx263;
           }
           break;
          }
         default:
          {
           $88 = $84;
           $p$9 = $p$8;
          }
         } while (0);
         HEAP8[$scanset + (($88 & 255) + 1) >> 0] = $conv289$pre$phiZ2D;
         $p$8 = $p$9 + 1 | 0;
        }
       } while (0);
       $cond303 = $cmp202 ? $width$1 + 1 | 0 : 31;
       $cmp304 = ($spec$select219 | 0) == 1;
       $tobool307 = ($alloc$0 | 0) != 0;
       L80 : do if ($cmp304) {
        if ($tobool307) {
         $call310 = _malloc($cond303 << 2) | 0;
         if (!$call310) {
          $184 = 0;
          $s$8 = 0;
          label = 143;
          break L6;
         } else $186 = $call310;
        } else $186 = $dest$0;
        HEAP32[$st >> 2] = 0;
        HEAP32[$$compoundliteral$sroa$2$0$$sroa_idx8 >> 2] = 0;
        $$ph$ph = $186;
        $i$0$ph$ph = 0;
        $k$0$ph$ph = $cond303;
        L85 : while (1) {
         $tobool339 = ($$ph$ph | 0) == 0;
         $i$0$ph = $i$0$ph$ph;
         while (1) {
          L89 : while (1) {
           $89 = HEAP32[$rpos42 >> 2] | 0;
           if ($89 >>> 0 < (HEAP32[$shend43 >> 2] | 0) >>> 0) {
            HEAP32[$rpos42 >> 2] = $89 + 1;
            $cond328 = HEAPU8[$89 >> 0] | 0;
           } else $cond328 = ___shgetc($f) | 0;
           if (!(HEAP8[$scanset + ($cond328 + 1) >> 0] | 0)) break L85;
           HEAP8[$$compoundliteral333 >> 0] = $cond328;
           switch (_mbrtowc($wc, $$compoundliteral333, 1, $st) | 0) {
           case -1:
            {
             $184 = $$ph$ph;
             $s$8 = 0;
             label = 143;
             break L6;
             break;
            }
           case -2:
            break;
           default:
            break L89;
           }
          }
          if ($tobool339) $i$1 = $i$0$ph; else {
           HEAP32[$$ph$ph + ($i$0$ph << 2) >> 2] = HEAP32[$wc >> 2];
           $i$1 = $i$0$ph + 1 | 0;
          }
          if ($tobool307 & ($i$1 | 0) == ($k$0$ph$ph | 0)) break; else $i$0$ph = $i$1;
         }
         $k$0$ph$ph = $k$0$ph$ph << 1 | 1;
         $call352 = _realloc($$ph$ph, $k$0$ph$ph << 2) | 0;
         if (!$call352) {
          $184 = $$ph$ph;
          $s$8 = 0;
          label = 143;
          break L6;
         } else {
          $$ph$ph = $call352;
          $i$0$ph$ph = $i$1;
         }
        }
        if (!(_mbsinit($st) | 0)) {
         $184 = $$ph$ph;
         $s$8 = 0;
         label = 143;
         break L6;
        } else {
         $187 = $$ph$ph;
         $i$4 = $i$0$ph;
         $s$5 = 0;
         $wcs$6 = $$ph$ph;
        }
       } else {
        if ($tobool307) {
         $call365 = _malloc($cond303) | 0;
         if (!$call365) {
          $184 = 0;
          $s$8 = 0;
          label = 143;
          break L6;
         }
         $i$2$ph = 0;
         $k$2$ph = $cond303;
         $s$2$ph = $call365;
         while (1) {
          $i$2 = $i$2$ph;
          do {
           $94 = HEAP32[$rpos42 >> 2] | 0;
           if ($94 >>> 0 < (HEAP32[$shend43 >> 2] | 0) >>> 0) {
            HEAP32[$rpos42 >> 2] = $94 + 1;
            $cond381 = HEAPU8[$94 >> 0] | 0;
           } else $cond381 = ___shgetc($f) | 0;
           if (!(HEAP8[$scanset + ($cond381 + 1) >> 0] | 0)) {
            $187 = 0;
            $i$4 = $i$2;
            $s$5 = $s$2$ph;
            $wcs$6 = 0;
            break L80;
           }
           $i$2$looptemp = $i$2;
           $i$2 = $i$2 + 1 | 0;
           HEAP8[$s$2$ph + $i$2$looptemp >> 0] = $cond381;
          } while (($i$2 | 0) != ($k$2$ph | 0));
          $k$2$ph = $k$2$ph << 1 | 1;
          $call395 = _realloc($s$2$ph, $k$2$ph) | 0;
          if (!$call395) {
           $184 = 0;
           $s$8 = $s$2$ph;
           label = 143;
           break L6;
          } else {
           $i$2$ph = $i$2;
           $s$2$ph = $call395;
          }
         }
        }
        if (!$dest$0) while (1) {
         $102 = HEAP32[$rpos42 >> 2] | 0;
         if ($102 >>> 0 < (HEAP32[$shend43 >> 2] | 0) >>> 0) {
          HEAP32[$rpos42 >> 2] = $102 + 1;
          $cond441 = HEAPU8[$102 >> 0] | 0;
         } else $cond441 = ___shgetc($f) | 0;
         if (!(HEAP8[$scanset + ($cond441 + 1) >> 0] | 0)) {
          $187 = 0;
          $i$4 = 0;
          $s$5 = 0;
          $wcs$6 = 0;
          break L80;
         }
        }
        $i$3 = 0;
        while (1) {
         $98 = HEAP32[$rpos42 >> 2] | 0;
         if ($98 >>> 0 < (HEAP32[$shend43 >> 2] | 0) >>> 0) {
          HEAP32[$rpos42 >> 2] = $98 + 1;
          $cond419 = HEAPU8[$98 >> 0] | 0;
         } else $cond419 = ___shgetc($f) | 0;
         if (!(HEAP8[$scanset + ($cond419 + 1) >> 0] | 0)) {
          $187 = 0;
          $i$4 = $i$3;
          $s$5 = $dest$0;
          $wcs$6 = 0;
          break L80;
         }
         HEAP8[$dest$0 + $i$3 >> 0] = $cond419;
         $i$3 = $i$3 + 1 | 0;
        }
       } while (0);
       if (!(HEAP32[$shend43 >> 2] | 0)) $116 = HEAP32[$rpos42 >> 2] | 0; else {
        $incdec$ptr454 = (HEAP32[$rpos42 >> 2] | 0) + -1 | 0;
        HEAP32[$rpos42 >> 2] = $incdec$ptr454;
        $116 = $incdec$ptr454;
       }
       $109 = $shcnt;
       $sub$ptr$sub462 = $116 - (HEAP32[$rend >> 2] | 0) | 0;
       $119 = _i64Add(HEAP32[$109 >> 2] | 0, HEAP32[$109 + 4 >> 2] | 0, $sub$ptr$sub462 | 0, (($sub$ptr$sub462 | 0) < 0) << 31 >> 31 | 0) | 0;
       $120 = getTempRet0() | 0;
       if (($119 | 0) == 0 & ($120 | 0) == 0) {
        $177 = $187;
        $alloc$2 = $alloc$0;
        $matches$2 = $matches$0308;
        $s$10 = $s$5;
        break L6;
       }
       if (!(($119 | 0) == ($width$1 | 0) & ($120 | 0) == ($75 | 0) | $cmp202 ^ 1)) {
        $177 = $187;
        $alloc$2 = $alloc$0;
        $matches$2 = $matches$0308;
        $s$10 = $s$5;
        break L6;
       }
       do if ($tobool307) if ($cmp304) {
        HEAP32[$dest$0 >> 2] = $wcs$6;
        break;
       } else {
        HEAP32[$dest$0 >> 2] = $s$5;
        break;
       } while (0);
       if ($cmp202) {
        $185 = $187;
        $p$11 = $p$10;
        $s$6 = $s$5;
       } else {
        if ($wcs$6 | 0) HEAP32[$wcs$6 + ($i$4 << 2) >> 2] = 0;
        if (!$s$5) {
         $185 = $187;
         $p$11 = $p$10;
         $s$6 = 0;
         break L59;
        }
        HEAP8[$s$5 + $i$4 >> 0] = 0;
        $185 = $187;
        $p$11 = $p$10;
        $s$6 = $s$5;
       }
       break;
      }
     case 120:
     case 88:
     case 112:
      {
       $base$0 = 16;
       label = 131;
       break;
      }
     case 111:
      {
       $base$0 = 8;
       label = 131;
       break;
      }
     case 117:
     case 100:
      {
       $base$0 = 10;
       label = 131;
       break;
      }
     case 105:
      {
       $base$0 = 0;
       label = 131;
       break;
      }
     case 71:
     case 103:
     case 70:
     case 102:
     case 69:
     case 101:
     case 65:
     case 97:
      {
       $call529 = +___floatscan($f, $spec$select219, 0);
       $145 = $shcnt;
       $147 = HEAP32[$145 >> 2] | 0;
       $150 = HEAP32[$145 + 4 >> 2] | 0;
       $sub$ptr$sub535 = (HEAP32[$rpos42 >> 2] | 0) - (HEAP32[$rend >> 2] | 0) | 0;
       $155 = _i64Subtract(0, 0, $sub$ptr$sub535 | 0, (($sub$ptr$sub535 | 0) < 0) << 31 >> 31 | 0) | 0;
       if (($147 | 0) == ($155 | 0) & ($150 | 0) == (getTempRet0() | 0)) {
        $177 = $183;
        $alloc$2 = $alloc$0;
        $matches$2 = $matches$0308;
        $s$10 = $s$1;
        break L6;
       }
       if (!$dest$0) {
        $185 = $183;
        $p$11 = $p$5;
        $s$6 = $s$1;
       } else switch ($spec$select219 | 0) {
       case 0:
        {
         HEAPF32[$dest$0 >> 2] = Math_fround($call529);
         $185 = $183;
         $p$11 = $p$5;
         $s$6 = $s$1;
         break L59;
         break;
        }
       case 1:
        {
         HEAPF64[$dest$0 >> 3] = $call529;
         $185 = $183;
         $p$11 = $p$5;
         $s$6 = $s$1;
         break L59;
         break;
        }
       case 2:
        {
         HEAPF64[$dest$0 >> 3] = $call529;
         $185 = $183;
         $p$11 = $p$5;
         $s$6 = $s$1;
         break L59;
         break;
        }
       default:
        {
         $185 = $183;
         $p$11 = $p$5;
         $s$6 = $s$1;
         break L59;
        }
       }
       break;
      }
     default:
      {
       $185 = $183;
       $p$11 = $p$5;
       $s$6 = $s$1;
      }
     } while (0);
     do if ((label | 0) == 131) {
      label = 0;
      $127 = ___intscan($f, $base$0, 0, -1, -1) | 0;
      $128 = getTempRet0() | 0;
      $129 = $shcnt;
      $131 = HEAP32[$129 >> 2] | 0;
      $134 = HEAP32[$129 + 4 >> 2] | 0;
      $sub$ptr$sub514 = (HEAP32[$rpos42 >> 2] | 0) - (HEAP32[$rend >> 2] | 0) | 0;
      $139 = _i64Subtract(0, 0, $sub$ptr$sub514 | 0, (($sub$ptr$sub514 | 0) < 0) << 31 >> 31 | 0) | 0;
      if (($131 | 0) == ($139 | 0) & ($134 | 0) == (getTempRet0() | 0)) {
       $177 = $183;
       $alloc$2 = $alloc$0;
       $matches$2 = $matches$0308;
       $s$10 = $s$1;
       break L6;
      }
      if (($dest$0 | 0) != 0 & ($spec$select | 0) == 112) {
       HEAP32[$dest$0 >> 2] = $127;
       $185 = $183;
       $p$11 = $p$5;
       $s$6 = $s$1;
       break;
      } else {
       _store_int($dest$0, $spec$select219, $127, $128);
       $185 = $183;
       $p$11 = $p$5;
       $s$6 = $s$1;
       break;
      }
     } while (0);
     $160 = $shcnt;
     $sub$ptr$sub555 = (HEAP32[$rpos42 >> 2] | 0) - (HEAP32[$rend >> 2] | 0) | 0;
     $172 = _i64Add(HEAP32[$160 >> 2] | 0, HEAP32[$160 + 4 >> 2] | 0, $170 | 0, $171 | 0) | 0;
     $174 = _i64Add($172 | 0, getTempRet0() | 0, $sub$ptr$sub555 | 0, (($sub$ptr$sub555 | 0) < 0) << 31 >> 31 | 0) | 0;
     $179 = $185;
     $180 = $174;
     $181 = getTempRet0() | 0;
     $matches$1 = $matches$0308 + (($dest$0 | 0) != 0 & 1) | 0;
     $p$12 = $p$11;
     $s$7 = $s$6;
     break L8;
    } while (0);
    $add$ptr = $p$0312 + ($cmp32 & 1) | 0;
    ___shlim($f, 0, 0);
    $28 = HEAP32[$rpos42 >> 2] | 0;
    if ($28 >>> 0 < (HEAP32[$shend43 >> 2] | 0) >>> 0) {
     HEAP32[$rpos42 >> 2] = $28 + 1;
     $cond53 = HEAPU8[$28 >> 0] | 0;
    } else $cond53 = ___shgetc($f) | 0;
    if (($cond53 | 0) != (HEAPU8[$add$ptr >> 0] | 0)) {
     label = 23;
     break L6;
    }
    $34 = _i64Add($20 | 0, $21 | 0, 1, 0) | 0;
    $179 = $178;
    $180 = $34;
    $181 = getTempRet0() | 0;
    $matches$1 = $matches$0308;
    $p$12 = $add$ptr;
    $s$7 = $s$0306;
   } else {
    $p$1 = $p$0312;
    while (1) {
     $arrayidx = $p$1 + 1 | 0;
     if (!(_isspace(HEAPU8[$arrayidx >> 0] | 0) | 0)) break; else $p$1 = $arrayidx;
    }
    ___shlim($f, 0, 0);
    do {
     $4 = HEAP32[$rpos42 >> 2] | 0;
     if ($4 >>> 0 < (HEAP32[$shend43 >> 2] | 0) >>> 0) {
      HEAP32[$rpos42 >> 2] = $4 + 1;
      $cond16 = HEAPU8[$4 >> 0] | 0;
     } else $cond16 = ___shgetc($f) | 0;
    } while ((_isspace($cond16) | 0) != 0);
    if (!(HEAP32[$shend43 >> 2] | 0)) $17 = HEAP32[$rpos42 >> 2] | 0; else {
     $incdec$ptr25 = (HEAP32[$rpos42 >> 2] | 0) + -1 | 0;
     HEAP32[$rpos42 >> 2] = $incdec$ptr25;
     $17 = $incdec$ptr25;
    }
    $10 = $shcnt;
    $sub$ptr$sub = $17 - (HEAP32[$rend >> 2] | 0) | 0;
    $22 = _i64Add(HEAP32[$10 >> 2] | 0, HEAP32[$10 + 4 >> 2] | 0, $20 | 0, $21 | 0) | 0;
    $24 = _i64Add($22 | 0, getTempRet0() | 0, $sub$ptr$sub | 0, (($sub$ptr$sub | 0) < 0) << 31 >> 31 | 0) | 0;
    $179 = $178;
    $180 = $24;
    $181 = getTempRet0() | 0;
    $matches$1 = $matches$0308;
    $p$12 = $p$1;
    $s$7 = $s$0306;
   } while (0);
   $p$0312 = $p$12 + 1 | 0;
   $2 = HEAP8[$p$0312 >> 0] | 0;
   if (!($2 << 24 >> 24)) {
    $matches$3 = $matches$1;
    break L4;
   } else {
    $178 = $179;
    $20 = $180;
    $21 = $181;
    $matches$0308 = $matches$1;
    $s$0306 = $s$7;
   }
  }
  if ((label | 0) == 23) {
   if (HEAP32[$shend43 >> 2] | 0) HEAP32[$rpos42 >> 2] = (HEAP32[$rpos42 >> 2] | 0) + -1;
   if (($matches$0308 | 0) != 0 | ($cond53 | 0) > -1) {
    $matches$3 = $matches$0308;
    break;
   } else {
    $182 = $178;
    $alloc$1 = 0;
    $s$9 = $s$0306;
    label = 144;
   }
  } else if ((label | 0) == 143) if (!$matches$0308) {
   $182 = $184;
   $alloc$1 = $alloc$0;
   $s$9 = $s$8;
   label = 144;
  } else {
   $177 = $184;
   $alloc$2 = $alloc$0;
   $matches$2 = $matches$0308;
   $s$10 = $s$8;
  }
  if ((label | 0) == 144) {
   $177 = $182;
   $alloc$2 = $alloc$1;
   $matches$2 = -1;
   $s$10 = $s$9;
  }
  if (!$alloc$2) $matches$3 = $matches$2; else {
   _free($s$10);
   _free($177);
   $matches$3 = $matches$2;
  }
 } while (0);
 if ($cond | 0) ___unlockfile($f);
 STACKTOP = sp;
 return $matches$3 | 0;
}

function _fmt_fp($f, $y, $w, $p, $fl, $t) {
 $f = $f | 0;
 $y = +$y;
 $w = $w | 0;
 $p = $p | 0;
 $fl = $fl | 0;
 $t = $t | 0;
 var $$pr = 0, $$pr415 = 0, $$pre517 = 0, $0 = 0, $1 = 0, $15 = 0, $18 = 0, $25 = 0, $28 = 0, $3 = 0, $30 = 0, $31 = 0, $34 = 0, $36 = 0, $40 = 0, $43 = 0, $46 = 0, $50 = 0, $51 = 0, $53 = 0, $56 = 0, $58 = 0, $62 = 0, $65 = 0, $70 = 0, $75 = 0, $8 = 0, $81 = 0, $83 = 0, $85 = 0, $a$1$lcssa = 0, $a$1502 = 0, $a$2 = 0, $a$3$lcssa = 0, $a$3488 = 0, $a$5$lcssa = 0, $a$5471 = 0, $a$6 = 0, $a$8 = 0, $a$9 = 0, $add = 0, $add$ptr358 = 0, $add$ptr442 = 0, $add$ptr671 = 0, $add$ptr756 = 0, $add165 = 0, $add275 = 0, $add355 = 0, $add414 = 0, $add653 = 0, $add653$sink524 = 0, $add67 = 0, $and62 = 0, $arrayidx = 0, $arrayidx251 = 0, $arrayidx453 = 0, $big = 0, $buf = 0, $carry$0493 = 0, $carry262$0484 = 0, $cmp131 = 0, $cmp299 = 0, $cmp338 = 0, $cmp374 = 0, $cmp403 = 0, $cmp450$lcssa = 0, $cmp614 = 0, $cond100 = 0, $cond233 = 0, $cond271 = 0, $cond304 = 0, $cond629 = 0, $conv116 = 0, $conv216 = 0, $d$0491 = 0, $d$0494 = 0, $d$1483 = 0, $d$2$lcssa = 0, $d$2470 = 0, $d$4 = 0, $d$5438 = 0, $d$6432 = 0, $d$7444 = 0, $div356 = 0, $div378 = 0, $div384 = 0, $e$0480 = 0, $e$1 = 0, $e$2467 = 0, $e$4 = 0, $e$5 = 0, $e2 = 0, $ebuf0 = 0, $estr$0 = 0, $estr$1$lcssa = 0, $estr$1450 = 0, $estr$2 = 0, $i$0479 = 0, $i$1$lcssa = 0, $i$1475 = 0, $i$2466 = 0, $i$3455 = 0, $inc = 0, $inc425 = 0, $inc438 = 0, $inc500 = 0, $incdec$ptr106 = 0, $incdec$ptr115 = 0, $incdec$ptr122 = 0, $incdec$ptr246 = 0, $incdec$ptr419 = 0, $incdec$ptr423 = 0, $incdec$ptr639 = 0, $incdec$ptr647 = 0, $incdec$ptr681 = 0, $incdec$ptr689 = 0, $incdec$ptr725 = 0, $incdec$ptr763 = 0, $incdec$ptr773 = 0, $incdec$ptr776 = 0, $j$0$in476 = 0, $j$1456 = 0, $j$2 = 0, $l$0 = 0, $mul = 0.0, $mul322 = 0, $mul367 = 0, $mul431 = 0, $mul513 = 0, $or = 0, $p$addr$2 = 0, $p$addr$3 = 0, $p$addr$4$lcssa = 0, $p$addr$4433 = 0, $p$addr$5$lcssa = 0, $p$addr$5445 = 0, $pl$0 = 0, $prefix$0 = 0, $re$1426 = 0, $round$0425 = 0.0, $round377$1 = 0.0, $s$0 = 0, $s$1 = 0, $s668$0436 = 0, $s668$1 = 0, $s715$0$lcssa = 0, $s715$0428 = 0, $s753$0 = 0, $s753$1440 = 0, $s753$2 = 0, $shr285 = 0, $small$1 = 0.0, $spec$select = 0, $spec$select395 = 0, $spec$select396 = 0, $spec$select396523 = 0, $spec$select397 = 0, $spec$select399 = 0.0, $spec$select402 = 0, $spec$select403 = 0, $spec$select405 = 0, $spec$select408 = 0, $spec$select410 = 0, $spec$select418 = 0.0, $sub = 0.0, $sub$ptr$lhs$cast151 = 0, $sub$ptr$lhs$cast160 = 0, $sub$ptr$lhs$cast173$pre$phiZZZZ2D = 0, $sub$ptr$lhs$cast633 = 0, $sub$ptr$lhs$cast694 = 0, $sub$ptr$lhs$cast787 = 0, $sub$ptr$rhs$cast$le = 0, $sub$ptr$rhs$cast152 = 0, $sub$ptr$rhs$cast161 = 0, $sub$ptr$rhs$cast174$pre$phiZZZZ2D = 0, $sub$ptr$rhs$cast345 = 0, $sub$ptr$sub172 = 0, $sub$ptr$sub175 = 0, $sub$ptr$sub650$pn = 0, $sub$ptr$sub789 = 0, $sub203 = 0, $sub256 = 0, $sub264 = 0, $sub281 = 0, $sub343 = 0, $sub409 = 0, $sub514 = 0, $sub562 = 0, $sub626 = 0, $sub735 = 0, $sub74 = 0, $sub806 = 0, $t$addr$0 = 0, $t$addr$1 = 0, $tobool135 = 0, $tobool341 = 0, $tobool37 = 0, $tobool56 = 0, $tobool609 = 0, $tobool781 = 0, $y$addr$0 = 0.0, $y$addr$1 = 0.0, $y$addr$2 = 0.0, $y$addr$3 = 0.0, $y$addr$4 = 0.0, $z$0 = 0, $z$1 = 0, $z$2$lcssa = 0, $z$2501 = 0, $z$3$lcssa = 0, $z$3497 = 0, $z$4$lcssa = 0, $z$4487 = 0, $z$5 = 0, $z$8 = 0, $z$9$lcssa = 0, $z$9459 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 560 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(560);
 $big = sp + 32 | 0;
 $e2 = sp + 536 | 0;
 $buf = sp;
 $sub$ptr$rhs$cast$le = $buf;
 $ebuf0 = sp + 540 | 0;
 HEAP32[$e2 >> 2] = 0;
 $arrayidx = $ebuf0 + 12 | 0;
 $0 = ___DOUBLE_BITS_670($y) | 0;
 $1 = getTempRet0() | 0;
 if (($1 | 0) < 0) {
  $sub = -$y;
  $3 = ___DOUBLE_BITS_670($sub) | 0;
  $8 = getTempRet0() | 0;
  $85 = $3;
  $pl$0 = 1;
  $prefix$0 = 38446;
  $y$addr$0 = $sub;
 } else {
  $8 = $1;
  $85 = $0;
  $pl$0 = ($fl & 2049 | 0) != 0 & 1;
  $prefix$0 = ($fl & 2048 | 0) == 0 ? (($fl & 1 | 0) == 0 ? 38447 : 38452) : 38449;
  $y$addr$0 = $y;
 }
 do if (0 == 0 & ($8 & 2146435072 | 0) == 2146435072) {
  $tobool37 = ($t & 32 | 0) != 0;
  $add = $pl$0 + 3 | 0;
  _pad_667($f, 32, $w, $add, $fl & -65537);
  _out($f, $prefix$0, $pl$0);
  _out($f, $y$addr$0 != $y$addr$0 | 0.0 != 0.0 ? ($tobool37 ? 38486 : 38473) : $tobool37 ? 38465 : 38469, 3);
  _pad_667($f, 32, $w, $add, $fl ^ 8192);
  $add653$sink524 = $add;
 } else {
  $mul = +_frexp($y$addr$0, $e2) * 2.0;
  $tobool56 = $mul != 0.0;
  if ($tobool56) HEAP32[$e2 >> 2] = (HEAP32[$e2 >> 2] | 0) + -1;
  $or = $t | 32;
  if (($or | 0) == 97) {
   $and62 = $t & 32;
   $spec$select = ($and62 | 0) == 0 ? $prefix$0 : $prefix$0 + 9 | 0;
   $add67 = $pl$0 | 2;
   $sub74 = 12 - $p | 0;
   do if ($p >>> 0 > 11 | ($sub74 | 0) == 0) $y$addr$1 = $mul; else {
    $re$1426 = $sub74;
    $round$0425 = 8.0;
    do {
     $re$1426 = $re$1426 + -1 | 0;
     $round$0425 = $round$0425 * 16.0;
    } while (($re$1426 | 0) != 0);
    if ((HEAP8[$spec$select >> 0] | 0) == 45) {
     $y$addr$1 = -($round$0425 + (-$mul - $round$0425));
     break;
    } else {
     $y$addr$1 = $mul + $round$0425 - $round$0425;
     break;
    }
   } while (0);
   $15 = HEAP32[$e2 >> 2] | 0;
   $cond100 = ($15 | 0) < 0 ? 0 - $15 | 0 : $15;
   $18 = _fmt_u($cond100, (($cond100 | 0) < 0) << 31 >> 31, $arrayidx) | 0;
   if (($18 | 0) == ($arrayidx | 0)) {
    $incdec$ptr106 = $ebuf0 + 11 | 0;
    HEAP8[$incdec$ptr106 >> 0] = 48;
    $estr$0 = $incdec$ptr106;
   } else $estr$0 = $18;
   HEAP8[$estr$0 + -1 >> 0] = ($15 >> 31 & 2) + 43;
   $incdec$ptr115 = $estr$0 + -2 | 0;
   HEAP8[$incdec$ptr115 >> 0] = $t + 15;
   $cmp131 = ($p | 0) < 1;
   $tobool135 = ($fl & 8 | 0) == 0;
   $s$0 = $buf;
   $y$addr$2 = $y$addr$1;
   while (1) {
    $conv116 = ~~$y$addr$2;
    $incdec$ptr122 = $s$0 + 1 | 0;
    HEAP8[$s$0 >> 0] = $and62 | HEAPU8[8768 + $conv116 >> 0];
    $y$addr$2 = ($y$addr$2 - +($conv116 | 0)) * 16.0;
    if (($incdec$ptr122 - $sub$ptr$rhs$cast$le | 0) == 1) if ($tobool135 & ($cmp131 & $y$addr$2 == 0.0)) $s$1 = $incdec$ptr122; else {
     HEAP8[$incdec$ptr122 >> 0] = 46;
     $s$1 = $s$0 + 2 | 0;
    } else $s$1 = $incdec$ptr122;
    if (!($y$addr$2 != 0.0)) break; else $s$0 = $s$1;
   }
   $$pre517 = $s$1;
   if (!$p) label = 25; else if ((-2 - $sub$ptr$rhs$cast$le + $$pre517 | 0) < ($p | 0)) {
    $sub$ptr$lhs$cast151 = $arrayidx;
    $sub$ptr$rhs$cast152 = $incdec$ptr115;
    $l$0 = $p + 2 + $sub$ptr$lhs$cast151 - $sub$ptr$rhs$cast152 | 0;
    $sub$ptr$lhs$cast173$pre$phiZZZZ2D = $sub$ptr$lhs$cast151;
    $sub$ptr$rhs$cast174$pre$phiZZZZ2D = $sub$ptr$rhs$cast152;
   } else label = 25;
   if ((label | 0) == 25) {
    $sub$ptr$lhs$cast160 = $arrayidx;
    $sub$ptr$rhs$cast161 = $incdec$ptr115;
    $l$0 = $sub$ptr$lhs$cast160 - $sub$ptr$rhs$cast$le - $sub$ptr$rhs$cast161 + $$pre517 | 0;
    $sub$ptr$lhs$cast173$pre$phiZZZZ2D = $sub$ptr$lhs$cast160;
    $sub$ptr$rhs$cast174$pre$phiZZZZ2D = $sub$ptr$rhs$cast161;
   }
   $add165 = $l$0 + $add67 | 0;
   _pad_667($f, 32, $w, $add165, $fl);
   _out($f, $spec$select, $add67);
   _pad_667($f, 48, $w, $add165, $fl ^ 65536);
   $sub$ptr$sub172 = $$pre517 - $sub$ptr$rhs$cast$le | 0;
   _out($f, $buf, $sub$ptr$sub172);
   $sub$ptr$sub175 = $sub$ptr$lhs$cast173$pre$phiZZZZ2D - $sub$ptr$rhs$cast174$pre$phiZZZZ2D | 0;
   _pad_667($f, 48, $l$0 - ($sub$ptr$sub172 + $sub$ptr$sub175) | 0, 0, 0);
   _out($f, $incdec$ptr115, $sub$ptr$sub175);
   _pad_667($f, 32, $w, $add165, $fl ^ 8192);
   $add653$sink524 = $add165;
   break;
  }
  $spec$select395 = ($p | 0) < 0 ? 6 : $p;
  if ($tobool56) {
   $sub203 = (HEAP32[$e2 >> 2] | 0) + -28 | 0;
   HEAP32[$e2 >> 2] = $sub203;
   $$pr = $sub203;
   $y$addr$3 = $mul * 268435456.0;
  } else {
   $$pr = HEAP32[$e2 >> 2] | 0;
   $y$addr$3 = $mul;
  }
  $z$0 = ($$pr | 0) < 0 ? $big : $big + 288 | 0;
  $y$addr$4 = $y$addr$3;
  $z$1 = $z$0;
  do {
   $conv216 = ~~$y$addr$4 >>> 0;
   HEAP32[$z$1 >> 2] = $conv216;
   $z$1 = $z$1 + 4 | 0;
   $y$addr$4 = ($y$addr$4 - +($conv216 >>> 0)) * 1.0e9;
  } while ($y$addr$4 != 0.0);
  $sub$ptr$rhs$cast345 = $z$0;
  if (($$pr | 0) > 0) {
   $25 = $$pr;
   $a$1502 = $z$0;
   $z$2501 = $z$1;
   while (1) {
    $cond233 = ($25 | 0) < 29 ? $25 : 29;
    $d$0491 = $z$2501 + -4 | 0;
    if ($d$0491 >>> 0 < $a$1502 >>> 0) $a$2 = $a$1502; else {
     $carry$0493 = 0;
     $d$0494 = $d$0491;
     do {
      $28 = _bitshift64Shl(HEAP32[$d$0494 >> 2] | 0, 0, $cond233 | 0) | 0;
      $30 = _i64Add($28 | 0, getTempRet0() | 0, $carry$0493 | 0, 0) | 0;
      $31 = getTempRet0() | 0;
      $carry$0493 = ___udivdi3($30 | 0, $31 | 0, 1e9, 0) | 0;
      $34 = ___muldi3($carry$0493 | 0, getTempRet0() | 0, 1e9, 0) | 0;
      $36 = _i64Subtract($30 | 0, $31 | 0, $34 | 0, getTempRet0() | 0) | 0;
      getTempRet0() | 0;
      HEAP32[$d$0494 >> 2] = $36;
      $d$0494 = $d$0494 + -4 | 0;
     } while ($d$0494 >>> 0 >= $a$1502 >>> 0);
     if (!$carry$0493) $a$2 = $a$1502; else {
      $incdec$ptr246 = $a$1502 + -4 | 0;
      HEAP32[$incdec$ptr246 >> 2] = $carry$0493;
      $a$2 = $incdec$ptr246;
     }
    }
    L57 : do if ($z$2501 >>> 0 > $a$2 >>> 0) {
     $z$3497 = $z$2501;
     while (1) {
      $arrayidx251 = $z$3497 + -4 | 0;
      if (HEAP32[$arrayidx251 >> 2] | 0) {
       $z$3$lcssa = $z$3497;
       break L57;
      }
      if ($arrayidx251 >>> 0 > $a$2 >>> 0) $z$3497 = $arrayidx251; else {
       $z$3$lcssa = $arrayidx251;
       break;
      }
     }
    } else $z$3$lcssa = $z$2501; while (0);
    $sub256 = (HEAP32[$e2 >> 2] | 0) - $cond233 | 0;
    HEAP32[$e2 >> 2] = $sub256;
    if (($sub256 | 0) > 0) {
     $25 = $sub256;
     $a$1502 = $a$2;
     $z$2501 = $z$3$lcssa;
    } else {
     $$pr415 = $sub256;
     $a$1$lcssa = $a$2;
     $z$2$lcssa = $z$3$lcssa;
     break;
    }
   }
  } else {
   $$pr415 = $$pr;
   $a$1$lcssa = $z$0;
   $z$2$lcssa = $z$1;
  }
  if (($$pr415 | 0) < 0) {
   $add275 = (($spec$select395 + 25 | 0) / 9 | 0) + 1 | 0;
   $cmp299 = ($or | 0) == 102;
   $40 = $$pr415;
   $a$3488 = $a$1$lcssa;
   $z$4487 = $z$2$lcssa;
   while (1) {
    $sub264 = 0 - $40 | 0;
    $cond271 = ($sub264 | 0) < 9 ? $sub264 : 9;
    if ($a$3488 >>> 0 < $z$4487 >>> 0) {
     $sub281 = (1 << $cond271) + -1 | 0;
     $shr285 = 1e9 >>> $cond271;
     $carry262$0484 = 0;
     $d$1483 = $a$3488;
     do {
      $43 = HEAP32[$d$1483 >> 2] | 0;
      HEAP32[$d$1483 >> 2] = ($43 >>> $cond271) + $carry262$0484;
      $carry262$0484 = Math_imul($43 & $sub281, $shr285) | 0;
      $d$1483 = $d$1483 + 4 | 0;
     } while ($d$1483 >>> 0 < $z$4487 >>> 0);
     $spec$select396 = (HEAP32[$a$3488 >> 2] | 0) == 0 ? $a$3488 + 4 | 0 : $a$3488;
     if (!$carry262$0484) {
      $spec$select396523 = $spec$select396;
      $z$5 = $z$4487;
     } else {
      HEAP32[$z$4487 >> 2] = $carry262$0484;
      $spec$select396523 = $spec$select396;
      $z$5 = $z$4487 + 4 | 0;
     }
    } else {
     $spec$select396523 = (HEAP32[$a$3488 >> 2] | 0) == 0 ? $a$3488 + 4 | 0 : $a$3488;
     $z$5 = $z$4487;
    }
    $cond304 = $cmp299 ? $z$0 : $spec$select396523;
    $spec$select397 = ($z$5 - $cond304 >> 2 | 0) > ($add275 | 0) ? $cond304 + ($add275 << 2) | 0 : $z$5;
    $40 = (HEAP32[$e2 >> 2] | 0) + $cond271 | 0;
    HEAP32[$e2 >> 2] = $40;
    if (($40 | 0) >= 0) {
     $a$3$lcssa = $spec$select396523;
     $z$4$lcssa = $spec$select397;
     break;
    } else {
     $a$3488 = $spec$select396523;
     $z$4487 = $spec$select397;
    }
   }
  } else {
   $a$3$lcssa = $a$1$lcssa;
   $z$4$lcssa = $z$2$lcssa;
  }
  if ($a$3$lcssa >>> 0 < $z$4$lcssa >>> 0) {
   $mul322 = ($sub$ptr$rhs$cast345 - $a$3$lcssa >> 2) * 9 | 0;
   $46 = HEAP32[$a$3$lcssa >> 2] | 0;
   if ($46 >>> 0 < 10) $e$1 = $mul322; else {
    $e$0480 = $mul322;
    $i$0479 = 10;
    while (1) {
     $i$0479 = $i$0479 * 10 | 0;
     $inc = $e$0480 + 1 | 0;
     if ($46 >>> 0 < $i$0479 >>> 0) {
      $e$1 = $inc;
      break;
     } else $e$0480 = $inc;
    }
   }
  } else $e$1 = 0;
  $cmp338 = ($or | 0) == 103;
  $tobool341 = ($spec$select395 | 0) != 0;
  $sub343 = $spec$select395 - (($or | 0) == 102 ? 0 : $e$1) + (($tobool341 & $cmp338) << 31 >> 31) | 0;
  if (($sub343 | 0) < ((($z$4$lcssa - $sub$ptr$rhs$cast345 >> 2) * 9 | 0) + -9 | 0)) {
   $add355 = $sub343 + 9216 | 0;
   $div356 = ($add355 | 0) / 9 | 0;
   $add$ptr358 = $z$0 + 4 + ($div356 + -1024 << 2) | 0;
   $50 = $add355 - ($div356 * 9 | 0) | 0;
   if (($50 | 0) < 8) {
    $i$1475 = 10;
    $j$0$in476 = $50;
    while (1) {
     $mul367 = $i$1475 * 10 | 0;
     if (($j$0$in476 | 0) < 7) {
      $i$1475 = $mul367;
      $j$0$in476 = $j$0$in476 + 1 | 0;
     } else {
      $i$1$lcssa = $mul367;
      break;
     }
    }
   } else $i$1$lcssa = 10;
   $51 = HEAP32[$add$ptr358 >> 2] | 0;
   $div378 = ($51 >>> 0) / ($i$1$lcssa >>> 0) | 0;
   $53 = $51 - (Math_imul($div378, $i$1$lcssa) | 0) | 0;
   $cmp374 = ($add$ptr358 + 4 | 0) == ($z$4$lcssa | 0);
   if ($cmp374 & ($53 | 0) == 0) {
    $a$8 = $a$3$lcssa;
    $d$4 = $add$ptr358;
    $e$4 = $e$1;
   } else {
    $spec$select399 = ($div378 & 1 | 0) == 0 ? 9007199254740992.0 : 9007199254740994.0;
    $div384 = $i$1$lcssa >>> 1;
    $spec$select418 = $53 >>> 0 < $div384 >>> 0 ? .5 : $cmp374 & ($53 | 0) == ($div384 | 0) ? 1.0 : 1.5;
    if (!$pl$0) {
     $round377$1 = $spec$select399;
     $small$1 = $spec$select418;
    } else {
     $cmp403 = (HEAP8[$prefix$0 >> 0] | 0) == 45;
     $round377$1 = $cmp403 ? -$spec$select399 : $spec$select399;
     $small$1 = $cmp403 ? -$spec$select418 : $spec$select418;
    }
    $sub409 = $51 - $53 | 0;
    HEAP32[$add$ptr358 >> 2] = $sub409;
    if ($round377$1 + $small$1 != $round377$1) {
     $add414 = $sub409 + $i$1$lcssa | 0;
     HEAP32[$add$ptr358 >> 2] = $add414;
     if ($add414 >>> 0 > 999999999) {
      $a$5471 = $a$3$lcssa;
      $d$2470 = $add$ptr358;
      while (1) {
       $incdec$ptr419 = $d$2470 + -4 | 0;
       HEAP32[$d$2470 >> 2] = 0;
       if ($incdec$ptr419 >>> 0 < $a$5471 >>> 0) {
        $incdec$ptr423 = $a$5471 + -4 | 0;
        HEAP32[$incdec$ptr423 >> 2] = 0;
        $a$6 = $incdec$ptr423;
       } else $a$6 = $a$5471;
       $inc425 = (HEAP32[$incdec$ptr419 >> 2] | 0) + 1 | 0;
       HEAP32[$incdec$ptr419 >> 2] = $inc425;
       if ($inc425 >>> 0 > 999999999) {
        $a$5471 = $a$6;
        $d$2470 = $incdec$ptr419;
       } else {
        $a$5$lcssa = $a$6;
        $d$2$lcssa = $incdec$ptr419;
        break;
       }
      }
     } else {
      $a$5$lcssa = $a$3$lcssa;
      $d$2$lcssa = $add$ptr358;
     }
     $mul431 = ($sub$ptr$rhs$cast345 - $a$5$lcssa >> 2) * 9 | 0;
     $56 = HEAP32[$a$5$lcssa >> 2] | 0;
     if ($56 >>> 0 < 10) {
      $a$8 = $a$5$lcssa;
      $d$4 = $d$2$lcssa;
      $e$4 = $mul431;
     } else {
      $e$2467 = $mul431;
      $i$2466 = 10;
      while (1) {
       $i$2466 = $i$2466 * 10 | 0;
       $inc438 = $e$2467 + 1 | 0;
       if ($56 >>> 0 < $i$2466 >>> 0) {
        $a$8 = $a$5$lcssa;
        $d$4 = $d$2$lcssa;
        $e$4 = $inc438;
        break;
       } else $e$2467 = $inc438;
      }
     }
    } else {
     $a$8 = $a$3$lcssa;
     $d$4 = $add$ptr358;
     $e$4 = $e$1;
    }
   }
   $add$ptr442 = $d$4 + 4 | 0;
   $a$9 = $a$8;
   $e$5 = $e$4;
   $z$8 = $z$4$lcssa >>> 0 > $add$ptr442 >>> 0 ? $add$ptr442 : $z$4$lcssa;
  } else {
   $a$9 = $a$3$lcssa;
   $e$5 = $e$1;
   $z$8 = $z$4$lcssa;
  }
  $sub626 = 0 - $e$5 | 0;
  L109 : do if ($z$8 >>> 0 > $a$9 >>> 0) {
   $z$9459 = $z$8;
   while (1) {
    $arrayidx453 = $z$9459 + -4 | 0;
    if (HEAP32[$arrayidx453 >> 2] | 0) {
     $cmp450$lcssa = 1;
     $z$9$lcssa = $z$9459;
     break L109;
    }
    if ($arrayidx453 >>> 0 > $a$9 >>> 0) $z$9459 = $arrayidx453; else {
     $cmp450$lcssa = 0;
     $z$9$lcssa = $arrayidx453;
     break;
    }
   }
  } else {
   $cmp450$lcssa = 0;
   $z$9$lcssa = $z$8;
  } while (0);
  do if ($cmp338) {
   $spec$select402 = $spec$select395 + (($tobool341 ^ 1) & 1) | 0;
   if (($spec$select402 | 0) > ($e$5 | 0) & ($e$5 | 0) > -5) {
    $p$addr$2 = $spec$select402 + -1 - $e$5 | 0;
    $t$addr$0 = $t + -1 | 0;
   } else {
    $p$addr$2 = $spec$select402 + -1 | 0;
    $t$addr$0 = $t + -2 | 0;
   }
   if (!($fl & 8)) {
    if ($cmp450$lcssa) {
     $58 = HEAP32[$z$9$lcssa + -4 >> 2] | 0;
     if (!$58) $j$2 = 9; else if (!(($58 >>> 0) % 10 | 0)) {
      $i$3455 = 10;
      $j$1456 = 0;
      while (1) {
       $i$3455 = $i$3455 * 10 | 0;
       $inc500 = $j$1456 + 1 | 0;
       if (($58 >>> 0) % ($i$3455 >>> 0) | 0 | 0) {
        $j$2 = $inc500;
        break;
       } else $j$1456 = $inc500;
      }
     } else $j$2 = 0;
    } else $j$2 = 9;
    $mul513 = (($z$9$lcssa - $sub$ptr$rhs$cast345 >> 2) * 9 | 0) + -9 | 0;
    if (($t$addr$0 | 32 | 0) == 102) {
     $sub514 = $mul513 - $j$2 | 0;
     $spec$select403 = ($sub514 | 0) > 0 ? $sub514 : 0;
     $p$addr$3 = ($p$addr$2 | 0) < ($spec$select403 | 0) ? $p$addr$2 : $spec$select403;
     $t$addr$1 = $t$addr$0;
     break;
    } else {
     $sub562 = $mul513 + $e$5 - $j$2 | 0;
     $spec$select405 = ($sub562 | 0) > 0 ? $sub562 : 0;
     $p$addr$3 = ($p$addr$2 | 0) < ($spec$select405 | 0) ? $p$addr$2 : $spec$select405;
     $t$addr$1 = $t$addr$0;
     break;
    }
   } else {
    $p$addr$3 = $p$addr$2;
    $t$addr$1 = $t$addr$0;
   }
  } else {
   $p$addr$3 = $spec$select395;
   $t$addr$1 = $t;
  } while (0);
  $tobool609 = ($p$addr$3 | 0) != 0;
  $62 = $tobool609 ? 1 : $fl >>> 3 & 1;
  $cmp614 = ($t$addr$1 | 32 | 0) == 102;
  if ($cmp614) {
   $estr$2 = 0;
   $sub$ptr$sub650$pn = ($e$5 | 0) > 0 ? $e$5 : 0;
  } else {
   $cond629 = ($e$5 | 0) < 0 ? $sub626 : $e$5;
   $65 = _fmt_u($cond629, (($cond629 | 0) < 0) << 31 >> 31, $arrayidx) | 0;
   $sub$ptr$lhs$cast633 = $arrayidx;
   if (($sub$ptr$lhs$cast633 - $65 | 0) < 2) {
    $estr$1450 = $65;
    while (1) {
     $incdec$ptr639 = $estr$1450 + -1 | 0;
     HEAP8[$incdec$ptr639 >> 0] = 48;
     if (($sub$ptr$lhs$cast633 - $incdec$ptr639 | 0) < 2) $estr$1450 = $incdec$ptr639; else {
      $estr$1$lcssa = $incdec$ptr639;
      break;
     }
    }
   } else $estr$1$lcssa = $65;
   HEAP8[$estr$1$lcssa + -1 >> 0] = ($e$5 >> 31 & 2) + 43;
   $incdec$ptr647 = $estr$1$lcssa + -2 | 0;
   HEAP8[$incdec$ptr647 >> 0] = $t$addr$1;
   $estr$2 = $incdec$ptr647;
   $sub$ptr$sub650$pn = $sub$ptr$lhs$cast633 - $incdec$ptr647 | 0;
  }
  $add653 = $pl$0 + 1 + $p$addr$3 + $62 + $sub$ptr$sub650$pn | 0;
  _pad_667($f, 32, $w, $add653, $fl);
  _out($f, $prefix$0, $pl$0);
  _pad_667($f, 48, $w, $add653, $fl ^ 65536);
  if ($cmp614) {
   $spec$select408 = $a$9 >>> 0 > $z$0 >>> 0 ? $z$0 : $a$9;
   $add$ptr671 = $buf + 9 | 0;
   $sub$ptr$lhs$cast694 = $add$ptr671;
   $incdec$ptr689 = $buf + 8 | 0;
   $d$5438 = $spec$select408;
   do {
    $70 = _fmt_u(HEAP32[$d$5438 >> 2] | 0, 0, $add$ptr671) | 0;
    if (($d$5438 | 0) == ($spec$select408 | 0)) if (($70 | 0) == ($add$ptr671 | 0)) {
     HEAP8[$incdec$ptr689 >> 0] = 48;
     $s668$1 = $incdec$ptr689;
    } else $s668$1 = $70; else if ($70 >>> 0 > $buf >>> 0) {
     _memset($buf | 0, 48, $70 - $sub$ptr$rhs$cast$le | 0) | 0;
     $s668$0436 = $70;
     while (1) {
      $incdec$ptr681 = $s668$0436 + -1 | 0;
      if ($incdec$ptr681 >>> 0 > $buf >>> 0) $s668$0436 = $incdec$ptr681; else {
       $s668$1 = $incdec$ptr681;
       break;
      }
     }
    } else $s668$1 = $70;
    _out($f, $s668$1, $sub$ptr$lhs$cast694 - $s668$1 | 0);
    $d$5438 = $d$5438 + 4 | 0;
   } while ($d$5438 >>> 0 <= $z$0 >>> 0);
   if (!(($fl & 8 | 0) == 0 & ($tobool609 ^ 1))) _out($f, 38529, 1);
   if ($d$5438 >>> 0 < $z$9$lcssa >>> 0 & ($p$addr$3 | 0) > 0) {
    $d$6432 = $d$5438;
    $p$addr$4433 = $p$addr$3;
    while (1) {
     $75 = _fmt_u(HEAP32[$d$6432 >> 2] | 0, 0, $add$ptr671) | 0;
     if ($75 >>> 0 > $buf >>> 0) {
      _memset($buf | 0, 48, $75 - $sub$ptr$rhs$cast$le | 0) | 0;
      $s715$0428 = $75;
      while (1) {
       $incdec$ptr725 = $s715$0428 + -1 | 0;
       if ($incdec$ptr725 >>> 0 > $buf >>> 0) $s715$0428 = $incdec$ptr725; else {
        $s715$0$lcssa = $incdec$ptr725;
        break;
       }
      }
     } else $s715$0$lcssa = $75;
     _out($f, $s715$0$lcssa, ($p$addr$4433 | 0) < 9 ? $p$addr$4433 : 9);
     $d$6432 = $d$6432 + 4 | 0;
     $sub735 = $p$addr$4433 + -9 | 0;
     if (!($d$6432 >>> 0 < $z$9$lcssa >>> 0 & ($p$addr$4433 | 0) > 9)) {
      $p$addr$4$lcssa = $sub735;
      break;
     } else $p$addr$4433 = $sub735;
    }
   } else $p$addr$4$lcssa = $p$addr$3;
   _pad_667($f, 48, $p$addr$4$lcssa + 9 | 0, 9, 0);
  } else {
   $spec$select410 = $cmp450$lcssa ? $z$9$lcssa : $a$9 + 4 | 0;
   if ($a$9 >>> 0 < $spec$select410 >>> 0 & ($p$addr$3 | 0) > -1) {
    $add$ptr756 = $buf + 9 | 0;
    $tobool781 = ($fl & 8 | 0) == 0;
    $sub$ptr$lhs$cast787 = $add$ptr756;
    $81 = 0 - $sub$ptr$rhs$cast$le | 0;
    $incdec$ptr763 = $buf + 8 | 0;
    $d$7444 = $a$9;
    $p$addr$5445 = $p$addr$3;
    while (1) {
     $83 = _fmt_u(HEAP32[$d$7444 >> 2] | 0, 0, $add$ptr756) | 0;
     if (($83 | 0) == ($add$ptr756 | 0)) {
      HEAP8[$incdec$ptr763 >> 0] = 48;
      $s753$0 = $incdec$ptr763;
     } else $s753$0 = $83;
     do if (($d$7444 | 0) == ($a$9 | 0)) {
      $incdec$ptr776 = $s753$0 + 1 | 0;
      _out($f, $s753$0, 1);
      if ($tobool781 & ($p$addr$5445 | 0) < 1) {
       $s753$2 = $incdec$ptr776;
       break;
      }
      _out($f, 38529, 1);
      $s753$2 = $incdec$ptr776;
     } else {
      if ($s753$0 >>> 0 <= $buf >>> 0) {
       $s753$2 = $s753$0;
       break;
      }
      _memset($buf | 0, 48, $s753$0 + $81 | 0) | 0;
      $s753$1440 = $s753$0;
      while (1) {
       $incdec$ptr773 = $s753$1440 + -1 | 0;
       if ($incdec$ptr773 >>> 0 > $buf >>> 0) $s753$1440 = $incdec$ptr773; else {
        $s753$2 = $incdec$ptr773;
        break;
       }
      }
     } while (0);
     $sub$ptr$sub789 = $sub$ptr$lhs$cast787 - $s753$2 | 0;
     _out($f, $s753$2, ($p$addr$5445 | 0) > ($sub$ptr$sub789 | 0) ? $sub$ptr$sub789 : $p$addr$5445);
     $sub806 = $p$addr$5445 - $sub$ptr$sub789 | 0;
     $d$7444 = $d$7444 + 4 | 0;
     if (!($d$7444 >>> 0 < $spec$select410 >>> 0 & ($sub806 | 0) > -1)) {
      $p$addr$5$lcssa = $sub806;
      break;
     } else $p$addr$5445 = $sub806;
    }
   } else $p$addr$5$lcssa = $p$addr$3;
   _pad_667($f, 48, $p$addr$5$lcssa + 18 | 0, 18, 0);
   _out($f, $estr$2, $arrayidx - $estr$2 | 0);
  }
  _pad_667($f, 32, $w, $add653, $fl ^ 8192);
  $add653$sink524 = $add653;
 } while (0);
 STACKTOP = sp;
 return (($add653$sink524 | 0) < ($w | 0) ? $w : $add653$sink524) | 0;
}

function __ZN4tson6Object5parseERKN8nlohmann10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS1_14adl_serializerEEE($this, $json) {
 $this = $this | 0;
 $json = $json | 0;
 var $1 = 0, $12 = 0, $17 = 0, $18 = 0, $22 = 0, $27 = 0, $28 = 0, $5 = 0, $9 = 0, $__cap_$i$i$i$i$i = 0, $__cap_$i$i$i$i$i61 = 0, $__cap_$i$i$i$i$i79 = 0, $__size_$i1$i$i$i$i = 0, $__size_$i1$i$i$i$i52 = 0, $__size_$i1$i$i$i$i70 = 0, $agg$tmp = 0, $agg$tmp108 = 0, $agg$tmp110 = 0, $agg$tmp121 = 0, $agg$tmp123 = 0, $agg$tmp136 = 0, $agg$tmp138 = 0, $agg$tmp14095 = 0, $allFound$0$off0 = 0, $allFound$1$off0 = 0, $allFound$2$off0 = 0, $allFound$3$off0 = 0, $allFound$4$off0 = 0, $allFound$5$off0 = 0, $allFound$6$off0 = 0, $call67 = 0, $call80 = 0, $m_name = 0, $m_template = 0, $m_type = 0, $ref$tmp = 0, $spec$select = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(144);
 $agg$tmp14095 = sp;
 $ref$tmp = sp + 16 | 0;
 $agg$tmp = sp + 128 | 0;
 $agg$tmp108 = sp + 112 | 0;
 $agg$tmp110 = sp + 96 | 0;
 $agg$tmp121 = sp + 80 | 0;
 $agg$tmp123 = sp + 64 | 0;
 $agg$tmp136 = sp + 48 | 0;
 $agg$tmp138 = sp + 32 | 0;
 if (__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE5countIRA8_KcEEmOT_($json, 23316) | 0) HEAP8[$this + 1 >> 0] = (__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE3getIbbLi0EEET0_v(__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEixIKcEERKSB_PT_($json, 23316) | 0) | 0) & 1;
 if (__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE5countIRA4_KcEEmOT_($json, 23324) | 0) HEAP32[$this + 4 >> 2] = __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE3getIiiLi0EEET0_v(__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEixIKcEERKSB_PT_($json, 23324) | 0) | 0;
 if (!(__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE5countIRA3_KcEEmOT_($json, 23157) | 0)) $allFound$0$off0 = 0; else {
  HEAP32[$this + 16 >> 2] = __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE3getIiiLi0EEET0_v(__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEixIKcEERKSB_PT_($json, 23157) | 0) | 0;
  $allFound$0$off0 = 1;
 }
 if (!(__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE5countIRA5_KcEEmOT_($json, 22602) | 0)) $allFound$1$off0 = 0; else {
  __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE3getIS9_S9_Li0EEET0_v($ref$tmp, __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEixIKcEERKSB_PT_($json, 22602) | 0);
  $m_name = $this + 20 | 0;
  $__size_$i1$i$i$i$i = $m_name + 11 | 0;
  if ((HEAP8[$__size_$i1$i$i$i$i >> 0] | 0) < 0) {
   $1 = HEAP32[$m_name >> 2] | 0;
   HEAP8[$agg$tmp14095 >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($1, $agg$tmp14095);
   HEAP32[$this + 24 >> 2] = 0;
   if ((HEAP8[$__size_$i1$i$i$i$i >> 0] | 0) < 0) {
    $__cap_$i$i$i$i$i = $this + 28 | 0;
    __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm(HEAP32[$m_name >> 2] | 0, HEAP32[$__cap_$i$i$i$i$i >> 2] & 2147483647);
    HEAP32[$__cap_$i$i$i$i$i >> 2] = 0;
   }
  } else {
   HEAP8[$agg$tmp14095 >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($m_name, $agg$tmp14095);
   HEAP8[$__size_$i1$i$i$i$i >> 0] = 0;
  };
  HEAP32[$m_name >> 2] = HEAP32[$ref$tmp >> 2];
  HEAP32[$m_name + 4 >> 2] = HEAP32[$ref$tmp + 4 >> 2];
  HEAP32[$m_name + 8 >> 2] = HEAP32[$ref$tmp + 8 >> 2];
  HEAP32[$ref$tmp >> 2] = 0;
  HEAP32[$ref$tmp + 4 >> 2] = 0;
  HEAP32[$ref$tmp + 8 >> 2] = 0;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp);
  $allFound$1$off0 = $allFound$0$off0;
 }
 if (__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE5countIRA6_KcEEmOT_($json, 23328) | 0) HEAP8[$this + 32 >> 0] = (__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE3getIbbLi0EEET0_v(__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEixIKcEERKSB_PT_($json, 23328) | 0) | 0) & 1;
 if (!(__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE5countIRA9_KcEEmOT_($json, 23334) | 0)) $allFound$2$off0 = 0; else {
  HEAPF32[$this + 84 >> 2] = Math_fround(__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE3getIffLi0EEET0_v(__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEixIKcEERKSB_PT_($json, 23334) | 0));
  $allFound$2$off0 = $allFound$1$off0;
 }
 if (__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE5countIRA9_KcEEmOT_($json, 23343) | 0) {
  __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE3getIS9_S9_Li0EEET0_v($ref$tmp, __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEixIKcEERKSB_PT_($json, 23343) | 0);
  $m_template = $this + 88 | 0;
  $__size_$i1$i$i$i$i52 = $m_template + 11 | 0;
  if ((HEAP8[$__size_$i1$i$i$i$i52 >> 0] | 0) < 0) {
   $5 = HEAP32[$m_template >> 2] | 0;
   HEAP8[$agg$tmp14095 >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($5, $agg$tmp14095);
   HEAP32[$this + 92 >> 2] = 0;
   if ((HEAP8[$__size_$i1$i$i$i$i52 >> 0] | 0) < 0) {
    $__cap_$i$i$i$i$i61 = $this + 96 | 0;
    __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm(HEAP32[$m_template >> 2] | 0, HEAP32[$__cap_$i$i$i$i$i61 >> 2] & 2147483647);
    HEAP32[$__cap_$i$i$i$i$i61 >> 2] = 0;
   }
  } else {
   HEAP8[$agg$tmp14095 >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($m_template, $agg$tmp14095);
   HEAP8[$__size_$i1$i$i$i$i52 >> 0] = 0;
  };
  HEAP32[$m_template >> 2] = HEAP32[$ref$tmp >> 2];
  HEAP32[$m_template + 4 >> 2] = HEAP32[$ref$tmp + 4 >> 2];
  HEAP32[$m_template + 8 >> 2] = HEAP32[$ref$tmp + 8 >> 2];
  HEAP32[$ref$tmp >> 2] = 0;
  HEAP32[$ref$tmp + 4 >> 2] = 0;
  HEAP32[$ref$tmp + 8 >> 2] = 0;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp);
 }
 if (!(__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE5countIRA5_KcEEmOT_($json, 22556) | 0)) $allFound$3$off0 = 0; else {
  __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE3getIS9_S9_Li0EEET0_v($ref$tmp, __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEixIKcEERKSB_PT_($json, 22556) | 0);
  $m_type = $this + 116 | 0;
  $__size_$i1$i$i$i$i70 = $m_type + 11 | 0;
  if ((HEAP8[$__size_$i1$i$i$i$i70 >> 0] | 0) < 0) {
   $9 = HEAP32[$m_type >> 2] | 0;
   HEAP8[$agg$tmp14095 >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($9, $agg$tmp14095);
   HEAP32[$this + 120 >> 2] = 0;
   if ((HEAP8[$__size_$i1$i$i$i$i70 >> 0] | 0) < 0) {
    $__cap_$i$i$i$i$i79 = $this + 124 | 0;
    __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm(HEAP32[$m_type >> 2] | 0, HEAP32[$__cap_$i$i$i$i$i79 >> 2] & 2147483647);
    HEAP32[$__cap_$i$i$i$i$i79 >> 2] = 0;
   }
  } else {
   HEAP8[$agg$tmp14095 >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($m_type, $agg$tmp14095);
   HEAP8[$__size_$i1$i$i$i$i70 >> 0] = 0;
  };
  HEAP32[$m_type >> 2] = HEAP32[$ref$tmp >> 2];
  HEAP32[$m_type + 4 >> 2] = HEAP32[$ref$tmp + 4 >> 2];
  HEAP32[$m_type + 8 >> 2] = HEAP32[$ref$tmp + 8 >> 2];
  HEAP32[$ref$tmp >> 2] = 0;
  HEAP32[$ref$tmp + 4 >> 2] = 0;
  HEAP32[$ref$tmp + 8 >> 2] = 0;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp);
  $allFound$3$off0 = $allFound$2$off0;
 }
 if (!(__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE5countIRA8_KcEEmOT_($json, 23261) | 0)) $allFound$4$off0 = 0; else {
  HEAP8[$this + 128 >> 0] = (__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE3getIbbLi0EEET0_v(__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEixIKcEERKSB_PT_($json, 23261) | 0) | 0) & 1;
  $allFound$4$off0 = $allFound$3$off0;
 }
 if (!(__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE5countIRA6_KcEEmOT_($json, 22412) | 0)) $allFound$5$off0 = 0; else if (!(__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE5countIRA7_KcEEmOT_($json, 22418) | 0)) $allFound$5$off0 = 0; else {
  $call67 = __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE3getIiiLi0EEET0_v(__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEixIKcEERKSB_PT_($json, 22412) | 0) | 0;
  __ZN4tson7Vector2IiEC2Eii($agg$tmp14095, $call67, __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE3getIiiLi0EEET0_v(__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEixIKcEERKSB_PT_($json, 22418) | 0) | 0);
  $12 = $agg$tmp14095;
  $17 = HEAP32[$12 + 4 >> 2] | 0;
  $18 = $this + 8 | 0;
  HEAP32[$18 >> 2] = HEAP32[$12 >> 2];
  HEAP32[$18 + 4 >> 2] = $17;
  $allFound$5$off0 = $allFound$4$off0;
 }
 if (!(__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE5countIRA2_KcEEmOT_($json, 23124) | 0)) $allFound$6$off0 = 0; else if (!(__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE5countIRA2_KcEEmOT_($json, 23126) | 0)) $allFound$6$off0 = 0; else {
  $call80 = __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE3getIiiLi0EEET0_v(__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEixIKcEERKSB_PT_($json, 23124) | 0) | 0;
  __ZN4tson7Vector2IiEC2Eii($agg$tmp14095, $call80, __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE3getIiiLi0EEET0_v(__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEixIKcEERKSB_PT_($json, 23126) | 0) | 0);
  $22 = $agg$tmp14095;
  $27 = HEAP32[$22 + 4 >> 2] | 0;
  $28 = $this + 132 | 0;
  HEAP32[$28 >> 2] = HEAP32[$22 >> 2];
  HEAP32[$28 + 4 >> 2] = $27;
  $allFound$6$off0 = $allFound$5$off0;
 }
 if (__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE5countIRA5_KcEEmOT_($json, 23352) | 0) {
  __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE3getIS9_S9_Li0EEET0_v($agg$tmp, __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEixIKcEERKSB_PT_(__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEixIKcEERKSB_PT_($json, 23352) | 0, 23352) | 0);
  __ZN4tson4TextC2ENSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEb($agg$tmp14095, $agg$tmp, __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE3getIbbLi0EEET0_v(__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEixIKcEERKSB_PT_(__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEixIKcEERKSB_PT_($json, 23352) | 0, 23357) | 0) | 0);
  __ZN4tson4TextaSEOS0_($this + 100 | 0, $agg$tmp14095) | 0;
  __ZN4tson4TextD2Ev($agg$tmp14095);
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($agg$tmp);
 }
 __ZN4tson6Object19setObjectTypeByJsonERKN8nlohmann10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS1_14adl_serializerEEE($this, $json);
 $spec$select = $allFound$6$off0 | (HEAP8[$this >> 0] | 0) == 8;
 if (__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE5countIRA8_KcEEmOT_($json, 23362) | 0) if (__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE8is_arrayEv(__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEixIKcEERKSB_PT_($json, 23362) | 0) | 0) {
  __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE5beginEv($agg$tmp108, __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEixIKcEERKSB_PT_($json, 23362) | 0);
  __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE3endEv($agg$tmp110, __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEixIKcEERKSB_PT_($json, 23362) | 0);
  HEAP32[$agg$tmp14095 >> 2] = $this;
  if (__ZNK8nlohmann6detail9iter_implIKNS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEEneERKSF_($agg$tmp108, $agg$tmp110) | 0) do {
   __ZZN4tson6Object5parseERKN8nlohmann10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS1_14adl_serializerEEEENKUlSF_E_clESF_($agg$tmp14095, __ZNK8nlohmann6detail9iter_implIKNS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEEdeEv($agg$tmp108) | 0);
   __ZN8nlohmann6detail9iter_implIKNS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEEppEv($agg$tmp108) | 0;
  } while (__ZNK8nlohmann6detail9iter_implIKNS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEEneERKSF_($agg$tmp108, $agg$tmp110) | 0);
 }
 if (__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE5countIRA9_KcEEmOT_($json, 23370) | 0) if (__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE8is_arrayEv(__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEixIKcEERKSB_PT_($json, 23370) | 0) | 0) {
  __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE5beginEv($agg$tmp121, __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEixIKcEERKSB_PT_($json, 23370) | 0);
  __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE3endEv($agg$tmp123, __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEixIKcEERKSB_PT_($json, 23370) | 0);
  HEAP32[$agg$tmp14095 >> 2] = $this;
  if (__ZNK8nlohmann6detail9iter_implIKNS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEEneERKSF_($agg$tmp121, $agg$tmp123) | 0) do {
   __ZZN4tson6Object5parseERKN8nlohmann10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS1_14adl_serializerEEEENKUlSF_E0_clESF_($agg$tmp14095, __ZNK8nlohmann6detail9iter_implIKNS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEEdeEv($agg$tmp121) | 0);
   __ZN8nlohmann6detail9iter_implIKNS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEEppEv($agg$tmp121) | 0;
  } while (__ZNK8nlohmann6detail9iter_implIKNS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEEneERKSF_($agg$tmp121, $agg$tmp123) | 0);
 }
 if (__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE5countIRA11_KcEEmOT_($json, 22585) | 0) if (__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE8is_arrayEv(__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEixIKcEERKSB_PT_($json, 22585) | 0) | 0) {
  __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE5beginEv($agg$tmp136, __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEixIKcEERKSB_PT_($json, 22585) | 0);
  __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE3endEv($agg$tmp138, __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEixIKcEERKSB_PT_($json, 22585) | 0);
  HEAP32[$agg$tmp14095 >> 2] = $this;
  if (__ZNK8nlohmann6detail9iter_implIKNS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEEneERKSF_($agg$tmp136, $agg$tmp138) | 0) do {
   __ZZN4tson6Object5parseERKN8nlohmann10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS1_14adl_serializerEEEENKUlSF_E1_clESF_($agg$tmp14095, __ZNK8nlohmann6detail9iter_implIKNS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEEdeEv($agg$tmp136) | 0);
   __ZN8nlohmann6detail9iter_implIKNS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEEppEv($agg$tmp136) | 0;
  } while (__ZNK8nlohmann6detail9iter_implIKNS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEEneERKSF_($agg$tmp136, $agg$tmp138) | 0);
 }
 STACKTOP = sp;
 return $spec$select | 0;
}

function _stbi__parse_png_file($z, $scan, $req_comp) {
 $z = $z | 0;
 $scan = $scan | 0;
 $req_comp = $req_comp | 0;
 var $201 = 0, $237 = 0, $8 = 0, $bpl = 0, $c = 0, $call14 = 0, $call152 = 0, $call155 = 0, $call159 = 0, $call199 = 0, $call20 = 0, $call346 = 0, $cmp222 = 0, $color = 0, $comp = 0, $conv = 0, $conv231 = 0, $conv245 = 0, $conv250 = 0, $filter = 0, $first = 0, $has_trans = 0, $i = 0, $idata_limit = 0, $idata_limit_old = 0, $img_n430 = 0, $interlace = 0, $ioff = 0, $is_iphone = 0, $k = 0, $p = 0, $pal_img_n = 0, $pal_len = 0, $palette = 0, $raw_len = 0, $req_comp$addr = 0, $retval = 0, $s = 0, $scan$addr = 0, $tc = 0, $tc16 = 0, $z$addr = 0, label = 0, sp = 0, CSE$0 = 0, CSE$1 = 0, CSE$2 = 0, CSE$3 = 0, CSE$4 = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1136 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(1136);
 $retval = sp + 1108 | 0;
 $z$addr = sp + 1104 | 0;
 $scan$addr = sp + 1100 | 0;
 $req_comp$addr = sp + 1096 | 0;
 $palette = sp;
 $pal_img_n = sp + 1122 | 0;
 $has_trans = sp + 1121 | 0;
 $tc = sp + 1118 | 0;
 $tc16 = sp + 1112 | 0;
 $ioff = sp + 1092 | 0;
 $idata_limit = sp + 1088 | 0;
 $i = sp + 1084 | 0;
 $pal_len = sp + 1080 | 0;
 $first = sp + 1076 | 0;
 $k = sp + 1072 | 0;
 $interlace = sp + 1068 | 0;
 $color = sp + 1064 | 0;
 $is_iphone = sp + 1060 | 0;
 $s = sp + 1056 | 0;
 $c = sp + 1048 | 0;
 $comp = sp + 1044 | 0;
 $filter = sp + 1040 | 0;
 $idata_limit_old = sp + 1036 | 0;
 $p = sp + 1032 | 0;
 $raw_len = sp + 1028 | 0;
 $bpl = sp + 1024 | 0;
 HEAP32[$z$addr >> 2] = $z;
 HEAP32[$scan$addr >> 2] = $scan;
 HEAP32[$req_comp$addr >> 2] = $req_comp;
 HEAP8[$pal_img_n >> 0] = 0;
 HEAP8[$has_trans >> 0] = 0;
 HEAP8[$tc >> 0] = 0;
 HEAP8[$tc + 1 >> 0] = 0;
 HEAP8[$tc + 2 >> 0] = 0;
 HEAP32[$ioff >> 2] = 0;
 HEAP32[$idata_limit >> 2] = 0;
 HEAP32[$pal_len >> 2] = 0;
 HEAP32[$first >> 2] = 1;
 HEAP32[$interlace >> 2] = 0;
 HEAP32[$color >> 2] = 0;
 HEAP32[$is_iphone >> 2] = 0;
 HEAP32[$s >> 2] = HEAP32[HEAP32[$z$addr >> 2] >> 2];
 HEAP32[(HEAP32[$z$addr >> 2] | 0) + 8 >> 2] = 0;
 HEAP32[(HEAP32[$z$addr >> 2] | 0) + 4 >> 2] = 0;
 HEAP32[(HEAP32[$z$addr >> 2] | 0) + 12 >> 2] = 0;
 if (!(_stbi__check_png_header(HEAP32[$s >> 2] | 0) | 0)) {
  HEAP32[$retval >> 2] = 0;
  $237 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $237 | 0;
 }
 if ((HEAP32[$scan$addr >> 2] | 0) == 1) {
  HEAP32[$retval >> 2] = 1;
  $237 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $237 | 0;
 }
 L9 : while (1) {
  _stbi__get_chunk_header($c, HEAP32[$s >> 2] | 0);
  $8 = HEAP32[$c + 4 >> 2] | 0;
  L11 : do if (($8 | 0) < 1229472850) {
   if (($8 | 0) < 1229209940) {
    switch ($8 | 0) {
    case 1130840649:
     break;
    default:
     {
      label = 132;
      break L11;
     }
    }
    HEAP32[$is_iphone >> 2] = 1;
    _stbi__skip(HEAP32[$s >> 2] | 0, HEAP32[$c >> 2] | 0);
    break;
   }
   if (($8 | 0) >= 1229278788) switch ($8 | 0) {
   case 1229278788:
    {
     label = 101;
     break L9;
     break;
    }
   default:
    {
     label = 132;
     break L11;
    }
   }
   switch ($8 | 0) {
   case 1229209940:
    break;
   default:
    {
     label = 132;
     break L11;
    }
   }
   if (HEAP32[$first >> 2] | 0) {
    label = 82;
    break L9;
   }
   if (!((HEAPU8[$pal_img_n >> 0] | 0) == 0 | (HEAP32[$pal_len >> 2] | 0) != 0)) {
    label = 84;
    break L9;
   }
   if ((HEAP32[$scan$addr >> 2] | 0) == 2) {
    label = 86;
    break L9;
   }
   if (((HEAP32[$ioff >> 2] | 0) + (HEAP32[$c >> 2] | 0) | 0) < (HEAP32[$ioff >> 2] | 0)) {
    label = 88;
    break L9;
   }
   if (((HEAP32[$ioff >> 2] | 0) + (HEAP32[$c >> 2] | 0) | 0) >>> 0 > (HEAP32[$idata_limit >> 2] | 0) >>> 0) {
    HEAP32[$idata_limit_old >> 2] = HEAP32[$idata_limit >> 2];
    if (!(HEAP32[$idata_limit >> 2] | 0)) {
     CSE$0 = HEAP32[$c >> 2] | 0;
     HEAP32[$idata_limit >> 2] = (CSE$0 | 0) >>> 0 > 4096 ? CSE$0 | 0 : 4096;
    }
    while (1) {
     if (((HEAP32[$ioff >> 2] | 0) + (HEAP32[$c >> 2] | 0) | 0) >>> 0 <= (HEAP32[$idata_limit >> 2] | 0) >>> 0) break;
     HEAP32[$idata_limit >> 2] = HEAP32[$idata_limit >> 2] << 1;
    }
    HEAP32[$p >> 2] = _realloc(HEAP32[(HEAP32[$z$addr >> 2] | 0) + 4 >> 2] | 0, HEAP32[$idata_limit >> 2] | 0) | 0;
    if (!(HEAP32[$p >> 2] | 0)) {
     label = 96;
     break L9;
    }
    HEAP32[(HEAP32[$z$addr >> 2] | 0) + 4 >> 2] = HEAP32[$p >> 2];
   }
   if (!(_stbi__getn(HEAP32[$s >> 2] | 0, (HEAP32[(HEAP32[$z$addr >> 2] | 0) + 4 >> 2] | 0) + (HEAP32[$ioff >> 2] | 0) | 0, HEAP32[$c >> 2] | 0) | 0)) {
    label = 99;
    break L9;
   }
   HEAP32[$ioff >> 2] = (HEAP32[$ioff >> 2] | 0) + (HEAP32[$c >> 2] | 0);
  } else {
   if (($8 | 0) < 1347179589) {
    switch ($8 | 0) {
    case 1229472850:
     break;
    default:
     {
      label = 132;
      break L11;
     }
    }
    if (!(HEAP32[$first >> 2] | 0)) {
     label = 9;
     break L9;
    }
    HEAP32[$first >> 2] = 0;
    if ((HEAP32[$c >> 2] | 0) != 13) {
     label = 11;
     break L9;
    }
    $call14 = _stbi__get32be(HEAP32[$s >> 2] | 0) | 0;
    HEAP32[HEAP32[$s >> 2] >> 2] = $call14;
    if ((HEAP32[HEAP32[$s >> 2] >> 2] | 0) >>> 0 > 16777216) {
     label = 13;
     break L9;
    }
    $call20 = _stbi__get32be(HEAP32[$s >> 2] | 0) | 0;
    HEAP32[(HEAP32[$s >> 2] | 0) + 4 >> 2] = $call20;
    if ((HEAP32[(HEAP32[$s >> 2] | 0) + 4 >> 2] | 0) >>> 0 > 16777216) {
     label = 15;
     break L9;
    }
    $conv = (_stbi__get8(HEAP32[$s >> 2] | 0) | 0) & 255;
    HEAP32[(HEAP32[$z$addr >> 2] | 0) + 16 >> 2] = $conv;
    if ((HEAP32[(HEAP32[$z$addr >> 2] | 0) + 16 >> 2] | 0) != 1) if ((HEAP32[(HEAP32[$z$addr >> 2] | 0) + 16 >> 2] | 0) != 2) if ((HEAP32[(HEAP32[$z$addr >> 2] | 0) + 16 >> 2] | 0) != 4) if ((HEAP32[(HEAP32[$z$addr >> 2] | 0) + 16 >> 2] | 0) != 8) if ((HEAP32[(HEAP32[$z$addr >> 2] | 0) + 16 >> 2] | 0) != 16) {
     label = 21;
     break L9;
    }
    HEAP32[$color >> 2] = (_stbi__get8(HEAP32[$s >> 2] | 0) | 0) & 255;
    if ((HEAP32[$color >> 2] | 0) > 6) {
     label = 23;
     break L9;
    }
    if ((HEAP32[$color >> 2] | 0) == 3) if ((HEAP32[(HEAP32[$z$addr >> 2] | 0) + 16 >> 2] | 0) == 16) {
     label = 26;
     break L9;
    }
    if ((HEAP32[$color >> 2] | 0) == 3) HEAP8[$pal_img_n >> 0] = 3; else if (HEAP32[$color >> 2] & 1 | 0) {
     label = 30;
     break L9;
    }
    HEAP32[$comp >> 2] = (_stbi__get8(HEAP32[$s >> 2] | 0) | 0) & 255;
    if (HEAP32[$comp >> 2] | 0) {
     label = 32;
     break L9;
    }
    HEAP32[$filter >> 2] = (_stbi__get8(HEAP32[$s >> 2] | 0) | 0) & 255;
    if (HEAP32[$filter >> 2] | 0) {
     label = 34;
     break L9;
    }
    HEAP32[$interlace >> 2] = (_stbi__get8(HEAP32[$s >> 2] | 0) | 0) & 255;
    if ((HEAP32[$interlace >> 2] | 0) > 1) {
     label = 36;
     break L9;
    }
    if (!(HEAP32[HEAP32[$s >> 2] >> 2] | 0)) {
     label = 39;
     break L9;
    }
    if (!(HEAP32[(HEAP32[$s >> 2] | 0) + 4 >> 2] | 0)) {
     label = 39;
     break L9;
    }
    if (HEAP8[$pal_img_n >> 0] | 0) {
     HEAP32[(HEAP32[$s >> 2] | 0) + 8 >> 2] = 1;
     if ((((1073741824 / ((HEAP32[HEAP32[$s >> 2] >> 2] | 0) >>> 0) | 0) >>> 0) / 4 | 0) >>> 0 < (HEAP32[(HEAP32[$s >> 2] | 0) + 4 >> 2] | 0) >>> 0) {
      label = 46;
      break L9;
     } else break;
    }
    HEAP32[(HEAP32[$s >> 2] | 0) + 8 >> 2] = (HEAP32[$color >> 2] & 2 | 0 ? 3 : 1) + (HEAP32[$color >> 2] & 4 | 0 ? 1 : 0);
    if ((((1073741824 / ((HEAP32[HEAP32[$s >> 2] >> 2] | 0) >>> 0) | 0) >>> 0) / ((HEAP32[(HEAP32[$s >> 2] | 0) + 8 >> 2] | 0) >>> 0) | 0) >>> 0 < (HEAP32[(HEAP32[$s >> 2] | 0) + 4 >> 2] | 0) >>> 0) {
     label = 42;
     break L9;
    }
    if ((HEAP32[$scan$addr >> 2] | 0) == 2) {
     label = 44;
     break L9;
    } else break;
   }
   if (($8 | 0) < 1951551059) {
    switch ($8 | 0) {
    case 1347179589:
     break;
    default:
     {
      label = 132;
      break L11;
     }
    }
    if (HEAP32[$first >> 2] | 0) {
     label = 48;
     break L9;
    }
    if ((HEAP32[$c >> 2] | 0) >>> 0 > 768) {
     label = 50;
     break L9;
    }
    HEAP32[$pal_len >> 2] = ((HEAP32[$c >> 2] | 0) >>> 0) / 3 | 0;
    if (((HEAP32[$pal_len >> 2] | 0) * 3 | 0) != (HEAP32[$c >> 2] | 0)) {
     label = 52;
     break L9;
    }
    HEAP32[$i >> 2] = 0;
    while (1) {
     if ((HEAP32[$i >> 2] | 0) >>> 0 >= (HEAP32[$pal_len >> 2] | 0) >>> 0) break L11;
     $call152 = _stbi__get8(HEAP32[$s >> 2] | 0) | 0;
     HEAP8[$palette + ((HEAP32[$i >> 2] << 2) + 0) >> 0] = $call152;
     $call155 = _stbi__get8(HEAP32[$s >> 2] | 0) | 0;
     HEAP8[$palette + ((HEAP32[$i >> 2] << 2) + 1) >> 0] = $call155;
     $call159 = _stbi__get8(HEAP32[$s >> 2] | 0) | 0;
     HEAP8[$palette + ((HEAP32[$i >> 2] << 2) + 2) >> 0] = $call159;
     HEAP8[$palette + ((HEAP32[$i >> 2] << 2) + 3) >> 0] = -1;
     HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
    }
   }
   switch ($8 | 0) {
   case 1951551059:
    break;
   default:
    {
     label = 132;
     break L11;
    }
   }
   if (HEAP32[$first >> 2] | 0) {
    label = 57;
    break L9;
   }
   if (HEAP32[(HEAP32[$z$addr >> 2] | 0) + 4 >> 2] | 0) {
    label = 59;
    break L9;
   }
   if (HEAP8[$pal_img_n >> 0] | 0) {
    if ((HEAP32[$scan$addr >> 2] | 0) == 2) {
     label = 62;
     break L9;
    }
    if (!(HEAP32[$pal_len >> 2] | 0)) {
     label = 64;
     break L9;
    }
    if ((HEAP32[$c >> 2] | 0) >>> 0 > (HEAP32[$pal_len >> 2] | 0) >>> 0) {
     label = 66;
     break L9;
    }
    HEAP8[$pal_img_n >> 0] = 4;
    HEAP32[$i >> 2] = 0;
    while (1) {
     if ((HEAP32[$i >> 2] | 0) >>> 0 >= (HEAP32[$c >> 2] | 0) >>> 0) break L11;
     $call199 = _stbi__get8(HEAP32[$s >> 2] | 0) | 0;
     HEAP8[$palette + ((HEAP32[$i >> 2] << 2) + 3) >> 0] = $call199;
     HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
    }
   }
   if (!(HEAP32[(HEAP32[$s >> 2] | 0) + 8 >> 2] & 1)) {
    label = 71;
    break L9;
   }
   if ((HEAP32[$c >> 2] | 0) != (HEAP32[(HEAP32[$s >> 2] | 0) + 8 >> 2] << 1 | 0)) {
    label = 73;
    break L9;
   }
   HEAP8[$has_trans >> 0] = 1;
   $cmp222 = (HEAP32[(HEAP32[$z$addr >> 2] | 0) + 16 >> 2] | 0) == 16;
   HEAP32[$k >> 2] = 0;
   if ($cmp222) while (1) {
    if ((HEAP32[$k >> 2] | 0) >= (HEAP32[(HEAP32[$s >> 2] | 0) + 8 >> 2] | 0)) break L11;
    $conv231 = (_stbi__get16be(HEAP32[$s >> 2] | 0) | 0) & 65535;
    HEAP16[$tc16 + (HEAP32[$k >> 2] << 1) >> 1] = $conv231;
    HEAP32[$k >> 2] = (HEAP32[$k >> 2] | 0) + 1;
   } else while (1) {
    if ((HEAP32[$k >> 2] | 0) >= (HEAP32[(HEAP32[$s >> 2] | 0) + 8 >> 2] | 0)) break L11;
    $conv245 = (_stbi__get16be(HEAP32[$s >> 2] | 0) | 0) & 255;
    $conv250 = (Math_imul($conv245, HEAPU8[33361 + (HEAP32[(HEAP32[$z$addr >> 2] | 0) + 16 >> 2] | 0) >> 0] | 0) | 0) & 255;
    HEAP8[$tc + (HEAP32[$k >> 2] | 0) >> 0] = $conv250;
    HEAP32[$k >> 2] = (HEAP32[$k >> 2] | 0) + 1;
   }
  } while (0);
  if ((label | 0) == 132) {
   label = 0;
   if (HEAP32[$first >> 2] | 0) {
    label = 133;
    break;
   }
   if (!(HEAP32[$c + 4 >> 2] & 536870912)) {
    label = 135;
    break;
   }
   _stbi__skip(HEAP32[$s >> 2] | 0, HEAP32[$c >> 2] | 0);
  }
  _stbi__get32be(HEAP32[$s >> 2] | 0) | 0;
 }
 switch (label | 0) {
 case 9:
  {
   HEAP32[$retval >> 2] = _stbi__err(33145) | 0;
   $237 = HEAP32[$retval >> 2] | 0;
   STACKTOP = sp;
   return $237 | 0;
  }
 case 11:
  {
   HEAP32[$retval >> 2] = _stbi__err(33159) | 0;
   $237 = HEAP32[$retval >> 2] | 0;
   STACKTOP = sp;
   return $237 | 0;
  }
 case 13:
  {
   HEAP32[$retval >> 2] = _stbi__err(32985) | 0;
   $237 = HEAP32[$retval >> 2] | 0;
   STACKTOP = sp;
   return $237 | 0;
  }
 case 15:
  {
   HEAP32[$retval >> 2] = _stbi__err(32985) | 0;
   $237 = HEAP32[$retval >> 2] | 0;
   STACKTOP = sp;
   return $237 | 0;
  }
 case 21:
  {
   HEAP32[$retval >> 2] = _stbi__err(33172) | 0;
   $237 = HEAP32[$retval >> 2] | 0;
   STACKTOP = sp;
   return $237 | 0;
  }
 case 23:
  {
   HEAP32[$retval >> 2] = _stbi__err(33192) | 0;
   $237 = HEAP32[$retval >> 2] | 0;
   STACKTOP = sp;
   return $237 | 0;
  }
 case 26:
  {
   HEAP32[$retval >> 2] = _stbi__err(33192) | 0;
   $237 = HEAP32[$retval >> 2] | 0;
   STACKTOP = sp;
   return $237 | 0;
  }
 case 30:
  {
   HEAP32[$retval >> 2] = _stbi__err(33192) | 0;
   $237 = HEAP32[$retval >> 2] | 0;
   STACKTOP = sp;
   return $237 | 0;
  }
 case 32:
  {
   HEAP32[$retval >> 2] = _stbi__err(33202) | 0;
   $237 = HEAP32[$retval >> 2] | 0;
   STACKTOP = sp;
   return $237 | 0;
  }
 case 34:
  {
   HEAP32[$retval >> 2] = _stbi__err(33218) | 0;
   $237 = HEAP32[$retval >> 2] | 0;
   STACKTOP = sp;
   return $237 | 0;
  }
 case 36:
  {
   HEAP32[$retval >> 2] = _stbi__err(33236) | 0;
   $237 = HEAP32[$retval >> 2] | 0;
   STACKTOP = sp;
   return $237 | 0;
  }
 case 39:
  {
   HEAP32[$retval >> 2] = _stbi__err(33257) | 0;
   $237 = HEAP32[$retval >> 2] | 0;
   STACKTOP = sp;
   return $237 | 0;
  }
 case 42:
  {
   HEAP32[$retval >> 2] = _stbi__err(32985) | 0;
   $237 = HEAP32[$retval >> 2] | 0;
   STACKTOP = sp;
   return $237 | 0;
  }
 case 44:
  {
   HEAP32[$retval >> 2] = 1;
   $237 = HEAP32[$retval >> 2] | 0;
   STACKTOP = sp;
   return $237 | 0;
  }
 case 46:
  {
   HEAP32[$retval >> 2] = _stbi__err(32985) | 0;
   $237 = HEAP32[$retval >> 2] | 0;
   STACKTOP = sp;
   return $237 | 0;
  }
 case 48:
  {
   HEAP32[$retval >> 2] = _stbi__err(33271) | 0;
   $237 = HEAP32[$retval >> 2] | 0;
   STACKTOP = sp;
   return $237 | 0;
  }
 case 50:
  {
   HEAP32[$retval >> 2] = _stbi__err(33286) | 0;
   $237 = HEAP32[$retval >> 2] | 0;
   STACKTOP = sp;
   return $237 | 0;
  }
 case 52:
  {
   HEAP32[$retval >> 2] = _stbi__err(33286) | 0;
   $237 = HEAP32[$retval >> 2] | 0;
   STACKTOP = sp;
   return $237 | 0;
  }
 case 57:
  {
   HEAP32[$retval >> 2] = _stbi__err(33271) | 0;
   $237 = HEAP32[$retval >> 2] | 0;
   STACKTOP = sp;
   return $237 | 0;
  }
 case 59:
  {
   HEAP32[$retval >> 2] = _stbi__err(33299) | 0;
   $237 = HEAP32[$retval >> 2] | 0;
   STACKTOP = sp;
   return $237 | 0;
  }
 case 62:
  {
   HEAP32[(HEAP32[$s >> 2] | 0) + 8 >> 2] = 4;
   HEAP32[$retval >> 2] = 1;
   $237 = HEAP32[$retval >> 2] | 0;
   STACKTOP = sp;
   return $237 | 0;
  }
 case 64:
  {
   HEAP32[$retval >> 2] = _stbi__err(33315) | 0;
   $237 = HEAP32[$retval >> 2] | 0;
   STACKTOP = sp;
   return $237 | 0;
  }
 case 66:
  {
   HEAP32[$retval >> 2] = _stbi__err(33332) | 0;
   $237 = HEAP32[$retval >> 2] | 0;
   STACKTOP = sp;
   return $237 | 0;
  }
 case 71:
  {
   HEAP32[$retval >> 2] = _stbi__err(33345) | 0;
   $237 = HEAP32[$retval >> 2] | 0;
   STACKTOP = sp;
   return $237 | 0;
  }
 case 73:
  {
   HEAP32[$retval >> 2] = _stbi__err(33332) | 0;
   $237 = HEAP32[$retval >> 2] | 0;
   STACKTOP = sp;
   return $237 | 0;
  }
 case 82:
  {
   HEAP32[$retval >> 2] = _stbi__err(33271) | 0;
   $237 = HEAP32[$retval >> 2] | 0;
   STACKTOP = sp;
   return $237 | 0;
  }
 case 84:
  {
   HEAP32[$retval >> 2] = _stbi__err(33370) | 0;
   $237 = HEAP32[$retval >> 2] | 0;
   STACKTOP = sp;
   return $237 | 0;
  }
 case 86:
  {
   HEAP32[(HEAP32[$s >> 2] | 0) + 8 >> 2] = HEAPU8[$pal_img_n >> 0];
   HEAP32[$retval >> 2] = 1;
   $237 = HEAP32[$retval >> 2] | 0;
   STACKTOP = sp;
   return $237 | 0;
  }
 case 88:
  {
   HEAP32[$retval >> 2] = 0;
   $237 = HEAP32[$retval >> 2] | 0;
   STACKTOP = sp;
   return $237 | 0;
  }
 case 96:
  {
   HEAP32[$retval >> 2] = _stbi__err(32857) | 0;
   $237 = HEAP32[$retval >> 2] | 0;
   STACKTOP = sp;
   return $237 | 0;
  }
 case 99:
  {
   HEAP32[$retval >> 2] = _stbi__err(33378) | 0;
   $237 = HEAP32[$retval >> 2] | 0;
   STACKTOP = sp;
   return $237 | 0;
  }
 case 101:
  {
   if (HEAP32[$first >> 2] | 0) {
    HEAP32[$retval >> 2] = _stbi__err(33271) | 0;
    $237 = HEAP32[$retval >> 2] | 0;
    STACKTOP = sp;
    return $237 | 0;
   }
   if (HEAP32[$scan$addr >> 2] | 0) {
    HEAP32[$retval >> 2] = 1;
    $237 = HEAP32[$retval >> 2] | 0;
    STACKTOP = sp;
    return $237 | 0;
   }
   if (!(HEAP32[(HEAP32[$z$addr >> 2] | 0) + 4 >> 2] | 0)) {
    HEAP32[$retval >> 2] = _stbi__err(33388) | 0;
    $237 = HEAP32[$retval >> 2] | 0;
    STACKTOP = sp;
    return $237 | 0;
   }
   HEAP32[$bpl >> 2] = (((Math_imul(HEAP32[HEAP32[$s >> 2] >> 2] | 0, HEAP32[(HEAP32[$z$addr >> 2] | 0) + 16 >> 2] | 0) | 0) + 7 | 0) >>> 0) / 8 | 0;
   CSE$1 = HEAP32[$s >> 2] | 0;
   CSE$2 = HEAP32[(HEAP32[$s >> 2] | 0) + 4 >> 2] | 0;
   HEAP32[$raw_len >> 2] = (Math_imul(Math_imul(HEAP32[$bpl >> 2] | 0, CSE$2 | 0) | 0, HEAP32[CSE$1 + 8 >> 2] | 0) | 0) + (CSE$2 | 0);
   $call346 = _stbi_zlib_decode_malloc_guesssize_headerflag(HEAP32[(HEAP32[$z$addr >> 2] | 0) + 4 >> 2] | 0, HEAP32[$ioff >> 2] | 0, HEAP32[$raw_len >> 2] | 0, $raw_len, ((HEAP32[$is_iphone >> 2] | 0) != 0 ^ 1) & 1) | 0;
   HEAP32[(HEAP32[$z$addr >> 2] | 0) + 8 >> 2] = $call346;
   if (!(HEAP32[(HEAP32[$z$addr >> 2] | 0) + 8 >> 2] | 0)) {
    HEAP32[$retval >> 2] = 0;
    $237 = HEAP32[$retval >> 2] | 0;
    STACKTOP = sp;
    return $237 | 0;
   }
   _free(HEAP32[(HEAP32[$z$addr >> 2] | 0) + 4 >> 2] | 0);
   HEAP32[(HEAP32[$z$addr >> 2] | 0) + 4 >> 2] = 0;
   if (((HEAP32[$req_comp$addr >> 2] | 0) != 3 ? (HEAP32[$req_comp$addr >> 2] | 0) == ((HEAP32[(HEAP32[$s >> 2] | 0) + 8 >> 2] | 0) + 1 | 0) : 0) ^ 1 | (HEAP8[$pal_img_n >> 0] | 0) != 0) if (HEAPU8[$has_trans >> 0] | 0) label = 111; else {
    CSE$3 = HEAP32[$s >> 2] | 0;
    HEAP32[CSE$3 + 12 >> 2] = HEAP32[CSE$3 + 8 >> 2];
   } else label = 111;
   if ((label | 0) == 111) {
    CSE$4 = HEAP32[$s >> 2] | 0;
    HEAP32[CSE$4 + 12 >> 2] = (HEAP32[CSE$4 + 8 >> 2] | 0) + 1;
   }
   if (!(_stbi__create_png_image(HEAP32[$z$addr >> 2] | 0, HEAP32[(HEAP32[$z$addr >> 2] | 0) + 8 >> 2] | 0, HEAP32[$raw_len >> 2] | 0, HEAP32[(HEAP32[$s >> 2] | 0) + 12 >> 2] | 0, HEAP32[(HEAP32[$z$addr >> 2] | 0) + 16 >> 2] | 0, HEAP32[$color >> 2] | 0, HEAP32[$interlace >> 2] | 0) | 0)) {
    HEAP32[$retval >> 2] = 0;
    $237 = HEAP32[$retval >> 2] | 0;
    STACKTOP = sp;
    return $237 | 0;
   }
   do if (HEAP8[$has_trans >> 0] | 0) {
    $201 = HEAP32[$z$addr >> 2] | 0;
    if ((HEAP32[(HEAP32[$z$addr >> 2] | 0) + 16 >> 2] | 0) == 16) {
     if (_stbi__compute_transparency16($201, $tc16, HEAP32[(HEAP32[$s >> 2] | 0) + 12 >> 2] | 0) | 0) break;
     HEAP32[$retval >> 2] = 0;
     $237 = HEAP32[$retval >> 2] | 0;
     STACKTOP = sp;
     return $237 | 0;
    } else {
     if (_stbi__compute_transparency($201, $tc, HEAP32[(HEAP32[$s >> 2] | 0) + 12 >> 2] | 0) | 0) break;
     HEAP32[$retval >> 2] = 0;
     $237 = HEAP32[$retval >> 2] | 0;
     STACKTOP = sp;
     return $237 | 0;
    }
   } while (0);
   if ((HEAP32[$is_iphone >> 2] | 0) != 0 & 0 != 0) if ((HEAP32[(HEAP32[$s >> 2] | 0) + 12 >> 2] | 0) > 2) _stbi__de_iphone(HEAP32[$z$addr >> 2] | 0);
   if (HEAP8[$pal_img_n >> 0] | 0) {
    HEAP32[(HEAP32[$s >> 2] | 0) + 8 >> 2] = HEAPU8[$pal_img_n >> 0];
    HEAP32[(HEAP32[$s >> 2] | 0) + 12 >> 2] = HEAPU8[$pal_img_n >> 0];
    if ((HEAP32[$req_comp$addr >> 2] | 0) >= 3) HEAP32[(HEAP32[$s >> 2] | 0) + 12 >> 2] = HEAP32[$req_comp$addr >> 2];
    if (!(_stbi__expand_png_palette(HEAP32[$z$addr >> 2] | 0, $palette, HEAP32[$pal_len >> 2] | 0, HEAP32[(HEAP32[$s >> 2] | 0) + 12 >> 2] | 0) | 0)) {
     HEAP32[$retval >> 2] = 0;
     $237 = HEAP32[$retval >> 2] | 0;
     STACKTOP = sp;
     return $237 | 0;
    }
   } else if (HEAP8[$has_trans >> 0] | 0) {
    $img_n430 = (HEAP32[$s >> 2] | 0) + 8 | 0;
    HEAP32[$img_n430 >> 2] = (HEAP32[$img_n430 >> 2] | 0) + 1;
   }
   _free(HEAP32[(HEAP32[$z$addr >> 2] | 0) + 8 >> 2] | 0);
   HEAP32[(HEAP32[$z$addr >> 2] | 0) + 8 >> 2] = 0;
   HEAP32[$retval >> 2] = 1;
   $237 = HEAP32[$retval >> 2] | 0;
   STACKTOP = sp;
   return $237 | 0;
  }
 case 133:
  {
   HEAP32[$retval >> 2] = _stbi__err(33271) | 0;
   $237 = HEAP32[$retval >> 2] | 0;
   STACKTOP = sp;
   return $237 | 0;
  }
 case 135:
  {
   HEAP8[3968] = (HEAP32[$c + 4 >> 2] | 0) >>> 24;
   HEAP8[3969] = (HEAP32[$c + 4 >> 2] | 0) >>> 16;
   HEAP8[3970] = (HEAP32[$c + 4 >> 2] | 0) >>> 8;
   HEAP8[3971] = (HEAP32[$c + 4 >> 2] | 0) >>> 0;
   HEAP32[$retval >> 2] = _stbi__err(3968) | 0;
   $237 = HEAP32[$retval >> 2] | 0;
   STACKTOP = sp;
   return $237 | 0;
  }
 }
 return 0;
}

function _decfloat($f, $c, $bits, $emin, $sign, $pok) {
 $f = $f | 0;
 $c = $c | 0;
 $bits = $bits | 0;
 $emin = $emin | 0;
 $sign = $sign | 0;
 $pok = $pok | 0;
 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $104 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $120 = 0, $121 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $21 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $44 = 0, $45 = 0, $47 = 0, $48 = 0, $50 = 0, $58 = 0, $65 = 0, $7 = 0, $75 = 0, $76 = 0, $78 = 0, $8 = 0, $81 = 0, $83 = 0, $84 = 0, $9 = 0, $90 = 0, $92 = 0, $94 = 0, $98 = 0, $99 = 0, $a$0$lcssa379 = 0, $a$0333 = 0, $a$3$ph = 0, $a$3$ph406 = 0, $a$5 = 0, $a$5$ph = 0, $a$5$ph$ph = 0, $a$6326 = 0, $add265 = 0, $add307$sink$off0 = 0, $add400 = 0, $add412 = 0, $add478 = 0, $and347 = 0, $and352 = 0, $and368 = 0, $and434 = 0, $and458 = 0, $and463 = 0, $and504 = 0, $arrayidx186 = 0, $arrayidx261 = 0, $arrayidx294 = 0, $arrayidx304 = 0, $arrayidx356 = 0, $arrayidx406 = 0, $arrayidx444 = 0, $arrayidx64 = 0, $arrayidx77 = 0, $bias$0 = 0.0, $bits$addr$0 = 0, $c$addr$0 = 0, $c$addr$0$be = 0, $c$addr$2 = 0, $c$addr$3$lcssa = 0, $c$addr$3352 = 0, $call496 = 0.0, $call499 = 0.0, $carry$0335 = 0, $carry298$0 = 0, $carry298$1 = 0, $carry362$0328 = 0, $cmp289 = 0, $cmp292 = 0, $cmp325 = 0, $cmp392 = 0, $cmp40344 = 0, $cmp40354 = 0, $cmp480 = 0, $cmp51 = 0, $cmp572 = 0, $cmp67 = 0, $cond17 = 0, $cond254 = 0, $cond34 = 0, $cond93 = 0, $conv476 = 0.0, $div = 0, $div264 = 0, $div267 = 0, $e2$0 = 0, $e2$0$ph = 0, $e2$1 = 0, $e2$1$ph = 0, $e2$1$ph$ph = 0, $e2$3 = 0, $e2$4 = 0, $frac$0 = 0.0, $frac$1 = 0.0, $frac$3 = 0.0, $gotdig$0 = 0, $gotdig$2 = 0, $gotdig$3$lcssa = 0, $gotdig$3348 = 0, $gotdig$4 = 0, $gotrad$0 = 0, $gotrad$1$lcssa = 0, $gotrad$1349 = 0, $gotrad$2 = 0, $i$0323 = 0, $i$4322 = 0, $inc66 = 0, $j$0$lcssa = 0, $j$0300 = 0, $j$0301 = 0, $j$0302 = 0, $j$0351 = 0, $j$2 = 0, $j$3340 = 0, $k$0$lcssa = 0, $k$0304 = 0, $k$0305 = 0, $k$0306 = 0, $k$0350 = 0, $k$2 = 0, $k$3 = 0, $k$4334 = 0, $k$5 = 0, $k$5$in = 0, $k$6327 = 0, $lnz$0$lcssa = 0, $lnz$0310 = 0, $lnz$0311 = 0, $lnz$0312 = 0, $lnz$0347 = 0, $lnz$2 = 0, $mul187341 = 0, $mul477 = 0.0, $or$cond262 = 0, $or$cond266 = 0, $rem = 0, $retval$1 = 0.0, $rp$0$lcssa378 = 0, $rp$0332 = 0, $rp$3$ph = 0, $rp$3$ph404 = 0, $rp$5$ph = 0, $rp$5$ph403 = 0, $rp$5$ph403$ph = 0, $rp$6325 = 0, $rpos = 0, $shend = 0, $shr414 = 0, $spec$select265 = 0, $spec$select292 = 0, $storemerge296 = 0, $sub1 = 0, $sub170 = 0, $sub225 = 0, $sub299 = 0, $sub37342 = 0, $sub37353 = 0, $sub408 = 0, $sub479 = 0, $sub564 = 0.0, $tobool95 = 0, $tobool98 = 0, $tobool98274 = 0, $tobool98275277 = 0, $x = 0, $y$0321 = 0.0, $y$1 = 0.0, $y$2 = 0.0, $y$3 = 0.0, $z$0 = 0, $z$10320 = 0, $z$11 = 0, $z$2 = 0, $z$2$ph = 0, $z$2$ph405 = 0, $z$3 = 0, $z$5 = 0, $z$7$ph$ph = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 512 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(512);
 $x = sp;
 $0 = $emin + $bits | 0;
 $sub1 = 0 - $0 | 0;
 $rpos = $f + 4 | 0;
 $shend = $f + 104 | 0;
 $c$addr$0 = $c;
 $gotdig$0 = 0;
 L1 : while (1) {
  switch ($c$addr$0 | 0) {
  case 46:
   {
    label = 7;
    break L1;
    break;
   }
  case 48:
   break;
  default:
   {
    $106 = 0;
    $107 = 0;
    $c$addr$2 = $c$addr$0;
    $gotdig$2 = $gotdig$0;
    $gotrad$0 = 0;
    break L1;
   }
  }
  $1 = HEAP32[$rpos >> 2] | 0;
  if ($1 >>> 0 < (HEAP32[$shend >> 2] | 0) >>> 0) {
   HEAP32[$rpos >> 2] = $1 + 1;
   $c$addr$0$be = HEAPU8[$1 >> 0] | 0;
  } else $c$addr$0$be = ___shgetc($f) | 0;
  $c$addr$0 = $c$addr$0$be;
  $gotdig$0 = 1;
 }
 if ((label | 0) == 7) {
  $4 = HEAP32[$rpos >> 2] | 0;
  if ($4 >>> 0 < (HEAP32[$shend >> 2] | 0) >>> 0) {
   HEAP32[$rpos >> 2] = $4 + 1;
   $cond17 = HEAPU8[$4 >> 0] | 0;
  } else $cond17 = ___shgetc($f) | 0;
  if (($cond17 | 0) == 48) {
   $7 = 0;
   $8 = 0;
   while (1) {
    $9 = _i64Add($7 | 0, $8 | 0, -1, -1) | 0;
    $10 = getTempRet0() | 0;
    $11 = HEAP32[$rpos >> 2] | 0;
    if ($11 >>> 0 < (HEAP32[$shend >> 2] | 0) >>> 0) {
     HEAP32[$rpos >> 2] = $11 + 1;
     $cond34 = HEAPU8[$11 >> 0] | 0;
    } else $cond34 = ___shgetc($f) | 0;
    if (($cond34 | 0) == 48) {
     $7 = $9;
     $8 = $10;
    } else {
     $106 = $9;
     $107 = $10;
     $c$addr$2 = $cond34;
     $gotdig$2 = 1;
     $gotrad$0 = 1;
     break;
    }
   }
  } else {
   $106 = 0;
   $107 = 0;
   $c$addr$2 = $cond17;
   $gotdig$2 = $gotdig$0;
   $gotrad$0 = 1;
  }
 }
 HEAP32[$x >> 2] = 0;
 $sub37342 = $c$addr$2 + -48 | 0;
 $cmp40344 = ($c$addr$2 | 0) == 46;
 L22 : do if ($cmp40344 | $sub37342 >>> 0 < 10) {
  $arrayidx77 = $x + 496 | 0;
  $108 = $106;
  $109 = $107;
  $15 = 0;
  $16 = 0;
  $c$addr$3352 = $c$addr$2;
  $cmp40354 = $cmp40344;
  $gotdig$3348 = $gotdig$2;
  $gotrad$1349 = $gotrad$0;
  $j$0351 = 0;
  $k$0350 = 0;
  $lnz$0347 = 0;
  $sub37353 = $sub37342;
  L24 : while (1) {
   do if ($cmp40354) if (!$gotrad$1349) {
    $110 = $15;
    $111 = $16;
    $112 = $15;
    $113 = $16;
    $gotdig$4 = $gotdig$3348;
    $gotrad$2 = 1;
    $j$2 = $j$0351;
    $k$2 = $k$0350;
    $lnz$2 = $lnz$0347;
   } else break L24; else {
    $17 = _i64Add($15 | 0, $16 | 0, 1, 0) | 0;
    $18 = getTempRet0() | 0;
    $cmp51 = ($c$addr$3352 | 0) != 48;
    if (($k$0350 | 0) >= 125) {
     if (!$cmp51) {
      $110 = $108;
      $111 = $109;
      $112 = $17;
      $113 = $18;
      $gotdig$4 = $gotdig$3348;
      $gotrad$2 = $gotrad$1349;
      $j$2 = $j$0351;
      $k$2 = $k$0350;
      $lnz$2 = $lnz$0347;
      break;
     }
     HEAP32[$arrayidx77 >> 2] = HEAP32[$arrayidx77 >> 2] | 1;
     $110 = $108;
     $111 = $109;
     $112 = $17;
     $113 = $18;
     $gotdig$4 = $gotdig$3348;
     $gotrad$2 = $gotrad$1349;
     $j$2 = $j$0351;
     $k$2 = $k$0350;
     $lnz$2 = $lnz$0347;
     break;
    }
    $arrayidx64 = $x + ($k$0350 << 2) | 0;
    if (!$j$0351) $storemerge296 = $sub37353; else $storemerge296 = $c$addr$3352 + -48 + ((HEAP32[$arrayidx64 >> 2] | 0) * 10 | 0) | 0;
    HEAP32[$arrayidx64 >> 2] = $storemerge296;
    $inc66 = $j$0351 + 1 | 0;
    $cmp67 = ($inc66 | 0) == 9;
    $110 = $108;
    $111 = $109;
    $112 = $17;
    $113 = $18;
    $gotdig$4 = 1;
    $gotrad$2 = $gotrad$1349;
    $j$2 = $cmp67 ? 0 : $inc66;
    $k$2 = $k$0350 + ($cmp67 & 1) | 0;
    $lnz$2 = $cmp51 ? $17 : $lnz$0347;
   } while (0);
   $21 = HEAP32[$rpos >> 2] | 0;
   if ($21 >>> 0 < (HEAP32[$shend >> 2] | 0) >>> 0) {
    HEAP32[$rpos >> 2] = $21 + 1;
    $cond93 = HEAPU8[$21 >> 0] | 0;
   } else $cond93 = ___shgetc($f) | 0;
   $sub37353 = $cond93 + -48 | 0;
   $cmp40354 = ($cond93 | 0) == 46;
   if (!($cmp40354 | $sub37353 >>> 0 < 10)) {
    $25 = $110;
    $26 = $112;
    $28 = $111;
    $29 = $113;
    $c$addr$3$lcssa = $cond93;
    $gotdig$3$lcssa = $gotdig$4;
    $gotrad$1$lcssa = $gotrad$2;
    $j$0$lcssa = $j$2;
    $k$0$lcssa = $k$2;
    $lnz$0$lcssa = $lnz$2;
    label = 31;
    break L22;
   } else {
    $108 = $110;
    $109 = $111;
    $15 = $112;
    $16 = $113;
    $c$addr$3352 = $cond93;
    $gotdig$3348 = $gotdig$4;
    $gotrad$1349 = $gotrad$2;
    $j$0351 = $j$2;
    $k$0350 = $k$2;
    $lnz$0347 = $lnz$2;
   }
  }
  $114 = $15;
  $115 = $16;
  $116 = $108;
  $117 = $109;
  $j$0302 = $j$0351;
  $k$0306 = $k$0350;
  $lnz$0312 = $lnz$0347;
  $tobool98275277 = ($gotdig$3348 | 0) != 0;
  label = 39;
 } else {
  $25 = $106;
  $26 = 0;
  $28 = $107;
  $29 = 0;
  $c$addr$3$lcssa = $c$addr$2;
  $gotdig$3$lcssa = $gotdig$2;
  $gotrad$1$lcssa = $gotrad$0;
  $j$0$lcssa = 0;
  $k$0$lcssa = 0;
  $lnz$0$lcssa = 0;
  label = 31;
 } while (0);
 do if ((label | 0) == 31) {
  $tobool95 = ($gotrad$1$lcssa | 0) == 0;
  $27 = $tobool95 ? $26 : $25;
  $30 = $tobool95 ? $29 : $28;
  $tobool98 = ($gotdig$3$lcssa | 0) != 0;
  if (!($tobool98 & ($c$addr$3$lcssa | 32 | 0) == 101)) if (($c$addr$3$lcssa | 0) > -1) {
   $114 = $26;
   $115 = $29;
   $116 = $27;
   $117 = $30;
   $j$0302 = $j$0$lcssa;
   $k$0306 = $k$0$lcssa;
   $lnz$0312 = $lnz$0$lcssa;
   $tobool98275277 = $tobool98;
   label = 39;
   break;
  } else {
   $118 = $26;
   $119 = $29;
   $120 = $27;
   $121 = $30;
   $j$0301 = $j$0$lcssa;
   $k$0305 = $k$0$lcssa;
   $lnz$0311 = $lnz$0$lcssa;
   $tobool98274 = $tobool98;
   label = 41;
   break;
  }
  $31 = _scanexp($f, $pok) | 0;
  $32 = getTempRet0() | 0;
  if (($31 | 0) == 0 & ($32 | 0) == -2147483648) {
   if (!$pok) {
    ___shlim($f, 0, 0);
    $retval$1 = 0.0;
    break;
   }
   if (!(HEAP32[$shend >> 2] | 0)) {
    $38 = 0;
    $39 = 0;
   } else {
    HEAP32[$rpos >> 2] = (HEAP32[$rpos >> 2] | 0) + -1;
    $38 = 0;
    $39 = 0;
   }
  } else {
   $38 = $31;
   $39 = $32;
  }
  $40 = _i64Add($38 | 0, $39 | 0, $27 | 0, $30 | 0) | 0;
  $45 = $40;
  $47 = $26;
  $48 = getTempRet0() | 0;
  $50 = $29;
  $j$0300 = $j$0$lcssa;
  $k$0304 = $k$0$lcssa;
  $lnz$0310 = $lnz$0$lcssa;
  label = 43;
 } while (0);
 if ((label | 0) == 39) if (!(HEAP32[$shend >> 2] | 0)) {
  $118 = $114;
  $119 = $115;
  $120 = $116;
  $121 = $117;
  $j$0301 = $j$0302;
  $k$0305 = $k$0306;
  $lnz$0311 = $lnz$0312;
  $tobool98274 = $tobool98275277;
  label = 41;
 } else {
  HEAP32[$rpos >> 2] = (HEAP32[$rpos >> 2] | 0) + -1;
  if ($tobool98275277) {
   $45 = $116;
   $47 = $114;
   $48 = $117;
   $50 = $115;
   $j$0300 = $j$0302;
   $k$0304 = $k$0306;
   $lnz$0310 = $lnz$0312;
   label = 43;
  } else label = 42;
 }
 if ((label | 0) == 41) if ($tobool98274) {
  $45 = $120;
  $47 = $118;
  $48 = $121;
  $50 = $119;
  $j$0300 = $j$0301;
  $k$0304 = $k$0305;
  $lnz$0310 = $lnz$0311;
  label = 43;
 } else label = 42;
 do if ((label | 0) == 42) {
  HEAP32[(___errno_location() | 0) >> 2] = 28;
  ___shlim($f, 0, 0);
  $retval$1 = 0.0;
 } else if ((label | 0) == 43) {
  $44 = HEAP32[$x >> 2] | 0;
  if (!$44) {
   $retval$1 = +($sign | 0) * 0.0;
   break;
  }
  if ((($50 | 0) < 0 | ($50 | 0) == 0 & $47 >>> 0 < 10) & (($45 | 0) == ($47 | 0) & ($48 | 0) == ($50 | 0))) if (($bits | 0) > 30 | ($44 >>> $bits | 0) == 0) {
   $retval$1 = +($sign | 0) * +($44 >>> 0);
   break;
  }
  $div = ($emin | 0) / -2 | 0;
  $58 = (($div | 0) < 0) << 31 >> 31;
  if (($48 | 0) > ($58 | 0) | ($48 | 0) == ($58 | 0) & $45 >>> 0 > $div >>> 0) {
   HEAP32[(___errno_location() | 0) >> 2] = 68;
   $retval$1 = +($sign | 0) * 1797693134862315708145274.0e284 * 1797693134862315708145274.0e284;
   break;
  }
  $sub170 = $emin + -106 | 0;
  $65 = (($sub170 | 0) < 0) << 31 >> 31;
  if (($48 | 0) < ($65 | 0) | ($48 | 0) == ($65 | 0) & $45 >>> 0 < $sub170 >>> 0) {
   HEAP32[(___errno_location() | 0) >> 2] = 68;
   $retval$1 = +($sign | 0) * 2.2250738585072014e-308 * 2.2250738585072014e-308;
   break;
  }
  if (!$j$0300) $k$3 = $k$0304; else {
   if (($j$0300 | 0) < 9) {
    $arrayidx186 = $x + ($k$0304 << 2) | 0;
    $j$3340 = $j$0300;
    $mul187341 = HEAP32[$arrayidx186 >> 2] | 0;
    while (1) {
     $mul187341 = $mul187341 * 10 | 0;
     if (($j$3340 | 0) >= 8) break; else $j$3340 = $j$3340 + 1 | 0;
    }
    HEAP32[$arrayidx186 >> 2] = $mul187341;
   }
   $k$3 = $k$0304 + 1 | 0;
  }
  if (($lnz$0310 | 0) < 9) if (($lnz$0310 | 0) <= ($45 | 0) & ($45 | 0) < 18) {
   if (($45 | 0) == 9) {
    $retval$1 = +($sign | 0) * +((HEAP32[$x >> 2] | 0) >>> 0);
    break;
   }
   if (($45 | 0) < 9) {
    $retval$1 = +($sign | 0) * +((HEAP32[$x >> 2] | 0) >>> 0) / +(HEAP32[14528 + (8 - $45 << 2) >> 2] | 0);
    break;
   }
   $sub225 = $bits + 27 + (Math_imul($45, -3) | 0) | 0;
   $$pre = HEAP32[$x >> 2] | 0;
   if (($sub225 | 0) > 30 | ($$pre >>> $sub225 | 0) == 0) {
    $retval$1 = +($sign | 0) * +($$pre >>> 0) * +(HEAP32[14528 + ($45 + -10 << 2) >> 2] | 0);
    break;
   }
  }
  $rem = ($45 | 0) % 9 | 0;
  if (!$rem) {
   $a$3$ph = 0;
   $rp$3$ph = $45;
   $z$2$ph = $k$3;
  } else {
   $cond254 = ($45 | 0) > -1 ? $rem : $rem + 9 | 0;
   $75 = HEAP32[14528 + (8 - $cond254 << 2) >> 2] | 0;
   if (!$k$3) {
    $a$0$lcssa379 = 0;
    $rp$0$lcssa378 = $45;
    $z$0 = 0;
   } else {
    $div267 = 1e9 / ($75 | 0) | 0;
    $a$0333 = 0;
    $carry$0335 = 0;
    $k$4334 = 0;
    $rp$0332 = $45;
    do {
     $arrayidx261 = $x + ($k$4334 << 2) | 0;
     $76 = HEAP32[$arrayidx261 >> 2] | 0;
     $div264 = ($76 >>> 0) / ($75 >>> 0) | 0;
     $78 = $76 - (Math_imul($div264, $75) | 0) | 0;
     $add265 = $div264 + $carry$0335 | 0;
     HEAP32[$arrayidx261 >> 2] = $add265;
     $carry$0335 = Math_imul($div267, $78) | 0;
     $or$cond262 = ($k$4334 | 0) == ($a$0333 | 0) & ($add265 | 0) == 0;
     $rp$0332 = $or$cond262 ? $rp$0332 + -9 | 0 : $rp$0332;
     $a$0333 = $or$cond262 ? $a$0333 + 1 & 127 : $a$0333;
     $k$4334 = $k$4334 + 1 | 0;
    } while (($k$4334 | 0) != ($k$3 | 0));
    if (!$carry$0335) {
     $a$0$lcssa379 = $a$0333;
     $rp$0$lcssa378 = $rp$0332;
     $z$0 = $k$3;
    } else {
     HEAP32[$x + ($k$3 << 2) >> 2] = $carry$0335;
     $a$0$lcssa379 = $a$0333;
     $rp$0$lcssa378 = $rp$0332;
     $z$0 = $k$3 + 1 | 0;
    }
   }
   $a$3$ph = $a$0$lcssa379;
   $rp$3$ph = 9 - $cond254 + $rp$0$lcssa378 | 0;
   $z$2$ph = $z$0;
  }
  $a$3$ph406 = $a$3$ph;
  $e2$0$ph = 0;
  $rp$3$ph404 = $rp$3$ph;
  $z$2$ph405 = $z$2$ph;
  L104 : while (1) {
   $cmp289 = ($rp$3$ph404 | 0) < 18;
   $cmp292 = ($rp$3$ph404 | 0) == 18;
   $arrayidx294 = $x + ($a$3$ph406 << 2) | 0;
   $e2$0 = $e2$0$ph;
   $z$2 = $z$2$ph405;
   while (1) {
    if (!$cmp289) {
     if (!$cmp292) {
      $rp$5$ph = $rp$3$ph404;
      break L104;
     }
     if ((HEAP32[$arrayidx294 >> 2] | 0) >>> 0 >= 9007199) {
      $rp$5$ph = 18;
      break L104;
     }
    }
    $carry298$0 = 0;
    $k$5$in = $z$2 + 127 | 0;
    $z$3 = $z$2;
    while (1) {
     $k$5 = $k$5$in & 127;
     $arrayidx304 = $x + ($k$5 << 2) | 0;
     $81 = _bitshift64Shl(HEAP32[$arrayidx304 >> 2] | 0, 0, 29) | 0;
     $83 = _i64Add($81 | 0, getTempRet0() | 0, $carry298$0 | 0, 0) | 0;
     $84 = getTempRet0() | 0;
     if ($84 >>> 0 > 0 | ($84 | 0) == 0 & $83 >>> 0 > 1e9) {
      $90 = ___udivdi3($83 | 0, $84 | 0, 1e9, 0) | 0;
      $92 = ___muldi3($90 | 0, getTempRet0() | 0, 1e9, 0) | 0;
      $94 = _i64Subtract($83 | 0, $84 | 0, $92 | 0, getTempRet0() | 0) | 0;
      getTempRet0() | 0;
      $add307$sink$off0 = $94;
      $carry298$1 = $90;
     } else {
      $add307$sink$off0 = $83;
      $carry298$1 = 0;
     }
     HEAP32[$arrayidx304 >> 2] = $add307$sink$off0;
     $cmp325 = ($k$5 | 0) == ($a$3$ph406 | 0);
     $spec$select292 = ($k$5 | 0) != ($z$3 + 127 & 127 | 0) | $cmp325 ? $z$3 : ($add307$sink$off0 | 0) == 0 ? $k$5 : $z$3;
     if ($cmp325) break; else {
      $carry298$0 = $carry298$1;
      $k$5$in = $k$5 + -1 | 0;
      $z$3 = $spec$select292;
     }
    }
    $sub299 = $e2$0 + -29 | 0;
    if (!$carry298$1) {
     $e2$0 = $sub299;
     $z$2 = $z$3;
    } else break;
   }
   $and347 = $a$3$ph406 + 127 & 127;
   $and352 = $spec$select292 + 127 & 127;
   $arrayidx356 = $x + (($spec$select292 + 126 & 127) << 2) | 0;
   if (($and347 | 0) == ($spec$select292 | 0)) {
    HEAP32[$arrayidx356 >> 2] = HEAP32[$arrayidx356 >> 2] | HEAP32[$x + ($and352 << 2) >> 2];
    $z$5 = $and352;
   } else $z$5 = $z$3;
   HEAP32[$x + ($and347 << 2) >> 2] = $carry298$1;
   $a$3$ph406 = $and347;
   $e2$0$ph = $sub299;
   $rp$3$ph404 = $rp$3$ph404 + 9 | 0;
   $z$2$ph405 = $z$5;
  }
  $a$5$ph$ph = $a$3$ph406;
  $e2$1$ph$ph = $e2$0;
  $rp$5$ph403$ph = $rp$5$ph;
  $z$7$ph$ph = $z$2;
  L123 : while (1) {
   $and434 = $z$7$ph$ph + 1 & 127;
   $arrayidx444 = $x + (($z$7$ph$ph + 127 & 127) << 2) | 0;
   $a$5$ph = $a$5$ph$ph;
   $e2$1$ph = $e2$1$ph$ph;
   $rp$5$ph403 = $rp$5$ph403$ph;
   while (1) {
    $cmp392 = ($rp$5$ph403 | 0) == 18;
    $spec$select265 = ($rp$5$ph403 | 0) > 27 ? 9 : 1;
    $a$5 = $a$5$ph;
    $e2$1 = $e2$1$ph;
    while (1) {
     $i$0323 = 0;
     while (1) {
      $and368 = $i$0323 + $a$5 & 127;
      if (($and368 | 0) == ($z$7$ph$ph | 0)) {
       label = 92;
       break;
      }
      $98 = HEAP32[$x + ($and368 << 2) >> 2] | 0;
      $99 = HEAP32[18276 + ($i$0323 << 2) >> 2] | 0;
      if ($98 >>> 0 < $99 >>> 0) {
       label = 92;
       break;
      }
      if ($98 >>> 0 > $99 >>> 0) break;
      if (($i$0323 + 1 | 0) >>> 0 < 2) $i$0323 = 1; else {
       label = 92;
       break;
      }
     }
     if ((label | 0) == 92) {
      label = 0;
      if ($cmp392) break L123;
     }
     $add400 = $spec$select265 + $e2$1 | 0;
     if (($a$5 | 0) == ($z$7$ph$ph | 0)) {
      $a$5 = $z$7$ph$ph;
      $e2$1 = $add400;
     } else break;
    }
    $sub408 = (1 << $spec$select265) + -1 | 0;
    $shr414 = 1e9 >>> $spec$select265;
    $a$6326 = $a$5;
    $carry362$0328 = 0;
    $k$6327 = $a$5;
    $rp$6325 = $rp$5$ph403;
    do {
     $arrayidx406 = $x + ($k$6327 << 2) | 0;
     $100 = HEAP32[$arrayidx406 >> 2] | 0;
     $add412 = ($100 >>> $spec$select265) + $carry362$0328 | 0;
     HEAP32[$arrayidx406 >> 2] = $add412;
     $carry362$0328 = Math_imul($100 & $sub408, $shr414) | 0;
     $or$cond266 = ($k$6327 | 0) == ($a$6326 | 0) & ($add412 | 0) == 0;
     $rp$6325 = $or$cond266 ? $rp$6325 + -9 | 0 : $rp$6325;
     $a$6326 = $or$cond266 ? $a$6326 + 1 & 127 : $a$6326;
     $k$6327 = $k$6327 + 1 & 127;
    } while (($k$6327 | 0) != ($z$7$ph$ph | 0));
    if ($carry362$0328 | 0) {
     if (($and434 | 0) != ($a$6326 | 0)) break;
     HEAP32[$arrayidx444 >> 2] = HEAP32[$arrayidx444 >> 2] | 1;
    }
    $a$5$ph = $a$6326;
    $e2$1$ph = $add400;
    $rp$5$ph403 = $rp$6325;
   }
   HEAP32[$x + ($z$7$ph$ph << 2) >> 2] = $carry362$0328;
   $a$5$ph$ph = $a$6326;
   $e2$1$ph$ph = $add400;
   $rp$5$ph403$ph = $rp$6325;
   $z$7$ph$ph = $and434;
  }
  $i$4322 = 0;
  $y$0321 = 0.0;
  $z$10320 = $z$7$ph$ph;
  while (1) {
   $and458 = $i$4322 + $a$5 & 127;
   $and463 = $z$10320 + 1 & 127;
   if (($and458 | 0) == ($z$10320 | 0)) {
    HEAP32[$x + ($and463 + -1 << 2) >> 2] = 0;
    $z$11 = $and463;
   } else $z$11 = $z$10320;
   $y$0321 = $y$0321 * 1.0e9 + +((HEAP32[$x + ($and458 << 2) >> 2] | 0) >>> 0);
   $i$4322 = $i$4322 + 1 | 0;
   if (($i$4322 | 0) == 2) break; else $z$10320 = $z$11;
  }
  $conv476 = +($sign | 0);
  $mul477 = $y$0321 * $conv476;
  $add478 = $e2$1 + 53 | 0;
  $sub479 = $add478 - $emin | 0;
  $cmp480 = ($sub479 | 0) < ($bits | 0);
  $bits$addr$0 = $cmp480 ? (($sub479 | 0) > 0 ? $sub479 : 0) : $bits;
  if (($bits$addr$0 | 0) < 53) {
   $call496 = +_copysignl(+_scalbn(1.0, 105 - $bits$addr$0 | 0), $mul477);
   $call499 = +_fmodl($mul477, +_scalbn(1.0, 53 - $bits$addr$0 | 0));
   $bias$0 = $call496;
   $frac$0 = $call499;
   $y$1 = $call496 + ($mul477 - $call499);
  } else {
   $bias$0 = 0.0;
   $frac$0 = 0.0;
   $y$1 = $mul477;
  }
  $and504 = $a$5 + 2 & 127;
  if (($and504 | 0) == ($z$11 | 0)) $frac$3 = $frac$0; else {
   $104 = HEAP32[$x + ($and504 << 2) >> 2] | 0;
   do if ($104 >>> 0 < 5e8) {
    if (!$104) if (($a$5 + 3 & 127 | 0) == ($z$11 | 0)) {
     $frac$1 = $frac$0;
     break;
    }
    $frac$1 = $conv476 * .25 + $frac$0;
   } else {
    if (($104 | 0) != 5e8) {
     $frac$1 = $conv476 * .75 + $frac$0;
     break;
    }
    if (($a$5 + 3 & 127 | 0) == ($z$11 | 0)) {
     $frac$1 = $conv476 * .5 + $frac$0;
     break;
    } else {
     $frac$1 = $conv476 * .75 + $frac$0;
     break;
    }
   } while (0);
   if ((53 - $bits$addr$0 | 0) > 1) if (+_fmodl($frac$1, 1.0) != 0.0) $frac$3 = $frac$1; else $frac$3 = $frac$1 + 1.0; else $frac$3 = $frac$1;
  }
  $sub564 = $y$1 + $frac$3 - $bias$0;
  do if (($add478 & 2147483647 | 0) > (-2 - $0 | 0)) {
   $cmp572 = !(+Math_abs(+$sub564) >= 9007199254740992.0);
   $e2$3 = $e2$1 + (($cmp572 ^ 1) & 1) | 0;
   $y$2 = $cmp572 ? $sub564 : $sub564 * .5;
   if (($e2$3 + 50 | 0) <= ($sub1 | 0)) if (!($frac$3 != 0.0 & ($cmp480 & (($bits$addr$0 | 0) != ($sub479 | 0) | $cmp572)))) {
    $e2$4 = $e2$3;
    $y$3 = $y$2;
    break;
   }
   HEAP32[(___errno_location() | 0) >> 2] = 68;
   $e2$4 = $e2$3;
   $y$3 = $y$2;
  } else {
   $e2$4 = $e2$1;
   $y$3 = $sub564;
  } while (0);
  $retval$1 = +_scalbnl($y$3, $e2$4);
 } while (0);
 STACKTOP = sp;
 return +$retval$1;
}

function __ZN8nlohmann6detail5lexerINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE11scan_stringEv($this) {
 $this = $this | 0;
 var $__size_ = 0, $__size_188 = 0, $__size_201 = 0, $__size_214 = 0, $__size_227 = 0, $__size_240 = 0, $__size_253 = 0, $agg$tmp = 0, $agg$tmp186 = 0, $agg$tmp199 = 0, $agg$tmp212 = 0, $agg$tmp225 = 0, $agg$tmp238 = 0, $agg$tmp251 = 0, $agg$tmp251$byval_copy = 0, $call14 = 0, $call31 = 0, $codepoint$1 = 0, $current = 0, $retval$5 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64);
 $agg$tmp251$byval_copy = sp + 56 | 0;
 $agg$tmp = sp + 48 | 0;
 $agg$tmp186 = sp + 40 | 0;
 $agg$tmp199 = sp + 32 | 0;
 $agg$tmp212 = sp + 24 | 0;
 $agg$tmp225 = sp + 16 | 0;
 $agg$tmp238 = sp + 8 | 0;
 $agg$tmp251 = sp;
 __ZN8nlohmann6detail5lexerINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE5resetEv($this);
 $current = $this + 8 | 0;
 if ((HEAP32[$current >> 2] | 0) != 34) ___assert_fail(24976, 22221, 7225, 24992);
 $__size_ = $agg$tmp + 4 | 0;
 $__size_188 = $agg$tmp186 + 4 | 0;
 $__size_201 = $agg$tmp199 + 4 | 0;
 $__size_214 = $agg$tmp212 + 4 | 0;
 $__size_227 = $agg$tmp225 + 4 | 0;
 $__size_240 = $agg$tmp238 + 4 | 0;
 $__size_253 = $agg$tmp251 + 4 | 0;
 L4 : while (1) L6 : do switch (__ZN8nlohmann6detail5lexerINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE3getEv($this) | 0) {
 case -1:
  {
   label = 5;
   break L4;
   break;
  }
 case 34:
  {
   $retval$5 = 4;
   break L4;
   break;
  }
 case 0:
  {
   label = 38;
   break L4;
   break;
  }
 case 1:
  {
   label = 39;
   break L4;
   break;
  }
 case 2:
  {
   label = 40;
   break L4;
   break;
  }
 case 3:
  {
   label = 41;
   break L4;
   break;
  }
 case 4:
  {
   label = 42;
   break L4;
   break;
  }
 case 5:
  {
   label = 43;
   break L4;
   break;
  }
 case 6:
  {
   label = 44;
   break L4;
   break;
  }
 case 7:
  {
   label = 45;
   break L4;
   break;
  }
 case 8:
  {
   label = 46;
   break L4;
   break;
  }
 case 9:
  {
   label = 47;
   break L4;
   break;
  }
 case 10:
  {
   label = 48;
   break L4;
   break;
  }
 case 11:
  {
   label = 49;
   break L4;
   break;
  }
 case 12:
  {
   label = 50;
   break L4;
   break;
  }
 case 13:
  {
   label = 51;
   break L4;
   break;
  }
 case 14:
  {
   label = 52;
   break L4;
   break;
  }
 case 15:
  {
   label = 53;
   break L4;
   break;
  }
 case 16:
  {
   label = 54;
   break L4;
   break;
  }
 case 17:
  {
   label = 55;
   break L4;
   break;
  }
 case 18:
  {
   label = 56;
   break L4;
   break;
  }
 case 19:
  {
   label = 57;
   break L4;
   break;
  }
 case 20:
  {
   label = 58;
   break L4;
   break;
  }
 case 21:
  {
   label = 59;
   break L4;
   break;
  }
 case 22:
  {
   label = 60;
   break L4;
   break;
  }
 case 23:
  {
   label = 61;
   break L4;
   break;
  }
 case 24:
  {
   label = 62;
   break L4;
   break;
  }
 case 25:
  {
   label = 63;
   break L4;
   break;
  }
 case 26:
  {
   label = 64;
   break L4;
   break;
  }
 case 27:
  {
   label = 65;
   break L4;
   break;
  }
 case 28:
  {
   label = 66;
   break L4;
   break;
  }
 case 29:
  {
   label = 67;
   break L4;
   break;
  }
 case 30:
  {
   label = 68;
   break L4;
   break;
  }
 case 31:
  {
   label = 69;
   break L4;
   break;
  }
 case 92:
  {
   switch (__ZN8nlohmann6detail5lexerINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE3getEv($this) | 0) {
   case 34:
    {
     __ZN8nlohmann6detail5lexerINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE3addEi($this, 34);
     break L6;
     break;
    }
   case 92:
    {
     __ZN8nlohmann6detail5lexerINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE3addEi($this, 92);
     break L6;
     break;
    }
   case 47:
    {
     __ZN8nlohmann6detail5lexerINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE3addEi($this, 47);
     break L6;
     break;
    }
   case 98:
    {
     __ZN8nlohmann6detail5lexerINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE3addEi($this, 8);
     break L6;
     break;
    }
   case 102:
    {
     __ZN8nlohmann6detail5lexerINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE3addEi($this, 12);
     break L6;
     break;
    }
   case 110:
    {
     __ZN8nlohmann6detail5lexerINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE3addEi($this, 10);
     break L6;
     break;
    }
   case 114:
    {
     __ZN8nlohmann6detail5lexerINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE3addEi($this, 13);
     break L6;
     break;
    }
   case 116:
    {
     __ZN8nlohmann6detail5lexerINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE3addEi($this, 9);
     break L6;
     break;
    }
   case 117:
    {
     $call14 = __ZN8nlohmann6detail5lexerINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE13get_codepointEv($this) | 0;
     if (($call14 | 0) == -1) {
      label = 16;
      break L4;
     }
     switch ($call14 & -1024 | 0) {
     case 56320:
      {
       label = 26;
       break L4;
       break;
      }
     case 55296:
      {
       if ((__ZN8nlohmann6detail5lexerINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE3getEv($this) | 0) != 92) {
        label = 25;
        break L4;
       }
       if ((__ZN8nlohmann6detail5lexerINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE3getEv($this) | 0) != 117) {
        label = 25;
        break L4;
       }
       $call31 = __ZN8nlohmann6detail5lexerINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE13get_codepointEv($this) | 0;
       if (($call31 | 0) == -1) {
        label = 21;
        break L4;
       }
       if (($call31 & -1024 | 0) != 56320) {
        label = 23;
        break L4;
       }
       $codepoint$1 = ($call14 << 10) + -56613888 + $call31 | 0;
       break;
      }
     default:
      $codepoint$1 = $call14;
     }
     if ($codepoint$1 >>> 0 >= 1114112) {
      label = 28;
      break L4;
     }
     if (($codepoint$1 | 0) < 128) {
      __ZN8nlohmann6detail5lexerINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE3addEi($this, $codepoint$1);
      break L6;
     }
     if (($codepoint$1 | 0) < 2048) {
      __ZN8nlohmann6detail5lexerINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE3addEi($this, $codepoint$1 >>> 6 | 192);
      __ZN8nlohmann6detail5lexerINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE3addEi($this, $codepoint$1 & 63 | 128);
      break L6;
     }
     if (($codepoint$1 | 0) < 65536) {
      __ZN8nlohmann6detail5lexerINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE3addEi($this, $codepoint$1 >>> 12 | 224);
      __ZN8nlohmann6detail5lexerINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE3addEi($this, $codepoint$1 >>> 6 & 63 | 128);
      __ZN8nlohmann6detail5lexerINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE3addEi($this, $codepoint$1 & 63 | 128);
      break L6;
     } else {
      __ZN8nlohmann6detail5lexerINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE3addEi($this, $codepoint$1 >>> 18 | 240);
      __ZN8nlohmann6detail5lexerINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE3addEi($this, $codepoint$1 >>> 12 & 63 | 128);
      __ZN8nlohmann6detail5lexerINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE3addEi($this, $codepoint$1 >>> 6 & 63 | 128);
      __ZN8nlohmann6detail5lexerINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE3addEi($this, $codepoint$1 & 63 | 128);
      break L6;
     }
     break;
    }
   default:
    {
     label = 37;
     break L4;
    }
   }
   break;
  }
 case 127:
 case 126:
 case 125:
 case 124:
 case 123:
 case 122:
 case 121:
 case 120:
 case 119:
 case 118:
 case 117:
 case 116:
 case 115:
 case 114:
 case 113:
 case 112:
 case 111:
 case 110:
 case 109:
 case 108:
 case 107:
 case 106:
 case 105:
 case 104:
 case 103:
 case 102:
 case 101:
 case 100:
 case 99:
 case 98:
 case 97:
 case 96:
 case 95:
 case 94:
 case 93:
 case 91:
 case 90:
 case 89:
 case 88:
 case 87:
 case 86:
 case 85:
 case 84:
 case 83:
 case 82:
 case 81:
 case 80:
 case 79:
 case 78:
 case 77:
 case 76:
 case 75:
 case 74:
 case 73:
 case 72:
 case 71:
 case 70:
 case 69:
 case 68:
 case 67:
 case 66:
 case 65:
 case 64:
 case 63:
 case 62:
 case 61:
 case 60:
 case 59:
 case 58:
 case 57:
 case 56:
 case 55:
 case 54:
 case 53:
 case 52:
 case 51:
 case 50:
 case 49:
 case 48:
 case 47:
 case 46:
 case 45:
 case 44:
 case 43:
 case 42:
 case 41:
 case 40:
 case 39:
 case 38:
 case 37:
 case 36:
 case 35:
 case 33:
 case 32:
  {
   __ZN8nlohmann6detail5lexerINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE3addEi($this, HEAP32[$current >> 2] | 0);
   break;
  }
 case 223:
 case 222:
 case 221:
 case 220:
 case 219:
 case 218:
 case 217:
 case 216:
 case 215:
 case 214:
 case 213:
 case 212:
 case 211:
 case 210:
 case 209:
 case 208:
 case 207:
 case 206:
 case 205:
 case 204:
 case 203:
 case 202:
 case 201:
 case 200:
 case 199:
 case 198:
 case 197:
 case 196:
 case 195:
 case 194:
  {
   HEAP32[$agg$tmp >> 2] = 17636;
   HEAP32[$__size_ >> 2] = 2;
   HEAP32[$agg$tmp251$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
   HEAP32[$agg$tmp251$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
   if (!(__ZN8nlohmann6detail5lexerINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE18next_byte_in_rangeESt16initializer_listIiE($this, $agg$tmp251$byval_copy) | 0)) {
    $retval$5 = 14;
    break L4;
   }
   break;
  }
 case 224:
  {
   HEAP32[$agg$tmp186 >> 2] = 17644;
   HEAP32[$__size_188 >> 2] = 4;
   HEAP32[$agg$tmp251$byval_copy >> 2] = HEAP32[$agg$tmp186 >> 2];
   HEAP32[$agg$tmp251$byval_copy + 4 >> 2] = HEAP32[$agg$tmp186 + 4 >> 2];
   if (!(__ZN8nlohmann6detail5lexerINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE18next_byte_in_rangeESt16initializer_listIiE($this, $agg$tmp251$byval_copy) | 0)) {
    $retval$5 = 14;
    break L4;
   }
   break;
  }
 case 239:
 case 238:
 case 236:
 case 235:
 case 234:
 case 233:
 case 232:
 case 231:
 case 230:
 case 229:
 case 228:
 case 227:
 case 226:
 case 225:
  {
   HEAP32[$agg$tmp199 >> 2] = 17660;
   HEAP32[$__size_201 >> 2] = 4;
   HEAP32[$agg$tmp251$byval_copy >> 2] = HEAP32[$agg$tmp199 >> 2];
   HEAP32[$agg$tmp251$byval_copy + 4 >> 2] = HEAP32[$agg$tmp199 + 4 >> 2];
   if (!(__ZN8nlohmann6detail5lexerINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE18next_byte_in_rangeESt16initializer_listIiE($this, $agg$tmp251$byval_copy) | 0)) {
    $retval$5 = 14;
    break L4;
   }
   break;
  }
 case 237:
  {
   HEAP32[$agg$tmp212 >> 2] = 17676;
   HEAP32[$__size_214 >> 2] = 4;
   HEAP32[$agg$tmp251$byval_copy >> 2] = HEAP32[$agg$tmp212 >> 2];
   HEAP32[$agg$tmp251$byval_copy + 4 >> 2] = HEAP32[$agg$tmp212 + 4 >> 2];
   if (!(__ZN8nlohmann6detail5lexerINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE18next_byte_in_rangeESt16initializer_listIiE($this, $agg$tmp251$byval_copy) | 0)) {
    $retval$5 = 14;
    break L4;
   }
   break;
  }
 case 240:
  {
   HEAP32[$agg$tmp225 >> 2] = 17692;
   HEAP32[$__size_227 >> 2] = 6;
   HEAP32[$agg$tmp251$byval_copy >> 2] = HEAP32[$agg$tmp225 >> 2];
   HEAP32[$agg$tmp251$byval_copy + 4 >> 2] = HEAP32[$agg$tmp225 + 4 >> 2];
   if (!(__ZN8nlohmann6detail5lexerINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE18next_byte_in_rangeESt16initializer_listIiE($this, $agg$tmp251$byval_copy) | 0)) {
    $retval$5 = 14;
    break L4;
   }
   break;
  }
 case 243:
 case 242:
 case 241:
  {
   HEAP32[$agg$tmp238 >> 2] = 17716;
   HEAP32[$__size_240 >> 2] = 6;
   HEAP32[$agg$tmp251$byval_copy >> 2] = HEAP32[$agg$tmp238 >> 2];
   HEAP32[$agg$tmp251$byval_copy + 4 >> 2] = HEAP32[$agg$tmp238 + 4 >> 2];
   if (!(__ZN8nlohmann6detail5lexerINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE18next_byte_in_rangeESt16initializer_listIiE($this, $agg$tmp251$byval_copy) | 0)) {
    $retval$5 = 14;
    break L4;
   }
   break;
  }
 case 244:
  {
   HEAP32[$agg$tmp251 >> 2] = 17740;
   HEAP32[$__size_253 >> 2] = 6;
   HEAP32[$agg$tmp251$byval_copy >> 2] = HEAP32[$agg$tmp251 >> 2];
   HEAP32[$agg$tmp251$byval_copy + 4 >> 2] = HEAP32[$agg$tmp251 + 4 >> 2];
   if (!(__ZN8nlohmann6detail5lexerINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE18next_byte_in_rangeESt16initializer_listIiE($this, $agg$tmp251$byval_copy) | 0)) {
    $retval$5 = 14;
    break L4;
   }
   break;
  }
 default:
  {
   label = 78;
   break L4;
  }
 } while (0);
 switch (label | 0) {
 case 5:
  {
   HEAP32[$this + 52 >> 2] = 25004;
   $retval$5 = 14;
   break;
  }
 case 16:
  {
   HEAP32[$this + 52 >> 2] = 25042;
   $retval$5 = 14;
   break;
  }
 case 21:
  {
   HEAP32[$this + 52 >> 2] = 25042;
   $retval$5 = 14;
   break;
  }
 case 23:
  {
   HEAP32[$this + 52 >> 2] = 25096;
   $retval$5 = 14;
   break;
  }
 case 25:
  {
   HEAP32[$this + 52 >> 2] = 25096;
   $retval$5 = 14;
   break;
  }
 case 26:
  {
   HEAP32[$this + 52 >> 2] = 25172;
   $retval$5 = 14;
   break;
  }
 case 28:
  {
   ___assert_fail(25240, 22221, 7345, 24992);
   break;
  }
 case 37:
  {
   HEAP32[$this + 52 >> 2] = 25284;
   $retval$5 = 14;
   break;
  }
 case 38:
  {
   HEAP32[$this + 52 >> 2] = 25336;
   $retval$5 = 14;
   break;
  }
 case 39:
  {
   HEAP32[$this + 52 >> 2] = 25409;
   $retval$5 = 14;
   break;
  }
 case 40:
  {
   HEAP32[$this + 52 >> 2] = 25482;
   $retval$5 = 14;
   break;
  }
 case 41:
  {
   HEAP32[$this + 52 >> 2] = 25555;
   $retval$5 = 14;
   break;
  }
 case 42:
  {
   HEAP32[$this + 52 >> 2] = 25628;
   $retval$5 = 14;
   break;
  }
 case 43:
  {
   HEAP32[$this + 52 >> 2] = 25701;
   $retval$5 = 14;
   break;
  }
 case 44:
  {
   HEAP32[$this + 52 >> 2] = 25774;
   $retval$5 = 14;
   break;
  }
 case 45:
  {
   HEAP32[$this + 52 >> 2] = 25847;
   $retval$5 = 14;
   break;
  }
 case 46:
  {
   HEAP32[$this + 52 >> 2] = 25920;
   $retval$5 = 14;
   break;
  }
 case 47:
  {
   HEAP32[$this + 52 >> 2] = 25998;
   $retval$5 = 14;
   break;
  }
 case 48:
  {
   HEAP32[$this + 52 >> 2] = 26076;
   $retval$5 = 14;
   break;
  }
 case 49:
  {
   HEAP32[$this + 52 >> 2] = 26154;
   $retval$5 = 14;
   break;
  }
 case 50:
  {
   HEAP32[$this + 52 >> 2] = 26226;
   $retval$5 = 14;
   break;
  }
 case 51:
  {
   HEAP32[$this + 52 >> 2] = 26304;
   $retval$5 = 14;
   break;
  }
 case 52:
  {
   HEAP32[$this + 52 >> 2] = 26382;
   $retval$5 = 14;
   break;
  }
 case 53:
  {
   HEAP32[$this + 52 >> 2] = 26454;
   $retval$5 = 14;
   break;
  }
 case 54:
  {
   HEAP32[$this + 52 >> 2] = 26526;
   $retval$5 = 14;
   break;
  }
 case 55:
  {
   HEAP32[$this + 52 >> 2] = 26599;
   $retval$5 = 14;
   break;
  }
 case 56:
  {
   HEAP32[$this + 52 >> 2] = 26672;
   $retval$5 = 14;
   break;
  }
 case 57:
  {
   HEAP32[$this + 52 >> 2] = 26745;
   $retval$5 = 14;
   break;
  }
 case 58:
  {
   HEAP32[$this + 52 >> 2] = 26818;
   $retval$5 = 14;
   break;
  }
 case 59:
  {
   HEAP32[$this + 52 >> 2] = 26891;
   $retval$5 = 14;
   break;
  }
 case 60:
  {
   HEAP32[$this + 52 >> 2] = 26964;
   $retval$5 = 14;
   break;
  }
 case 61:
  {
   HEAP32[$this + 52 >> 2] = 27037;
   $retval$5 = 14;
   break;
  }
 case 62:
  {
   HEAP32[$this + 52 >> 2] = 27110;
   $retval$5 = 14;
   break;
  }
 case 63:
  {
   HEAP32[$this + 52 >> 2] = 27183;
   $retval$5 = 14;
   break;
  }
 case 64:
  {
   HEAP32[$this + 52 >> 2] = 27255;
   $retval$5 = 14;
   break;
  }
 case 65:
  {
   HEAP32[$this + 52 >> 2] = 27328;
   $retval$5 = 14;
   break;
  }
 case 66:
  {
   HEAP32[$this + 52 >> 2] = 27401;
   $retval$5 = 14;
   break;
  }
 case 67:
  {
   HEAP32[$this + 52 >> 2] = 27473;
   $retval$5 = 14;
   break;
  }
 case 68:
  {
   HEAP32[$this + 52 >> 2] = 27545;
   $retval$5 = 14;
   break;
  }
 case 69:
  {
   HEAP32[$this + 52 >> 2] = 27617;
   $retval$5 = 14;
   break;
  }
 case 78:
  {
   HEAP32[$this + 52 >> 2] = 27689;
   $retval$5 = 14;
   break;
  }
 }
 STACKTOP = sp;
 return $retval$5 | 0;
}

function _stbir__resample_vertical_upsample($stbir_info, $n) {
 $stbir_info = $stbir_info | 0;
 $n = $n | 0;
 var $101 = f0, $111 = 0, $127 = f0, $134 = f0, $141 = f0, $151 = 0, $167 = f0, $174 = f0, $181 = f0, $188 = f0, $198 = 0, $218 = f0, $227 = 0, $228 = 0, $229 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $52 = 0, $68 = f0, $78 = 0, $94 = f0, $add$ptr = 0, $alpha_channel = 0, $arrayidx103 = 0, $arrayidx131 = 0, $arrayidx137 = 0, $arrayidx143 = 0, $arrayidx149 = 0, $arrayidx179 = 0, $arrayidx31 = 0, $arrayidx57 = 0, $arrayidx63 = 0, $arrayidx91 = 0, $arrayidx97 = 0, $c = 0, $channels = 0, $coefficient = 0, $coefficient119 = 0, $coefficient164 = 0, $coefficient45 = 0, $coefficient79 = 0, $coefficient_counter = 0, $coefficient_group = 0, $coefficient_index = 0, $coefficient_index115 = 0, $coefficient_index160 = 0, $coefficient_index41 = 0, $coefficient_index75 = 0, $coefficient_width = 0, $colorspace = 0, $contributor = 0, $decode = 0, $encode_buffer = 0, $in_pixel_index = 0, $in_pixel_index125 = 0, $in_pixel_index170 = 0, $in_pixel_index51 = 0, $in_pixel_index85 = 0, $k = 0, $mul101 = f0, $mul129 = f0, $mul135 = f0, $mul141 = f0, $mul147 = f0, $mul177 = f0, $mul29 = f0, $mul55 = f0, $mul61 = f0, $mul89 = f0, $mul95 = f0, $n$addr = 0, $n0 = 0, $n1 = 0, $output_data = 0, $output_row_start = 0, $output_w = 0, $ring_buffer = 0, $ring_buffer_begin_index = 0, $ring_buffer_entries = 0, $ring_buffer_entry = 0, $ring_buffer_entry117 = 0, $ring_buffer_entry162 = 0, $ring_buffer_entry43 = 0, $ring_buffer_entry77 = 0, $ring_buffer_first_scanline = 0, $ring_buffer_length = 0, $stbir_info$addr = 0, $type = 0, $vertical_coefficients = 0, $vertical_contributors = 0, $x = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(192);
 $stbir_info$addr = sp + 184 | 0;
 $n$addr = sp + 180 | 0;
 $x = sp + 176 | 0;
 $k = sp + 172 | 0;
 $output_w = sp + 168 | 0;
 $vertical_contributors = sp + 164 | 0;
 $vertical_coefficients = sp + 160 | 0;
 $channels = sp + 156 | 0;
 $alpha_channel = sp + 152 | 0;
 $type = sp + 148 | 0;
 $colorspace = sp + 144 | 0;
 $ring_buffer_entries = sp + 140 | 0;
 $output_data = sp + 136 | 0;
 $encode_buffer = sp + 132 | 0;
 $decode = sp + 128 | 0;
 $coefficient_width = sp + 124 | 0;
 $coefficient_counter = sp + 120 | 0;
 $contributor = sp + 116 | 0;
 $ring_buffer = sp + 112 | 0;
 $ring_buffer_begin_index = sp + 108 | 0;
 $ring_buffer_first_scanline = sp + 104 | 0;
 $ring_buffer_length = sp + 100 | 0;
 $n0 = sp + 96 | 0;
 $n1 = sp + 92 | 0;
 $output_row_start = sp + 88 | 0;
 $coefficient_group = sp + 84 | 0;
 $coefficient_index = sp + 80 | 0;
 $ring_buffer_entry = sp + 76 | 0;
 $coefficient = sp + 72 | 0;
 $in_pixel_index = sp + 68 | 0;
 $coefficient_index41 = sp + 64 | 0;
 $ring_buffer_entry43 = sp + 60 | 0;
 $coefficient45 = sp + 56 | 0;
 $in_pixel_index51 = sp + 52 | 0;
 $coefficient_index75 = sp + 48 | 0;
 $ring_buffer_entry77 = sp + 44 | 0;
 $coefficient79 = sp + 40 | 0;
 $in_pixel_index85 = sp + 36 | 0;
 $coefficient_index115 = sp + 32 | 0;
 $ring_buffer_entry117 = sp + 28 | 0;
 $coefficient119 = sp + 24 | 0;
 $in_pixel_index125 = sp + 20 | 0;
 $coefficient_index160 = sp + 16 | 0;
 $ring_buffer_entry162 = sp + 12 | 0;
 $coefficient164 = sp + 8 | 0;
 $in_pixel_index170 = sp + 4 | 0;
 $c = sp;
 HEAP32[$stbir_info$addr >> 2] = $stbir_info;
 HEAP32[$n$addr >> 2] = $n;
 HEAP32[$output_w >> 2] = HEAP32[(HEAP32[$stbir_info$addr >> 2] | 0) + 20 >> 2];
 HEAP32[$vertical_contributors >> 2] = HEAP32[(HEAP32[$stbir_info$addr >> 2] | 0) + 108 >> 2];
 HEAP32[$vertical_coefficients >> 2] = HEAP32[(HEAP32[$stbir_info$addr >> 2] | 0) + 112 >> 2];
 HEAP32[$channels >> 2] = HEAP32[(HEAP32[$stbir_info$addr >> 2] | 0) + 64 >> 2];
 HEAP32[$alpha_channel >> 2] = HEAP32[(HEAP32[$stbir_info$addr >> 2] | 0) + 68 >> 2];
 HEAP32[$type >> 2] = HEAP32[(HEAP32[$stbir_info$addr >> 2] | 0) + 76 >> 2];
 HEAP32[$colorspace >> 2] = HEAP32[(HEAP32[$stbir_info$addr >> 2] | 0) + 96 >> 2];
 HEAP32[$ring_buffer_entries >> 2] = HEAP32[(HEAP32[$stbir_info$addr >> 2] | 0) + 164 >> 2];
 HEAP32[$output_data >> 2] = HEAP32[(HEAP32[$stbir_info$addr >> 2] | 0) + 16 >> 2];
 HEAP32[$encode_buffer >> 2] = HEAP32[(HEAP32[$stbir_info$addr >> 2] | 0) + 184 >> 2];
 HEAP32[$decode >> 2] = (HEAP32[$type >> 2] << 1) + (HEAP32[$colorspace >> 2] | 0);
 HEAP32[$coefficient_width >> 2] = HEAP32[(HEAP32[$stbir_info$addr >> 2] | 0) + 132 >> 2];
 HEAP32[$contributor >> 2] = HEAP32[$n$addr >> 2];
 HEAP32[$ring_buffer >> 2] = HEAP32[(HEAP32[$stbir_info$addr >> 2] | 0) + 180 >> 2];
 HEAP32[$ring_buffer_begin_index >> 2] = HEAP32[(HEAP32[$stbir_info$addr >> 2] | 0) + 176 >> 2];
 HEAP32[$ring_buffer_first_scanline >> 2] = HEAP32[(HEAP32[$stbir_info$addr >> 2] | 0) + 168 >> 2];
 HEAP32[$ring_buffer_length >> 2] = ((HEAP32[(HEAP32[$stbir_info$addr >> 2] | 0) + 160 >> 2] | 0) >>> 0) / 4 | 0;
 HEAP32[$coefficient_group >> 2] = Math_imul(HEAP32[$coefficient_width >> 2] | 0, HEAP32[$contributor >> 2] | 0) | 0;
 HEAP32[$n0 >> 2] = HEAP32[(HEAP32[$vertical_contributors >> 2] | 0) + (HEAP32[$contributor >> 2] << 3) >> 2];
 HEAP32[$n1 >> 2] = HEAP32[(HEAP32[$vertical_contributors >> 2] | 0) + (HEAP32[$contributor >> 2] << 3) + 4 >> 2];
 HEAP32[$output_row_start >> 2] = Math_imul(HEAP32[$n$addr >> 2] | 0, HEAP32[(HEAP32[$stbir_info$addr >> 2] | 0) + 28 >> 2] | 0) | 0;
 if (!(_stbir__use_height_upsampling(HEAP32[$stbir_info$addr >> 2] | 0) | 0)) ___assert_fail(35773, 34244, 1897, 35922);
 _memset(HEAP32[$encode_buffer >> 2] | 0, 0, Math_imul(HEAP32[$output_w >> 2] << 2, HEAP32[$channels >> 2] | 0) | 0) | 0;
 HEAP32[$coefficient_counter >> 2] = 0;
 switch (HEAP32[$channels >> 2] | 0) {
 case 1:
  {
   HEAP32[$k >> 2] = HEAP32[$n0 >> 2];
   while (1) {
    if ((HEAP32[$k >> 2] | 0) > (HEAP32[$n1 >> 2] | 0)) break;
    $52 = HEAP32[$coefficient_counter >> 2] | 0;
    HEAP32[$coefficient_counter >> 2] = $52 + 1;
    HEAP32[$coefficient_index >> 2] = $52;
    HEAP32[$ring_buffer_entry >> 2] = _stbir__get_ring_buffer_scanline(HEAP32[$k >> 2] | 0, HEAP32[$ring_buffer >> 2] | 0, HEAP32[$ring_buffer_begin_index >> 2] | 0, HEAP32[$ring_buffer_first_scanline >> 2] | 0, HEAP32[$ring_buffer_entries >> 2] | 0, HEAP32[$ring_buffer_length >> 2] | 0) | 0;
    HEAPF32[$coefficient >> 2] = Math_fround(HEAPF32[(HEAP32[$vertical_coefficients >> 2] | 0) + ((HEAP32[$coefficient_group >> 2] | 0) + (HEAP32[$coefficient_index >> 2] | 0) << 2) >> 2]);
    HEAP32[$x >> 2] = 0;
    while (1) {
     if ((HEAP32[$x >> 2] | 0) >= (HEAP32[$output_w >> 2] | 0)) break;
     HEAP32[$in_pixel_index >> 2] = HEAP32[$x >> 2];
     $68 = Math_fround(HEAPF32[(HEAP32[$ring_buffer_entry >> 2] | 0) + ((HEAP32[$in_pixel_index >> 2] | 0) + 0 << 2) >> 2]);
     $mul29 = Math_fround($68 * Math_fround(HEAPF32[$coefficient >> 2]));
     $arrayidx31 = (HEAP32[$encode_buffer >> 2] | 0) + ((HEAP32[$in_pixel_index >> 2] | 0) + 0 << 2) | 0;
     HEAPF32[$arrayidx31 >> 2] = Math_fround(Math_fround(HEAPF32[$arrayidx31 >> 2]) + $mul29);
     HEAP32[$x >> 2] = (HEAP32[$x >> 2] | 0) + 1;
    }
    HEAP32[$k >> 2] = (HEAP32[$k >> 2] | 0) + 1;
   }
   $227 = HEAP32[$stbir_info$addr >> 2] | 0;
   $228 = HEAP32[$output_w >> 2] | 0;
   $229 = HEAP32[$output_data >> 2] | 0;
   $230 = HEAP32[$output_row_start >> 2] | 0;
   $add$ptr = $229 + $230 | 0;
   $231 = HEAP32[$encode_buffer >> 2] | 0;
   $232 = HEAP32[$channels >> 2] | 0;
   $233 = HEAP32[$alpha_channel >> 2] | 0;
   $234 = HEAP32[$decode >> 2] | 0;
   _stbir__encode_scanline($227, $228, $add$ptr, $231, $232, $233, $234);
   STACKTOP = sp;
   return;
  }
 case 2:
  {
   HEAP32[$k >> 2] = HEAP32[$n0 >> 2];
   while (1) {
    if ((HEAP32[$k >> 2] | 0) > (HEAP32[$n1 >> 2] | 0)) break;
    $78 = HEAP32[$coefficient_counter >> 2] | 0;
    HEAP32[$coefficient_counter >> 2] = $78 + 1;
    HEAP32[$coefficient_index41 >> 2] = $78;
    HEAP32[$ring_buffer_entry43 >> 2] = _stbir__get_ring_buffer_scanline(HEAP32[$k >> 2] | 0, HEAP32[$ring_buffer >> 2] | 0, HEAP32[$ring_buffer_begin_index >> 2] | 0, HEAP32[$ring_buffer_first_scanline >> 2] | 0, HEAP32[$ring_buffer_entries >> 2] | 0, HEAP32[$ring_buffer_length >> 2] | 0) | 0;
    HEAPF32[$coefficient45 >> 2] = Math_fround(HEAPF32[(HEAP32[$vertical_coefficients >> 2] | 0) + ((HEAP32[$coefficient_group >> 2] | 0) + (HEAP32[$coefficient_index41 >> 2] | 0) << 2) >> 2]);
    HEAP32[$x >> 2] = 0;
    while (1) {
     if ((HEAP32[$x >> 2] | 0) >= (HEAP32[$output_w >> 2] | 0)) break;
     HEAP32[$in_pixel_index51 >> 2] = HEAP32[$x >> 2] << 1;
     $94 = Math_fround(HEAPF32[(HEAP32[$ring_buffer_entry43 >> 2] | 0) + ((HEAP32[$in_pixel_index51 >> 2] | 0) + 0 << 2) >> 2]);
     $mul55 = Math_fround($94 * Math_fround(HEAPF32[$coefficient45 >> 2]));
     $arrayidx57 = (HEAP32[$encode_buffer >> 2] | 0) + ((HEAP32[$in_pixel_index51 >> 2] | 0) + 0 << 2) | 0;
     HEAPF32[$arrayidx57 >> 2] = Math_fround(Math_fround(HEAPF32[$arrayidx57 >> 2]) + $mul55);
     $101 = Math_fround(HEAPF32[(HEAP32[$ring_buffer_entry43 >> 2] | 0) + ((HEAP32[$in_pixel_index51 >> 2] | 0) + 1 << 2) >> 2]);
     $mul61 = Math_fround($101 * Math_fround(HEAPF32[$coefficient45 >> 2]));
     $arrayidx63 = (HEAP32[$encode_buffer >> 2] | 0) + ((HEAP32[$in_pixel_index51 >> 2] | 0) + 1 << 2) | 0;
     HEAPF32[$arrayidx63 >> 2] = Math_fround(Math_fround(HEAPF32[$arrayidx63 >> 2]) + $mul61);
     HEAP32[$x >> 2] = (HEAP32[$x >> 2] | 0) + 1;
    }
    HEAP32[$k >> 2] = (HEAP32[$k >> 2] | 0) + 1;
   }
   $227 = HEAP32[$stbir_info$addr >> 2] | 0;
   $228 = HEAP32[$output_w >> 2] | 0;
   $229 = HEAP32[$output_data >> 2] | 0;
   $230 = HEAP32[$output_row_start >> 2] | 0;
   $add$ptr = $229 + $230 | 0;
   $231 = HEAP32[$encode_buffer >> 2] | 0;
   $232 = HEAP32[$channels >> 2] | 0;
   $233 = HEAP32[$alpha_channel >> 2] | 0;
   $234 = HEAP32[$decode >> 2] | 0;
   _stbir__encode_scanline($227, $228, $add$ptr, $231, $232, $233, $234);
   STACKTOP = sp;
   return;
  }
 case 3:
  {
   HEAP32[$k >> 2] = HEAP32[$n0 >> 2];
   while (1) {
    if ((HEAP32[$k >> 2] | 0) > (HEAP32[$n1 >> 2] | 0)) break;
    $111 = HEAP32[$coefficient_counter >> 2] | 0;
    HEAP32[$coefficient_counter >> 2] = $111 + 1;
    HEAP32[$coefficient_index75 >> 2] = $111;
    HEAP32[$ring_buffer_entry77 >> 2] = _stbir__get_ring_buffer_scanline(HEAP32[$k >> 2] | 0, HEAP32[$ring_buffer >> 2] | 0, HEAP32[$ring_buffer_begin_index >> 2] | 0, HEAP32[$ring_buffer_first_scanline >> 2] | 0, HEAP32[$ring_buffer_entries >> 2] | 0, HEAP32[$ring_buffer_length >> 2] | 0) | 0;
    HEAPF32[$coefficient79 >> 2] = Math_fround(HEAPF32[(HEAP32[$vertical_coefficients >> 2] | 0) + ((HEAP32[$coefficient_group >> 2] | 0) + (HEAP32[$coefficient_index75 >> 2] | 0) << 2) >> 2]);
    HEAP32[$x >> 2] = 0;
    while (1) {
     if ((HEAP32[$x >> 2] | 0) >= (HEAP32[$output_w >> 2] | 0)) break;
     HEAP32[$in_pixel_index85 >> 2] = (HEAP32[$x >> 2] | 0) * 3;
     $127 = Math_fround(HEAPF32[(HEAP32[$ring_buffer_entry77 >> 2] | 0) + ((HEAP32[$in_pixel_index85 >> 2] | 0) + 0 << 2) >> 2]);
     $mul89 = Math_fround($127 * Math_fround(HEAPF32[$coefficient79 >> 2]));
     $arrayidx91 = (HEAP32[$encode_buffer >> 2] | 0) + ((HEAP32[$in_pixel_index85 >> 2] | 0) + 0 << 2) | 0;
     HEAPF32[$arrayidx91 >> 2] = Math_fround(Math_fround(HEAPF32[$arrayidx91 >> 2]) + $mul89);
     $134 = Math_fround(HEAPF32[(HEAP32[$ring_buffer_entry77 >> 2] | 0) + ((HEAP32[$in_pixel_index85 >> 2] | 0) + 1 << 2) >> 2]);
     $mul95 = Math_fround($134 * Math_fround(HEAPF32[$coefficient79 >> 2]));
     $arrayidx97 = (HEAP32[$encode_buffer >> 2] | 0) + ((HEAP32[$in_pixel_index85 >> 2] | 0) + 1 << 2) | 0;
     HEAPF32[$arrayidx97 >> 2] = Math_fround(Math_fround(HEAPF32[$arrayidx97 >> 2]) + $mul95);
     $141 = Math_fround(HEAPF32[(HEAP32[$ring_buffer_entry77 >> 2] | 0) + ((HEAP32[$in_pixel_index85 >> 2] | 0) + 2 << 2) >> 2]);
     $mul101 = Math_fround($141 * Math_fround(HEAPF32[$coefficient79 >> 2]));
     $arrayidx103 = (HEAP32[$encode_buffer >> 2] | 0) + ((HEAP32[$in_pixel_index85 >> 2] | 0) + 2 << 2) | 0;
     HEAPF32[$arrayidx103 >> 2] = Math_fround(Math_fround(HEAPF32[$arrayidx103 >> 2]) + $mul101);
     HEAP32[$x >> 2] = (HEAP32[$x >> 2] | 0) + 1;
    }
    HEAP32[$k >> 2] = (HEAP32[$k >> 2] | 0) + 1;
   }
   $227 = HEAP32[$stbir_info$addr >> 2] | 0;
   $228 = HEAP32[$output_w >> 2] | 0;
   $229 = HEAP32[$output_data >> 2] | 0;
   $230 = HEAP32[$output_row_start >> 2] | 0;
   $add$ptr = $229 + $230 | 0;
   $231 = HEAP32[$encode_buffer >> 2] | 0;
   $232 = HEAP32[$channels >> 2] | 0;
   $233 = HEAP32[$alpha_channel >> 2] | 0;
   $234 = HEAP32[$decode >> 2] | 0;
   _stbir__encode_scanline($227, $228, $add$ptr, $231, $232, $233, $234);
   STACKTOP = sp;
   return;
  }
 case 4:
  {
   HEAP32[$k >> 2] = HEAP32[$n0 >> 2];
   while (1) {
    if ((HEAP32[$k >> 2] | 0) > (HEAP32[$n1 >> 2] | 0)) break;
    $151 = HEAP32[$coefficient_counter >> 2] | 0;
    HEAP32[$coefficient_counter >> 2] = $151 + 1;
    HEAP32[$coefficient_index115 >> 2] = $151;
    HEAP32[$ring_buffer_entry117 >> 2] = _stbir__get_ring_buffer_scanline(HEAP32[$k >> 2] | 0, HEAP32[$ring_buffer >> 2] | 0, HEAP32[$ring_buffer_begin_index >> 2] | 0, HEAP32[$ring_buffer_first_scanline >> 2] | 0, HEAP32[$ring_buffer_entries >> 2] | 0, HEAP32[$ring_buffer_length >> 2] | 0) | 0;
    HEAPF32[$coefficient119 >> 2] = Math_fround(HEAPF32[(HEAP32[$vertical_coefficients >> 2] | 0) + ((HEAP32[$coefficient_group >> 2] | 0) + (HEAP32[$coefficient_index115 >> 2] | 0) << 2) >> 2]);
    HEAP32[$x >> 2] = 0;
    while (1) {
     if ((HEAP32[$x >> 2] | 0) >= (HEAP32[$output_w >> 2] | 0)) break;
     HEAP32[$in_pixel_index125 >> 2] = HEAP32[$x >> 2] << 2;
     $167 = Math_fround(HEAPF32[(HEAP32[$ring_buffer_entry117 >> 2] | 0) + ((HEAP32[$in_pixel_index125 >> 2] | 0) + 0 << 2) >> 2]);
     $mul129 = Math_fround($167 * Math_fround(HEAPF32[$coefficient119 >> 2]));
     $arrayidx131 = (HEAP32[$encode_buffer >> 2] | 0) + ((HEAP32[$in_pixel_index125 >> 2] | 0) + 0 << 2) | 0;
     HEAPF32[$arrayidx131 >> 2] = Math_fround(Math_fround(HEAPF32[$arrayidx131 >> 2]) + $mul129);
     $174 = Math_fround(HEAPF32[(HEAP32[$ring_buffer_entry117 >> 2] | 0) + ((HEAP32[$in_pixel_index125 >> 2] | 0) + 1 << 2) >> 2]);
     $mul135 = Math_fround($174 * Math_fround(HEAPF32[$coefficient119 >> 2]));
     $arrayidx137 = (HEAP32[$encode_buffer >> 2] | 0) + ((HEAP32[$in_pixel_index125 >> 2] | 0) + 1 << 2) | 0;
     HEAPF32[$arrayidx137 >> 2] = Math_fround(Math_fround(HEAPF32[$arrayidx137 >> 2]) + $mul135);
     $181 = Math_fround(HEAPF32[(HEAP32[$ring_buffer_entry117 >> 2] | 0) + ((HEAP32[$in_pixel_index125 >> 2] | 0) + 2 << 2) >> 2]);
     $mul141 = Math_fround($181 * Math_fround(HEAPF32[$coefficient119 >> 2]));
     $arrayidx143 = (HEAP32[$encode_buffer >> 2] | 0) + ((HEAP32[$in_pixel_index125 >> 2] | 0) + 2 << 2) | 0;
     HEAPF32[$arrayidx143 >> 2] = Math_fround(Math_fround(HEAPF32[$arrayidx143 >> 2]) + $mul141);
     $188 = Math_fround(HEAPF32[(HEAP32[$ring_buffer_entry117 >> 2] | 0) + ((HEAP32[$in_pixel_index125 >> 2] | 0) + 3 << 2) >> 2]);
     $mul147 = Math_fround($188 * Math_fround(HEAPF32[$coefficient119 >> 2]));
     $arrayidx149 = (HEAP32[$encode_buffer >> 2] | 0) + ((HEAP32[$in_pixel_index125 >> 2] | 0) + 3 << 2) | 0;
     HEAPF32[$arrayidx149 >> 2] = Math_fround(Math_fround(HEAPF32[$arrayidx149 >> 2]) + $mul147);
     HEAP32[$x >> 2] = (HEAP32[$x >> 2] | 0) + 1;
    }
    HEAP32[$k >> 2] = (HEAP32[$k >> 2] | 0) + 1;
   }
   $227 = HEAP32[$stbir_info$addr >> 2] | 0;
   $228 = HEAP32[$output_w >> 2] | 0;
   $229 = HEAP32[$output_data >> 2] | 0;
   $230 = HEAP32[$output_row_start >> 2] | 0;
   $add$ptr = $229 + $230 | 0;
   $231 = HEAP32[$encode_buffer >> 2] | 0;
   $232 = HEAP32[$channels >> 2] | 0;
   $233 = HEAP32[$alpha_channel >> 2] | 0;
   $234 = HEAP32[$decode >> 2] | 0;
   _stbir__encode_scanline($227, $228, $add$ptr, $231, $232, $233, $234);
   STACKTOP = sp;
   return;
  }
 default:
  {
   HEAP32[$k >> 2] = HEAP32[$n0 >> 2];
   while (1) {
    if ((HEAP32[$k >> 2] | 0) > (HEAP32[$n1 >> 2] | 0)) break;
    $198 = HEAP32[$coefficient_counter >> 2] | 0;
    HEAP32[$coefficient_counter >> 2] = $198 + 1;
    HEAP32[$coefficient_index160 >> 2] = $198;
    HEAP32[$ring_buffer_entry162 >> 2] = _stbir__get_ring_buffer_scanline(HEAP32[$k >> 2] | 0, HEAP32[$ring_buffer >> 2] | 0, HEAP32[$ring_buffer_begin_index >> 2] | 0, HEAP32[$ring_buffer_first_scanline >> 2] | 0, HEAP32[$ring_buffer_entries >> 2] | 0, HEAP32[$ring_buffer_length >> 2] | 0) | 0;
    HEAPF32[$coefficient164 >> 2] = Math_fround(HEAPF32[(HEAP32[$vertical_coefficients >> 2] | 0) + ((HEAP32[$coefficient_group >> 2] | 0) + (HEAP32[$coefficient_index160 >> 2] | 0) << 2) >> 2]);
    HEAP32[$x >> 2] = 0;
    while (1) {
     if ((HEAP32[$x >> 2] | 0) >= (HEAP32[$output_w >> 2] | 0)) break;
     HEAP32[$in_pixel_index170 >> 2] = Math_imul(HEAP32[$x >> 2] | 0, HEAP32[$channels >> 2] | 0) | 0;
     HEAP32[$c >> 2] = 0;
     while (1) {
      if ((HEAP32[$c >> 2] | 0) >= (HEAP32[$channels >> 2] | 0)) break;
      $218 = Math_fround(HEAPF32[(HEAP32[$ring_buffer_entry162 >> 2] | 0) + ((HEAP32[$in_pixel_index170 >> 2] | 0) + (HEAP32[$c >> 2] | 0) << 2) >> 2]);
      $mul177 = Math_fround($218 * Math_fround(HEAPF32[$coefficient164 >> 2]));
      $arrayidx179 = (HEAP32[$encode_buffer >> 2] | 0) + ((HEAP32[$in_pixel_index170 >> 2] | 0) + (HEAP32[$c >> 2] | 0) << 2) | 0;
      HEAPF32[$arrayidx179 >> 2] = Math_fround(Math_fround(HEAPF32[$arrayidx179 >> 2]) + $mul177);
      HEAP32[$c >> 2] = (HEAP32[$c >> 2] | 0) + 1;
     }
     HEAP32[$x >> 2] = (HEAP32[$x >> 2] | 0) + 1;
    }
    HEAP32[$k >> 2] = (HEAP32[$k >> 2] | 0) + 1;
   }
   $227 = HEAP32[$stbir_info$addr >> 2] | 0;
   $228 = HEAP32[$output_w >> 2] | 0;
   $229 = HEAP32[$output_data >> 2] | 0;
   $230 = HEAP32[$output_row_start >> 2] | 0;
   $add$ptr = $229 + $230 | 0;
   $231 = HEAP32[$encode_buffer >> 2] | 0;
   $232 = HEAP32[$channels >> 2] | 0;
   $233 = HEAP32[$alpha_channel >> 2] | 0;
   $234 = HEAP32[$decode >> 2] | 0;
   _stbir__encode_scanline($227, $228, $add$ptr, $231, $232, $233, $234);
   STACKTOP = sp;
   return;
  }
 }
}

function _printf_core($f, $fmt, $ap, $nl_arg, $nl_type, $fmt_fp, $pop_arg_long_double) {
 $f = $f | 0;
 $fmt = $fmt | 0;
 $ap = $ap | 0;
 $nl_arg = $nl_arg | 0;
 $nl_type = $nl_type | 0;
 $fmt_fp = $fmt_fp | 0;
 $pop_arg_long_double = $pop_arg_long_double | 0;
 var $$lcssa213 = 0, $$pre261 = 0, $$pre263 = 0, $$sink = 0, $0 = 0, $1 = 0, $102 = 0, $103 = 0, $11 = 0, $112 = 0, $118 = 0, $12 = 0, $120 = 0, $122 = 0, $125 = 0, $127 = 0, $128 = 0, $129 = 0, $135 = 0, $136 = 0, $138 = 0, $14 = 0, $146 = 0, $154 = 0, $162 = 0, $164 = 0, $166 = 0, $2 = 0, $29 = 0, $3 = 0, $30 = 0, $33 = 0, $36 = 0, $4 = 0, $42 = 0, $51 = 0, $52 = 0, $55 = 0, $57 = 0, $59 = 0, $64 = 0, $65 = 0, $69 = 0, $71 = 0, $82 = 0, $92 = 0, $96 = 0, $a$0 = 0, $a$1 = 0, $add$ptr139 = 0, $add$ptr150 = 0, $add$ptr206 = 0, $add$ptr341 = 0, $add323 = 0, $add390 = 0, $add436 = 0, $and220 = 0, $arg = 0, $argpos$0 = 0, $arrayidx114 = 0, $arrayidx129 = 0, $arrayidx365 = 0, $arrayidx78 = 0, $buf = 0, $call104 = 0, $call160 = 0, $call351 = 0, $call379 = 0, $call406 = 0, $cmp185 = 0, $cmp380 = 0, $cmp97 = 0, $cnt$0 = 0, $cnt$0$ph = 0, $cnt$1 = 0, $cond = 0, $cond149 = 0, $cond350 = 0, $conv175 = 0, $conv208 = 0, $fl$0$lcssa = 0, $fl$0237 = 0, $fl$1 = 0, $fl$3 = 0, $fl$4 = 0, $fl$6 = 0, $i$0217 = 0, $i$0217271 = 0, $i$0243 = 0, $i$1248 = 0, $i$2224 = 0, $i$3221 = 0, $inc = 0, $incdec$ptr = 0, $incdec$ptr23 = 0, $incdec$ptr45 = 0, $incdec$ptr62 = 0, $l$0 = 0, $l$0$ph = 0, $l$0$ph$be = 0, $l10n$0$ph = 0, $l10n$1 = 0, $l10n$2 = 0, $l10n$3 = 0, $mb = 0, $or = 0, $or$cond = 0, $or$cond190 = 0, $p$0 = 0, $p$1 = 0, $p$2 = 0, $p$4269 = 0, $p$5 = 0, $pl$0 = 0, $pl$1 = 0, $pl$2 = 0, $prefix$0 = 0, $prefix$1 = 0, $prefix$2 = 0, $retval$0 = 0, $s = 0, $spec$select = 0, $spec$select195 = 0, $st$0 = 0, $storemerge187$lcssa = 0, $storemerge187236 = 0, $storemerge188 = 0, $sub$ptr$lhs$cast318 = 0, $sub$ptr$lhs$cast426$pre$phiZZZZ2D = 0, $sub$ptr$sub269 = 0, $sub$ptr$sub428 = 0, $sub49230 = 0, $sub49238 = 0, $t$0 = 0, $t$1 = 0, $tobool25 = 0, $tobool34 = 0, $tobool352 = 0, $w$0 = 0, $w$1 = 0, $w$2 = 0, $wc = 0, $ws$0244 = 0, $ws$1249 = 0, $z$0$lcssa = 0, $z$0226 = 0, label = 0, sp = 0, $55$looptemp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64);
 $s = sp + 56 | 0;
 $arg = sp + 40 | 0;
 $buf = sp;
 $wc = sp + 48 | 0;
 $mb = sp + 60 | 0;
 HEAP32[$s >> 2] = $fmt;
 $tobool25 = ($f | 0) != 0;
 $add$ptr206 = $buf + 40 | 0;
 $sub$ptr$lhs$cast318 = $add$ptr206;
 $add$ptr341 = $buf + 39 | 0;
 $arrayidx365 = $wc + 4 | 0;
 $cnt$0$ph = 0;
 $l$0$ph = 0;
 $l10n$0$ph = 0;
 L1 : while (1) {
  $cnt$0 = $cnt$0$ph;
  $l$0 = $l$0$ph;
  while (1) {
   do if (($cnt$0 | 0) > -1) if (($l$0 | 0) > (2147483647 - $cnt$0 | 0)) {
    HEAP32[(___errno_location() | 0) >> 2] = 61;
    $cnt$1 = -1;
    break;
   } else {
    $cnt$1 = $l$0 + $cnt$0 | 0;
    break;
   } else $cnt$1 = $cnt$0; while (0);
   $0 = HEAP32[$s >> 2] | 0;
   $1 = HEAP8[$0 >> 0] | 0;
   if (!($1 << 24 >> 24)) {
    label = 92;
    break L1;
   }
   $2 = $1;
   $3 = $0;
   L12 : while (1) {
    switch ($2 << 24 >> 24) {
    case 37:
     {
      label = 10;
      break L12;
      break;
     }
    case 0:
     {
      $z$0$lcssa = $3;
      break L12;
      break;
     }
    default:
     {}
    }
    $incdec$ptr = $3 + 1 | 0;
    HEAP32[$s >> 2] = $incdec$ptr;
    $2 = HEAP8[$incdec$ptr >> 0] | 0;
    $3 = $incdec$ptr;
   }
   L15 : do if ((label | 0) == 10) {
    label = 0;
    $4 = $3;
    $z$0226 = $3;
    while (1) {
     if ((HEAP8[$4 + 1 >> 0] | 0) != 37) {
      $z$0$lcssa = $z$0226;
      break L15;
     }
     $incdec$ptr23 = $z$0226 + 1 | 0;
     $4 = $4 + 2 | 0;
     HEAP32[$s >> 2] = $4;
     if ((HEAP8[$4 >> 0] | 0) != 37) {
      $z$0$lcssa = $incdec$ptr23;
      break;
     } else $z$0226 = $incdec$ptr23;
    }
   } while (0);
   $l$0 = $z$0$lcssa - $0 | 0;
   if ($tobool25) _out($f, $0, $l$0);
   if (!$l$0) break; else $cnt$0 = $cnt$1;
  }
  $tobool34 = (_isdigit(HEAP8[(HEAP32[$s >> 2] | 0) + 1 >> 0] | 0) | 0) == 0;
  $$pre261 = HEAP32[$s >> 2] | 0;
  if ($tobool34) {
   $$sink = 1;
   $argpos$0 = -1;
   $l10n$1 = $l10n$0$ph;
  } else if ((HEAP8[$$pre261 + 2 >> 0] | 0) == 36) {
   $$sink = 3;
   $argpos$0 = (HEAP8[$$pre261 + 1 >> 0] | 0) + -48 | 0;
   $l10n$1 = 1;
  } else {
   $$sink = 1;
   $argpos$0 = -1;
   $l10n$1 = $l10n$0$ph;
  }
  $incdec$ptr45 = $$pre261 + $$sink | 0;
  HEAP32[$s >> 2] = $incdec$ptr45;
  $11 = HEAP8[$incdec$ptr45 >> 0] | 0;
  $sub49230 = ($11 << 24 >> 24) + -32 | 0;
  if ($sub49230 >>> 0 > 31 | (1 << $sub49230 & 75913 | 0) == 0) {
   $$lcssa213 = $11;
   $fl$0$lcssa = 0;
   $storemerge187$lcssa = $incdec$ptr45;
  } else {
   $fl$0237 = 0;
   $storemerge187236 = $incdec$ptr45;
   $sub49238 = $sub49230;
   while (1) {
    $or = 1 << $sub49238 | $fl$0237;
    $incdec$ptr62 = $storemerge187236 + 1 | 0;
    HEAP32[$s >> 2] = $incdec$ptr62;
    $12 = HEAP8[$incdec$ptr62 >> 0] | 0;
    $sub49238 = ($12 << 24 >> 24) + -32 | 0;
    if ($sub49238 >>> 0 > 31 | (1 << $sub49238 & 75913 | 0) == 0) {
     $$lcssa213 = $12;
     $fl$0$lcssa = $or;
     $storemerge187$lcssa = $incdec$ptr62;
     break;
    } else {
     $fl$0237 = $or;
     $storemerge187236 = $incdec$ptr62;
    }
   }
  }
  if ($$lcssa213 << 24 >> 24 == 42) {
   if (!(_isdigit(HEAP8[$storemerge187$lcssa + 1 >> 0] | 0) | 0)) label = 27; else {
    $14 = HEAP32[$s >> 2] | 0;
    if ((HEAP8[$14 + 2 >> 0] | 0) == 36) {
     $arrayidx78 = $14 + 1 | 0;
     HEAP32[$nl_type + ((HEAP8[$arrayidx78 >> 0] | 0) + -48 << 2) >> 2] = 10;
     $l10n$2 = 1;
     $storemerge188 = $14 + 3 | 0;
     $w$0 = HEAP32[$nl_arg + ((HEAP8[$arrayidx78 >> 0] | 0) + -48 << 3) >> 2] | 0;
    } else label = 27;
   }
   if ((label | 0) == 27) {
    label = 0;
    if ($l10n$1 | 0) {
     $retval$0 = -1;
     break;
    }
    if ($tobool25) {
     $29 = (HEAP32[$ap >> 2] | 0) + (4 - 1) & ~(4 - 1);
     $30 = HEAP32[$29 >> 2] | 0;
     HEAP32[$ap >> 2] = $29 + 4;
     $cond = $30;
    } else $cond = 0;
    $l10n$2 = 0;
    $storemerge188 = (HEAP32[$s >> 2] | 0) + 1 | 0;
    $w$0 = $cond;
   }
   HEAP32[$s >> 2] = $storemerge188;
   $cmp97 = ($w$0 | 0) < 0;
   $33 = $storemerge188;
   $fl$1 = $cmp97 ? $fl$0$lcssa | 8192 : $fl$0$lcssa;
   $l10n$3 = $l10n$2;
   $w$1 = $cmp97 ? 0 - $w$0 | 0 : $w$0;
  } else {
   $call104 = _getint($s) | 0;
   if (($call104 | 0) < 0) {
    $retval$0 = -1;
    break;
   }
   $33 = HEAP32[$s >> 2] | 0;
   $fl$1 = $fl$0$lcssa;
   $l10n$3 = $l10n$1;
   $w$1 = $call104;
  }
  do if ((HEAP8[$33 >> 0] | 0) == 46) {
   $arrayidx114 = $33 + 1 | 0;
   if ((HEAP8[$arrayidx114 >> 0] | 0) != 42) {
    HEAP32[$s >> 2] = $arrayidx114;
    $call160 = _getint($s) | 0;
    $$pre263 = HEAP32[$s >> 2] | 0;
    $p$0 = $call160;
    break;
   }
   if (_isdigit(HEAP8[$33 + 2 >> 0] | 0) | 0) {
    $36 = HEAP32[$s >> 2] | 0;
    if ((HEAP8[$36 + 3 >> 0] | 0) == 36) {
     $arrayidx129 = $36 + 2 | 0;
     HEAP32[$nl_type + ((HEAP8[$arrayidx129 >> 0] | 0) + -48 << 2) >> 2] = 10;
     $42 = HEAP32[$nl_arg + ((HEAP8[$arrayidx129 >> 0] | 0) + -48 << 3) >> 2] | 0;
     $add$ptr139 = $36 + 4 | 0;
     HEAP32[$s >> 2] = $add$ptr139;
     $$pre263 = $add$ptr139;
     $p$0 = $42;
     break;
    }
   }
   if ($l10n$3 | 0) {
    $retval$0 = -1;
    break L1;
   }
   if ($tobool25) {
    $51 = (HEAP32[$ap >> 2] | 0) + (4 - 1) & ~(4 - 1);
    $52 = HEAP32[$51 >> 2] | 0;
    HEAP32[$ap >> 2] = $51 + 4;
    $cond149 = $52;
   } else $cond149 = 0;
   $add$ptr150 = (HEAP32[$s >> 2] | 0) + 2 | 0;
   HEAP32[$s >> 2] = $add$ptr150;
   $$pre263 = $add$ptr150;
   $p$0 = $cond149;
  } else {
   $$pre263 = $33;
   $p$0 = -1;
  } while (0);
  $55 = $$pre263;
  $st$0 = 0;
  while (1) {
   if (((HEAP8[$55 >> 0] | 0) + -65 | 0) >>> 0 > 57) {
    $retval$0 = -1;
    break L1;
   }
   $55$looptemp = $55;
   $55 = $55 + 1 | 0;
   HEAP32[$s >> 2] = $55;
   $57 = HEAP8[(HEAP8[$55$looptemp >> 0] | 0) + -65 + (8304 + ($st$0 * 58 | 0)) >> 0] | 0;
   $conv175 = $57 & 255;
   if (($conv175 + -1 | 0) >>> 0 >= 8) break; else $st$0 = $conv175;
  }
  if (!($57 << 24 >> 24)) {
   $retval$0 = -1;
   break;
  }
  $cmp185 = ($argpos$0 | 0) > -1;
  do if ($57 << 24 >> 24 == 19) if ($cmp185) {
   $retval$0 = -1;
   break L1;
  } else label = 54; else {
   if ($cmp185) {
    HEAP32[$nl_type + ($argpos$0 << 2) >> 2] = $conv175;
    $59 = $nl_arg + ($argpos$0 << 3) | 0;
    $64 = HEAP32[$59 + 4 >> 2] | 0;
    $65 = $arg;
    HEAP32[$65 >> 2] = HEAP32[$59 >> 2];
    HEAP32[$65 + 4 >> 2] = $64;
    label = 54;
    break;
   }
   if (!$tobool25) {
    $retval$0 = 0;
    break L1;
   }
   _pop_arg($arg, $conv175, $ap, $pop_arg_long_double);
   $69 = HEAP32[$s >> 2] | 0;
   label = 55;
  } while (0);
  if ((label | 0) == 54) {
   label = 0;
   if ($tobool25) {
    $69 = $55;
    label = 55;
   } else $l$0$ph$be = 0;
  }
  L77 : do if ((label | 0) == 55) {
   label = 0;
   $conv208 = HEAP8[$69 + -1 >> 0] | 0;
   $t$0 = ($st$0 | 0) != 0 & ($conv208 & 15 | 0) == 3 ? $conv208 & -33 : $conv208;
   $and220 = $fl$1 & -65537;
   $spec$select = ($fl$1 & 8192 | 0) == 0 ? $fl$1 : $and220;
   L79 : do switch ($t$0 | 0) {
   case 110:
    {
     switch (($st$0 & 255) << 24 >> 24) {
     case 0:
      {
       HEAP32[HEAP32[$arg >> 2] >> 2] = $cnt$1;
       $l$0$ph$be = 0;
       break L77;
       break;
      }
     case 1:
      {
       HEAP32[HEAP32[$arg >> 2] >> 2] = $cnt$1;
       $l$0$ph$be = 0;
       break L77;
       break;
      }
     case 2:
      {
       $82 = HEAP32[$arg >> 2] | 0;
       HEAP32[$82 >> 2] = $cnt$1;
       HEAP32[$82 + 4 >> 2] = (($cnt$1 | 0) < 0) << 31 >> 31;
       $l$0$ph$be = 0;
       break L77;
       break;
      }
     case 3:
      {
       HEAP16[HEAP32[$arg >> 2] >> 1] = $cnt$1;
       $l$0$ph$be = 0;
       break L77;
       break;
      }
     case 4:
      {
       HEAP8[HEAP32[$arg >> 2] >> 0] = $cnt$1;
       $l$0$ph$be = 0;
       break L77;
       break;
      }
     case 6:
      {
       HEAP32[HEAP32[$arg >> 2] >> 2] = $cnt$1;
       $l$0$ph$be = 0;
       break L77;
       break;
      }
     case 7:
      {
       $92 = HEAP32[$arg >> 2] | 0;
       HEAP32[$92 >> 2] = $cnt$1;
       HEAP32[$92 + 4 >> 2] = (($cnt$1 | 0) < 0) << 31 >> 31;
       $l$0$ph$be = 0;
       break L77;
       break;
      }
     default:
      {
       $l$0$ph$be = 0;
       break L77;
      }
     }
     break;
    }
   case 112:
    {
     $fl$3 = $spec$select | 8;
     $p$1 = $p$0 >>> 0 > 8 ? $p$0 : 8;
     $t$1 = 120;
     label = 67;
     break;
    }
   case 88:
   case 120:
    {
     $fl$3 = $spec$select;
     $p$1 = $p$0;
     $t$1 = $t$0;
     label = 67;
     break;
    }
   case 111:
    {
     $112 = $arg;
     $118 = _fmt_o(HEAP32[$112 >> 2] | 0, HEAP32[$112 + 4 >> 2] | 0, $add$ptr206) | 0;
     $sub$ptr$sub269 = $sub$ptr$lhs$cast318 - $118 | 0;
     $a$0 = $118;
     $fl$4 = $spec$select;
     $p$2 = ($spec$select & 8 | 0) == 0 | ($p$0 | 0) > ($sub$ptr$sub269 | 0) ? $p$0 : $sub$ptr$sub269 + 1 | 0;
     $pl$1 = 0;
     $prefix$1 = 38429;
     label = 73;
     break;
    }
   case 105:
   case 100:
    {
     $120 = $arg;
     $122 = HEAP32[$120 >> 2] | 0;
     $125 = HEAP32[$120 + 4 >> 2] | 0;
     if (($125 | 0) < 0) {
      $127 = _i64Subtract(0, 0, $122 | 0, $125 | 0) | 0;
      $128 = getTempRet0() | 0;
      $129 = $arg;
      HEAP32[$129 >> 2] = $127;
      HEAP32[$129 + 4 >> 2] = $128;
      $135 = $127;
      $136 = $128;
      $pl$0 = 1;
      $prefix$0 = 38429;
      label = 72;
      break L79;
     } else {
      $135 = $122;
      $136 = $125;
      $pl$0 = ($spec$select & 2049 | 0) != 0 & 1;
      $prefix$0 = ($spec$select & 2048 | 0) == 0 ? (($spec$select & 1 | 0) == 0 ? 38429 : 38431) : 38430;
      label = 72;
      break L79;
     }
     break;
    }
   case 117:
    {
     $71 = $arg;
     $135 = HEAP32[$71 >> 2] | 0;
     $136 = HEAP32[$71 + 4 >> 2] | 0;
     $pl$0 = 0;
     $prefix$0 = 38429;
     label = 72;
     break;
    }
   case 99:
    {
     HEAP8[$add$ptr341 >> 0] = HEAP32[$arg >> 2];
     $a$1 = $add$ptr341;
     $fl$6 = $and220;
     $p$5 = 1;
     $pl$2 = 0;
     $prefix$2 = 38429;
     $sub$ptr$lhs$cast426$pre$phiZZZZ2D = $sub$ptr$lhs$cast318;
     break;
    }
   case 115:
    {
     $154 = HEAP32[$arg >> 2] | 0;
     $cond350 = ($154 | 0) == 0 ? 38439 : $154;
     $call351 = _memchr($cond350, 0, $p$0) | 0;
     $tobool352 = ($call351 | 0) == 0;
     $a$1 = $cond350;
     $fl$6 = $and220;
     $p$5 = $tobool352 ? $p$0 : $call351 - $cond350 | 0;
     $pl$2 = 0;
     $prefix$2 = 38429;
     $sub$ptr$lhs$cast426$pre$phiZZZZ2D = $tobool352 ? $cond350 + $p$0 | 0 : $call351;
     break;
    }
   case 67:
    {
     HEAP32[$wc >> 2] = HEAP32[$arg >> 2];
     HEAP32[$arrayidx365 >> 2] = 0;
     HEAP32[$arg >> 2] = $wc;
     $p$4269 = -1;
     label = 79;
     break;
    }
   case 83:
    {
     if (!$p$0) {
      _pad_667($f, 32, $w$1, 0, $spec$select);
      $i$0217271 = 0;
      label = 89;
     } else {
      $p$4269 = $p$0;
      label = 79;
     }
     break;
    }
   case 65:
   case 71:
   case 70:
   case 69:
   case 97:
   case 103:
   case 102:
   case 101:
    {
     $l$0$ph$be = FUNCTION_TABLE_iidiiii[$fmt_fp & 1]($f, +HEAPF64[$arg >> 3], $w$1, $p$0, $spec$select, $t$0) | 0;
     break L77;
     break;
    }
   default:
    {
     $a$1 = $0;
     $fl$6 = $spec$select;
     $p$5 = $p$0;
     $pl$2 = 0;
     $prefix$2 = 38429;
     $sub$ptr$lhs$cast426$pre$phiZZZZ2D = $sub$ptr$lhs$cast318;
    }
   } while (0);
   L102 : do if ((label | 0) == 67) {
    label = 0;
    $96 = $arg;
    $102 = _fmt_x(HEAP32[$96 >> 2] | 0, HEAP32[$96 + 4 >> 2] | 0, $add$ptr206, $t$1 & 32) | 0;
    $103 = $arg;
    $or$cond190 = ($fl$3 & 8 | 0) == 0 | (HEAP32[$103 >> 2] | 0) == 0 & (HEAP32[$103 + 4 >> 2] | 0) == 0;
    $a$0 = $102;
    $fl$4 = $fl$3;
    $p$2 = $p$1;
    $pl$1 = $or$cond190 ? 0 : 2;
    $prefix$1 = $or$cond190 ? 38429 : 38429 + ($t$1 >>> 4) | 0;
    label = 73;
   } else if ((label | 0) == 72) {
    label = 0;
    $a$0 = _fmt_u($135, $136, $add$ptr206) | 0;
    $fl$4 = $spec$select;
    $p$2 = $p$0;
    $pl$1 = $pl$0;
    $prefix$1 = $prefix$0;
    label = 73;
   } else if ((label | 0) == 79) {
    label = 0;
    $i$0243 = 0;
    $ws$0244 = HEAP32[$arg >> 2] | 0;
    while (1) {
     $162 = HEAP32[$ws$0244 >> 2] | 0;
     if (!$162) {
      $i$0217 = $i$0243;
      break;
     }
     $call379 = _wctomb($mb, $162) | 0;
     $cmp380 = ($call379 | 0) < 0;
     if ($cmp380 | $call379 >>> 0 > ($p$4269 - $i$0243 | 0) >>> 0) {
      label = 83;
      break;
     }
     $add390 = $call379 + $i$0243 | 0;
     if ($p$4269 >>> 0 > $add390 >>> 0) {
      $i$0243 = $add390;
      $ws$0244 = $ws$0244 + 4 | 0;
     } else {
      $i$0217 = $add390;
      break;
     }
    }
    if ((label | 0) == 83) {
     label = 0;
     if ($cmp380) {
      $retval$0 = -1;
      break L1;
     } else $i$0217 = $i$0243;
    }
    _pad_667($f, 32, $w$1, $i$0217, $spec$select);
    if (!$i$0217) {
     $i$0217271 = 0;
     label = 89;
    } else {
     $i$1248 = 0;
     $ws$1249 = HEAP32[$arg >> 2] | 0;
     while (1) {
      $164 = HEAP32[$ws$1249 >> 2] | 0;
      if (!$164) {
       $i$0217271 = $i$0217;
       label = 89;
       break L102;
      }
      $call406 = _wctomb($mb, $164) | 0;
      $i$1248 = $call406 + $i$1248 | 0;
      if (($i$1248 | 0) > ($i$0217 | 0)) {
       $i$0217271 = $i$0217;
       label = 89;
       break L102;
      }
      _out($f, $mb, $call406);
      if ($i$1248 >>> 0 >= $i$0217 >>> 0) {
       $i$0217271 = $i$0217;
       label = 89;
       break;
      } else $ws$1249 = $ws$1249 + 4 | 0;
     }
    }
   } while (0);
   if ((label | 0) == 73) {
    label = 0;
    $138 = $arg;
    $146 = (HEAP32[$138 >> 2] | 0) != 0 | (HEAP32[$138 + 4 >> 2] | 0) != 0;
    $or$cond = ($p$2 | 0) != 0 | $146;
    $add323 = $sub$ptr$lhs$cast318 - $a$0 + (($146 ^ 1) & 1) | 0;
    $a$1 = $or$cond ? $a$0 : $add$ptr206;
    $fl$6 = ($p$2 | 0) > -1 ? $fl$4 & -65537 : $fl$4;
    $p$5 = $or$cond ? (($p$2 | 0) > ($add323 | 0) ? $p$2 : $add323) : 0;
    $pl$2 = $pl$1;
    $prefix$2 = $prefix$1;
    $sub$ptr$lhs$cast426$pre$phiZZZZ2D = $sub$ptr$lhs$cast318;
   } else if ((label | 0) == 89) {
    label = 0;
    _pad_667($f, 32, $w$1, $i$0217271, $spec$select ^ 8192);
    $l$0$ph$be = ($w$1 | 0) > ($i$0217271 | 0) ? $w$1 : $i$0217271;
    break;
   }
   $sub$ptr$sub428 = $sub$ptr$lhs$cast426$pre$phiZZZZ2D - $a$1 | 0;
   $spec$select195 = ($p$5 | 0) < ($sub$ptr$sub428 | 0) ? $sub$ptr$sub428 : $p$5;
   $add436 = $spec$select195 + $pl$2 | 0;
   $w$2 = ($w$1 | 0) < ($add436 | 0) ? $add436 : $w$1;
   _pad_667($f, 32, $w$2, $add436, $fl$6);
   _out($f, $prefix$2, $pl$2);
   _pad_667($f, 48, $w$2, $add436, $fl$6 ^ 65536);
   _pad_667($f, 48, $spec$select195, $sub$ptr$sub428, 0);
   _out($f, $a$1, $sub$ptr$sub428);
   _pad_667($f, 32, $w$2, $add436, $fl$6 ^ 8192);
   $l$0$ph$be = $w$2;
  } while (0);
  $cnt$0$ph = $cnt$1;
  $l$0$ph = $l$0$ph$be;
  $l10n$0$ph = $l10n$3;
 }
 L123 : do if ((label | 0) == 92) if (!$f) if (!$l10n$0$ph) $retval$0 = 0; else {
  $i$2224 = 1;
  while (1) {
   $166 = HEAP32[$nl_type + ($i$2224 << 2) >> 2] | 0;
   if (!$166) break;
   _pop_arg($nl_arg + ($i$2224 << 3) | 0, $166, $ap, $pop_arg_long_double);
   $inc = $i$2224 + 1 | 0;
   if ($inc >>> 0 < 10) $i$2224 = $inc; else {
    $retval$0 = 1;
    break L123;
   }
  }
  $i$3221 = $i$2224;
  while (1) {
   if (HEAP32[$nl_type + ($i$3221 << 2) >> 2] | 0) {
    $retval$0 = -1;
    break L123;
   }
   $i$3221 = $i$3221 + 1 | 0;
   if ($i$3221 >>> 0 >= 10) {
    $retval$0 = 1;
    break;
   }
  }
 } else $retval$0 = $cnt$1; while (0);
 STACKTOP = sp;
 return $retval$0 | 0;
}

function _stbir__decode_scanline($stbir_info, $n) {
 $stbir_info = $stbir_info | 0;
 $n = $n | 0;
 var $203 = f0, $232 = f0, $252 = f0, $260 = f0, $81 = f0, $alpha = 0, $alpha_channel = 0, $arrayidx298 = 0, $c = 0, $call112 = 0, $call122 = f0, $call150 = 0, $call177 = 0, $call188 = f0, $call217 = 0, $call241 = 0, $call249 = f0, $call30 = 0, $call53 = 0, $call86 = 0, $call9 = 0, $channels = 0, $colorspace = 0, $conv160 = f0, $conv202 = f0, $decode = 0, $decode_buffer = 0, $decode_pixel_index = 0, $decode_pixel_index109 = 0, $decode_pixel_index147 = 0, $decode_pixel_index174 = 0, $decode_pixel_index214 = 0, $decode_pixel_index238 = 0, $decode_pixel_index277 = 0, $decode_pixel_index50 = 0, $decode_pixel_index83 = 0, $div = f0, $div135 = f0, $div71 = f0, $div95 = f0, $edge_horizontal = 0, $edge_vertical = 0, $in_buffer_row_offset = 0, $input_data = 0, $input_pixel_index = 0, $input_pixel_index111 = 0, $input_pixel_index149 = 0, $input_pixel_index176 = 0, $input_pixel_index216 = 0, $input_pixel_index240 = 0, $input_pixel_index52 = 0, $input_pixel_index85 = 0, $input_stride_bytes = 0, $input_w = 0, $max_x = 0, $mul21 = 0, $mul320 = 0, $mul337 = 0, $n$addr = 0, $stbir_info$addr = 0, $type = 0, $x = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(144);
 $stbir_info$addr = sp + 136 | 0;
 $n$addr = sp + 132 | 0;
 $c = sp + 128 | 0;
 $channels = sp + 124 | 0;
 $alpha_channel = sp + 120 | 0;
 $type = sp + 116 | 0;
 $colorspace = sp + 112 | 0;
 $input_w = sp + 108 | 0;
 $input_stride_bytes = sp + 104 | 0;
 $decode_buffer = sp + 100 | 0;
 $edge_horizontal = sp + 96 | 0;
 $edge_vertical = sp + 92 | 0;
 $in_buffer_row_offset = sp + 88 | 0;
 $input_data = sp + 84 | 0;
 $max_x = sp + 80 | 0;
 $decode = sp + 76 | 0;
 $x = sp + 72 | 0;
 $decode_pixel_index = sp + 68 | 0;
 $input_pixel_index = sp + 64 | 0;
 $decode_pixel_index50 = sp + 60 | 0;
 $input_pixel_index52 = sp + 56 | 0;
 $decode_pixel_index83 = sp + 52 | 0;
 $input_pixel_index85 = sp + 48 | 0;
 $decode_pixel_index109 = sp + 44 | 0;
 $input_pixel_index111 = sp + 40 | 0;
 $decode_pixel_index147 = sp + 36 | 0;
 $input_pixel_index149 = sp + 32 | 0;
 $decode_pixel_index174 = sp + 28 | 0;
 $input_pixel_index176 = sp + 24 | 0;
 $decode_pixel_index214 = sp + 20 | 0;
 $input_pixel_index216 = sp + 16 | 0;
 $decode_pixel_index238 = sp + 12 | 0;
 $input_pixel_index240 = sp + 8 | 0;
 $decode_pixel_index277 = sp + 4 | 0;
 $alpha = sp;
 HEAP32[$stbir_info$addr >> 2] = $stbir_info;
 HEAP32[$n$addr >> 2] = $n;
 HEAP32[$channels >> 2] = HEAP32[(HEAP32[$stbir_info$addr >> 2] | 0) + 64 >> 2];
 HEAP32[$alpha_channel >> 2] = HEAP32[(HEAP32[$stbir_info$addr >> 2] | 0) + 68 >> 2];
 HEAP32[$type >> 2] = HEAP32[(HEAP32[$stbir_info$addr >> 2] | 0) + 76 >> 2];
 HEAP32[$colorspace >> 2] = HEAP32[(HEAP32[$stbir_info$addr >> 2] | 0) + 96 >> 2];
 HEAP32[$input_w >> 2] = HEAP32[(HEAP32[$stbir_info$addr >> 2] | 0) + 4 >> 2];
 HEAP32[$input_stride_bytes >> 2] = HEAP32[(HEAP32[$stbir_info$addr >> 2] | 0) + 12 >> 2];
 HEAP32[$decode_buffer >> 2] = _stbir__get_decode_buffer(HEAP32[$stbir_info$addr >> 2] | 0) | 0;
 HEAP32[$edge_horizontal >> 2] = HEAP32[(HEAP32[$stbir_info$addr >> 2] | 0) + 88 >> 2];
 HEAP32[$edge_vertical >> 2] = HEAP32[(HEAP32[$stbir_info$addr >> 2] | 0) + 92 >> 2];
 $call9 = _stbir__edge_wrap(HEAP32[$edge_vertical >> 2] | 0, HEAP32[$n$addr >> 2] | 0, HEAP32[(HEAP32[$stbir_info$addr >> 2] | 0) + 8 >> 2] | 0) | 0;
 HEAP32[$in_buffer_row_offset >> 2] = Math_imul($call9, HEAP32[$input_stride_bytes >> 2] | 0) | 0;
 HEAP32[$input_data >> 2] = (HEAP32[HEAP32[$stbir_info$addr >> 2] >> 2] | 0) + (HEAP32[$in_buffer_row_offset >> 2] | 0);
 HEAP32[$max_x >> 2] = (HEAP32[$input_w >> 2] | 0) + (HEAP32[(HEAP32[$stbir_info$addr >> 2] | 0) + 144 >> 2] | 0);
 HEAP32[$decode >> 2] = (HEAP32[$type >> 2] << 1) + (HEAP32[$colorspace >> 2] | 0);
 HEAP32[$x >> 2] = 0 - (HEAP32[(HEAP32[$stbir_info$addr >> 2] | 0) + 144 >> 2] | 0);
 do if ((HEAP32[$edge_vertical >> 2] | 0) == 4) {
  if ((HEAP32[$n$addr >> 2] | 0) >= 0) if ((HEAP32[$n$addr >> 2] | 0) < (HEAP32[(HEAP32[$stbir_info$addr >> 2] | 0) + 8 >> 2] | 0)) break;
  while (1) {
   if ((HEAP32[$x >> 2] | 0) >= (HEAP32[$max_x >> 2] | 0)) break;
   HEAP32[$c >> 2] = 0;
   while (1) {
    if ((HEAP32[$c >> 2] | 0) >= (HEAP32[$channels >> 2] | 0)) break;
    $mul21 = Math_imul(HEAP32[$x >> 2] | 0, HEAP32[$channels >> 2] | 0) | 0;
    HEAPF32[(HEAP32[$decode_buffer >> 2] | 0) + ($mul21 + (HEAP32[$c >> 2] | 0) << 2) >> 2] = Math_fround(0.0);
    HEAP32[$c >> 2] = (HEAP32[$c >> 2] | 0) + 1;
   }
   HEAP32[$x >> 2] = (HEAP32[$x >> 2] | 0) + 1;
  }
  STACKTOP = sp;
  return;
 } while (0);
 L15 : do switch (HEAP32[$decode >> 2] | 0) {
 case 0:
  {
   while (1) {
    if ((HEAP32[$x >> 2] | 0) >= (HEAP32[$max_x >> 2] | 0)) break L15;
    HEAP32[$decode_pixel_index >> 2] = Math_imul(HEAP32[$x >> 2] | 0, HEAP32[$channels >> 2] | 0) | 0;
    $call30 = _stbir__edge_wrap(HEAP32[$edge_horizontal >> 2] | 0, HEAP32[$x >> 2] | 0, HEAP32[$input_w >> 2] | 0) | 0;
    HEAP32[$input_pixel_index >> 2] = Math_imul($call30, HEAP32[$channels >> 2] | 0) | 0;
    HEAP32[$c >> 2] = 0;
    while (1) {
     if ((HEAP32[$c >> 2] | 0) >= (HEAP32[$channels >> 2] | 0)) break;
     $div = Math_fround(Math_fround(HEAPU8[(HEAP32[$input_data >> 2] | 0) + ((HEAP32[$input_pixel_index >> 2] | 0) + (HEAP32[$c >> 2] | 0)) >> 0] | 0) / Math_fround(255.0));
     HEAPF32[(HEAP32[$decode_buffer >> 2] | 0) + ((HEAP32[$decode_pixel_index >> 2] | 0) + (HEAP32[$c >> 2] | 0) << 2) >> 2] = $div;
     HEAP32[$c >> 2] = (HEAP32[$c >> 2] | 0) + 1;
    }
    HEAP32[$x >> 2] = (HEAP32[$x >> 2] | 0) + 1;
   }
   break;
  }
 case 1:
  {
   while (1) {
    if ((HEAP32[$x >> 2] | 0) >= (HEAP32[$max_x >> 2] | 0)) break L15;
    HEAP32[$decode_pixel_index50 >> 2] = Math_imul(HEAP32[$x >> 2] | 0, HEAP32[$channels >> 2] | 0) | 0;
    $call53 = _stbir__edge_wrap(HEAP32[$edge_horizontal >> 2] | 0, HEAP32[$x >> 2] | 0, HEAP32[$input_w >> 2] | 0) | 0;
    HEAP32[$input_pixel_index52 >> 2] = Math_imul($call53, HEAP32[$channels >> 2] | 0) | 0;
    HEAP32[$c >> 2] = 0;
    while (1) {
     if ((HEAP32[$c >> 2] | 0) >= (HEAP32[$channels >> 2] | 0)) break;
     $81 = Math_fround(HEAPF32[6352 + ((HEAPU8[(HEAP32[$input_data >> 2] | 0) + ((HEAP32[$input_pixel_index52 >> 2] | 0) + (HEAP32[$c >> 2] | 0)) >> 0] | 0) << 2) >> 2]);
     HEAPF32[(HEAP32[$decode_buffer >> 2] | 0) + ((HEAP32[$decode_pixel_index50 >> 2] | 0) + (HEAP32[$c >> 2] | 0) << 2) >> 2] = $81;
     HEAP32[$c >> 2] = (HEAP32[$c >> 2] | 0) + 1;
    }
    if (!(HEAP32[(HEAP32[$stbir_info$addr >> 2] | 0) + 72 >> 2] & 2)) {
     $div71 = Math_fround(Math_fround(HEAPU8[(HEAP32[$input_data >> 2] | 0) + ((HEAP32[$input_pixel_index52 >> 2] | 0) + (HEAP32[$alpha_channel >> 2] | 0)) >> 0] | 0) / Math_fround(255.0));
     HEAPF32[(HEAP32[$decode_buffer >> 2] | 0) + ((HEAP32[$decode_pixel_index50 >> 2] | 0) + (HEAP32[$alpha_channel >> 2] | 0) << 2) >> 2] = $div71;
    }
    HEAP32[$x >> 2] = (HEAP32[$x >> 2] | 0) + 1;
   }
   break;
  }
 case 2:
  {
   while (1) {
    if ((HEAP32[$x >> 2] | 0) >= (HEAP32[$max_x >> 2] | 0)) break L15;
    HEAP32[$decode_pixel_index83 >> 2] = Math_imul(HEAP32[$x >> 2] | 0, HEAP32[$channels >> 2] | 0) | 0;
    $call86 = _stbir__edge_wrap(HEAP32[$edge_horizontal >> 2] | 0, HEAP32[$x >> 2] | 0, HEAP32[$input_w >> 2] | 0) | 0;
    HEAP32[$input_pixel_index85 >> 2] = Math_imul($call86, HEAP32[$channels >> 2] | 0) | 0;
    HEAP32[$c >> 2] = 0;
    while (1) {
     if ((HEAP32[$c >> 2] | 0) >= (HEAP32[$channels >> 2] | 0)) break;
     $div95 = Math_fround(Math_fround(HEAPU16[(HEAP32[$input_data >> 2] | 0) + ((HEAP32[$input_pixel_index85 >> 2] | 0) + (HEAP32[$c >> 2] | 0) << 1) >> 1] | 0) / Math_fround(65535.0));
     HEAPF32[(HEAP32[$decode_buffer >> 2] | 0) + ((HEAP32[$decode_pixel_index83 >> 2] | 0) + (HEAP32[$c >> 2] | 0) << 2) >> 2] = $div95;
     HEAP32[$c >> 2] = (HEAP32[$c >> 2] | 0) + 1;
    }
    HEAP32[$x >> 2] = (HEAP32[$x >> 2] | 0) + 1;
   }
   break;
  }
 case 3:
  {
   while (1) {
    if ((HEAP32[$x >> 2] | 0) >= (HEAP32[$max_x >> 2] | 0)) break L15;
    HEAP32[$decode_pixel_index109 >> 2] = Math_imul(HEAP32[$x >> 2] | 0, HEAP32[$channels >> 2] | 0) | 0;
    $call112 = _stbir__edge_wrap(HEAP32[$edge_horizontal >> 2] | 0, HEAP32[$x >> 2] | 0, HEAP32[$input_w >> 2] | 0) | 0;
    HEAP32[$input_pixel_index111 >> 2] = Math_imul($call112, HEAP32[$channels >> 2] | 0) | 0;
    HEAP32[$c >> 2] = 0;
    while (1) {
     if ((HEAP32[$c >> 2] | 0) >= (HEAP32[$channels >> 2] | 0)) break;
     $call122 = Math_fround(_stbir__srgb_to_linear(Math_fround(Math_fround(HEAPU16[(HEAP32[$input_data >> 2] | 0) + ((HEAP32[$input_pixel_index111 >> 2] | 0) + (HEAP32[$c >> 2] | 0) << 1) >> 1] | 0) / Math_fround(65535.0))));
     HEAPF32[(HEAP32[$decode_buffer >> 2] | 0) + ((HEAP32[$decode_pixel_index109 >> 2] | 0) + (HEAP32[$c >> 2] | 0) << 2) >> 2] = $call122;
     HEAP32[$c >> 2] = (HEAP32[$c >> 2] | 0) + 1;
    }
    if (!(HEAP32[(HEAP32[$stbir_info$addr >> 2] | 0) + 72 >> 2] & 2)) {
     $div135 = Math_fround(Math_fround(HEAPU16[(HEAP32[$input_data >> 2] | 0) + ((HEAP32[$input_pixel_index111 >> 2] | 0) + (HEAP32[$alpha_channel >> 2] | 0) << 1) >> 1] | 0) / Math_fround(65535.0));
     HEAPF32[(HEAP32[$decode_buffer >> 2] | 0) + ((HEAP32[$decode_pixel_index109 >> 2] | 0) + (HEAP32[$alpha_channel >> 2] | 0) << 2) >> 2] = $div135;
    }
    HEAP32[$x >> 2] = (HEAP32[$x >> 2] | 0) + 1;
   }
   break;
  }
 case 4:
  {
   while (1) {
    if ((HEAP32[$x >> 2] | 0) >= (HEAP32[$max_x >> 2] | 0)) break L15;
    HEAP32[$decode_pixel_index147 >> 2] = Math_imul(HEAP32[$x >> 2] | 0, HEAP32[$channels >> 2] | 0) | 0;
    $call150 = _stbir__edge_wrap(HEAP32[$edge_horizontal >> 2] | 0, HEAP32[$x >> 2] | 0, HEAP32[$input_w >> 2] | 0) | 0;
    HEAP32[$input_pixel_index149 >> 2] = Math_imul($call150, HEAP32[$channels >> 2] | 0) | 0;
    HEAP32[$c >> 2] = 0;
    while (1) {
     if ((HEAP32[$c >> 2] | 0) >= (HEAP32[$channels >> 2] | 0)) break;
     $conv160 = Math_fround(+((HEAP32[(HEAP32[$input_data >> 2] | 0) + ((HEAP32[$input_pixel_index149 >> 2] | 0) + (HEAP32[$c >> 2] | 0) << 2) >> 2] | 0) >>> 0) / 4294967295.0);
     HEAPF32[(HEAP32[$decode_buffer >> 2] | 0) + ((HEAP32[$decode_pixel_index147 >> 2] | 0) + (HEAP32[$c >> 2] | 0) << 2) >> 2] = $conv160;
     HEAP32[$c >> 2] = (HEAP32[$c >> 2] | 0) + 1;
    }
    HEAP32[$x >> 2] = (HEAP32[$x >> 2] | 0) + 1;
   }
   break;
  }
 case 5:
  {
   while (1) {
    if ((HEAP32[$x >> 2] | 0) >= (HEAP32[$max_x >> 2] | 0)) break L15;
    HEAP32[$decode_pixel_index174 >> 2] = Math_imul(HEAP32[$x >> 2] | 0, HEAP32[$channels >> 2] | 0) | 0;
    $call177 = _stbir__edge_wrap(HEAP32[$edge_horizontal >> 2] | 0, HEAP32[$x >> 2] | 0, HEAP32[$input_w >> 2] | 0) | 0;
    HEAP32[$input_pixel_index176 >> 2] = Math_imul($call177, HEAP32[$channels >> 2] | 0) | 0;
    HEAP32[$c >> 2] = 0;
    while (1) {
     if ((HEAP32[$c >> 2] | 0) >= (HEAP32[$channels >> 2] | 0)) break;
     $call188 = Math_fround(_stbir__srgb_to_linear(Math_fround(+((HEAP32[(HEAP32[$input_data >> 2] | 0) + ((HEAP32[$input_pixel_index176 >> 2] | 0) + (HEAP32[$c >> 2] | 0) << 2) >> 2] | 0) >>> 0) / 4294967295.0)));
     HEAPF32[(HEAP32[$decode_buffer >> 2] | 0) + ((HEAP32[$decode_pixel_index174 >> 2] | 0) + (HEAP32[$c >> 2] | 0) << 2) >> 2] = $call188;
     HEAP32[$c >> 2] = (HEAP32[$c >> 2] | 0) + 1;
    }
    if (!(HEAP32[(HEAP32[$stbir_info$addr >> 2] | 0) + 72 >> 2] & 2)) {
     $conv202 = Math_fround(+((HEAP32[(HEAP32[$input_data >> 2] | 0) + ((HEAP32[$input_pixel_index176 >> 2] | 0) + (HEAP32[$alpha_channel >> 2] | 0) << 2) >> 2] | 0) >>> 0) / 4294967295.0);
     HEAPF32[(HEAP32[$decode_buffer >> 2] | 0) + ((HEAP32[$decode_pixel_index174 >> 2] | 0) + (HEAP32[$alpha_channel >> 2] | 0) << 2) >> 2] = $conv202;
    }
    HEAP32[$x >> 2] = (HEAP32[$x >> 2] | 0) + 1;
   }
   break;
  }
 case 6:
  {
   while (1) {
    if ((HEAP32[$x >> 2] | 0) >= (HEAP32[$max_x >> 2] | 0)) break L15;
    HEAP32[$decode_pixel_index214 >> 2] = Math_imul(HEAP32[$x >> 2] | 0, HEAP32[$channels >> 2] | 0) | 0;
    $call217 = _stbir__edge_wrap(HEAP32[$edge_horizontal >> 2] | 0, HEAP32[$x >> 2] | 0, HEAP32[$input_w >> 2] | 0) | 0;
    HEAP32[$input_pixel_index216 >> 2] = Math_imul($call217, HEAP32[$channels >> 2] | 0) | 0;
    HEAP32[$c >> 2] = 0;
    while (1) {
     if ((HEAP32[$c >> 2] | 0) >= (HEAP32[$channels >> 2] | 0)) break;
     $203 = Math_fround(HEAPF32[(HEAP32[$input_data >> 2] | 0) + ((HEAP32[$input_pixel_index216 >> 2] | 0) + (HEAP32[$c >> 2] | 0) << 2) >> 2]);
     HEAPF32[(HEAP32[$decode_buffer >> 2] | 0) + ((HEAP32[$decode_pixel_index214 >> 2] | 0) + (HEAP32[$c >> 2] | 0) << 2) >> 2] = $203;
     HEAP32[$c >> 2] = (HEAP32[$c >> 2] | 0) + 1;
    }
    HEAP32[$x >> 2] = (HEAP32[$x >> 2] | 0) + 1;
   }
   break;
  }
 case 7:
  {
   while (1) {
    if ((HEAP32[$x >> 2] | 0) >= (HEAP32[$max_x >> 2] | 0)) break L15;
    HEAP32[$decode_pixel_index238 >> 2] = Math_imul(HEAP32[$x >> 2] | 0, HEAP32[$channels >> 2] | 0) | 0;
    $call241 = _stbir__edge_wrap(HEAP32[$edge_horizontal >> 2] | 0, HEAP32[$x >> 2] | 0, HEAP32[$input_w >> 2] | 0) | 0;
    HEAP32[$input_pixel_index240 >> 2] = Math_imul($call241, HEAP32[$channels >> 2] | 0) | 0;
    HEAP32[$c >> 2] = 0;
    while (1) {
     if ((HEAP32[$c >> 2] | 0) >= (HEAP32[$channels >> 2] | 0)) break;
     $call249 = Math_fround(_stbir__srgb_to_linear(Math_fround(HEAPF32[(HEAP32[$input_data >> 2] | 0) + ((HEAP32[$input_pixel_index240 >> 2] | 0) + (HEAP32[$c >> 2] | 0) << 2) >> 2])));
     HEAPF32[(HEAP32[$decode_buffer >> 2] | 0) + ((HEAP32[$decode_pixel_index238 >> 2] | 0) + (HEAP32[$c >> 2] | 0) << 2) >> 2] = $call249;
     HEAP32[$c >> 2] = (HEAP32[$c >> 2] | 0) + 1;
    }
    if (!(HEAP32[(HEAP32[$stbir_info$addr >> 2] | 0) + 72 >> 2] & 2)) {
     $232 = Math_fround(HEAPF32[(HEAP32[$input_data >> 2] | 0) + ((HEAP32[$input_pixel_index240 >> 2] | 0) + (HEAP32[$alpha_channel >> 2] | 0) << 2) >> 2]);
     HEAPF32[(HEAP32[$decode_buffer >> 2] | 0) + ((HEAP32[$decode_pixel_index238 >> 2] | 0) + (HEAP32[$alpha_channel >> 2] | 0) << 2) >> 2] = $232;
    }
    HEAP32[$x >> 2] = (HEAP32[$x >> 2] | 0) + 1;
   }
   break;
  }
 default:
  ___assert_fail(35569, 34244, 1368, 35618);
 } while (0);
 L94 : do if (!(HEAP32[(HEAP32[$stbir_info$addr >> 2] | 0) + 72 >> 2] & 1)) {
  HEAP32[$x >> 2] = 0 - (HEAP32[(HEAP32[$stbir_info$addr >> 2] | 0) + 144 >> 2] | 0);
  while (1) {
   if ((HEAP32[$x >> 2] | 0) >= (HEAP32[$max_x >> 2] | 0)) break L94;
   HEAP32[$decode_pixel_index277 >> 2] = Math_imul(HEAP32[$x >> 2] | 0, HEAP32[$channels >> 2] | 0) | 0;
   HEAPF32[$alpha >> 2] = Math_fround(HEAPF32[(HEAP32[$decode_buffer >> 2] | 0) + ((HEAP32[$decode_pixel_index277 >> 2] | 0) + (HEAP32[$alpha_channel >> 2] | 0) << 2) >> 2]);
   if ((HEAP32[(HEAP32[$stbir_info$addr >> 2] | 0) + 76 >> 2] | 0) != 3) {
    HEAPF32[$alpha >> 2] = Math_fround(Math_fround(HEAPF32[$alpha >> 2]) + Math_fround(8.27180613e-25));
    $252 = Math_fround(HEAPF32[$alpha >> 2]);
    HEAPF32[(HEAP32[$decode_buffer >> 2] | 0) + ((HEAP32[$decode_pixel_index277 >> 2] | 0) + (HEAP32[$alpha_channel >> 2] | 0) << 2) >> 2] = $252;
   }
   HEAP32[$c >> 2] = 0;
   while (1) {
    if ((HEAP32[$c >> 2] | 0) >= (HEAP32[$channels >> 2] | 0)) break;
    if ((HEAP32[$c >> 2] | 0) != (HEAP32[$alpha_channel >> 2] | 0)) {
     $260 = Math_fround(HEAPF32[$alpha >> 2]);
     $arrayidx298 = (HEAP32[$decode_buffer >> 2] | 0) + ((HEAP32[$decode_pixel_index277 >> 2] | 0) + (HEAP32[$c >> 2] | 0) << 2) | 0;
     HEAPF32[$arrayidx298 >> 2] = Math_fround(Math_fround(HEAPF32[$arrayidx298 >> 2]) * $260);
    }
    HEAP32[$c >> 2] = (HEAP32[$c >> 2] | 0) + 1;
   }
   HEAP32[$x >> 2] = (HEAP32[$x >> 2] | 0) + 1;
  }
 } while (0);
 if ((HEAP32[$edge_horizontal >> 2] | 0) != 4) {
  STACKTOP = sp;
  return;
 }
 HEAP32[$x >> 2] = 0 - (HEAP32[(HEAP32[$stbir_info$addr >> 2] | 0) + 144 >> 2] | 0);
 while (1) {
  if ((HEAP32[$x >> 2] | 0) >= 0) break;
  HEAP32[$c >> 2] = 0;
  while (1) {
   if ((HEAP32[$c >> 2] | 0) >= (HEAP32[$channels >> 2] | 0)) break;
   $mul320 = Math_imul(HEAP32[$x >> 2] | 0, HEAP32[$channels >> 2] | 0) | 0;
   HEAPF32[(HEAP32[$decode_buffer >> 2] | 0) + ($mul320 + (HEAP32[$c >> 2] | 0) << 2) >> 2] = Math_fround(0.0);
   HEAP32[$c >> 2] = (HEAP32[$c >> 2] | 0) + 1;
  }
  HEAP32[$x >> 2] = (HEAP32[$x >> 2] | 0) + 1;
 }
 HEAP32[$x >> 2] = HEAP32[$input_w >> 2];
 while (1) {
  if ((HEAP32[$x >> 2] | 0) >= (HEAP32[$max_x >> 2] | 0)) break;
  HEAP32[$c >> 2] = 0;
  while (1) {
   if ((HEAP32[$c >> 2] | 0) >= (HEAP32[$channels >> 2] | 0)) break;
   $mul337 = Math_imul(HEAP32[$x >> 2] | 0, HEAP32[$channels >> 2] | 0) | 0;
   HEAPF32[(HEAP32[$decode_buffer >> 2] | 0) + ($mul337 + (HEAP32[$c >> 2] | 0) << 2) >> 2] = Math_fround(0.0);
   HEAP32[$c >> 2] = (HEAP32[$c >> 2] | 0) + 1;
  }
  HEAP32[$x >> 2] = (HEAP32[$x >> 2] | 0) + 1;
 }
 STACKTOP = sp;
 return;
}

function _stbi_zlib_compress($data, $data_len, $out_len, $quality) {
 $data = $data | 0;
 $data_len = $data_len | 0;
 $out_len = $out_len | 0;
 $quality = $quality | 0;
 var $102 = 0, $138 = 0, $15 = 0, $17 = 0, $172 = 0, $230 = 0, $260 = 0, $262 = 0, $269 = 0, $271 = 0, $278 = 0, $280 = 0, $287 = 0, $289 = 0, $298 = 0, $7 = 0, $9 = 0, $98 = 0, $add$ptr147 = 0, $add$ptr99 = 0, $add168 = 0, $add180 = 0, $add193 = 0, $arrayidx10 = 0, $arrayidx103 = 0, $arrayidx26 = 0, $arrayidx384 = 0, $arrayidx405 = 0, $arrayidx427 = 0, $arrayidx448 = 0, $best = 0, $bestloc = 0, $bitbuf = 0, $bitcount = 0, $blocklen = 0, $call170 = 0, $call183 = 0, $call196 = 0, $call205 = 0, $call240 = 0, $call267 = 0, $call277 = 0, $call298 = 0, $call308 = 0, $call318 = 0, $cond119 = 0, $cond47 = 0, $conv265 = 0, $conv296 = 0, $conv382 = 0, $conv403 = 0, $conv425 = 0, $conv446 = 0, $d = 0, $d146 = 0, $data$addr = 0, $data_len$addr = 0, $e = 0, $h = 0, $hash_table = 0, $hlist = 0, $i = 0, $j = 0, $n = 0, $out = 0, $out_len$addr = 0, $quality$addr = 0, $retval = 0, $s1 = 0, $s2 = 0, label = 0, sp = 0, CSE$0 = 0, CSE$1 = 0, CSE$2 = 0, CSE$3 = 0, CSE$4 = 0, CSE$5 = 0, CSE$6 = 0, CSE$7 = 0, CSE$8 = 0, CSE$9 = 0, CSE$10 = 0, CSE$11 = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(96);
 $retval = sp + 84 | 0;
 $data$addr = sp + 80 | 0;
 $data_len$addr = sp + 76 | 0;
 $out_len$addr = sp + 72 | 0;
 $quality$addr = sp + 68 | 0;
 $bitbuf = sp + 64 | 0;
 $i = sp + 60 | 0;
 $j = sp + 56 | 0;
 $bitcount = sp + 52 | 0;
 $out = sp + 48 | 0;
 $hash_table = sp + 44 | 0;
 $h = sp + 40 | 0;
 $best = sp + 36 | 0;
 $bestloc = sp + 32 | 0;
 $hlist = sp + 28 | 0;
 $n = sp + 24 | 0;
 $d = sp + 20 | 0;
 $e = sp + 16 | 0;
 $d146 = sp + 12 | 0;
 $s1 = sp + 8 | 0;
 $s2 = sp + 4 | 0;
 $blocklen = sp;
 HEAP32[$data$addr >> 2] = $data;
 HEAP32[$data_len$addr >> 2] = $data_len;
 HEAP32[$out_len$addr >> 2] = $out_len;
 HEAP32[$quality$addr >> 2] = $quality;
 HEAP32[$bitbuf >> 2] = 0;
 HEAP32[$bitcount >> 2] = 0;
 HEAP32[$out >> 2] = 0;
 HEAP32[$hash_table >> 2] = _malloc(65536) | 0;
 if (!(HEAP32[$hash_table >> 2] | 0)) {
  HEAP32[$retval >> 2] = 0;
  $298 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $298 | 0;
 }
 if ((HEAP32[$quality$addr >> 2] | 0) < 5) HEAP32[$quality$addr >> 2] = 5;
 if (!(HEAP32[$out >> 2] | 0)) label = 7; else if (((HEAP32[(HEAP32[$out >> 2] | 0) + -8 + 4 >> 2] | 0) + 1 | 0) >= (HEAP32[(HEAP32[$out >> 2] | 0) + -8 >> 2] | 0)) label = 7;
 if ((label | 0) == 7) _stbiw__sbgrowf($out, 1, 1) | 0;
 CSE$0 = HEAP32[$out >> 2] | 0;
 $7 = CSE$0 | 0;
 $arrayidx10 = CSE$0 + -8 + 4 | 0;
 $9 = HEAP32[$arrayidx10 >> 2] | 0;
 HEAP32[$arrayidx10 >> 2] = $9 + 1;
 HEAP8[$7 + $9 >> 0] = 120;
 if (!(HEAP32[$out >> 2] | 0)) label = 10; else if (((HEAP32[(HEAP32[$out >> 2] | 0) + -8 + 4 >> 2] | 0) + 1 | 0) >= (HEAP32[(HEAP32[$out >> 2] | 0) + -8 >> 2] | 0)) label = 10;
 if ((label | 0) == 10) _stbiw__sbgrowf($out, 1, 1) | 0;
 CSE$1 = HEAP32[$out >> 2] | 0;
 $15 = CSE$1 | 0;
 $arrayidx26 = CSE$1 + -8 + 4 | 0;
 $17 = HEAP32[$arrayidx26 >> 2] | 0;
 HEAP32[$arrayidx26 >> 2] = $17 + 1;
 HEAP8[$15 + $17 >> 0] = 94;
 HEAP32[$bitbuf >> 2] = HEAP32[$bitbuf >> 2] | 1 << HEAP32[$bitcount >> 2];
 HEAP32[$bitcount >> 2] = (HEAP32[$bitcount >> 2] | 0) + 1;
 HEAP32[$out >> 2] = _stbiw__zlib_flushf(HEAP32[$out >> 2] | 0, $bitbuf, $bitcount) | 0;
 HEAP32[$bitbuf >> 2] = HEAP32[$bitbuf >> 2] | 1 << HEAP32[$bitcount >> 2];
 HEAP32[$bitcount >> 2] = (HEAP32[$bitcount >> 2] | 0) + 2;
 HEAP32[$out >> 2] = _stbiw__zlib_flushf(HEAP32[$out >> 2] | 0, $bitbuf, $bitcount) | 0;
 HEAP32[$i >> 2] = 0;
 while (1) {
  if ((HEAP32[$i >> 2] | 0) >= 16384) break;
  HEAP32[(HEAP32[$hash_table >> 2] | 0) + (HEAP32[$i >> 2] << 2) >> 2] = 0;
  HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
 }
 HEAP32[$i >> 2] = 0;
 while (1) {
  if ((HEAP32[$i >> 2] | 0) >= ((HEAP32[$data_len$addr >> 2] | 0) - 3 | 0)) break;
  HEAP32[$h >> 2] = (_stbiw__zhash((HEAP32[$data$addr >> 2] | 0) + (HEAP32[$i >> 2] | 0) | 0) | 0) & 16383;
  HEAP32[$best >> 2] = 3;
  HEAP32[$bestloc >> 2] = 0;
  HEAP32[$hlist >> 2] = HEAP32[(HEAP32[$hash_table >> 2] | 0) + (HEAP32[$h >> 2] << 2) >> 2];
  if (HEAP32[$hlist >> 2] | 0) $cond47 = HEAP32[(HEAP32[$hlist >> 2] | 0) + -8 + 4 >> 2] | 0; else $cond47 = 0;
  HEAP32[$n >> 2] = $cond47;
  HEAP32[$j >> 2] = 0;
  while (1) {
   if ((HEAP32[$j >> 2] | 0) >= (HEAP32[$n >> 2] | 0)) break;
   if (((HEAP32[(HEAP32[$hlist >> 2] | 0) + (HEAP32[$j >> 2] << 2) >> 2] | 0) - (HEAP32[$data$addr >> 2] | 0) | 0) > ((HEAP32[$i >> 2] | 0) - 32768 | 0)) {
    CSE$8 = HEAP32[$i >> 2] | 0;
    HEAP32[$d >> 2] = _stbiw__zlib_countm(HEAP32[(HEAP32[$hlist >> 2] | 0) + (HEAP32[$j >> 2] << 2) >> 2] | 0, (HEAP32[$data$addr >> 2] | 0) + CSE$8 | 0, (HEAP32[$data_len$addr >> 2] | 0) - CSE$8 | 0) | 0;
    if ((HEAP32[$d >> 2] | 0) >= (HEAP32[$best >> 2] | 0)) {
     HEAP32[$best >> 2] = HEAP32[$d >> 2];
     HEAP32[$bestloc >> 2] = HEAP32[(HEAP32[$hlist >> 2] | 0) + (HEAP32[$j >> 2] << 2) >> 2];
    }
   }
   HEAP32[$j >> 2] = (HEAP32[$j >> 2] | 0) + 1;
  }
  if (HEAP32[(HEAP32[$hash_table >> 2] | 0) + (HEAP32[$h >> 2] << 2) >> 2] | 0) if ((HEAP32[(HEAP32[(HEAP32[$hash_table >> 2] | 0) + (HEAP32[$h >> 2] << 2) >> 2] | 0) + -8 + 4 >> 2] | 0) == (HEAP32[$quality$addr >> 2] << 1 | 0)) {
   CSE$9 = HEAP32[(HEAP32[$hash_table >> 2] | 0) + (HEAP32[$h >> 2] << 2) >> 2] | 0;
   CSE$10 = HEAP32[$quality$addr >> 2] << 2 | 0;
   _memmove(CSE$9 | 0, CSE$9 + CSE$10 | 0, CSE$10 | 0) | 0;
   HEAP32[(HEAP32[(HEAP32[$hash_table >> 2] | 0) + (HEAP32[$h >> 2] << 2) >> 2] | 0) + -8 + 4 >> 2] = HEAP32[$quality$addr >> 2];
  }
  if (!(HEAP32[(HEAP32[$hash_table >> 2] | 0) + (HEAP32[$h >> 2] << 2) >> 2] | 0)) label = 29; else if (((HEAP32[(HEAP32[(HEAP32[$hash_table >> 2] | 0) + (HEAP32[$h >> 2] << 2) >> 2] | 0) + -8 + 4 >> 2] | 0) + 1 | 0) >= (HEAP32[(HEAP32[(HEAP32[$hash_table >> 2] | 0) + (HEAP32[$h >> 2] << 2) >> 2] | 0) + -8 >> 2] | 0)) label = 29;
  if ((label | 0) == 29) {
   label = 0;
   _stbiw__sbgrowf((HEAP32[$hash_table >> 2] | 0) + (HEAP32[$h >> 2] << 2) | 0, 1, 4) | 0;
  }
  $add$ptr99 = (HEAP32[$data$addr >> 2] | 0) + (HEAP32[$i >> 2] | 0) | 0;
  CSE$7 = HEAP32[(HEAP32[$hash_table >> 2] | 0) + (HEAP32[$h >> 2] << 2) >> 2] | 0;
  $98 = CSE$7 | 0;
  $arrayidx103 = CSE$7 + -8 + 4 | 0;
  $102 = HEAP32[$arrayidx103 >> 2] | 0;
  HEAP32[$arrayidx103 >> 2] = $102 + 1;
  HEAP32[$98 + ($102 << 2) >> 2] = $add$ptr99;
  L45 : do if (HEAP32[$bestloc >> 2] | 0) {
   HEAP32[$h >> 2] = (_stbiw__zhash((HEAP32[$data$addr >> 2] | 0) + (HEAP32[$i >> 2] | 0) + 1 | 0) | 0) & 16383;
   HEAP32[$hlist >> 2] = HEAP32[(HEAP32[$hash_table >> 2] | 0) + (HEAP32[$h >> 2] << 2) >> 2];
   if (HEAP32[$hlist >> 2] | 0) $cond119 = HEAP32[(HEAP32[$hlist >> 2] | 0) + -8 + 4 >> 2] | 0; else $cond119 = 0;
   HEAP32[$n >> 2] = $cond119;
   HEAP32[$j >> 2] = 0;
   while (1) {
    if ((HEAP32[$j >> 2] | 0) >= (HEAP32[$n >> 2] | 0)) break L45;
    if (((HEAP32[(HEAP32[$hlist >> 2] | 0) + (HEAP32[$j >> 2] << 2) >> 2] | 0) - (HEAP32[$data$addr >> 2] | 0) | 0) > ((HEAP32[$i >> 2] | 0) - 32767 | 0)) {
     CSE$11 = HEAP32[$i >> 2] | 0;
     HEAP32[$e >> 2] = _stbiw__zlib_countm(HEAP32[(HEAP32[$hlist >> 2] | 0) + (HEAP32[$j >> 2] << 2) >> 2] | 0, (HEAP32[$data$addr >> 2] | 0) + CSE$11 + 1 | 0, (HEAP32[$data_len$addr >> 2] | 0) - CSE$11 - 1 | 0) | 0;
     if ((HEAP32[$e >> 2] | 0) > (HEAP32[$best >> 2] | 0)) break;
    }
    HEAP32[$j >> 2] = (HEAP32[$j >> 2] | 0) + 1;
   }
   HEAP32[$bestloc >> 2] = 0;
  } while (0);
  $add$ptr147 = (HEAP32[$data$addr >> 2] | 0) + (HEAP32[$i >> 2] | 0) | 0;
  if (HEAP32[$bestloc >> 2] | 0) {
   HEAP32[$d146 >> 2] = $add$ptr147 - (HEAP32[$bestloc >> 2] | 0);
   if (!((HEAP32[$d146 >> 2] | 0) <= 32767 & (HEAP32[$best >> 2] | 0) <= 258)) {
    label = 41;
    break;
   }
   HEAP32[$j >> 2] = 0;
   while (1) {
    $138 = HEAP32[$j >> 2] | 0;
    if ((HEAP32[$best >> 2] | 0) <= ((HEAPU16[4992 + ((HEAP32[$j >> 2] | 0) + 1 << 1) >> 1] | 0) - 1 | 0)) break;
    HEAP32[$j >> 2] = $138 + 1;
   }
   $add168 = (HEAP32[$j >> 2] | 0) + 257 | 0;
   do if (($138 + 257 | 0) <= 143) {
    $call170 = _stbiw__zlib_bitrev(48 + $add168 | 0, 8) | 0;
    HEAP32[$bitbuf >> 2] = HEAP32[$bitbuf >> 2] | $call170 << HEAP32[$bitcount >> 2];
    HEAP32[$bitcount >> 2] = (HEAP32[$bitcount >> 2] | 0) + 8;
    HEAP32[$out >> 2] = _stbiw__zlib_flushf(HEAP32[$out >> 2] | 0, $bitbuf, $bitcount) | 0;
   } else {
    $add180 = (HEAP32[$j >> 2] | 0) + 257 | 0;
    if (($add168 | 0) <= 255) {
     $call183 = _stbiw__zlib_bitrev(400 + $add180 - 144 | 0, 9) | 0;
     HEAP32[$bitbuf >> 2] = HEAP32[$bitbuf >> 2] | $call183 << HEAP32[$bitcount >> 2];
     HEAP32[$bitcount >> 2] = (HEAP32[$bitcount >> 2] | 0) + 9;
     HEAP32[$out >> 2] = _stbiw__zlib_flushf(HEAP32[$out >> 2] | 0, $bitbuf, $bitcount) | 0;
     break;
    }
    $add193 = (HEAP32[$j >> 2] | 0) + 257 | 0;
    if (($add180 | 0) <= 279) {
     $call196 = _stbiw__zlib_bitrev(0 + $add193 - 256 | 0, 7) | 0;
     HEAP32[$bitbuf >> 2] = HEAP32[$bitbuf >> 2] | $call196 << HEAP32[$bitcount >> 2];
     HEAP32[$bitcount >> 2] = (HEAP32[$bitcount >> 2] | 0) + 7;
     HEAP32[$out >> 2] = _stbiw__zlib_flushf(HEAP32[$out >> 2] | 0, $bitbuf, $bitcount) | 0;
     break;
    } else {
     $call205 = _stbiw__zlib_bitrev(192 + $add193 - 280 | 0, 8) | 0;
     HEAP32[$bitbuf >> 2] = HEAP32[$bitbuf >> 2] | $call205 << HEAP32[$bitcount >> 2];
     HEAP32[$bitcount >> 2] = (HEAP32[$bitcount >> 2] | 0) + 8;
     HEAP32[$out >> 2] = _stbiw__zlib_flushf(HEAP32[$out >> 2] | 0, $bitbuf, $bitcount) | 0;
     break;
    }
   } while (0);
   if (HEAP8[5056 + (HEAP32[$j >> 2] | 0) >> 0] | 0) {
    HEAP32[$bitbuf >> 2] = HEAP32[$bitbuf >> 2] | (HEAP32[$best >> 2] | 0) - (HEAPU16[4992 + (HEAP32[$j >> 2] << 1) >> 1] | 0) << HEAP32[$bitcount >> 2];
    HEAP32[$bitcount >> 2] = (HEAP32[$bitcount >> 2] | 0) + (HEAPU8[5056 + (HEAP32[$j >> 2] | 0) >> 0] | 0);
    HEAP32[$out >> 2] = _stbiw__zlib_flushf(HEAP32[$out >> 2] | 0, $bitbuf, $bitcount) | 0;
   }
   HEAP32[$j >> 2] = 0;
   while (1) {
    $172 = HEAP32[$j >> 2] | 0;
    if ((HEAP32[$d146 >> 2] | 0) <= ((HEAPU16[5088 + ((HEAP32[$j >> 2] | 0) + 1 << 1) >> 1] | 0) - 1 | 0)) break;
    HEAP32[$j >> 2] = $172 + 1;
   }
   $call240 = _stbiw__zlib_bitrev($172, 5) | 0;
   HEAP32[$bitbuf >> 2] = HEAP32[$bitbuf >> 2] | $call240 << HEAP32[$bitcount >> 2];
   HEAP32[$bitcount >> 2] = (HEAP32[$bitcount >> 2] | 0) + 5;
   HEAP32[$out >> 2] = _stbiw__zlib_flushf(HEAP32[$out >> 2] | 0, $bitbuf, $bitcount) | 0;
   if (HEAP8[5152 + (HEAP32[$j >> 2] | 0) >> 0] | 0) {
    HEAP32[$bitbuf >> 2] = HEAP32[$bitbuf >> 2] | (HEAP32[$d146 >> 2] | 0) - (HEAPU16[5088 + (HEAP32[$j >> 2] << 1) >> 1] | 0) << HEAP32[$bitcount >> 2];
    HEAP32[$bitcount >> 2] = (HEAP32[$bitcount >> 2] | 0) + (HEAPU8[5152 + (HEAP32[$j >> 2] | 0) >> 0] | 0);
    HEAP32[$out >> 2] = _stbiw__zlib_flushf(HEAP32[$out >> 2] | 0, $bitbuf, $bitcount) | 0;
   }
   HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + (HEAP32[$best >> 2] | 0);
  } else {
   $conv265 = HEAPU8[(HEAP32[$data$addr >> 2] | 0) + (HEAP32[$i >> 2] | 0) >> 0] | 0;
   if ((HEAPU8[$add$ptr147 >> 0] | 0) <= 143) {
    $call267 = _stbiw__zlib_bitrev(48 + $conv265 | 0, 8) | 0;
    HEAP32[$bitbuf >> 2] = HEAP32[$bitbuf >> 2] | $call267 << HEAP32[$bitcount >> 2];
    HEAP32[$bitcount >> 2] = (HEAP32[$bitcount >> 2] | 0) + 8;
    HEAP32[$out >> 2] = _stbiw__zlib_flushf(HEAP32[$out >> 2] | 0, $bitbuf, $bitcount) | 0;
   } else {
    $call277 = _stbiw__zlib_bitrev(400 + $conv265 - 144 | 0, 9) | 0;
    HEAP32[$bitbuf >> 2] = HEAP32[$bitbuf >> 2] | $call277 << HEAP32[$bitcount >> 2];
    HEAP32[$bitcount >> 2] = (HEAP32[$bitcount >> 2] | 0) + 9;
    HEAP32[$out >> 2] = _stbiw__zlib_flushf(HEAP32[$out >> 2] | 0, $bitbuf, $bitcount) | 0;
   }
   HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
  }
 }
 if ((label | 0) == 41) ___assert_fail(34093, 34040, 922, 34119);
 while (1) {
  if ((HEAP32[$i >> 2] | 0) >= (HEAP32[$data_len$addr >> 2] | 0)) break;
  $conv296 = HEAPU8[(HEAP32[$data$addr >> 2] | 0) + (HEAP32[$i >> 2] | 0) >> 0] | 0;
  if ((HEAPU8[(HEAP32[$data$addr >> 2] | 0) + (HEAP32[$i >> 2] | 0) >> 0] | 0) <= 143) {
   $call298 = _stbiw__zlib_bitrev(48 + $conv296 | 0, 8) | 0;
   HEAP32[$bitbuf >> 2] = HEAP32[$bitbuf >> 2] | $call298 << HEAP32[$bitcount >> 2];
   HEAP32[$bitcount >> 2] = (HEAP32[$bitcount >> 2] | 0) + 8;
   HEAP32[$out >> 2] = _stbiw__zlib_flushf(HEAP32[$out >> 2] | 0, $bitbuf, $bitcount) | 0;
  } else {
   $call308 = _stbiw__zlib_bitrev(400 + $conv296 - 144 | 0, 9) | 0;
   HEAP32[$bitbuf >> 2] = HEAP32[$bitbuf >> 2] | $call308 << HEAP32[$bitcount >> 2];
   HEAP32[$bitcount >> 2] = (HEAP32[$bitcount >> 2] | 0) + 9;
   HEAP32[$out >> 2] = _stbiw__zlib_flushf(HEAP32[$out >> 2] | 0, $bitbuf, $bitcount) | 0;
  }
  HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
 }
 $call318 = _stbiw__zlib_bitrev(0, 7) | 0;
 HEAP32[$bitbuf >> 2] = HEAP32[$bitbuf >> 2] | $call318 << HEAP32[$bitcount >> 2];
 HEAP32[$bitcount >> 2] = (HEAP32[$bitcount >> 2] | 0) + 7;
 HEAP32[$out >> 2] = _stbiw__zlib_flushf(HEAP32[$out >> 2] | 0, $bitbuf, $bitcount) | 0;
 while (1) {
  if (!(HEAP32[$bitcount >> 2] | 0)) break;
  HEAP32[$bitbuf >> 2] = HEAP32[$bitbuf >> 2] | 0 << HEAP32[$bitcount >> 2];
  HEAP32[$bitcount >> 2] = (HEAP32[$bitcount >> 2] | 0) + 1;
  HEAP32[$out >> 2] = _stbiw__zlib_flushf(HEAP32[$out >> 2] | 0, $bitbuf, $bitcount) | 0;
 }
 HEAP32[$i >> 2] = 0;
 while (1) {
  $230 = HEAP32[$hash_table >> 2] | 0;
  if ((HEAP32[$i >> 2] | 0) >= 16384) break;
  if (HEAP32[$230 + (HEAP32[$i >> 2] << 2) >> 2] | 0) _free((HEAP32[(HEAP32[$hash_table >> 2] | 0) + (HEAP32[$i >> 2] << 2) >> 2] | 0) + -8 | 0);
  HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
 }
 _free($230);
 HEAP32[$s1 >> 2] = 1;
 HEAP32[$s2 >> 2] = 0;
 HEAP32[$blocklen >> 2] = (HEAP32[$data_len$addr >> 2] | 0) % 5552 | 0;
 HEAP32[$j >> 2] = 0;
 while (1) {
  if ((HEAP32[$j >> 2] | 0) >= (HEAP32[$data_len$addr >> 2] | 0)) break;
  HEAP32[$i >> 2] = 0;
  while (1) {
   if ((HEAP32[$i >> 2] | 0) >= (HEAP32[$blocklen >> 2] | 0)) break;
   HEAP32[$s1 >> 2] = (HEAP32[$s1 >> 2] | 0) + (HEAPU8[(HEAP32[$data$addr >> 2] | 0) + ((HEAP32[$j >> 2] | 0) + (HEAP32[$i >> 2] | 0)) >> 0] | 0);
   HEAP32[$s2 >> 2] = (HEAP32[$s2 >> 2] | 0) + (HEAP32[$s1 >> 2] | 0);
   HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
  }
  HEAP32[$s1 >> 2] = ((HEAP32[$s1 >> 2] | 0) >>> 0) % 65521 | 0;
  HEAP32[$s2 >> 2] = ((HEAP32[$s2 >> 2] | 0) >>> 0) % 65521 | 0;
  HEAP32[$j >> 2] = (HEAP32[$j >> 2] | 0) + (HEAP32[$blocklen >> 2] | 0);
  HEAP32[$blocklen >> 2] = 5552;
 }
 if (!(HEAP32[$out >> 2] | 0)) label = 87; else if (((HEAP32[(HEAP32[$out >> 2] | 0) + -8 + 4 >> 2] | 0) + 1 | 0) >= (HEAP32[(HEAP32[$out >> 2] | 0) + -8 >> 2] | 0)) label = 87;
 if ((label | 0) == 87) _stbiw__sbgrowf($out, 1, 1) | 0;
 $conv382 = (HEAP32[$s2 >> 2] | 0) >>> 8 & 255;
 CSE$2 = HEAP32[$out >> 2] | 0;
 $260 = CSE$2 | 0;
 $arrayidx384 = CSE$2 + -8 + 4 | 0;
 $262 = HEAP32[$arrayidx384 >> 2] | 0;
 HEAP32[$arrayidx384 >> 2] = $262 + 1;
 HEAP8[$260 + $262 >> 0] = $conv382;
 if (!(HEAP32[$out >> 2] | 0)) label = 90; else if (((HEAP32[(HEAP32[$out >> 2] | 0) + -8 + 4 >> 2] | 0) + 1 | 0) >= (HEAP32[(HEAP32[$out >> 2] | 0) + -8 >> 2] | 0)) label = 90;
 if ((label | 0) == 90) _stbiw__sbgrowf($out, 1, 1) | 0;
 $conv403 = HEAP32[$s2 >> 2] & 255;
 CSE$3 = HEAP32[$out >> 2] | 0;
 $269 = CSE$3 | 0;
 $arrayidx405 = CSE$3 + -8 + 4 | 0;
 $271 = HEAP32[$arrayidx405 >> 2] | 0;
 HEAP32[$arrayidx405 >> 2] = $271 + 1;
 HEAP8[$269 + $271 >> 0] = $conv403;
 if (!(HEAP32[$out >> 2] | 0)) label = 93; else if (((HEAP32[(HEAP32[$out >> 2] | 0) + -8 + 4 >> 2] | 0) + 1 | 0) >= (HEAP32[(HEAP32[$out >> 2] | 0) + -8 >> 2] | 0)) label = 93;
 if ((label | 0) == 93) _stbiw__sbgrowf($out, 1, 1) | 0;
 $conv425 = (HEAP32[$s1 >> 2] | 0) >>> 8 & 255;
 CSE$4 = HEAP32[$out >> 2] | 0;
 $278 = CSE$4 | 0;
 $arrayidx427 = CSE$4 + -8 + 4 | 0;
 $280 = HEAP32[$arrayidx427 >> 2] | 0;
 HEAP32[$arrayidx427 >> 2] = $280 + 1;
 HEAP8[$278 + $280 >> 0] = $conv425;
 if (!(HEAP32[$out >> 2] | 0)) label = 96; else if (((HEAP32[(HEAP32[$out >> 2] | 0) + -8 + 4 >> 2] | 0) + 1 | 0) >= (HEAP32[(HEAP32[$out >> 2] | 0) + -8 >> 2] | 0)) label = 96;
 if ((label | 0) == 96) _stbiw__sbgrowf($out, 1, 1) | 0;
 $conv446 = HEAP32[$s1 >> 2] & 255;
 CSE$5 = HEAP32[$out >> 2] | 0;
 $287 = CSE$5 | 0;
 $arrayidx448 = CSE$5 + -8 + 4 | 0;
 $289 = HEAP32[$arrayidx448 >> 2] | 0;
 HEAP32[$arrayidx448 >> 2] = $289 + 1;
 HEAP8[$287 + $289 >> 0] = $conv446;
 HEAP32[HEAP32[$out_len$addr >> 2] >> 2] = HEAP32[(HEAP32[$out >> 2] | 0) + -8 + 4 >> 2];
 CSE$6 = HEAP32[$out >> 2] | 0;
 _memmove(CSE$6 + -8 | 0, CSE$6 | 0, HEAP32[HEAP32[$out_len$addr >> 2] >> 2] | 0) | 0;
 HEAP32[$retval >> 2] = (HEAP32[$out >> 2] | 0) + -8;
 $298 = HEAP32[$retval >> 2] | 0;
 STACKTOP = sp;
 return $298 | 0;
}

function _ImageFormat($image, $newFormat) {
 $image = $image | 0;
 $newFormat = $newFormat | 0;
 var $$byval_copy = 0, $13 = 0, $271 = f0, $277 = f0, $283 = f0, $301 = f0, $307 = f0, $313 = f0, $319 = f0, $a = 0, $a230 = 0, $add = f0, $add349 = f0, $add353 = f0, $add57 = f0, $b = 0, $b171 = 0, $b229 = 0, $call126 = 0, $call167 = 0, $call19 = 0, $call225 = 0, $call285 = 0, $call333 = 0, $call365 = 0, $call40 = 0, $call401 = 0, $call81 = 0, $cmp197 = 0, $conv = 0, $conv141 = 0, $conv147 = 0, $conv154 = 0, $conv300 = 0, $conv306 = 0, $conv313 = 0, $conv320 = 0, $conv63 = 0, $conv68 = 0, $g = 0, $g170 = 0, $g228 = 0, $i = 0, $i128 = 0, $i172 = 0, $i231 = 0, $i287 = 0, $i335 = 0, $i367 = 0, $i403 = 0, $i42 = 0, $i83 = 0, $image$addr = 0, $k = 0, $k129 = 0, $k288 = 0, $k368 = 0, $k404 = 0, $mul25 = f0, $mul345 = f0, $mul53 = f0, $newFormat$addr = 0, $pixels = 0, $r = 0, $r169 = 0, $r227 = 0, sp = 0, CSE$0 = 0, CSE$1 = 0, CSE$2 = 0, CSE$3 = 0, CSE$4 = 0, CSE$5 = 0, CSE$6 = 0, CSE$7 = 0, CSE$8 = 0, CSE$9 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(112);
 $$byval_copy = sp + 76 | 0;
 $image$addr = sp + 72 | 0;
 $newFormat$addr = sp + 68 | 0;
 $pixels = sp + 64 | 0;
 $k = sp + 60 | 0;
 $i = sp + 56 | 0;
 $i42 = sp + 52 | 0;
 $r = sp + 106 | 0;
 $g = sp + 105 | 0;
 $b = sp + 104 | 0;
 $i83 = sp + 48 | 0;
 $i128 = sp + 44 | 0;
 $k129 = sp + 40 | 0;
 $r169 = sp + 103 | 0;
 $g170 = sp + 102 | 0;
 $b171 = sp + 101 | 0;
 $a = sp + 100 | 0;
 $i172 = sp + 36 | 0;
 $r227 = sp + 99 | 0;
 $g228 = sp + 98 | 0;
 $b229 = sp + 97 | 0;
 $a230 = sp + 96 | 0;
 $i231 = sp + 32 | 0;
 $i287 = sp + 28 | 0;
 $k288 = sp + 24 | 0;
 $i335 = sp + 20 | 0;
 $i367 = sp + 16 | 0;
 $k368 = sp + 12 | 0;
 $i403 = sp + 8 | 0;
 $k404 = sp + 4 | 0;
 HEAP32[$image$addr >> 2] = $image;
 HEAP32[$newFormat$addr >> 2] = $newFormat;
 if (!(HEAP32[HEAP32[$image$addr >> 2] >> 2] | 0)) {
  STACKTOP = sp;
  return;
 }
 if (!(HEAP32[(HEAP32[$image$addr >> 2] | 0) + 4 >> 2] | 0)) {
  STACKTOP = sp;
  return;
 }
 if (!(HEAP32[$newFormat$addr >> 2] | 0 ? (HEAP32[(HEAP32[$image$addr >> 2] | 0) + 8 >> 2] | 0) != 0 : 0)) {
  STACKTOP = sp;
  return;
 }
 if ((HEAP32[(HEAP32[$image$addr >> 2] | 0) + 16 >> 2] | 0) == (HEAP32[$newFormat$addr >> 2] | 0)) {
  STACKTOP = sp;
  return;
 }
 if (!((HEAP32[$newFormat$addr >> 2] | 0) < 11 ? (HEAP32[(HEAP32[$image$addr >> 2] | 0) + 16 >> 2] | 0) < 11 : 0)) {
  _TraceLog(4, 37977, sp);
  STACKTOP = sp;
  return;
 }
 $13 = HEAP32[$image$addr >> 2] | 0;
 HEAP32[$$byval_copy >> 2] = HEAP32[$13 >> 2];
 HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$13 + 4 >> 2];
 HEAP32[$$byval_copy + 8 >> 2] = HEAP32[$13 + 8 >> 2];
 HEAP32[$$byval_copy + 12 >> 2] = HEAP32[$13 + 12 >> 2];
 HEAP32[$$byval_copy + 16 >> 2] = HEAP32[$13 + 16 >> 2];
 HEAP32[$pixels >> 2] = _GetImageDataNormalized($$byval_copy) | 0;
 _free(HEAP32[HEAP32[$image$addr >> 2] >> 2] | 0);
 HEAP32[HEAP32[$image$addr >> 2] >> 2] = 0;
 HEAP32[(HEAP32[$image$addr >> 2] | 0) + 16 >> 2] = HEAP32[$newFormat$addr >> 2];
 HEAP32[$k >> 2] = 0;
 L17 : do switch (HEAP32[(HEAP32[$image$addr >> 2] | 0) + 16 >> 2] | 0) {
 case 1:
  {
   CSE$0 = HEAP32[$image$addr >> 2] | 0;
   $call19 = _malloc(Math_imul(HEAP32[CSE$0 + 4 >> 2] | 0, HEAP32[CSE$0 + 8 >> 2] | 0) | 0) | 0;
   HEAP32[HEAP32[$image$addr >> 2] >> 2] = $call19;
   HEAP32[$i >> 2] = 0;
   while (1) {
    if ((HEAP32[$i >> 2] | 0) >= (Math_imul(HEAP32[(HEAP32[$image$addr >> 2] | 0) + 4 >> 2] | 0, HEAP32[(HEAP32[$image$addr >> 2] | 0) + 8 >> 2] | 0) | 0)) break L17;
    $mul25 = Math_fround(Math_fround(HEAPF32[(HEAP32[$pixels >> 2] | 0) + (HEAP32[$i >> 2] << 4) >> 2]) * Math_fround(.298999995));
    $add = Math_fround($mul25 + Math_fround(Math_fround(HEAPF32[(HEAP32[$pixels >> 2] | 0) + (HEAP32[$i >> 2] << 4) + 4 >> 2]) * Math_fround(.587000012)));
    $conv = ~~Math_fround(Math_fround($add + Math_fround(Math_fround(HEAPF32[(HEAP32[$pixels >> 2] | 0) + (HEAP32[$i >> 2] << 4) + 8 >> 2]) * Math_fround(.114))) * Math_fround(255.0)) & 255;
    HEAP8[(HEAP32[HEAP32[$image$addr >> 2] >> 2] | 0) + (HEAP32[$i >> 2] | 0) >> 0] = $conv;
    HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
   }
   break;
  }
 case 2:
  {
   CSE$1 = HEAP32[$image$addr >> 2] | 0;
   $call40 = _malloc((Math_imul(HEAP32[CSE$1 + 4 >> 2] | 0, HEAP32[CSE$1 + 8 >> 2] | 0) | 0) << 1) | 0;
   HEAP32[HEAP32[$image$addr >> 2] >> 2] = $call40;
   HEAP32[$i42 >> 2] = 0;
   while (1) {
    if ((HEAP32[$i42 >> 2] | 0) >= ((Math_imul(HEAP32[(HEAP32[$image$addr >> 2] | 0) + 4 >> 2] | 0, HEAP32[(HEAP32[$image$addr >> 2] | 0) + 8 >> 2] | 0) | 0) << 1 | 0)) break L17;
    $mul53 = Math_fround(Math_fround(HEAPF32[(HEAP32[$pixels >> 2] | 0) + (HEAP32[$k >> 2] << 4) >> 2]) * Math_fround(.298999995));
    $add57 = Math_fround($mul53 + Math_fround(Math_fround(HEAPF32[(HEAP32[$pixels >> 2] | 0) + (HEAP32[$k >> 2] << 4) + 4 >> 2]) * Math_fround(.587000012)));
    $conv63 = ~~Math_fround(Math_fround($add57 + Math_fround(Math_fround(HEAPF32[(HEAP32[$pixels >> 2] | 0) + (HEAP32[$k >> 2] << 4) + 8 >> 2]) * Math_fround(.114))) * Math_fround(255.0)) & 255;
    HEAP8[(HEAP32[HEAP32[$image$addr >> 2] >> 2] | 0) + (HEAP32[$i42 >> 2] | 0) >> 0] = $conv63;
    $conv68 = ~~Math_fround(Math_fround(HEAPF32[(HEAP32[$pixels >> 2] | 0) + (HEAP32[$k >> 2] << 4) + 12 >> 2]) * Math_fround(255.0)) & 255;
    HEAP8[(HEAP32[HEAP32[$image$addr >> 2] >> 2] | 0) + ((HEAP32[$i42 >> 2] | 0) + 1) >> 0] = $conv68;
    HEAP32[$i42 >> 2] = (HEAP32[$i42 >> 2] | 0) + 2;
    HEAP32[$k >> 2] = (HEAP32[$k >> 2] | 0) + 1;
   }
   break;
  }
 case 3:
  {
   CSE$2 = HEAP32[$image$addr >> 2] | 0;
   $call81 = _malloc((Math_imul(HEAP32[CSE$2 + 4 >> 2] | 0, HEAP32[CSE$2 + 8 >> 2] | 0) | 0) << 1) | 0;
   HEAP32[HEAP32[$image$addr >> 2] >> 2] = $call81;
   HEAP8[$r >> 0] = 0;
   HEAP8[$g >> 0] = 0;
   HEAP8[$b >> 0] = 0;
   HEAP32[$i83 >> 2] = 0;
   while (1) {
    if ((HEAP32[$i83 >> 2] | 0) >= (Math_imul(HEAP32[(HEAP32[$image$addr >> 2] | 0) + 4 >> 2] | 0, HEAP32[(HEAP32[$image$addr >> 2] | 0) + 8 >> 2] | 0) | 0)) break L17;
    HEAP8[$r >> 0] = ~~+_llvm_round_f64(+(+Math_fround(Math_fround(HEAPF32[(HEAP32[$pixels >> 2] | 0) + (HEAP32[$i83 >> 2] << 4) >> 2]) * Math_fround(31.0))));
    HEAP8[$g >> 0] = ~~+_llvm_round_f64(+(+Math_fround(Math_fround(HEAPF32[(HEAP32[$pixels >> 2] | 0) + (HEAP32[$i83 >> 2] << 4) + 4 >> 2]) * Math_fround(63.0))));
    HEAP8[$b >> 0] = ~~+_llvm_round_f64(+(+Math_fround(Math_fround(HEAPF32[(HEAP32[$pixels >> 2] | 0) + (HEAP32[$i83 >> 2] << 4) + 8 >> 2]) * Math_fround(31.0))));
    HEAP16[(HEAP32[HEAP32[$image$addr >> 2] >> 2] | 0) + (HEAP32[$i83 >> 2] << 1) >> 1] = (HEAPU8[$r >> 0] & 65535) << 11 | (HEAPU8[$g >> 0] & 65535) << 5 | HEAPU8[$b >> 0] & 65535;
    HEAP32[$i83 >> 2] = (HEAP32[$i83 >> 2] | 0) + 1;
   }
   break;
  }
 case 4:
  {
   CSE$3 = HEAP32[$image$addr >> 2] | 0;
   $call126 = _malloc((Math_imul(HEAP32[CSE$3 + 4 >> 2] | 0, HEAP32[CSE$3 + 8 >> 2] | 0) | 0) * 3 | 0) | 0;
   HEAP32[HEAP32[$image$addr >> 2] >> 2] = $call126;
   HEAP32[$i128 >> 2] = 0;
   HEAP32[$k129 >> 2] = 0;
   while (1) {
    if ((HEAP32[$i128 >> 2] | 0) >= ((Math_imul(HEAP32[(HEAP32[$image$addr >> 2] | 0) + 4 >> 2] | 0, HEAP32[(HEAP32[$image$addr >> 2] | 0) + 8 >> 2] | 0) | 0) * 3 | 0)) break L17;
    $conv141 = ~~Math_fround(Math_fround(HEAPF32[(HEAP32[$pixels >> 2] | 0) + (HEAP32[$k129 >> 2] << 4) >> 2]) * Math_fround(255.0)) & 255;
    HEAP8[(HEAP32[HEAP32[$image$addr >> 2] >> 2] | 0) + (HEAP32[$i128 >> 2] | 0) >> 0] = $conv141;
    $conv147 = ~~Math_fround(Math_fround(HEAPF32[(HEAP32[$pixels >> 2] | 0) + (HEAP32[$k129 >> 2] << 4) + 4 >> 2]) * Math_fround(255.0)) & 255;
    HEAP8[(HEAP32[HEAP32[$image$addr >> 2] >> 2] | 0) + ((HEAP32[$i128 >> 2] | 0) + 1) >> 0] = $conv147;
    $conv154 = ~~Math_fround(Math_fround(HEAPF32[(HEAP32[$pixels >> 2] | 0) + (HEAP32[$k129 >> 2] << 4) + 8 >> 2]) * Math_fround(255.0)) & 255;
    HEAP8[(HEAP32[HEAP32[$image$addr >> 2] >> 2] | 0) + ((HEAP32[$i128 >> 2] | 0) + 2) >> 0] = $conv154;
    HEAP32[$i128 >> 2] = (HEAP32[$i128 >> 2] | 0) + 3;
    HEAP32[$k129 >> 2] = (HEAP32[$k129 >> 2] | 0) + 1;
   }
   break;
  }
 case 5:
  {
   CSE$4 = HEAP32[$image$addr >> 2] | 0;
   $call167 = _malloc((Math_imul(HEAP32[CSE$4 + 4 >> 2] | 0, HEAP32[CSE$4 + 8 >> 2] | 0) | 0) << 1) | 0;
   HEAP32[HEAP32[$image$addr >> 2] >> 2] = $call167;
   HEAP8[$r169 >> 0] = 0;
   HEAP8[$g170 >> 0] = 0;
   HEAP8[$b171 >> 0] = 0;
   HEAP8[$a >> 0] = 0;
   HEAP32[$i172 >> 2] = 0;
   while (1) {
    if ((HEAP32[$i172 >> 2] | 0) >= (Math_imul(HEAP32[(HEAP32[$image$addr >> 2] | 0) + 4 >> 2] | 0, HEAP32[(HEAP32[$image$addr >> 2] | 0) + 8 >> 2] | 0) | 0)) break L17;
    HEAP8[$r169 >> 0] = ~~+_llvm_round_f64(+(+Math_fround(Math_fround(HEAPF32[(HEAP32[$pixels >> 2] | 0) + (HEAP32[$i172 >> 2] << 4) >> 2]) * Math_fround(31.0))));
    HEAP8[$g170 >> 0] = ~~+_llvm_round_f64(+(+Math_fround(Math_fround(HEAPF32[(HEAP32[$pixels >> 2] | 0) + (HEAP32[$i172 >> 2] << 4) + 4 >> 2]) * Math_fround(31.0))));
    HEAP8[$b171 >> 0] = ~~+_llvm_round_f64(+(+Math_fround(Math_fround(HEAPF32[(HEAP32[$pixels >> 2] | 0) + (HEAP32[$i172 >> 2] << 4) + 8 >> 2]) * Math_fround(31.0))));
    $cmp197 = Math_fround(HEAPF32[(HEAP32[$pixels >> 2] | 0) + (HEAP32[$i172 >> 2] << 4) + 12 >> 2]) > Math_fround(.196078435);
    HEAP8[$a >> 0] = $cmp197 ? 1 : 0;
    HEAP16[(HEAP32[HEAP32[$image$addr >> 2] >> 2] | 0) + (HEAP32[$i172 >> 2] << 1) >> 1] = (HEAPU8[$r169 >> 0] & 65535) << 11 | (HEAPU8[$g170 >> 0] & 65535) << 6 | (HEAPU8[$b171 >> 0] & 65535) << 1 | HEAPU8[$a >> 0] & 65535;
    HEAP32[$i172 >> 2] = (HEAP32[$i172 >> 2] | 0) + 1;
   }
   break;
  }
 case 6:
  {
   CSE$5 = HEAP32[$image$addr >> 2] | 0;
   $call225 = _malloc((Math_imul(HEAP32[CSE$5 + 4 >> 2] | 0, HEAP32[CSE$5 + 8 >> 2] | 0) | 0) << 1) | 0;
   HEAP32[HEAP32[$image$addr >> 2] >> 2] = $call225;
   HEAP8[$r227 >> 0] = 0;
   HEAP8[$g228 >> 0] = 0;
   HEAP8[$b229 >> 0] = 0;
   HEAP8[$a230 >> 0] = 0;
   HEAP32[$i231 >> 2] = 0;
   while (1) {
    if ((HEAP32[$i231 >> 2] | 0) >= (Math_imul(HEAP32[(HEAP32[$image$addr >> 2] | 0) + 4 >> 2] | 0, HEAP32[(HEAP32[$image$addr >> 2] | 0) + 8 >> 2] | 0) | 0)) break L17;
    HEAP8[$r227 >> 0] = ~~+_llvm_round_f64(+(+Math_fround(Math_fround(HEAPF32[(HEAP32[$pixels >> 2] | 0) + (HEAP32[$i231 >> 2] << 4) >> 2]) * Math_fround(15.0))));
    HEAP8[$g228 >> 0] = ~~+_llvm_round_f64(+(+Math_fround(Math_fround(HEAPF32[(HEAP32[$pixels >> 2] | 0) + (HEAP32[$i231 >> 2] << 4) + 4 >> 2]) * Math_fround(15.0))));
    HEAP8[$b229 >> 0] = ~~+_llvm_round_f64(+(+Math_fround(Math_fround(HEAPF32[(HEAP32[$pixels >> 2] | 0) + (HEAP32[$i231 >> 2] << 4) + 8 >> 2]) * Math_fround(15.0))));
    HEAP8[$a230 >> 0] = ~~+_llvm_round_f64(+(+Math_fround(Math_fround(HEAPF32[(HEAP32[$pixels >> 2] | 0) + (HEAP32[$i231 >> 2] << 4) + 12 >> 2]) * Math_fround(15.0))));
    HEAP16[(HEAP32[HEAP32[$image$addr >> 2] >> 2] | 0) + (HEAP32[$i231 >> 2] << 1) >> 1] = (HEAPU8[$r227 >> 0] & 65535) << 12 | (HEAPU8[$g228 >> 0] & 65535) << 8 | (HEAPU8[$b229 >> 0] & 65535) << 4 | HEAPU8[$a230 >> 0] & 65535;
    HEAP32[$i231 >> 2] = (HEAP32[$i231 >> 2] | 0) + 1;
   }
   break;
  }
 case 7:
  {
   CSE$6 = HEAP32[$image$addr >> 2] | 0;
   $call285 = _malloc((Math_imul(HEAP32[CSE$6 + 4 >> 2] | 0, HEAP32[CSE$6 + 8 >> 2] | 0) | 0) << 2) | 0;
   HEAP32[HEAP32[$image$addr >> 2] >> 2] = $call285;
   HEAP32[$i287 >> 2] = 0;
   HEAP32[$k288 >> 2] = 0;
   while (1) {
    if ((HEAP32[$i287 >> 2] | 0) >= ((Math_imul(HEAP32[(HEAP32[$image$addr >> 2] | 0) + 4 >> 2] | 0, HEAP32[(HEAP32[$image$addr >> 2] | 0) + 8 >> 2] | 0) | 0) << 2 | 0)) break L17;
    $conv300 = ~~Math_fround(Math_fround(HEAPF32[(HEAP32[$pixels >> 2] | 0) + (HEAP32[$k288 >> 2] << 4) >> 2]) * Math_fround(255.0)) & 255;
    HEAP8[(HEAP32[HEAP32[$image$addr >> 2] >> 2] | 0) + (HEAP32[$i287 >> 2] | 0) >> 0] = $conv300;
    $conv306 = ~~Math_fround(Math_fround(HEAPF32[(HEAP32[$pixels >> 2] | 0) + (HEAP32[$k288 >> 2] << 4) + 4 >> 2]) * Math_fround(255.0)) & 255;
    HEAP8[(HEAP32[HEAP32[$image$addr >> 2] >> 2] | 0) + ((HEAP32[$i287 >> 2] | 0) + 1) >> 0] = $conv306;
    $conv313 = ~~Math_fround(Math_fround(HEAPF32[(HEAP32[$pixels >> 2] | 0) + (HEAP32[$k288 >> 2] << 4) + 8 >> 2]) * Math_fround(255.0)) & 255;
    HEAP8[(HEAP32[HEAP32[$image$addr >> 2] >> 2] | 0) + ((HEAP32[$i287 >> 2] | 0) + 2) >> 0] = $conv313;
    $conv320 = ~~Math_fround(Math_fround(HEAPF32[(HEAP32[$pixels >> 2] | 0) + (HEAP32[$k288 >> 2] << 4) + 12 >> 2]) * Math_fround(255.0)) & 255;
    HEAP8[(HEAP32[HEAP32[$image$addr >> 2] >> 2] | 0) + ((HEAP32[$i287 >> 2] | 0) + 3) >> 0] = $conv320;
    HEAP32[$i287 >> 2] = (HEAP32[$i287 >> 2] | 0) + 4;
    HEAP32[$k288 >> 2] = (HEAP32[$k288 >> 2] | 0) + 1;
   }
   break;
  }
 case 8:
  {
   CSE$7 = HEAP32[$image$addr >> 2] | 0;
   $call333 = _malloc((Math_imul(HEAP32[CSE$7 + 4 >> 2] | 0, HEAP32[CSE$7 + 8 >> 2] | 0) | 0) << 2) | 0;
   HEAP32[HEAP32[$image$addr >> 2] >> 2] = $call333;
   HEAP32[$i335 >> 2] = 0;
   while (1) {
    if ((HEAP32[$i335 >> 2] | 0) >= (Math_imul(HEAP32[(HEAP32[$image$addr >> 2] | 0) + 4 >> 2] | 0, HEAP32[(HEAP32[$image$addr >> 2] | 0) + 8 >> 2] | 0) | 0)) break L17;
    $mul345 = Math_fround(Math_fround(HEAPF32[(HEAP32[$pixels >> 2] | 0) + (HEAP32[$i335 >> 2] << 4) >> 2]) * Math_fround(.298999995));
    $add349 = Math_fround($mul345 + Math_fround(Math_fround(HEAPF32[(HEAP32[$pixels >> 2] | 0) + (HEAP32[$i335 >> 2] << 4) + 4 >> 2]) * Math_fround(.587000012)));
    $add353 = Math_fround($add349 + Math_fround(Math_fround(HEAPF32[(HEAP32[$pixels >> 2] | 0) + (HEAP32[$i335 >> 2] << 4) + 8 >> 2]) * Math_fround(.114)));
    HEAPF32[(HEAP32[HEAP32[$image$addr >> 2] >> 2] | 0) + (HEAP32[$i335 >> 2] << 2) >> 2] = $add353;
    HEAP32[$i335 >> 2] = (HEAP32[$i335 >> 2] | 0) + 1;
   }
   break;
  }
 case 9:
  {
   CSE$8 = HEAP32[$image$addr >> 2] | 0;
   $call365 = _malloc((Math_imul(HEAP32[CSE$8 + 4 >> 2] | 0, HEAP32[CSE$8 + 8 >> 2] | 0) | 0) * 3 << 2) | 0;
   HEAP32[HEAP32[$image$addr >> 2] >> 2] = $call365;
   HEAP32[$i367 >> 2] = 0;
   HEAP32[$k368 >> 2] = 0;
   while (1) {
    if ((HEAP32[$i367 >> 2] | 0) >= ((Math_imul(HEAP32[(HEAP32[$image$addr >> 2] | 0) + 4 >> 2] | 0, HEAP32[(HEAP32[$image$addr >> 2] | 0) + 8 >> 2] | 0) | 0) * 3 | 0)) break L17;
    $271 = Math_fround(HEAPF32[(HEAP32[$pixels >> 2] | 0) + (HEAP32[$k368 >> 2] << 4) >> 2]);
    HEAPF32[(HEAP32[HEAP32[$image$addr >> 2] >> 2] | 0) + (HEAP32[$i367 >> 2] << 2) >> 2] = $271;
    $277 = Math_fround(HEAPF32[(HEAP32[$pixels >> 2] | 0) + (HEAP32[$k368 >> 2] << 4) + 4 >> 2]);
    HEAPF32[(HEAP32[HEAP32[$image$addr >> 2] >> 2] | 0) + ((HEAP32[$i367 >> 2] | 0) + 1 << 2) >> 2] = $277;
    $283 = Math_fround(HEAPF32[(HEAP32[$pixels >> 2] | 0) + (HEAP32[$k368 >> 2] << 4) + 8 >> 2]);
    HEAPF32[(HEAP32[HEAP32[$image$addr >> 2] >> 2] | 0) + ((HEAP32[$i367 >> 2] | 0) + 2 << 2) >> 2] = $283;
    HEAP32[$i367 >> 2] = (HEAP32[$i367 >> 2] | 0) + 3;
    HEAP32[$k368 >> 2] = (HEAP32[$k368 >> 2] | 0) + 1;
   }
   break;
  }
 case 10:
  {
   CSE$9 = HEAP32[$image$addr >> 2] | 0;
   $call401 = _malloc((Math_imul(HEAP32[CSE$9 + 4 >> 2] | 0, HEAP32[CSE$9 + 8 >> 2] | 0) | 0) << 2 << 2) | 0;
   HEAP32[HEAP32[$image$addr >> 2] >> 2] = $call401;
   HEAP32[$i403 >> 2] = 0;
   HEAP32[$k404 >> 2] = 0;
   while (1) {
    if ((HEAP32[$i403 >> 2] | 0) >= ((Math_imul(HEAP32[(HEAP32[$image$addr >> 2] | 0) + 4 >> 2] | 0, HEAP32[(HEAP32[$image$addr >> 2] | 0) + 8 >> 2] | 0) | 0) << 2 | 0)) break L17;
    $301 = Math_fround(HEAPF32[(HEAP32[$pixels >> 2] | 0) + (HEAP32[$k404 >> 2] << 4) >> 2]);
    HEAPF32[(HEAP32[HEAP32[$image$addr >> 2] >> 2] | 0) + (HEAP32[$i403 >> 2] << 2) >> 2] = $301;
    $307 = Math_fround(HEAPF32[(HEAP32[$pixels >> 2] | 0) + (HEAP32[$k404 >> 2] << 4) + 4 >> 2]);
    HEAPF32[(HEAP32[HEAP32[$image$addr >> 2] >> 2] | 0) + ((HEAP32[$i403 >> 2] | 0) + 1 << 2) >> 2] = $307;
    $313 = Math_fround(HEAPF32[(HEAP32[$pixels >> 2] | 0) + (HEAP32[$k404 >> 2] << 4) + 8 >> 2]);
    HEAPF32[(HEAP32[HEAP32[$image$addr >> 2] >> 2] | 0) + ((HEAP32[$i403 >> 2] | 0) + 2 << 2) >> 2] = $313;
    $319 = Math_fround(HEAPF32[(HEAP32[$pixels >> 2] | 0) + (HEAP32[$k404 >> 2] << 4) + 12 >> 2]);
    HEAPF32[(HEAP32[HEAP32[$image$addr >> 2] >> 2] | 0) + ((HEAP32[$i403 >> 2] | 0) + 3 << 2) >> 2] = $319;
    HEAP32[$i403 >> 2] = (HEAP32[$i403 >> 2] | 0) + 4;
    HEAP32[$k404 >> 2] = (HEAP32[$k404 >> 2] | 0) + 1;
   }
   break;
  }
 default:
  {}
 } while (0);
 _free(HEAP32[$pixels >> 2] | 0);
 HEAP32[$pixels >> 2] = 0;
 if ((HEAP32[(HEAP32[$image$addr >> 2] | 0) + 12 >> 2] | 0) <= 1) {
  STACKTOP = sp;
  return;
 }
 HEAP32[(HEAP32[$image$addr >> 2] | 0) + 12 >> 2] = 1;
 if (!(HEAP32[HEAP32[$image$addr >> 2] >> 2] | 0)) {
  STACKTOP = sp;
  return;
 }
 _ImageMipmaps(HEAP32[$image$addr >> 2] | 0);
 STACKTOP = sp;
 return;
}

function _stbir__resample_horizontal_downsample($stbir_info, $output_buffer) {
 $stbir_info = $stbir_info | 0;
 $output_buffer = $output_buffer | 0;
 var $116 = f0, $123 = f0, $130 = f0, $163 = f0, $170 = f0, $177 = f0, $184 = f0, $222 = f0, $43 = f0, $76 = f0, $83 = f0, $arrayidx113 = 0, $arrayidx119 = 0, $arrayidx125 = 0, $arrayidx167 = 0, $arrayidx173 = 0, $arrayidx179 = 0, $arrayidx185 = 0, $arrayidx229 = 0, $arrayidx26 = 0, $arrayidx65 = 0, $arrayidx71 = 0, $c = 0, $channels = 0, $coefficient = 0, $coefficient101 = 0, $coefficient155 = 0, $coefficient214 = 0, $coefficient53 = 0, $coefficient_group = 0, $coefficient_group148 = 0, $coefficient_group207 = 0, $coefficient_group46 = 0, $coefficient_group94 = 0, $coefficient_width = 0, $decode_buffer = 0, $filter_pixel_margin = 0, $horizontal_coefficients = 0, $horizontal_contributors = 0, $in_pixel_index = 0, $in_pixel_index145 = 0, $in_pixel_index204 = 0, $in_pixel_index43 = 0, $in_pixel_index91 = 0, $in_x = 0, $in_x143 = 0, $in_x202 = 0, $in_x41 = 0, $in_x89 = 0, $input_w = 0, $k = 0, $max_n = 0, $max_n147 = 0, $max_n206 = 0, $max_n45 = 0, $max_n93 = 0, $max_x = 0, $mul111 = f0, $mul117 = f0, $mul123 = f0, $mul165 = f0, $mul171 = f0, $mul177 = f0, $mul183 = f0, $mul227 = f0, $mul24 = f0, $mul63 = f0, $mul69 = f0, $n0 = 0, $n0137 = 0, $n0196 = 0, $n035 = 0, $n083 = 0, $n1 = 0, $n1140 = 0, $n1199 = 0, $n138 = 0, $n186 = 0, $out_pixel_index = 0, $out_pixel_index153 = 0, $out_pixel_index212 = 0, $out_pixel_index51 = 0, $out_pixel_index99 = 0, $output_buffer$addr = 0, $stbir_info$addr = 0, $x = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(224);
 $stbir_info$addr = sp + 208 | 0;
 $output_buffer$addr = sp + 204 | 0;
 $x = sp + 200 | 0;
 $k = sp + 196 | 0;
 $input_w = sp + 192 | 0;
 $channels = sp + 188 | 0;
 $decode_buffer = sp + 184 | 0;
 $horizontal_contributors = sp + 180 | 0;
 $horizontal_coefficients = sp + 176 | 0;
 $coefficient_width = sp + 172 | 0;
 $filter_pixel_margin = sp + 168 | 0;
 $max_x = sp + 164 | 0;
 $n0 = sp + 160 | 0;
 $n1 = sp + 156 | 0;
 $in_x = sp + 152 | 0;
 $in_pixel_index = sp + 148 | 0;
 $max_n = sp + 144 | 0;
 $coefficient_group = sp + 140 | 0;
 $out_pixel_index = sp + 136 | 0;
 $coefficient = sp + 132 | 0;
 $n035 = sp + 128 | 0;
 $n138 = sp + 124 | 0;
 $in_x41 = sp + 120 | 0;
 $in_pixel_index43 = sp + 116 | 0;
 $max_n45 = sp + 112 | 0;
 $coefficient_group46 = sp + 108 | 0;
 $out_pixel_index51 = sp + 104 | 0;
 $coefficient53 = sp + 100 | 0;
 $n083 = sp + 96 | 0;
 $n186 = sp + 92 | 0;
 $in_x89 = sp + 88 | 0;
 $in_pixel_index91 = sp + 84 | 0;
 $max_n93 = sp + 80 | 0;
 $coefficient_group94 = sp + 76 | 0;
 $out_pixel_index99 = sp + 72 | 0;
 $coefficient101 = sp + 68 | 0;
 $n0137 = sp + 64 | 0;
 $n1140 = sp + 60 | 0;
 $in_x143 = sp + 56 | 0;
 $in_pixel_index145 = sp + 52 | 0;
 $max_n147 = sp + 48 | 0;
 $coefficient_group148 = sp + 44 | 0;
 $out_pixel_index153 = sp + 40 | 0;
 $coefficient155 = sp + 36 | 0;
 $n0196 = sp + 32 | 0;
 $n1199 = sp + 28 | 0;
 $in_x202 = sp + 24 | 0;
 $in_pixel_index204 = sp + 20 | 0;
 $max_n206 = sp + 16 | 0;
 $coefficient_group207 = sp + 12 | 0;
 $c = sp + 8 | 0;
 $out_pixel_index212 = sp + 4 | 0;
 $coefficient214 = sp;
 HEAP32[$stbir_info$addr >> 2] = $stbir_info;
 HEAP32[$output_buffer$addr >> 2] = $output_buffer;
 HEAP32[$input_w >> 2] = HEAP32[(HEAP32[$stbir_info$addr >> 2] | 0) + 4 >> 2];
 HEAP32[$channels >> 2] = HEAP32[(HEAP32[$stbir_info$addr >> 2] | 0) + 64 >> 2];
 HEAP32[$decode_buffer >> 2] = _stbir__get_decode_buffer(HEAP32[$stbir_info$addr >> 2] | 0) | 0;
 HEAP32[$horizontal_contributors >> 2] = HEAP32[(HEAP32[$stbir_info$addr >> 2] | 0) + 100 >> 2];
 HEAP32[$horizontal_coefficients >> 2] = HEAP32[(HEAP32[$stbir_info$addr >> 2] | 0) + 104 >> 2];
 HEAP32[$coefficient_width >> 2] = HEAP32[(HEAP32[$stbir_info$addr >> 2] | 0) + 128 >> 2];
 HEAP32[$filter_pixel_margin >> 2] = HEAP32[(HEAP32[$stbir_info$addr >> 2] | 0) + 144 >> 2];
 HEAP32[$max_x >> 2] = (HEAP32[$input_w >> 2] | 0) + (HEAP32[$filter_pixel_margin >> 2] << 1);
 if (_stbir__use_width_upsampling(HEAP32[$stbir_info$addr >> 2] | 0) | 0) ___assert_fail(35188, 34244, 1536, 35229);
 switch (HEAP32[$channels >> 2] | 0) {
 case 1:
  {
   HEAP32[$x >> 2] = 0;
   L22 : while (1) {
    if ((HEAP32[$x >> 2] | 0) >= (HEAP32[$max_x >> 2] | 0)) {
     label = 47;
     break;
    }
    HEAP32[$n0 >> 2] = HEAP32[(HEAP32[$horizontal_contributors >> 2] | 0) + (HEAP32[$x >> 2] << 3) >> 2];
    HEAP32[$n1 >> 2] = HEAP32[(HEAP32[$horizontal_contributors >> 2] | 0) + (HEAP32[$x >> 2] << 3) + 4 >> 2];
    HEAP32[$in_x >> 2] = (HEAP32[$x >> 2] | 0) - (HEAP32[$filter_pixel_margin >> 2] | 0);
    HEAP32[$in_pixel_index >> 2] = HEAP32[$in_x >> 2];
    HEAP32[$max_n >> 2] = HEAP32[$n1 >> 2];
    HEAP32[$coefficient_group >> 2] = Math_imul(HEAP32[$coefficient_width >> 2] | 0, HEAP32[$x >> 2] | 0) | 0;
    HEAP32[$k >> 2] = HEAP32[$n0 >> 2];
    while (1) {
     if ((HEAP32[$k >> 2] | 0) > (HEAP32[$max_n >> 2] | 0)) break;
     HEAP32[$out_pixel_index >> 2] = HEAP32[$k >> 2];
     HEAPF32[$coefficient >> 2] = Math_fround(HEAPF32[(HEAP32[$horizontal_coefficients >> 2] | 0) + ((HEAP32[$coefficient_group >> 2] | 0) + (HEAP32[$k >> 2] | 0) - (HEAP32[$n0 >> 2] | 0) << 2) >> 2]);
     if (!(Math_fround(HEAPF32[$coefficient >> 2]) != Math_fround(0.0))) {
      label = 9;
      break L22;
     }
     $43 = Math_fround(HEAPF32[(HEAP32[$decode_buffer >> 2] | 0) + ((HEAP32[$in_pixel_index >> 2] | 0) + 0 << 2) >> 2]);
     $mul24 = Math_fround($43 * Math_fround(HEAPF32[$coefficient >> 2]));
     $arrayidx26 = (HEAP32[$output_buffer$addr >> 2] | 0) + ((HEAP32[$out_pixel_index >> 2] | 0) + 0 << 2) | 0;
     HEAPF32[$arrayidx26 >> 2] = Math_fround(Math_fround(HEAPF32[$arrayidx26 >> 2]) + $mul24);
     HEAP32[$k >> 2] = (HEAP32[$k >> 2] | 0) + 1;
    }
    HEAP32[$x >> 2] = (HEAP32[$x >> 2] | 0) + 1;
   }
   if ((label | 0) == 9) ___assert_fail(35267, 34244, 1554, 35229); else if ((label | 0) == 47) {
    STACKTOP = sp;
    return;
   }
   break;
  }
 case 2:
  {
   HEAP32[$x >> 2] = 0;
   L34 : while (1) {
    if ((HEAP32[$x >> 2] | 0) >= (HEAP32[$max_x >> 2] | 0)) {
     label = 47;
     break;
    }
    HEAP32[$n035 >> 2] = HEAP32[(HEAP32[$horizontal_contributors >> 2] | 0) + (HEAP32[$x >> 2] << 3) >> 2];
    HEAP32[$n138 >> 2] = HEAP32[(HEAP32[$horizontal_contributors >> 2] | 0) + (HEAP32[$x >> 2] << 3) + 4 >> 2];
    HEAP32[$in_x41 >> 2] = (HEAP32[$x >> 2] | 0) - (HEAP32[$filter_pixel_margin >> 2] | 0);
    HEAP32[$in_pixel_index43 >> 2] = HEAP32[$in_x41 >> 2] << 1;
    HEAP32[$max_n45 >> 2] = HEAP32[$n138 >> 2];
    HEAP32[$coefficient_group46 >> 2] = Math_imul(HEAP32[$coefficient_width >> 2] | 0, HEAP32[$x >> 2] | 0) | 0;
    HEAP32[$k >> 2] = HEAP32[$n035 >> 2];
    while (1) {
     if ((HEAP32[$k >> 2] | 0) > (HEAP32[$max_n45 >> 2] | 0)) break;
     HEAP32[$out_pixel_index51 >> 2] = HEAP32[$k >> 2] << 1;
     HEAPF32[$coefficient53 >> 2] = Math_fround(HEAPF32[(HEAP32[$horizontal_coefficients >> 2] | 0) + ((HEAP32[$coefficient_group46 >> 2] | 0) + (HEAP32[$k >> 2] | 0) - (HEAP32[$n035 >> 2] | 0) << 2) >> 2]);
     if (!(Math_fround(HEAPF32[$coefficient53 >> 2]) != Math_fround(0.0))) {
      label = 17;
      break L34;
     }
     $76 = Math_fround(HEAPF32[(HEAP32[$decode_buffer >> 2] | 0) + ((HEAP32[$in_pixel_index43 >> 2] | 0) + 0 << 2) >> 2]);
     $mul63 = Math_fround($76 * Math_fround(HEAPF32[$coefficient53 >> 2]));
     $arrayidx65 = (HEAP32[$output_buffer$addr >> 2] | 0) + ((HEAP32[$out_pixel_index51 >> 2] | 0) + 0 << 2) | 0;
     HEAPF32[$arrayidx65 >> 2] = Math_fround(Math_fround(HEAPF32[$arrayidx65 >> 2]) + $mul63);
     $83 = Math_fround(HEAPF32[(HEAP32[$decode_buffer >> 2] | 0) + ((HEAP32[$in_pixel_index43 >> 2] | 0) + 1 << 2) >> 2]);
     $mul69 = Math_fround($83 * Math_fround(HEAPF32[$coefficient53 >> 2]));
     $arrayidx71 = (HEAP32[$output_buffer$addr >> 2] | 0) + ((HEAP32[$out_pixel_index51 >> 2] | 0) + 1 << 2) | 0;
     HEAPF32[$arrayidx71 >> 2] = Math_fround(Math_fround(HEAPF32[$arrayidx71 >> 2]) + $mul69);
     HEAP32[$k >> 2] = (HEAP32[$k >> 2] | 0) + 1;
    }
    HEAP32[$x >> 2] = (HEAP32[$x >> 2] | 0) + 1;
   }
   if ((label | 0) == 17) ___assert_fail(35267, 34244, 1575, 35229); else if ((label | 0) == 47) {
    STACKTOP = sp;
    return;
   }
   break;
  }
 case 3:
  {
   HEAP32[$x >> 2] = 0;
   L46 : while (1) {
    if ((HEAP32[$x >> 2] | 0) >= (HEAP32[$max_x >> 2] | 0)) {
     label = 47;
     break;
    }
    HEAP32[$n083 >> 2] = HEAP32[(HEAP32[$horizontal_contributors >> 2] | 0) + (HEAP32[$x >> 2] << 3) >> 2];
    HEAP32[$n186 >> 2] = HEAP32[(HEAP32[$horizontal_contributors >> 2] | 0) + (HEAP32[$x >> 2] << 3) + 4 >> 2];
    HEAP32[$in_x89 >> 2] = (HEAP32[$x >> 2] | 0) - (HEAP32[$filter_pixel_margin >> 2] | 0);
    HEAP32[$in_pixel_index91 >> 2] = (HEAP32[$in_x89 >> 2] | 0) * 3;
    HEAP32[$max_n93 >> 2] = HEAP32[$n186 >> 2];
    HEAP32[$coefficient_group94 >> 2] = Math_imul(HEAP32[$coefficient_width >> 2] | 0, HEAP32[$x >> 2] | 0) | 0;
    HEAP32[$k >> 2] = HEAP32[$n083 >> 2];
    while (1) {
     if ((HEAP32[$k >> 2] | 0) > (HEAP32[$max_n93 >> 2] | 0)) break;
     HEAP32[$out_pixel_index99 >> 2] = (HEAP32[$k >> 2] | 0) * 3;
     HEAPF32[$coefficient101 >> 2] = Math_fround(HEAPF32[(HEAP32[$horizontal_coefficients >> 2] | 0) + ((HEAP32[$coefficient_group94 >> 2] | 0) + (HEAP32[$k >> 2] | 0) - (HEAP32[$n083 >> 2] | 0) << 2) >> 2]);
     if (!(Math_fround(HEAPF32[$coefficient101 >> 2]) != Math_fround(0.0))) {
      label = 25;
      break L46;
     }
     $116 = Math_fround(HEAPF32[(HEAP32[$decode_buffer >> 2] | 0) + ((HEAP32[$in_pixel_index91 >> 2] | 0) + 0 << 2) >> 2]);
     $mul111 = Math_fround($116 * Math_fround(HEAPF32[$coefficient101 >> 2]));
     $arrayidx113 = (HEAP32[$output_buffer$addr >> 2] | 0) + ((HEAP32[$out_pixel_index99 >> 2] | 0) + 0 << 2) | 0;
     HEAPF32[$arrayidx113 >> 2] = Math_fround(Math_fround(HEAPF32[$arrayidx113 >> 2]) + $mul111);
     $123 = Math_fround(HEAPF32[(HEAP32[$decode_buffer >> 2] | 0) + ((HEAP32[$in_pixel_index91 >> 2] | 0) + 1 << 2) >> 2]);
     $mul117 = Math_fround($123 * Math_fround(HEAPF32[$coefficient101 >> 2]));
     $arrayidx119 = (HEAP32[$output_buffer$addr >> 2] | 0) + ((HEAP32[$out_pixel_index99 >> 2] | 0) + 1 << 2) | 0;
     HEAPF32[$arrayidx119 >> 2] = Math_fround(Math_fround(HEAPF32[$arrayidx119 >> 2]) + $mul117);
     $130 = Math_fround(HEAPF32[(HEAP32[$decode_buffer >> 2] | 0) + ((HEAP32[$in_pixel_index91 >> 2] | 0) + 2 << 2) >> 2]);
     $mul123 = Math_fround($130 * Math_fround(HEAPF32[$coefficient101 >> 2]));
     $arrayidx125 = (HEAP32[$output_buffer$addr >> 2] | 0) + ((HEAP32[$out_pixel_index99 >> 2] | 0) + 2 << 2) | 0;
     HEAPF32[$arrayidx125 >> 2] = Math_fround(Math_fround(HEAPF32[$arrayidx125 >> 2]) + $mul123);
     HEAP32[$k >> 2] = (HEAP32[$k >> 2] | 0) + 1;
    }
    HEAP32[$x >> 2] = (HEAP32[$x >> 2] | 0) + 1;
   }
   if ((label | 0) == 25) ___assert_fail(35267, 34244, 1597, 35229); else if ((label | 0) == 47) {
    STACKTOP = sp;
    return;
   }
   break;
  }
 case 4:
  {
   HEAP32[$x >> 2] = 0;
   L58 : while (1) {
    if ((HEAP32[$x >> 2] | 0) >= (HEAP32[$max_x >> 2] | 0)) {
     label = 47;
     break;
    }
    HEAP32[$n0137 >> 2] = HEAP32[(HEAP32[$horizontal_contributors >> 2] | 0) + (HEAP32[$x >> 2] << 3) >> 2];
    HEAP32[$n1140 >> 2] = HEAP32[(HEAP32[$horizontal_contributors >> 2] | 0) + (HEAP32[$x >> 2] << 3) + 4 >> 2];
    HEAP32[$in_x143 >> 2] = (HEAP32[$x >> 2] | 0) - (HEAP32[$filter_pixel_margin >> 2] | 0);
    HEAP32[$in_pixel_index145 >> 2] = HEAP32[$in_x143 >> 2] << 2;
    HEAP32[$max_n147 >> 2] = HEAP32[$n1140 >> 2];
    HEAP32[$coefficient_group148 >> 2] = Math_imul(HEAP32[$coefficient_width >> 2] | 0, HEAP32[$x >> 2] | 0) | 0;
    HEAP32[$k >> 2] = HEAP32[$n0137 >> 2];
    while (1) {
     if ((HEAP32[$k >> 2] | 0) > (HEAP32[$max_n147 >> 2] | 0)) break;
     HEAP32[$out_pixel_index153 >> 2] = HEAP32[$k >> 2] << 2;
     HEAPF32[$coefficient155 >> 2] = Math_fround(HEAPF32[(HEAP32[$horizontal_coefficients >> 2] | 0) + ((HEAP32[$coefficient_group148 >> 2] | 0) + (HEAP32[$k >> 2] | 0) - (HEAP32[$n0137 >> 2] | 0) << 2) >> 2]);
     if (!(Math_fround(HEAPF32[$coefficient155 >> 2]) != Math_fround(0.0))) {
      label = 33;
      break L58;
     }
     $163 = Math_fround(HEAPF32[(HEAP32[$decode_buffer >> 2] | 0) + ((HEAP32[$in_pixel_index145 >> 2] | 0) + 0 << 2) >> 2]);
     $mul165 = Math_fround($163 * Math_fround(HEAPF32[$coefficient155 >> 2]));
     $arrayidx167 = (HEAP32[$output_buffer$addr >> 2] | 0) + ((HEAP32[$out_pixel_index153 >> 2] | 0) + 0 << 2) | 0;
     HEAPF32[$arrayidx167 >> 2] = Math_fround(Math_fround(HEAPF32[$arrayidx167 >> 2]) + $mul165);
     $170 = Math_fround(HEAPF32[(HEAP32[$decode_buffer >> 2] | 0) + ((HEAP32[$in_pixel_index145 >> 2] | 0) + 1 << 2) >> 2]);
     $mul171 = Math_fround($170 * Math_fround(HEAPF32[$coefficient155 >> 2]));
     $arrayidx173 = (HEAP32[$output_buffer$addr >> 2] | 0) + ((HEAP32[$out_pixel_index153 >> 2] | 0) + 1 << 2) | 0;
     HEAPF32[$arrayidx173 >> 2] = Math_fround(Math_fround(HEAPF32[$arrayidx173 >> 2]) + $mul171);
     $177 = Math_fround(HEAPF32[(HEAP32[$decode_buffer >> 2] | 0) + ((HEAP32[$in_pixel_index145 >> 2] | 0) + 2 << 2) >> 2]);
     $mul177 = Math_fround($177 * Math_fround(HEAPF32[$coefficient155 >> 2]));
     $arrayidx179 = (HEAP32[$output_buffer$addr >> 2] | 0) + ((HEAP32[$out_pixel_index153 >> 2] | 0) + 2 << 2) | 0;
     HEAPF32[$arrayidx179 >> 2] = Math_fround(Math_fround(HEAPF32[$arrayidx179 >> 2]) + $mul177);
     $184 = Math_fround(HEAPF32[(HEAP32[$decode_buffer >> 2] | 0) + ((HEAP32[$in_pixel_index145 >> 2] | 0) + 3 << 2) >> 2]);
     $mul183 = Math_fround($184 * Math_fround(HEAPF32[$coefficient155 >> 2]));
     $arrayidx185 = (HEAP32[$output_buffer$addr >> 2] | 0) + ((HEAP32[$out_pixel_index153 >> 2] | 0) + 3 << 2) | 0;
     HEAPF32[$arrayidx185 >> 2] = Math_fround(Math_fround(HEAPF32[$arrayidx185 >> 2]) + $mul183);
     HEAP32[$k >> 2] = (HEAP32[$k >> 2] | 0) + 1;
    }
    HEAP32[$x >> 2] = (HEAP32[$x >> 2] | 0) + 1;
   }
   if ((label | 0) == 33) ___assert_fail(35267, 34244, 1620, 35229); else if ((label | 0) == 47) {
    STACKTOP = sp;
    return;
   }
   break;
  }
 default:
  {
   HEAP32[$x >> 2] = 0;
   L6 : while (1) {
    if ((HEAP32[$x >> 2] | 0) >= (HEAP32[$max_x >> 2] | 0)) {
     label = 47;
     break;
    }
    HEAP32[$n0196 >> 2] = HEAP32[(HEAP32[$horizontal_contributors >> 2] | 0) + (HEAP32[$x >> 2] << 3) >> 2];
    HEAP32[$n1199 >> 2] = HEAP32[(HEAP32[$horizontal_contributors >> 2] | 0) + (HEAP32[$x >> 2] << 3) + 4 >> 2];
    HEAP32[$in_x202 >> 2] = (HEAP32[$x >> 2] | 0) - (HEAP32[$filter_pixel_margin >> 2] | 0);
    HEAP32[$in_pixel_index204 >> 2] = Math_imul(HEAP32[$in_x202 >> 2] | 0, HEAP32[$channels >> 2] | 0) | 0;
    HEAP32[$max_n206 >> 2] = HEAP32[$n1199 >> 2];
    HEAP32[$coefficient_group207 >> 2] = Math_imul(HEAP32[$coefficient_width >> 2] | 0, HEAP32[$x >> 2] | 0) | 0;
    HEAP32[$k >> 2] = HEAP32[$n0196 >> 2];
    while (1) {
     if ((HEAP32[$k >> 2] | 0) > (HEAP32[$max_n206 >> 2] | 0)) break;
     HEAP32[$out_pixel_index212 >> 2] = Math_imul(HEAP32[$k >> 2] | 0, HEAP32[$channels >> 2] | 0) | 0;
     HEAPF32[$coefficient214 >> 2] = Math_fround(HEAPF32[(HEAP32[$horizontal_coefficients >> 2] | 0) + ((HEAP32[$coefficient_group207 >> 2] | 0) + (HEAP32[$k >> 2] | 0) - (HEAP32[$n0196 >> 2] | 0) << 2) >> 2]);
     if (!(Math_fround(HEAPF32[$coefficient214 >> 2]) != Math_fround(0.0))) {
      label = 41;
      break L6;
     }
     HEAP32[$c >> 2] = 0;
     while (1) {
      if ((HEAP32[$c >> 2] | 0) >= (HEAP32[$channels >> 2] | 0)) break;
      $222 = Math_fround(HEAPF32[(HEAP32[$decode_buffer >> 2] | 0) + ((HEAP32[$in_pixel_index204 >> 2] | 0) + (HEAP32[$c >> 2] | 0) << 2) >> 2]);
      $mul227 = Math_fround($222 * Math_fround(HEAPF32[$coefficient214 >> 2]));
      $arrayidx229 = (HEAP32[$output_buffer$addr >> 2] | 0) + ((HEAP32[$out_pixel_index212 >> 2] | 0) + (HEAP32[$c >> 2] | 0) << 2) | 0;
      HEAPF32[$arrayidx229 >> 2] = Math_fround(Math_fround(HEAPF32[$arrayidx229 >> 2]) + $mul227);
      HEAP32[$c >> 2] = (HEAP32[$c >> 2] | 0) + 1;
     }
     HEAP32[$k >> 2] = (HEAP32[$k >> 2] | 0) + 1;
    }
    HEAP32[$x >> 2] = (HEAP32[$x >> 2] | 0) + 1;
   }
   if ((label | 0) == 41) ___assert_fail(35267, 34244, 1645, 35229); else if ((label | 0) == 47) {
    STACKTOP = sp;
    return;
   }
  }
 }
}
function _main() {
 var $101 = 0, $103 = 0, $106 = 0, $107 = 0, $111 = 0, $113 = 0, $116 = 0, $117 = f0, $126 = 0, $131 = 0, $132 = 0, $136 = f0, $137 = 0, $139 = 0, $14 = 0, $144 = 0, $145 = 0, $19 = 0, $20 = 0, $24 = 0, $26 = 0, $3 = 0, $31 = 0, $32 = 0, $45 = 0, $50 = 0, $51 = 0, $57 = 0, $62 = 0, $63 = 0, $79 = 0, $8 = 0, $80 = 0, $83 = 0, $88 = 0, $89 = 0, $9 = 0, $93 = f0, $94 = 0, $Lifespown186 = 0, $Lifespown268 = 0, $a216 = 0, $a291 = 0, $activo114 = 0, $activo178 = 0, $activo260 = 0, $activo94 = 0, $add = 0.0, $add151 = 0.0, $add266 = f0, $agg$tmp = 0, $agg$tmp16 = 0, $agg$tmp207 = 0, $agg$tmp212 = 0, $agg$tmp230 = 0, $agg$tmp282 = 0, $agg$tmp287 = 0, $agg$tmp287$byval_copy = 0, $agg$tmp4 = 0, $b215 = 0, $b290 = 0, $call = 0, $call$i1$i = 0, $call$i2$i = 0, $call15 = 0, $call242 = 0, $call3 = 0, $conv = 0.0, $conv135 = 0.0, $conv137 = f0, $conv149 = 0.0, $conv157 = 0.0, $conv160 = f0, $disparo = 0, $disparo1 = 0, $g214 = 0, $g289 = 0, $i$097 = 0, $i108$091 = 0, $i172$092 = 0, $i254$094 = 0, $i49$096 = 0, $i88$090 = 0, $inc103 = 0, $inc124 = 0, $inc269 = 0, $jugador1Colision236 = 0, $mapa = 0, $penemigo = 0, $player = 0, $pnave = 0, $pnave1 = 0, $position182 = 0, $position264 = 0, $sub184 = f0, $tmpcast$byval_copy = 0, $vida = 0, $x141 = 0, $x165 = 0, $y183 = 0, $y265 = 0, sp = 0, CSE$0 = 0, CSE$1 = 0, CSE$2 = 0, CSE$3 = 0, CSE$4 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 480 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(480);
 $agg$tmp287$byval_copy = sp + 448 | 0;
 $tmpcast$byval_copy = sp + 440 | 0;
 $penemigo = sp + 436 | 0;
 HEAP32[$penemigo >> 2] = 0;
 $player = sp + 432 | 0;
 HEAP32[$player >> 2] = 0;
 $mapa = sp + 428 | 0;
 HEAP32[$mapa >> 2] = 0;
 $agg$tmp = sp + 416 | 0;
 $agg$tmp4 = sp + 404 | 0;
 $agg$tmp16 = sp + 392 | 0;
 $pnave = sp + 320 | 0;
 $pnave1 = sp + 248 | 0;
 $disparo = sp + 112 | 0;
 $disparo1 = sp;
 $agg$tmp207 = sp + 240 | 0;
 $agg$tmp212 = sp + 468 | 0;
 $agg$tmp230 = sp + 232 | 0;
 $agg$tmp282 = sp + 224 | 0;
 $agg$tmp287 = sp + 464 | 0;
 _InitWindow(820, 840, 21944);
 _SetTargetFPS(60);
 $call = __Znwm(228) | 0;
 HEAP32[$agg$tmp >> 2] = 0;
 HEAP32[$agg$tmp + 4 >> 2] = 0;
 HEAP32[$agg$tmp + 8 >> 2] = 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcm($agg$tmp, 21953, __ZNSt3__211char_traitsIcE6lengthEPKc(21953) | 0);
 __ZN4MapaC2ENSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE($call, $agg$tmp);
 HEAP32[$mapa >> 2] = $call;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($agg$tmp);
 $call3 = __Znwm(72) | 0;
 HEAP32[$agg$tmp4 >> 2] = 0;
 HEAP32[$agg$tmp4 + 4 >> 2] = 0;
 HEAP32[$agg$tmp4 + 8 >> 2] = 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcm($agg$tmp4, 21980, __ZNSt3__211char_traitsIcE6lengthEPKc(21980) | 0);
 __ZN4NaveC2ENSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEERK7Vector2($call3, $agg$tmp4, (HEAP32[$mapa >> 2] | 0) + 212 | 0);
 HEAP32[$player >> 2] = $call3;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($agg$tmp4);
 $call15 = __Znwm(72) | 0;
 HEAP32[$agg$tmp16 >> 2] = 0;
 HEAP32[$agg$tmp16 + 4 >> 2] = 0;
 HEAP32[$agg$tmp16 + 8 >> 2] = 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcm($agg$tmp16, 21999, __ZNSt3__211char_traitsIcE6lengthEPKc(21999) | 0);
 __ZN7EnemigoC2ENSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEERK7Vector2($call15, $agg$tmp16, (HEAP32[$mapa >> 2] | 0) + 220 | 0);
 HEAP32[$penemigo >> 2] = $call15;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($agg$tmp16);
 __ZN4NaveC2Edd($pnave, 86.0, 78.0);
 __ZN7EnemigoC2Edd($pnave1, 86.0, 78.0);
 $i$097 = 0;
 do {
  $3 = __ZNK4Nave10getNavePosEv(HEAP32[$player >> 2] | 0) | 0;
  $8 = HEAP32[$3 + 4 >> 2] | 0;
  CSE$0 = $disparo + ($i$097 * 28 | 0) | 0;
  $9 = CSE$0 + 8 | 0;
  HEAP32[$9 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$9 + 4 >> 2] = $8;
  $14 = __ZNK7Enemigo13getEnemigoPosEv(HEAP32[$penemigo >> 2] | 0) | 0;
  $19 = HEAP32[$14 + 4 >> 2] | 0;
  CSE$1 = $disparo1 + ($i$097 * 28 | 0) | 0;
  $20 = CSE$1 + 8 | 0;
  HEAP32[$20 >> 2] = HEAP32[$14 >> 2];
  HEAP32[$20 + 4 >> 2] = $19;
  HEAPF32[CSE$0 + 24 >> 2] = Math_fround(10.0);
  HEAP8[CSE$0 + 1 >> 0] = -26;
  HEAP8[CSE$0 + 2 >> 0] = 41;
  HEAP8[CSE$0 + 3 >> 0] = 55;
  HEAP8[CSE$0 + 4 >> 0] = -1;
  HEAP8[CSE$0 >> 0] = 0;
  HEAP32[CSE$0 + 16 >> 2] = 0;
  HEAP32[CSE$0 + 20 >> 2] = 100;
  HEAPF32[CSE$1 + 24 >> 2] = Math_fround(10.0);
  HEAP8[CSE$1 + 1 >> 0] = 0;
  HEAP8[CSE$1 + 2 >> 0] = 121;
  HEAP8[CSE$1 + 3 >> 0] = -15;
  HEAP8[CSE$1 + 4 >> 0] = -1;
  HEAP8[CSE$1 >> 0] = 0;
  HEAP32[CSE$1 + 16 >> 2] = 0;
  $i$097 = $i$097 + 1 | 0;
 } while (($i$097 | 0) != 4);
 $i49$096 = 0;
 do {
  $26 = __ZNK7Enemigo13getEnemigoPosEv(HEAP32[$penemigo >> 2] | 0) | 0;
  $31 = HEAP32[$26 + 4 >> 2] | 0;
  CSE$2 = $disparo1 + ($i49$096 * 28 | 0) | 0;
  $32 = CSE$2 + 8 | 0;
  HEAP32[$32 >> 2] = HEAP32[$26 >> 2];
  HEAP32[$32 + 4 >> 2] = $31;
  HEAPF32[CSE$2 + 24 >> 2] = Math_fround(10.0);
  HEAP8[CSE$2 + 1 >> 0] = 0;
  HEAP8[CSE$2 + 2 >> 0] = 121;
  HEAP8[CSE$2 + 3 >> 0] = -15;
  HEAP8[CSE$2 + 4 >> 0] = -1;
  HEAP8[CSE$2 >> 0] = 0;
  HEAP32[CSE$2 + 16 >> 2] = 0;
  HEAP32[CSE$2 + 20 >> 2] = 100;
  $i49$096 = $i49$096 + 1 | 0;
 } while (($i49$096 | 0) != 4);
 if (!(_WindowShouldClose() | 0)) {
  $g214 = $agg$tmp212 + 1 | 0;
  $b215 = $agg$tmp212 + 2 | 0;
  $a216 = $agg$tmp212 + 3 | 0;
  $24 = HEAP32[$disparo + 20 >> 2] | 0;
  $g289 = $agg$tmp287 + 1 | 0;
  $b290 = $agg$tmp287 + 2 | 0;
  $a291 = $agg$tmp287 + 3 | 0;
  do {
   if (_IsKeyDown(262) | 0) __ZN4Nave6move_xEf(HEAP32[$player >> 2] | 0, Math_fround(5.0));
   if (_IsKeyDown(263) | 0) __ZN4Nave6move_xEf(HEAP32[$player >> 2] | 0, Math_fround(-5.0));
   if (_IsKeyDown(83) | 0) __ZN7Enemigo6move_xEf(HEAP32[$penemigo >> 2] | 0, Math_fround(5.0));
   if (_IsKeyDown(65) | 0) __ZN7Enemigo6move_xEf(HEAP32[$penemigo >> 2] | 0, Math_fround(-5.0));
   _BeginDrawing();
   __ZN4Mapa7dibujarEv(HEAP32[$mapa >> 2] | 0);
   __ZN4Nave4drawEv(HEAP32[$player >> 2] | 0);
   __ZN7Enemigo4drawEv(HEAP32[$penemigo >> 2] | 0);
   L23 : do if (_IsKeyPressed(32) | 0) {
    $i88$090 = 0;
    while (1) {
     $activo94 = $disparo + ($i88$090 * 28 | 0) | 0;
     if (!(HEAP8[$activo94 >> 0] | 0)) break;
     $inc103 = $i88$090 + 1 | 0;
     if ($inc103 >>> 0 < 4) $i88$090 = $inc103; else break L23;
    }
    $45 = __ZNK4Nave10getNavePosEv(HEAP32[$player >> 2] | 0) | 0;
    $50 = HEAP32[$45 + 4 >> 2] | 0;
    $51 = $disparo + ($i88$090 * 28 | 0) + 8 | 0;
    HEAP32[$51 >> 2] = HEAP32[$45 >> 2];
    HEAP32[$51 + 4 >> 2] = $50;
    HEAP8[$activo94 >> 0] = 1;
   } while (0);
   L30 : do if (_IsKeyPressed(68) | 0) {
    $i108$091 = 0;
    while (1) {
     $activo114 = $disparo1 + ($i108$091 * 28 | 0) | 0;
     if (!(HEAP8[$activo114 >> 0] | 0)) break;
     $inc124 = $i108$091 + 1 | 0;
     if ($inc124 >>> 0 < 4) $i108$091 = $inc124; else break L30;
    }
    $57 = __ZNK7Enemigo13getEnemigoPosEv(HEAP32[$penemigo >> 2] | 0) | 0;
    $62 = HEAP32[$57 + 4 >> 2] | 0;
    $63 = $disparo1 + ($i108$091 * 28 | 0) + 8 | 0;
    HEAP32[$63 >> 2] = HEAP32[$57 >> 2];
    HEAP32[$63 + 4 >> 2] = $62;
    HEAP8[$activo114 >> 0] = 1;
   } while (0);
   $conv = +Math_fround(HEAPF32[(HEAP32[$player >> 2] | 0) + 60 >> 2]);
   $add = +__ZNK4Nave8getWidthEv($pnave) + $conv;
   if (!($add >= +(_GetScreenWidth() | 0))) {
    $x141 = (HEAP32[$player >> 2] | 0) + 60 | 0;
    if (Math_fround(HEAPF32[$x141 >> 2]) <= Math_fround(110.0)) HEAPF32[$x141 >> 2] = Math_fround(110.0);
   } else {
    $conv135 = +(_GetScreenWidth() | 0);
    $conv137 = Math_fround($conv135 - +__ZNK4Nave8getWidthEv($pnave));
    HEAPF32[(HEAP32[$player >> 2] | 0) + 60 >> 2] = $conv137;
   }
   $conv149 = +Math_fround(HEAPF32[(HEAP32[$penemigo >> 2] | 0) + 60 >> 2]);
   $add151 = +__ZNK7Enemigo8getWidthEv($pnave1) + $conv149;
   if (!($add151 >= +(_GetScreenWidth() | 0))) {
    $x165 = (HEAP32[$penemigo >> 2] | 0) + 60 | 0;
    if (Math_fround(HEAPF32[$x165 >> 2]) <= Math_fround(100.0)) HEAPF32[$x165 >> 2] = Math_fround(100.0);
   } else {
    $conv157 = +(_GetScreenWidth() | 0);
    $conv160 = Math_fround($conv157 - +__ZNK7Enemigo8getWidthEv($pnave1));
    HEAPF32[(HEAP32[$penemigo >> 2] | 0) + 60 >> 2] = $conv160;
   }
   $i172$092 = 0;
   do {
    $activo178 = $disparo + ($i172$092 * 28 | 0) | 0;
    if (HEAP8[$activo178 >> 0] | 0) {
     CSE$3 = $disparo + ($i172$092 * 28 | 0) | 0;
     $position182 = CSE$3 + 8 | 0;
     $y183 = CSE$3 + 12 | 0;
     $sub184 = Math_fround(Math_fround(HEAPF32[$y183 >> 2]) + Math_fround(-10.0));
     HEAPF32[$y183 >> 2] = $sub184;
     $Lifespown186 = CSE$3 + 16 | 0;
     $79 = HEAP32[$Lifespown186 >> 2] | 0;
     HEAP32[$Lifespown186 >> 2] = $79 + 1;
     $80 = HEAP32[$penemigo >> 2] | 0;
     HEAP32[$80 + 44 >> 2] = HEAP32[$80 + 60 >> 2];
     HEAP32[$80 + 48 >> 2] = HEAP32[$80 + 64 >> 2];
     if ($sub184 > Math_fround(800.0)) HEAP8[$activo178 >> 0] = 0; else {
      $83 = $position182;
      $88 = HEAP32[$83 + 4 >> 2] | 0;
      $89 = $agg$tmp207;
      HEAP32[$89 >> 2] = HEAP32[$83 >> 2];
      HEAP32[$89 + 4 >> 2] = $88;
      $93 = Math_fround(HEAPF32[$disparo + ($i172$092 * 28 | 0) + 24 >> 2]);
      HEAP8[$agg$tmp212 >> 0] = -26;
      HEAP8[$g214 >> 0] = 41;
      HEAP8[$b215 >> 0] = 55;
      HEAP8[$a216 >> 0] = -1;
      HEAP32[$tmpcast$byval_copy >> 2] = HEAP32[$agg$tmp207 >> 2];
      HEAP32[$tmpcast$byval_copy + 4 >> 2] = HEAP32[$agg$tmp207 + 4 >> 2];
      HEAP8[$agg$tmp287$byval_copy >> 0] = HEAP8[$agg$tmp212 >> 0] | 0;
      HEAP8[$agg$tmp287$byval_copy + 1 >> 0] = HEAP8[$agg$tmp212 + 1 >> 0] | 0;
      HEAP8[$agg$tmp287$byval_copy + 2 >> 0] = HEAP8[$agg$tmp212 + 2 >> 0] | 0;
      HEAP8[$agg$tmp287$byval_copy + 3 >> 0] = HEAP8[$agg$tmp212 + 3 >> 0] | 0;
      _DrawCircleV($tmpcast$byval_copy, $93, $agg$tmp287$byval_copy);
     }
     if (($79 | 0) > 78) {
      $101 = __ZNK4Nave10getNavePosEv(HEAP32[$player >> 2] | 0) | 0;
      $103 = HEAP32[$101 >> 2] | 0;
      $106 = HEAP32[$101 + 4 >> 2] | 0;
      $107 = $position182;
      HEAP32[$107 >> 2] = $103;
      HEAP32[$107 + 4 >> 2] = $106;
      HEAP32[$Lifespown186 >> 2] = 0;
      HEAP8[$activo178 >> 0] = 0;
      $113 = $103;
      $116 = $106;
     } else {
      $94 = $position182;
      $113 = HEAP32[$94 >> 2] | 0;
      $116 = HEAP32[$94 + 4 >> 2] | 0;
     }
     $111 = $agg$tmp230;
     HEAP32[$111 >> 2] = $113;
     HEAP32[$111 + 4 >> 2] = $116;
     $117 = Math_fround(HEAPF32[$disparo + ($i172$092 * 28 | 0) + 24 >> 2]);
     $jugador1Colision236 = (HEAP32[$penemigo >> 2] | 0) + 44 | 0;
     HEAP32[$tmpcast$byval_copy >> 2] = HEAP32[$agg$tmp230 >> 2];
     HEAP32[$tmpcast$byval_copy + 4 >> 2] = HEAP32[$agg$tmp230 + 4 >> 2];
     HEAP32[$agg$tmp287$byval_copy >> 2] = HEAP32[$jugador1Colision236 >> 2];
     HEAP32[$agg$tmp287$byval_copy + 4 >> 2] = HEAP32[$jugador1Colision236 + 4 >> 2];
     HEAP32[$agg$tmp287$byval_copy + 8 >> 2] = HEAP32[$jugador1Colision236 + 8 >> 2];
     HEAP32[$agg$tmp287$byval_copy + 12 >> 2] = HEAP32[$jugador1Colision236 + 12 >> 2];
     if (_CheckCollisionCircleRec($tmpcast$byval_copy, $117, $agg$tmp287$byval_copy) | 0) {
      $vida = (HEAP32[$penemigo >> 2] | 0) + 36 | 0;
      HEAP32[$vida >> 2] = (HEAP32[$vida >> 2] | 0) - $24;
      $call242 = __ZNSt3__2lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc(60344, 22028) | 0;
      __ZNKSt3__28ios_base6getlocEv($agg$tmp287$byval_copy, $call242 + (HEAP32[(HEAP32[$call242 >> 2] | 0) + -12 >> 2] | 0) | 0);
      $call$i1$i = __ZNKSt3__26locale9use_facetERNS0_2idE($agg$tmp287$byval_copy, 61216) | 0;
      $call$i2$i = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$call$i1$i >> 2] | 0) + 28 >> 2] & 31]($call$i1$i, 10) | 0;
      __ZNSt3__26localeD2Ev($agg$tmp287$byval_copy);
      __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE3putEc($call242, $call$i2$i) | 0;
      __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE5flushEv($call242) | 0;
      HEAP32[$Lifespown186 >> 2] = 0;
      HEAP8[$activo178 >> 0] = 0;
     }
    }
    $i172$092 = $i172$092 + 1 | 0;
   } while ($i172$092 >>> 0 < 4);
   $i254$094 = 0;
   do {
    $activo260 = $disparo1 + ($i254$094 * 28 | 0) | 0;
    if (HEAP8[$activo260 >> 0] | 0) {
     CSE$4 = $disparo1 + ($i254$094 * 28 | 0) | 0;
     $position264 = CSE$4 + 8 | 0;
     $y265 = CSE$4 + 12 | 0;
     $add266 = Math_fround(Math_fround(HEAPF32[$y265 >> 2]) + Math_fround(10.0));
     HEAPF32[$y265 >> 2] = $add266;
     $Lifespown268 = CSE$4 + 16 | 0;
     $inc269 = (HEAP32[$Lifespown268 >> 2] | 0) + 1 | 0;
     HEAP32[$Lifespown268 >> 2] = $inc269;
     if ($add266 < Math_fround(0.0)) {
      HEAP8[$activo260 >> 0] = 0;
      $137 = $inc269;
     } else {
      $126 = $position264;
      $131 = HEAP32[$126 + 4 >> 2] | 0;
      $132 = $agg$tmp282;
      HEAP32[$132 >> 2] = HEAP32[$126 >> 2];
      HEAP32[$132 + 4 >> 2] = $131;
      $136 = Math_fround(HEAPF32[$disparo1 + ($i254$094 * 28 | 0) + 24 >> 2]);
      HEAP8[$agg$tmp287 >> 0] = 0;
      HEAP8[$g289 >> 0] = 121;
      HEAP8[$b290 >> 0] = -15;
      HEAP8[$a291 >> 0] = -1;
      HEAP32[$tmpcast$byval_copy >> 2] = HEAP32[$agg$tmp282 >> 2];
      HEAP32[$tmpcast$byval_copy + 4 >> 2] = HEAP32[$agg$tmp282 + 4 >> 2];
      HEAP8[$agg$tmp287$byval_copy >> 0] = HEAP8[$agg$tmp287 >> 0] | 0;
      HEAP8[$agg$tmp287$byval_copy + 1 >> 0] = HEAP8[$agg$tmp287 + 1 >> 0] | 0;
      HEAP8[$agg$tmp287$byval_copy + 2 >> 0] = HEAP8[$agg$tmp287 + 2 >> 0] | 0;
      HEAP8[$agg$tmp287$byval_copy + 3 >> 0] = HEAP8[$agg$tmp287 + 3 >> 0] | 0;
      _DrawCircleV($tmpcast$byval_copy, $136, $agg$tmp287$byval_copy);
      $137 = HEAP32[$Lifespown268 >> 2] | 0;
     }
     if (($137 | 0) > 79) {
      $139 = __ZNK7Enemigo13getEnemigoPosEv(HEAP32[$penemigo >> 2] | 0) | 0;
      $144 = HEAP32[$139 + 4 >> 2] | 0;
      $145 = $position264;
      HEAP32[$145 >> 2] = HEAP32[$139 >> 2];
      HEAP32[$145 + 4 >> 2] = $144;
      HEAP32[$Lifespown268 >> 2] = 0;
      HEAP8[$activo260 >> 0] = 0;
     }
    }
    $i254$094 = $i254$094 + 1 | 0;
   } while (($i254$094 | 0) != 4);
   HEAPF32[4360] = Math_fround(Math_fround(HEAPF32[4360]) + Math_fround(1.0));
   _EndDrawing();
  } while (!(_WindowShouldClose() | 0));
 }
 STACKTOP = sp;
 return 0;
}

function __ZNSt3__211__money_putIcE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_Ri($__intl, $__neg, $__loc, $__pat, $__dp, $__ts, $__grp, $__sym, $__sn, $__fd) {
 $__intl = $__intl | 0;
 $__neg = $__neg | 0;
 $__loc = $__loc | 0;
 $__pat = $__pat | 0;
 $__dp = $__dp | 0;
 $__ts = $__ts | 0;
 $__grp = $__grp | 0;
 $__sym = $__sym | 0;
 $__sn = $__sn | 0;
 $__fd = $__fd | 0;
 var $$pre$phi244Z2D = 0, $$pre$phiZ2D = 0, $1 = 0, $11 = 0, $18 = 0, $23 = 0, $28 = 0, $31 = 0, $35 = 0, $38 = 0, $4 = 0, $45 = 0, $50 = 0, $8 = 0, $__cap_$i$i$i$i$i = 0, $__cap_$i$i$i$i$i111 = 0, $__cap_$i$i$i$i$i143 = 0, $__cap_$i$i$i$i$i171 = 0, $__cap_$i$i$i$i$i203 = 0, $__cap_$i$i$i$i$i229 = 0, $__cap_$i$i$i$i$i53 = 0, $__cap_$i$i$i$i$i85 = 0, $__i$0$i$i$i = 0, $__i$0$i$i$i116 = 0, $__i$0$i$i$i148 = 0, $__i$0$i$i$i176 = 0, $__i$0$i$i$i208 = 0, $__i$0$i$i$i234 = 0, $__i$0$i$i$i58 = 0, $__i$0$i$i$i90 = 0, $__size_$i1$i$i$i$i = 0, $__size_$i1$i$i$i$i102 = 0, $__size_$i1$i$i$i$i134 = 0, $__size_$i1$i$i$i$i162 = 0, $__size_$i1$i$i$i$i194 = 0, $__size_$i1$i$i$i$i220 = 0, $__size_$i1$i$i$i$i44 = 0, $__size_$i1$i$i$i$i76 = 0, $call$i = 0, $call$i126 = 0, $ref$tmp$i$i$i$i217 = 0, $ref$tmp4 = 0, $storemerge = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $ref$tmp$i$i$i$i217 = sp + 12 | 0;
 $ref$tmp4 = sp;
 if ($__intl) {
  $call$i = __ZNKSt3__26locale9use_facetERNS0_2idE($__loc, 61448) | 0;
  if ($__neg) {
   FUNCTION_TABLE_vii[HEAP32[(HEAP32[$call$i >> 2] | 0) + 44 >> 2] & 127]($ref$tmp$i$i$i$i217, $call$i);
   $1 = HEAP32[$ref$tmp$i$i$i$i217 >> 2] | 0;
   HEAP8[$__pat >> 0] = $1;
   HEAP8[$__pat + 1 >> 0] = $1 >> 8;
   HEAP8[$__pat + 2 >> 0] = $1 >> 16;
   HEAP8[$__pat + 3 >> 0] = $1 >> 24;
   FUNCTION_TABLE_vii[HEAP32[(HEAP32[$call$i >> 2] | 0) + 32 >> 2] & 127]($ref$tmp4, $call$i);
   $__size_$i1$i$i$i$i = $__sn + 11 | 0;
   if ((HEAP8[$__size_$i1$i$i$i$i >> 0] | 0) < 0) {
    $4 = HEAP32[$__sn >> 2] | 0;
    HEAP8[$ref$tmp$i$i$i$i217 >> 0] = 0;
    __ZNSt3__211char_traitsIcE6assignERcRKc($4, $ref$tmp$i$i$i$i217);
    HEAP32[$__sn + 4 >> 2] = 0;
    if ((HEAP8[$__size_$i1$i$i$i$i >> 0] | 0) < 0) {
     $__cap_$i$i$i$i$i = $__sn + 8 | 0;
     __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm(HEAP32[$__sn >> 2] | 0, HEAP32[$__cap_$i$i$i$i$i >> 2] & 2147483647);
     HEAP32[$__cap_$i$i$i$i$i >> 2] = 0;
    }
   } else {
    HEAP8[$ref$tmp$i$i$i$i217 >> 0] = 0;
    __ZNSt3__211char_traitsIcE6assignERcRKc($__sn, $ref$tmp$i$i$i$i217);
    HEAP8[$__size_$i1$i$i$i$i >> 0] = 0;
   };
   HEAP32[$__sn >> 2] = HEAP32[$ref$tmp4 >> 2];
   HEAP32[$__sn + 4 >> 2] = HEAP32[$ref$tmp4 + 4 >> 2];
   HEAP32[$__sn + 8 >> 2] = HEAP32[$ref$tmp4 + 8 >> 2];
   $__i$0$i$i$i = 0;
   while (1) {
    if (($__i$0$i$i$i | 0) == 3) break;
    HEAP32[$ref$tmp4 + ($__i$0$i$i$i << 2) >> 2] = 0;
    $__i$0$i$i$i = $__i$0$i$i$i + 1 | 0;
   }
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp4);
   $$pre$phiZ2D = $call$i;
  } else {
   FUNCTION_TABLE_vii[HEAP32[(HEAP32[$call$i >> 2] | 0) + 40 >> 2] & 127]($ref$tmp$i$i$i$i217, $call$i);
   $8 = HEAP32[$ref$tmp$i$i$i$i217 >> 2] | 0;
   HEAP8[$__pat >> 0] = $8;
   HEAP8[$__pat + 1 >> 0] = $8 >> 8;
   HEAP8[$__pat + 2 >> 0] = $8 >> 16;
   HEAP8[$__pat + 3 >> 0] = $8 >> 24;
   FUNCTION_TABLE_vii[HEAP32[(HEAP32[$call$i >> 2] | 0) + 28 >> 2] & 127]($ref$tmp4, $call$i);
   $__size_$i1$i$i$i$i44 = $__sn + 11 | 0;
   if ((HEAP8[$__size_$i1$i$i$i$i44 >> 0] | 0) < 0) {
    $11 = HEAP32[$__sn >> 2] | 0;
    HEAP8[$ref$tmp$i$i$i$i217 >> 0] = 0;
    __ZNSt3__211char_traitsIcE6assignERcRKc($11, $ref$tmp$i$i$i$i217);
    HEAP32[$__sn + 4 >> 2] = 0;
    if ((HEAP8[$__size_$i1$i$i$i$i44 >> 0] | 0) < 0) {
     $__cap_$i$i$i$i$i53 = $__sn + 8 | 0;
     __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm(HEAP32[$__sn >> 2] | 0, HEAP32[$__cap_$i$i$i$i$i53 >> 2] & 2147483647);
     HEAP32[$__cap_$i$i$i$i$i53 >> 2] = 0;
    }
   } else {
    HEAP8[$ref$tmp$i$i$i$i217 >> 0] = 0;
    __ZNSt3__211char_traitsIcE6assignERcRKc($__sn, $ref$tmp$i$i$i$i217);
    HEAP8[$__size_$i1$i$i$i$i44 >> 0] = 0;
   };
   HEAP32[$__sn >> 2] = HEAP32[$ref$tmp4 >> 2];
   HEAP32[$__sn + 4 >> 2] = HEAP32[$ref$tmp4 + 4 >> 2];
   HEAP32[$__sn + 8 >> 2] = HEAP32[$ref$tmp4 + 8 >> 2];
   $__i$0$i$i$i58 = 0;
   while (1) {
    if (($__i$0$i$i$i58 | 0) == 3) break;
    HEAP32[$ref$tmp4 + ($__i$0$i$i$i58 << 2) >> 2] = 0;
    $__i$0$i$i$i58 = $__i$0$i$i$i58 + 1 | 0;
   }
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp4);
   $$pre$phiZ2D = $call$i;
  }
  HEAP8[$__dp >> 0] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$call$i >> 2] | 0) + 12 >> 2] & 127]($call$i) | 0;
  HEAP8[$__ts >> 0] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$call$i >> 2] | 0) + 16 >> 2] & 127]($call$i) | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$$pre$phiZ2D >> 2] | 0) + 20 >> 2] & 127]($ref$tmp4, $call$i);
  $__size_$i1$i$i$i$i76 = $__grp + 11 | 0;
  if ((HEAP8[$__size_$i1$i$i$i$i76 >> 0] | 0) < 0) {
   $18 = HEAP32[$__grp >> 2] | 0;
   HEAP8[$ref$tmp$i$i$i$i217 >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($18, $ref$tmp$i$i$i$i217);
   HEAP32[$__grp + 4 >> 2] = 0;
   if ((HEAP8[$__size_$i1$i$i$i$i76 >> 0] | 0) < 0) {
    $__cap_$i$i$i$i$i85 = $__grp + 8 | 0;
    __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm(HEAP32[$__grp >> 2] | 0, HEAP32[$__cap_$i$i$i$i$i85 >> 2] & 2147483647);
    HEAP32[$__cap_$i$i$i$i$i85 >> 2] = 0;
   }
  } else {
   HEAP8[$ref$tmp$i$i$i$i217 >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($__grp, $ref$tmp$i$i$i$i217);
   HEAP8[$__size_$i1$i$i$i$i76 >> 0] = 0;
  };
  HEAP32[$__grp >> 2] = HEAP32[$ref$tmp4 >> 2];
  HEAP32[$__grp + 4 >> 2] = HEAP32[$ref$tmp4 + 4 >> 2];
  HEAP32[$__grp + 8 >> 2] = HEAP32[$ref$tmp4 + 8 >> 2];
  $__i$0$i$i$i90 = 0;
  while (1) {
   if (($__i$0$i$i$i90 | 0) == 3) break;
   HEAP32[$ref$tmp4 + ($__i$0$i$i$i90 << 2) >> 2] = 0;
   $__i$0$i$i$i90 = $__i$0$i$i$i90 + 1 | 0;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp4);
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$$pre$phiZ2D >> 2] | 0) + 24 >> 2] & 127]($ref$tmp4, $call$i);
  $__size_$i1$i$i$i$i102 = $__sym + 11 | 0;
  if ((HEAP8[$__size_$i1$i$i$i$i102 >> 0] | 0) < 0) {
   $23 = HEAP32[$__sym >> 2] | 0;
   HEAP8[$ref$tmp$i$i$i$i217 >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($23, $ref$tmp$i$i$i$i217);
   HEAP32[$__sym + 4 >> 2] = 0;
   if ((HEAP8[$__size_$i1$i$i$i$i102 >> 0] | 0) < 0) {
    $__cap_$i$i$i$i$i111 = $__sym + 8 | 0;
    __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm(HEAP32[$__sym >> 2] | 0, HEAP32[$__cap_$i$i$i$i$i111 >> 2] & 2147483647);
    HEAP32[$__cap_$i$i$i$i$i111 >> 2] = 0;
   }
  } else {
   HEAP8[$ref$tmp$i$i$i$i217 >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($__sym, $ref$tmp$i$i$i$i217);
   HEAP8[$__size_$i1$i$i$i$i102 >> 0] = 0;
  };
  HEAP32[$__sym >> 2] = HEAP32[$ref$tmp4 >> 2];
  HEAP32[$__sym + 4 >> 2] = HEAP32[$ref$tmp4 + 4 >> 2];
  HEAP32[$__sym + 8 >> 2] = HEAP32[$ref$tmp4 + 8 >> 2];
  $__i$0$i$i$i116 = 0;
  while (1) {
   if (($__i$0$i$i$i116 | 0) == 3) break;
   HEAP32[$ref$tmp4 + ($__i$0$i$i$i116 << 2) >> 2] = 0;
   $__i$0$i$i$i116 = $__i$0$i$i$i116 + 1 | 0;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp4);
  $storemerge = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$call$i >> 2] | 0) + 36 >> 2] & 127]($call$i) | 0;
 } else {
  $call$i126 = __ZNKSt3__26locale9use_facetERNS0_2idE($__loc, 61440) | 0;
  if ($__neg) {
   FUNCTION_TABLE_vii[HEAP32[(HEAP32[$call$i126 >> 2] | 0) + 44 >> 2] & 127]($ref$tmp$i$i$i$i217, $call$i126);
   $28 = HEAP32[$ref$tmp$i$i$i$i217 >> 2] | 0;
   HEAP8[$__pat >> 0] = $28;
   HEAP8[$__pat + 1 >> 0] = $28 >> 8;
   HEAP8[$__pat + 2 >> 0] = $28 >> 16;
   HEAP8[$__pat + 3 >> 0] = $28 >> 24;
   FUNCTION_TABLE_vii[HEAP32[(HEAP32[$call$i126 >> 2] | 0) + 32 >> 2] & 127]($ref$tmp4, $call$i126);
   $__size_$i1$i$i$i$i134 = $__sn + 11 | 0;
   if ((HEAP8[$__size_$i1$i$i$i$i134 >> 0] | 0) < 0) {
    $31 = HEAP32[$__sn >> 2] | 0;
    HEAP8[$ref$tmp$i$i$i$i217 >> 0] = 0;
    __ZNSt3__211char_traitsIcE6assignERcRKc($31, $ref$tmp$i$i$i$i217);
    HEAP32[$__sn + 4 >> 2] = 0;
    if ((HEAP8[$__size_$i1$i$i$i$i134 >> 0] | 0) < 0) {
     $__cap_$i$i$i$i$i143 = $__sn + 8 | 0;
     __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm(HEAP32[$__sn >> 2] | 0, HEAP32[$__cap_$i$i$i$i$i143 >> 2] & 2147483647);
     HEAP32[$__cap_$i$i$i$i$i143 >> 2] = 0;
    }
   } else {
    HEAP8[$ref$tmp$i$i$i$i217 >> 0] = 0;
    __ZNSt3__211char_traitsIcE6assignERcRKc($__sn, $ref$tmp$i$i$i$i217);
    HEAP8[$__size_$i1$i$i$i$i134 >> 0] = 0;
   };
   HEAP32[$__sn >> 2] = HEAP32[$ref$tmp4 >> 2];
   HEAP32[$__sn + 4 >> 2] = HEAP32[$ref$tmp4 + 4 >> 2];
   HEAP32[$__sn + 8 >> 2] = HEAP32[$ref$tmp4 + 8 >> 2];
   $__i$0$i$i$i148 = 0;
   while (1) {
    if (($__i$0$i$i$i148 | 0) == 3) break;
    HEAP32[$ref$tmp4 + ($__i$0$i$i$i148 << 2) >> 2] = 0;
    $__i$0$i$i$i148 = $__i$0$i$i$i148 + 1 | 0;
   }
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp4);
   $$pre$phi244Z2D = $call$i126;
  } else {
   FUNCTION_TABLE_vii[HEAP32[(HEAP32[$call$i126 >> 2] | 0) + 40 >> 2] & 127]($ref$tmp$i$i$i$i217, $call$i126);
   $35 = HEAP32[$ref$tmp$i$i$i$i217 >> 2] | 0;
   HEAP8[$__pat >> 0] = $35;
   HEAP8[$__pat + 1 >> 0] = $35 >> 8;
   HEAP8[$__pat + 2 >> 0] = $35 >> 16;
   HEAP8[$__pat + 3 >> 0] = $35 >> 24;
   FUNCTION_TABLE_vii[HEAP32[(HEAP32[$call$i126 >> 2] | 0) + 28 >> 2] & 127]($ref$tmp4, $call$i126);
   $__size_$i1$i$i$i$i162 = $__sn + 11 | 0;
   if ((HEAP8[$__size_$i1$i$i$i$i162 >> 0] | 0) < 0) {
    $38 = HEAP32[$__sn >> 2] | 0;
    HEAP8[$ref$tmp$i$i$i$i217 >> 0] = 0;
    __ZNSt3__211char_traitsIcE6assignERcRKc($38, $ref$tmp$i$i$i$i217);
    HEAP32[$__sn + 4 >> 2] = 0;
    if ((HEAP8[$__size_$i1$i$i$i$i162 >> 0] | 0) < 0) {
     $__cap_$i$i$i$i$i171 = $__sn + 8 | 0;
     __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm(HEAP32[$__sn >> 2] | 0, HEAP32[$__cap_$i$i$i$i$i171 >> 2] & 2147483647);
     HEAP32[$__cap_$i$i$i$i$i171 >> 2] = 0;
    }
   } else {
    HEAP8[$ref$tmp$i$i$i$i217 >> 0] = 0;
    __ZNSt3__211char_traitsIcE6assignERcRKc($__sn, $ref$tmp$i$i$i$i217);
    HEAP8[$__size_$i1$i$i$i$i162 >> 0] = 0;
   };
   HEAP32[$__sn >> 2] = HEAP32[$ref$tmp4 >> 2];
   HEAP32[$__sn + 4 >> 2] = HEAP32[$ref$tmp4 + 4 >> 2];
   HEAP32[$__sn + 8 >> 2] = HEAP32[$ref$tmp4 + 8 >> 2];
   $__i$0$i$i$i176 = 0;
   while (1) {
    if (($__i$0$i$i$i176 | 0) == 3) break;
    HEAP32[$ref$tmp4 + ($__i$0$i$i$i176 << 2) >> 2] = 0;
    $__i$0$i$i$i176 = $__i$0$i$i$i176 + 1 | 0;
   }
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp4);
   $$pre$phi244Z2D = $call$i126;
  }
  HEAP8[$__dp >> 0] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$call$i126 >> 2] | 0) + 12 >> 2] & 127]($call$i126) | 0;
  HEAP8[$__ts >> 0] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$call$i126 >> 2] | 0) + 16 >> 2] & 127]($call$i126) | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$$pre$phi244Z2D >> 2] | 0) + 20 >> 2] & 127]($ref$tmp4, $call$i126);
  $__size_$i1$i$i$i$i194 = $__grp + 11 | 0;
  if ((HEAP8[$__size_$i1$i$i$i$i194 >> 0] | 0) < 0) {
   $45 = HEAP32[$__grp >> 2] | 0;
   HEAP8[$ref$tmp$i$i$i$i217 >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($45, $ref$tmp$i$i$i$i217);
   HEAP32[$__grp + 4 >> 2] = 0;
   if ((HEAP8[$__size_$i1$i$i$i$i194 >> 0] | 0) < 0) {
    $__cap_$i$i$i$i$i203 = $__grp + 8 | 0;
    __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm(HEAP32[$__grp >> 2] | 0, HEAP32[$__cap_$i$i$i$i$i203 >> 2] & 2147483647);
    HEAP32[$__cap_$i$i$i$i$i203 >> 2] = 0;
   }
  } else {
   HEAP8[$ref$tmp$i$i$i$i217 >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($__grp, $ref$tmp$i$i$i$i217);
   HEAP8[$__size_$i1$i$i$i$i194 >> 0] = 0;
  };
  HEAP32[$__grp >> 2] = HEAP32[$ref$tmp4 >> 2];
  HEAP32[$__grp + 4 >> 2] = HEAP32[$ref$tmp4 + 4 >> 2];
  HEAP32[$__grp + 8 >> 2] = HEAP32[$ref$tmp4 + 8 >> 2];
  $__i$0$i$i$i208 = 0;
  while (1) {
   if (($__i$0$i$i$i208 | 0) == 3) break;
   HEAP32[$ref$tmp4 + ($__i$0$i$i$i208 << 2) >> 2] = 0;
   $__i$0$i$i$i208 = $__i$0$i$i$i208 + 1 | 0;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp4);
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$$pre$phi244Z2D >> 2] | 0) + 24 >> 2] & 127]($ref$tmp4, $call$i126);
  $__size_$i1$i$i$i$i220 = $__sym + 11 | 0;
  if ((HEAP8[$__size_$i1$i$i$i$i220 >> 0] | 0) < 0) {
   $50 = HEAP32[$__sym >> 2] | 0;
   HEAP8[$ref$tmp$i$i$i$i217 >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($50, $ref$tmp$i$i$i$i217);
   HEAP32[$__sym + 4 >> 2] = 0;
   if ((HEAP8[$__size_$i1$i$i$i$i220 >> 0] | 0) < 0) {
    $__cap_$i$i$i$i$i229 = $__sym + 8 | 0;
    __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm(HEAP32[$__sym >> 2] | 0, HEAP32[$__cap_$i$i$i$i$i229 >> 2] & 2147483647);
    HEAP32[$__cap_$i$i$i$i$i229 >> 2] = 0;
   }
  } else {
   HEAP8[$ref$tmp$i$i$i$i217 >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($__sym, $ref$tmp$i$i$i$i217);
   HEAP8[$__size_$i1$i$i$i$i220 >> 0] = 0;
  };
  HEAP32[$__sym >> 2] = HEAP32[$ref$tmp4 >> 2];
  HEAP32[$__sym + 4 >> 2] = HEAP32[$ref$tmp4 + 4 >> 2];
  HEAP32[$__sym + 8 >> 2] = HEAP32[$ref$tmp4 + 8 >> 2];
  $__i$0$i$i$i234 = 0;
  while (1) {
   if (($__i$0$i$i$i234 | 0) == 3) break;
   HEAP32[$ref$tmp4 + ($__i$0$i$i$i234 << 2) >> 2] = 0;
   $__i$0$i$i$i234 = $__i$0$i$i$i234 + 1 | 0;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp4);
  $storemerge = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$call$i126 >> 2] | 0) + 36 >> 2] & 127]($call$i126) | 0;
 }
 HEAP32[$__fd >> 2] = $storemerge;
 STACKTOP = sp;
 return;
}

function __ZN4tson4Tile5parseERKN8nlohmann10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS1_14adl_serializerEEE($this, $json) {
 $this = $this | 0;
 $json = $json | 0;
 var $1 = 0, $13 = 0, $14 = 0, $5 = 0, $8 = 0, $__cap_$i$i$i$i$i = 0, $__cap_$i$i$i$i$i$i = 0, $__size_$i1$i$i$i$i = 0, $__size_$i1$i$i$i$i$i = 0, $agg$tmp = 0, $agg$tmp43 = 0, $agg$tmp54 = 0, $agg$tmp56 = 0, $agg$tmp5835 = 0, $agg$tmp69 = 0, $agg$tmp71 = 0, $allFound$0$off0 = 0, $call32 = 0, $m_image = 0, $m_type = 0, $ref$tmp = 0, $ref$tmp2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 352 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(352);
 $agg$tmp5835 = sp;
 $ref$tmp = sp + 248 | 0;
 $ref$tmp2 = sp + 220 | 0;
 $agg$tmp = sp + 328 | 0;
 $agg$tmp43 = sp + 312 | 0;
 $agg$tmp54 = sp + 296 | 0;
 $agg$tmp56 = sp + 280 | 0;
 $agg$tmp69 = sp + 264 | 0;
 $agg$tmp71 = sp + 232 | 0;
 if (__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE5countIRA6_KcEEmOT_($json, 23037) | 0) {
  __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE3getIS9_S9_Li0EEET0_v($ref$tmp2, __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEixIKcEERKSB_PT_($json, 23037) | 0);
  HEAP32[$ref$tmp >> 2] = HEAP32[$ref$tmp2 >> 2];
  HEAP32[$ref$tmp + 4 >> 2] = HEAP32[$ref$tmp2 + 4 >> 2];
  HEAP32[$ref$tmp + 8 >> 2] = HEAP32[$ref$tmp2 + 8 >> 2];
  HEAP32[$ref$tmp2 >> 2] = 0;
  HEAP32[$ref$tmp2 + 4 >> 2] = 0;
  HEAP32[$ref$tmp2 + 8 >> 2] = 0;
  $m_image = $this + 16 | 0;
  $__size_$i1$i$i$i$i$i = $m_image + 11 | 0;
  if ((HEAP8[$__size_$i1$i$i$i$i$i >> 0] | 0) < 0) {
   $1 = HEAP32[$m_image >> 2] | 0;
   HEAP8[$agg$tmp5835 >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($1, $agg$tmp5835);
   HEAP32[$this + 20 >> 2] = 0;
   if ((HEAP8[$__size_$i1$i$i$i$i$i >> 0] | 0) < 0) {
    $__cap_$i$i$i$i$i$i = $this + 24 | 0;
    __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm(HEAP32[$m_image >> 2] | 0, HEAP32[$__cap_$i$i$i$i$i$i >> 2] & 2147483647);
    HEAP32[$__cap_$i$i$i$i$i$i >> 2] = 0;
   }
  } else {
   HEAP8[$agg$tmp5835 >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($m_image, $agg$tmp5835);
   HEAP8[$__size_$i1$i$i$i$i$i >> 0] = 0;
  };
  HEAP32[$m_image >> 2] = HEAP32[$ref$tmp >> 2];
  HEAP32[$m_image + 4 >> 2] = HEAP32[$ref$tmp + 4 >> 2];
  HEAP32[$m_image + 8 >> 2] = HEAP32[$ref$tmp + 8 >> 2];
  HEAP32[$ref$tmp >> 2] = 0;
  HEAP32[$ref$tmp + 4 >> 2] = 0;
  HEAP32[$ref$tmp + 8 >> 2] = 0;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp);
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp2);
 }
 if (!(__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE5countIRA3_KcEEmOT_($json, 23157) | 0)) $allFound$0$off0 = 0; else {
  HEAP32[$this + 12 >> 2] = (__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE3getIiiLi0EEET0_v(__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEixIKcEERKSB_PT_($json, 23157) | 0) | 0) + 1;
  $allFound$0$off0 = 1;
 }
 if (__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE5countIRA5_KcEEmOT_($json, 22556) | 0) {
  __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE3getIS9_S9_Li0EEET0_v($ref$tmp, __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEixIKcEERKSB_PT_($json, 22556) | 0);
  $m_type = $this + 292 | 0;
  $__size_$i1$i$i$i$i = $m_type + 11 | 0;
  if ((HEAP8[$__size_$i1$i$i$i$i >> 0] | 0) < 0) {
   $5 = HEAP32[$m_type >> 2] | 0;
   HEAP8[$agg$tmp5835 >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($5, $agg$tmp5835);
   HEAP32[$this + 296 >> 2] = 0;
   if ((HEAP8[$__size_$i1$i$i$i$i >> 0] | 0) < 0) {
    $__cap_$i$i$i$i$i = $this + 300 | 0;
    __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm(HEAP32[$m_type >> 2] | 0, HEAP32[$__cap_$i$i$i$i$i >> 2] & 2147483647);
    HEAP32[$__cap_$i$i$i$i$i >> 2] = 0;
   }
  } else {
   HEAP8[$agg$tmp5835 >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($m_type, $agg$tmp5835);
   HEAP8[$__size_$i1$i$i$i$i >> 0] = 0;
  };
  HEAP32[$m_type >> 2] = HEAP32[$ref$tmp >> 2];
  HEAP32[$m_type + 4 >> 2] = HEAP32[$ref$tmp + 4 >> 2];
  HEAP32[$m_type + 8 >> 2] = HEAP32[$ref$tmp + 8 >> 2];
  HEAP32[$ref$tmp >> 2] = 0;
  HEAP32[$ref$tmp + 4 >> 2] = 0;
  HEAP32[$ref$tmp + 8 >> 2] = 0;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp);
 }
 if (__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE5countIRA12_KcEEmOT_($json, 23160) | 0) {
  __ZN4tson5LayerC2ERKN8nlohmann10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS1_14adl_serializerEEE($agg$tmp5835, __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEixIKcEERKSB_PT_($json, 23160) | 0);
  __ZN4tson5LayeraSEOS0_($this + 36 | 0, $agg$tmp5835) | 0;
  __ZN4tson5LayerD2Ev($agg$tmp5835);
 }
 if (__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE5countIRA11_KcEEmOT_($json, 23090) | 0) if (__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE5countIRA12_KcEEmOT_($json, 23101) | 0) {
  $call32 = __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE3getIiiLi0EEET0_v(__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEixIKcEERKSB_PT_($json, 23090) | 0) | 0;
  __ZN4tson7Vector2IiEC2Eii($agg$tmp5835, $call32, __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE3getIiiLi0EEET0_v(__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEixIKcEERKSB_PT_($json, 23101) | 0) | 0);
  $8 = $agg$tmp5835;
  $13 = HEAP32[$8 + 4 >> 2] | 0;
  $14 = $this + 28 | 0;
  HEAP32[$14 >> 2] = HEAP32[$8 >> 2];
  HEAP32[$14 + 4 >> 2] = $13;
 }
 if (__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE5countIRA10_KcEEmOT_($json, 23172) | 0) if (__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE8is_arrayEv(__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEixIKcEERKSB_PT_($json, 23172) | 0) | 0) {
  __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE5beginEv($agg$tmp, __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEixIKcEERKSB_PT_($json, 23172) | 0);
  __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE3endEv($agg$tmp43, __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEixIKcEERKSB_PT_($json, 23172) | 0);
  HEAP32[$agg$tmp5835 >> 2] = $this;
  if (__ZNK8nlohmann6detail9iter_implIKNS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEEneERKSF_($agg$tmp, $agg$tmp43) | 0) do {
   __ZZN4tson4Tile5parseERKN8nlohmann10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS1_14adl_serializerEEEENKUlSF_E_clESF_($agg$tmp5835, __ZNK8nlohmann6detail9iter_implIKNS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEEdeEv($agg$tmp) | 0);
   __ZN8nlohmann6detail9iter_implIKNS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEEppEv($agg$tmp) | 0;
  } while (__ZNK8nlohmann6detail9iter_implIKNS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEEneERKSF_($agg$tmp, $agg$tmp43) | 0);
 }
 if (__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE5countIRA8_KcEEmOT_($json, 23182) | 0) if (__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE8is_arrayEv(__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEixIKcEERKSB_PT_($json, 23182) | 0) | 0) {
  __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE5beginEv($agg$tmp54, __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEixIKcEERKSB_PT_($json, 23182) | 0);
  __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE3endEv($agg$tmp56, __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEixIKcEERKSB_PT_($json, 23182) | 0);
  HEAP32[$agg$tmp5835 >> 2] = $this;
  if (__ZNK8nlohmann6detail9iter_implIKNS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEEneERKSF_($agg$tmp54, $agg$tmp56) | 0) do {
   __ZZN4tson4Tile5parseERKN8nlohmann10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS1_14adl_serializerEEEENKUlSF_E0_clESF_($agg$tmp5835, __ZNK8nlohmann6detail9iter_implIKNS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEEdeEv($agg$tmp54) | 0);
   __ZN8nlohmann6detail9iter_implIKNS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEEppEv($agg$tmp54) | 0;
  } while (__ZNK8nlohmann6detail9iter_implIKNS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEEneERKSF_($agg$tmp54, $agg$tmp56) | 0);
 }
 if (__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE5countIRA11_KcEEmOT_($json, 22585) | 0) if (__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE8is_arrayEv(__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEixIKcEERKSB_PT_($json, 22585) | 0) | 0) {
  __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE5beginEv($agg$tmp69, __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEixIKcEERKSB_PT_($json, 22585) | 0);
  __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE3endEv($agg$tmp71, __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEixIKcEERKSB_PT_($json, 22585) | 0);
  HEAP32[$agg$tmp5835 >> 2] = $this;
  if (__ZNK8nlohmann6detail9iter_implIKNS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEEneERKSF_($agg$tmp69, $agg$tmp71) | 0) do {
   __ZZN4tson4Tile5parseERKN8nlohmann10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS1_14adl_serializerEEEENKUlSF_E1_clESF_($agg$tmp5835, __ZNK8nlohmann6detail9iter_implIKNS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEEdeEv($agg$tmp69) | 0);
   __ZN8nlohmann6detail9iter_implIKNS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEEppEv($agg$tmp69) | 0;
  } while (__ZNK8nlohmann6detail9iter_implIKNS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEEneERKSF_($agg$tmp69, $agg$tmp71) | 0);
 }
 STACKTOP = sp;
 return $allFound$0$off0 | 0;
}

function _free($mem) {
 $mem = $mem | 0;
 var $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $23 = 0, $24 = 0, $25 = 0, $27 = 0, $28 = 0, $29 = 0, $35 = 0, $36 = 0, $4 = 0, $42 = 0, $43 = 0, $44 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $53 = 0, $58 = 0, $59 = 0, $60 = 0, $63 = 0, $64 = 0, $65 = 0, $67 = 0, $68 = 0, $70 = 0, $73 = 0, $74 = 0, $9 = 0, $F510$0 = 0, $I534$0 = 0, $K583$0312 = 0, $R$1 = 0, $R$1$be = 0, $R$1$ph = 0, $R$3 = 0, $R332$1 = 0, $R332$1$be = 0, $R332$1$ph = 0, $R332$3 = 0, $RP$1 = 0, $RP$1$be = 0, $RP$1$ph = 0, $RP360$1 = 0, $RP360$1$be = 0, $RP360$1$ph = 0, $T$0$lcssa = 0, $T$0311 = 0, $add$ptr = 0, $add$ptr16 = 0, $add$ptr6 = 0, $add17 = 0, $add246 = 0, $add258 = 0, $add267 = 0, $add559 = 0, $and = 0, $and5 = 0, $and545 = 0, $and549 = 0, $and554 = 0, $arrayidx = 0, $arrayidx108 = 0, $arrayidx113 = 0, $arrayidx130 = 0, $arrayidx149 = 0, $arrayidx279 = 0, $arrayidx362 = 0, $arrayidx374 = 0, $arrayidx379 = 0, $arrayidx400 = 0, $arrayidx419 = 0, $arrayidx509 = 0, $arrayidx567 = 0, $arrayidx599 = 0, $arrayidx99 = 0, $bk343 = 0, $bk82 = 0, $child = 0, $child171 = 0, $child361 = 0, $child443 = 0, $dec = 0, $fd311 = 0, $fd322$pre$phiZ2D = 0, $fd347 = 0, $fd56 = 0, $fd620 = 0, $fd67$pre$phiZ2D = 0, $fd86 = 0, $head209 = 0, $head231 = 0, $p$1 = 0, $psize$1 = 0, $psize$2 = 0, $shl511 = 0, $shl546 = 0, $shl551 = 0, $shl573 = 0, $shr = 0, $shr268 = 0, $shr501 = 0, $shr535 = 0, $sp$0$i = 0, $sp$0$in$i = 0;
 if (!$mem) return;
 $add$ptr = $mem + -8 | 0;
 $0 = HEAP32[15415] | 0;
 if ($add$ptr >>> 0 < $0 >>> 0) _abort();
 $1 = HEAP32[$mem + -4 >> 2] | 0;
 $and = $1 & 3;
 if (($and | 0) == 1) _abort();
 $and5 = $1 & -8;
 $add$ptr6 = $add$ptr + $and5 | 0;
 L10 : do if (!($1 & 1)) {
  $2 = HEAP32[$add$ptr >> 2] | 0;
  if (!$and) return;
  $add$ptr16 = $add$ptr + (0 - $2) | 0;
  $add17 = $2 + $and5 | 0;
  if ($add$ptr16 >>> 0 < $0 >>> 0) _abort();
  if ((HEAP32[15416] | 0) == ($add$ptr16 | 0)) {
   $head209 = $add$ptr6 + 4 | 0;
   $27 = HEAP32[$head209 >> 2] | 0;
   if (($27 & 3 | 0) != 3) {
    $28 = $add$ptr16;
    $p$1 = $add$ptr16;
    $psize$1 = $add17;
    break;
   }
   HEAP32[15413] = $add17;
   HEAP32[$head209 >> 2] = $27 & -2;
   HEAP32[$add$ptr16 + 4 >> 2] = $add17 | 1;
   HEAP32[$add$ptr16 + $add17 >> 2] = $add17;
   return;
  }
  $shr = $2 >>> 3;
  if ($2 >>> 0 < 256) {
   $4 = HEAP32[$add$ptr16 + 8 >> 2] | 0;
   $5 = HEAP32[$add$ptr16 + 12 >> 2] | 0;
   $arrayidx = 61684 + ($shr << 1 << 2) | 0;
   if (($4 | 0) != ($arrayidx | 0)) {
    if ($0 >>> 0 > $4 >>> 0) _abort();
    if ((HEAP32[$4 + 12 >> 2] | 0) != ($add$ptr16 | 0)) _abort();
   }
   if (($5 | 0) == ($4 | 0)) {
    HEAP32[15411] = HEAP32[15411] & ~(1 << $shr);
    $28 = $add$ptr16;
    $p$1 = $add$ptr16;
    $psize$1 = $add17;
    break;
   }
   if (($5 | 0) == ($arrayidx | 0)) $fd67$pre$phiZ2D = $5 + 8 | 0; else {
    if ($0 >>> 0 > $5 >>> 0) _abort();
    $fd56 = $5 + 8 | 0;
    if ((HEAP32[$fd56 >> 2] | 0) == ($add$ptr16 | 0)) $fd67$pre$phiZ2D = $fd56; else _abort();
   }
   HEAP32[$4 + 12 >> 2] = $5;
   HEAP32[$fd67$pre$phiZ2D >> 2] = $4;
   $28 = $add$ptr16;
   $p$1 = $add$ptr16;
   $psize$1 = $add17;
   break;
  }
  $9 = HEAP32[$add$ptr16 + 24 >> 2] | 0;
  $10 = HEAP32[$add$ptr16 + 12 >> 2] | 0;
  do if (($10 | 0) == ($add$ptr16 | 0)) {
   $child = $add$ptr16 + 16 | 0;
   $arrayidx99 = $child + 4 | 0;
   $14 = HEAP32[$arrayidx99 >> 2] | 0;
   if (!$14) {
    $15 = HEAP32[$child >> 2] | 0;
    if (!$15) {
     $R$3 = 0;
     break;
    } else {
     $R$1$ph = $15;
     $RP$1$ph = $child;
    }
   } else {
    $R$1$ph = $14;
    $RP$1$ph = $arrayidx99;
   }
   $R$1 = $R$1$ph;
   $RP$1 = $RP$1$ph;
   while (1) {
    $arrayidx108 = $R$1 + 20 | 0;
    $16 = HEAP32[$arrayidx108 >> 2] | 0;
    if (!$16) {
     $arrayidx113 = $R$1 + 16 | 0;
     $17 = HEAP32[$arrayidx113 >> 2] | 0;
     if (!$17) break; else {
      $R$1$be = $17;
      $RP$1$be = $arrayidx113;
     }
    } else {
     $R$1$be = $16;
     $RP$1$be = $arrayidx108;
    }
    $R$1 = $R$1$be;
    $RP$1 = $RP$1$be;
   }
   if ($0 >>> 0 > $RP$1 >>> 0) _abort(); else {
    HEAP32[$RP$1 >> 2] = 0;
    $R$3 = $R$1;
    break;
   }
  } else {
   $11 = HEAP32[$add$ptr16 + 8 >> 2] | 0;
   if ($0 >>> 0 > $11 >>> 0) _abort();
   $bk82 = $11 + 12 | 0;
   if ((HEAP32[$bk82 >> 2] | 0) != ($add$ptr16 | 0)) _abort();
   $fd86 = $10 + 8 | 0;
   if ((HEAP32[$fd86 >> 2] | 0) == ($add$ptr16 | 0)) {
    HEAP32[$bk82 >> 2] = $10;
    HEAP32[$fd86 >> 2] = $11;
    $R$3 = $10;
    break;
   } else _abort();
  } while (0);
  if (!$9) {
   $28 = $add$ptr16;
   $p$1 = $add$ptr16;
   $psize$1 = $add17;
  } else {
   $18 = HEAP32[$add$ptr16 + 28 >> 2] | 0;
   $arrayidx130 = 61948 + ($18 << 2) | 0;
   do if ((HEAP32[$arrayidx130 >> 2] | 0) == ($add$ptr16 | 0)) {
    HEAP32[$arrayidx130 >> 2] = $R$3;
    if (!$R$3) {
     HEAP32[15412] = HEAP32[15412] & ~(1 << $18);
     $28 = $add$ptr16;
     $p$1 = $add$ptr16;
     $psize$1 = $add17;
     break L10;
    }
   } else if ((HEAP32[15415] | 0) >>> 0 > $9 >>> 0) _abort(); else {
    $arrayidx149 = $9 + 16 | 0;
    HEAP32[((HEAP32[$arrayidx149 >> 2] | 0) == ($add$ptr16 | 0) ? $arrayidx149 : $9 + 20 | 0) >> 2] = $R$3;
    if (!$R$3) {
     $28 = $add$ptr16;
     $p$1 = $add$ptr16;
     $psize$1 = $add17;
     break L10;
    } else break;
   } while (0);
   $23 = HEAP32[15415] | 0;
   if ($23 >>> 0 > $R$3 >>> 0) _abort();
   HEAP32[$R$3 + 24 >> 2] = $9;
   $child171 = $add$ptr16 + 16 | 0;
   $24 = HEAP32[$child171 >> 2] | 0;
   do if ($24 | 0) if ($23 >>> 0 > $24 >>> 0) _abort(); else {
    HEAP32[$R$3 + 16 >> 2] = $24;
    HEAP32[$24 + 24 >> 2] = $R$3;
    break;
   } while (0);
   $25 = HEAP32[$child171 + 4 >> 2] | 0;
   if (!$25) {
    $28 = $add$ptr16;
    $p$1 = $add$ptr16;
    $psize$1 = $add17;
   } else if ((HEAP32[15415] | 0) >>> 0 > $25 >>> 0) _abort(); else {
    HEAP32[$R$3 + 20 >> 2] = $25;
    HEAP32[$25 + 24 >> 2] = $R$3;
    $28 = $add$ptr16;
    $p$1 = $add$ptr16;
    $psize$1 = $add17;
    break;
   }
  }
 } else {
  $28 = $add$ptr;
  $p$1 = $add$ptr;
  $psize$1 = $and5;
 } while (0);
 if ($28 >>> 0 >= $add$ptr6 >>> 0) _abort();
 $head231 = $add$ptr6 + 4 | 0;
 $29 = HEAP32[$head231 >> 2] | 0;
 if (!($29 & 1)) _abort();
 if (!($29 & 2)) {
  if ((HEAP32[15417] | 0) == ($add$ptr6 | 0)) {
   $add246 = (HEAP32[15414] | 0) + $psize$1 | 0;
   HEAP32[15414] = $add246;
   HEAP32[15417] = $p$1;
   HEAP32[$p$1 + 4 >> 2] = $add246 | 1;
   if (($p$1 | 0) != (HEAP32[15416] | 0)) return;
   HEAP32[15416] = 0;
   HEAP32[15413] = 0;
   return;
  }
  if ((HEAP32[15416] | 0) == ($add$ptr6 | 0)) {
   $add258 = (HEAP32[15413] | 0) + $psize$1 | 0;
   HEAP32[15413] = $add258;
   HEAP32[15416] = $28;
   HEAP32[$p$1 + 4 >> 2] = $add258 | 1;
   HEAP32[$28 + $add258 >> 2] = $add258;
   return;
  }
  $add267 = ($29 & -8) + $psize$1 | 0;
  $shr268 = $29 >>> 3;
  L111 : do if ($29 >>> 0 < 256) {
   $35 = HEAP32[$add$ptr6 + 8 >> 2] | 0;
   $36 = HEAP32[$add$ptr6 + 12 >> 2] | 0;
   $arrayidx279 = 61684 + ($shr268 << 1 << 2) | 0;
   if (($35 | 0) != ($arrayidx279 | 0)) {
    if ((HEAP32[15415] | 0) >>> 0 > $35 >>> 0) _abort();
    if ((HEAP32[$35 + 12 >> 2] | 0) != ($add$ptr6 | 0)) _abort();
   }
   if (($36 | 0) == ($35 | 0)) {
    HEAP32[15411] = HEAP32[15411] & ~(1 << $shr268);
    break;
   }
   if (($36 | 0) == ($arrayidx279 | 0)) $fd322$pre$phiZ2D = $36 + 8 | 0; else {
    if ((HEAP32[15415] | 0) >>> 0 > $36 >>> 0) _abort();
    $fd311 = $36 + 8 | 0;
    if ((HEAP32[$fd311 >> 2] | 0) == ($add$ptr6 | 0)) $fd322$pre$phiZ2D = $fd311; else _abort();
   }
   HEAP32[$35 + 12 >> 2] = $36;
   HEAP32[$fd322$pre$phiZ2D >> 2] = $35;
  } else {
   $42 = HEAP32[$add$ptr6 + 24 >> 2] | 0;
   $43 = HEAP32[$add$ptr6 + 12 >> 2] | 0;
   do if (($43 | 0) == ($add$ptr6 | 0)) {
    $child361 = $add$ptr6 + 16 | 0;
    $arrayidx362 = $child361 + 4 | 0;
    $48 = HEAP32[$arrayidx362 >> 2] | 0;
    if (!$48) {
     $49 = HEAP32[$child361 >> 2] | 0;
     if (!$49) {
      $R332$3 = 0;
      break;
     } else {
      $R332$1$ph = $49;
      $RP360$1$ph = $child361;
     }
    } else {
     $R332$1$ph = $48;
     $RP360$1$ph = $arrayidx362;
    }
    $R332$1 = $R332$1$ph;
    $RP360$1 = $RP360$1$ph;
    while (1) {
     $arrayidx374 = $R332$1 + 20 | 0;
     $50 = HEAP32[$arrayidx374 >> 2] | 0;
     if (!$50) {
      $arrayidx379 = $R332$1 + 16 | 0;
      $51 = HEAP32[$arrayidx379 >> 2] | 0;
      if (!$51) break; else {
       $R332$1$be = $51;
       $RP360$1$be = $arrayidx379;
      }
     } else {
      $R332$1$be = $50;
      $RP360$1$be = $arrayidx374;
     }
     $R332$1 = $R332$1$be;
     $RP360$1 = $RP360$1$be;
    }
    if ((HEAP32[15415] | 0) >>> 0 > $RP360$1 >>> 0) _abort(); else {
     HEAP32[$RP360$1 >> 2] = 0;
     $R332$3 = $R332$1;
     break;
    }
   } else {
    $44 = HEAP32[$add$ptr6 + 8 >> 2] | 0;
    if ((HEAP32[15415] | 0) >>> 0 > $44 >>> 0) _abort();
    $bk343 = $44 + 12 | 0;
    if ((HEAP32[$bk343 >> 2] | 0) != ($add$ptr6 | 0)) _abort();
    $fd347 = $43 + 8 | 0;
    if ((HEAP32[$fd347 >> 2] | 0) == ($add$ptr6 | 0)) {
     HEAP32[$bk343 >> 2] = $43;
     HEAP32[$fd347 >> 2] = $44;
     $R332$3 = $43;
     break;
    } else _abort();
   } while (0);
   if ($42 | 0) {
    $53 = HEAP32[$add$ptr6 + 28 >> 2] | 0;
    $arrayidx400 = 61948 + ($53 << 2) | 0;
    do if ((HEAP32[$arrayidx400 >> 2] | 0) == ($add$ptr6 | 0)) {
     HEAP32[$arrayidx400 >> 2] = $R332$3;
     if (!$R332$3) {
      HEAP32[15412] = HEAP32[15412] & ~(1 << $53);
      break L111;
     }
    } else if ((HEAP32[15415] | 0) >>> 0 > $42 >>> 0) _abort(); else {
     $arrayidx419 = $42 + 16 | 0;
     HEAP32[((HEAP32[$arrayidx419 >> 2] | 0) == ($add$ptr6 | 0) ? $arrayidx419 : $42 + 20 | 0) >> 2] = $R332$3;
     if (!$R332$3) break L111; else break;
    } while (0);
    $58 = HEAP32[15415] | 0;
    if ($58 >>> 0 > $R332$3 >>> 0) _abort();
    HEAP32[$R332$3 + 24 >> 2] = $42;
    $child443 = $add$ptr6 + 16 | 0;
    $59 = HEAP32[$child443 >> 2] | 0;
    do if ($59 | 0) if ($58 >>> 0 > $59 >>> 0) _abort(); else {
     HEAP32[$R332$3 + 16 >> 2] = $59;
     HEAP32[$59 + 24 >> 2] = $R332$3;
     break;
    } while (0);
    $60 = HEAP32[$child443 + 4 >> 2] | 0;
    if ($60 | 0) if ((HEAP32[15415] | 0) >>> 0 > $60 >>> 0) _abort(); else {
     HEAP32[$R332$3 + 20 >> 2] = $60;
     HEAP32[$60 + 24 >> 2] = $R332$3;
     break;
    }
   }
  } while (0);
  HEAP32[$p$1 + 4 >> 2] = $add267 | 1;
  HEAP32[$28 + $add267 >> 2] = $add267;
  if (($p$1 | 0) == (HEAP32[15416] | 0)) {
   HEAP32[15413] = $add267;
   return;
  } else $psize$2 = $add267;
 } else {
  HEAP32[$head231 >> 2] = $29 & -2;
  HEAP32[$p$1 + 4 >> 2] = $psize$1 | 1;
  HEAP32[$28 + $psize$1 >> 2] = $psize$1;
  $psize$2 = $psize$1;
 }
 $shr501 = $psize$2 >>> 3;
 if ($psize$2 >>> 0 < 256) {
  $arrayidx509 = 61684 + ($shr501 << 1 << 2) | 0;
  $63 = HEAP32[15411] | 0;
  $shl511 = 1 << $shr501;
  if (!($63 & $shl511)) {
   HEAP32[15411] = $63 | $shl511;
   $$pre$phiZ2D = $arrayidx509 + 8 | 0;
   $F510$0 = $arrayidx509;
  } else {
   $64 = $arrayidx509 + 8 | 0;
   $65 = HEAP32[$64 >> 2] | 0;
   if ((HEAP32[15415] | 0) >>> 0 > $65 >>> 0) _abort(); else {
    $$pre$phiZ2D = $64;
    $F510$0 = $65;
   }
  }
  HEAP32[$$pre$phiZ2D >> 2] = $p$1;
  HEAP32[$F510$0 + 12 >> 2] = $p$1;
  HEAP32[$p$1 + 8 >> 2] = $F510$0;
  HEAP32[$p$1 + 12 >> 2] = $arrayidx509;
  return;
 }
 $shr535 = $psize$2 >>> 8;
 if (!$shr535) $I534$0 = 0; else if ($psize$2 >>> 0 > 16777215) $I534$0 = 31; else {
  $and545 = ($shr535 + 1048320 | 0) >>> 16 & 8;
  $shl546 = $shr535 << $and545;
  $and549 = ($shl546 + 520192 | 0) >>> 16 & 4;
  $shl551 = $shl546 << $and549;
  $and554 = ($shl551 + 245760 | 0) >>> 16 & 2;
  $add559 = 14 - ($and549 | $and545 | $and554) + ($shl551 << $and554 >>> 15) | 0;
  $I534$0 = $psize$2 >>> ($add559 + 7 | 0) & 1 | $add559 << 1;
 }
 $arrayidx567 = 61948 + ($I534$0 << 2) | 0;
 HEAP32[$p$1 + 28 >> 2] = $I534$0;
 HEAP32[$p$1 + 20 >> 2] = 0;
 HEAP32[$p$1 + 16 >> 2] = 0;
 $67 = HEAP32[15412] | 0;
 $shl573 = 1 << $I534$0;
 L197 : do if (!($67 & $shl573)) {
  HEAP32[15412] = $67 | $shl573;
  HEAP32[$arrayidx567 >> 2] = $p$1;
  HEAP32[$p$1 + 24 >> 2] = $arrayidx567;
  HEAP32[$p$1 + 12 >> 2] = $p$1;
  HEAP32[$p$1 + 8 >> 2] = $p$1;
 } else {
  $68 = HEAP32[$arrayidx567 >> 2] | 0;
  L200 : do if ((HEAP32[$68 + 4 >> 2] & -8 | 0) == ($psize$2 | 0)) $T$0$lcssa = $68; else {
   $K583$0312 = $psize$2 << (($I534$0 | 0) == 31 ? 0 : 25 - ($I534$0 >>> 1) | 0);
   $T$0311 = $68;
   while (1) {
    $arrayidx599 = $T$0311 + 16 + ($K583$0312 >>> 31 << 2) | 0;
    $70 = HEAP32[$arrayidx599 >> 2] | 0;
    if (!$70) break;
    if ((HEAP32[$70 + 4 >> 2] & -8 | 0) == ($psize$2 | 0)) {
     $T$0$lcssa = $70;
     break L200;
    } else {
     $K583$0312 = $K583$0312 << 1;
     $T$0311 = $70;
    }
   }
   if ((HEAP32[15415] | 0) >>> 0 > $arrayidx599 >>> 0) _abort(); else {
    HEAP32[$arrayidx599 >> 2] = $p$1;
    HEAP32[$p$1 + 24 >> 2] = $T$0311;
    HEAP32[$p$1 + 12 >> 2] = $p$1;
    HEAP32[$p$1 + 8 >> 2] = $p$1;
    break L197;
   }
  } while (0);
  $fd620 = $T$0$lcssa + 8 | 0;
  $73 = HEAP32[$fd620 >> 2] | 0;
  $74 = HEAP32[15415] | 0;
  if ($74 >>> 0 <= $73 >>> 0 & $74 >>> 0 <= $T$0$lcssa >>> 0) {
   HEAP32[$73 + 12 >> 2] = $p$1;
   HEAP32[$fd620 >> 2] = $p$1;
   HEAP32[$p$1 + 8 >> 2] = $73;
   HEAP32[$p$1 + 12 >> 2] = $T$0$lcssa;
   HEAP32[$p$1 + 24 >> 2] = 0;
   break;
  } else _abort();
 } while (0);
 $dec = (HEAP32[15419] | 0) + -1 | 0;
 HEAP32[15419] = $dec;
 if ($dec | 0) return;
 $sp$0$in$i = 62100;
 while (1) {
  $sp$0$i = HEAP32[$sp$0$in$i >> 2] | 0;
  if (!$sp$0$i) break; else $sp$0$in$i = $sp$0$i + 8 | 0;
 }
 HEAP32[15419] = -1;
 return;
}

function _stbir__resample_horizontal_upsample($stbir_info, $output_buffer) {
 $stbir_info = $stbir_info | 0;
 $output_buffer = $output_buffer | 0;
 var $101 = f0, $108 = f0, $118 = 0, $119 = 0, $120 = 0, $125 = f0, $132 = f0, $139 = f0, $146 = f0, $157 = 0, $158 = 0, $159 = 0, $167 = f0, $46 = 0, $47 = 0, $48 = 0, $53 = f0, $63 = 0, $64 = 0, $65 = 0, $70 = f0, $77 = f0, $87 = 0, $88 = 0, $89 = 0, $94 = f0, $arrayidx102 = 0, $arrayidx108 = 0, $arrayidx131 = 0, $arrayidx137 = 0, $arrayidx143 = 0, $arrayidx149 = 0, $arrayidx174 = 0, $arrayidx46 = 0, $arrayidx67 = 0, $arrayidx73 = 0, $arrayidx96 = 0, $c = 0, $channels = 0, $coefficient = 0, $coefficient119 = 0, $coefficient159 = 0, $coefficient55 = 0, $coefficient84 = 0, $coefficient_counter = 0, $coefficient_group = 0, $coefficient_width = 0, $decode_buffer = 0, $horizontal_coefficients = 0, $horizontal_contributors = 0, $in_pixel_index = 0, $in_pixel_index117 = 0, $in_pixel_index157 = 0, $in_pixel_index53 = 0, $in_pixel_index82 = 0, $k = 0, $mul100 = f0, $mul106 = f0, $mul129 = f0, $mul135 = f0, $mul141 = f0, $mul147 = f0, $mul172 = f0, $mul44 = f0, $mul65 = f0, $mul71 = f0, $mul94 = f0, $n0 = 0, $n1 = 0, $out_pixel_index = 0, $output_buffer$addr = 0, $output_w = 0, $stbir_info$addr = 0, $x = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(112);
 $stbir_info$addr = sp + 100 | 0;
 $output_buffer$addr = sp + 96 | 0;
 $x = sp + 92 | 0;
 $k = sp + 88 | 0;
 $output_w = sp + 84 | 0;
 $channels = sp + 80 | 0;
 $decode_buffer = sp + 76 | 0;
 $horizontal_contributors = sp + 72 | 0;
 $horizontal_coefficients = sp + 68 | 0;
 $coefficient_width = sp + 64 | 0;
 $n0 = sp + 60 | 0;
 $n1 = sp + 56 | 0;
 $out_pixel_index = sp + 52 | 0;
 $coefficient_group = sp + 48 | 0;
 $coefficient_counter = sp + 44 | 0;
 $in_pixel_index = sp + 40 | 0;
 $coefficient = sp + 36 | 0;
 $in_pixel_index53 = sp + 32 | 0;
 $coefficient55 = sp + 28 | 0;
 $in_pixel_index82 = sp + 24 | 0;
 $coefficient84 = sp + 20 | 0;
 $in_pixel_index117 = sp + 16 | 0;
 $coefficient119 = sp + 12 | 0;
 $in_pixel_index157 = sp + 8 | 0;
 $coefficient159 = sp + 4 | 0;
 $c = sp;
 HEAP32[$stbir_info$addr >> 2] = $stbir_info;
 HEAP32[$output_buffer$addr >> 2] = $output_buffer;
 HEAP32[$output_w >> 2] = HEAP32[(HEAP32[$stbir_info$addr >> 2] | 0) + 20 >> 2];
 HEAP32[$channels >> 2] = HEAP32[(HEAP32[$stbir_info$addr >> 2] | 0) + 64 >> 2];
 HEAP32[$decode_buffer >> 2] = _stbir__get_decode_buffer(HEAP32[$stbir_info$addr >> 2] | 0) | 0;
 HEAP32[$horizontal_contributors >> 2] = HEAP32[(HEAP32[$stbir_info$addr >> 2] | 0) + 100 >> 2];
 HEAP32[$horizontal_coefficients >> 2] = HEAP32[(HEAP32[$stbir_info$addr >> 2] | 0) + 104 >> 2];
 HEAP32[$coefficient_width >> 2] = HEAP32[(HEAP32[$stbir_info$addr >> 2] | 0) + 128 >> 2];
 HEAP32[$x >> 2] = 0;
 L1 : while (1) {
  if ((HEAP32[$x >> 2] | 0) >= (HEAP32[$output_w >> 2] | 0)) {
   label = 43;
   break;
  }
  HEAP32[$n0 >> 2] = HEAP32[(HEAP32[$horizontal_contributors >> 2] | 0) + (HEAP32[$x >> 2] << 3) >> 2];
  HEAP32[$n1 >> 2] = HEAP32[(HEAP32[$horizontal_contributors >> 2] | 0) + (HEAP32[$x >> 2] << 3) + 4 >> 2];
  HEAP32[$out_pixel_index >> 2] = Math_imul(HEAP32[$x >> 2] | 0, HEAP32[$channels >> 2] | 0) | 0;
  HEAP32[$coefficient_group >> 2] = Math_imul(HEAP32[$coefficient_width >> 2] | 0, HEAP32[$x >> 2] | 0) | 0;
  HEAP32[$coefficient_counter >> 2] = 0;
  if ((HEAP32[$n1 >> 2] | 0) < (HEAP32[$n0 >> 2] | 0)) {
   label = 4;
   break;
  }
  if ((HEAP32[$n0 >> 2] | 0) < (0 - (HEAP32[(HEAP32[$stbir_info$addr >> 2] | 0) + 144 >> 2] | 0) | 0)) {
   label = 6;
   break;
  }
  if ((HEAP32[$n1 >> 2] | 0) < (0 - (HEAP32[(HEAP32[$stbir_info$addr >> 2] | 0) + 144 >> 2] | 0) | 0)) {
   label = 8;
   break;
  }
  if ((HEAP32[$n0 >> 2] | 0) >= ((HEAP32[(HEAP32[$stbir_info$addr >> 2] | 0) + 4 >> 2] | 0) + (HEAP32[(HEAP32[$stbir_info$addr >> 2] | 0) + 144 >> 2] | 0) | 0)) {
   label = 10;
   break;
  }
  if ((HEAP32[$n1 >> 2] | 0) >= ((HEAP32[(HEAP32[$stbir_info$addr >> 2] | 0) + 4 >> 2] | 0) + (HEAP32[(HEAP32[$stbir_info$addr >> 2] | 0) + 144 >> 2] | 0) | 0)) {
   label = 12;
   break;
  }
  L9 : do switch (HEAP32[$channels >> 2] | 0) {
  case 1:
   {
    HEAP32[$k >> 2] = HEAP32[$n0 >> 2];
    while (1) {
     if ((HEAP32[$k >> 2] | 0) > (HEAP32[$n1 >> 2] | 0)) break L9;
     HEAP32[$in_pixel_index >> 2] = HEAP32[$k >> 2];
     $46 = HEAP32[$horizontal_coefficients >> 2] | 0;
     $47 = HEAP32[$coefficient_group >> 2] | 0;
     $48 = HEAP32[$coefficient_counter >> 2] | 0;
     HEAP32[$coefficient_counter >> 2] = $48 + 1;
     HEAPF32[$coefficient >> 2] = Math_fround(HEAPF32[$46 + ($47 + $48 << 2) >> 2]);
     if (!(Math_fround(HEAPF32[$coefficient >> 2]) != Math_fround(0.0))) {
      label = 17;
      break L1;
     }
     $53 = Math_fround(HEAPF32[(HEAP32[$decode_buffer >> 2] | 0) + ((HEAP32[$in_pixel_index >> 2] | 0) + 0 << 2) >> 2]);
     $mul44 = Math_fround($53 * Math_fround(HEAPF32[$coefficient >> 2]));
     $arrayidx46 = (HEAP32[$output_buffer$addr >> 2] | 0) + ((HEAP32[$out_pixel_index >> 2] | 0) + 0 << 2) | 0;
     HEAPF32[$arrayidx46 >> 2] = Math_fround(Math_fround(HEAPF32[$arrayidx46 >> 2]) + $mul44);
     HEAP32[$k >> 2] = (HEAP32[$k >> 2] | 0) + 1;
    }
    break;
   }
  case 2:
   {
    HEAP32[$k >> 2] = HEAP32[$n0 >> 2];
    while (1) {
     if ((HEAP32[$k >> 2] | 0) > (HEAP32[$n1 >> 2] | 0)) break L9;
     HEAP32[$in_pixel_index53 >> 2] = HEAP32[$k >> 2] << 1;
     $63 = HEAP32[$horizontal_coefficients >> 2] | 0;
     $64 = HEAP32[$coefficient_group >> 2] | 0;
     $65 = HEAP32[$coefficient_counter >> 2] | 0;
     HEAP32[$coefficient_counter >> 2] = $65 + 1;
     HEAPF32[$coefficient55 >> 2] = Math_fround(HEAPF32[$63 + ($64 + $65 << 2) >> 2]);
     if (!(Math_fround(HEAPF32[$coefficient55 >> 2]) != Math_fround(0.0))) {
      label = 22;
      break L1;
     }
     $70 = Math_fround(HEAPF32[(HEAP32[$decode_buffer >> 2] | 0) + ((HEAP32[$in_pixel_index53 >> 2] | 0) + 0 << 2) >> 2]);
     $mul65 = Math_fround($70 * Math_fround(HEAPF32[$coefficient55 >> 2]));
     $arrayidx67 = (HEAP32[$output_buffer$addr >> 2] | 0) + ((HEAP32[$out_pixel_index >> 2] | 0) + 0 << 2) | 0;
     HEAPF32[$arrayidx67 >> 2] = Math_fround(Math_fround(HEAPF32[$arrayidx67 >> 2]) + $mul65);
     $77 = Math_fround(HEAPF32[(HEAP32[$decode_buffer >> 2] | 0) + ((HEAP32[$in_pixel_index53 >> 2] | 0) + 1 << 2) >> 2]);
     $mul71 = Math_fround($77 * Math_fround(HEAPF32[$coefficient55 >> 2]));
     $arrayidx73 = (HEAP32[$output_buffer$addr >> 2] | 0) + ((HEAP32[$out_pixel_index >> 2] | 0) + 1 << 2) | 0;
     HEAPF32[$arrayidx73 >> 2] = Math_fround(Math_fround(HEAPF32[$arrayidx73 >> 2]) + $mul71);
     HEAP32[$k >> 2] = (HEAP32[$k >> 2] | 0) + 1;
    }
    break;
   }
  case 3:
   {
    HEAP32[$k >> 2] = HEAP32[$n0 >> 2];
    while (1) {
     if ((HEAP32[$k >> 2] | 0) > (HEAP32[$n1 >> 2] | 0)) break L9;
     HEAP32[$in_pixel_index82 >> 2] = (HEAP32[$k >> 2] | 0) * 3;
     $87 = HEAP32[$horizontal_coefficients >> 2] | 0;
     $88 = HEAP32[$coefficient_group >> 2] | 0;
     $89 = HEAP32[$coefficient_counter >> 2] | 0;
     HEAP32[$coefficient_counter >> 2] = $89 + 1;
     HEAPF32[$coefficient84 >> 2] = Math_fround(HEAPF32[$87 + ($88 + $89 << 2) >> 2]);
     if (!(Math_fround(HEAPF32[$coefficient84 >> 2]) != Math_fround(0.0))) {
      label = 27;
      break L1;
     }
     $94 = Math_fround(HEAPF32[(HEAP32[$decode_buffer >> 2] | 0) + ((HEAP32[$in_pixel_index82 >> 2] | 0) + 0 << 2) >> 2]);
     $mul94 = Math_fround($94 * Math_fround(HEAPF32[$coefficient84 >> 2]));
     $arrayidx96 = (HEAP32[$output_buffer$addr >> 2] | 0) + ((HEAP32[$out_pixel_index >> 2] | 0) + 0 << 2) | 0;
     HEAPF32[$arrayidx96 >> 2] = Math_fround(Math_fround(HEAPF32[$arrayidx96 >> 2]) + $mul94);
     $101 = Math_fround(HEAPF32[(HEAP32[$decode_buffer >> 2] | 0) + ((HEAP32[$in_pixel_index82 >> 2] | 0) + 1 << 2) >> 2]);
     $mul100 = Math_fround($101 * Math_fround(HEAPF32[$coefficient84 >> 2]));
     $arrayidx102 = (HEAP32[$output_buffer$addr >> 2] | 0) + ((HEAP32[$out_pixel_index >> 2] | 0) + 1 << 2) | 0;
     HEAPF32[$arrayidx102 >> 2] = Math_fround(Math_fround(HEAPF32[$arrayidx102 >> 2]) + $mul100);
     $108 = Math_fround(HEAPF32[(HEAP32[$decode_buffer >> 2] | 0) + ((HEAP32[$in_pixel_index82 >> 2] | 0) + 2 << 2) >> 2]);
     $mul106 = Math_fround($108 * Math_fround(HEAPF32[$coefficient84 >> 2]));
     $arrayidx108 = (HEAP32[$output_buffer$addr >> 2] | 0) + ((HEAP32[$out_pixel_index >> 2] | 0) + 2 << 2) | 0;
     HEAPF32[$arrayidx108 >> 2] = Math_fround(Math_fround(HEAPF32[$arrayidx108 >> 2]) + $mul106);
     HEAP32[$k >> 2] = (HEAP32[$k >> 2] | 0) + 1;
    }
    break;
   }
  case 4:
   {
    HEAP32[$k >> 2] = HEAP32[$n0 >> 2];
    while (1) {
     if ((HEAP32[$k >> 2] | 0) > (HEAP32[$n1 >> 2] | 0)) break L9;
     HEAP32[$in_pixel_index117 >> 2] = HEAP32[$k >> 2] << 2;
     $118 = HEAP32[$horizontal_coefficients >> 2] | 0;
     $119 = HEAP32[$coefficient_group >> 2] | 0;
     $120 = HEAP32[$coefficient_counter >> 2] | 0;
     HEAP32[$coefficient_counter >> 2] = $120 + 1;
     HEAPF32[$coefficient119 >> 2] = Math_fround(HEAPF32[$118 + ($119 + $120 << 2) >> 2]);
     if (!(Math_fround(HEAPF32[$coefficient119 >> 2]) != Math_fround(0.0))) {
      label = 32;
      break L1;
     }
     $125 = Math_fround(HEAPF32[(HEAP32[$decode_buffer >> 2] | 0) + ((HEAP32[$in_pixel_index117 >> 2] | 0) + 0 << 2) >> 2]);
     $mul129 = Math_fround($125 * Math_fround(HEAPF32[$coefficient119 >> 2]));
     $arrayidx131 = (HEAP32[$output_buffer$addr >> 2] | 0) + ((HEAP32[$out_pixel_index >> 2] | 0) + 0 << 2) | 0;
     HEAPF32[$arrayidx131 >> 2] = Math_fround(Math_fround(HEAPF32[$arrayidx131 >> 2]) + $mul129);
     $132 = Math_fround(HEAPF32[(HEAP32[$decode_buffer >> 2] | 0) + ((HEAP32[$in_pixel_index117 >> 2] | 0) + 1 << 2) >> 2]);
     $mul135 = Math_fround($132 * Math_fround(HEAPF32[$coefficient119 >> 2]));
     $arrayidx137 = (HEAP32[$output_buffer$addr >> 2] | 0) + ((HEAP32[$out_pixel_index >> 2] | 0) + 1 << 2) | 0;
     HEAPF32[$arrayidx137 >> 2] = Math_fround(Math_fround(HEAPF32[$arrayidx137 >> 2]) + $mul135);
     $139 = Math_fround(HEAPF32[(HEAP32[$decode_buffer >> 2] | 0) + ((HEAP32[$in_pixel_index117 >> 2] | 0) + 2 << 2) >> 2]);
     $mul141 = Math_fround($139 * Math_fround(HEAPF32[$coefficient119 >> 2]));
     $arrayidx143 = (HEAP32[$output_buffer$addr >> 2] | 0) + ((HEAP32[$out_pixel_index >> 2] | 0) + 2 << 2) | 0;
     HEAPF32[$arrayidx143 >> 2] = Math_fround(Math_fround(HEAPF32[$arrayidx143 >> 2]) + $mul141);
     $146 = Math_fround(HEAPF32[(HEAP32[$decode_buffer >> 2] | 0) + ((HEAP32[$in_pixel_index117 >> 2] | 0) + 3 << 2) >> 2]);
     $mul147 = Math_fround($146 * Math_fround(HEAPF32[$coefficient119 >> 2]));
     $arrayidx149 = (HEAP32[$output_buffer$addr >> 2] | 0) + ((HEAP32[$out_pixel_index >> 2] | 0) + 3 << 2) | 0;
     HEAPF32[$arrayidx149 >> 2] = Math_fround(Math_fround(HEAPF32[$arrayidx149 >> 2]) + $mul147);
     HEAP32[$k >> 2] = (HEAP32[$k >> 2] | 0) + 1;
    }
    break;
   }
  default:
   {
    HEAP32[$k >> 2] = HEAP32[$n0 >> 2];
    while (1) {
     if ((HEAP32[$k >> 2] | 0) > (HEAP32[$n1 >> 2] | 0)) break L9;
     HEAP32[$in_pixel_index157 >> 2] = Math_imul(HEAP32[$k >> 2] | 0, HEAP32[$channels >> 2] | 0) | 0;
     $157 = HEAP32[$horizontal_coefficients >> 2] | 0;
     $158 = HEAP32[$coefficient_group >> 2] | 0;
     $159 = HEAP32[$coefficient_counter >> 2] | 0;
     HEAP32[$coefficient_counter >> 2] = $159 + 1;
     HEAPF32[$coefficient159 >> 2] = Math_fround(HEAPF32[$157 + ($158 + $159 << 2) >> 2]);
     if (!(Math_fround(HEAPF32[$coefficient159 >> 2]) != Math_fround(0.0))) {
      label = 37;
      break L1;
     }
     HEAP32[$c >> 2] = 0;
     while (1) {
      if ((HEAP32[$c >> 2] | 0) >= (HEAP32[$channels >> 2] | 0)) break;
      $167 = Math_fround(HEAPF32[(HEAP32[$decode_buffer >> 2] | 0) + ((HEAP32[$in_pixel_index157 >> 2] | 0) + (HEAP32[$c >> 2] | 0) << 2) >> 2]);
      $mul172 = Math_fround($167 * Math_fround(HEAPF32[$coefficient159 >> 2]));
      $arrayidx174 = (HEAP32[$output_buffer$addr >> 2] | 0) + ((HEAP32[$out_pixel_index >> 2] | 0) + (HEAP32[$c >> 2] | 0) << 2) | 0;
      HEAPF32[$arrayidx174 >> 2] = Math_fround(Math_fround(HEAPF32[$arrayidx174 >> 2]) + $mul172);
      HEAP32[$c >> 2] = (HEAP32[$c >> 2] | 0) + 1;
     }
     HEAP32[$k >> 2] = (HEAP32[$k >> 2] | 0) + 1;
    }
   }
  } while (0);
  HEAP32[$x >> 2] = (HEAP32[$x >> 2] | 0) + 1;
 }
 switch (label | 0) {
 case 4:
  {
   ___assert_fail(35284, 34244, 1460, 35293);
   break;
  }
 case 6:
  {
   ___assert_fail(35329, 34244, 1461, 35293);
   break;
  }
 case 8:
  {
   ___assert_fail(35379, 34244, 1462, 35293);
   break;
  }
 case 10:
  {
   ___assert_fail(35429, 34244, 1463, 35293);
   break;
  }
 case 12:
  {
   ___assert_fail(35499, 34244, 1464, 35293);
   break;
  }
 case 17:
  {
   ___assert_fail(35267, 34244, 1472, 35293);
   break;
  }
 case 22:
  {
   ___assert_fail(35267, 34244, 1481, 35293);
   break;
  }
 case 27:
  {
   ___assert_fail(35267, 34244, 1491, 35293);
   break;
  }
 case 32:
  {
   ___assert_fail(35267, 34244, 1502, 35293);
   break;
  }
 case 37:
  {
   ___assert_fail(35267, 34244, 1515, 35293);
   break;
  }
 case 43:
  {
   STACKTOP = sp;
   return;
  }
 }
}

function _stbir__encode_scanline($stbir_info, $num_pixels, $output_buffer, $encode_buffer, $channels, $alpha_channel, $decode) {
 $stbir_info = $stbir_info | 0;
 $num_pixels = $num_pixels | 0;
 $output_buffer = $output_buffer | 0;
 $encode_buffer = $encode_buffer | 0;
 $channels = $channels | 0;
 $alpha_channel = $alpha_channel | 0;
 $decode = $decode | 0;
 var $16 = f0, $163 = f0, $188 = f0, $30 = 0, $alpha = 0, $alpha_channel$addr = 0, $arrayidx8 = 0, $call269 = f0, $call68 = 0, $channels$addr = 0, $cond = f0, $conv = 0, $conv110 = 0, $conv140 = 0, $conv156 = 0, $conv181 = 0, $conv210 = 0, $conv225 = 0, $conv44 = 0, $conv84 = 0, $decode$addr = 0, $encode_buffer$addr = 0, $index = 0, $index102 = 0, $index129 = 0, $index174 = 0, $index200 = 0, $index243 = 0, $index264 = 0, $index63 = 0, $n = 0, $nonalpha = 0, $num_nonalpha = 0, $num_pixels$addr = 0, $output_buffer$addr = 0, $pixel_index = 0, $pixel_index123 = 0, $pixel_index168 = 0, $pixel_index194 = 0, $pixel_index237 = 0, $pixel_index258 = 0, $pixel_index32 = 0, $pixel_index57 = 0, $pixel_index96 = 0, $reciprocal_alpha = 0, $stbir_info$addr = 0, $x = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(256);
 $stbir_info$addr = sp + 240 | 0;
 $num_pixels$addr = sp + 236 | 0;
 $output_buffer$addr = sp + 232 | 0;
 $encode_buffer$addr = sp + 228 | 0;
 $channels$addr = sp + 224 | 0;
 $alpha_channel$addr = sp + 220 | 0;
 $decode$addr = sp + 216 | 0;
 $x = sp + 212 | 0;
 $n = sp + 208 | 0;
 $num_nonalpha = sp + 204 | 0;
 $nonalpha = sp;
 $pixel_index = sp + 200 | 0;
 $alpha = sp + 196 | 0;
 $reciprocal_alpha = sp + 192 | 0;
 $pixel_index32 = sp + 188 | 0;
 $index = sp + 184 | 0;
 $pixel_index57 = sp + 180 | 0;
 $index63 = sp + 176 | 0;
 $pixel_index96 = sp + 172 | 0;
 $index102 = sp + 168 | 0;
 $pixel_index123 = sp + 164 | 0;
 $index129 = sp + 160 | 0;
 $pixel_index168 = sp + 156 | 0;
 $index174 = sp + 152 | 0;
 $pixel_index194 = sp + 148 | 0;
 $index200 = sp + 144 | 0;
 $pixel_index237 = sp + 140 | 0;
 $index243 = sp + 136 | 0;
 $pixel_index258 = sp + 132 | 0;
 $index264 = sp + 128 | 0;
 HEAP32[$stbir_info$addr >> 2] = $stbir_info;
 HEAP32[$num_pixels$addr >> 2] = $num_pixels;
 HEAP32[$output_buffer$addr >> 2] = $output_buffer;
 HEAP32[$encode_buffer$addr >> 2] = $encode_buffer;
 HEAP32[$channels$addr >> 2] = $channels;
 HEAP32[$alpha_channel$addr >> 2] = $alpha_channel;
 HEAP32[$decode$addr >> 2] = $decode;
 L1 : do if (!(HEAP32[(HEAP32[$stbir_info$addr >> 2] | 0) + 72 >> 2] & 1)) {
  HEAP32[$x >> 2] = 0;
  while (1) {
   if ((HEAP32[$x >> 2] | 0) >= (HEAP32[$num_pixels$addr >> 2] | 0)) break L1;
   HEAP32[$pixel_index >> 2] = Math_imul(HEAP32[$x >> 2] | 0, HEAP32[$channels$addr >> 2] | 0) | 0;
   HEAPF32[$alpha >> 2] = Math_fround(HEAPF32[(HEAP32[$encode_buffer$addr >> 2] | 0) + ((HEAP32[$pixel_index >> 2] | 0) + (HEAP32[$alpha_channel$addr >> 2] | 0) << 2) >> 2]);
   if (Math_fround(HEAPF32[$alpha >> 2]) != Math_fround(0.0)) $cond = Math_fround(Math_fround(1.0) / Math_fround(HEAPF32[$alpha >> 2])); else $cond = Math_fround(0.0);
   HEAPF32[$reciprocal_alpha >> 2] = $cond;
   HEAP32[$n >> 2] = 0;
   while (1) {
    if ((HEAP32[$n >> 2] | 0) >= (HEAP32[$channels$addr >> 2] | 0)) break;
    if ((HEAP32[$n >> 2] | 0) != (HEAP32[$alpha_channel$addr >> 2] | 0)) {
     $16 = Math_fround(HEAPF32[$reciprocal_alpha >> 2]);
     $arrayidx8 = (HEAP32[$encode_buffer$addr >> 2] | 0) + ((HEAP32[$pixel_index >> 2] | 0) + (HEAP32[$n >> 2] | 0) << 2) | 0;
     HEAPF32[$arrayidx8 >> 2] = Math_fround(Math_fround(HEAPF32[$arrayidx8 >> 2]) * $16);
    }
    HEAP32[$n >> 2] = (HEAP32[$n >> 2] | 0) + 1;
   }
   HEAP32[$x >> 2] = (HEAP32[$x >> 2] | 0) + 1;
  }
 } while (0);
 HEAP32[$x >> 2] = 0;
 HEAP32[$num_nonalpha >> 2] = 0;
 while (1) {
  if ((HEAP32[$x >> 2] | 0) >= (HEAP32[$channels$addr >> 2] | 0)) break;
  if ((HEAP32[$x >> 2] | 0) != (HEAP32[$alpha_channel$addr >> 2] | 0)) label = 16; else if (HEAP32[(HEAP32[$stbir_info$addr >> 2] | 0) + 72 >> 2] & 2 | 0) label = 16;
  if ((label | 0) == 16) {
   label = 0;
   $conv = HEAP32[$x >> 2] & 65535;
   $30 = HEAP32[$num_nonalpha >> 2] | 0;
   HEAP32[$num_nonalpha >> 2] = $30 + 1;
   HEAP16[$nonalpha + ($30 << 1) >> 1] = $conv;
  }
  HEAP32[$x >> 2] = (HEAP32[$x >> 2] | 0) + 1;
 }
 switch (HEAP32[$decode$addr >> 2] | 0) {
 case 0:
  {
   HEAP32[$x >> 2] = 0;
   while (1) {
    if ((HEAP32[$x >> 2] | 0) >= (HEAP32[$num_pixels$addr >> 2] | 0)) break;
    HEAP32[$pixel_index32 >> 2] = Math_imul(HEAP32[$x >> 2] | 0, HEAP32[$channels$addr >> 2] | 0) | 0;
    HEAP32[$n >> 2] = 0;
    while (1) {
     if ((HEAP32[$n >> 2] | 0) >= (HEAP32[$channels$addr >> 2] | 0)) break;
     HEAP32[$index >> 2] = (HEAP32[$pixel_index32 >> 2] | 0) + (HEAP32[$n >> 2] | 0);
     $conv44 = ~~(+Math_fround(Math_fround(_stbir__saturate(Math_fround(HEAPF32[(HEAP32[$encode_buffer$addr >> 2] | 0) + (HEAP32[$index >> 2] << 2) >> 2]))) * Math_fround(255.0)) + .5) & 255;
     HEAP8[(HEAP32[$output_buffer$addr >> 2] | 0) + (HEAP32[$index >> 2] | 0) >> 0] = $conv44;
     HEAP32[$n >> 2] = (HEAP32[$n >> 2] | 0) + 1;
    }
    HEAP32[$x >> 2] = (HEAP32[$x >> 2] | 0) + 1;
   }
   STACKTOP = sp;
   return;
  }
 case 1:
  {
   HEAP32[$x >> 2] = 0;
   while (1) {
    if ((HEAP32[$x >> 2] | 0) >= (HEAP32[$num_pixels$addr >> 2] | 0)) break;
    HEAP32[$pixel_index57 >> 2] = Math_imul(HEAP32[$x >> 2] | 0, HEAP32[$channels$addr >> 2] | 0) | 0;
    HEAP32[$n >> 2] = 0;
    while (1) {
     if ((HEAP32[$n >> 2] | 0) >= (HEAP32[$num_nonalpha >> 2] | 0)) break;
     HEAP32[$index63 >> 2] = (HEAP32[$pixel_index57 >> 2] | 0) + (HEAPU16[$nonalpha + (HEAP32[$n >> 2] << 1) >> 1] | 0);
     $call68 = _stbir__linear_to_srgb_uchar(Math_fround(HEAPF32[(HEAP32[$encode_buffer$addr >> 2] | 0) + (HEAP32[$index63 >> 2] << 2) >> 2])) | 0;
     HEAP8[(HEAP32[$output_buffer$addr >> 2] | 0) + (HEAP32[$index63 >> 2] | 0) >> 0] = $call68;
     HEAP32[$n >> 2] = (HEAP32[$n >> 2] | 0) + 1;
    }
    if (!(HEAP32[(HEAP32[$stbir_info$addr >> 2] | 0) + 72 >> 2] & 2)) {
     $conv84 = ~~(+Math_fround(Math_fround(_stbir__saturate(Math_fround(HEAPF32[(HEAP32[$encode_buffer$addr >> 2] | 0) + ((HEAP32[$pixel_index57 >> 2] | 0) + (HEAP32[$alpha_channel$addr >> 2] | 0) << 2) >> 2]))) * Math_fround(255.0)) + .5) & 255;
     HEAP8[(HEAP32[$output_buffer$addr >> 2] | 0) + ((HEAP32[$pixel_index57 >> 2] | 0) + (HEAP32[$alpha_channel$addr >> 2] | 0)) >> 0] = $conv84;
    }
    HEAP32[$x >> 2] = (HEAP32[$x >> 2] | 0) + 1;
   }
   STACKTOP = sp;
   return;
  }
 case 2:
  {
   HEAP32[$x >> 2] = 0;
   while (1) {
    if ((HEAP32[$x >> 2] | 0) >= (HEAP32[$num_pixels$addr >> 2] | 0)) break;
    HEAP32[$pixel_index96 >> 2] = Math_imul(HEAP32[$x >> 2] | 0, HEAP32[$channels$addr >> 2] | 0) | 0;
    HEAP32[$n >> 2] = 0;
    while (1) {
     if ((HEAP32[$n >> 2] | 0) >= (HEAP32[$channels$addr >> 2] | 0)) break;
     HEAP32[$index102 >> 2] = (HEAP32[$pixel_index96 >> 2] | 0) + (HEAP32[$n >> 2] | 0);
     $conv110 = ~~(+Math_fround(Math_fround(_stbir__saturate(Math_fround(HEAPF32[(HEAP32[$encode_buffer$addr >> 2] | 0) + (HEAP32[$index102 >> 2] << 2) >> 2]))) * Math_fround(65535.0)) + .5) & 65535;
     HEAP16[(HEAP32[$output_buffer$addr >> 2] | 0) + (HEAP32[$index102 >> 2] << 1) >> 1] = $conv110;
     HEAP32[$n >> 2] = (HEAP32[$n >> 2] | 0) + 1;
    }
    HEAP32[$x >> 2] = (HEAP32[$x >> 2] | 0) + 1;
   }
   STACKTOP = sp;
   return;
  }
 case 3:
  {
   HEAP32[$x >> 2] = 0;
   while (1) {
    if ((HEAP32[$x >> 2] | 0) >= (HEAP32[$num_pixels$addr >> 2] | 0)) break;
    HEAP32[$pixel_index123 >> 2] = Math_imul(HEAP32[$x >> 2] | 0, HEAP32[$channels$addr >> 2] | 0) | 0;
    HEAP32[$n >> 2] = 0;
    while (1) {
     if ((HEAP32[$n >> 2] | 0) >= (HEAP32[$num_nonalpha >> 2] | 0)) break;
     HEAP32[$index129 >> 2] = (HEAP32[$pixel_index123 >> 2] | 0) + (HEAPU16[$nonalpha + (HEAP32[$n >> 2] << 1) >> 1] | 0);
     $conv140 = ~~(+Math_fround(Math_fround(_stbir__linear_to_srgb(Math_fround(_stbir__saturate(Math_fround(HEAPF32[(HEAP32[$encode_buffer$addr >> 2] | 0) + (HEAP32[$index129 >> 2] << 2) >> 2]))))) * Math_fround(65535.0)) + .5) & 65535;
     HEAP16[(HEAP32[$output_buffer$addr >> 2] | 0) + (HEAP32[$index129 >> 2] << 1) >> 1] = $conv140;
     HEAP32[$n >> 2] = (HEAP32[$n >> 2] | 0) + 1;
    }
    if (!(HEAP32[(HEAP32[$stbir_info$addr >> 2] | 0) + 72 >> 2] & 2)) {
     $conv156 = ~~(+Math_fround(Math_fround(_stbir__saturate(Math_fround(HEAPF32[(HEAP32[$encode_buffer$addr >> 2] | 0) + ((HEAP32[$pixel_index123 >> 2] | 0) + (HEAP32[$alpha_channel$addr >> 2] | 0) << 2) >> 2]))) * Math_fround(65535.0)) + .5) & 65535;
     HEAP16[(HEAP32[$output_buffer$addr >> 2] | 0) + ((HEAP32[$pixel_index123 >> 2] | 0) + (HEAP32[$alpha_channel$addr >> 2] | 0) << 1) >> 1] = $conv156;
    }
    HEAP32[$x >> 2] = (HEAP32[$x >> 2] | 0) + 1;
   }
   STACKTOP = sp;
   return;
  }
 case 4:
  {
   HEAP32[$x >> 2] = 0;
   while (1) {
    if ((HEAP32[$x >> 2] | 0) >= (HEAP32[$num_pixels$addr >> 2] | 0)) break;
    HEAP32[$pixel_index168 >> 2] = Math_imul(HEAP32[$x >> 2] | 0, HEAP32[$channels$addr >> 2] | 0) | 0;
    HEAP32[$n >> 2] = 0;
    while (1) {
     if ((HEAP32[$n >> 2] | 0) >= (HEAP32[$channels$addr >> 2] | 0)) break;
     HEAP32[$index174 >> 2] = (HEAP32[$pixel_index168 >> 2] | 0) + (HEAP32[$n >> 2] | 0);
     $conv181 = ~~(+Math_fround(_stbir__saturate(Math_fround(HEAPF32[(HEAP32[$encode_buffer$addr >> 2] | 0) + (HEAP32[$index174 >> 2] << 2) >> 2]))) * 4294967295.0 + .5) >>> 0;
     HEAP32[(HEAP32[$output_buffer$addr >> 2] | 0) + (HEAP32[$index174 >> 2] << 2) >> 2] = $conv181;
     HEAP32[$n >> 2] = (HEAP32[$n >> 2] | 0) + 1;
    }
    HEAP32[$x >> 2] = (HEAP32[$x >> 2] | 0) + 1;
   }
   STACKTOP = sp;
   return;
  }
 case 5:
  {
   HEAP32[$x >> 2] = 0;
   while (1) {
    if ((HEAP32[$x >> 2] | 0) >= (HEAP32[$num_pixels$addr >> 2] | 0)) break;
    HEAP32[$pixel_index194 >> 2] = Math_imul(HEAP32[$x >> 2] | 0, HEAP32[$channels$addr >> 2] | 0) | 0;
    HEAP32[$n >> 2] = 0;
    while (1) {
     if ((HEAP32[$n >> 2] | 0) >= (HEAP32[$num_nonalpha >> 2] | 0)) break;
     HEAP32[$index200 >> 2] = (HEAP32[$pixel_index194 >> 2] | 0) + (HEAPU16[$nonalpha + (HEAP32[$n >> 2] << 1) >> 1] | 0);
     $conv210 = ~~(+Math_fround(_stbir__linear_to_srgb(Math_fround(_stbir__saturate(Math_fround(HEAPF32[(HEAP32[$encode_buffer$addr >> 2] | 0) + (HEAP32[$index200 >> 2] << 2) >> 2]))))) * 4294967295.0 + .5) >>> 0;
     HEAP32[(HEAP32[$output_buffer$addr >> 2] | 0) + (HEAP32[$index200 >> 2] << 2) >> 2] = $conv210;
     HEAP32[$n >> 2] = (HEAP32[$n >> 2] | 0) + 1;
    }
    if (!(HEAP32[(HEAP32[$stbir_info$addr >> 2] | 0) + 72 >> 2] & 2)) {
     $conv225 = ~~(+Math_fround(_stbir__saturate(Math_fround(HEAPF32[(HEAP32[$encode_buffer$addr >> 2] | 0) + ((HEAP32[$pixel_index194 >> 2] | 0) + (HEAP32[$alpha_channel$addr >> 2] | 0) << 2) >> 2]))) * 4294967295.0 + .5);
     HEAP32[(HEAP32[$output_buffer$addr >> 2] | 0) + ((HEAP32[$pixel_index194 >> 2] | 0) + (HEAP32[$alpha_channel$addr >> 2] | 0) << 2) >> 2] = $conv225;
    }
    HEAP32[$x >> 2] = (HEAP32[$x >> 2] | 0) + 1;
   }
   STACKTOP = sp;
   return;
  }
 case 6:
  {
   HEAP32[$x >> 2] = 0;
   while (1) {
    if ((HEAP32[$x >> 2] | 0) >= (HEAP32[$num_pixels$addr >> 2] | 0)) break;
    HEAP32[$pixel_index237 >> 2] = Math_imul(HEAP32[$x >> 2] | 0, HEAP32[$channels$addr >> 2] | 0) | 0;
    HEAP32[$n >> 2] = 0;
    while (1) {
     if ((HEAP32[$n >> 2] | 0) >= (HEAP32[$channels$addr >> 2] | 0)) break;
     HEAP32[$index243 >> 2] = (HEAP32[$pixel_index237 >> 2] | 0) + (HEAP32[$n >> 2] | 0);
     $163 = Math_fround(HEAPF32[(HEAP32[$encode_buffer$addr >> 2] | 0) + (HEAP32[$index243 >> 2] << 2) >> 2]);
     HEAPF32[(HEAP32[$output_buffer$addr >> 2] | 0) + (HEAP32[$index243 >> 2] << 2) >> 2] = $163;
     HEAP32[$n >> 2] = (HEAP32[$n >> 2] | 0) + 1;
    }
    HEAP32[$x >> 2] = (HEAP32[$x >> 2] | 0) + 1;
   }
   STACKTOP = sp;
   return;
  }
 case 7:
  {
   HEAP32[$x >> 2] = 0;
   while (1) {
    if ((HEAP32[$x >> 2] | 0) >= (HEAP32[$num_pixels$addr >> 2] | 0)) break;
    HEAP32[$pixel_index258 >> 2] = Math_imul(HEAP32[$x >> 2] | 0, HEAP32[$channels$addr >> 2] | 0) | 0;
    HEAP32[$n >> 2] = 0;
    while (1) {
     if ((HEAP32[$n >> 2] | 0) >= (HEAP32[$num_nonalpha >> 2] | 0)) break;
     HEAP32[$index264 >> 2] = (HEAP32[$pixel_index258 >> 2] | 0) + (HEAPU16[$nonalpha + (HEAP32[$n >> 2] << 1) >> 1] | 0);
     $call269 = Math_fround(_stbir__linear_to_srgb(Math_fround(HEAPF32[(HEAP32[$encode_buffer$addr >> 2] | 0) + (HEAP32[$index264 >> 2] << 2) >> 2])));
     HEAPF32[(HEAP32[$output_buffer$addr >> 2] | 0) + (HEAP32[$index264 >> 2] << 2) >> 2] = $call269;
     HEAP32[$n >> 2] = (HEAP32[$n >> 2] | 0) + 1;
    }
    if (!(HEAP32[(HEAP32[$stbir_info$addr >> 2] | 0) + 72 >> 2] & 2)) {
     $188 = Math_fround(HEAPF32[(HEAP32[$encode_buffer$addr >> 2] | 0) + ((HEAP32[$pixel_index258 >> 2] | 0) + (HEAP32[$alpha_channel$addr >> 2] | 0) << 2) >> 2]);
     HEAPF32[(HEAP32[$output_buffer$addr >> 2] | 0) + ((HEAP32[$pixel_index258 >> 2] | 0) + (HEAP32[$alpha_channel$addr >> 2] | 0) << 2) >> 2] = $188;
    }
    HEAP32[$x >> 2] = (HEAP32[$x >> 2] | 0) + 1;
   }
   STACKTOP = sp;
   return;
  }
 default:
  ___assert_fail(35569, 34244, 1861, 35690);
 }
}

function __ZNSt3__211__money_putIwE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_Ri($__intl, $__neg, $__loc, $__pat, $__dp, $__ts, $__grp, $__sym, $__sn, $__fd) {
 $__intl = $__intl | 0;
 $__neg = $__neg | 0;
 $__loc = $__loc | 0;
 $__pat = $__pat | 0;
 $__dp = $__dp | 0;
 $__ts = $__ts | 0;
 $__grp = $__grp | 0;
 $__sym = $__sym | 0;
 $__sn = $__sn | 0;
 $__fd = $__fd | 0;
 var $1 = 0, $11 = 0, $13 = 0, $20 = 0, $24 = 0, $26 = 0, $3 = 0, $31 = 0, $33 = 0, $35 = 0, $39 = 0, $41 = 0, $43 = 0, $5 = 0, $50 = 0, $54 = 0, $56 = 0, $9 = 0, $__cap_$i$i$i$i$i = 0, $__cap_$i$i$i$i$i187 = 0, $__i$0$i$i$i = 0, $__i$0$i$i$i104 = 0, $__i$0$i$i$i134 = 0, $__i$0$i$i$i160 = 0, $__i$0$i$i$i192 = 0, $__i$0$i$i$i216 = 0, $__i$0$i$i$i56 = 0, $__i$0$i$i$i81 = 0, $__size_$i1$i$i$i$i = 0, $__size_$i1$i$i$i$i121 = 0, $__size_$i1$i$i$i$i147 = 0, $__size_$i1$i$i$i$i178 = 0, $__size_$i1$i$i$i$i203 = 0, $__size_$i1$i$i$i$i43 = 0, $__size_$i1$i$i$i$i73 = 0, $__size_$i1$i$i$i$i91 = 0, $call$i = 0, $call$i114 = 0, $ref$tmp$i$i$i$i201 = 0, $ref$tmp4 = 0, $storemerge = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $ref$tmp$i$i$i$i201 = sp + 12 | 0;
 $ref$tmp4 = sp;
 if ($__intl) {
  $call$i = __ZNKSt3__26locale9use_facetERNS0_2idE($__loc, 61464) | 0;
  if ($__neg) {
   FUNCTION_TABLE_vii[HEAP32[(HEAP32[$call$i >> 2] | 0) + 44 >> 2] & 127]($ref$tmp$i$i$i$i201, $call$i);
   $1 = HEAP32[$ref$tmp$i$i$i$i201 >> 2] | 0;
   HEAP8[$__pat >> 0] = $1;
   HEAP8[$__pat + 1 >> 0] = $1 >> 8;
   HEAP8[$__pat + 2 >> 0] = $1 >> 16;
   HEAP8[$__pat + 3 >> 0] = $1 >> 24;
   FUNCTION_TABLE_vii[HEAP32[(HEAP32[$call$i >> 2] | 0) + 32 >> 2] & 127]($ref$tmp4, $call$i);
   $3 = $__sn + 8 | 0;
   $__size_$i1$i$i$i$i = $3 + 3 | 0;
   if ((HEAP8[$__size_$i1$i$i$i$i >> 0] | 0) < 0) {
    $5 = HEAP32[$__sn >> 2] | 0;
    HEAP32[$ref$tmp$i$i$i$i201 >> 2] = 0;
    __ZNSt3__211char_traitsIwE6assignERwRKw($5, $ref$tmp$i$i$i$i201);
    HEAP32[$__sn + 4 >> 2] = 0;
    if ((HEAP8[$__size_$i1$i$i$i$i >> 0] | 0) < 0) {
     __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm(HEAP32[$__sn >> 2] | 0, HEAP32[$3 >> 2] << 2);
     HEAP32[$3 >> 2] = 0;
    }
   } else {
    HEAP32[$ref$tmp$i$i$i$i201 >> 2] = 0;
    __ZNSt3__211char_traitsIwE6assignERwRKw($__sn, $ref$tmp$i$i$i$i201);
    HEAP8[$__size_$i1$i$i$i$i >> 0] = 0;
   };
   HEAP32[$__sn >> 2] = HEAP32[$ref$tmp4 >> 2];
   HEAP32[$__sn + 4 >> 2] = HEAP32[$ref$tmp4 + 4 >> 2];
   HEAP32[$__sn + 8 >> 2] = HEAP32[$ref$tmp4 + 8 >> 2];
   $__i$0$i$i$i = 0;
   while (1) {
    if (($__i$0$i$i$i | 0) == 3) break;
    HEAP32[$ref$tmp4 + ($__i$0$i$i$i << 2) >> 2] = 0;
    $__i$0$i$i$i = $__i$0$i$i$i + 1 | 0;
   }
   __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($ref$tmp4);
  } else {
   FUNCTION_TABLE_vii[HEAP32[(HEAP32[$call$i >> 2] | 0) + 40 >> 2] & 127]($ref$tmp$i$i$i$i201, $call$i);
   $9 = HEAP32[$ref$tmp$i$i$i$i201 >> 2] | 0;
   HEAP8[$__pat >> 0] = $9;
   HEAP8[$__pat + 1 >> 0] = $9 >> 8;
   HEAP8[$__pat + 2 >> 0] = $9 >> 16;
   HEAP8[$__pat + 3 >> 0] = $9 >> 24;
   FUNCTION_TABLE_vii[HEAP32[(HEAP32[$call$i >> 2] | 0) + 28 >> 2] & 127]($ref$tmp4, $call$i);
   $11 = $__sn + 8 | 0;
   $__size_$i1$i$i$i$i43 = $11 + 3 | 0;
   if ((HEAP8[$__size_$i1$i$i$i$i43 >> 0] | 0) < 0) {
    $13 = HEAP32[$__sn >> 2] | 0;
    HEAP32[$ref$tmp$i$i$i$i201 >> 2] = 0;
    __ZNSt3__211char_traitsIwE6assignERwRKw($13, $ref$tmp$i$i$i$i201);
    HEAP32[$__sn + 4 >> 2] = 0;
    if ((HEAP8[$__size_$i1$i$i$i$i43 >> 0] | 0) < 0) {
     __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm(HEAP32[$__sn >> 2] | 0, HEAP32[$11 >> 2] << 2);
     HEAP32[$11 >> 2] = 0;
    }
   } else {
    HEAP32[$ref$tmp$i$i$i$i201 >> 2] = 0;
    __ZNSt3__211char_traitsIwE6assignERwRKw($__sn, $ref$tmp$i$i$i$i201);
    HEAP8[$__size_$i1$i$i$i$i43 >> 0] = 0;
   };
   HEAP32[$__sn >> 2] = HEAP32[$ref$tmp4 >> 2];
   HEAP32[$__sn + 4 >> 2] = HEAP32[$ref$tmp4 + 4 >> 2];
   HEAP32[$__sn + 8 >> 2] = HEAP32[$ref$tmp4 + 8 >> 2];
   $__i$0$i$i$i56 = 0;
   while (1) {
    if (($__i$0$i$i$i56 | 0) == 3) break;
    HEAP32[$ref$tmp4 + ($__i$0$i$i$i56 << 2) >> 2] = 0;
    $__i$0$i$i$i56 = $__i$0$i$i$i56 + 1 | 0;
   }
   __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($ref$tmp4);
  }
  HEAP32[$__dp >> 2] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$call$i >> 2] | 0) + 12 >> 2] & 127]($call$i) | 0;
  HEAP32[$__ts >> 2] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$call$i >> 2] | 0) + 16 >> 2] & 127]($call$i) | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$call$i >> 2] | 0) + 20 >> 2] & 127]($ref$tmp4, $call$i);
  $__size_$i1$i$i$i$i73 = $__grp + 11 | 0;
  if ((HEAP8[$__size_$i1$i$i$i$i73 >> 0] | 0) < 0) {
   $20 = HEAP32[$__grp >> 2] | 0;
   HEAP8[$ref$tmp$i$i$i$i201 >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($20, $ref$tmp$i$i$i$i201);
   HEAP32[$__grp + 4 >> 2] = 0;
   if ((HEAP8[$__size_$i1$i$i$i$i73 >> 0] | 0) < 0) {
    $__cap_$i$i$i$i$i = $__grp + 8 | 0;
    __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm(HEAP32[$__grp >> 2] | 0, HEAP32[$__cap_$i$i$i$i$i >> 2] & 2147483647);
    HEAP32[$__cap_$i$i$i$i$i >> 2] = 0;
   }
  } else {
   HEAP8[$ref$tmp$i$i$i$i201 >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($__grp, $ref$tmp$i$i$i$i201);
   HEAP8[$__size_$i1$i$i$i$i73 >> 0] = 0;
  };
  HEAP32[$__grp >> 2] = HEAP32[$ref$tmp4 >> 2];
  HEAP32[$__grp + 4 >> 2] = HEAP32[$ref$tmp4 + 4 >> 2];
  HEAP32[$__grp + 8 >> 2] = HEAP32[$ref$tmp4 + 8 >> 2];
  $__i$0$i$i$i81 = 0;
  while (1) {
   if (($__i$0$i$i$i81 | 0) == 3) break;
   HEAP32[$ref$tmp4 + ($__i$0$i$i$i81 << 2) >> 2] = 0;
   $__i$0$i$i$i81 = $__i$0$i$i$i81 + 1 | 0;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp4);
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$call$i >> 2] | 0) + 24 >> 2] & 127]($ref$tmp4, $call$i);
  $24 = $__sym + 8 | 0;
  $__size_$i1$i$i$i$i91 = $24 + 3 | 0;
  if ((HEAP8[$__size_$i1$i$i$i$i91 >> 0] | 0) < 0) {
   $26 = HEAP32[$__sym >> 2] | 0;
   HEAP32[$ref$tmp$i$i$i$i201 >> 2] = 0;
   __ZNSt3__211char_traitsIwE6assignERwRKw($26, $ref$tmp$i$i$i$i201);
   HEAP32[$__sym + 4 >> 2] = 0;
   if ((HEAP8[$__size_$i1$i$i$i$i91 >> 0] | 0) < 0) {
    __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm(HEAP32[$__sym >> 2] | 0, HEAP32[$24 >> 2] << 2);
    HEAP32[$24 >> 2] = 0;
   }
  } else {
   HEAP32[$ref$tmp$i$i$i$i201 >> 2] = 0;
   __ZNSt3__211char_traitsIwE6assignERwRKw($__sym, $ref$tmp$i$i$i$i201);
   HEAP8[$__size_$i1$i$i$i$i91 >> 0] = 0;
  };
  HEAP32[$__sym >> 2] = HEAP32[$ref$tmp4 >> 2];
  HEAP32[$__sym + 4 >> 2] = HEAP32[$ref$tmp4 + 4 >> 2];
  HEAP32[$__sym + 8 >> 2] = HEAP32[$ref$tmp4 + 8 >> 2];
  $__i$0$i$i$i104 = 0;
  while (1) {
   if (($__i$0$i$i$i104 | 0) == 3) break;
   HEAP32[$ref$tmp4 + ($__i$0$i$i$i104 << 2) >> 2] = 0;
   $__i$0$i$i$i104 = $__i$0$i$i$i104 + 1 | 0;
  }
  __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($ref$tmp4);
  $storemerge = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$call$i >> 2] | 0) + 36 >> 2] & 127]($call$i) | 0;
 } else {
  $call$i114 = __ZNKSt3__26locale9use_facetERNS0_2idE($__loc, 61456) | 0;
  if ($__neg) {
   FUNCTION_TABLE_vii[HEAP32[(HEAP32[$call$i114 >> 2] | 0) + 44 >> 2] & 127]($ref$tmp$i$i$i$i201, $call$i114);
   $31 = HEAP32[$ref$tmp$i$i$i$i201 >> 2] | 0;
   HEAP8[$__pat >> 0] = $31;
   HEAP8[$__pat + 1 >> 0] = $31 >> 8;
   HEAP8[$__pat + 2 >> 0] = $31 >> 16;
   HEAP8[$__pat + 3 >> 0] = $31 >> 24;
   FUNCTION_TABLE_vii[HEAP32[(HEAP32[$call$i114 >> 2] | 0) + 32 >> 2] & 127]($ref$tmp4, $call$i114);
   $33 = $__sn + 8 | 0;
   $__size_$i1$i$i$i$i121 = $33 + 3 | 0;
   if ((HEAP8[$__size_$i1$i$i$i$i121 >> 0] | 0) < 0) {
    $35 = HEAP32[$__sn >> 2] | 0;
    HEAP32[$ref$tmp$i$i$i$i201 >> 2] = 0;
    __ZNSt3__211char_traitsIwE6assignERwRKw($35, $ref$tmp$i$i$i$i201);
    HEAP32[$__sn + 4 >> 2] = 0;
    if ((HEAP8[$__size_$i1$i$i$i$i121 >> 0] | 0) < 0) {
     __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm(HEAP32[$__sn >> 2] | 0, HEAP32[$33 >> 2] << 2);
     HEAP32[$33 >> 2] = 0;
    }
   } else {
    HEAP32[$ref$tmp$i$i$i$i201 >> 2] = 0;
    __ZNSt3__211char_traitsIwE6assignERwRKw($__sn, $ref$tmp$i$i$i$i201);
    HEAP8[$__size_$i1$i$i$i$i121 >> 0] = 0;
   };
   HEAP32[$__sn >> 2] = HEAP32[$ref$tmp4 >> 2];
   HEAP32[$__sn + 4 >> 2] = HEAP32[$ref$tmp4 + 4 >> 2];
   HEAP32[$__sn + 8 >> 2] = HEAP32[$ref$tmp4 + 8 >> 2];
   $__i$0$i$i$i134 = 0;
   while (1) {
    if (($__i$0$i$i$i134 | 0) == 3) break;
    HEAP32[$ref$tmp4 + ($__i$0$i$i$i134 << 2) >> 2] = 0;
    $__i$0$i$i$i134 = $__i$0$i$i$i134 + 1 | 0;
   }
   __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($ref$tmp4);
  } else {
   FUNCTION_TABLE_vii[HEAP32[(HEAP32[$call$i114 >> 2] | 0) + 40 >> 2] & 127]($ref$tmp$i$i$i$i201, $call$i114);
   $39 = HEAP32[$ref$tmp$i$i$i$i201 >> 2] | 0;
   HEAP8[$__pat >> 0] = $39;
   HEAP8[$__pat + 1 >> 0] = $39 >> 8;
   HEAP8[$__pat + 2 >> 0] = $39 >> 16;
   HEAP8[$__pat + 3 >> 0] = $39 >> 24;
   FUNCTION_TABLE_vii[HEAP32[(HEAP32[$call$i114 >> 2] | 0) + 28 >> 2] & 127]($ref$tmp4, $call$i114);
   $41 = $__sn + 8 | 0;
   $__size_$i1$i$i$i$i147 = $41 + 3 | 0;
   if ((HEAP8[$__size_$i1$i$i$i$i147 >> 0] | 0) < 0) {
    $43 = HEAP32[$__sn >> 2] | 0;
    HEAP32[$ref$tmp$i$i$i$i201 >> 2] = 0;
    __ZNSt3__211char_traitsIwE6assignERwRKw($43, $ref$tmp$i$i$i$i201);
    HEAP32[$__sn + 4 >> 2] = 0;
    if ((HEAP8[$__size_$i1$i$i$i$i147 >> 0] | 0) < 0) {
     __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm(HEAP32[$__sn >> 2] | 0, HEAP32[$41 >> 2] << 2);
     HEAP32[$41 >> 2] = 0;
    }
   } else {
    HEAP32[$ref$tmp$i$i$i$i201 >> 2] = 0;
    __ZNSt3__211char_traitsIwE6assignERwRKw($__sn, $ref$tmp$i$i$i$i201);
    HEAP8[$__size_$i1$i$i$i$i147 >> 0] = 0;
   };
   HEAP32[$__sn >> 2] = HEAP32[$ref$tmp4 >> 2];
   HEAP32[$__sn + 4 >> 2] = HEAP32[$ref$tmp4 + 4 >> 2];
   HEAP32[$__sn + 8 >> 2] = HEAP32[$ref$tmp4 + 8 >> 2];
   $__i$0$i$i$i160 = 0;
   while (1) {
    if (($__i$0$i$i$i160 | 0) == 3) break;
    HEAP32[$ref$tmp4 + ($__i$0$i$i$i160 << 2) >> 2] = 0;
    $__i$0$i$i$i160 = $__i$0$i$i$i160 + 1 | 0;
   }
   __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($ref$tmp4);
  }
  HEAP32[$__dp >> 2] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$call$i114 >> 2] | 0) + 12 >> 2] & 127]($call$i114) | 0;
  HEAP32[$__ts >> 2] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$call$i114 >> 2] | 0) + 16 >> 2] & 127]($call$i114) | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$call$i114 >> 2] | 0) + 20 >> 2] & 127]($ref$tmp4, $call$i114);
  $__size_$i1$i$i$i$i178 = $__grp + 11 | 0;
  if ((HEAP8[$__size_$i1$i$i$i$i178 >> 0] | 0) < 0) {
   $50 = HEAP32[$__grp >> 2] | 0;
   HEAP8[$ref$tmp$i$i$i$i201 >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($50, $ref$tmp$i$i$i$i201);
   HEAP32[$__grp + 4 >> 2] = 0;
   if ((HEAP8[$__size_$i1$i$i$i$i178 >> 0] | 0) < 0) {
    $__cap_$i$i$i$i$i187 = $__grp + 8 | 0;
    __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm(HEAP32[$__grp >> 2] | 0, HEAP32[$__cap_$i$i$i$i$i187 >> 2] & 2147483647);
    HEAP32[$__cap_$i$i$i$i$i187 >> 2] = 0;
   }
  } else {
   HEAP8[$ref$tmp$i$i$i$i201 >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($__grp, $ref$tmp$i$i$i$i201);
   HEAP8[$__size_$i1$i$i$i$i178 >> 0] = 0;
  };
  HEAP32[$__grp >> 2] = HEAP32[$ref$tmp4 >> 2];
  HEAP32[$__grp + 4 >> 2] = HEAP32[$ref$tmp4 + 4 >> 2];
  HEAP32[$__grp + 8 >> 2] = HEAP32[$ref$tmp4 + 8 >> 2];
  $__i$0$i$i$i192 = 0;
  while (1) {
   if (($__i$0$i$i$i192 | 0) == 3) break;
   HEAP32[$ref$tmp4 + ($__i$0$i$i$i192 << 2) >> 2] = 0;
   $__i$0$i$i$i192 = $__i$0$i$i$i192 + 1 | 0;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp4);
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$call$i114 >> 2] | 0) + 24 >> 2] & 127]($ref$tmp4, $call$i114);
  $54 = $__sym + 8 | 0;
  $__size_$i1$i$i$i$i203 = $54 + 3 | 0;
  if ((HEAP8[$__size_$i1$i$i$i$i203 >> 0] | 0) < 0) {
   $56 = HEAP32[$__sym >> 2] | 0;
   HEAP32[$ref$tmp$i$i$i$i201 >> 2] = 0;
   __ZNSt3__211char_traitsIwE6assignERwRKw($56, $ref$tmp$i$i$i$i201);
   HEAP32[$__sym + 4 >> 2] = 0;
   if ((HEAP8[$__size_$i1$i$i$i$i203 >> 0] | 0) < 0) {
    __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm(HEAP32[$__sym >> 2] | 0, HEAP32[$54 >> 2] << 2);
    HEAP32[$54 >> 2] = 0;
   }
  } else {
   HEAP32[$ref$tmp$i$i$i$i201 >> 2] = 0;
   __ZNSt3__211char_traitsIwE6assignERwRKw($__sym, $ref$tmp$i$i$i$i201);
   HEAP8[$__size_$i1$i$i$i$i203 >> 0] = 0;
  };
  HEAP32[$__sym >> 2] = HEAP32[$ref$tmp4 >> 2];
  HEAP32[$__sym + 4 >> 2] = HEAP32[$ref$tmp4 + 4 >> 2];
  HEAP32[$__sym + 8 >> 2] = HEAP32[$ref$tmp4 + 8 >> 2];
  $__i$0$i$i$i216 = 0;
  while (1) {
   if (($__i$0$i$i$i216 | 0) == 3) break;
   HEAP32[$ref$tmp4 + ($__i$0$i$i$i216 << 2) >> 2] = 0;
   $__i$0$i$i$i216 = $__i$0$i$i$i216 + 1 | 0;
  }
  __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($ref$tmp4);
  $storemerge = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$call$i114 >> 2] | 0) + 36 >> 2] & 127]($call$i114) | 0;
 }
 HEAP32[$__fd >> 2] = $storemerge;
 STACKTOP = sp;
 return;
}

function _dispose_chunk($p, $psize) {
 $p = $p | 0;
 $psize = $psize | 0;
 var $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $23 = 0, $24 = 0, $25 = 0, $27 = 0, $28 = 0, $29 = 0, $35 = 0, $36 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $54 = 0, $55 = 0, $56 = 0, $59 = 0, $60 = 0, $61 = 0, $63 = 0, $64 = 0, $66 = 0, $69 = 0, $70 = 0, $9 = 0, $F517$0 = 0, $I545$0 = 0, $K597$013 = 0, $R$1 = 0, $R$1$be = 0, $R$1$ph = 0, $R$3 = 0, $R328$1 = 0, $R328$1$be = 0, $R328$1$ph = 0, $R328$3 = 0, $RP$1 = 0, $RP$1$be = 0, $RP$1$ph = 0, $RP357$1 = 0, $RP357$1$be = 0, $RP357$1$ph = 0, $T$0$lcssa = 0, $T$012 = 0, $add$ptr = 0, $add$ptr5 = 0, $add230 = 0, $add248 = 0, $add258 = 0, $add570 = 0, $add6 = 0, $and556 = 0, $and560 = 0, $and565 = 0, $arrayidx = 0, $arrayidx100 = 0, $arrayidx118 = 0, $arrayidx138 = 0, $arrayidx271 = 0, $arrayidx359 = 0, $arrayidx371 = 0, $arrayidx376 = 0, $arrayidx399 = 0, $arrayidx420 = 0, $arrayidx516 = 0, $arrayidx579 = 0, $arrayidx613 = 0, $arrayidx86 = 0, $arrayidx95 = 0, $bk340 = 0, $bk70 = 0, $child = 0, $child161 = 0, $child358 = 0, $child445 = 0, $fd307 = 0, $fd318$pre$phiZ2D = 0, $fd344 = 0, $fd43 = 0, $fd53$pre$phiZ2D = 0, $fd635 = 0, $fd74 = 0, $head201 = 0, $head223 = 0, $p$addr$1 = 0, $psize$addr$1 = 0, $psize$addr$2 = 0, $shl519 = 0, $shl557 = 0, $shl562 = 0, $shl586 = 0, $shr = 0, $shr259 = 0, $shr507 = 0, $shr546 = 0;
 $add$ptr = $p + $psize | 0;
 $0 = HEAP32[$p + 4 >> 2] | 0;
 L1 : do if (!($0 & 1)) {
  $1 = HEAP32[$p >> 2] | 0;
  if (!($0 & 3)) return;
  $add$ptr5 = $p + (0 - $1) | 0;
  $add6 = $1 + $psize | 0;
  $2 = HEAP32[15415] | 0;
  if ($add$ptr5 >>> 0 < $2 >>> 0) _abort();
  if ((HEAP32[15416] | 0) == ($add$ptr5 | 0)) {
   $head201 = $add$ptr + 4 | 0;
   $27 = HEAP32[$head201 >> 2] | 0;
   if (($27 & 3 | 0) != 3) {
    $p$addr$1 = $add$ptr5;
    $psize$addr$1 = $add6;
    break;
   }
   HEAP32[15413] = $add6;
   HEAP32[$head201 >> 2] = $27 & -2;
   HEAP32[$add$ptr5 + 4 >> 2] = $add6 | 1;
   HEAP32[$add$ptr >> 2] = $add6;
   return;
  }
  $shr = $1 >>> 3;
  if ($1 >>> 0 < 256) {
   $4 = HEAP32[$add$ptr5 + 8 >> 2] | 0;
   $5 = HEAP32[$add$ptr5 + 12 >> 2] | 0;
   $arrayidx = 61684 + ($shr << 1 << 2) | 0;
   if (($4 | 0) != ($arrayidx | 0)) {
    if ($2 >>> 0 > $4 >>> 0) _abort();
    if ((HEAP32[$4 + 12 >> 2] | 0) != ($add$ptr5 | 0)) _abort();
   }
   if (($5 | 0) == ($4 | 0)) {
    HEAP32[15411] = HEAP32[15411] & ~(1 << $shr);
    $p$addr$1 = $add$ptr5;
    $psize$addr$1 = $add6;
    break;
   }
   if (($5 | 0) == ($arrayidx | 0)) $fd53$pre$phiZ2D = $5 + 8 | 0; else {
    if ($2 >>> 0 > $5 >>> 0) _abort();
    $fd43 = $5 + 8 | 0;
    if ((HEAP32[$fd43 >> 2] | 0) == ($add$ptr5 | 0)) $fd53$pre$phiZ2D = $fd43; else _abort();
   }
   HEAP32[$4 + 12 >> 2] = $5;
   HEAP32[$fd53$pre$phiZ2D >> 2] = $4;
   $p$addr$1 = $add$ptr5;
   $psize$addr$1 = $add6;
   break;
  }
  $9 = HEAP32[$add$ptr5 + 24 >> 2] | 0;
  $10 = HEAP32[$add$ptr5 + 12 >> 2] | 0;
  do if (($10 | 0) == ($add$ptr5 | 0)) {
   $child = $add$ptr5 + 16 | 0;
   $arrayidx86 = $child + 4 | 0;
   $14 = HEAP32[$arrayidx86 >> 2] | 0;
   if (!$14) {
    $15 = HEAP32[$child >> 2] | 0;
    if (!$15) {
     $R$3 = 0;
     break;
    } else {
     $R$1$ph = $15;
     $RP$1$ph = $child;
    }
   } else {
    $R$1$ph = $14;
    $RP$1$ph = $arrayidx86;
   }
   $R$1 = $R$1$ph;
   $RP$1 = $RP$1$ph;
   while (1) {
    $arrayidx95 = $R$1 + 20 | 0;
    $16 = HEAP32[$arrayidx95 >> 2] | 0;
    if (!$16) {
     $arrayidx100 = $R$1 + 16 | 0;
     $17 = HEAP32[$arrayidx100 >> 2] | 0;
     if (!$17) break; else {
      $R$1$be = $17;
      $RP$1$be = $arrayidx100;
     }
    } else {
     $R$1$be = $16;
     $RP$1$be = $arrayidx95;
    }
    $R$1 = $R$1$be;
    $RP$1 = $RP$1$be;
   }
   if ($2 >>> 0 > $RP$1 >>> 0) _abort(); else {
    HEAP32[$RP$1 >> 2] = 0;
    $R$3 = $R$1;
    break;
   }
  } else {
   $11 = HEAP32[$add$ptr5 + 8 >> 2] | 0;
   if ($2 >>> 0 > $11 >>> 0) _abort();
   $bk70 = $11 + 12 | 0;
   if ((HEAP32[$bk70 >> 2] | 0) != ($add$ptr5 | 0)) _abort();
   $fd74 = $10 + 8 | 0;
   if ((HEAP32[$fd74 >> 2] | 0) == ($add$ptr5 | 0)) {
    HEAP32[$bk70 >> 2] = $10;
    HEAP32[$fd74 >> 2] = $11;
    $R$3 = $10;
    break;
   } else _abort();
  } while (0);
  if (!$9) {
   $p$addr$1 = $add$ptr5;
   $psize$addr$1 = $add6;
  } else {
   $18 = HEAP32[$add$ptr5 + 28 >> 2] | 0;
   $arrayidx118 = 61948 + ($18 << 2) | 0;
   do if ((HEAP32[$arrayidx118 >> 2] | 0) == ($add$ptr5 | 0)) {
    HEAP32[$arrayidx118 >> 2] = $R$3;
    if (!$R$3) {
     HEAP32[15412] = HEAP32[15412] & ~(1 << $18);
     $p$addr$1 = $add$ptr5;
     $psize$addr$1 = $add6;
     break L1;
    }
   } else if ((HEAP32[15415] | 0) >>> 0 > $9 >>> 0) _abort(); else {
    $arrayidx138 = $9 + 16 | 0;
    HEAP32[((HEAP32[$arrayidx138 >> 2] | 0) == ($add$ptr5 | 0) ? $arrayidx138 : $9 + 20 | 0) >> 2] = $R$3;
    if (!$R$3) {
     $p$addr$1 = $add$ptr5;
     $psize$addr$1 = $add6;
     break L1;
    } else break;
   } while (0);
   $23 = HEAP32[15415] | 0;
   if ($23 >>> 0 > $R$3 >>> 0) _abort();
   HEAP32[$R$3 + 24 >> 2] = $9;
   $child161 = $add$ptr5 + 16 | 0;
   $24 = HEAP32[$child161 >> 2] | 0;
   do if ($24 | 0) if ($23 >>> 0 > $24 >>> 0) _abort(); else {
    HEAP32[$R$3 + 16 >> 2] = $24;
    HEAP32[$24 + 24 >> 2] = $R$3;
    break;
   } while (0);
   $25 = HEAP32[$child161 + 4 >> 2] | 0;
   if (!$25) {
    $p$addr$1 = $add$ptr5;
    $psize$addr$1 = $add6;
   } else if ((HEAP32[15415] | 0) >>> 0 > $25 >>> 0) _abort(); else {
    HEAP32[$R$3 + 20 >> 2] = $25;
    HEAP32[$25 + 24 >> 2] = $R$3;
    $p$addr$1 = $add$ptr5;
    $psize$addr$1 = $add6;
    break;
   }
  }
 } else {
  $p$addr$1 = $p;
  $psize$addr$1 = $psize;
 } while (0);
 $28 = HEAP32[15415] | 0;
 if ($add$ptr >>> 0 < $28 >>> 0) _abort();
 $head223 = $add$ptr + 4 | 0;
 $29 = HEAP32[$head223 >> 2] | 0;
 if (!($29 & 2)) {
  if ((HEAP32[15417] | 0) == ($add$ptr | 0)) {
   $add230 = (HEAP32[15414] | 0) + $psize$addr$1 | 0;
   HEAP32[15414] = $add230;
   HEAP32[15417] = $p$addr$1;
   HEAP32[$p$addr$1 + 4 >> 2] = $add230 | 1;
   if (($p$addr$1 | 0) != (HEAP32[15416] | 0)) return;
   HEAP32[15416] = 0;
   HEAP32[15413] = 0;
   return;
  }
  if ((HEAP32[15416] | 0) == ($add$ptr | 0)) {
   $add248 = (HEAP32[15413] | 0) + $psize$addr$1 | 0;
   HEAP32[15413] = $add248;
   HEAP32[15416] = $p$addr$1;
   HEAP32[$p$addr$1 + 4 >> 2] = $add248 | 1;
   HEAP32[$p$addr$1 + $add248 >> 2] = $add248;
   return;
  }
  $add258 = ($29 & -8) + $psize$addr$1 | 0;
  $shr259 = $29 >>> 3;
  L99 : do if ($29 >>> 0 < 256) {
   $35 = HEAP32[$add$ptr + 8 >> 2] | 0;
   $36 = HEAP32[$add$ptr + 12 >> 2] | 0;
   $arrayidx271 = 61684 + ($shr259 << 1 << 2) | 0;
   if (($35 | 0) != ($arrayidx271 | 0)) {
    if ($28 >>> 0 > $35 >>> 0) _abort();
    if ((HEAP32[$35 + 12 >> 2] | 0) != ($add$ptr | 0)) _abort();
   }
   if (($36 | 0) == ($35 | 0)) {
    HEAP32[15411] = HEAP32[15411] & ~(1 << $shr259);
    break;
   }
   if (($36 | 0) == ($arrayidx271 | 0)) $fd318$pre$phiZ2D = $36 + 8 | 0; else {
    if ($28 >>> 0 > $36 >>> 0) _abort();
    $fd307 = $36 + 8 | 0;
    if ((HEAP32[$fd307 >> 2] | 0) == ($add$ptr | 0)) $fd318$pre$phiZ2D = $fd307; else _abort();
   }
   HEAP32[$35 + 12 >> 2] = $36;
   HEAP32[$fd318$pre$phiZ2D >> 2] = $35;
  } else {
   $40 = HEAP32[$add$ptr + 24 >> 2] | 0;
   $41 = HEAP32[$add$ptr + 12 >> 2] | 0;
   do if (($41 | 0) == ($add$ptr | 0)) {
    $child358 = $add$ptr + 16 | 0;
    $arrayidx359 = $child358 + 4 | 0;
    $45 = HEAP32[$arrayidx359 >> 2] | 0;
    if (!$45) {
     $46 = HEAP32[$child358 >> 2] | 0;
     if (!$46) {
      $R328$3 = 0;
      break;
     } else {
      $R328$1$ph = $46;
      $RP357$1$ph = $child358;
     }
    } else {
     $R328$1$ph = $45;
     $RP357$1$ph = $arrayidx359;
    }
    $R328$1 = $R328$1$ph;
    $RP357$1 = $RP357$1$ph;
    while (1) {
     $arrayidx371 = $R328$1 + 20 | 0;
     $47 = HEAP32[$arrayidx371 >> 2] | 0;
     if (!$47) {
      $arrayidx376 = $R328$1 + 16 | 0;
      $48 = HEAP32[$arrayidx376 >> 2] | 0;
      if (!$48) break; else {
       $R328$1$be = $48;
       $RP357$1$be = $arrayidx376;
      }
     } else {
      $R328$1$be = $47;
      $RP357$1$be = $arrayidx371;
     }
     $R328$1 = $R328$1$be;
     $RP357$1 = $RP357$1$be;
    }
    if ($28 >>> 0 > $RP357$1 >>> 0) _abort(); else {
     HEAP32[$RP357$1 >> 2] = 0;
     $R328$3 = $R328$1;
     break;
    }
   } else {
    $42 = HEAP32[$add$ptr + 8 >> 2] | 0;
    if ($28 >>> 0 > $42 >>> 0) _abort();
    $bk340 = $42 + 12 | 0;
    if ((HEAP32[$bk340 >> 2] | 0) != ($add$ptr | 0)) _abort();
    $fd344 = $41 + 8 | 0;
    if ((HEAP32[$fd344 >> 2] | 0) == ($add$ptr | 0)) {
     HEAP32[$bk340 >> 2] = $41;
     HEAP32[$fd344 >> 2] = $42;
     $R328$3 = $41;
     break;
    } else _abort();
   } while (0);
   if ($40 | 0) {
    $49 = HEAP32[$add$ptr + 28 >> 2] | 0;
    $arrayidx399 = 61948 + ($49 << 2) | 0;
    do if ((HEAP32[$arrayidx399 >> 2] | 0) == ($add$ptr | 0)) {
     HEAP32[$arrayidx399 >> 2] = $R328$3;
     if (!$R328$3) {
      HEAP32[15412] = HEAP32[15412] & ~(1 << $49);
      break L99;
     }
    } else if ((HEAP32[15415] | 0) >>> 0 > $40 >>> 0) _abort(); else {
     $arrayidx420 = $40 + 16 | 0;
     HEAP32[((HEAP32[$arrayidx420 >> 2] | 0) == ($add$ptr | 0) ? $arrayidx420 : $40 + 20 | 0) >> 2] = $R328$3;
     if (!$R328$3) break L99; else break;
    } while (0);
    $54 = HEAP32[15415] | 0;
    if ($54 >>> 0 > $R328$3 >>> 0) _abort();
    HEAP32[$R328$3 + 24 >> 2] = $40;
    $child445 = $add$ptr + 16 | 0;
    $55 = HEAP32[$child445 >> 2] | 0;
    do if ($55 | 0) if ($54 >>> 0 > $55 >>> 0) _abort(); else {
     HEAP32[$R328$3 + 16 >> 2] = $55;
     HEAP32[$55 + 24 >> 2] = $R328$3;
     break;
    } while (0);
    $56 = HEAP32[$child445 + 4 >> 2] | 0;
    if ($56 | 0) if ((HEAP32[15415] | 0) >>> 0 > $56 >>> 0) _abort(); else {
     HEAP32[$R328$3 + 20 >> 2] = $56;
     HEAP32[$56 + 24 >> 2] = $R328$3;
     break;
    }
   }
  } while (0);
  HEAP32[$p$addr$1 + 4 >> 2] = $add258 | 1;
  HEAP32[$p$addr$1 + $add258 >> 2] = $add258;
  if (($p$addr$1 | 0) == (HEAP32[15416] | 0)) {
   HEAP32[15413] = $add258;
   return;
  } else $psize$addr$2 = $add258;
 } else {
  HEAP32[$head223 >> 2] = $29 & -2;
  HEAP32[$p$addr$1 + 4 >> 2] = $psize$addr$1 | 1;
  HEAP32[$p$addr$1 + $psize$addr$1 >> 2] = $psize$addr$1;
  $psize$addr$2 = $psize$addr$1;
 }
 $shr507 = $psize$addr$2 >>> 3;
 if ($psize$addr$2 >>> 0 < 256) {
  $arrayidx516 = 61684 + ($shr507 << 1 << 2) | 0;
  $59 = HEAP32[15411] | 0;
  $shl519 = 1 << $shr507;
  if (!($59 & $shl519)) {
   HEAP32[15411] = $59 | $shl519;
   $$pre$phiZ2D = $arrayidx516 + 8 | 0;
   $F517$0 = $arrayidx516;
  } else {
   $60 = $arrayidx516 + 8 | 0;
   $61 = HEAP32[$60 >> 2] | 0;
   if ((HEAP32[15415] | 0) >>> 0 > $61 >>> 0) _abort(); else {
    $$pre$phiZ2D = $60;
    $F517$0 = $61;
   }
  }
  HEAP32[$$pre$phiZ2D >> 2] = $p$addr$1;
  HEAP32[$F517$0 + 12 >> 2] = $p$addr$1;
  HEAP32[$p$addr$1 + 8 >> 2] = $F517$0;
  HEAP32[$p$addr$1 + 12 >> 2] = $arrayidx516;
  return;
 }
 $shr546 = $psize$addr$2 >>> 8;
 if (!$shr546) $I545$0 = 0; else if ($psize$addr$2 >>> 0 > 16777215) $I545$0 = 31; else {
  $and556 = ($shr546 + 1048320 | 0) >>> 16 & 8;
  $shl557 = $shr546 << $and556;
  $and560 = ($shl557 + 520192 | 0) >>> 16 & 4;
  $shl562 = $shl557 << $and560;
  $and565 = ($shl562 + 245760 | 0) >>> 16 & 2;
  $add570 = 14 - ($and560 | $and556 | $and565) + ($shl562 << $and565 >>> 15) | 0;
  $I545$0 = $psize$addr$2 >>> ($add570 + 7 | 0) & 1 | $add570 << 1;
 }
 $arrayidx579 = 61948 + ($I545$0 << 2) | 0;
 HEAP32[$p$addr$1 + 28 >> 2] = $I545$0;
 HEAP32[$p$addr$1 + 20 >> 2] = 0;
 HEAP32[$p$addr$1 + 16 >> 2] = 0;
 $63 = HEAP32[15412] | 0;
 $shl586 = 1 << $I545$0;
 if (!($63 & $shl586)) {
  HEAP32[15412] = $63 | $shl586;
  HEAP32[$arrayidx579 >> 2] = $p$addr$1;
  HEAP32[$p$addr$1 + 24 >> 2] = $arrayidx579;
  HEAP32[$p$addr$1 + 12 >> 2] = $p$addr$1;
  HEAP32[$p$addr$1 + 8 >> 2] = $p$addr$1;
  return;
 }
 $64 = HEAP32[$arrayidx579 >> 2] | 0;
 L189 : do if ((HEAP32[$64 + 4 >> 2] & -8 | 0) == ($psize$addr$2 | 0)) $T$0$lcssa = $64; else {
  $K597$013 = $psize$addr$2 << (($I545$0 | 0) == 31 ? 0 : 25 - ($I545$0 >>> 1) | 0);
  $T$012 = $64;
  while (1) {
   $arrayidx613 = $T$012 + 16 + ($K597$013 >>> 31 << 2) | 0;
   $66 = HEAP32[$arrayidx613 >> 2] | 0;
   if (!$66) break;
   if ((HEAP32[$66 + 4 >> 2] & -8 | 0) == ($psize$addr$2 | 0)) {
    $T$0$lcssa = $66;
    break L189;
   } else {
    $K597$013 = $K597$013 << 1;
    $T$012 = $66;
   }
  }
  if ((HEAP32[15415] | 0) >>> 0 > $arrayidx613 >>> 0) _abort();
  HEAP32[$arrayidx613 >> 2] = $p$addr$1;
  HEAP32[$p$addr$1 + 24 >> 2] = $T$012;
  HEAP32[$p$addr$1 + 12 >> 2] = $p$addr$1;
  HEAP32[$p$addr$1 + 8 >> 2] = $p$addr$1;
  return;
 } while (0);
 $fd635 = $T$0$lcssa + 8 | 0;
 $69 = HEAP32[$fd635 >> 2] | 0;
 $70 = HEAP32[15415] | 0;
 if (!($70 >>> 0 <= $69 >>> 0 & $70 >>> 0 <= $T$0$lcssa >>> 0)) _abort();
 HEAP32[$69 + 12 >> 2] = $p$addr$1;
 HEAP32[$fd635 >> 2] = $p$addr$1;
 HEAP32[$p$addr$1 + 8 >> 2] = $69;
 HEAP32[$p$addr$1 + 12 >> 2] = $T$0$lcssa;
 HEAP32[$p$addr$1 + 24 >> 2] = 0;
 return;
}

function _GifSplitPalette($image, $numPixels, $firstElt, $lastElt, $splitElt, $splitDist, $treeNode, $buildForDither, $pal) {
 $image = $image | 0;
 $numPixels = $numPixels | 0;
 $firstElt = $firstElt | 0;
 $lastElt = $lastElt | 0;
 $splitElt = $splitElt | 0;
 $splitDist = $splitDist | 0;
 $treeNode = $treeNode | 0;
 $buildForDither = $buildForDither | 0;
 $pal = $pal | 0;
 var $104 = 0, $105 = 0, $106 = 0, $114 = 0, $120 = 0, $121 = 0, $122 = 0, $130 = 0, $136 = 0, $137 = 0, $138 = 0, $146 = 0, $152 = 0, $153 = 0, $154 = 0, $161 = 0, $167 = 0, $168 = 0, $169 = 0, $176 = 0, $182 = 0, $183 = 0, $184 = 0, $188 = 0, $191 = 0, $197 = 0, $198 = 0, $199 = 0, $203 = 0, $206 = 0, $212 = 0, $213 = 0, $214 = 0, $218 = 0, $221 = 0, $227 = 0, $228 = 0, $229 = 0, $47 = 0, $80 = 0, $84 = 0, $88 = 0, $9 = 0, $98 = 0, $b = 0, $b122 = 0, $b185 = 0, $b58 = 0, $bRange = 0, $buildForDither$addr = 0, $cond = 0, $cond105 = 0, $cond28 = 0, $cond42 = 0, $cond77 = 0, $cond91 = 0, $div = 0, $div148 = 0, $div151 = 0, $firstElt$addr = 0, $g = 0, $g121 = 0, $g180 = 0, $g57 = 0, $gRange = 0, $ii = 0, $ii123 = 0, $ii170 = 0, $ii59 = 0, $image$addr = 0, $lastElt$addr = 0, $maxB = 0, $maxG = 0, $maxR = 0, $minB = 0, $minG = 0, $minR = 0, $mul231 = 0, $numPixels$addr = 0, $pal$addr = 0, $r = 0, $r120 = 0, $r175 = 0, $r56 = 0, $rRange = 0, $splitCom = 0, $splitDist$addr = 0, $splitElt$addr = 0, $subPixelsA = 0, $subPixelsB = 0, $treeNode$addr = 0, sp = 0, CSE$0 = 0, CSE$1 = 0, CSE$2 = 0, CSE$3 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(160);
 $image$addr = sp + 152 | 0;
 $numPixels$addr = sp + 148 | 0;
 $firstElt$addr = sp + 144 | 0;
 $lastElt$addr = sp + 140 | 0;
 $splitElt$addr = sp + 136 | 0;
 $splitDist$addr = sp + 132 | 0;
 $treeNode$addr = sp + 128 | 0;
 $buildForDither$addr = sp + 156 | 0;
 $pal$addr = sp + 124 | 0;
 $r = sp + 120 | 0;
 $g = sp + 116 | 0;
 $b = sp + 112 | 0;
 $ii = sp + 108 | 0;
 $r56 = sp + 104 | 0;
 $g57 = sp + 100 | 0;
 $b58 = sp + 96 | 0;
 $ii59 = sp + 92 | 0;
 $r120 = sp + 16 | 0;
 $g121 = sp + 8 | 0;
 $b122 = sp;
 $ii123 = sp + 88 | 0;
 $minR = sp + 84 | 0;
 $maxR = sp + 80 | 0;
 $minG = sp + 76 | 0;
 $maxG = sp + 72 | 0;
 $minB = sp + 68 | 0;
 $maxB = sp + 64 | 0;
 $ii170 = sp + 60 | 0;
 $r175 = sp + 56 | 0;
 $g180 = sp + 52 | 0;
 $b185 = sp + 48 | 0;
 $rRange = sp + 44 | 0;
 $gRange = sp + 40 | 0;
 $bRange = sp + 36 | 0;
 $splitCom = sp + 32 | 0;
 $subPixelsA = sp + 28 | 0;
 $subPixelsB = sp + 24 | 0;
 HEAP32[$image$addr >> 2] = $image;
 HEAP32[$numPixels$addr >> 2] = $numPixels;
 HEAP32[$firstElt$addr >> 2] = $firstElt;
 HEAP32[$lastElt$addr >> 2] = $lastElt;
 HEAP32[$splitElt$addr >> 2] = $splitElt;
 HEAP32[$splitDist$addr >> 2] = $splitDist;
 HEAP32[$treeNode$addr >> 2] = $treeNode;
 HEAP8[$buildForDither$addr >> 0] = $buildForDither & 1;
 HEAP32[$pal$addr >> 2] = $pal;
 if ((HEAP32[$numPixels$addr >> 2] | 0) == 0 ? 1 : (HEAP32[$lastElt$addr >> 2] | 0) <= (HEAP32[$firstElt$addr >> 2] | 0)) {
  STACKTOP = sp;
  return;
 }
 if ((HEAP32[$lastElt$addr >> 2] | 0) != ((HEAP32[$firstElt$addr >> 2] | 0) + 1 | 0)) {
  HEAP32[$minR >> 2] = 255;
  HEAP32[$maxR >> 2] = 0;
  HEAP32[$minG >> 2] = 255;
  HEAP32[$maxG >> 2] = 0;
  HEAP32[$minB >> 2] = 255;
  HEAP32[$maxB >> 2] = 0;
  HEAP32[$ii170 >> 2] = 0;
  while (1) {
   if ((HEAP32[$ii170 >> 2] | 0) >= (HEAP32[$numPixels$addr >> 2] | 0)) break;
   HEAP32[$r175 >> 2] = HEAPU8[(HEAP32[$image$addr >> 2] | 0) + ((HEAP32[$ii170 >> 2] << 2) + 0) >> 0];
   HEAP32[$g180 >> 2] = HEAPU8[(HEAP32[$image$addr >> 2] | 0) + ((HEAP32[$ii170 >> 2] << 2) + 1) >> 0];
   HEAP32[$b185 >> 2] = HEAPU8[(HEAP32[$image$addr >> 2] | 0) + ((HEAP32[$ii170 >> 2] << 2) + 2) >> 0];
   if ((HEAP32[$r175 >> 2] | 0) > (HEAP32[$maxR >> 2] | 0)) HEAP32[$maxR >> 2] = HEAP32[$r175 >> 2];
   if ((HEAP32[$r175 >> 2] | 0) < (HEAP32[$minR >> 2] | 0)) HEAP32[$minR >> 2] = HEAP32[$r175 >> 2];
   if ((HEAP32[$g180 >> 2] | 0) > (HEAP32[$maxG >> 2] | 0)) HEAP32[$maxG >> 2] = HEAP32[$g180 >> 2];
   if ((HEAP32[$g180 >> 2] | 0) < (HEAP32[$minG >> 2] | 0)) HEAP32[$minG >> 2] = HEAP32[$g180 >> 2];
   if ((HEAP32[$b185 >> 2] | 0) > (HEAP32[$maxB >> 2] | 0)) HEAP32[$maxB >> 2] = HEAP32[$b185 >> 2];
   if ((HEAP32[$b185 >> 2] | 0) < (HEAP32[$minB >> 2] | 0)) HEAP32[$minB >> 2] = HEAP32[$b185 >> 2];
   HEAP32[$ii170 >> 2] = (HEAP32[$ii170 >> 2] | 0) + 1;
  }
  HEAP32[$rRange >> 2] = (HEAP32[$maxR >> 2] | 0) - (HEAP32[$minR >> 2] | 0);
  HEAP32[$gRange >> 2] = (HEAP32[$maxG >> 2] | 0) - (HEAP32[$minG >> 2] | 0);
  HEAP32[$bRange >> 2] = (HEAP32[$maxB >> 2] | 0) - (HEAP32[$minB >> 2] | 0);
  HEAP32[$splitCom >> 2] = 1;
  HEAP32[$splitCom >> 2] = (HEAP32[$bRange >> 2] | 0) > (HEAP32[$gRange >> 2] | 0) ? 2 : 1;
  if ((HEAP32[$rRange >> 2] | 0) > (HEAP32[$bRange >> 2] | 0)) if ((HEAP32[$rRange >> 2] | 0) > (HEAP32[$gRange >> 2] | 0)) HEAP32[$splitCom >> 2] = 0;
  $mul231 = Math_imul(HEAP32[$numPixels$addr >> 2] | 0, (HEAP32[$splitElt$addr >> 2] | 0) - (HEAP32[$firstElt$addr >> 2] | 0) | 0) | 0;
  HEAP32[$subPixelsA >> 2] = ($mul231 | 0) / ((HEAP32[$lastElt$addr >> 2] | 0) - (HEAP32[$firstElt$addr >> 2] | 0) | 0) | 0;
  HEAP32[$subPixelsB >> 2] = (HEAP32[$numPixels$addr >> 2] | 0) - (HEAP32[$subPixelsA >> 2] | 0);
  _GifPartitionByMedian(HEAP32[$image$addr >> 2] | 0, 0, HEAP32[$numPixels$addr >> 2] | 0, HEAP32[$splitCom >> 2] | 0, HEAP32[$subPixelsA >> 2] | 0);
  HEAP8[(HEAP32[$pal$addr >> 2] | 0) + 772 + (HEAP32[$treeNode$addr >> 2] | 0) >> 0] = HEAP32[$splitCom >> 2];
  HEAP8[(HEAP32[$pal$addr >> 2] | 0) + 1027 + (HEAP32[$treeNode$addr >> 2] | 0) >> 0] = HEAP8[(HEAP32[$image$addr >> 2] | 0) + ((HEAP32[$subPixelsA >> 2] << 2) + (HEAP32[$splitCom >> 2] | 0)) >> 0] | 0;
  CSE$0 = HEAP32[$splitElt$addr >> 2] | 0;
  CSE$1 = HEAP32[$splitDist$addr >> 2] | 0;
  _GifSplitPalette(HEAP32[$image$addr >> 2] | 0, HEAP32[$subPixelsA >> 2] | 0, HEAP32[$firstElt$addr >> 2] | 0, CSE$0 | 0, CSE$0 - CSE$1 | 0, (CSE$1 | 0) / 2 | 0, HEAP32[$treeNode$addr >> 2] << 1, HEAP8[$buildForDither$addr >> 0] & 1, HEAP32[$pal$addr >> 2] | 0);
  CSE$2 = HEAP32[$splitElt$addr >> 2] | 0;
  CSE$3 = HEAP32[$splitDist$addr >> 2] | 0;
  _GifSplitPalette((HEAP32[$image$addr >> 2] | 0) + (HEAP32[$subPixelsA >> 2] << 2) | 0, HEAP32[$subPixelsB >> 2] | 0, CSE$2 | 0, HEAP32[$lastElt$addr >> 2] | 0, CSE$2 + CSE$3 | 0, (CSE$3 | 0) / 2 | 0, (HEAP32[$treeNode$addr >> 2] << 1) + 1 | 0, HEAP8[$buildForDither$addr >> 0] & 1, HEAP32[$pal$addr >> 2] | 0);
  STACKTOP = sp;
  return;
 }
 if (HEAP8[$buildForDither$addr >> 0] & 1) {
  if ((HEAP32[$firstElt$addr >> 2] | 0) == 1) {
   HEAP32[$r >> 2] = 255;
   HEAP32[$g >> 2] = 255;
   HEAP32[$b >> 2] = 255;
   HEAP32[$ii >> 2] = 0;
   while (1) {
    $9 = HEAP32[$r >> 2] | 0;
    if ((HEAP32[$ii >> 2] | 0) >= (HEAP32[$numPixels$addr >> 2] | 0)) break;
    if ($9 >>> 0 < (HEAPU8[(HEAP32[$image$addr >> 2] | 0) + ((HEAP32[$ii >> 2] << 2) + 0) >> 0] | 0) >>> 0) $cond = HEAP32[$r >> 2] | 0; else $cond = HEAPU8[(HEAP32[$image$addr >> 2] | 0) + ((HEAP32[$ii >> 2] << 2) + 0) >> 0] | 0;
    HEAP32[$r >> 2] = $cond;
    if ((HEAP32[$g >> 2] | 0) >>> 0 < (HEAPU8[(HEAP32[$image$addr >> 2] | 0) + ((HEAP32[$ii >> 2] << 2) + 1) >> 0] | 0) >>> 0) $cond28 = HEAP32[$g >> 2] | 0; else $cond28 = HEAPU8[(HEAP32[$image$addr >> 2] | 0) + ((HEAP32[$ii >> 2] << 2) + 1) >> 0] | 0;
    HEAP32[$g >> 2] = $cond28;
    if ((HEAP32[$b >> 2] | 0) >>> 0 < (HEAPU8[(HEAP32[$image$addr >> 2] | 0) + ((HEAP32[$ii >> 2] << 2) + 2) >> 0] | 0) >>> 0) $cond42 = HEAP32[$b >> 2] | 0; else $cond42 = HEAPU8[(HEAP32[$image$addr >> 2] | 0) + ((HEAP32[$ii >> 2] << 2) + 2) >> 0] | 0;
    HEAP32[$b >> 2] = $cond42;
    HEAP32[$ii >> 2] = (HEAP32[$ii >> 2] | 0) + 1;
   }
   HEAP8[(HEAP32[$pal$addr >> 2] | 0) + 4 + (HEAP32[$firstElt$addr >> 2] | 0) >> 0] = $9;
   HEAP8[(HEAP32[$pal$addr >> 2] | 0) + 260 + (HEAP32[$firstElt$addr >> 2] | 0) >> 0] = HEAP32[$g >> 2];
   HEAP8[(HEAP32[$pal$addr >> 2] | 0) + 516 + (HEAP32[$firstElt$addr >> 2] | 0) >> 0] = HEAP32[$b >> 2];
   STACKTOP = sp;
   return;
  }
  if ((HEAP32[$firstElt$addr >> 2] | 0) == ((1 << HEAP32[HEAP32[$pal$addr >> 2] >> 2]) - 1 | 0)) {
   HEAP32[$r56 >> 2] = 0;
   HEAP32[$g57 >> 2] = 0;
   HEAP32[$b58 >> 2] = 0;
   HEAP32[$ii59 >> 2] = 0;
   while (1) {
    $47 = HEAP32[$r56 >> 2] | 0;
    if ((HEAP32[$ii59 >> 2] | 0) >= (HEAP32[$numPixels$addr >> 2] | 0)) break;
    if ($47 >>> 0 > (HEAPU8[(HEAP32[$image$addr >> 2] | 0) + ((HEAP32[$ii59 >> 2] << 2) + 0) >> 0] | 0) >>> 0) $cond77 = HEAP32[$r56 >> 2] | 0; else $cond77 = HEAPU8[(HEAP32[$image$addr >> 2] | 0) + ((HEAP32[$ii59 >> 2] << 2) + 0) >> 0] | 0;
    HEAP32[$r56 >> 2] = $cond77;
    if ((HEAP32[$g57 >> 2] | 0) >>> 0 > (HEAPU8[(HEAP32[$image$addr >> 2] | 0) + ((HEAP32[$ii59 >> 2] << 2) + 1) >> 0] | 0) >>> 0) $cond91 = HEAP32[$g57 >> 2] | 0; else $cond91 = HEAPU8[(HEAP32[$image$addr >> 2] | 0) + ((HEAP32[$ii59 >> 2] << 2) + 1) >> 0] | 0;
    HEAP32[$g57 >> 2] = $cond91;
    if ((HEAP32[$b58 >> 2] | 0) >>> 0 > (HEAPU8[(HEAP32[$image$addr >> 2] | 0) + ((HEAP32[$ii59 >> 2] << 2) + 2) >> 0] | 0) >>> 0) $cond105 = HEAP32[$b58 >> 2] | 0; else $cond105 = HEAPU8[(HEAP32[$image$addr >> 2] | 0) + ((HEAP32[$ii59 >> 2] << 2) + 2) >> 0] | 0;
    HEAP32[$b58 >> 2] = $cond105;
    HEAP32[$ii59 >> 2] = (HEAP32[$ii59 >> 2] | 0) + 1;
   }
   HEAP8[(HEAP32[$pal$addr >> 2] | 0) + 4 + (HEAP32[$firstElt$addr >> 2] | 0) >> 0] = $47;
   HEAP8[(HEAP32[$pal$addr >> 2] | 0) + 260 + (HEAP32[$firstElt$addr >> 2] | 0) >> 0] = HEAP32[$g57 >> 2];
   HEAP8[(HEAP32[$pal$addr >> 2] | 0) + 516 + (HEAP32[$firstElt$addr >> 2] | 0) >> 0] = HEAP32[$b58 >> 2];
   STACKTOP = sp;
   return;
  }
 }
 $80 = $r120;
 HEAP32[$80 >> 2] = 0;
 HEAP32[$80 + 4 >> 2] = 0;
 $84 = $g121;
 HEAP32[$84 >> 2] = 0;
 HEAP32[$84 + 4 >> 2] = 0;
 $88 = $b122;
 HEAP32[$88 >> 2] = 0;
 HEAP32[$88 + 4 >> 2] = 0;
 HEAP32[$ii123 >> 2] = 0;
 while (1) {
  if ((HEAP32[$ii123 >> 2] | 0) >= (HEAP32[$numPixels$addr >> 2] | 0)) break;
  $98 = $r120;
  $104 = _i64Add(HEAP32[$98 >> 2] | 0, HEAP32[$98 + 4 >> 2] | 0, HEAPU8[(HEAP32[$image$addr >> 2] | 0) + ((HEAP32[$ii123 >> 2] << 2) + 0) >> 0] | 0, 0) | 0;
  $105 = getTempRet0() | 0;
  $106 = $r120;
  HEAP32[$106 >> 2] = $104;
  HEAP32[$106 + 4 >> 2] = $105;
  $114 = $g121;
  $120 = _i64Add(HEAP32[$114 >> 2] | 0, HEAP32[$114 + 4 >> 2] | 0, HEAPU8[(HEAP32[$image$addr >> 2] | 0) + ((HEAP32[$ii123 >> 2] << 2) + 1) >> 0] | 0, 0) | 0;
  $121 = getTempRet0() | 0;
  $122 = $g121;
  HEAP32[$122 >> 2] = $120;
  HEAP32[$122 + 4 >> 2] = $121;
  $130 = $b122;
  $136 = _i64Add(HEAP32[$130 >> 2] | 0, HEAP32[$130 + 4 >> 2] | 0, HEAPU8[(HEAP32[$image$addr >> 2] | 0) + ((HEAP32[$ii123 >> 2] << 2) + 2) >> 0] | 0, 0) | 0;
  $137 = getTempRet0() | 0;
  $138 = $b122;
  HEAP32[$138 >> 2] = $136;
  HEAP32[$138 + 4 >> 2] = $137;
  HEAP32[$ii123 >> 2] = (HEAP32[$ii123 >> 2] | 0) + 1;
 }
 $div = (HEAP32[$numPixels$addr >> 2] | 0) / 2 | 0;
 $146 = $r120;
 $152 = _i64Add(HEAP32[$146 >> 2] | 0, HEAP32[$146 + 4 >> 2] | 0, $div | 0, (($div | 0) < 0) << 31 >> 31 | 0) | 0;
 $153 = getTempRet0() | 0;
 $154 = $r120;
 HEAP32[$154 >> 2] = $152;
 HEAP32[$154 + 4 >> 2] = $153;
 $div148 = (HEAP32[$numPixels$addr >> 2] | 0) / 2 | 0;
 $161 = $g121;
 $167 = _i64Add(HEAP32[$161 >> 2] | 0, HEAP32[$161 + 4 >> 2] | 0, $div148 | 0, (($div148 | 0) < 0) << 31 >> 31 | 0) | 0;
 $168 = getTempRet0() | 0;
 $169 = $g121;
 HEAP32[$169 >> 2] = $167;
 HEAP32[$169 + 4 >> 2] = $168;
 $div151 = (HEAP32[$numPixels$addr >> 2] | 0) / 2 | 0;
 $176 = $b122;
 $182 = _i64Add(HEAP32[$176 >> 2] | 0, HEAP32[$176 + 4 >> 2] | 0, $div151 | 0, (($div151 | 0) < 0) << 31 >> 31 | 0) | 0;
 $183 = getTempRet0() | 0;
 $184 = $b122;
 HEAP32[$184 >> 2] = $182;
 HEAP32[$184 + 4 >> 2] = $183;
 $188 = HEAP32[$numPixels$addr >> 2] | 0;
 $191 = $r120;
 $197 = ___udivdi3(HEAP32[$191 >> 2] | 0, HEAP32[$191 + 4 >> 2] | 0, $188 | 0, (($188 | 0) < 0) << 31 >> 31 | 0) | 0;
 $198 = getTempRet0() | 0;
 $199 = $r120;
 HEAP32[$199 >> 2] = $197;
 HEAP32[$199 + 4 >> 2] = $198;
 $203 = HEAP32[$numPixels$addr >> 2] | 0;
 $206 = $g121;
 $212 = ___udivdi3(HEAP32[$206 >> 2] | 0, HEAP32[$206 + 4 >> 2] | 0, $203 | 0, (($203 | 0) < 0) << 31 >> 31 | 0) | 0;
 $213 = getTempRet0() | 0;
 $214 = $g121;
 HEAP32[$214 >> 2] = $212;
 HEAP32[$214 + 4 >> 2] = $213;
 $218 = HEAP32[$numPixels$addr >> 2] | 0;
 $221 = $b122;
 $227 = ___udivdi3(HEAP32[$221 >> 2] | 0, HEAP32[$221 + 4 >> 2] | 0, $218 | 0, (($218 | 0) < 0) << 31 >> 31 | 0) | 0;
 $228 = getTempRet0() | 0;
 $229 = $b122;
 HEAP32[$229 >> 2] = $227;
 HEAP32[$229 + 4 >> 2] = $228;
 HEAP8[(HEAP32[$pal$addr >> 2] | 0) + 4 + (HEAP32[$firstElt$addr >> 2] | 0) >> 0] = HEAP32[$r120 >> 2];
 HEAP8[(HEAP32[$pal$addr >> 2] | 0) + 260 + (HEAP32[$firstElt$addr >> 2] | 0) >> 0] = HEAP32[$g121 >> 2];
 HEAP8[(HEAP32[$pal$addr >> 2] | 0) + 516 + (HEAP32[$firstElt$addr >> 2] | 0) >> 0] = HEAP32[$b122 >> 2];
 STACKTOP = sp;
 return;
}

function __ZNSt3__211__money_getIcE13__gather_infoEbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_SF_Ri($__intl, $__loc, $__pat, $__dp, $__ts, $__grp, $__sym, $__psn, $__nsn, $__fd) {
 $__intl = $__intl | 0;
 $__loc = $__loc | 0;
 $__pat = $__pat | 0;
 $__dp = $__dp | 0;
 $__ts = $__ts | 0;
 $__grp = $__grp | 0;
 $__sym = $__sym | 0;
 $__psn = $__psn | 0;
 $__nsn = $__nsn | 0;
 $__fd = $__fd | 0;
 var $1 = 0, $16 = 0, $21 = 0, $26 = 0, $29 = 0, $34 = 0, $4 = 0, $41 = 0, $46 = 0, $9 = 0, $__cap_$i$i$i$i$i = 0, $__cap_$i$i$i$i$i101 = 0, $__cap_$i$i$i$i$i133 = 0, $__cap_$i$i$i$i$i159 = 0, $__cap_$i$i$i$i$i191 = 0, $__cap_$i$i$i$i$i217 = 0, $__cap_$i$i$i$i$i43 = 0, $__cap_$i$i$i$i$i75 = 0, $__i$0$i$i$i = 0, $__i$0$i$i$i106 = 0, $__i$0$i$i$i138 = 0, $__i$0$i$i$i164 = 0, $__i$0$i$i$i196 = 0, $__i$0$i$i$i222 = 0, $__i$0$i$i$i48 = 0, $__i$0$i$i$i80 = 0, $__size_$i1$i$i$i$i = 0, $__size_$i1$i$i$i$i124 = 0, $__size_$i1$i$i$i$i150 = 0, $__size_$i1$i$i$i$i182 = 0, $__size_$i1$i$i$i$i208 = 0, $__size_$i1$i$i$i$i34 = 0, $__size_$i1$i$i$i$i66 = 0, $__size_$i1$i$i$i$i92 = 0, $call$i = 0, $call$i116 = 0, $ref$tmp$i$i$i$i205 = 0, $ref$tmp1 = 0, $storemerge = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $ref$tmp$i$i$i$i205 = sp + 12 | 0;
 $ref$tmp1 = sp;
 if ($__intl) {
  $call$i = __ZNKSt3__26locale9use_facetERNS0_2idE($__loc, 61448) | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$call$i >> 2] | 0) + 44 >> 2] & 127]($ref$tmp$i$i$i$i205, $call$i);
  $1 = HEAP32[$ref$tmp$i$i$i$i205 >> 2] | 0;
  HEAP8[$__pat >> 0] = $1;
  HEAP8[$__pat + 1 >> 0] = $1 >> 8;
  HEAP8[$__pat + 2 >> 0] = $1 >> 16;
  HEAP8[$__pat + 3 >> 0] = $1 >> 24;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$call$i >> 2] | 0) + 32 >> 2] & 127]($ref$tmp1, $call$i);
  $__size_$i1$i$i$i$i = $__nsn + 11 | 0;
  if ((HEAP8[$__size_$i1$i$i$i$i >> 0] | 0) < 0) {
   $4 = HEAP32[$__nsn >> 2] | 0;
   HEAP8[$ref$tmp$i$i$i$i205 >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($4, $ref$tmp$i$i$i$i205);
   HEAP32[$__nsn + 4 >> 2] = 0;
   if ((HEAP8[$__size_$i1$i$i$i$i >> 0] | 0) < 0) {
    $__cap_$i$i$i$i$i = $__nsn + 8 | 0;
    __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm(HEAP32[$__nsn >> 2] | 0, HEAP32[$__cap_$i$i$i$i$i >> 2] & 2147483647);
    HEAP32[$__cap_$i$i$i$i$i >> 2] = 0;
   }
  } else {
   HEAP8[$ref$tmp$i$i$i$i205 >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($__nsn, $ref$tmp$i$i$i$i205);
   HEAP8[$__size_$i1$i$i$i$i >> 0] = 0;
  };
  HEAP32[$__nsn >> 2] = HEAP32[$ref$tmp1 >> 2];
  HEAP32[$__nsn + 4 >> 2] = HEAP32[$ref$tmp1 + 4 >> 2];
  HEAP32[$__nsn + 8 >> 2] = HEAP32[$ref$tmp1 + 8 >> 2];
  $__i$0$i$i$i = 0;
  while (1) {
   if (($__i$0$i$i$i | 0) == 3) break;
   HEAP32[$ref$tmp1 + ($__i$0$i$i$i << 2) >> 2] = 0;
   $__i$0$i$i$i = $__i$0$i$i$i + 1 | 0;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp1);
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$call$i >> 2] | 0) + 28 >> 2] & 127]($ref$tmp1, $call$i);
  $__size_$i1$i$i$i$i34 = $__psn + 11 | 0;
  if ((HEAP8[$__size_$i1$i$i$i$i34 >> 0] | 0) < 0) {
   $9 = HEAP32[$__psn >> 2] | 0;
   HEAP8[$ref$tmp$i$i$i$i205 >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($9, $ref$tmp$i$i$i$i205);
   HEAP32[$__psn + 4 >> 2] = 0;
   if ((HEAP8[$__size_$i1$i$i$i$i34 >> 0] | 0) < 0) {
    $__cap_$i$i$i$i$i43 = $__psn + 8 | 0;
    __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm(HEAP32[$__psn >> 2] | 0, HEAP32[$__cap_$i$i$i$i$i43 >> 2] & 2147483647);
    HEAP32[$__cap_$i$i$i$i$i43 >> 2] = 0;
   }
  } else {
   HEAP8[$ref$tmp$i$i$i$i205 >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($__psn, $ref$tmp$i$i$i$i205);
   HEAP8[$__size_$i1$i$i$i$i34 >> 0] = 0;
  };
  HEAP32[$__psn >> 2] = HEAP32[$ref$tmp1 >> 2];
  HEAP32[$__psn + 4 >> 2] = HEAP32[$ref$tmp1 + 4 >> 2];
  HEAP32[$__psn + 8 >> 2] = HEAP32[$ref$tmp1 + 8 >> 2];
  $__i$0$i$i$i48 = 0;
  while (1) {
   if (($__i$0$i$i$i48 | 0) == 3) break;
   HEAP32[$ref$tmp1 + ($__i$0$i$i$i48 << 2) >> 2] = 0;
   $__i$0$i$i$i48 = $__i$0$i$i$i48 + 1 | 0;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp1);
  HEAP8[$__dp >> 0] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$call$i >> 2] | 0) + 12 >> 2] & 127]($call$i) | 0;
  HEAP8[$__ts >> 0] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$call$i >> 2] | 0) + 16 >> 2] & 127]($call$i) | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$call$i >> 2] | 0) + 20 >> 2] & 127]($ref$tmp1, $call$i);
  $__size_$i1$i$i$i$i66 = $__grp + 11 | 0;
  if ((HEAP8[$__size_$i1$i$i$i$i66 >> 0] | 0) < 0) {
   $16 = HEAP32[$__grp >> 2] | 0;
   HEAP8[$ref$tmp$i$i$i$i205 >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($16, $ref$tmp$i$i$i$i205);
   HEAP32[$__grp + 4 >> 2] = 0;
   if ((HEAP8[$__size_$i1$i$i$i$i66 >> 0] | 0) < 0) {
    $__cap_$i$i$i$i$i75 = $__grp + 8 | 0;
    __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm(HEAP32[$__grp >> 2] | 0, HEAP32[$__cap_$i$i$i$i$i75 >> 2] & 2147483647);
    HEAP32[$__cap_$i$i$i$i$i75 >> 2] = 0;
   }
  } else {
   HEAP8[$ref$tmp$i$i$i$i205 >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($__grp, $ref$tmp$i$i$i$i205);
   HEAP8[$__size_$i1$i$i$i$i66 >> 0] = 0;
  };
  HEAP32[$__grp >> 2] = HEAP32[$ref$tmp1 >> 2];
  HEAP32[$__grp + 4 >> 2] = HEAP32[$ref$tmp1 + 4 >> 2];
  HEAP32[$__grp + 8 >> 2] = HEAP32[$ref$tmp1 + 8 >> 2];
  $__i$0$i$i$i80 = 0;
  while (1) {
   if (($__i$0$i$i$i80 | 0) == 3) break;
   HEAP32[$ref$tmp1 + ($__i$0$i$i$i80 << 2) >> 2] = 0;
   $__i$0$i$i$i80 = $__i$0$i$i$i80 + 1 | 0;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp1);
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$call$i >> 2] | 0) + 24 >> 2] & 127]($ref$tmp1, $call$i);
  $__size_$i1$i$i$i$i92 = $__sym + 11 | 0;
  if ((HEAP8[$__size_$i1$i$i$i$i92 >> 0] | 0) < 0) {
   $21 = HEAP32[$__sym >> 2] | 0;
   HEAP8[$ref$tmp$i$i$i$i205 >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($21, $ref$tmp$i$i$i$i205);
   HEAP32[$__sym + 4 >> 2] = 0;
   if ((HEAP8[$__size_$i1$i$i$i$i92 >> 0] | 0) < 0) {
    $__cap_$i$i$i$i$i101 = $__sym + 8 | 0;
    __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm(HEAP32[$__sym >> 2] | 0, HEAP32[$__cap_$i$i$i$i$i101 >> 2] & 2147483647);
    HEAP32[$__cap_$i$i$i$i$i101 >> 2] = 0;
   }
  } else {
   HEAP8[$ref$tmp$i$i$i$i205 >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($__sym, $ref$tmp$i$i$i$i205);
   HEAP8[$__size_$i1$i$i$i$i92 >> 0] = 0;
  };
  HEAP32[$__sym >> 2] = HEAP32[$ref$tmp1 >> 2];
  HEAP32[$__sym + 4 >> 2] = HEAP32[$ref$tmp1 + 4 >> 2];
  HEAP32[$__sym + 8 >> 2] = HEAP32[$ref$tmp1 + 8 >> 2];
  $__i$0$i$i$i106 = 0;
  while (1) {
   if (($__i$0$i$i$i106 | 0) == 3) break;
   HEAP32[$ref$tmp1 + ($__i$0$i$i$i106 << 2) >> 2] = 0;
   $__i$0$i$i$i106 = $__i$0$i$i$i106 + 1 | 0;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp1);
  $storemerge = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$call$i >> 2] | 0) + 36 >> 2] & 127]($call$i) | 0;
 } else {
  $call$i116 = __ZNKSt3__26locale9use_facetERNS0_2idE($__loc, 61440) | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$call$i116 >> 2] | 0) + 44 >> 2] & 127]($ref$tmp$i$i$i$i205, $call$i116);
  $26 = HEAP32[$ref$tmp$i$i$i$i205 >> 2] | 0;
  HEAP8[$__pat >> 0] = $26;
  HEAP8[$__pat + 1 >> 0] = $26 >> 8;
  HEAP8[$__pat + 2 >> 0] = $26 >> 16;
  HEAP8[$__pat + 3 >> 0] = $26 >> 24;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$call$i116 >> 2] | 0) + 32 >> 2] & 127]($ref$tmp1, $call$i116);
  $__size_$i1$i$i$i$i124 = $__nsn + 11 | 0;
  if ((HEAP8[$__size_$i1$i$i$i$i124 >> 0] | 0) < 0) {
   $29 = HEAP32[$__nsn >> 2] | 0;
   HEAP8[$ref$tmp$i$i$i$i205 >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($29, $ref$tmp$i$i$i$i205);
   HEAP32[$__nsn + 4 >> 2] = 0;
   if ((HEAP8[$__size_$i1$i$i$i$i124 >> 0] | 0) < 0) {
    $__cap_$i$i$i$i$i133 = $__nsn + 8 | 0;
    __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm(HEAP32[$__nsn >> 2] | 0, HEAP32[$__cap_$i$i$i$i$i133 >> 2] & 2147483647);
    HEAP32[$__cap_$i$i$i$i$i133 >> 2] = 0;
   }
  } else {
   HEAP8[$ref$tmp$i$i$i$i205 >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($__nsn, $ref$tmp$i$i$i$i205);
   HEAP8[$__size_$i1$i$i$i$i124 >> 0] = 0;
  };
  HEAP32[$__nsn >> 2] = HEAP32[$ref$tmp1 >> 2];
  HEAP32[$__nsn + 4 >> 2] = HEAP32[$ref$tmp1 + 4 >> 2];
  HEAP32[$__nsn + 8 >> 2] = HEAP32[$ref$tmp1 + 8 >> 2];
  $__i$0$i$i$i138 = 0;
  while (1) {
   if (($__i$0$i$i$i138 | 0) == 3) break;
   HEAP32[$ref$tmp1 + ($__i$0$i$i$i138 << 2) >> 2] = 0;
   $__i$0$i$i$i138 = $__i$0$i$i$i138 + 1 | 0;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp1);
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$call$i116 >> 2] | 0) + 28 >> 2] & 127]($ref$tmp1, $call$i116);
  $__size_$i1$i$i$i$i150 = $__psn + 11 | 0;
  if ((HEAP8[$__size_$i1$i$i$i$i150 >> 0] | 0) < 0) {
   $34 = HEAP32[$__psn >> 2] | 0;
   HEAP8[$ref$tmp$i$i$i$i205 >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($34, $ref$tmp$i$i$i$i205);
   HEAP32[$__psn + 4 >> 2] = 0;
   if ((HEAP8[$__size_$i1$i$i$i$i150 >> 0] | 0) < 0) {
    $__cap_$i$i$i$i$i159 = $__psn + 8 | 0;
    __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm(HEAP32[$__psn >> 2] | 0, HEAP32[$__cap_$i$i$i$i$i159 >> 2] & 2147483647);
    HEAP32[$__cap_$i$i$i$i$i159 >> 2] = 0;
   }
  } else {
   HEAP8[$ref$tmp$i$i$i$i205 >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($__psn, $ref$tmp$i$i$i$i205);
   HEAP8[$__size_$i1$i$i$i$i150 >> 0] = 0;
  };
  HEAP32[$__psn >> 2] = HEAP32[$ref$tmp1 >> 2];
  HEAP32[$__psn + 4 >> 2] = HEAP32[$ref$tmp1 + 4 >> 2];
  HEAP32[$__psn + 8 >> 2] = HEAP32[$ref$tmp1 + 8 >> 2];
  $__i$0$i$i$i164 = 0;
  while (1) {
   if (($__i$0$i$i$i164 | 0) == 3) break;
   HEAP32[$ref$tmp1 + ($__i$0$i$i$i164 << 2) >> 2] = 0;
   $__i$0$i$i$i164 = $__i$0$i$i$i164 + 1 | 0;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp1);
  HEAP8[$__dp >> 0] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$call$i116 >> 2] | 0) + 12 >> 2] & 127]($call$i116) | 0;
  HEAP8[$__ts >> 0] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$call$i116 >> 2] | 0) + 16 >> 2] & 127]($call$i116) | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$call$i116 >> 2] | 0) + 20 >> 2] & 127]($ref$tmp1, $call$i116);
  $__size_$i1$i$i$i$i182 = $__grp + 11 | 0;
  if ((HEAP8[$__size_$i1$i$i$i$i182 >> 0] | 0) < 0) {
   $41 = HEAP32[$__grp >> 2] | 0;
   HEAP8[$ref$tmp$i$i$i$i205 >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($41, $ref$tmp$i$i$i$i205);
   HEAP32[$__grp + 4 >> 2] = 0;
   if ((HEAP8[$__size_$i1$i$i$i$i182 >> 0] | 0) < 0) {
    $__cap_$i$i$i$i$i191 = $__grp + 8 | 0;
    __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm(HEAP32[$__grp >> 2] | 0, HEAP32[$__cap_$i$i$i$i$i191 >> 2] & 2147483647);
    HEAP32[$__cap_$i$i$i$i$i191 >> 2] = 0;
   }
  } else {
   HEAP8[$ref$tmp$i$i$i$i205 >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($__grp, $ref$tmp$i$i$i$i205);
   HEAP8[$__size_$i1$i$i$i$i182 >> 0] = 0;
  };
  HEAP32[$__grp >> 2] = HEAP32[$ref$tmp1 >> 2];
  HEAP32[$__grp + 4 >> 2] = HEAP32[$ref$tmp1 + 4 >> 2];
  HEAP32[$__grp + 8 >> 2] = HEAP32[$ref$tmp1 + 8 >> 2];
  $__i$0$i$i$i196 = 0;
  while (1) {
   if (($__i$0$i$i$i196 | 0) == 3) break;
   HEAP32[$ref$tmp1 + ($__i$0$i$i$i196 << 2) >> 2] = 0;
   $__i$0$i$i$i196 = $__i$0$i$i$i196 + 1 | 0;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp1);
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$call$i116 >> 2] | 0) + 24 >> 2] & 127]($ref$tmp1, $call$i116);
  $__size_$i1$i$i$i$i208 = $__sym + 11 | 0;
  if ((HEAP8[$__size_$i1$i$i$i$i208 >> 0] | 0) < 0) {
   $46 = HEAP32[$__sym >> 2] | 0;
   HEAP8[$ref$tmp$i$i$i$i205 >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($46, $ref$tmp$i$i$i$i205);
   HEAP32[$__sym + 4 >> 2] = 0;
   if ((HEAP8[$__size_$i1$i$i$i$i208 >> 0] | 0) < 0) {
    $__cap_$i$i$i$i$i217 = $__sym + 8 | 0;
    __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm(HEAP32[$__sym >> 2] | 0, HEAP32[$__cap_$i$i$i$i$i217 >> 2] & 2147483647);
    HEAP32[$__cap_$i$i$i$i$i217 >> 2] = 0;
   }
  } else {
   HEAP8[$ref$tmp$i$i$i$i205 >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($__sym, $ref$tmp$i$i$i$i205);
   HEAP8[$__size_$i1$i$i$i$i208 >> 0] = 0;
  };
  HEAP32[$__sym >> 2] = HEAP32[$ref$tmp1 >> 2];
  HEAP32[$__sym + 4 >> 2] = HEAP32[$ref$tmp1 + 4 >> 2];
  HEAP32[$__sym + 8 >> 2] = HEAP32[$ref$tmp1 + 8 >> 2];
  $__i$0$i$i$i222 = 0;
  while (1) {
   if (($__i$0$i$i$i222 | 0) == 3) break;
   HEAP32[$ref$tmp1 + ($__i$0$i$i$i222 << 2) >> 2] = 0;
   $__i$0$i$i$i222 = $__i$0$i$i$i222 + 1 | 0;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp1);
  $storemerge = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$call$i116 >> 2] | 0) + 36 >> 2] & 127]($call$i116) | 0;
 }
 HEAP32[$__fd >> 2] = $storemerge;
 STACKTOP = sp;
 return;
}

function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc($this, $__b, $__e, $__iob, $__err, $__tm, $__fmt, $0) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__tm = $__tm | 0;
 $__fmt = $__fmt | 0;
 $0 = $0 | 0;
 var $30 = 0, $37 = 0, $7 = 0, $add$ptr = 0, $add$ptr12 = 0, $add$ptr77 = 0, $add$ptr87 = 0, $agg$tmp = 0, $agg$tmp15 = 0, $agg$tmp18 = 0, $agg$tmp19 = 0, $agg$tmp24 = 0, $agg$tmp25 = 0, $agg$tmp29 = 0, $agg$tmp3 = 0, $agg$tmp32 = 0, $agg$tmp34 = 0, $agg$tmp37 = 0, $agg$tmp39 = 0, $agg$tmp41 = 0, $agg$tmp44 = 0, $agg$tmp47 = 0, $agg$tmp48 = 0, $agg$tmp53 = 0, $agg$tmp54 = 0, $agg$tmp58 = 0, $agg$tmp61 = 0, $agg$tmp62 = 0, $agg$tmp67 = 0, $agg$tmp7 = 0, $agg$tmp71 = 0, $agg$tmp72 = 0, $agg$tmp8 = 0, $agg$tmp82 = 0, $agg$tmp82$byval_copy = 0, $agg$tmp83 = 0, $agg$tmp91 = 0, $agg$tmp94 = 0, $agg$tmp96 = 0, $agg$tmp96$byval_copy = 0, $call$i = 0, $call5 = 0, $call80 = 0, $cond$i$i103123 = 0, $cond$i$i87117 = 0, $retval$sroa$0$0 = 0, $tobool$i$i$i = 0, $tobool$i$i$i90 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(144);
 $agg$tmp96$byval_copy = sp + 128 | 0;
 $agg$tmp82$byval_copy = sp + 112 | 0;
 $agg$tmp = sp + 124 | 0;
 $agg$tmp3 = sp + 120 | 0;
 $agg$tmp7 = sp + 116 | 0;
 $agg$tmp8 = sp + 108 | 0;
 $agg$tmp15 = sp + 104 | 0;
 $agg$tmp18 = sp + 100 | 0;
 $agg$tmp19 = sp + 96 | 0;
 $agg$tmp24 = sp + 92 | 0;
 $agg$tmp25 = sp + 88 | 0;
 $agg$tmp29 = sp + 84 | 0;
 $agg$tmp32 = sp + 80 | 0;
 $agg$tmp34 = sp + 76 | 0;
 $agg$tmp37 = sp + 72 | 0;
 $agg$tmp39 = sp + 68 | 0;
 $agg$tmp41 = sp + 64 | 0;
 $agg$tmp44 = sp + 60 | 0;
 $agg$tmp47 = sp + 56 | 0;
 $agg$tmp48 = sp + 52 | 0;
 $agg$tmp53 = sp + 48 | 0;
 $agg$tmp54 = sp + 44 | 0;
 $agg$tmp58 = sp + 40 | 0;
 $agg$tmp61 = sp + 36 | 0;
 $agg$tmp62 = sp + 32 | 0;
 $agg$tmp67 = sp + 28 | 0;
 $agg$tmp71 = sp + 24 | 0;
 $agg$tmp72 = sp + 20 | 0;
 $agg$tmp82 = sp + 16 | 0;
 $agg$tmp83 = sp + 12 | 0;
 $agg$tmp91 = sp + 8 | 0;
 $agg$tmp94 = sp + 4 | 0;
 $agg$tmp96 = sp;
 HEAP32[$__err >> 2] = 0;
 __ZNKSt3__28ios_base6getlocEv($agg$tmp96$byval_copy, $__iob);
 $call$i = __ZNKSt3__26locale9use_facetERNS0_2idE($agg$tmp96$byval_copy, 61248) | 0;
 __ZNSt3__26localeD2Ev($agg$tmp96$byval_copy);
 do switch ($__fmt << 24 >> 24 | 0) {
 case 65:
 case 97:
  {
   HEAP32[$agg$tmp >> 2] = HEAP32[$__e >> 2];
   HEAP32[$agg$tmp96$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
   __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIwEE($this, $__tm + 24 | 0, $__b, $agg$tmp96$byval_copy, $__err, $call$i);
   label = 26;
   break;
  }
 case 104:
 case 66:
 case 98:
  {
   HEAP32[$agg$tmp3 >> 2] = HEAP32[$__e >> 2];
   HEAP32[$agg$tmp96$byval_copy >> 2] = HEAP32[$agg$tmp3 >> 2];
   __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIwEE($this, $__tm + 16 | 0, $__b, $agg$tmp96$byval_copy, $__err, $call$i);
   label = 26;
   break;
  }
 case 99:
  {
   $add$ptr = $this + 8 | 0;
   $call5 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$add$ptr >> 2] | 0) + 12 >> 2] & 127]($add$ptr) | 0;
   HEAP32[$agg$tmp7 >> 2] = HEAP32[$__b >> 2];
   HEAP32[$agg$tmp8 >> 2] = HEAP32[$__e >> 2];
   $7 = HEAP8[$call5 + 8 + 3 >> 0] | 0;
   $tobool$i$i$i = $7 << 24 >> 24 < 0;
   $cond$i$i87117 = $tobool$i$i$i ? HEAP32[$call5 >> 2] | 0 : $call5;
   $add$ptr12 = $cond$i$i87117 + (($tobool$i$i$i ? HEAP32[$call5 + 4 >> 2] | 0 : $7 & 255) << 2) | 0;
   HEAP32[$agg$tmp82$byval_copy >> 2] = HEAP32[$agg$tmp7 >> 2];
   HEAP32[$agg$tmp96$byval_copy >> 2] = HEAP32[$agg$tmp8 >> 2];
   HEAP32[$__b >> 2] = __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($this, $agg$tmp82$byval_copy, $agg$tmp96$byval_copy, $__iob, $__err, $__tm, $cond$i$i87117, $add$ptr12) | 0;
   label = 26;
   break;
  }
 case 101:
 case 100:
  {
   HEAP32[$agg$tmp15 >> 2] = HEAP32[$__e >> 2];
   HEAP32[$agg$tmp96$byval_copy >> 2] = HEAP32[$agg$tmp15 >> 2];
   __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE9__get_dayERiRS4_S4_RjRKNS_5ctypeIwEE($this, $__tm + 12 | 0, $__b, $agg$tmp96$byval_copy, $__err, $call$i);
   label = 26;
   break;
  }
 case 68:
  {
   HEAP32[$agg$tmp18 >> 2] = HEAP32[$__b >> 2];
   HEAP32[$agg$tmp19 >> 2] = HEAP32[$__e >> 2];
   HEAP32[$agg$tmp82$byval_copy >> 2] = HEAP32[$agg$tmp18 >> 2];
   HEAP32[$agg$tmp96$byval_copy >> 2] = HEAP32[$agg$tmp19 >> 2];
   HEAP32[$__b >> 2] = __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($this, $agg$tmp82$byval_copy, $agg$tmp96$byval_copy, $__iob, $__err, $__tm, 14720, 14752) | 0;
   label = 26;
   break;
  }
 case 70:
  {
   HEAP32[$agg$tmp24 >> 2] = HEAP32[$__b >> 2];
   HEAP32[$agg$tmp25 >> 2] = HEAP32[$__e >> 2];
   HEAP32[$agg$tmp82$byval_copy >> 2] = HEAP32[$agg$tmp24 >> 2];
   HEAP32[$agg$tmp96$byval_copy >> 2] = HEAP32[$agg$tmp25 >> 2];
   HEAP32[$__b >> 2] = __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($this, $agg$tmp82$byval_copy, $agg$tmp96$byval_copy, $__iob, $__err, $__tm, 14752, 14784) | 0;
   label = 26;
   break;
  }
 case 72:
  {
   HEAP32[$agg$tmp29 >> 2] = HEAP32[$__e >> 2];
   HEAP32[$agg$tmp96$byval_copy >> 2] = HEAP32[$agg$tmp29 >> 2];
   __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE10__get_hourERiRS4_S4_RjRKNS_5ctypeIwEE($this, $__tm + 8 | 0, $__b, $agg$tmp96$byval_copy, $__err, $call$i);
   label = 26;
   break;
  }
 case 73:
  {
   HEAP32[$agg$tmp32 >> 2] = HEAP32[$__e >> 2];
   HEAP32[$agg$tmp96$byval_copy >> 2] = HEAP32[$agg$tmp32 >> 2];
   __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_12_hourERiRS4_S4_RjRKNS_5ctypeIwEE($this, $__tm + 8 | 0, $__b, $agg$tmp96$byval_copy, $__err, $call$i);
   label = 26;
   break;
  }
 case 106:
  {
   HEAP32[$agg$tmp34 >> 2] = HEAP32[$__e >> 2];
   HEAP32[$agg$tmp96$byval_copy >> 2] = HEAP32[$agg$tmp34 >> 2];
   __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE18__get_day_year_numERiRS4_S4_RjRKNS_5ctypeIwEE($this, $__tm + 28 | 0, $__b, $agg$tmp96$byval_copy, $__err, $call$i);
   label = 26;
   break;
  }
 case 109:
  {
   HEAP32[$agg$tmp37 >> 2] = HEAP32[$__e >> 2];
   HEAP32[$agg$tmp96$byval_copy >> 2] = HEAP32[$agg$tmp37 >> 2];
   __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_monthERiRS4_S4_RjRKNS_5ctypeIwEE($this, $__tm + 16 | 0, $__b, $agg$tmp96$byval_copy, $__err, $call$i);
   label = 26;
   break;
  }
 case 77:
  {
   HEAP32[$agg$tmp39 >> 2] = HEAP32[$__e >> 2];
   HEAP32[$agg$tmp96$byval_copy >> 2] = HEAP32[$agg$tmp39 >> 2];
   __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE12__get_minuteERiRS4_S4_RjRKNS_5ctypeIwEE($this, $__tm + 4 | 0, $__b, $agg$tmp96$byval_copy, $__err, $call$i);
   label = 26;
   break;
  }
 case 116:
 case 110:
  {
   HEAP32[$agg$tmp41 >> 2] = HEAP32[$__e >> 2];
   HEAP32[$agg$tmp96$byval_copy >> 2] = HEAP32[$agg$tmp41 >> 2];
   __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_white_spaceERS4_S4_RjRKNS_5ctypeIwEE($this, $__b, $agg$tmp96$byval_copy, $__err, $call$i);
   label = 26;
   break;
  }
 case 112:
  {
   HEAP32[$agg$tmp44 >> 2] = HEAP32[$__e >> 2];
   HEAP32[$agg$tmp96$byval_copy >> 2] = HEAP32[$agg$tmp44 >> 2];
   __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_am_pmERiRS4_S4_RjRKNS_5ctypeIwEE($this, $__tm + 8 | 0, $__b, $agg$tmp96$byval_copy, $__err, $call$i);
   label = 26;
   break;
  }
 case 114:
  {
   HEAP32[$agg$tmp47 >> 2] = HEAP32[$__b >> 2];
   HEAP32[$agg$tmp48 >> 2] = HEAP32[$__e >> 2];
   HEAP32[$agg$tmp82$byval_copy >> 2] = HEAP32[$agg$tmp47 >> 2];
   HEAP32[$agg$tmp96$byval_copy >> 2] = HEAP32[$agg$tmp48 >> 2];
   HEAP32[$__b >> 2] = __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($this, $agg$tmp82$byval_copy, $agg$tmp96$byval_copy, $__iob, $__err, $__tm, 14784, 14828) | 0;
   label = 26;
   break;
  }
 case 82:
  {
   HEAP32[$agg$tmp53 >> 2] = HEAP32[$__b >> 2];
   HEAP32[$agg$tmp54 >> 2] = HEAP32[$__e >> 2];
   HEAP32[$agg$tmp82$byval_copy >> 2] = HEAP32[$agg$tmp53 >> 2];
   HEAP32[$agg$tmp96$byval_copy >> 2] = HEAP32[$agg$tmp54 >> 2];
   HEAP32[$__b >> 2] = __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($this, $agg$tmp82$byval_copy, $agg$tmp96$byval_copy, $__iob, $__err, $__tm, 14832, 14852) | 0;
   label = 26;
   break;
  }
 case 83:
  {
   HEAP32[$agg$tmp58 >> 2] = HEAP32[$__e >> 2];
   HEAP32[$agg$tmp96$byval_copy >> 2] = HEAP32[$agg$tmp58 >> 2];
   __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE12__get_secondERiRS4_S4_RjRKNS_5ctypeIwEE($this, $__tm, $__b, $agg$tmp96$byval_copy, $__err, $call$i);
   label = 26;
   break;
  }
 case 84:
  {
   HEAP32[$agg$tmp61 >> 2] = HEAP32[$__b >> 2];
   HEAP32[$agg$tmp62 >> 2] = HEAP32[$__e >> 2];
   HEAP32[$agg$tmp82$byval_copy >> 2] = HEAP32[$agg$tmp61 >> 2];
   HEAP32[$agg$tmp96$byval_copy >> 2] = HEAP32[$agg$tmp62 >> 2];
   HEAP32[$__b >> 2] = __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($this, $agg$tmp82$byval_copy, $agg$tmp96$byval_copy, $__iob, $__err, $__tm, 14864, 14896) | 0;
   label = 26;
   break;
  }
 case 119:
  {
   HEAP32[$agg$tmp67 >> 2] = HEAP32[$__e >> 2];
   HEAP32[$agg$tmp96$byval_copy >> 2] = HEAP32[$agg$tmp67 >> 2];
   __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_weekdayERiRS4_S4_RjRKNS_5ctypeIwEE($this, $__tm + 24 | 0, $__b, $agg$tmp96$byval_copy, $__err, $call$i);
   label = 26;
   break;
  }
 case 120:
  {
   $30 = HEAP32[(HEAP32[$this >> 2] | 0) + 20 >> 2] | 0;
   HEAP32[$agg$tmp71 >> 2] = HEAP32[$__b >> 2];
   HEAP32[$agg$tmp72 >> 2] = HEAP32[$__e >> 2];
   HEAP32[$agg$tmp82$byval_copy >> 2] = HEAP32[$agg$tmp71 >> 2];
   HEAP32[$agg$tmp96$byval_copy >> 2] = HEAP32[$agg$tmp72 >> 2];
   $retval$sroa$0$0 = FUNCTION_TABLE_iiiiiii[$30 & 63]($this, $agg$tmp82$byval_copy, $agg$tmp96$byval_copy, $__iob, $__err, $__tm) | 0;
   break;
  }
 case 88:
  {
   $add$ptr77 = $this + 8 | 0;
   $call80 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$add$ptr77 >> 2] | 0) + 24 >> 2] & 127]($add$ptr77) | 0;
   HEAP32[$agg$tmp82 >> 2] = HEAP32[$__b >> 2];
   HEAP32[$agg$tmp83 >> 2] = HEAP32[$__e >> 2];
   $37 = HEAP8[$call80 + 8 + 3 >> 0] | 0;
   $tobool$i$i$i90 = $37 << 24 >> 24 < 0;
   $cond$i$i103123 = $tobool$i$i$i90 ? HEAP32[$call80 >> 2] | 0 : $call80;
   $add$ptr87 = $cond$i$i103123 + (($tobool$i$i$i90 ? HEAP32[$call80 + 4 >> 2] | 0 : $37 & 255) << 2) | 0;
   HEAP32[$agg$tmp82$byval_copy >> 2] = HEAP32[$agg$tmp82 >> 2];
   HEAP32[$agg$tmp96$byval_copy >> 2] = HEAP32[$agg$tmp83 >> 2];
   HEAP32[$__b >> 2] = __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($this, $agg$tmp82$byval_copy, $agg$tmp96$byval_copy, $__iob, $__err, $__tm, $cond$i$i103123, $add$ptr87) | 0;
   label = 26;
   break;
  }
 case 121:
  {
   HEAP32[$agg$tmp91 >> 2] = HEAP32[$__e >> 2];
   HEAP32[$agg$tmp96$byval_copy >> 2] = HEAP32[$agg$tmp91 >> 2];
   __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIwEE($this, $__tm + 20 | 0, $__b, $agg$tmp96$byval_copy, $__err, $call$i);
   label = 26;
   break;
  }
 case 89:
  {
   HEAP32[$agg$tmp94 >> 2] = HEAP32[$__e >> 2];
   HEAP32[$agg$tmp96$byval_copy >> 2] = HEAP32[$agg$tmp94 >> 2];
   __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_year4ERiRS4_S4_RjRKNS_5ctypeIwEE($this, $__tm + 20 | 0, $__b, $agg$tmp96$byval_copy, $__err, $call$i);
   label = 26;
   break;
  }
 case 37:
  {
   HEAP32[$agg$tmp96 >> 2] = HEAP32[$__e >> 2];
   HEAP32[$agg$tmp96$byval_copy >> 2] = HEAP32[$agg$tmp96 >> 2];
   __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_percentERS4_S4_RjRKNS_5ctypeIwEE($this, $__b, $agg$tmp96$byval_copy, $__err, $call$i);
   label = 26;
   break;
  }
 default:
  {
   HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 4;
   label = 26;
  }
 } while (0);
 if ((label | 0) == 26) $retval$sroa$0$0 = HEAP32[$__b >> 2] | 0;
 STACKTOP = sp;
 return $retval$sroa$0$0 | 0;
}

function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc($this, $__b, $__e, $__iob, $__err, $__tm, $__fmt, $0) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__tm = $__tm | 0;
 $__fmt = $__fmt | 0;
 $0 = $0 | 0;
 var $29 = 0, $35 = 0, $6 = 0, $add$ptr = 0, $add$ptr12 = 0, $add$ptr77 = 0, $add$ptr87 = 0, $agg$tmp = 0, $agg$tmp15 = 0, $agg$tmp18 = 0, $agg$tmp19 = 0, $agg$tmp24 = 0, $agg$tmp25 = 0, $agg$tmp29 = 0, $agg$tmp3 = 0, $agg$tmp32 = 0, $agg$tmp34 = 0, $agg$tmp37 = 0, $agg$tmp39 = 0, $agg$tmp41 = 0, $agg$tmp44 = 0, $agg$tmp47 = 0, $agg$tmp48 = 0, $agg$tmp53 = 0, $agg$tmp54 = 0, $agg$tmp58 = 0, $agg$tmp61 = 0, $agg$tmp62 = 0, $agg$tmp67 = 0, $agg$tmp7 = 0, $agg$tmp71 = 0, $agg$tmp72 = 0, $agg$tmp8 = 0, $agg$tmp82 = 0, $agg$tmp82$byval_copy = 0, $agg$tmp83 = 0, $agg$tmp91 = 0, $agg$tmp94 = 0, $agg$tmp96 = 0, $agg$tmp96$byval_copy = 0, $call$i = 0, $call5 = 0, $call80 = 0, $cond$i$i106127 = 0, $cond$i$i88121 = 0, $retval$sroa$0$0 = 0, $tobool$i$i$i = 0, $tobool$i$i$i92 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(144);
 $agg$tmp96$byval_copy = sp + 128 | 0;
 $agg$tmp82$byval_copy = sp + 112 | 0;
 $agg$tmp = sp + 124 | 0;
 $agg$tmp3 = sp + 120 | 0;
 $agg$tmp7 = sp + 116 | 0;
 $agg$tmp8 = sp + 108 | 0;
 $agg$tmp15 = sp + 104 | 0;
 $agg$tmp18 = sp + 100 | 0;
 $agg$tmp19 = sp + 96 | 0;
 $agg$tmp24 = sp + 92 | 0;
 $agg$tmp25 = sp + 88 | 0;
 $agg$tmp29 = sp + 84 | 0;
 $agg$tmp32 = sp + 80 | 0;
 $agg$tmp34 = sp + 76 | 0;
 $agg$tmp37 = sp + 72 | 0;
 $agg$tmp39 = sp + 68 | 0;
 $agg$tmp41 = sp + 64 | 0;
 $agg$tmp44 = sp + 60 | 0;
 $agg$tmp47 = sp + 56 | 0;
 $agg$tmp48 = sp + 52 | 0;
 $agg$tmp53 = sp + 48 | 0;
 $agg$tmp54 = sp + 44 | 0;
 $agg$tmp58 = sp + 40 | 0;
 $agg$tmp61 = sp + 36 | 0;
 $agg$tmp62 = sp + 32 | 0;
 $agg$tmp67 = sp + 28 | 0;
 $agg$tmp71 = sp + 24 | 0;
 $agg$tmp72 = sp + 20 | 0;
 $agg$tmp82 = sp + 16 | 0;
 $agg$tmp83 = sp + 12 | 0;
 $agg$tmp91 = sp + 8 | 0;
 $agg$tmp94 = sp + 4 | 0;
 $agg$tmp96 = sp;
 HEAP32[$__err >> 2] = 0;
 __ZNKSt3__28ios_base6getlocEv($agg$tmp96$byval_copy, $__iob);
 $call$i = __ZNKSt3__26locale9use_facetERNS0_2idE($agg$tmp96$byval_copy, 61216) | 0;
 __ZNSt3__26localeD2Ev($agg$tmp96$byval_copy);
 do switch ($__fmt << 24 >> 24 | 0) {
 case 65:
 case 97:
  {
   HEAP32[$agg$tmp >> 2] = HEAP32[$__e >> 2];
   HEAP32[$agg$tmp96$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
   __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIcEE($this, $__tm + 24 | 0, $__b, $agg$tmp96$byval_copy, $__err, $call$i);
   label = 26;
   break;
  }
 case 104:
 case 66:
 case 98:
  {
   HEAP32[$agg$tmp3 >> 2] = HEAP32[$__e >> 2];
   HEAP32[$agg$tmp96$byval_copy >> 2] = HEAP32[$agg$tmp3 >> 2];
   __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIcEE($this, $__tm + 16 | 0, $__b, $agg$tmp96$byval_copy, $__err, $call$i);
   label = 26;
   break;
  }
 case 99:
  {
   $add$ptr = $this + 8 | 0;
   $call5 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$add$ptr >> 2] | 0) + 12 >> 2] & 127]($add$ptr) | 0;
   HEAP32[$agg$tmp7 >> 2] = HEAP32[$__b >> 2];
   HEAP32[$agg$tmp8 >> 2] = HEAP32[$__e >> 2];
   $6 = HEAP8[$call5 + 11 >> 0] | 0;
   $tobool$i$i$i = $6 << 24 >> 24 < 0;
   $cond$i$i88121 = $tobool$i$i$i ? HEAP32[$call5 >> 2] | 0 : $call5;
   $add$ptr12 = $cond$i$i88121 + ($tobool$i$i$i ? HEAP32[$call5 + 4 >> 2] | 0 : $6 & 255) | 0;
   HEAP32[$agg$tmp82$byval_copy >> 2] = HEAP32[$agg$tmp7 >> 2];
   HEAP32[$agg$tmp96$byval_copy >> 2] = HEAP32[$agg$tmp8 >> 2];
   HEAP32[$__b >> 2] = __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($this, $agg$tmp82$byval_copy, $agg$tmp96$byval_copy, $__iob, $__err, $__tm, $cond$i$i88121, $add$ptr12) | 0;
   label = 26;
   break;
  }
 case 101:
 case 100:
  {
   HEAP32[$agg$tmp15 >> 2] = HEAP32[$__e >> 2];
   HEAP32[$agg$tmp96$byval_copy >> 2] = HEAP32[$agg$tmp15 >> 2];
   __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE9__get_dayERiRS4_S4_RjRKNS_5ctypeIcEE($this, $__tm + 12 | 0, $__b, $agg$tmp96$byval_copy, $__err, $call$i);
   label = 26;
   break;
  }
 case 68:
  {
   HEAP32[$agg$tmp18 >> 2] = HEAP32[$__b >> 2];
   HEAP32[$agg$tmp19 >> 2] = HEAP32[$__e >> 2];
   HEAP32[$agg$tmp82$byval_copy >> 2] = HEAP32[$agg$tmp18 >> 2];
   HEAP32[$agg$tmp96$byval_copy >> 2] = HEAP32[$agg$tmp19 >> 2];
   HEAP32[$__b >> 2] = __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($this, $agg$tmp82$byval_copy, $agg$tmp96$byval_copy, $__iob, $__err, $__tm, 43557, 43565) | 0;
   label = 26;
   break;
  }
 case 70:
  {
   HEAP32[$agg$tmp24 >> 2] = HEAP32[$__b >> 2];
   HEAP32[$agg$tmp25 >> 2] = HEAP32[$__e >> 2];
   HEAP32[$agg$tmp82$byval_copy >> 2] = HEAP32[$agg$tmp24 >> 2];
   HEAP32[$agg$tmp96$byval_copy >> 2] = HEAP32[$agg$tmp25 >> 2];
   HEAP32[$__b >> 2] = __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($this, $agg$tmp82$byval_copy, $agg$tmp96$byval_copy, $__iob, $__err, $__tm, 43565, 43573) | 0;
   label = 26;
   break;
  }
 case 72:
  {
   HEAP32[$agg$tmp29 >> 2] = HEAP32[$__e >> 2];
   HEAP32[$agg$tmp96$byval_copy >> 2] = HEAP32[$agg$tmp29 >> 2];
   __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE10__get_hourERiRS4_S4_RjRKNS_5ctypeIcEE($this, $__tm + 8 | 0, $__b, $agg$tmp96$byval_copy, $__err, $call$i);
   label = 26;
   break;
  }
 case 73:
  {
   HEAP32[$agg$tmp32 >> 2] = HEAP32[$__e >> 2];
   HEAP32[$agg$tmp96$byval_copy >> 2] = HEAP32[$agg$tmp32 >> 2];
   __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_12_hourERiRS4_S4_RjRKNS_5ctypeIcEE($this, $__tm + 8 | 0, $__b, $agg$tmp96$byval_copy, $__err, $call$i);
   label = 26;
   break;
  }
 case 106:
  {
   HEAP32[$agg$tmp34 >> 2] = HEAP32[$__e >> 2];
   HEAP32[$agg$tmp96$byval_copy >> 2] = HEAP32[$agg$tmp34 >> 2];
   __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE18__get_day_year_numERiRS4_S4_RjRKNS_5ctypeIcEE($this, $__tm + 28 | 0, $__b, $agg$tmp96$byval_copy, $__err, $call$i);
   label = 26;
   break;
  }
 case 109:
  {
   HEAP32[$agg$tmp37 >> 2] = HEAP32[$__e >> 2];
   HEAP32[$agg$tmp96$byval_copy >> 2] = HEAP32[$agg$tmp37 >> 2];
   __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_monthERiRS4_S4_RjRKNS_5ctypeIcEE($this, $__tm + 16 | 0, $__b, $agg$tmp96$byval_copy, $__err, $call$i);
   label = 26;
   break;
  }
 case 77:
  {
   HEAP32[$agg$tmp39 >> 2] = HEAP32[$__e >> 2];
   HEAP32[$agg$tmp96$byval_copy >> 2] = HEAP32[$agg$tmp39 >> 2];
   __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE12__get_minuteERiRS4_S4_RjRKNS_5ctypeIcEE($this, $__tm + 4 | 0, $__b, $agg$tmp96$byval_copy, $__err, $call$i);
   label = 26;
   break;
  }
 case 116:
 case 110:
  {
   HEAP32[$agg$tmp41 >> 2] = HEAP32[$__e >> 2];
   HEAP32[$agg$tmp96$byval_copy >> 2] = HEAP32[$agg$tmp41 >> 2];
   __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_white_spaceERS4_S4_RjRKNS_5ctypeIcEE($this, $__b, $agg$tmp96$byval_copy, $__err, $call$i);
   label = 26;
   break;
  }
 case 112:
  {
   HEAP32[$agg$tmp44 >> 2] = HEAP32[$__e >> 2];
   HEAP32[$agg$tmp96$byval_copy >> 2] = HEAP32[$agg$tmp44 >> 2];
   __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_am_pmERiRS4_S4_RjRKNS_5ctypeIcEE($this, $__tm + 8 | 0, $__b, $agg$tmp96$byval_copy, $__err, $call$i);
   label = 26;
   break;
  }
 case 114:
  {
   HEAP32[$agg$tmp47 >> 2] = HEAP32[$__b >> 2];
   HEAP32[$agg$tmp48 >> 2] = HEAP32[$__e >> 2];
   HEAP32[$agg$tmp82$byval_copy >> 2] = HEAP32[$agg$tmp47 >> 2];
   HEAP32[$agg$tmp96$byval_copy >> 2] = HEAP32[$agg$tmp48 >> 2];
   HEAP32[$__b >> 2] = __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($this, $agg$tmp82$byval_copy, $agg$tmp96$byval_copy, $__iob, $__err, $__tm, 43573, 43584) | 0;
   label = 26;
   break;
  }
 case 82:
  {
   HEAP32[$agg$tmp53 >> 2] = HEAP32[$__b >> 2];
   HEAP32[$agg$tmp54 >> 2] = HEAP32[$__e >> 2];
   HEAP32[$agg$tmp82$byval_copy >> 2] = HEAP32[$agg$tmp53 >> 2];
   HEAP32[$agg$tmp96$byval_copy >> 2] = HEAP32[$agg$tmp54 >> 2];
   HEAP32[$__b >> 2] = __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($this, $agg$tmp82$byval_copy, $agg$tmp96$byval_copy, $__iob, $__err, $__tm, 43584, 43589) | 0;
   label = 26;
   break;
  }
 case 83:
  {
   HEAP32[$agg$tmp58 >> 2] = HEAP32[$__e >> 2];
   HEAP32[$agg$tmp96$byval_copy >> 2] = HEAP32[$agg$tmp58 >> 2];
   __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE12__get_secondERiRS4_S4_RjRKNS_5ctypeIcEE($this, $__tm, $__b, $agg$tmp96$byval_copy, $__err, $call$i);
   label = 26;
   break;
  }
 case 84:
  {
   HEAP32[$agg$tmp61 >> 2] = HEAP32[$__b >> 2];
   HEAP32[$agg$tmp62 >> 2] = HEAP32[$__e >> 2];
   HEAP32[$agg$tmp82$byval_copy >> 2] = HEAP32[$agg$tmp61 >> 2];
   HEAP32[$agg$tmp96$byval_copy >> 2] = HEAP32[$agg$tmp62 >> 2];
   HEAP32[$__b >> 2] = __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($this, $agg$tmp82$byval_copy, $agg$tmp96$byval_copy, $__iob, $__err, $__tm, 43589, 43597) | 0;
   label = 26;
   break;
  }
 case 119:
  {
   HEAP32[$agg$tmp67 >> 2] = HEAP32[$__e >> 2];
   HEAP32[$agg$tmp96$byval_copy >> 2] = HEAP32[$agg$tmp67 >> 2];
   __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_weekdayERiRS4_S4_RjRKNS_5ctypeIcEE($this, $__tm + 24 | 0, $__b, $agg$tmp96$byval_copy, $__err, $call$i);
   label = 26;
   break;
  }
 case 120:
  {
   $29 = HEAP32[(HEAP32[$this >> 2] | 0) + 20 >> 2] | 0;
   HEAP32[$agg$tmp71 >> 2] = HEAP32[$__b >> 2];
   HEAP32[$agg$tmp72 >> 2] = HEAP32[$__e >> 2];
   HEAP32[$agg$tmp82$byval_copy >> 2] = HEAP32[$agg$tmp71 >> 2];
   HEAP32[$agg$tmp96$byval_copy >> 2] = HEAP32[$agg$tmp72 >> 2];
   $retval$sroa$0$0 = FUNCTION_TABLE_iiiiiii[$29 & 63]($this, $agg$tmp82$byval_copy, $agg$tmp96$byval_copy, $__iob, $__err, $__tm) | 0;
   break;
  }
 case 88:
  {
   $add$ptr77 = $this + 8 | 0;
   $call80 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$add$ptr77 >> 2] | 0) + 24 >> 2] & 127]($add$ptr77) | 0;
   HEAP32[$agg$tmp82 >> 2] = HEAP32[$__b >> 2];
   HEAP32[$agg$tmp83 >> 2] = HEAP32[$__e >> 2];
   $35 = HEAP8[$call80 + 11 >> 0] | 0;
   $tobool$i$i$i92 = $35 << 24 >> 24 < 0;
   $cond$i$i106127 = $tobool$i$i$i92 ? HEAP32[$call80 >> 2] | 0 : $call80;
   $add$ptr87 = $cond$i$i106127 + ($tobool$i$i$i92 ? HEAP32[$call80 + 4 >> 2] | 0 : $35 & 255) | 0;
   HEAP32[$agg$tmp82$byval_copy >> 2] = HEAP32[$agg$tmp82 >> 2];
   HEAP32[$agg$tmp96$byval_copy >> 2] = HEAP32[$agg$tmp83 >> 2];
   HEAP32[$__b >> 2] = __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($this, $agg$tmp82$byval_copy, $agg$tmp96$byval_copy, $__iob, $__err, $__tm, $cond$i$i106127, $add$ptr87) | 0;
   label = 26;
   break;
  }
 case 121:
  {
   HEAP32[$agg$tmp91 >> 2] = HEAP32[$__e >> 2];
   HEAP32[$agg$tmp96$byval_copy >> 2] = HEAP32[$agg$tmp91 >> 2];
   __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIcEE($this, $__tm + 20 | 0, $__b, $agg$tmp96$byval_copy, $__err, $call$i);
   label = 26;
   break;
  }
 case 89:
  {
   HEAP32[$agg$tmp94 >> 2] = HEAP32[$__e >> 2];
   HEAP32[$agg$tmp96$byval_copy >> 2] = HEAP32[$agg$tmp94 >> 2];
   __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_year4ERiRS4_S4_RjRKNS_5ctypeIcEE($this, $__tm + 20 | 0, $__b, $agg$tmp96$byval_copy, $__err, $call$i);
   label = 26;
   break;
  }
 case 37:
  {
   HEAP32[$agg$tmp96 >> 2] = HEAP32[$__e >> 2];
   HEAP32[$agg$tmp96$byval_copy >> 2] = HEAP32[$agg$tmp96 >> 2];
   __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_percentERS4_S4_RjRKNS_5ctypeIcEE($this, $__b, $agg$tmp96$byval_copy, $__err, $call$i);
   label = 26;
   break;
  }
 default:
  {
   HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 4;
   label = 26;
  }
 } while (0);
 if ((label | 0) == 26) $retval$sroa$0$0 = HEAP32[$__b >> 2] | 0;
 STACKTOP = sp;
 return $retval$sroa$0$0 | 0;
}

function __ZNSt3__211__money_getIwE13__gather_infoEbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_SJ_Ri($__intl, $__loc, $__pat, $__dp, $__ts, $__grp, $__sym, $__psn, $__nsn, $__fd) {
 $__intl = $__intl | 0;
 $__loc = $__loc | 0;
 $__pat = $__pat | 0;
 $__dp = $__dp | 0;
 $__ts = $__ts | 0;
 $__grp = $__grp | 0;
 $__sym = $__sym | 0;
 $__psn = $__psn | 0;
 $__nsn = $__nsn | 0;
 $__fd = $__fd | 0;
 var $1 = 0, $11 = 0, $18 = 0, $22 = 0, $24 = 0, $29 = 0, $3 = 0, $31 = 0, $33 = 0, $37 = 0, $39 = 0, $46 = 0, $5 = 0, $50 = 0, $52 = 0, $9 = 0, $__cap_$i$i$i$i$i = 0, $__cap_$i$i$i$i$i175 = 0, $__i$0$i$i$i = 0, $__i$0$i$i$i124 = 0, $__i$0$i$i$i148 = 0, $__i$0$i$i$i180 = 0, $__i$0$i$i$i204 = 0, $__i$0$i$i$i46 = 0, $__i$0$i$i$i71 = 0, $__i$0$i$i$i94 = 0, $__size_$i1$i$i$i$i = 0, $__size_$i1$i$i$i$i111 = 0, $__size_$i1$i$i$i$i135 = 0, $__size_$i1$i$i$i$i166 = 0, $__size_$i1$i$i$i$i191 = 0, $__size_$i1$i$i$i$i33 = 0, $__size_$i1$i$i$i$i63 = 0, $__size_$i1$i$i$i$i81 = 0, $call$i = 0, $call$i104 = 0, $ref$tmp$i$i$i$i189 = 0, $ref$tmp1 = 0, $storemerge = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $ref$tmp$i$i$i$i189 = sp + 12 | 0;
 $ref$tmp1 = sp;
 if ($__intl) {
  $call$i = __ZNKSt3__26locale9use_facetERNS0_2idE($__loc, 61464) | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$call$i >> 2] | 0) + 44 >> 2] & 127]($ref$tmp$i$i$i$i189, $call$i);
  $1 = HEAP32[$ref$tmp$i$i$i$i189 >> 2] | 0;
  HEAP8[$__pat >> 0] = $1;
  HEAP8[$__pat + 1 >> 0] = $1 >> 8;
  HEAP8[$__pat + 2 >> 0] = $1 >> 16;
  HEAP8[$__pat + 3 >> 0] = $1 >> 24;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$call$i >> 2] | 0) + 32 >> 2] & 127]($ref$tmp1, $call$i);
  $3 = $__nsn + 8 | 0;
  $__size_$i1$i$i$i$i = $3 + 3 | 0;
  if ((HEAP8[$__size_$i1$i$i$i$i >> 0] | 0) < 0) {
   $5 = HEAP32[$__nsn >> 2] | 0;
   HEAP32[$ref$tmp$i$i$i$i189 >> 2] = 0;
   __ZNSt3__211char_traitsIwE6assignERwRKw($5, $ref$tmp$i$i$i$i189);
   HEAP32[$__nsn + 4 >> 2] = 0;
   if ((HEAP8[$__size_$i1$i$i$i$i >> 0] | 0) < 0) {
    __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm(HEAP32[$__nsn >> 2] | 0, HEAP32[$3 >> 2] << 2);
    HEAP32[$3 >> 2] = 0;
   }
  } else {
   HEAP32[$ref$tmp$i$i$i$i189 >> 2] = 0;
   __ZNSt3__211char_traitsIwE6assignERwRKw($__nsn, $ref$tmp$i$i$i$i189);
   HEAP8[$__size_$i1$i$i$i$i >> 0] = 0;
  };
  HEAP32[$__nsn >> 2] = HEAP32[$ref$tmp1 >> 2];
  HEAP32[$__nsn + 4 >> 2] = HEAP32[$ref$tmp1 + 4 >> 2];
  HEAP32[$__nsn + 8 >> 2] = HEAP32[$ref$tmp1 + 8 >> 2];
  $__i$0$i$i$i = 0;
  while (1) {
   if (($__i$0$i$i$i | 0) == 3) break;
   HEAP32[$ref$tmp1 + ($__i$0$i$i$i << 2) >> 2] = 0;
   $__i$0$i$i$i = $__i$0$i$i$i + 1 | 0;
  }
  __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($ref$tmp1);
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$call$i >> 2] | 0) + 28 >> 2] & 127]($ref$tmp1, $call$i);
  $9 = $__psn + 8 | 0;
  $__size_$i1$i$i$i$i33 = $9 + 3 | 0;
  if ((HEAP8[$__size_$i1$i$i$i$i33 >> 0] | 0) < 0) {
   $11 = HEAP32[$__psn >> 2] | 0;
   HEAP32[$ref$tmp$i$i$i$i189 >> 2] = 0;
   __ZNSt3__211char_traitsIwE6assignERwRKw($11, $ref$tmp$i$i$i$i189);
   HEAP32[$__psn + 4 >> 2] = 0;
   if ((HEAP8[$__size_$i1$i$i$i$i33 >> 0] | 0) < 0) {
    __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm(HEAP32[$__psn >> 2] | 0, HEAP32[$9 >> 2] << 2);
    HEAP32[$9 >> 2] = 0;
   }
  } else {
   HEAP32[$ref$tmp$i$i$i$i189 >> 2] = 0;
   __ZNSt3__211char_traitsIwE6assignERwRKw($__psn, $ref$tmp$i$i$i$i189);
   HEAP8[$__size_$i1$i$i$i$i33 >> 0] = 0;
  };
  HEAP32[$__psn >> 2] = HEAP32[$ref$tmp1 >> 2];
  HEAP32[$__psn + 4 >> 2] = HEAP32[$ref$tmp1 + 4 >> 2];
  HEAP32[$__psn + 8 >> 2] = HEAP32[$ref$tmp1 + 8 >> 2];
  $__i$0$i$i$i46 = 0;
  while (1) {
   if (($__i$0$i$i$i46 | 0) == 3) break;
   HEAP32[$ref$tmp1 + ($__i$0$i$i$i46 << 2) >> 2] = 0;
   $__i$0$i$i$i46 = $__i$0$i$i$i46 + 1 | 0;
  }
  __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($ref$tmp1);
  HEAP32[$__dp >> 2] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$call$i >> 2] | 0) + 12 >> 2] & 127]($call$i) | 0;
  HEAP32[$__ts >> 2] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$call$i >> 2] | 0) + 16 >> 2] & 127]($call$i) | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$call$i >> 2] | 0) + 20 >> 2] & 127]($ref$tmp1, $call$i);
  $__size_$i1$i$i$i$i63 = $__grp + 11 | 0;
  if ((HEAP8[$__size_$i1$i$i$i$i63 >> 0] | 0) < 0) {
   $18 = HEAP32[$__grp >> 2] | 0;
   HEAP8[$ref$tmp$i$i$i$i189 >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($18, $ref$tmp$i$i$i$i189);
   HEAP32[$__grp + 4 >> 2] = 0;
   if ((HEAP8[$__size_$i1$i$i$i$i63 >> 0] | 0) < 0) {
    $__cap_$i$i$i$i$i = $__grp + 8 | 0;
    __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm(HEAP32[$__grp >> 2] | 0, HEAP32[$__cap_$i$i$i$i$i >> 2] & 2147483647);
    HEAP32[$__cap_$i$i$i$i$i >> 2] = 0;
   }
  } else {
   HEAP8[$ref$tmp$i$i$i$i189 >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($__grp, $ref$tmp$i$i$i$i189);
   HEAP8[$__size_$i1$i$i$i$i63 >> 0] = 0;
  };
  HEAP32[$__grp >> 2] = HEAP32[$ref$tmp1 >> 2];
  HEAP32[$__grp + 4 >> 2] = HEAP32[$ref$tmp1 + 4 >> 2];
  HEAP32[$__grp + 8 >> 2] = HEAP32[$ref$tmp1 + 8 >> 2];
  $__i$0$i$i$i71 = 0;
  while (1) {
   if (($__i$0$i$i$i71 | 0) == 3) break;
   HEAP32[$ref$tmp1 + ($__i$0$i$i$i71 << 2) >> 2] = 0;
   $__i$0$i$i$i71 = $__i$0$i$i$i71 + 1 | 0;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp1);
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$call$i >> 2] | 0) + 24 >> 2] & 127]($ref$tmp1, $call$i);
  $22 = $__sym + 8 | 0;
  $__size_$i1$i$i$i$i81 = $22 + 3 | 0;
  if ((HEAP8[$__size_$i1$i$i$i$i81 >> 0] | 0) < 0) {
   $24 = HEAP32[$__sym >> 2] | 0;
   HEAP32[$ref$tmp$i$i$i$i189 >> 2] = 0;
   __ZNSt3__211char_traitsIwE6assignERwRKw($24, $ref$tmp$i$i$i$i189);
   HEAP32[$__sym + 4 >> 2] = 0;
   if ((HEAP8[$__size_$i1$i$i$i$i81 >> 0] | 0) < 0) {
    __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm(HEAP32[$__sym >> 2] | 0, HEAP32[$22 >> 2] << 2);
    HEAP32[$22 >> 2] = 0;
   }
  } else {
   HEAP32[$ref$tmp$i$i$i$i189 >> 2] = 0;
   __ZNSt3__211char_traitsIwE6assignERwRKw($__sym, $ref$tmp$i$i$i$i189);
   HEAP8[$__size_$i1$i$i$i$i81 >> 0] = 0;
  };
  HEAP32[$__sym >> 2] = HEAP32[$ref$tmp1 >> 2];
  HEAP32[$__sym + 4 >> 2] = HEAP32[$ref$tmp1 + 4 >> 2];
  HEAP32[$__sym + 8 >> 2] = HEAP32[$ref$tmp1 + 8 >> 2];
  $__i$0$i$i$i94 = 0;
  while (1) {
   if (($__i$0$i$i$i94 | 0) == 3) break;
   HEAP32[$ref$tmp1 + ($__i$0$i$i$i94 << 2) >> 2] = 0;
   $__i$0$i$i$i94 = $__i$0$i$i$i94 + 1 | 0;
  }
  __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($ref$tmp1);
  $storemerge = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$call$i >> 2] | 0) + 36 >> 2] & 127]($call$i) | 0;
 } else {
  $call$i104 = __ZNKSt3__26locale9use_facetERNS0_2idE($__loc, 61456) | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$call$i104 >> 2] | 0) + 44 >> 2] & 127]($ref$tmp$i$i$i$i189, $call$i104);
  $29 = HEAP32[$ref$tmp$i$i$i$i189 >> 2] | 0;
  HEAP8[$__pat >> 0] = $29;
  HEAP8[$__pat + 1 >> 0] = $29 >> 8;
  HEAP8[$__pat + 2 >> 0] = $29 >> 16;
  HEAP8[$__pat + 3 >> 0] = $29 >> 24;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$call$i104 >> 2] | 0) + 32 >> 2] & 127]($ref$tmp1, $call$i104);
  $31 = $__nsn + 8 | 0;
  $__size_$i1$i$i$i$i111 = $31 + 3 | 0;
  if ((HEAP8[$__size_$i1$i$i$i$i111 >> 0] | 0) < 0) {
   $33 = HEAP32[$__nsn >> 2] | 0;
   HEAP32[$ref$tmp$i$i$i$i189 >> 2] = 0;
   __ZNSt3__211char_traitsIwE6assignERwRKw($33, $ref$tmp$i$i$i$i189);
   HEAP32[$__nsn + 4 >> 2] = 0;
   if ((HEAP8[$__size_$i1$i$i$i$i111 >> 0] | 0) < 0) {
    __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm(HEAP32[$__nsn >> 2] | 0, HEAP32[$31 >> 2] << 2);
    HEAP32[$31 >> 2] = 0;
   }
  } else {
   HEAP32[$ref$tmp$i$i$i$i189 >> 2] = 0;
   __ZNSt3__211char_traitsIwE6assignERwRKw($__nsn, $ref$tmp$i$i$i$i189);
   HEAP8[$__size_$i1$i$i$i$i111 >> 0] = 0;
  };
  HEAP32[$__nsn >> 2] = HEAP32[$ref$tmp1 >> 2];
  HEAP32[$__nsn + 4 >> 2] = HEAP32[$ref$tmp1 + 4 >> 2];
  HEAP32[$__nsn + 8 >> 2] = HEAP32[$ref$tmp1 + 8 >> 2];
  $__i$0$i$i$i124 = 0;
  while (1) {
   if (($__i$0$i$i$i124 | 0) == 3) break;
   HEAP32[$ref$tmp1 + ($__i$0$i$i$i124 << 2) >> 2] = 0;
   $__i$0$i$i$i124 = $__i$0$i$i$i124 + 1 | 0;
  }
  __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($ref$tmp1);
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$call$i104 >> 2] | 0) + 28 >> 2] & 127]($ref$tmp1, $call$i104);
  $37 = $__psn + 8 | 0;
  $__size_$i1$i$i$i$i135 = $37 + 3 | 0;
  if ((HEAP8[$__size_$i1$i$i$i$i135 >> 0] | 0) < 0) {
   $39 = HEAP32[$__psn >> 2] | 0;
   HEAP32[$ref$tmp$i$i$i$i189 >> 2] = 0;
   __ZNSt3__211char_traitsIwE6assignERwRKw($39, $ref$tmp$i$i$i$i189);
   HEAP32[$__psn + 4 >> 2] = 0;
   if ((HEAP8[$__size_$i1$i$i$i$i135 >> 0] | 0) < 0) {
    __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm(HEAP32[$__psn >> 2] | 0, HEAP32[$37 >> 2] << 2);
    HEAP32[$37 >> 2] = 0;
   }
  } else {
   HEAP32[$ref$tmp$i$i$i$i189 >> 2] = 0;
   __ZNSt3__211char_traitsIwE6assignERwRKw($__psn, $ref$tmp$i$i$i$i189);
   HEAP8[$__size_$i1$i$i$i$i135 >> 0] = 0;
  };
  HEAP32[$__psn >> 2] = HEAP32[$ref$tmp1 >> 2];
  HEAP32[$__psn + 4 >> 2] = HEAP32[$ref$tmp1 + 4 >> 2];
  HEAP32[$__psn + 8 >> 2] = HEAP32[$ref$tmp1 + 8 >> 2];
  $__i$0$i$i$i148 = 0;
  while (1) {
   if (($__i$0$i$i$i148 | 0) == 3) break;
   HEAP32[$ref$tmp1 + ($__i$0$i$i$i148 << 2) >> 2] = 0;
   $__i$0$i$i$i148 = $__i$0$i$i$i148 + 1 | 0;
  }
  __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($ref$tmp1);
  HEAP32[$__dp >> 2] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$call$i104 >> 2] | 0) + 12 >> 2] & 127]($call$i104) | 0;
  HEAP32[$__ts >> 2] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$call$i104 >> 2] | 0) + 16 >> 2] & 127]($call$i104) | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$call$i104 >> 2] | 0) + 20 >> 2] & 127]($ref$tmp1, $call$i104);
  $__size_$i1$i$i$i$i166 = $__grp + 11 | 0;
  if ((HEAP8[$__size_$i1$i$i$i$i166 >> 0] | 0) < 0) {
   $46 = HEAP32[$__grp >> 2] | 0;
   HEAP8[$ref$tmp$i$i$i$i189 >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($46, $ref$tmp$i$i$i$i189);
   HEAP32[$__grp + 4 >> 2] = 0;
   if ((HEAP8[$__size_$i1$i$i$i$i166 >> 0] | 0) < 0) {
    $__cap_$i$i$i$i$i175 = $__grp + 8 | 0;
    __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm(HEAP32[$__grp >> 2] | 0, HEAP32[$__cap_$i$i$i$i$i175 >> 2] & 2147483647);
    HEAP32[$__cap_$i$i$i$i$i175 >> 2] = 0;
   }
  } else {
   HEAP8[$ref$tmp$i$i$i$i189 >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($__grp, $ref$tmp$i$i$i$i189);
   HEAP8[$__size_$i1$i$i$i$i166 >> 0] = 0;
  };
  HEAP32[$__grp >> 2] = HEAP32[$ref$tmp1 >> 2];
  HEAP32[$__grp + 4 >> 2] = HEAP32[$ref$tmp1 + 4 >> 2];
  HEAP32[$__grp + 8 >> 2] = HEAP32[$ref$tmp1 + 8 >> 2];
  $__i$0$i$i$i180 = 0;
  while (1) {
   if (($__i$0$i$i$i180 | 0) == 3) break;
   HEAP32[$ref$tmp1 + ($__i$0$i$i$i180 << 2) >> 2] = 0;
   $__i$0$i$i$i180 = $__i$0$i$i$i180 + 1 | 0;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp1);
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$call$i104 >> 2] | 0) + 24 >> 2] & 127]($ref$tmp1, $call$i104);
  $50 = $__sym + 8 | 0;
  $__size_$i1$i$i$i$i191 = $50 + 3 | 0;
  if ((HEAP8[$__size_$i1$i$i$i$i191 >> 0] | 0) < 0) {
   $52 = HEAP32[$__sym >> 2] | 0;
   HEAP32[$ref$tmp$i$i$i$i189 >> 2] = 0;
   __ZNSt3__211char_traitsIwE6assignERwRKw($52, $ref$tmp$i$i$i$i189);
   HEAP32[$__sym + 4 >> 2] = 0;
   if ((HEAP8[$__size_$i1$i$i$i$i191 >> 0] | 0) < 0) {
    __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm(HEAP32[$__sym >> 2] | 0, HEAP32[$50 >> 2] << 2);
    HEAP32[$50 >> 2] = 0;
   }
  } else {
   HEAP32[$ref$tmp$i$i$i$i189 >> 2] = 0;
   __ZNSt3__211char_traitsIwE6assignERwRKw($__sym, $ref$tmp$i$i$i$i189);
   HEAP8[$__size_$i1$i$i$i$i191 >> 0] = 0;
  };
  HEAP32[$__sym >> 2] = HEAP32[$ref$tmp1 >> 2];
  HEAP32[$__sym + 4 >> 2] = HEAP32[$ref$tmp1 + 4 >> 2];
  HEAP32[$__sym + 8 >> 2] = HEAP32[$ref$tmp1 + 8 >> 2];
  $__i$0$i$i$i204 = 0;
  while (1) {
   if (($__i$0$i$i$i204 | 0) == 3) break;
   HEAP32[$ref$tmp1 + ($__i$0$i$i$i204 << 2) >> 2] = 0;
   $__i$0$i$i$i204 = $__i$0$i$i$i204 + 1 | 0;
  }
  __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($ref$tmp1);
  $storemerge = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$call$i104 >> 2] | 0) + 36 >> 2] & 127]($call$i104) | 0;
 }
 HEAP32[$__fd >> 2] = $storemerge;
 STACKTOP = sp;
 return;
}

function __ZN8nlohmann6detail5lexerINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE11scan_numberEv($this) {
 $this = $this | 0;
 var $0 = 0, $17 = 0, $18 = 0, $20 = 0, $24 = 0, $30 = 0, $31 = 0, $33 = 0, $37 = 0, $44 = 0, $47 = 0, $48 = 0, $__size_$i$i$i = 0, $__size_$i$i$i31 = 0, $__size_$i$i$i58 = 0, $cond$i = 0, $cond$i$i = 0, $cond$i$i1980 = 0, $cond$i$i2876 = 0, $cond$i$i37 = 0, $cond$i$i5578 = 0, $cond$i$i64 = 0, $cond$i46 = 0, $cond$i73 = 0, $current = 0, $endptr = 0, $number_type$0 = 0, $number_type$1$ph = 0, $number_type$2 = 0, $retval$2 = 0, $retval$3 = 0, $token_buffer = 0, $token_buffer71 = 0, $token_buffer95 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $endptr = sp;
 __ZN8nlohmann6detail5lexerINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE5resetEv($this);
 $current = $this + 8 | 0;
 $0 = HEAP32[$current >> 2] | 0;
 L1 : do switch ($0 | 0) {
 case 45:
  {
   __ZN8nlohmann6detail5lexerINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE3addEi($this, 45);
   switch (__ZN8nlohmann6detail5lexerINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE3getEv($this) | 0) {
   case 48:
    {
     __ZN8nlohmann6detail5lexerINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE3addEi($this, HEAP32[$current >> 2] | 0);
     $number_type$0 = 6;
     label = 10;
     break L1;
     break;
    }
   case 57:
   case 56:
   case 55:
   case 54:
   case 53:
   case 52:
   case 51:
   case 50:
   case 49:
    {
     __ZN8nlohmann6detail5lexerINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE3addEi($this, HEAP32[$current >> 2] | 0);
     $number_type$1$ph = 6;
     label = 8;
     break L1;
     break;
    }
   default:
    {
     HEAP32[$this + 52 >> 2] = 24701;
     $retval$3 = 14;
     break L1;
    }
   }
   break;
  }
 case 48:
  {
   __ZN8nlohmann6detail5lexerINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE3addEi($this, 48);
   $number_type$0 = 5;
   label = 10;
   break;
  }
 case 57:
 case 56:
 case 55:
 case 54:
 case 53:
 case 52:
 case 51:
 case 50:
 case 49:
  {
   __ZN8nlohmann6detail5lexerINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE3addEi($this, $0);
   $number_type$1$ph = 5;
   label = 8;
   break;
  }
 default:
  ___assert_fail(44909, 22221, 7903, 24689);
 } while (0);
 L10 : do if ((label | 0) == 8) {
  L16 : while (1) {
   switch (__ZN8nlohmann6detail5lexerINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE3getEv($this) | 0) {
   case 46:
    {
     label = 15;
     break L16;
     break;
    }
   case 69:
   case 101:
    {
     label = 16;
     break L16;
     break;
    }
   case 57:
   case 56:
   case 55:
   case 54:
   case 53:
   case 52:
   case 51:
   case 50:
   case 49:
   case 48:
    break;
   default:
    {
     $number_type$2 = $number_type$1$ph;
     label = 33;
     break L10;
    }
   }
   __ZN8nlohmann6detail5lexerINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE3addEi($this, HEAP32[$current >> 2] | 0);
  }
  if ((label | 0) == 15) {
   __ZN8nlohmann6detail5lexerINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE3addEi($this, HEAP8[$this + 80 >> 0] | 0);
   label = 17;
   break;
  } else if ((label | 0) == 16) {
   __ZN8nlohmann6detail5lexerINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE3addEi($this, HEAP32[$current >> 2] | 0);
   label = 23;
   break;
  }
 } else if ((label | 0) == 10) switch (__ZN8nlohmann6detail5lexerINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE3getEv($this) | 0) {
 case 46:
  {
   __ZN8nlohmann6detail5lexerINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE3addEi($this, HEAP8[$this + 80 >> 0] | 0);
   label = 17;
   break L10;
   break;
  }
 case 69:
 case 101:
  {
   __ZN8nlohmann6detail5lexerINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE3addEi($this, HEAP32[$current >> 2] | 0);
   label = 23;
   break L10;
   break;
  }
 default:
  {
   $number_type$2 = $number_type$0;
   label = 33;
   break L10;
  }
 } while (0);
 L22 : do if ((label | 0) == 17) {
  if (((__ZN8nlohmann6detail5lexerINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE3getEv($this) | 0) + -48 | 0) >>> 0 >= 10) {
   HEAP32[$this + 52 >> 2] = 24742;
   $retval$3 = 14;
   break;
  }
  __ZN8nlohmann6detail5lexerINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE3addEi($this, HEAP32[$current >> 2] | 0);
  L55 : while (1) {
   switch (__ZN8nlohmann6detail5lexerINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE3getEv($this) | 0) {
   case 69:
   case 101:
    {
     break L55;
     break;
    }
   case 57:
   case 56:
   case 55:
   case 54:
   case 53:
   case 52:
   case 51:
   case 50:
   case 49:
   case 48:
    break;
   default:
    {
     label = 32;
     break L22;
    }
   }
   __ZN8nlohmann6detail5lexerINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE3addEi($this, HEAP32[$current >> 2] | 0);
  }
  __ZN8nlohmann6detail5lexerINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE3addEi($this, HEAP32[$current >> 2] | 0);
  label = 23;
 } else if ((label | 0) == 33) {
  __ZN8nlohmann6detail5lexerINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE5ungetEv($this);
  HEAP32[$endptr >> 2] = 0;
  HEAP32[(___errno_location() | 0) >> 2] = 0;
  switch ($number_type$2 | 0) {
  case 5:
   {
    $token_buffer = $this + 40 | 0;
    $__size_$i$i$i = $token_buffer + 11 | 0;
    if ((HEAP8[$__size_$i$i$i >> 0] | 0) < 0) $cond$i$i = HEAP32[$token_buffer >> 2] | 0; else $cond$i$i = $token_buffer;
    $17 = _strtoull($cond$i$i, $endptr, 10) | 0;
    $18 = getTempRet0() | 0;
    $20 = HEAP8[$__size_$i$i$i >> 0] | 0;
    if ($20 << 24 >> 24 < 0) {
     $cond$i$i2876 = HEAP32[$token_buffer >> 2] | 0;
     $cond$i73 = HEAP32[$this + 44 >> 2] | 0;
    } else {
     $cond$i$i2876 = $token_buffer;
     $cond$i73 = $20 & 255;
    }
    if ((HEAP32[$endptr >> 2] | 0) != ($cond$i$i2876 + $cond$i73 | 0)) ___assert_fail(24893, 22221, 8150, 24689);
    if (HEAP32[(___errno_location() | 0) >> 2] | 0) {
     $47 = $endptr;
     label = 54;
     break L22;
    }
    $24 = $this + 64 | 0;
    HEAP32[$24 >> 2] = $17;
    HEAP32[$24 + 4 >> 2] = $18;
    $48 = $endptr;
    $retval$2 = 5;
    label = 62;
    break L22;
    break;
   }
  case 6:
   {
    $token_buffer71 = $this + 40 | 0;
    $__size_$i$i$i58 = $token_buffer71 + 11 | 0;
    if ((HEAP8[$__size_$i$i$i58 >> 0] | 0) < 0) $cond$i$i64 = HEAP32[$token_buffer71 >> 2] | 0; else $cond$i$i64 = $token_buffer71;
    $30 = _strtoll($cond$i$i64, $endptr, 10) | 0;
    $31 = getTempRet0() | 0;
    $33 = HEAP8[$__size_$i$i$i58 >> 0] | 0;
    if ($33 << 24 >> 24 < 0) {
     $cond$i$i5578 = HEAP32[$token_buffer71 >> 2] | 0;
     $cond$i46 = HEAP32[$this + 44 >> 2] | 0;
    } else {
     $cond$i$i5578 = $token_buffer71;
     $cond$i46 = $33 & 255;
    }
    if ((HEAP32[$endptr >> 2] | 0) != ($cond$i$i5578 + $cond$i46 | 0)) ___assert_fail(24893, 22221, 8166, 24689);
    if (HEAP32[(___errno_location() | 0) >> 2] | 0) {
     $47 = $endptr;
     label = 54;
     break L22;
    }
    $37 = $this + 56 | 0;
    HEAP32[$37 >> 2] = $30;
    HEAP32[$37 + 4 >> 2] = $31;
    $48 = $endptr;
    $retval$2 = 6;
    label = 62;
    break L22;
    break;
   }
  default:
   {
    $47 = $endptr;
    label = 54;
    break L22;
   }
  }
 } while (0);
 L59 : do if ((label | 0) == 23) {
  L61 : do switch (__ZN8nlohmann6detail5lexerINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE3getEv($this) | 0) {
  case 45:
  case 43:
   {
    __ZN8nlohmann6detail5lexerINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE3addEi($this, HEAP32[$current >> 2] | 0);
    if (((__ZN8nlohmann6detail5lexerINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE3getEv($this) | 0) + -48 | 0) >>> 0 < 10) {
     __ZN8nlohmann6detail5lexerINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE3addEi($this, HEAP32[$current >> 2] | 0);
     break L61;
    } else {
     HEAP32[$this + 52 >> 2] = 24842;
     $retval$3 = 14;
     break L59;
    }
    break;
   }
  case 57:
  case 56:
  case 55:
  case 54:
  case 53:
  case 52:
  case 51:
  case 50:
  case 49:
  case 48:
   {
    __ZN8nlohmann6detail5lexerINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE3addEi($this, HEAP32[$current >> 2] | 0);
    break;
   }
  default:
   {
    HEAP32[$this + 52 >> 2] = 24783;
    $retval$3 = 14;
    break L59;
   }
  } while (0);
  if (((__ZN8nlohmann6detail5lexerINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE3getEv($this) | 0) + -48 | 0) >>> 0 < 10) {
   do __ZN8nlohmann6detail5lexerINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE3addEi($this, HEAP32[$current >> 2] | 0); while (((__ZN8nlohmann6detail5lexerINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE3getEv($this) | 0) + -48 | 0) >>> 0 < 10);
   label = 32;
  } else label = 32;
 } while (0);
 if ((label | 0) == 32) {
  __ZN8nlohmann6detail5lexerINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE5ungetEv($this);
  HEAP32[$endptr >> 2] = 0;
  HEAP32[(___errno_location() | 0) >> 2] = 0;
  $47 = $endptr;
  label = 54;
 }
 if ((label | 0) == 54) {
  $token_buffer95 = $this + 40 | 0;
  $__size_$i$i$i31 = $token_buffer95 + 11 | 0;
  if ((HEAP8[$__size_$i$i$i31 >> 0] | 0) < 0) $cond$i$i37 = HEAP32[$token_buffer95 >> 2] | 0; else $cond$i$i37 = $token_buffer95;
  __ZN8nlohmann6detail5lexerINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE6strtofERdPKcPPc($this + 72 | 0, $cond$i$i37, $endptr);
  $44 = HEAP8[$__size_$i$i$i31 >> 0] | 0;
  if ($44 << 24 >> 24 < 0) {
   $cond$i = HEAP32[$this + 44 >> 2] | 0;
   $cond$i$i1980 = HEAP32[$token_buffer95 >> 2] | 0;
  } else {
   $cond$i = $44 & 255;
   $cond$i$i1980 = $token_buffer95;
  }
  if ((HEAP32[$endptr >> 2] | 0) == ($cond$i$i1980 + $cond$i | 0)) {
   $48 = $47;
   $retval$2 = 7;
   label = 62;
  } else ___assert_fail(24893, 22221, 8183, 24689);
 }
 if ((label | 0) == 62) $retval$3 = $retval$2;
 STACKTOP = sp;
 return $retval$3 | 0;
}

function __ZN4tson7WangSet5parseERKN8nlohmann10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS1_14adl_serializerEEE($this, $json) {
 $this = $this | 0;
 $json = $json | 0;
 var $1 = 0, $__cap_$i$i$i$i$i = 0, $__size_$i1$i$i$i$i = 0, $agg$tmp = 0, $agg$tmp17 = 0, $agg$tmp28 = 0, $agg$tmp30 = 0, $agg$tmp43 = 0, $agg$tmp45 = 0, $agg$tmp58 = 0, $agg$tmp60 = 0, $agg$tmp6239 = 0, $allFound$0$off0 = 0, $allFound$1$off0 = 0, $ref$tmp = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(160);
 $agg$tmp6239 = sp;
 $ref$tmp = sp + 56 | 0;
 $agg$tmp = sp + 136 | 0;
 $agg$tmp17 = sp + 120 | 0;
 $agg$tmp28 = sp + 104 | 0;
 $agg$tmp30 = sp + 88 | 0;
 $agg$tmp43 = sp + 72 | 0;
 $agg$tmp45 = sp + 40 | 0;
 $agg$tmp58 = sp + 24 | 0;
 $agg$tmp60 = sp + 8 | 0;
 if (!(__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE5countIRA5_KcEEmOT_($json, 23152) | 0)) $allFound$0$off0 = 0; else {
  HEAP32[$this + 12 >> 2] = __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE3getIiiLi0EEET0_v(__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEixIKcEERKSB_PT_($json, 23152) | 0) | 0;
  $allFound$0$off0 = 1;
 }
 if (!(__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE5countIRA5_KcEEmOT_($json, 22602) | 0)) $allFound$1$off0 = 0; else {
  __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE3getIS9_S9_Li0EEET0_v($ref$tmp, __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEixIKcEERKSB_PT_($json, 22602) | 0);
  $__size_$i1$i$i$i$i = $this + 11 | 0;
  if ((HEAP8[$__size_$i1$i$i$i$i >> 0] | 0) < 0) {
   $1 = HEAP32[$this >> 2] | 0;
   HEAP8[$agg$tmp6239 >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($1, $agg$tmp6239);
   HEAP32[$this + 4 >> 2] = 0;
   if ((HEAP8[$__size_$i1$i$i$i$i >> 0] | 0) < 0) {
    $__cap_$i$i$i$i$i = $this + 8 | 0;
    __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm(HEAP32[$this >> 2] | 0, HEAP32[$__cap_$i$i$i$i$i >> 2] & 2147483647);
    HEAP32[$__cap_$i$i$i$i$i >> 2] = 0;
   }
  } else {
   HEAP8[$agg$tmp6239 >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($this, $agg$tmp6239);
   HEAP8[$__size_$i1$i$i$i$i >> 0] = 0;
  };
  HEAP32[$this >> 2] = HEAP32[$ref$tmp >> 2];
  HEAP32[$this + 4 >> 2] = HEAP32[$ref$tmp + 4 >> 2];
  HEAP32[$this + 8 >> 2] = HEAP32[$ref$tmp + 8 >> 2];
  HEAP32[$ref$tmp >> 2] = 0;
  HEAP32[$ref$tmp + 4 >> 2] = 0;
  HEAP32[$ref$tmp + 8 >> 2] = 0;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp);
  $allFound$1$off0 = $allFound$0$off0;
 }
 if (__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE5countIRA10_KcEEmOT_($json, 23379) | 0) if (__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE8is_arrayEv(__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEixIKcEERKSB_PT_($json, 23379) | 0) | 0) {
  __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE5beginEv($agg$tmp, __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEixIKcEERKSB_PT_($json, 23379) | 0);
  __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE3endEv($agg$tmp17, __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEixIKcEERKSB_PT_($json, 23379) | 0);
  HEAP32[$agg$tmp6239 >> 2] = $this;
  if (__ZNK8nlohmann6detail9iter_implIKNS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEEneERKSF_($agg$tmp, $agg$tmp17) | 0) do {
   __ZZN4tson7WangSet5parseERKN8nlohmann10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS1_14adl_serializerEEEENKUlSF_E_clESF_($agg$tmp6239, __ZNK8nlohmann6detail9iter_implIKNS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEEdeEv($agg$tmp) | 0);
   __ZN8nlohmann6detail9iter_implIKNS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEEppEv($agg$tmp) | 0;
  } while (__ZNK8nlohmann6detail9iter_implIKNS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEEneERKSF_($agg$tmp, $agg$tmp17) | 0);
 }
 if (__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE5countIRA13_KcEEmOT_($json, 23389) | 0) if (__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE8is_arrayEv(__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEixIKcEERKSB_PT_($json, 23389) | 0) | 0) {
  __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE5beginEv($agg$tmp28, __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEixIKcEERKSB_PT_($json, 23389) | 0);
  __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE3endEv($agg$tmp30, __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEixIKcEERKSB_PT_($json, 23389) | 0);
  HEAP32[$agg$tmp6239 >> 2] = $this;
  if (__ZNK8nlohmann6detail9iter_implIKNS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEEneERKSF_($agg$tmp28, $agg$tmp30) | 0) do {
   __ZZN4tson7WangSet5parseERKN8nlohmann10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS1_14adl_serializerEEEENKUlSF_E0_clESF_($agg$tmp6239, __ZNK8nlohmann6detail9iter_implIKNS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEEdeEv($agg$tmp28) | 0);
   __ZN8nlohmann6detail9iter_implIKNS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEEppEv($agg$tmp28) | 0;
  } while (__ZNK8nlohmann6detail9iter_implIKNS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEEneERKSF_($agg$tmp28, $agg$tmp30) | 0);
 }
 if (__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE5countIRA11_KcEEmOT_($json, 23402) | 0) if (__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE8is_arrayEv(__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEixIKcEERKSB_PT_($json, 23402) | 0) | 0) {
  __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE5beginEv($agg$tmp43, __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEixIKcEERKSB_PT_($json, 23402) | 0);
  __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE3endEv($agg$tmp45, __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEixIKcEERKSB_PT_($json, 23402) | 0);
  HEAP32[$agg$tmp6239 >> 2] = $this;
  if (__ZNK8nlohmann6detail9iter_implIKNS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEEneERKSF_($agg$tmp43, $agg$tmp45) | 0) do {
   __ZZN4tson7WangSet5parseERKN8nlohmann10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS1_14adl_serializerEEEENKUlSF_E1_clESF_($agg$tmp6239, __ZNK8nlohmann6detail9iter_implIKNS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEEdeEv($agg$tmp43) | 0);
   __ZN8nlohmann6detail9iter_implIKNS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEEppEv($agg$tmp43) | 0;
  } while (__ZNK8nlohmann6detail9iter_implIKNS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEEneERKSF_($agg$tmp43, $agg$tmp45) | 0);
 }
 if (__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE5countIRA11_KcEEmOT_($json, 22585) | 0) if (__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE8is_arrayEv(__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEixIKcEERKSB_PT_($json, 22585) | 0) | 0) {
  __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE5beginEv($agg$tmp58, __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEixIKcEERKSB_PT_($json, 22585) | 0);
  __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE3endEv($agg$tmp60, __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEixIKcEERKSB_PT_($json, 22585) | 0);
  HEAP32[$agg$tmp6239 >> 2] = $this;
  if (__ZNK8nlohmann6detail9iter_implIKNS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEEneERKSF_($agg$tmp58, $agg$tmp60) | 0) do {
   __ZZN4tson7WangSet5parseERKN8nlohmann10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS1_14adl_serializerEEEENKUlSF_E2_clESF_($agg$tmp6239, __ZNK8nlohmann6detail9iter_implIKNS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEEdeEv($agg$tmp58) | 0);
   __ZN8nlohmann6detail9iter_implIKNS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEEppEv($agg$tmp58) | 0;
  } while (__ZNK8nlohmann6detail9iter_implIKNS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEEneERKSF_($agg$tmp58, $agg$tmp60) | 0);
 }
 STACKTOP = sp;
 return $allFound$1$off0 | 0;
}

function _GifDitherImage($lastFrame, $nextFrame, $outFrame, $width, $height, $pPal) {
 $lastFrame = $lastFrame | 0;
 $nextFrame = $nextFrame | 0;
 $outFrame = $outFrame | 0;
 $width = $width | 0;
 $height = $height | 0;
 $pPal = $pPal | 0;
 var $107 = 0, $135 = 0, $163 = 0, $191 = 0, $213 = 0, $arrayidx123 = 0, $arrayidx139 = 0, $arrayidx177 = 0, $arrayidx193 = 0, $arrayidx231 = 0, $arrayidx247 = 0, $arrayidx281 = 0, $arrayidx295 = 0, $b_err = 0, $bb = 0, $bestDiff = 0, $bestInd = 0, $cond = 0, $cond106 = 0, $cond122 = 0, $cond138 = 0, $cond160 = 0, $cond176 = 0, $cond192 = 0, $cond214 = 0, $cond230 = 0, $cond246 = 0, $cond266 = 0, $cond280 = 0, $cond294 = 0, $g_err = 0, $gg = 0, $height$addr = 0, $ii = 0, $ii304 = 0, $lastFrame$addr = 0, $lastPix = 0, $mul14 = 0, $mul16 = 0, $mul74 = 0, $mul77 = 0, $mul81 = 0, $mul84 = 0, $nextFrame$addr = 0, $nextPix = 0, $numPixels = 0, $outFrame$addr = 0, $pPal$addr = 0, $pix = 0, $pix1 = 0, $pix16 = 0, $pix3 = 0, $pix5 = 0, $pix7 = 0, $quantPixels = 0, $quantloc_1 = 0, $quantloc_3 = 0, $quantloc_5 = 0, $quantloc_7 = 0, $r_err = 0, $rr = 0, $width$addr = 0, $xx = 0, $yy = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(128);
 $lastFrame$addr = sp + 120 | 0;
 $nextFrame$addr = sp + 116 | 0;
 $outFrame$addr = sp + 112 | 0;
 $width$addr = sp + 108 | 0;
 $height$addr = sp + 104 | 0;
 $pPal$addr = sp + 100 | 0;
 $numPixels = sp + 96 | 0;
 $quantPixels = sp + 92 | 0;
 $ii = sp + 88 | 0;
 $pix = sp + 124 | 0;
 $pix16 = sp + 84 | 0;
 $yy = sp + 80 | 0;
 $xx = sp + 76 | 0;
 $nextPix = sp + 72 | 0;
 $lastPix = sp + 68 | 0;
 $rr = sp + 64 | 0;
 $gg = sp + 60 | 0;
 $bb = sp + 56 | 0;
 $bestDiff = sp + 52 | 0;
 $bestInd = sp + 48 | 0;
 $r_err = sp + 44 | 0;
 $g_err = sp + 40 | 0;
 $b_err = sp + 36 | 0;
 $quantloc_7 = sp + 32 | 0;
 $quantloc_3 = sp + 28 | 0;
 $quantloc_5 = sp + 24 | 0;
 $quantloc_1 = sp + 20 | 0;
 $pix7 = sp + 16 | 0;
 $pix3 = sp + 12 | 0;
 $pix5 = sp + 8 | 0;
 $pix1 = sp + 4 | 0;
 $ii304 = sp;
 HEAP32[$lastFrame$addr >> 2] = $lastFrame;
 HEAP32[$nextFrame$addr >> 2] = $nextFrame;
 HEAP32[$outFrame$addr >> 2] = $outFrame;
 HEAP32[$width$addr >> 2] = $width;
 HEAP32[$height$addr >> 2] = $height;
 HEAP32[$pPal$addr >> 2] = $pPal;
 HEAP32[$numPixels >> 2] = Math_imul(HEAP32[$width$addr >> 2] | 0, HEAP32[$height$addr >> 2] | 0) | 0;
 HEAP32[$quantPixels >> 2] = _malloc(HEAP32[$numPixels >> 2] << 2 << 2) | 0;
 HEAP32[$ii >> 2] = 0;
 while (1) {
  if ((HEAP32[$ii >> 2] | 0) >= (HEAP32[$numPixels >> 2] << 2 | 0)) break;
  HEAP8[$pix >> 0] = HEAP8[(HEAP32[$nextFrame$addr >> 2] | 0) + (HEAP32[$ii >> 2] | 0) >> 0] | 0;
  HEAP32[$pix16 >> 2] = (HEAPU8[$pix >> 0] | 0) << 8;
  HEAP32[(HEAP32[$quantPixels >> 2] | 0) + (HEAP32[$ii >> 2] << 2) >> 2] = HEAP32[$pix16 >> 2];
  HEAP32[$ii >> 2] = (HEAP32[$ii >> 2] | 0) + 1;
 }
 HEAP32[$yy >> 2] = 0;
 while (1) {
  if ((HEAP32[$yy >> 2] | 0) >>> 0 >= (HEAP32[$height$addr >> 2] | 0) >>> 0) break;
  HEAP32[$xx >> 2] = 0;
  while (1) {
   if ((HEAP32[$xx >> 2] | 0) >>> 0 >= (HEAP32[$width$addr >> 2] | 0) >>> 0) break;
   $mul14 = Math_imul(HEAP32[$yy >> 2] | 0, HEAP32[$width$addr >> 2] | 0) | 0;
   HEAP32[$nextPix >> 2] = (HEAP32[$quantPixels >> 2] | 0) + ($mul14 + (HEAP32[$xx >> 2] | 0) << 2 << 2);
   if (HEAP32[$lastFrame$addr >> 2] | 0) {
    $mul16 = Math_imul(HEAP32[$yy >> 2] | 0, HEAP32[$width$addr >> 2] | 0) | 0;
    $cond = (HEAP32[$lastFrame$addr >> 2] | 0) + ($mul16 + (HEAP32[$xx >> 2] | 0) << 2) | 0;
   } else $cond = 0;
   HEAP32[$lastPix >> 2] = $cond;
   HEAP32[$rr >> 2] = ((HEAP32[HEAP32[$nextPix >> 2] >> 2] | 0) + 127 | 0) / 256 | 0;
   HEAP32[$gg >> 2] = ((HEAP32[(HEAP32[$nextPix >> 2] | 0) + 4 >> 2] | 0) + 127 | 0) / 256 | 0;
   HEAP32[$bb >> 2] = ((HEAP32[(HEAP32[$nextPix >> 2] | 0) + 8 >> 2] | 0) + 127 | 0) / 256 | 0;
   if (HEAP32[$lastFrame$addr >> 2] | 0) if ((HEAPU8[HEAP32[$lastPix >> 2] >> 0] | 0 | 0) == (HEAP32[$rr >> 2] | 0)) if ((HEAPU8[(HEAP32[$lastPix >> 2] | 0) + 1 >> 0] | 0 | 0) == (HEAP32[$gg >> 2] | 0)) if ((HEAPU8[(HEAP32[$lastPix >> 2] | 0) + 2 >> 0] | 0 | 0) == (HEAP32[$bb >> 2] | 0)) {
    HEAP32[HEAP32[$nextPix >> 2] >> 2] = HEAP32[$rr >> 2];
    HEAP32[(HEAP32[$nextPix >> 2] | 0) + 4 >> 2] = HEAP32[$gg >> 2];
    HEAP32[(HEAP32[$nextPix >> 2] | 0) + 8 >> 2] = HEAP32[$bb >> 2];
    HEAP32[(HEAP32[$nextPix >> 2] | 0) + 12 >> 2] = 0;
   } else label = 15; else label = 15; else label = 15; else label = 15;
   if ((label | 0) == 15) {
    label = 0;
    HEAP32[$bestDiff >> 2] = 1e6;
    HEAP32[$bestInd >> 2] = 0;
    _GifGetClosestPaletteColor(HEAP32[$pPal$addr >> 2] | 0, HEAP32[$rr >> 2] | 0, HEAP32[$gg >> 2] | 0, HEAP32[$bb >> 2] | 0, $bestInd, $bestDiff, 1);
    HEAP32[$r_err >> 2] = (HEAP32[HEAP32[$nextPix >> 2] >> 2] | 0) - ((HEAPU8[(HEAP32[$pPal$addr >> 2] | 0) + 4 + (HEAP32[$bestInd >> 2] | 0) >> 0] | 0) << 8);
    HEAP32[$g_err >> 2] = (HEAP32[(HEAP32[$nextPix >> 2] | 0) + 4 >> 2] | 0) - ((HEAPU8[(HEAP32[$pPal$addr >> 2] | 0) + 260 + (HEAP32[$bestInd >> 2] | 0) >> 0] | 0) << 8);
    HEAP32[$b_err >> 2] = (HEAP32[(HEAP32[$nextPix >> 2] | 0) + 8 >> 2] | 0) - ((HEAPU8[(HEAP32[$pPal$addr >> 2] | 0) + 516 + (HEAP32[$bestInd >> 2] | 0) >> 0] | 0) << 8);
    HEAP32[HEAP32[$nextPix >> 2] >> 2] = HEAPU8[(HEAP32[$pPal$addr >> 2] | 0) + 4 + (HEAP32[$bestInd >> 2] | 0) >> 0];
    HEAP32[(HEAP32[$nextPix >> 2] | 0) + 4 >> 2] = HEAPU8[(HEAP32[$pPal$addr >> 2] | 0) + 260 + (HEAP32[$bestInd >> 2] | 0) >> 0];
    HEAP32[(HEAP32[$nextPix >> 2] | 0) + 8 >> 2] = HEAPU8[(HEAP32[$pPal$addr >> 2] | 0) + 516 + (HEAP32[$bestInd >> 2] | 0) >> 0];
    HEAP32[(HEAP32[$nextPix >> 2] | 0) + 12 >> 2] = HEAP32[$bestInd >> 2];
    $mul74 = Math_imul(HEAP32[$yy >> 2] | 0, HEAP32[$width$addr >> 2] | 0) | 0;
    HEAP32[$quantloc_7 >> 2] = $mul74 + (HEAP32[$xx >> 2] | 0) + 1;
    $mul77 = Math_imul(HEAP32[$yy >> 2] | 0, HEAP32[$width$addr >> 2] | 0) | 0;
    HEAP32[$quantloc_3 >> 2] = $mul77 + (HEAP32[$width$addr >> 2] | 0) + (HEAP32[$xx >> 2] | 0) - 1;
    $mul81 = Math_imul(HEAP32[$yy >> 2] | 0, HEAP32[$width$addr >> 2] | 0) | 0;
    HEAP32[$quantloc_5 >> 2] = $mul81 + (HEAP32[$width$addr >> 2] | 0) + (HEAP32[$xx >> 2] | 0);
    $mul84 = Math_imul(HEAP32[$yy >> 2] | 0, HEAP32[$width$addr >> 2] | 0) | 0;
    HEAP32[$quantloc_1 >> 2] = $mul84 + (HEAP32[$width$addr >> 2] | 0) + (HEAP32[$xx >> 2] | 0) + 1;
    if ((HEAP32[$quantloc_7 >> 2] | 0) < (HEAP32[$numPixels >> 2] | 0)) {
     HEAP32[$pix7 >> 2] = (HEAP32[$quantPixels >> 2] | 0) + (HEAP32[$quantloc_7 >> 2] << 2 << 2);
     if ((0 - (HEAP32[HEAP32[$pix7 >> 2] >> 2] | 0) | 0) > (((HEAP32[$r_err >> 2] | 0) * 7 | 0) / 16 | 0 | 0)) $cond106 = 0 - (HEAP32[HEAP32[$pix7 >> 2] >> 2] | 0) | 0; else $cond106 = ((HEAP32[$r_err >> 2] | 0) * 7 | 0) / 16 | 0;
     $107 = HEAP32[$pix7 >> 2] | 0;
     HEAP32[$107 >> 2] = (HEAP32[$107 >> 2] | 0) + $cond106;
     if ((0 - (HEAP32[(HEAP32[$pix7 >> 2] | 0) + 4 >> 2] | 0) | 0) > (((HEAP32[$g_err >> 2] | 0) * 7 | 0) / 16 | 0 | 0)) $cond122 = 0 - (HEAP32[(HEAP32[$pix7 >> 2] | 0) + 4 >> 2] | 0) | 0; else $cond122 = ((HEAP32[$g_err >> 2] | 0) * 7 | 0) / 16 | 0;
     $arrayidx123 = (HEAP32[$pix7 >> 2] | 0) + 4 | 0;
     HEAP32[$arrayidx123 >> 2] = (HEAP32[$arrayidx123 >> 2] | 0) + $cond122;
     if ((0 - (HEAP32[(HEAP32[$pix7 >> 2] | 0) + 8 >> 2] | 0) | 0) > (((HEAP32[$b_err >> 2] | 0) * 7 | 0) / 16 | 0 | 0)) $cond138 = 0 - (HEAP32[(HEAP32[$pix7 >> 2] | 0) + 8 >> 2] | 0) | 0; else $cond138 = ((HEAP32[$b_err >> 2] | 0) * 7 | 0) / 16 | 0;
     $arrayidx139 = (HEAP32[$pix7 >> 2] | 0) + 8 | 0;
     HEAP32[$arrayidx139 >> 2] = (HEAP32[$arrayidx139 >> 2] | 0) + $cond138;
    }
    if ((HEAP32[$quantloc_3 >> 2] | 0) < (HEAP32[$numPixels >> 2] | 0)) {
     HEAP32[$pix3 >> 2] = (HEAP32[$quantPixels >> 2] | 0) + (HEAP32[$quantloc_3 >> 2] << 2 << 2);
     if ((0 - (HEAP32[HEAP32[$pix3 >> 2] >> 2] | 0) | 0) > (((HEAP32[$r_err >> 2] | 0) * 3 | 0) / 16 | 0 | 0)) $cond160 = 0 - (HEAP32[HEAP32[$pix3 >> 2] >> 2] | 0) | 0; else $cond160 = ((HEAP32[$r_err >> 2] | 0) * 3 | 0) / 16 | 0;
     $135 = HEAP32[$pix3 >> 2] | 0;
     HEAP32[$135 >> 2] = (HEAP32[$135 >> 2] | 0) + $cond160;
     if ((0 - (HEAP32[(HEAP32[$pix3 >> 2] | 0) + 4 >> 2] | 0) | 0) > (((HEAP32[$g_err >> 2] | 0) * 3 | 0) / 16 | 0 | 0)) $cond176 = 0 - (HEAP32[(HEAP32[$pix3 >> 2] | 0) + 4 >> 2] | 0) | 0; else $cond176 = ((HEAP32[$g_err >> 2] | 0) * 3 | 0) / 16 | 0;
     $arrayidx177 = (HEAP32[$pix3 >> 2] | 0) + 4 | 0;
     HEAP32[$arrayidx177 >> 2] = (HEAP32[$arrayidx177 >> 2] | 0) + $cond176;
     if ((0 - (HEAP32[(HEAP32[$pix3 >> 2] | 0) + 8 >> 2] | 0) | 0) > (((HEAP32[$b_err >> 2] | 0) * 3 | 0) / 16 | 0 | 0)) $cond192 = 0 - (HEAP32[(HEAP32[$pix3 >> 2] | 0) + 8 >> 2] | 0) | 0; else $cond192 = ((HEAP32[$b_err >> 2] | 0) * 3 | 0) / 16 | 0;
     $arrayidx193 = (HEAP32[$pix3 >> 2] | 0) + 8 | 0;
     HEAP32[$arrayidx193 >> 2] = (HEAP32[$arrayidx193 >> 2] | 0) + $cond192;
    }
    if ((HEAP32[$quantloc_5 >> 2] | 0) < (HEAP32[$numPixels >> 2] | 0)) {
     HEAP32[$pix5 >> 2] = (HEAP32[$quantPixels >> 2] | 0) + (HEAP32[$quantloc_5 >> 2] << 2 << 2);
     if ((0 - (HEAP32[HEAP32[$pix5 >> 2] >> 2] | 0) | 0) > (((HEAP32[$r_err >> 2] | 0) * 5 | 0) / 16 | 0 | 0)) $cond214 = 0 - (HEAP32[HEAP32[$pix5 >> 2] >> 2] | 0) | 0; else $cond214 = ((HEAP32[$r_err >> 2] | 0) * 5 | 0) / 16 | 0;
     $163 = HEAP32[$pix5 >> 2] | 0;
     HEAP32[$163 >> 2] = (HEAP32[$163 >> 2] | 0) + $cond214;
     if ((0 - (HEAP32[(HEAP32[$pix5 >> 2] | 0) + 4 >> 2] | 0) | 0) > (((HEAP32[$g_err >> 2] | 0) * 5 | 0) / 16 | 0 | 0)) $cond230 = 0 - (HEAP32[(HEAP32[$pix5 >> 2] | 0) + 4 >> 2] | 0) | 0; else $cond230 = ((HEAP32[$g_err >> 2] | 0) * 5 | 0) / 16 | 0;
     $arrayidx231 = (HEAP32[$pix5 >> 2] | 0) + 4 | 0;
     HEAP32[$arrayidx231 >> 2] = (HEAP32[$arrayidx231 >> 2] | 0) + $cond230;
     if ((0 - (HEAP32[(HEAP32[$pix5 >> 2] | 0) + 8 >> 2] | 0) | 0) > (((HEAP32[$b_err >> 2] | 0) * 5 | 0) / 16 | 0 | 0)) $cond246 = 0 - (HEAP32[(HEAP32[$pix5 >> 2] | 0) + 8 >> 2] | 0) | 0; else $cond246 = ((HEAP32[$b_err >> 2] | 0) * 5 | 0) / 16 | 0;
     $arrayidx247 = (HEAP32[$pix5 >> 2] | 0) + 8 | 0;
     HEAP32[$arrayidx247 >> 2] = (HEAP32[$arrayidx247 >> 2] | 0) + $cond246;
    }
    if ((HEAP32[$quantloc_1 >> 2] | 0) < (HEAP32[$numPixels >> 2] | 0)) {
     HEAP32[$pix1 >> 2] = (HEAP32[$quantPixels >> 2] | 0) + (HEAP32[$quantloc_1 >> 2] << 2 << 2);
     if ((0 - (HEAP32[HEAP32[$pix1 >> 2] >> 2] | 0) | 0) > ((HEAP32[$r_err >> 2] | 0) / 16 | 0 | 0)) $cond266 = 0 - (HEAP32[HEAP32[$pix1 >> 2] >> 2] | 0) | 0; else $cond266 = (HEAP32[$r_err >> 2] | 0) / 16 | 0;
     $191 = HEAP32[$pix1 >> 2] | 0;
     HEAP32[$191 >> 2] = (HEAP32[$191 >> 2] | 0) + $cond266;
     if ((0 - (HEAP32[(HEAP32[$pix1 >> 2] | 0) + 4 >> 2] | 0) | 0) > ((HEAP32[$g_err >> 2] | 0) / 16 | 0 | 0)) $cond280 = 0 - (HEAP32[(HEAP32[$pix1 >> 2] | 0) + 4 >> 2] | 0) | 0; else $cond280 = (HEAP32[$g_err >> 2] | 0) / 16 | 0;
     $arrayidx281 = (HEAP32[$pix1 >> 2] | 0) + 4 | 0;
     HEAP32[$arrayidx281 >> 2] = (HEAP32[$arrayidx281 >> 2] | 0) + $cond280;
     if ((0 - (HEAP32[(HEAP32[$pix1 >> 2] | 0) + 8 >> 2] | 0) | 0) > ((HEAP32[$b_err >> 2] | 0) / 16 | 0 | 0)) $cond294 = 0 - (HEAP32[(HEAP32[$pix1 >> 2] | 0) + 8 >> 2] | 0) | 0; else $cond294 = (HEAP32[$b_err >> 2] | 0) / 16 | 0;
     $arrayidx295 = (HEAP32[$pix1 >> 2] | 0) + 8 | 0;
     HEAP32[$arrayidx295 >> 2] = (HEAP32[$arrayidx295 >> 2] | 0) + $cond294;
    }
   }
   HEAP32[$xx >> 2] = (HEAP32[$xx >> 2] | 0) + 1;
  }
  HEAP32[$yy >> 2] = (HEAP32[$yy >> 2] | 0) + 1;
 }
 HEAP32[$ii304 >> 2] = 0;
 while (1) {
  $213 = HEAP32[$quantPixels >> 2] | 0;
  if ((HEAP32[$ii304 >> 2] | 0) >= (HEAP32[$numPixels >> 2] << 2 | 0)) break;
  HEAP8[(HEAP32[$outFrame$addr >> 2] | 0) + (HEAP32[$ii304 >> 2] | 0) >> 0] = HEAP32[$213 + (HEAP32[$ii304 >> 2] << 2) >> 2];
  HEAP32[$ii304 >> 2] = (HEAP32[$ii304 >> 2] | 0) + 1;
 }
 _free($213);
 STACKTOP = sp;
 return;
}

function _stbir__resize_allocated($info, $input_data, $input_stride_in_bytes, $output_data, $output_stride_in_bytes, $alpha_channel, $flags, $type, $edge_horizontal, $edge_vertical, $colorspace, $tempmem, $tempmem_size_in_bytes) {
 $info = $info | 0;
 $input_data = $input_data | 0;
 $input_stride_in_bytes = $input_stride_in_bytes | 0;
 $output_data = $output_data | 0;
 $output_stride_in_bytes = $output_stride_in_bytes | 0;
 $alpha_channel = $alpha_channel | 0;
 $flags = $flags | 0;
 $type = $type | 0;
 $edge_horizontal = $edge_horizontal | 0;
 $edge_vertical = $edge_vertical | 0;
 $colorspace = $colorspace | 0;
 $tempmem = $tempmem | 0;
 $tempmem_size_in_bytes = $tempmem_size_in_bytes | 0;
 var $135 = 0, $180 = f0, $182 = f0, $194 = f0, $196 = f0, $202 = 0, $203 = 0, $alpha_channel$addr = 0, $call102 = 0, $call105 = 0, $call108 = 0, $call94 = 0, $call96 = 0, $call99 = 0, $colorspace$addr = 0, $cond = 0, $cond11 = 0, $edge_horizontal$addr = 0, $edge_vertical$addr = 0, $flags$addr = 0, $info$addr = 0, $input_data$addr = 0, $input_stride_in_bytes$addr = 0, $memory_required = 0, $mul = 0, $mul112 = 0, $mul6 = 0, $output_data$addr = 0, $output_stride_in_bytes$addr = 0, $retval = 0, $tempmem$addr = 0, $tempmem_size_in_bytes$addr = 0, $tobool124 = 0, $tobool167 = 0, $type$addr = 0, $width_stride_input = 0, $width_stride_output = 0, label = 0, sp = 0, CSE$0 = 0, CSE$1 = 0, CSE$2 = 0, CSE$3 = 0, CSE$4 = 0, CSE$5 = 0, CSE$6 = 0, CSE$7 = 0, CSE$8 = 0, CSE$9 = 0, CSE$10 = 0, CSE$11 = 0, CSE$12 = 0, CSE$13 = 0, CSE$14 = 0, CSE$15 = 0, CSE$16 = 0, CSE$17 = 0, CSE$18 = 0, CSE$19 = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(80);
 $retval = sp + 64 | 0;
 $info$addr = sp + 60 | 0;
 $input_data$addr = sp + 56 | 0;
 $input_stride_in_bytes$addr = sp + 52 | 0;
 $output_data$addr = sp + 48 | 0;
 $output_stride_in_bytes$addr = sp + 44 | 0;
 $alpha_channel$addr = sp + 40 | 0;
 $flags$addr = sp + 36 | 0;
 $type$addr = sp + 32 | 0;
 $edge_horizontal$addr = sp + 28 | 0;
 $edge_vertical$addr = sp + 24 | 0;
 $colorspace$addr = sp + 20 | 0;
 $tempmem$addr = sp + 16 | 0;
 $tempmem_size_in_bytes$addr = sp + 12 | 0;
 $memory_required = sp + 8 | 0;
 $width_stride_input = sp + 4 | 0;
 $width_stride_output = sp;
 HEAP32[$info$addr >> 2] = $info;
 HEAP32[$input_data$addr >> 2] = $input_data;
 HEAP32[$input_stride_in_bytes$addr >> 2] = $input_stride_in_bytes;
 HEAP32[$output_data$addr >> 2] = $output_data;
 HEAP32[$output_stride_in_bytes$addr >> 2] = $output_stride_in_bytes;
 HEAP32[$alpha_channel$addr >> 2] = $alpha_channel;
 HEAP32[$flags$addr >> 2] = $flags;
 HEAP32[$type$addr >> 2] = $type;
 HEAP32[$edge_horizontal$addr >> 2] = $edge_horizontal;
 HEAP32[$edge_vertical$addr >> 2] = $edge_vertical;
 HEAP32[$colorspace$addr >> 2] = $colorspace;
 HEAP32[$tempmem$addr >> 2] = $tempmem;
 HEAP32[$tempmem_size_in_bytes$addr >> 2] = $tempmem_size_in_bytes;
 HEAP32[$memory_required >> 2] = _stbir__calculate_memory(HEAP32[$info$addr >> 2] | 0) | 0;
 if (HEAP32[$input_stride_in_bytes$addr >> 2] | 0) $cond = HEAP32[$input_stride_in_bytes$addr >> 2] | 0; else {
  CSE$0 = HEAP32[$info$addr >> 2] | 0;
  $mul = Math_imul(HEAP32[CSE$0 + 64 >> 2] | 0, HEAP32[CSE$0 + 4 >> 2] | 0) | 0;
  $cond = Math_imul($mul, HEAPU8[34220 + (HEAP32[$type$addr >> 2] | 0) >> 0] | 0) | 0;
 }
 HEAP32[$width_stride_input >> 2] = $cond;
 if (HEAP32[$output_stride_in_bytes$addr >> 2] | 0) $cond11 = HEAP32[$output_stride_in_bytes$addr >> 2] | 0; else {
  CSE$1 = HEAP32[$info$addr >> 2] | 0;
  $mul6 = Math_imul(HEAP32[CSE$1 + 64 >> 2] | 0, HEAP32[CSE$1 + 20 >> 2] | 0) | 0;
  $cond11 = Math_imul($mul6, HEAPU8[34220 + (HEAP32[$type$addr >> 2] | 0) >> 0] | 0) | 0;
 }
 HEAP32[$width_stride_output >> 2] = $cond11;
 if ((HEAP32[(HEAP32[$info$addr >> 2] | 0) + 64 >> 2] | 0) < 0) ___assert_fail(34224, 34244, 2312, 34295);
 if ((HEAP32[(HEAP32[$info$addr >> 2] | 0) + 64 >> 2] | 0) > 64) ___assert_fail(34319, 34244, 2313, 34295);
 if ((HEAP32[(HEAP32[$info$addr >> 2] | 0) + 64 >> 2] | 0) >= 0) if ((HEAP32[(HEAP32[$info$addr >> 2] | 0) + 64 >> 2] | 0) <= 64) {
  if ((HEAP32[(HEAP32[$info$addr >> 2] | 0) + 80 >> 2] | 0) >>> 0 >= 6) ___assert_fail(34340, 34244, 2318, 34295);
  if ((HEAP32[(HEAP32[$info$addr >> 2] | 0) + 84 >> 2] | 0) >>> 0 >= 6) ___assert_fail(34441, 34244, 2319, 34295);
  if ((HEAP32[(HEAP32[$info$addr >> 2] | 0) + 80 >> 2] | 0) >>> 0 >= 6) {
   HEAP32[$retval >> 2] = 0;
   $203 = HEAP32[$retval >> 2] | 0;
   STACKTOP = sp;
   return $203 | 0;
  }
  if ((HEAP32[(HEAP32[$info$addr >> 2] | 0) + 84 >> 2] | 0) >>> 0 >= 6) {
   HEAP32[$retval >> 2] = 0;
   $203 = HEAP32[$retval >> 2] | 0;
   STACKTOP = sp;
   return $203 | 0;
  }
  if ((HEAP32[$alpha_channel$addr >> 2] | 0) < 0) HEAP32[$flags$addr >> 2] = HEAP32[$flags$addr >> 2] | 3;
  if (HEAP32[$flags$addr >> 2] & 2 | 0) {
   if (!(HEAP32[$flags$addr >> 2] & 1)) label = 26;
  } else label = 26;
  do if ((label | 0) == 26) {
   if ((HEAP32[$alpha_channel$addr >> 2] | 0) < 0) ___assert_fail(34540, 34244, 2330, 34295);
   if ((HEAP32[$alpha_channel$addr >> 2] | 0) < (HEAP32[(HEAP32[$info$addr >> 2] | 0) + 64 >> 2] | 0)) break; else ___assert_fail(34540, 34244, 2330, 34295);
  } while (0);
  if ((HEAP32[$alpha_channel$addr >> 2] | 0) >= (HEAP32[(HEAP32[$info$addr >> 2] | 0) + 64 >> 2] | 0)) {
   HEAP32[$retval >> 2] = 0;
   $203 = HEAP32[$retval >> 2] | 0;
   STACKTOP = sp;
   return $203 | 0;
  }
  if (!(HEAP32[$tempmem$addr >> 2] | 0)) ___assert_fail(34593, 34244, 2336, 34295);
  if (!(HEAP32[$tempmem$addr >> 2] | 0)) {
   HEAP32[$retval >> 2] = 0;
   $203 = HEAP32[$retval >> 2] | 0;
   STACKTOP = sp;
   return $203 | 0;
  }
  if ((HEAP32[$tempmem_size_in_bytes$addr >> 2] | 0) >>> 0 < (HEAP32[$memory_required >> 2] | 0) >>> 0) ___assert_fail(34601, 34244, 2341, 34295);
  if ((HEAP32[$tempmem_size_in_bytes$addr >> 2] | 0) >>> 0 < (HEAP32[$memory_required >> 2] | 0) >>> 0) {
   HEAP32[$retval >> 2] = 0;
   $203 = HEAP32[$retval >> 2] | 0;
   STACKTOP = sp;
   return $203 | 0;
  }
  _memset(HEAP32[$tempmem$addr >> 2] | 0, 0, HEAP32[$tempmem_size_in_bytes$addr >> 2] | 0) | 0;
  HEAP32[HEAP32[$info$addr >> 2] >> 2] = HEAP32[$input_data$addr >> 2];
  HEAP32[(HEAP32[$info$addr >> 2] | 0) + 12 >> 2] = HEAP32[$width_stride_input >> 2];
  HEAP32[(HEAP32[$info$addr >> 2] | 0) + 16 >> 2] = HEAP32[$output_data$addr >> 2];
  HEAP32[(HEAP32[$info$addr >> 2] | 0) + 28 >> 2] = HEAP32[$width_stride_output >> 2];
  HEAP32[(HEAP32[$info$addr >> 2] | 0) + 68 >> 2] = HEAP32[$alpha_channel$addr >> 2];
  HEAP32[(HEAP32[$info$addr >> 2] | 0) + 72 >> 2] = HEAP32[$flags$addr >> 2];
  HEAP32[(HEAP32[$info$addr >> 2] | 0) + 76 >> 2] = HEAP32[$type$addr >> 2];
  HEAP32[(HEAP32[$info$addr >> 2] | 0) + 88 >> 2] = HEAP32[$edge_horizontal$addr >> 2];
  HEAP32[(HEAP32[$info$addr >> 2] | 0) + 92 >> 2] = HEAP32[$edge_vertical$addr >> 2];
  HEAP32[(HEAP32[$info$addr >> 2] | 0) + 96 >> 2] = HEAP32[$colorspace$addr >> 2];
  CSE$2 = HEAP32[$info$addr >> 2] | 0;
  $call94 = _stbir__get_coefficient_width(HEAP32[CSE$2 + 80 >> 2] | 0, Math_fround(HEAPF32[CSE$2 + 56 >> 2])) | 0;
  HEAP32[(HEAP32[$info$addr >> 2] | 0) + 128 >> 2] = $call94;
  CSE$3 = HEAP32[$info$addr >> 2] | 0;
  $call96 = _stbir__get_coefficient_width(HEAP32[CSE$3 + 84 >> 2] | 0, Math_fround(HEAPF32[CSE$3 + 60 >> 2])) | 0;
  HEAP32[(HEAP32[$info$addr >> 2] | 0) + 132 >> 2] = $call96;
  CSE$4 = HEAP32[$info$addr >> 2] | 0;
  $call99 = _stbir__get_filter_pixel_width(HEAP32[CSE$4 + 80 >> 2] | 0, Math_fround(HEAPF32[CSE$4 + 56 >> 2])) | 0;
  HEAP32[(HEAP32[$info$addr >> 2] | 0) + 136 >> 2] = $call99;
  CSE$5 = HEAP32[$info$addr >> 2] | 0;
  $call102 = _stbir__get_filter_pixel_width(HEAP32[CSE$5 + 84 >> 2] | 0, Math_fround(HEAPF32[CSE$5 + 60 >> 2])) | 0;
  HEAP32[(HEAP32[$info$addr >> 2] | 0) + 140 >> 2] = $call102;
  CSE$6 = HEAP32[$info$addr >> 2] | 0;
  $call105 = _stbir__get_filter_pixel_margin(HEAP32[CSE$6 + 80 >> 2] | 0, Math_fround(HEAPF32[CSE$6 + 56 >> 2])) | 0;
  HEAP32[(HEAP32[$info$addr >> 2] | 0) + 144 >> 2] = $call105;
  CSE$7 = HEAP32[$info$addr >> 2] | 0;
  $call108 = _stbir__get_filter_pixel_margin(HEAP32[CSE$7 + 84 >> 2] | 0, Math_fround(HEAPF32[CSE$7 + 60 >> 2])) | 0;
  HEAP32[(HEAP32[$info$addr >> 2] | 0) + 148 >> 2] = $call108;
  CSE$8 = HEAP32[$info$addr >> 2] | 0;
  $mul112 = (Math_imul(HEAP32[CSE$8 + 20 >> 2] | 0, HEAP32[CSE$8 + 64 >> 2] | 0) | 0) << 2;
  HEAP32[(HEAP32[$info$addr >> 2] | 0) + 160 >> 2] = $mul112;
  CSE$9 = HEAP32[$info$addr >> 2] | 0;
  HEAP32[CSE$9 + 116 >> 2] = (HEAP32[CSE$9 + 4 >> 2] | 0) + (HEAP32[CSE$9 + 144 >> 2] << 1);
  HEAP32[(HEAP32[$info$addr >> 2] | 0) + 100 >> 2] = HEAP32[$tempmem$addr >> 2];
  CSE$10 = HEAP32[$info$addr >> 2] | 0;
  HEAP32[CSE$10 + 104 >> 2] = (HEAP32[CSE$10 + 100 >> 2] | 0) + (HEAP32[CSE$10 + 188 >> 2] | 0);
  CSE$11 = HEAP32[$info$addr >> 2] | 0;
  HEAP32[CSE$11 + 108 >> 2] = (HEAP32[CSE$11 + 104 >> 2] | 0) + (HEAP32[CSE$11 + 192 >> 2] | 0);
  CSE$12 = HEAP32[$info$addr >> 2] | 0;
  HEAP32[CSE$12 + 112 >> 2] = (HEAP32[CSE$12 + 108 >> 2] | 0) + (HEAP32[CSE$12 + 196 >> 2] | 0);
  CSE$13 = HEAP32[$info$addr >> 2] | 0;
  HEAP32[CSE$13 + 120 >> 2] = (HEAP32[CSE$13 + 112 >> 2] | 0) + (HEAP32[CSE$13 + 200 >> 2] | 0);
  $tobool124 = (_stbir__use_height_upsampling(HEAP32[$info$addr >> 2] | 0) | 0) != 0;
  $135 = HEAP32[$info$addr >> 2] | 0;
  do if ($tobool124) {
   HEAP32[$135 + 124 >> 2] = 0;
   CSE$16 = HEAP32[$info$addr >> 2] | 0;
   HEAP32[CSE$16 + 180 >> 2] = (HEAP32[CSE$16 + 120 >> 2] | 0) + (HEAP32[CSE$16 + 204 >> 2] | 0);
   CSE$17 = HEAP32[$info$addr >> 2] | 0;
   HEAP32[CSE$17 + 184 >> 2] = (HEAP32[CSE$17 + 180 >> 2] | 0) + (HEAP32[CSE$17 + 212 >> 2] | 0);
   if (((HEAP32[(HEAP32[$info$addr >> 2] | 0) + 184 >> 2] | 0) + (HEAP32[(HEAP32[$info$addr >> 2] | 0) + 216 >> 2] | 0) | 0) == ((HEAP32[$tempmem$addr >> 2] | 0) + (HEAP32[$tempmem_size_in_bytes$addr >> 2] | 0) | 0)) break; else ___assert_fail(34642, 34244, 2385, 34295);
  } else {
   CSE$18 = HEAP32[$info$addr >> 2] | 0;
   HEAP32[CSE$18 + 124 >> 2] = (HEAP32[$135 + 120 >> 2] | 0) + (HEAP32[CSE$18 + 204 >> 2] | 0);
   CSE$19 = HEAP32[$info$addr >> 2] | 0;
   HEAP32[CSE$19 + 180 >> 2] = (HEAP32[CSE$19 + 124 >> 2] | 0) + (HEAP32[CSE$19 + 208 >> 2] | 0);
   HEAP32[(HEAP32[$info$addr >> 2] | 0) + 184 >> 2] = 0;
   if (((HEAP32[(HEAP32[$info$addr >> 2] | 0) + 180 >> 2] | 0) + (HEAP32[(HEAP32[$info$addr >> 2] | 0) + 212 >> 2] | 0) | 0) == ((HEAP32[$tempmem$addr >> 2] | 0) + (HEAP32[$tempmem_size_in_bytes$addr >> 2] | 0) | 0)) break; else ___assert_fail(34776, 34244, 2393, 34295);
  } while (0);
  HEAP32[(HEAP32[$info$addr >> 2] | 0) + 176 >> 2] = -1;
  $180 = Math_fround(HEAPF32[(HEAP32[$info$addr >> 2] | 0) + 56 >> 2]);
  $182 = Math_fround(HEAPF32[(HEAP32[$info$addr >> 2] | 0) + 48 >> 2]);
  CSE$14 = HEAP32[$info$addr >> 2] | 0;
  _stbir__calculate_filters(HEAP32[CSE$14 + 100 >> 2] | 0, HEAP32[CSE$14 + 104 >> 2] | 0, HEAP32[CSE$14 + 80 >> 2] | 0, $180, $182, HEAP32[CSE$14 + 4 >> 2] | 0, HEAP32[CSE$14 + 20 >> 2] | 0);
  $194 = Math_fround(HEAPF32[(HEAP32[$info$addr >> 2] | 0) + 60 >> 2]);
  $196 = Math_fround(HEAPF32[(HEAP32[$info$addr >> 2] | 0) + 52 >> 2]);
  CSE$15 = HEAP32[$info$addr >> 2] | 0;
  _stbir__calculate_filters(HEAP32[CSE$15 + 108 >> 2] | 0, HEAP32[CSE$15 + 112 >> 2] | 0, HEAP32[CSE$15 + 84 >> 2] | 0, $194, $196, HEAP32[CSE$15 + 8 >> 2] | 0, HEAP32[CSE$15 + 24 >> 2] | 0);
  $tobool167 = (_stbir__use_height_upsampling(HEAP32[$info$addr >> 2] | 0) | 0) != 0;
  $202 = HEAP32[$info$addr >> 2] | 0;
  if ($tobool167) _stbir__buffer_loop_upsample($202); else _stbir__buffer_loop_downsample($202);
  HEAP32[$retval >> 2] = 1;
  $203 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $203 | 0;
 }
 HEAP32[$retval >> 2] = 0;
 $203 = HEAP32[$retval >> 2] | 0;
 STACKTOP = sp;
 return $203 | 0;
}

function ___intscan($f, $base, $pok, $0, $1) {
 $f = $f | 0;
 $base = $base | 0;
 $pok = $pok | 0;
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $100 = 0, $107 = 0, $108 = 0, $109 = 0, $114 = 0, $124 = 0, $126 = 0, $13 = 0, $135 = 0, $143 = 0, $146 = 0, $148 = 0, $149 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $2 = 0, $23 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $32 = 0, $34 = 0, $42 = 0, $5 = 0, $51 = 0, $52 = 0, $55 = 0, $57 = 0, $58 = 0, $60 = 0, $62 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $71 = 0, $72 = 0, $73 = 0, $82 = 0, $83 = 0, $86 = 0, $88 = 0, $89 = 0, $90 = 0, $92 = 0, $97 = 0, $98 = 0, $99 = 0, $base$addr$1 = 0, $base$addr$1135 = 0, $base$addr$1136 = 0, $c$0 = 0, $c$1 = 0, $c$1137 = 0, $c$3185 = 0, $c$4$lcssa = 0, $c$6$lcssa = 0, $c$7168 = 0, $c$8 = 0, $cmp25 = 0, $cond = 0, $cond128 = 0, $cond162 = 0, $cond202 = 0, $cond233 = 0, $cond262 = 0, $cond301 = 0, $cond328 = 0, $cond44 = 0, $cond59 = 0, $conv176 = 0, $conv179159 = 0, $conv179162 = 0, $conv207152$pre$phiZ2D = 0, $conv238177 = 0, $conv238180 = 0, $conv267166$pre$phiZ2D = 0, $neg$0 = 0, $neg$1 = 0, $rpos = 0, $shend = 0, $spec$select132 = 0, $sub = 0, $sub111191 = 0, $sub111194 = 0, $sub131187 = 0, $tobool65 = 0, $x$0193 = 0, $x$1161 = 0, $x$2179 = 0, label = 0;
 label = 0;
 L1 : do if ($base >>> 0 > 36) {
  HEAP32[(___errno_location() | 0) >> 2] = 28;
  $148 = 0;
  $149 = 0;
 } else {
  $rpos = $f + 4 | 0;
  $shend = $f + 104 | 0;
  do {
   $2 = HEAP32[$rpos >> 2] | 0;
   if ($2 >>> 0 < (HEAP32[$shend >> 2] | 0) >>> 0) {
    HEAP32[$rpos >> 2] = $2 + 1;
    $cond = HEAPU8[$2 >> 0] | 0;
   } else $cond = ___shgetc($f) | 0;
  } while ((_isspace($cond) | 0) != 0);
  L11 : do switch ($cond | 0) {
  case 43:
  case 45:
   {
    $sub = (($cond | 0) == 45) << 31 >> 31;
    $5 = HEAP32[$rpos >> 2] | 0;
    if ($5 >>> 0 < (HEAP32[$shend >> 2] | 0) >>> 0) {
     HEAP32[$rpos >> 2] = $5 + 1;
     $c$0 = HEAPU8[$5 >> 0] | 0;
     $neg$0 = $sub;
     break L11;
    } else {
     $c$0 = ___shgetc($f) | 0;
     $neg$0 = $sub;
     break L11;
    }
    break;
   }
  default:
   {
    $c$0 = $cond;
    $neg$0 = 0;
   }
  } while (0);
  $cmp25 = ($base | 0) == 0;
  do if (($base | 16 | 0) == 16 & ($c$0 | 0) == 48) {
   $10 = HEAP32[$rpos >> 2] | 0;
   if ($10 >>> 0 < (HEAP32[$shend >> 2] | 0) >>> 0) {
    HEAP32[$rpos >> 2] = $10 + 1;
    $cond44 = HEAPU8[$10 >> 0] | 0;
   } else $cond44 = ___shgetc($f) | 0;
   if (($cond44 | 32 | 0) != 120) if ($cmp25) {
    $base$addr$1135 = 8;
    $c$1137 = $cond44;
    label = 47;
    break;
   } else {
    $base$addr$1 = $base;
    $c$1 = $cond44;
    label = 32;
    break;
   }
   $13 = HEAP32[$rpos >> 2] | 0;
   if ($13 >>> 0 < (HEAP32[$shend >> 2] | 0) >>> 0) {
    HEAP32[$rpos >> 2] = $13 + 1;
    $cond59 = HEAPU8[$13 >> 0] | 0;
   } else $cond59 = ___shgetc($f) | 0;
   if ((HEAPU8[8033 + $cond59 >> 0] | 0) > 15) {
    $tobool65 = (HEAP32[$shend >> 2] | 0) == 0;
    if (!$tobool65) HEAP32[$rpos >> 2] = (HEAP32[$rpos >> 2] | 0) + -1;
    if (!$pok) {
     ___shlim($f, 0, 0);
     $148 = 0;
     $149 = 0;
     break L1;
    }
    if ($tobool65) {
     $148 = 0;
     $149 = 0;
     break L1;
    }
    HEAP32[$rpos >> 2] = (HEAP32[$rpos >> 2] | 0) + -1;
    $148 = 0;
    $149 = 0;
    break L1;
   } else {
    $base$addr$1135 = 16;
    $c$1137 = $cond59;
    label = 47;
   }
  } else {
   $spec$select132 = $cmp25 ? 10 : $base;
   if ($spec$select132 >>> 0 > (HEAPU8[8033 + $c$0 >> 0] | 0) >>> 0) {
    $base$addr$1 = $spec$select132;
    $c$1 = $c$0;
    label = 32;
   } else {
    if (HEAP32[$shend >> 2] | 0) HEAP32[$rpos >> 2] = (HEAP32[$rpos >> 2] | 0) + -1;
    ___shlim($f, 0, 0);
    HEAP32[(___errno_location() | 0) >> 2] = 28;
    $148 = 0;
    $149 = 0;
    break L1;
   }
  } while (0);
  L43 : do if ((label | 0) == 32) if (($base$addr$1 | 0) == 10) {
   $sub111191 = $c$1 + -48 | 0;
   if ($sub111191 >>> 0 < 10) {
    $sub111194 = $sub111191;
    $x$0193 = 0;
    do {
     $x$0193 = ($x$0193 * 10 | 0) + $sub111194 | 0;
     $23 = HEAP32[$rpos >> 2] | 0;
     if ($23 >>> 0 < (HEAP32[$shend >> 2] | 0) >>> 0) {
      HEAP32[$rpos >> 2] = $23 + 1;
      $cond128 = HEAPU8[$23 >> 0] | 0;
     } else $cond128 = ___shgetc($f) | 0;
     $sub111194 = $cond128 + -48 | 0;
    } while ($sub111194 >>> 0 < 10 & $x$0193 >>> 0 < 429496729);
    if ($sub111194 >>> 0 < 10) {
     $27 = $x$0193;
     $28 = 0;
     $c$3185 = $cond128;
     $sub131187 = $sub111194;
     while (1) {
      $29 = ___muldi3($27 | 0, $28 | 0, 10, 0) | 0;
      $30 = getTempRet0() | 0;
      $32 = (($sub131187 | 0) < 0) << 31 >> 31;
      $34 = ~$32;
      if ($30 >>> 0 > $34 >>> 0 | ($30 | 0) == ($34 | 0) & $29 >>> 0 > ~$sub131187 >>> 0) {
       $150 = $27;
       $151 = $28;
       $base$addr$1136 = 10;
       $c$8 = $c$3185;
       label = 76;
       break L43;
      }
      $27 = _i64Add($29 | 0, $30 | 0, $sub131187 | 0, $32 | 0) | 0;
      $28 = getTempRet0() | 0;
      $42 = HEAP32[$rpos >> 2] | 0;
      if ($42 >>> 0 < (HEAP32[$shend >> 2] | 0) >>> 0) {
       HEAP32[$rpos >> 2] = $42 + 1;
       $cond162 = HEAPU8[$42 >> 0] | 0;
      } else $cond162 = ___shgetc($f) | 0;
      $sub131187 = $cond162 + -48 | 0;
      if (!($sub131187 >>> 0 < 10 & ($28 >>> 0 < 429496729 | ($28 | 0) == 429496729 & $27 >>> 0 < 2576980378))) break; else $c$3185 = $cond162;
     }
     if ($sub131187 >>> 0 > 9) {
      $124 = $28;
      $126 = $27;
      $neg$1 = $neg$0;
     } else {
      $150 = $27;
      $151 = $28;
      $base$addr$1136 = 10;
      $c$8 = $cond162;
      label = 76;
     }
    } else {
     $124 = 0;
     $126 = $x$0193;
     $neg$1 = $neg$0;
    }
   } else {
    $124 = 0;
    $126 = 0;
    $neg$1 = $neg$0;
   }
  } else {
   $base$addr$1135 = $base$addr$1;
   $c$1137 = $c$1;
   label = 47;
  } while (0);
  L63 : do if ((label | 0) == 47) {
   if (!($base$addr$1135 + -1 & $base$addr$1135)) {
    $conv176 = HEAP8[38420 + (($base$addr$1135 * 23 | 0) >>> 5 & 7) >> 0] | 0;
    $51 = HEAP8[8033 + $c$1137 >> 0] | 0;
    $conv179159 = $51 & 255;
    if ($base$addr$1135 >>> 0 > $conv179159 >>> 0) {
     $conv179162 = $conv179159;
     $x$1161 = 0;
     do {
      $x$1161 = $conv179162 | $x$1161 << $conv176;
      $52 = HEAP32[$rpos >> 2] | 0;
      if ($52 >>> 0 < (HEAP32[$shend >> 2] | 0) >>> 0) {
       HEAP32[$rpos >> 2] = $52 + 1;
       $cond202 = HEAPU8[$52 >> 0] | 0;
      } else $cond202 = ___shgetc($f) | 0;
      $55 = HEAP8[8033 + $cond202 >> 0] | 0;
      $conv179162 = $55 & 255;
     } while ($x$1161 >>> 0 < 134217728 & $base$addr$1135 >>> 0 > $conv179162 >>> 0);
     $152 = $55;
     $60 = 0;
     $62 = $x$1161;
     $c$4$lcssa = $cond202;
     $conv207152$pre$phiZ2D = $conv179162;
    } else {
     $152 = $51;
     $60 = 0;
     $62 = 0;
     $c$4$lcssa = $c$1137;
     $conv207152$pre$phiZ2D = $conv179159;
    }
    $57 = _bitshift64Lshr(-1, -1, $conv176 | 0) | 0;
    $58 = getTempRet0() | 0;
    if ($base$addr$1135 >>> 0 <= $conv207152$pre$phiZ2D >>> 0 | ($58 >>> 0 < $60 >>> 0 | ($58 | 0) == ($60 | 0) & $57 >>> 0 < $62 >>> 0)) {
     $150 = $62;
     $151 = $60;
     $base$addr$1136 = $base$addr$1135;
     $c$8 = $c$4$lcssa;
     label = 76;
     break;
    }
    $66 = $62;
    $67 = $60;
    $71 = $152;
    while (1) {
     $68 = _bitshift64Shl($66 | 0, $67 | 0, $conv176 | 0) | 0;
     $69 = getTempRet0() | 0;
     $72 = $68 | $71 & 255;
     $73 = HEAP32[$rpos >> 2] | 0;
     if ($73 >>> 0 < (HEAP32[$shend >> 2] | 0) >>> 0) {
      HEAP32[$rpos >> 2] = $73 + 1;
      $cond233 = HEAPU8[$73 >> 0] | 0;
     } else $cond233 = ___shgetc($f) | 0;
     $71 = HEAP8[8033 + $cond233 >> 0] | 0;
     if ($base$addr$1135 >>> 0 <= ($71 & 255) >>> 0 | ($69 >>> 0 > $58 >>> 0 | ($69 | 0) == ($58 | 0) & $72 >>> 0 > $57 >>> 0)) {
      $150 = $72;
      $151 = $69;
      $base$addr$1136 = $base$addr$1135;
      $c$8 = $cond233;
      label = 76;
      break L63;
     } else {
      $66 = $72;
      $67 = $69;
     }
    }
   }
   $82 = HEAP8[8033 + $c$1137 >> 0] | 0;
   $conv238177 = $82 & 255;
   if ($base$addr$1135 >>> 0 > $conv238177 >>> 0) {
    $conv238180 = $conv238177;
    $x$2179 = 0;
    do {
     $x$2179 = $conv238180 + (Math_imul($x$2179, $base$addr$1135) | 0) | 0;
     $83 = HEAP32[$rpos >> 2] | 0;
     if ($83 >>> 0 < (HEAP32[$shend >> 2] | 0) >>> 0) {
      HEAP32[$rpos >> 2] = $83 + 1;
      $cond262 = HEAPU8[$83 >> 0] | 0;
     } else $cond262 = ___shgetc($f) | 0;
     $86 = HEAP8[8033 + $cond262 >> 0] | 0;
     $conv238180 = $86 & 255;
    } while ($x$2179 >>> 0 < 119304647 & $base$addr$1135 >>> 0 > $conv238180 >>> 0);
    $153 = $86;
    $154 = $x$2179;
    $155 = 0;
    $c$6$lcssa = $cond262;
    $conv267166$pre$phiZ2D = $conv238180;
   } else {
    $153 = $82;
    $154 = 0;
    $155 = 0;
    $c$6$lcssa = $c$1137;
    $conv267166$pre$phiZ2D = $conv238177;
   }
   if ($base$addr$1135 >>> 0 > $conv267166$pre$phiZ2D >>> 0) {
    $88 = ___udivdi3(-1, -1, $base$addr$1135 | 0, 0) | 0;
    $89 = getTempRet0() | 0;
    $100 = $153;
    $90 = $155;
    $92 = $154;
    $c$7168 = $c$6$lcssa;
    while (1) {
     if ($90 >>> 0 > $89 >>> 0 | ($90 | 0) == ($89 | 0) & $92 >>> 0 > $88 >>> 0) {
      $150 = $92;
      $151 = $90;
      $base$addr$1136 = $base$addr$1135;
      $c$8 = $c$7168;
      label = 76;
      break L63;
     }
     $97 = ___muldi3($92 | 0, $90 | 0, $base$addr$1135 | 0, 0) | 0;
     $98 = getTempRet0() | 0;
     $99 = $100 & 255;
     if ($98 >>> 0 > 4294967295 | ($98 | 0) == -1 & $97 >>> 0 > ~$99 >>> 0) {
      $150 = $92;
      $151 = $90;
      $base$addr$1136 = $base$addr$1135;
      $c$8 = $c$7168;
      label = 76;
      break L63;
     }
     $107 = _i64Add($97 | 0, $98 | 0, $99 | 0, 0) | 0;
     $108 = getTempRet0() | 0;
     $109 = HEAP32[$rpos >> 2] | 0;
     if ($109 >>> 0 < (HEAP32[$shend >> 2] | 0) >>> 0) {
      HEAP32[$rpos >> 2] = $109 + 1;
      $cond301 = HEAPU8[$109 >> 0] | 0;
     } else $cond301 = ___shgetc($f) | 0;
     $100 = HEAP8[8033 + $cond301 >> 0] | 0;
     if ($base$addr$1135 >>> 0 <= ($100 & 255) >>> 0) {
      $150 = $107;
      $151 = $108;
      $base$addr$1136 = $base$addr$1135;
      $c$8 = $cond301;
      label = 76;
      break;
     } else {
      $90 = $108;
      $92 = $107;
      $c$7168 = $cond301;
     }
    }
   } else {
    $150 = $154;
    $151 = $155;
    $base$addr$1136 = $base$addr$1135;
    $c$8 = $c$6$lcssa;
    label = 76;
   }
  } while (0);
  if ((label | 0) == 76) if ($base$addr$1136 >>> 0 > (HEAPU8[8033 + $c$8 >> 0] | 0) >>> 0) {
   do {
    $114 = HEAP32[$rpos >> 2] | 0;
    if ($114 >>> 0 < (HEAP32[$shend >> 2] | 0) >>> 0) {
     HEAP32[$rpos >> 2] = $114 + 1;
     $cond328 = HEAPU8[$114 >> 0] | 0;
    } else $cond328 = ___shgetc($f) | 0;
   } while ($base$addr$1136 >>> 0 > (HEAPU8[8033 + $cond328 >> 0] | 0) >>> 0);
   HEAP32[(___errno_location() | 0) >> 2] = 68;
   $124 = $1;
   $126 = $0;
   $neg$1 = ($0 & 1 | 0) == 0 & 0 == 0 ? $neg$0 : 0;
  } else {
   $124 = $151;
   $126 = $150;
   $neg$1 = $neg$0;
  }
  if (HEAP32[$shend >> 2] | 0) HEAP32[$rpos >> 2] = (HEAP32[$rpos >> 2] | 0) + -1;
  if (!($124 >>> 0 < $1 >>> 0 | ($124 | 0) == ($1 | 0) & $126 >>> 0 < $0 >>> 0)) {
   if (!(($0 & 1 | 0) != 0 | 0 != 0 | ($neg$1 | 0) != 0)) {
    HEAP32[(___errno_location() | 0) >> 2] = 68;
    $135 = _i64Add($0 | 0, $1 | 0, -1, -1) | 0;
    $148 = getTempRet0() | 0;
    $149 = $135;
    break;
   }
   if ($124 >>> 0 > $1 >>> 0 | ($124 | 0) == ($1 | 0) & $126 >>> 0 > $0 >>> 0) {
    HEAP32[(___errno_location() | 0) >> 2] = 68;
    $148 = $1;
    $149 = $0;
    break;
   }
  }
  $143 = (($neg$1 | 0) < 0) << 31 >> 31;
  $146 = _i64Subtract($126 ^ $neg$1 | 0, $124 ^ $143 | 0, $neg$1 | 0, $143 | 0) | 0;
  $148 = getTempRet0() | 0;
  $149 = $146;
 } while (0);
 setTempRet0($148 | 0);
 return $149 | 0;
}

function _emscripten_webgl1_get_proc_address($name) {
 $name = $name | 0;
 var $retval$0 = 0, $tobool638 = 0;
 do if (!(_strcmp($name, 39456) | 0)) $retval$0 = 131; else if (!(_strcmp($name, 39472) | 0)) $retval$0 = 54; else if (!(_strcmp($name, 39487) | 0)) $retval$0 = 12; else if (!(_strcmp($name, 39508) | 0)) $retval$0 = 55; else if (!(_strcmp($name, 39521) | 0)) $retval$0 = 56; else if (!(_strcmp($name, 39539) | 0)) $retval$0 = 57; else if (!(_strcmp($name, 39558) | 0)) $retval$0 = 58; else if (!(_strcmp($name, 39572) | 0)) $retval$0 = 1; else if (!(_strcmp($name, 39585) | 0)) $retval$0 = 132; else if (!(_strcmp($name, 39601) | 0)) $retval$0 = 59; else if (!(_strcmp($name, 39625) | 0)) $retval$0 = 60; else if (!(_strcmp($name, 39637) | 0)) $retval$0 = 11; else if (!(_strcmp($name, 39657) | 0)) $retval$0 = 12; else if (!(_strcmp($name, 39670) | 0)) $retval$0 = 13; else if (!(_strcmp($name, 39686) | 0)) $retval$0 = 76; else if (!(_strcmp($name, 39711) | 0)) $retval$0 = 133; else if (!(_strcmp($name, 39719) | 0)) $retval$0 = 2; else if (!(_strcmp($name, 39732) | 0)) $retval$0 = 1; else if (!(_strcmp($name, 39746) | 0)) $retval$0 = 134; else {
  if (!(_strcmp($name, 39761) | 0)) {
   $retval$0 = 14;
   break;
  }
  if (!(_strcmp($name, 39773) | 0)) {
   $retval$0 = 135;
   break;
  }
  if (!(_strcmp($name, 39789) | 0)) {
   $retval$0 = 1;
   break;
  }
  if (!(_strcmp($name, 39812) | 0)) {
   $retval$0 = 1;
   break;
  }
  if (!(_strcmp($name, 39838) | 0)) {
   $retval$0 = 2;
   break;
  }
  if (!(_strcmp($name, 39855) | 0)) {
   $retval$0 = 3;
   break;
  }
  if (!(_strcmp($name, 39875) | 0)) {
   $retval$0 = 1;
   break;
  }
  if (!(_strcmp($name, 39891) | 0)) {
   $retval$0 = 77;
   break;
  }
  if (!(_strcmp($name, 39906) | 0)) {
   $retval$0 = 136;
   break;
  }
  if (!(_strcmp($name, 39917) | 0)) {
   $retval$0 = 61;
   break;
  }
  if (!(_strcmp($name, 39933) | 0)) {
   $retval$0 = 62;
   break;
  }
  if (!(_strcmp($name, 39954) | 0)) {
   $retval$0 = 137;
   break;
  }
  if (!(_strcmp($name, 39970) | 0)) {
   $retval$0 = 63;
   break;
  }
  if (!(_strcmp($name, 39992) | 0)) {
   $retval$0 = 138;
   break;
  }
  if (!(_strcmp($name, 40007) | 0)) {
   $retval$0 = 64;
   break;
  }
  if (!(_strcmp($name, 40024) | 0)) {
   $retval$0 = 139;
   break;
  }
  if (!(_strcmp($name, 40036) | 0)) {
   $retval$0 = 140;
   break;
  }
  if (!(_strcmp($name, 40048) | 0)) {
   $retval$0 = 1;
   break;
  }
  if (!(_strcmp($name, 40062) | 0)) {
   $retval$0 = 65;
   break;
  }
  if (!(_strcmp($name, 40077) | 0)) {
   $retval$0 = 141;
   break;
  }
  if (!(_strcmp($name, 40087) | 0)) {
   $retval$0 = 142;
   break;
  }
  if (!(_strcmp($name, 40114) | 0)) {
   $retval$0 = 13;
   break;
  }
  if (!(_strcmp($name, 40127) | 0)) {
   $retval$0 = 15;
   break;
  }
  if (!(_strcmp($name, 40142) | 0)) {
   $retval$0 = 143;
   break;
  }
  if (!(_strcmp($name, 40151) | 0)) {
   $retval$0 = 144;
   break;
  }
  if (!(_strcmp($name, 40177) | 0)) {
   $retval$0 = 3;
   break;
  }
  if (!(_strcmp($name, 40186) | 0)) {
   $retval$0 = 4;
   break;
  }
  if (!(_strcmp($name, 40194) | 0)) {
   $retval$0 = 16;
   break;
  }
  if (!(_strcmp($name, 40220) | 0)) {
   $retval$0 = 6;
   break;
  }
  if (!(_strcmp($name, 40243) | 0)) {
   $retval$0 = 145;
   break;
  }
  if (!(_strcmp($name, 40255) | 0)) {
   $retval$0 = 66;
   break;
  }
  if (!(_strcmp($name, 40268) | 0)) {
   $retval$0 = 146;
   break;
  }
  if (!(_strcmp($name, 40285) | 0)) {
   $retval$0 = 67;
   break;
  }
  if (!(_strcmp($name, 40303) | 0)) {
   $retval$0 = 68;
   break;
  }
  if (!(_strcmp($name, 40322) | 0)) {
   $retval$0 = 69;
   break;
  }
  if (!(_strcmp($name, 40336) | 0)) {
   $retval$0 = 1;
   break;
  }
  if (!(_strcmp($name, 40354) | 0)) {
   $retval$0 = 2;
   break;
  }
  if (!(_strcmp($name, 40373) | 0)) {
   $retval$0 = 17;
   break;
  }
  if (!(_strcmp($name, 40394) | 0)) {
   $retval$0 = 18;
   break;
  }
  if (!(_strcmp($name, 40414) | 0)) {
   $retval$0 = 70;
   break;
  }
  if (!(_strcmp($name, 40428) | 0)) {
   $retval$0 = 14;
   break;
  }
  if (!(_strcmp($name, 40451) | 0)) {
   $retval$0 = 2;
   break;
  }
  if (!(_strcmp($name, 40462) | 0)) {
   $retval$0 = 71;
   break;
  }
  if (!(_strcmp($name, 40474) | 0)) {
   $retval$0 = 18;
   break;
  }
  if (!(_strcmp($name, 40512) | 0)) {
   $retval$0 = 72;
   break;
  }
  if (!(_strcmp($name, 40526) | 0)) {
   $retval$0 = 15;
   break;
  }
  if (!(_strcmp($name, 40541) | 0)) {
   $retval$0 = 19;
   break;
  }
  if (!(_strcmp($name, 40561) | 0)) {
   $retval$0 = 16;
   break;
  }
  if (!(_strcmp($name, 40590) | 0)) {
   $retval$0 = 17;
   break;
  }
  if (!(_strcmp($name, 40604) | 0)) {
   $retval$0 = 20;
   break;
  }
  if (!(_strcmp($name, 40623) | 0)) {
   $retval$0 = 21;
   break;
  }
  if (!(_strcmp($name, 40650) | 0)) {
   $retval$0 = 22;
   break;
  }
  if (!(_strcmp($name, 40668) | 0)) {
   $retval$0 = 78;
   break;
  }
  if (!(_strcmp($name, 40680) | 0)) {
   $retval$0 = 18;
   break;
  }
  if (!(_strcmp($name, 40700) | 0)) {
   $retval$0 = 19;
   break;
  }
  if (!(_strcmp($name, 40720) | 0)) {
   $retval$0 = 20;
   break;
  }
  if (!(_strcmp($name, 40735) | 0)) {
   $retval$0 = 21;
   break;
  }
  if (!(_strcmp($name, 40750) | 0)) {
   $retval$0 = 19;
   break;
  }
  if (!(_strcmp($name, 40771) | 0)) {
   $retval$0 = 22;
   break;
  }
  if (!(_strcmp($name, 40791) | 0)) {
   $retval$0 = 23;
   break;
  }
  if (!(_strcmp($name, 40811) | 0)) {
   $retval$0 = 24;
   break;
  }
  if (!(_strcmp($name, 40837) | 0)) {
   $retval$0 = 73;
   break;
  }
  if (!(_strcmp($name, 40844) | 0)) {
   $retval$0 = 79;
   break;
  }
  if (!(_strcmp($name, 40855) | 0)) {
   $retval$0 = 80;
   break;
  }
  if (!(_strcmp($name, 40867) | 0)) {
   $retval$0 = 81;
   break;
  }
  if (!(_strcmp($name, 40883) | 0)) {
   $retval$0 = 82;
   break;
  }
  if (!(_strcmp($name, 40895) | 0)) {
   $retval$0 = 83;
   break;
  }
  if (!(_strcmp($name, 40912) | 0)) {
   $retval$0 = 84;
   break;
  }
  if (!(_strcmp($name, 40923) | 0)) {
   $retval$0 = 85;
   break;
  }
  if (!(_strcmp($name, 40935) | 0)) {
   $retval$0 = 2;
   break;
  }
  if (!(_strcmp($name, 40947) | 0)) {
   $retval$0 = 147;
   break;
  }
  if (!(_strcmp($name, 40961) | 0)) {
   $retval$0 = 74;
   break;
  }
  if (!(_strcmp($name, 40975) | 0)) {
   $retval$0 = 2;
   break;
  }
  if (!(_strcmp($name, 40991) | 0)) {
   $retval$0 = 3;
   break;
  }
  if (!(_strcmp($name, 41004) | 0)) {
   $retval$0 = 5;
   break;
  }
  if (!(_strcmp($name, 41028) | 0)) {
   $retval$0 = 23;
   break;
  }
  if (!(_strcmp($name, 41050) | 0)) {
   $retval$0 = 1;
   break;
  }
  if (!(_strcmp($name, 41067) | 0)) {
   $retval$0 = 24;
   break;
  }
  if (!(_strcmp($name, 41077) | 0)) {
   $retval$0 = 7;
   break;
  }
  if (!(_strcmp($name, 41092) | 0)) {
   $retval$0 = 25;
   break;
  }
  if (!(_strcmp($name, 41107) | 0)) {
   $retval$0 = 25;
   break;
  }
  if (!(_strcmp($name, 41121) | 0)) {
   $retval$0 = 26;
   break;
  }
  if (!(_strcmp($name, 41143) | 0)) {
   $retval$0 = 148;
   break;
  }
  if (!(_strcmp($name, 41157) | 0)) {
   $retval$0 = 75;
   break;
  }
  if (!(_strcmp($name, 41179) | 0)) {
   $retval$0 = 26;
   break;
  }
  if (!(_strcmp($name, 41191) | 0)) {
   $retval$0 = 27;
   break;
  }
  if (!(_strcmp($name, 41211) | 0)) {
   $retval$0 = 2;
   break;
  }
  if (!(_strcmp($name, 41224) | 0)) {
   $retval$0 = 1;
   break;
  }
  if (!(_strcmp($name, 41240) | 0)) {
   $retval$0 = 27;
   break;
  }
  if (!(_strcmp($name, 41257) | 0)) {
   $retval$0 = 28;
   break;
  }
  if (!(_strcmp($name, 41273) | 0)) {
   $retval$0 = 29;
   break;
  }
  if (!(_strcmp($name, 41290) | 0)) {
   $retval$0 = 3;
   break;
  }
  if (!(_strcmp($name, 41306) | 0)) {
   $retval$0 = 1;
   break;
  }
  if (!(_strcmp($name, 41318) | 0)) {
   $retval$0 = 30;
   break;
  }
  if (!(_strcmp($name, 41331) | 0)) {
   $retval$0 = 76;
   break;
  }
  if (!(_strcmp($name, 41343) | 0)) {
   $retval$0 = 31;
   break;
  }
  if (!(_strcmp($name, 41356) | 0)) {
   $retval$0 = 1;
   break;
  }
  if (!(_strcmp($name, 41368) | 0)) {
   $retval$0 = 32;
   break;
  }
  if (!(_strcmp($name, 41381) | 0)) {
   $retval$0 = 33;
   break;
  }
  if (!(_strcmp($name, 41393) | 0)) {
   $retval$0 = 34;
   break;
  }
  if (!(_strcmp($name, 41406) | 0)) {
   $retval$0 = 1;
   break;
  }
  if (!(_strcmp($name, 41418) | 0)) {
   $retval$0 = 35;
   break;
  }
  if (!(_strcmp($name, 41431) | 0)) {
   $retval$0 = 28;
   break;
  }
  if (!(_strcmp($name, 41443) | 0)) {
   $retval$0 = 36;
   break;
  }
  if (!(_strcmp($name, 41456) | 0)) {
   $retval$0 = 1;
   break;
  }
  if (!(_strcmp($name, 41468) | 0)) {
   $retval$0 = 37;
   break;
  }
  if (!(_strcmp($name, 41481) | 0)) {
   $retval$0 = 8;
   break;
  }
  if (!(_strcmp($name, 41493) | 0)) {
   $retval$0 = 38;
   break;
  }
  if (!(_strcmp($name, 41506) | 0)) {
   $retval$0 = 29;
   break;
  }
  if (!(_strcmp($name, 41525) | 0)) {
   $retval$0 = 30;
   break;
  }
  if (!(_strcmp($name, 41544) | 0)) {
   $retval$0 = 31;
   break;
  }
  if (!(_strcmp($name, 41563) | 0)) {
   $retval$0 = 149;
   break;
  }
  if (!(_strcmp($name, 41576) | 0)) {
   $retval$0 = 150;
   break;
  }
  if (!(_strcmp($name, 41594) | 0)) {
   $retval$0 = 2;
   break;
  }
  if (!(_strcmp($name, 41611) | 0)) {
   $retval$0 = 77;
   break;
  }
  if (!(_strcmp($name, 41629) | 0)) {
   $retval$0 = 2;
   break;
  }
  if (!(_strcmp($name, 41646) | 0)) {
   $retval$0 = 78;
   break;
  }
  if (!(_strcmp($name, 41664) | 0)) {
   $retval$0 = 2;
   break;
  }
  if (!(_strcmp($name, 41681) | 0)) {
   $retval$0 = 79;
   break;
  }
  if (!(_strcmp($name, 41699) | 0)) {
   $retval$0 = 2;
   break;
  }
  if (!(_strcmp($name, 41716) | 0)) {
   $retval$0 = 80;
   break;
  }
  if (!(_strcmp($name, 41734) | 0)) {
   $retval$0 = 9;
   break;
  }
  if (!(_strcmp($name, 41756) | 0)) {
   $retval$0 = 32;
   break;
  }
  if (!(_strcmp($name, 41767) | 0)) {
   $retval$0 = 47;
   break;
  }
  if (!(_strcmp($name, 41783) | 0)) {
   $retval$0 = 48;
   break;
  }
  if (!(_strcmp($name, 41802) | 0)) {
   $retval$0 = 74;
   break;
  }
  if (!(_strcmp($name, 41815) | 0)) {
   $retval$0 = 49;
   break;
  }
  if (!(_strcmp($name, 41831) | 0)) {
   $retval$0 = 129;
   break;
  }
  if (!(_strcmp($name, 41845) | 0)) {
   $retval$0 = 50;
   break;
  }
  if (!(_strcmp($name, 41863) | 0)) {
   $retval$0 = 7;
   break;
  }
  if (!(_strcmp($name, 41879) | 0)) {
   $retval$0 = 8;
   break;
  }
  if (!(_strcmp($name, 41901) | 0)) {
   $retval$0 = 9;
   break;
  }
  if (!(_strcmp($name, 41924) | 0)) {
   $retval$0 = 10;
   break;
  }
  if (!(_strcmp($name, 41948) | 0)) {
   $retval$0 = 11;
   break;
  }
  if (!(_strcmp($name, 41973) | 0)) {
   $retval$0 = 130;
   break;
  }
  if (!(_strcmp($name, 41994) | 0)) {
   $retval$0 = 51;
   break;
  }
  if (!(_strcmp($name, 42018) | 0)) {
   $retval$0 = 52;
   break;
  }
  if (!(_strcmp($name, 42039) | 0)) {
   $retval$0 = 75;
   break;
  }
  if (!(_strcmp($name, 42058) | 0)) {
   $retval$0 = 53;
   break;
  }
  if (!(_strcmp($name, 42077) | 0)) {
   $retval$0 = 10;
   break;
  }
  if (!(_strcmp($name, 42104) | 0)) {
   $retval$0 = 5;
   break;
  }
  $tobool638 = (_strcmp($name, 42133) | 0) == 0;
  return ($tobool638 ? 46 : 0) | 0;
 } while (0);
 return $retval$0 | 0;
}

function __ZN4tson5LayeraSEOS0_($this, $0) {
 $this = $this | 0;
 $0 = $0 | 0;
 var $10 = 0, $14 = 0, $19 = 0, $2 = 0, $23 = 0, $27 = 0, $6 = 0, $__cap_$i$i$i$i$i = 0, $__cap_$i$i$i$i$i104 = 0, $__cap_$i$i$i$i$i123 = 0, $__cap_$i$i$i$i$i31 = 0, $__cap_$i$i$i$i$i49 = 0, $__cap_$i$i$i$i$i67 = 0, $__cap_$i$i$i$i$i85 = 0, $__size_$i1$i$i$i$i = 0, $__size_$i1$i$i$i$i114 = 0, $__size_$i1$i$i$i$i22 = 0, $__size_$i1$i$i$i$i40 = 0, $__size_$i1$i$i$i$i58 = 0, $__size_$i1$i$i$i$i76 = 0, $__size_$i1$i$i$i$i95 = 0, $agg$tmp$i110 = 0, $agg$tmp$i110$byval_copy = 0, $m_base64Data = 0, $m_base64Data7 = 0, $m_compression = 0, $m_compression3 = 0, $m_drawOrder = 0, $m_drawOrder9 = 0, $m_encoding = 0, $m_encoding11 = 0, $m_image = 0, $m_image14 = 0, $m_name = 0, $m_name18 = 0, $m_offset = 0, $m_offset22 = 0, $m_size = 0, $m_size25 = 0, $m_type = 0, $m_type28 = 0, $m_typeStr = 0, $m_typeStr26 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $agg$tmp$i110$byval_copy = sp + 1 | 0;
 $agg$tmp$i110 = sp;
 HEAP8[$agg$tmp$i110$byval_copy >> 0] = HEAP8[$agg$tmp$i110 >> 0] | 0;
 __ZNSt3__26vectorIN4tson5ChunkENS_9allocatorIS2_EEE13__move_assignERS5_NS_17integral_constantIbLb1EEE($this, $0, $agg$tmp$i110$byval_copy);
 $m_compression = $this + 12 | 0;
 $m_compression3 = $0 + 12 | 0;
 $__size_$i1$i$i$i$i = $m_compression + 11 | 0;
 if ((HEAP8[$__size_$i1$i$i$i$i >> 0] | 0) < 0) {
  $2 = HEAP32[$m_compression >> 2] | 0;
  HEAP8[$agg$tmp$i110$byval_copy >> 0] = 0;
  __ZNSt3__211char_traitsIcE6assignERcRKc($2, $agg$tmp$i110$byval_copy);
  HEAP32[$this + 16 >> 2] = 0;
  if ((HEAP8[$__size_$i1$i$i$i$i >> 0] | 0) < 0) {
   $__cap_$i$i$i$i$i = $this + 20 | 0;
   __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm(HEAP32[$m_compression >> 2] | 0, HEAP32[$__cap_$i$i$i$i$i >> 2] & 2147483647);
   HEAP32[$__cap_$i$i$i$i$i >> 2] = 0;
  }
 } else {
  HEAP8[$agg$tmp$i110$byval_copy >> 0] = 0;
  __ZNSt3__211char_traitsIcE6assignERcRKc($m_compression, $agg$tmp$i110$byval_copy);
  HEAP8[$__size_$i1$i$i$i$i >> 0] = 0;
 };
 HEAP32[$m_compression >> 2] = HEAP32[$m_compression3 >> 2];
 HEAP32[$m_compression + 4 >> 2] = HEAP32[$m_compression3 + 4 >> 2];
 HEAP32[$m_compression + 8 >> 2] = HEAP32[$m_compression3 + 8 >> 2];
 HEAP32[$m_compression3 >> 2] = 0;
 HEAP32[$m_compression3 + 4 >> 2] = 0;
 HEAP32[$m_compression3 + 8 >> 2] = 0;
 HEAP8[$agg$tmp$i110$byval_copy >> 0] = HEAP8[$agg$tmp$i110 >> 0] | 0;
 __ZNSt3__26vectorIiNS_9allocatorIiEEE13__move_assignERS3_NS_17integral_constantIbLb1EEE($this + 24 | 0, $0 + 24 | 0, $agg$tmp$i110$byval_copy);
 $m_base64Data = $this + 36 | 0;
 $m_base64Data7 = $0 + 36 | 0;
 $__size_$i1$i$i$i$i22 = $m_base64Data + 11 | 0;
 if ((HEAP8[$__size_$i1$i$i$i$i22 >> 0] | 0) < 0) {
  $6 = HEAP32[$m_base64Data >> 2] | 0;
  HEAP8[$agg$tmp$i110$byval_copy >> 0] = 0;
  __ZNSt3__211char_traitsIcE6assignERcRKc($6, $agg$tmp$i110$byval_copy);
  HEAP32[$this + 40 >> 2] = 0;
  if ((HEAP8[$__size_$i1$i$i$i$i22 >> 0] | 0) < 0) {
   $__cap_$i$i$i$i$i31 = $this + 44 | 0;
   __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm(HEAP32[$m_base64Data >> 2] | 0, HEAP32[$__cap_$i$i$i$i$i31 >> 2] & 2147483647);
   HEAP32[$__cap_$i$i$i$i$i31 >> 2] = 0;
  }
 } else {
  HEAP8[$agg$tmp$i110$byval_copy >> 0] = 0;
  __ZNSt3__211char_traitsIcE6assignERcRKc($m_base64Data, $agg$tmp$i110$byval_copy);
  HEAP8[$__size_$i1$i$i$i$i22 >> 0] = 0;
 };
 HEAP32[$m_base64Data >> 2] = HEAP32[$m_base64Data7 >> 2];
 HEAP32[$m_base64Data + 4 >> 2] = HEAP32[$m_base64Data7 + 4 >> 2];
 HEAP32[$m_base64Data + 8 >> 2] = HEAP32[$m_base64Data7 + 8 >> 2];
 HEAP32[$m_base64Data7 >> 2] = 0;
 HEAP32[$m_base64Data7 + 4 >> 2] = 0;
 HEAP32[$m_base64Data7 + 8 >> 2] = 0;
 $m_drawOrder = $this + 48 | 0;
 $m_drawOrder9 = $0 + 48 | 0;
 $__size_$i1$i$i$i$i40 = $m_drawOrder + 11 | 0;
 if ((HEAP8[$__size_$i1$i$i$i$i40 >> 0] | 0) < 0) {
  $10 = HEAP32[$m_drawOrder >> 2] | 0;
  HEAP8[$agg$tmp$i110$byval_copy >> 0] = 0;
  __ZNSt3__211char_traitsIcE6assignERcRKc($10, $agg$tmp$i110$byval_copy);
  HEAP32[$this + 52 >> 2] = 0;
  if ((HEAP8[$__size_$i1$i$i$i$i40 >> 0] | 0) < 0) {
   $__cap_$i$i$i$i$i49 = $this + 56 | 0;
   __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm(HEAP32[$m_drawOrder >> 2] | 0, HEAP32[$__cap_$i$i$i$i$i49 >> 2] & 2147483647);
   HEAP32[$__cap_$i$i$i$i$i49 >> 2] = 0;
  }
 } else {
  HEAP8[$agg$tmp$i110$byval_copy >> 0] = 0;
  __ZNSt3__211char_traitsIcE6assignERcRKc($m_drawOrder, $agg$tmp$i110$byval_copy);
  HEAP8[$__size_$i1$i$i$i$i40 >> 0] = 0;
 };
 HEAP32[$m_drawOrder >> 2] = HEAP32[$m_drawOrder9 >> 2];
 HEAP32[$m_drawOrder + 4 >> 2] = HEAP32[$m_drawOrder9 + 4 >> 2];
 HEAP32[$m_drawOrder + 8 >> 2] = HEAP32[$m_drawOrder9 + 8 >> 2];
 HEAP32[$m_drawOrder9 >> 2] = 0;
 HEAP32[$m_drawOrder9 + 4 >> 2] = 0;
 HEAP32[$m_drawOrder9 + 8 >> 2] = 0;
 $m_encoding = $this + 60 | 0;
 $m_encoding11 = $0 + 60 | 0;
 $__size_$i1$i$i$i$i58 = $m_encoding + 11 | 0;
 if ((HEAP8[$__size_$i1$i$i$i$i58 >> 0] | 0) < 0) {
  $14 = HEAP32[$m_encoding >> 2] | 0;
  HEAP8[$agg$tmp$i110$byval_copy >> 0] = 0;
  __ZNSt3__211char_traitsIcE6assignERcRKc($14, $agg$tmp$i110$byval_copy);
  HEAP32[$this + 64 >> 2] = 0;
  if ((HEAP8[$__size_$i1$i$i$i$i58 >> 0] | 0) < 0) {
   $__cap_$i$i$i$i$i67 = $this + 68 | 0;
   __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm(HEAP32[$m_encoding >> 2] | 0, HEAP32[$__cap_$i$i$i$i$i67 >> 2] & 2147483647);
   HEAP32[$__cap_$i$i$i$i$i67 >> 2] = 0;
  }
 } else {
  HEAP8[$agg$tmp$i110$byval_copy >> 0] = 0;
  __ZNSt3__211char_traitsIcE6assignERcRKc($m_encoding, $agg$tmp$i110$byval_copy);
  HEAP8[$__size_$i1$i$i$i$i58 >> 0] = 0;
 };
 HEAP32[$m_encoding >> 2] = HEAP32[$m_encoding11 >> 2];
 HEAP32[$m_encoding + 4 >> 2] = HEAP32[$m_encoding11 + 4 >> 2];
 HEAP32[$m_encoding + 8 >> 2] = HEAP32[$m_encoding11 + 8 >> 2];
 HEAP32[$m_encoding11 >> 2] = 0;
 HEAP32[$m_encoding11 + 4 >> 2] = 0;
 HEAP32[$m_encoding11 + 8 >> 2] = 0;
 HEAP32[$this + 72 >> 2] = HEAP32[$0 + 72 >> 2];
 $m_image = $this + 76 | 0;
 $m_image14 = $0 + 76 | 0;
 $__size_$i1$i$i$i$i76 = $m_image + 11 | 0;
 if ((HEAP8[$__size_$i1$i$i$i$i76 >> 0] | 0) < 0) {
  $19 = HEAP32[$m_image >> 2] | 0;
  HEAP8[$agg$tmp$i110$byval_copy >> 0] = 0;
  __ZNSt3__211char_traitsIcE6assignERcRKc($19, $agg$tmp$i110$byval_copy);
  HEAP32[$this + 80 >> 2] = 0;
  if ((HEAP8[$__size_$i1$i$i$i$i76 >> 0] | 0) < 0) {
   $__cap_$i$i$i$i$i85 = $this + 84 | 0;
   __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm(HEAP32[$m_image >> 2] | 0, HEAP32[$__cap_$i$i$i$i$i85 >> 2] & 2147483647);
   HEAP32[$__cap_$i$i$i$i$i85 >> 2] = 0;
  }
 } else {
  HEAP8[$agg$tmp$i110$byval_copy >> 0] = 0;
  __ZNSt3__211char_traitsIcE6assignERcRKc($m_image, $agg$tmp$i110$byval_copy);
  HEAP8[$__size_$i1$i$i$i$i76 >> 0] = 0;
 };
 HEAP32[$m_image >> 2] = HEAP32[$m_image14 >> 2];
 HEAP32[$m_image + 4 >> 2] = HEAP32[$m_image14 + 4 >> 2];
 HEAP32[$m_image + 8 >> 2] = HEAP32[$m_image14 + 8 >> 2];
 HEAP32[$m_image14 >> 2] = 0;
 HEAP32[$m_image14 + 4 >> 2] = 0;
 HEAP32[$m_image14 + 8 >> 2] = 0;
 HEAP8[$agg$tmp$i110$byval_copy >> 0] = HEAP8[$agg$tmp$i110 >> 0] | 0;
 __ZNSt3__26vectorIN4tson5LayerENS_9allocatorIS2_EEE13__move_assignERS5_NS_17integral_constantIbLb1EEE($this + 88 | 0, $0 + 88 | 0, $agg$tmp$i110$byval_copy);
 $m_name = $this + 100 | 0;
 $m_name18 = $0 + 100 | 0;
 $__size_$i1$i$i$i$i95 = $m_name + 11 | 0;
 if ((HEAP8[$__size_$i1$i$i$i$i95 >> 0] | 0) < 0) {
  $23 = HEAP32[$m_name >> 2] | 0;
  HEAP8[$agg$tmp$i110$byval_copy >> 0] = 0;
  __ZNSt3__211char_traitsIcE6assignERcRKc($23, $agg$tmp$i110$byval_copy);
  HEAP32[$this + 104 >> 2] = 0;
  if ((HEAP8[$__size_$i1$i$i$i$i95 >> 0] | 0) < 0) {
   $__cap_$i$i$i$i$i104 = $this + 108 | 0;
   __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm(HEAP32[$m_name >> 2] | 0, HEAP32[$__cap_$i$i$i$i$i104 >> 2] & 2147483647);
   HEAP32[$__cap_$i$i$i$i$i104 >> 2] = 0;
  }
 } else {
  HEAP8[$agg$tmp$i110$byval_copy >> 0] = 0;
  __ZNSt3__211char_traitsIcE6assignERcRKc($m_name, $agg$tmp$i110$byval_copy);
  HEAP8[$__size_$i1$i$i$i$i95 >> 0] = 0;
 };
 HEAP32[$m_name >> 2] = HEAP32[$m_name18 >> 2];
 HEAP32[$m_name + 4 >> 2] = HEAP32[$m_name18 + 4 >> 2];
 HEAP32[$m_name + 8 >> 2] = HEAP32[$m_name18 + 8 >> 2];
 HEAP32[$m_name18 >> 2] = 0;
 HEAP32[$m_name18 + 4 >> 2] = 0;
 HEAP32[$m_name18 + 8 >> 2] = 0;
 HEAP8[$agg$tmp$i110$byval_copy >> 0] = HEAP8[$agg$tmp$i110 >> 0] | 0;
 __ZNSt3__26vectorIN4tson6ObjectENS_9allocatorIS2_EEE13__move_assignERS5_NS_17integral_constantIbLb1EEE($this + 112 | 0, $0 + 112 | 0, $agg$tmp$i110$byval_copy);
 $m_offset = $this + 124 | 0;
 $m_offset22 = $0 + 124 | 0;
 HEAP32[$m_offset >> 2] = HEAP32[$m_offset22 >> 2];
 HEAP32[$m_offset + 4 >> 2] = HEAP32[$m_offset22 + 4 >> 2];
 HEAP32[$m_offset + 8 >> 2] = HEAP32[$m_offset22 + 8 >> 2];
 __ZN4tson18PropertyCollectionaSEOS0_($this + 136 | 0, $0 + 136 | 0) | 0;
 $m_size = $this + 160 | 0;
 $m_size25 = $0 + 160 | 0;
 HEAP32[$m_size >> 2] = HEAP32[$m_size25 >> 2];
 HEAP32[$m_size + 4 >> 2] = HEAP32[$m_size25 + 4 >> 2];
 HEAP32[$m_size + 8 >> 2] = HEAP32[$m_size25 + 8 >> 2];
 $m_typeStr = $this + 172 | 0;
 $m_typeStr26 = $0 + 172 | 0;
 $__size_$i1$i$i$i$i114 = $m_typeStr + 11 | 0;
 if ((HEAP8[$__size_$i1$i$i$i$i114 >> 0] | 0) < 0) {
  $27 = HEAP32[$m_typeStr >> 2] | 0;
  HEAP8[$agg$tmp$i110$byval_copy >> 0] = 0;
  __ZNSt3__211char_traitsIcE6assignERcRKc($27, $agg$tmp$i110$byval_copy);
  HEAP32[$this + 176 >> 2] = 0;
  if ((HEAP8[$__size_$i1$i$i$i$i114 >> 0] | 0) < 0) {
   $__cap_$i$i$i$i$i123 = $this + 180 | 0;
   __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm(HEAP32[$m_typeStr >> 2] | 0, HEAP32[$__cap_$i$i$i$i$i123 >> 2] & 2147483647);
   HEAP32[$__cap_$i$i$i$i$i123 >> 2] = 0;
  }
 } else {
  HEAP8[$agg$tmp$i110$byval_copy >> 0] = 0;
  __ZNSt3__211char_traitsIcE6assignERcRKc($m_typeStr, $agg$tmp$i110$byval_copy);
  HEAP8[$__size_$i1$i$i$i$i114 >> 0] = 0;
 };
 HEAP32[$m_typeStr >> 2] = HEAP32[$m_typeStr26 >> 2];
 HEAP32[$m_typeStr + 4 >> 2] = HEAP32[$m_typeStr26 + 4 >> 2];
 HEAP32[$m_typeStr + 8 >> 2] = HEAP32[$m_typeStr26 + 8 >> 2];
 HEAP32[$m_typeStr26 >> 2] = 0;
 HEAP32[$m_typeStr26 + 4 >> 2] = 0;
 HEAP32[$m_typeStr26 + 8 >> 2] = 0;
 $m_type = $this + 184 | 0;
 $m_type28 = $0 + 184 | 0;
 HEAP32[$m_type >> 2] = HEAP32[$m_type28 >> 2];
 HEAP32[$m_type + 4 >> 2] = HEAP32[$m_type28 + 4 >> 2];
 HEAP32[$m_type + 8 >> 2] = HEAP32[$m_type28 + 8 >> 2];
 __ZNSt3__26__treeINS_12__value_typeIiPN4tson4TileEEENS_19__map_value_compareIiS5_NS_4lessIiEELb1EEENS_9allocatorIS5_EEEaSEOSC_($this + 196 | 0, $0 + 196 | 0) | 0;
 __ZNSt3__26__treeINS_12__value_typeINS_5tupleIJiiEEEPN4tson4TileEEENS_19__map_value_compareIS3_S7_NS_4lessIS3_EELb1EEENS_9allocatorIS7_EEEaSEOSE_($this + 208 | 0, $0 + 208 | 0) | 0;
 STACKTOP = sp;
 return $this | 0;
}

function _mbsrtowcs($ws, $src, $wn, $st) {
 $ws = $ws | 0;
 $src = $src | 0;
 $wn = $wn | 0;
 $st = $st | 0;
 var $$pre = 0, $$pre135 = 0, $0 = 0, $1 = 0, $11 = 0, $14 = 0, $21 = 0, $28 = 0, $4 = 0, $5 = 0, $7 = 0, $8 = 0, $9 = 0, $c$2 = 0, $c$4 = 0, $c$5 = 0, $c$6 = 0, $conv132$pre$phi138Z2D = 0, $conv132$pre$phiZ2D = 0, $conv152 = 0, $conv38 = 0, $conv99 = 0, $dec = 0, $incdec$ptr = 0, $incdec$ptr126 = 0, $incdec$ptr128 = 0, $incdec$ptr137 = 0, $incdec$ptr163 = 0, $incdec$ptr165 = 0, $incdec$ptr180 = 0, $incdec$ptr67 = 0, $incdec$ptr78 = 0, $or168 = 0, $or183 = 0, $retval$0 = 0, $s$0$lcssa = 0, $s$0102 = 0, $s$1 = 0, $s$1$ph = 0, $s$10 = 0, $s$11147 = 0, $s$11148 = 0, $s$119194 = 0, $s$2123 = 0, $s$3 = 0, $s$4 = 0, $s$5 = 0, $s$6$lcssa = 0, $s$6$ph = 0, $s$6116 = 0, $s$7106 = 0, $s$8 = 0, $s$8$ph = 0, $s$8141 = 0, $s$9 = 0, $s$9$sink = 0, $sub100 = 0, $sub129 = 0, $sub133$pre$phiZ2D = 0, $sub143 = 0, $sub173 = 0, $sub188 = 0, $sub47 = 0, $tobool7 = 0, $wn$addr$0100 = 0, $wn$addr$1 = 0, $wn$addr$1$ph = 0, $wn$addr$2122 = 0, $wn$addr$3 = 0, $wn$addr$4 = 0, $wn$addr$5$ph = 0, $wn$addr$5114 = 0, $wn$addr$6104 = 0, $wn$addr$7 = 0, $wn$addr$7$ph = 0, $wn$addr$7139 = 0, $wn$addr$8 = 0, $wn$addr$9 = 0, $wn$addr$9144 = 0, $ws$addr$0101 = 0, $ws$addr$1$ph = 0, $ws$addr$1115 = 0, $ws$addr$2105 = 0, $ws$addr$3 = 0, $ws$addr$3$ph = 0, $ws$addr$3140 = 0, $ws$addr$4 = 0, $ws$addr$5 = 0, $ws$addr$5145 = 0, $ws$addr$5146 = 0, label = 0;
 label = 0;
 $0 = HEAP32[$src >> 2] | 0;
 if (!$st) label = 5; else {
  $1 = HEAP32[$st >> 2] | 0;
  if (!$1) label = 5; else if (!$ws) {
   $c$2 = $1;
   $s$4 = $0;
   $wn$addr$4 = $wn;
   label = 26;
  } else {
   HEAP32[$st >> 2] = 0;
   $c$4 = $1;
   $s$9 = $0;
   $wn$addr$8 = $wn;
   $ws$addr$4 = $ws;
   label = 48;
  }
 }
 L5 : do if ((label | 0) == 5) {
  $tobool7 = ($ws | 0) != 0;
  if (HEAP32[HEAP32[(___pthread_self_417() | 0) + 188 >> 2] >> 2] | 0) if ($tobool7) {
   $s$6$ph = $0;
   $wn$addr$5$ph = $wn;
   $ws$addr$1$ph = $ws;
   label = 33;
   break;
  } else {
   $s$1$ph = $0;
   $wn$addr$1$ph = $wn;
   label = 15;
   break;
  }
  if (!$tobool7) {
   $retval$0 = _strlen($0) | 0;
   label = 63;
   break;
  }
  L13 : do if (!$wn) $s$0$lcssa = $0; else {
   $s$0102 = $0;
   $wn$addr$0100 = $wn;
   $ws$addr$0101 = $ws;
   while (1) {
    $4 = HEAP8[$s$0102 >> 0] | 0;
    if (!($4 << 24 >> 24)) break;
    $incdec$ptr = $s$0102 + 1 | 0;
    HEAP32[$ws$addr$0101 >> 2] = $4 << 24 >> 24 & 57343;
    $dec = $wn$addr$0100 + -1 | 0;
    if (!$dec) {
     $s$0$lcssa = $incdec$ptr;
     break L13;
    } else {
     $s$0102 = $incdec$ptr;
     $wn$addr$0100 = $dec;
     $ws$addr$0101 = $ws$addr$0101 + 4 | 0;
    }
   }
   HEAP32[$ws$addr$0101 >> 2] = 0;
   HEAP32[$src >> 2] = 0;
   $retval$0 = $wn - $wn$addr$0100 | 0;
   label = 63;
   break L5;
  } while (0);
  HEAP32[$src >> 2] = $s$0$lcssa;
  $retval$0 = $wn;
  label = 63;
 } while (0);
 L20 : while (1) {
  L21 : do if ((label | 0) == 15) {
   label = 0;
   $s$1 = $s$1$ph;
   $wn$addr$1 = $wn$addr$1$ph;
   while (1) {
    $5 = HEAP8[$s$1 >> 0] | 0;
    if ((($5 & 255) + -1 | 0) >>> 0 < 127) if (!($s$1 & 3)) {
     $7 = HEAP32[$s$1 >> 2] | 0;
     $8 = $7 & 255;
     if (!(($7 + -16843009 | $7) & -2139062144)) {
      $s$2123 = $s$1;
      $wn$addr$2122 = $wn$addr$1;
      do {
       $s$2123 = $s$2123 + 4 | 0;
       $wn$addr$2122 = $wn$addr$2122 + -4 | 0;
       $9 = HEAP32[$s$2123 >> 2] | 0;
      } while (!(($9 + -16843009 | $9) & -2139062144 | 0));
      $11 = $9 & 255;
      $s$3 = $s$2123;
      $wn$addr$3 = $wn$addr$2122;
     } else {
      $11 = $8;
      $s$3 = $s$1;
      $wn$addr$3 = $wn$addr$1;
     }
    } else {
     $11 = $5;
     $s$3 = $s$1;
     $wn$addr$3 = $wn$addr$1;
    } else {
     $11 = $5;
     $s$3 = $s$1;
     $wn$addr$3 = $wn$addr$1;
    }
    $conv38 = $11 & 255;
    if (($conv38 + -1 | 0) >>> 0 >= 127) break;
    $s$1 = $s$3 + 1 | 0;
    $wn$addr$1 = $wn$addr$3 + -1 | 0;
   }
   $sub47 = $conv38 + -194 | 0;
   if ($sub47 >>> 0 > 50) {
    $s$11147 = $s$3;
    $wn$addr$9144 = $wn$addr$3;
    $ws$addr$5145 = $ws;
    label = 57;
   } else {
    $c$2 = HEAP32[7824 + ($sub47 << 2) >> 2] | 0;
    $s$4 = $s$3 + 1 | 0;
    $wn$addr$4 = $wn$addr$3;
    label = 26;
    continue L20;
   }
  } else if ((label | 0) == 26) {
   label = 0;
   $14 = (HEAPU8[$s$4 >> 0] | 0) >>> 3;
   if (($14 + -16 | $14 + ($c$2 >> 26)) >>> 0 > 7) {
    $c$6 = $c$2;
    $s$9$sink = $s$4;
    $wn$addr$9 = $wn$addr$4;
    $ws$addr$5 = $ws;
    label = 56;
   } else {
    $incdec$ptr67 = $s$4 + 1 | 0;
    if (!($c$2 & 33554432)) $s$5 = $incdec$ptr67; else {
     if ((HEAP8[$incdec$ptr67 >> 0] & -64) << 24 >> 24 != -128) {
      $c$6 = $c$2;
      $s$9$sink = $s$4;
      $wn$addr$9 = $wn$addr$4;
      $ws$addr$5 = $ws;
      label = 56;
      break;
     }
     $incdec$ptr78 = $s$4 + 2 | 0;
     if (!($c$2 & 524288)) $s$5 = $incdec$ptr78; else {
      if ((HEAP8[$incdec$ptr78 >> 0] & -64) << 24 >> 24 != -128) {
       $c$6 = $c$2;
       $s$9$sink = $s$4;
       $wn$addr$9 = $wn$addr$4;
       $ws$addr$5 = $ws;
       label = 56;
       break;
      }
      $s$5 = $s$4 + 3 | 0;
     }
    }
    $s$1$ph = $s$5;
    $wn$addr$1$ph = $wn$addr$4 + -1 | 0;
    label = 15;
    continue L20;
   }
  } else if ((label | 0) == 33) {
   label = 0;
   L23 : do if (!$wn$addr$5$ph) $s$6$lcssa = $s$6$ph; else {
    $s$6116 = $s$6$ph;
    $wn$addr$5114 = $wn$addr$5$ph;
    $ws$addr$1115 = $ws$addr$1$ph;
    while (1) {
     $conv99 = HEAPU8[$s$6116 >> 0] | 0;
     $sub100 = $conv99 + -1 | 0;
     if ($sub100 >>> 0 < 127) if (($s$6116 & 3 | 0) == 0 & $wn$addr$5114 >>> 0 > 4) {
      $s$7106 = $s$6116;
      $wn$addr$6104 = $wn$addr$5114;
      $ws$addr$2105 = $ws$addr$1115;
      while (1) {
       $21 = HEAP32[$s$7106 >> 2] | 0;
       if (($21 + -16843009 | $21) & -2139062144 | 0) {
        label = 42;
        break;
       }
       HEAP32[$ws$addr$2105 >> 2] = $21 & 255;
       HEAP32[$ws$addr$2105 + 4 >> 2] = HEAPU8[$s$7106 + 1 >> 0];
       HEAP32[$ws$addr$2105 + 8 >> 2] = HEAPU8[$s$7106 + 2 >> 0];
       $incdec$ptr126 = $s$7106 + 4 | 0;
       $incdec$ptr128 = $ws$addr$2105 + 16 | 0;
       HEAP32[$ws$addr$2105 + 12 >> 2] = HEAPU8[$s$7106 + 3 >> 0];
       $sub129 = $wn$addr$6104 + -4 | 0;
       if ($sub129 >>> 0 > 4) {
        $s$7106 = $incdec$ptr126;
        $wn$addr$6104 = $sub129;
        $ws$addr$2105 = $incdec$ptr128;
       } else {
        label = 41;
        break;
       }
      }
      if ((label | 0) == 41) {
       label = 0;
       $$pre = HEAP8[$incdec$ptr126 >> 0] | 0;
       $s$8$ph = $incdec$ptr126;
       $wn$addr$7$ph = $sub129;
       $ws$addr$3$ph = $incdec$ptr128;
      } else if ((label | 0) == 42) {
       label = 0;
       $$pre = $21 & 255;
       $s$8$ph = $s$7106;
       $wn$addr$7$ph = $wn$addr$6104;
       $ws$addr$3$ph = $ws$addr$2105;
      }
      $$pre135 = $$pre & 255;
      $conv132$pre$phiZ2D = $$pre135;
      $s$8 = $s$8$ph;
      $sub133$pre$phiZ2D = $$pre135 + -1 | 0;
      $wn$addr$7 = $wn$addr$7$ph;
      $ws$addr$3 = $ws$addr$3$ph;
      label = 44;
     } else {
      $conv132$pre$phi138Z2D = $conv99;
      $s$8141 = $s$6116;
      $wn$addr$7139 = $wn$addr$5114;
      $ws$addr$3140 = $ws$addr$1115;
     } else {
      $conv132$pre$phiZ2D = $conv99;
      $s$8 = $s$6116;
      $sub133$pre$phiZ2D = $sub100;
      $wn$addr$7 = $wn$addr$5114;
      $ws$addr$3 = $ws$addr$1115;
      label = 44;
     }
     if ((label | 0) == 44) {
      label = 0;
      if ($sub133$pre$phiZ2D >>> 0 < 127) {
       $conv132$pre$phi138Z2D = $conv132$pre$phiZ2D;
       $s$8141 = $s$8;
       $wn$addr$7139 = $wn$addr$7;
       $ws$addr$3140 = $ws$addr$3;
      } else break;
     }
     $incdec$ptr137 = $s$8141 + 1 | 0;
     HEAP32[$ws$addr$3140 >> 2] = $conv132$pre$phi138Z2D;
     $wn$addr$5114 = $wn$addr$7139 + -1 | 0;
     if (!$wn$addr$5114) {
      $s$6$lcssa = $incdec$ptr137;
      break L23;
     } else {
      $s$6116 = $incdec$ptr137;
      $ws$addr$1115 = $ws$addr$3140 + 4 | 0;
     }
    }
    $sub143 = $conv132$pre$phiZ2D + -194 | 0;
    if ($sub143 >>> 0 > 50) {
     $s$11147 = $s$8;
     $wn$addr$9144 = $wn$addr$7;
     $ws$addr$5145 = $ws$addr$3;
     label = 57;
     break L21;
    }
    $c$4 = HEAP32[7824 + ($sub143 << 2) >> 2] | 0;
    $s$9 = $s$8 + 1 | 0;
    $wn$addr$8 = $wn$addr$7;
    $ws$addr$4 = $ws$addr$3;
    label = 48;
    continue L20;
   } while (0);
   HEAP32[$src >> 2] = $s$6$lcssa;
   $retval$0 = $wn;
   label = 63;
   continue L20;
  } else if ((label | 0) == 48) {
   label = 0;
   $conv152 = HEAPU8[$s$9 >> 0] | 0;
   $28 = $conv152 >>> 3;
   if (($28 + -16 | $28 + ($c$4 >> 26)) >>> 0 > 7) {
    $c$6 = $c$4;
    $s$9$sink = $s$9;
    $wn$addr$9 = $wn$addr$8;
    $ws$addr$5 = $ws$addr$4;
    label = 56;
   } else {
    $incdec$ptr165 = $s$9 + 1 | 0;
    $or168 = $conv152 + -128 | $c$4 << 6;
    do if (($or168 | 0) < 0) {
     $sub173 = (HEAPU8[$incdec$ptr165 >> 0] | 0) + -128 | 0;
     if ($sub173 >>> 0 <= 63) {
      $incdec$ptr180 = $s$9 + 2 | 0;
      $or183 = $sub173 | $or168 << 6;
      if (($or183 | 0) >= 0) {
       $c$5 = $or183;
       $s$10 = $incdec$ptr180;
       break;
      }
      $sub188 = (HEAPU8[$incdec$ptr180 >> 0] | 0) + -128 | 0;
      if ($sub188 >>> 0 <= 63) {
       $c$5 = $sub188 | $or183 << 6;
       $s$10 = $s$9 + 3 | 0;
       break;
      }
     }
     HEAP32[(___errno_location() | 0) >> 2] = 25;
     $s$119194 = $s$9 + -1 | 0;
     break L21;
    } else {
     $c$5 = $or168;
     $s$10 = $incdec$ptr165;
    } while (0);
    HEAP32[$ws$addr$4 >> 2] = $c$5;
    $s$6$ph = $s$10;
    $wn$addr$5$ph = $wn$addr$8 + -1 | 0;
    $ws$addr$1$ph = $ws$addr$4 + 4 | 0;
    label = 33;
    continue L20;
   }
  } else if ((label | 0) == 63) {
   label = 0;
   return $retval$0 | 0;
  } while (0);
  if ((label | 0) == 56) {
   label = 0;
   $incdec$ptr163 = $s$9$sink + -1 | 0;
   if (!$c$6) {
    $s$11147 = $incdec$ptr163;
    $wn$addr$9144 = $wn$addr$9;
    $ws$addr$5145 = $ws$addr$5;
    label = 57;
   } else {
    $s$11148 = $incdec$ptr163;
    $ws$addr$5146 = $ws$addr$5;
    label = 61;
   }
  }
  if ((label | 0) == 57) {
   label = 0;
   if (!(HEAP8[$s$11147 >> 0] | 0)) {
    if ($ws$addr$5145 | 0) {
     HEAP32[$ws$addr$5145 >> 2] = 0;
     HEAP32[$src >> 2] = 0;
    }
    $retval$0 = $wn - $wn$addr$9144 | 0;
    label = 63;
    continue;
   } else {
    $s$11148 = $s$11147;
    $ws$addr$5146 = $ws$addr$5145;
    label = 61;
   }
  }
  if ((label | 0) == 61) {
   label = 0;
   HEAP32[(___errno_location() | 0) >> 2] = 25;
   if (!$ws$addr$5146) {
    $retval$0 = -1;
    label = 63;
    continue;
   } else $s$119194 = $s$11148;
  }
  HEAP32[$src >> 2] = $s$119194;
  $retval$0 = -1;
  label = 63;
 }
 return 0;
}

function _MatrixMultiply($agg$result, $left, $right) {
 $agg$result = $agg$result | 0;
 $left = $left | 0;
 $right = $right | 0;
 var $0 = f0, $10 = f0, $100 = f0, $102 = f0, $104 = f0, $106 = f0, $108 = f0, $110 = f0, $112 = f0, $114 = f0, $116 = f0, $118 = f0, $12 = f0, $120 = f0, $122 = f0, $124 = f0, $126 = f0, $14 = f0, $16 = f0, $18 = f0, $2 = f0, $20 = f0, $22 = f0, $24 = f0, $26 = f0, $28 = f0, $30 = f0, $32 = f0, $34 = f0, $36 = f0, $38 = f0, $4 = f0, $40 = f0, $42 = f0, $44 = f0, $46 = f0, $48 = f0, $50 = f0, $52 = f0, $54 = f0, $56 = f0, $58 = f0, $6 = f0, $60 = f0, $62 = f0, $64 = f0, $66 = f0, $68 = f0, $70 = f0, $72 = f0, $74 = f0, $76 = f0, $78 = f0, $8 = f0, $80 = f0, $82 = f0, $84 = f0, $86 = f0, $88 = f0, $90 = f0, $92 = f0, $94 = f0, $96 = f0, $98 = f0, $add = f0, $add101 = f0, $add105 = f0, $add117 = f0, $add121 = f0, $add13 = f0, $add133 = f0, $add137 = f0, $add149 = f0, $add153 = f0, $add16 = f0, $add165 = f0, $add169 = f0, $add181 = f0, $add185 = f0, $add197 = f0, $add201 = f0, $add213 = f0, $add217 = f0, $add229 = f0, $add233 = f0, $add26 = f0, $add29 = f0, $add39 = f0, $add4 = f0, $add42 = f0, $add53 = f0, $add57 = f0, $add69 = f0, $add73 = f0, $add85 = f0, $add89 = f0, $mul = f0, $mul10 = f0, $mul113 = f0, $mul129 = f0, $mul145 = f0, $mul161 = f0, $mul177 = f0, $mul193 = f0, $mul209 = f0, $mul225 = f0, $mul23 = f0, $mul36 = f0, $mul49 = f0, $mul65 = f0, $mul81 = f0, $mul97 = f0, $result = 0, dest = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64);
 $result = sp;
 dest = $result;
 stop = dest + 64 | 0;
 do {
  HEAP32[dest >> 2] = 0;
  dest = dest + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 $0 = Math_fround(HEAPF32[$left >> 2]);
 $mul = Math_fround($0 * Math_fround(HEAPF32[$right >> 2]));
 $2 = Math_fround(HEAPF32[$left + 16 >> 2]);
 $add = Math_fround($mul + Math_fround($2 * Math_fround(HEAPF32[$right + 4 >> 2])));
 $4 = Math_fround(HEAPF32[$left + 32 >> 2]);
 $add4 = Math_fround($add + Math_fround($4 * Math_fround(HEAPF32[$right + 8 >> 2])));
 $6 = Math_fround(HEAPF32[$left + 48 >> 2]);
 HEAPF32[$result >> 2] = Math_fround($add4 + Math_fround($6 * Math_fround(HEAPF32[$right + 12 >> 2])));
 $8 = Math_fround(HEAPF32[$left >> 2]);
 $mul10 = Math_fround($8 * Math_fround(HEAPF32[$right + 16 >> 2]));
 $10 = Math_fround(HEAPF32[$left + 16 >> 2]);
 $add13 = Math_fround($mul10 + Math_fround($10 * Math_fround(HEAPF32[$right + 20 >> 2])));
 $12 = Math_fround(HEAPF32[$left + 32 >> 2]);
 $add16 = Math_fround($add13 + Math_fround($12 * Math_fround(HEAPF32[$right + 24 >> 2])));
 $14 = Math_fround(HEAPF32[$left + 48 >> 2]);
 HEAPF32[$result + 16 >> 2] = Math_fround($add16 + Math_fround($14 * Math_fround(HEAPF32[$right + 28 >> 2])));
 $16 = Math_fround(HEAPF32[$left >> 2]);
 $mul23 = Math_fround($16 * Math_fround(HEAPF32[$right + 32 >> 2]));
 $18 = Math_fround(HEAPF32[$left + 16 >> 2]);
 $add26 = Math_fround($mul23 + Math_fround($18 * Math_fround(HEAPF32[$right + 36 >> 2])));
 $20 = Math_fround(HEAPF32[$left + 32 >> 2]);
 $add29 = Math_fround($add26 + Math_fround($20 * Math_fround(HEAPF32[$right + 40 >> 2])));
 $22 = Math_fround(HEAPF32[$left + 48 >> 2]);
 HEAPF32[$result + 32 >> 2] = Math_fround($add29 + Math_fround($22 * Math_fround(HEAPF32[$right + 44 >> 2])));
 $24 = Math_fround(HEAPF32[$left >> 2]);
 $mul36 = Math_fround($24 * Math_fround(HEAPF32[$right + 48 >> 2]));
 $26 = Math_fround(HEAPF32[$left + 16 >> 2]);
 $add39 = Math_fround($mul36 + Math_fround($26 * Math_fround(HEAPF32[$right + 52 >> 2])));
 $28 = Math_fround(HEAPF32[$left + 32 >> 2]);
 $add42 = Math_fround($add39 + Math_fround($28 * Math_fround(HEAPF32[$right + 56 >> 2])));
 $30 = Math_fround(HEAPF32[$left + 48 >> 2]);
 HEAPF32[$result + 48 >> 2] = Math_fround($add42 + Math_fround($30 * Math_fround(HEAPF32[$right + 60 >> 2])));
 $32 = Math_fround(HEAPF32[$left + 4 >> 2]);
 $mul49 = Math_fround($32 * Math_fround(HEAPF32[$right >> 2]));
 $34 = Math_fround(HEAPF32[$left + 20 >> 2]);
 $add53 = Math_fround($mul49 + Math_fround($34 * Math_fround(HEAPF32[$right + 4 >> 2])));
 $36 = Math_fround(HEAPF32[$left + 36 >> 2]);
 $add57 = Math_fround($add53 + Math_fround($36 * Math_fround(HEAPF32[$right + 8 >> 2])));
 $38 = Math_fround(HEAPF32[$left + 52 >> 2]);
 HEAPF32[$result + 4 >> 2] = Math_fround($add57 + Math_fround($38 * Math_fround(HEAPF32[$right + 12 >> 2])));
 $40 = Math_fround(HEAPF32[$left + 4 >> 2]);
 $mul65 = Math_fround($40 * Math_fround(HEAPF32[$right + 16 >> 2]));
 $42 = Math_fround(HEAPF32[$left + 20 >> 2]);
 $add69 = Math_fround($mul65 + Math_fround($42 * Math_fround(HEAPF32[$right + 20 >> 2])));
 $44 = Math_fround(HEAPF32[$left + 36 >> 2]);
 $add73 = Math_fround($add69 + Math_fround($44 * Math_fround(HEAPF32[$right + 24 >> 2])));
 $46 = Math_fround(HEAPF32[$left + 52 >> 2]);
 HEAPF32[$result + 20 >> 2] = Math_fround($add73 + Math_fround($46 * Math_fround(HEAPF32[$right + 28 >> 2])));
 $48 = Math_fround(HEAPF32[$left + 4 >> 2]);
 $mul81 = Math_fround($48 * Math_fround(HEAPF32[$right + 32 >> 2]));
 $50 = Math_fround(HEAPF32[$left + 20 >> 2]);
 $add85 = Math_fround($mul81 + Math_fround($50 * Math_fround(HEAPF32[$right + 36 >> 2])));
 $52 = Math_fround(HEAPF32[$left + 36 >> 2]);
 $add89 = Math_fround($add85 + Math_fround($52 * Math_fround(HEAPF32[$right + 40 >> 2])));
 $54 = Math_fround(HEAPF32[$left + 52 >> 2]);
 HEAPF32[$result + 36 >> 2] = Math_fround($add89 + Math_fround($54 * Math_fround(HEAPF32[$right + 44 >> 2])));
 $56 = Math_fround(HEAPF32[$left + 4 >> 2]);
 $mul97 = Math_fround($56 * Math_fround(HEAPF32[$right + 48 >> 2]));
 $58 = Math_fround(HEAPF32[$left + 20 >> 2]);
 $add101 = Math_fround($mul97 + Math_fround($58 * Math_fround(HEAPF32[$right + 52 >> 2])));
 $60 = Math_fround(HEAPF32[$left + 36 >> 2]);
 $add105 = Math_fround($add101 + Math_fround($60 * Math_fround(HEAPF32[$right + 56 >> 2])));
 $62 = Math_fround(HEAPF32[$left + 52 >> 2]);
 HEAPF32[$result + 52 >> 2] = Math_fround($add105 + Math_fround($62 * Math_fround(HEAPF32[$right + 60 >> 2])));
 $64 = Math_fround(HEAPF32[$left + 8 >> 2]);
 $mul113 = Math_fround($64 * Math_fround(HEAPF32[$right >> 2]));
 $66 = Math_fround(HEAPF32[$left + 24 >> 2]);
 $add117 = Math_fround($mul113 + Math_fround($66 * Math_fround(HEAPF32[$right + 4 >> 2])));
 $68 = Math_fround(HEAPF32[$left + 40 >> 2]);
 $add121 = Math_fround($add117 + Math_fround($68 * Math_fround(HEAPF32[$right + 8 >> 2])));
 $70 = Math_fround(HEAPF32[$left + 56 >> 2]);
 HEAPF32[$result + 8 >> 2] = Math_fround($add121 + Math_fround($70 * Math_fround(HEAPF32[$right + 12 >> 2])));
 $72 = Math_fround(HEAPF32[$left + 8 >> 2]);
 $mul129 = Math_fround($72 * Math_fround(HEAPF32[$right + 16 >> 2]));
 $74 = Math_fround(HEAPF32[$left + 24 >> 2]);
 $add133 = Math_fround($mul129 + Math_fround($74 * Math_fround(HEAPF32[$right + 20 >> 2])));
 $76 = Math_fround(HEAPF32[$left + 40 >> 2]);
 $add137 = Math_fround($add133 + Math_fround($76 * Math_fround(HEAPF32[$right + 24 >> 2])));
 $78 = Math_fround(HEAPF32[$left + 56 >> 2]);
 HEAPF32[$result + 24 >> 2] = Math_fround($add137 + Math_fround($78 * Math_fround(HEAPF32[$right + 28 >> 2])));
 $80 = Math_fround(HEAPF32[$left + 8 >> 2]);
 $mul145 = Math_fround($80 * Math_fround(HEAPF32[$right + 32 >> 2]));
 $82 = Math_fround(HEAPF32[$left + 24 >> 2]);
 $add149 = Math_fround($mul145 + Math_fround($82 * Math_fround(HEAPF32[$right + 36 >> 2])));
 $84 = Math_fround(HEAPF32[$left + 40 >> 2]);
 $add153 = Math_fround($add149 + Math_fround($84 * Math_fround(HEAPF32[$right + 40 >> 2])));
 $86 = Math_fround(HEAPF32[$left + 56 >> 2]);
 HEAPF32[$result + 40 >> 2] = Math_fround($add153 + Math_fround($86 * Math_fround(HEAPF32[$right + 44 >> 2])));
 $88 = Math_fround(HEAPF32[$left + 8 >> 2]);
 $mul161 = Math_fround($88 * Math_fround(HEAPF32[$right + 48 >> 2]));
 $90 = Math_fround(HEAPF32[$left + 24 >> 2]);
 $add165 = Math_fround($mul161 + Math_fround($90 * Math_fround(HEAPF32[$right + 52 >> 2])));
 $92 = Math_fround(HEAPF32[$left + 40 >> 2]);
 $add169 = Math_fround($add165 + Math_fround($92 * Math_fround(HEAPF32[$right + 56 >> 2])));
 $94 = Math_fround(HEAPF32[$left + 56 >> 2]);
 HEAPF32[$result + 56 >> 2] = Math_fround($add169 + Math_fround($94 * Math_fround(HEAPF32[$right + 60 >> 2])));
 $96 = Math_fround(HEAPF32[$left + 12 >> 2]);
 $mul177 = Math_fround($96 * Math_fround(HEAPF32[$right >> 2]));
 $98 = Math_fround(HEAPF32[$left + 28 >> 2]);
 $add181 = Math_fround($mul177 + Math_fround($98 * Math_fround(HEAPF32[$right + 4 >> 2])));
 $100 = Math_fround(HEAPF32[$left + 44 >> 2]);
 $add185 = Math_fround($add181 + Math_fround($100 * Math_fround(HEAPF32[$right + 8 >> 2])));
 $102 = Math_fround(HEAPF32[$left + 60 >> 2]);
 HEAPF32[$result + 12 >> 2] = Math_fround($add185 + Math_fround($102 * Math_fround(HEAPF32[$right + 12 >> 2])));
 $104 = Math_fround(HEAPF32[$left + 12 >> 2]);
 $mul193 = Math_fround($104 * Math_fround(HEAPF32[$right + 16 >> 2]));
 $106 = Math_fround(HEAPF32[$left + 28 >> 2]);
 $add197 = Math_fround($mul193 + Math_fround($106 * Math_fround(HEAPF32[$right + 20 >> 2])));
 $108 = Math_fround(HEAPF32[$left + 44 >> 2]);
 $add201 = Math_fround($add197 + Math_fround($108 * Math_fround(HEAPF32[$right + 24 >> 2])));
 $110 = Math_fround(HEAPF32[$left + 60 >> 2]);
 HEAPF32[$result + 28 >> 2] = Math_fround($add201 + Math_fround($110 * Math_fround(HEAPF32[$right + 28 >> 2])));
 $112 = Math_fround(HEAPF32[$left + 12 >> 2]);
 $mul209 = Math_fround($112 * Math_fround(HEAPF32[$right + 32 >> 2]));
 $114 = Math_fround(HEAPF32[$left + 28 >> 2]);
 $add213 = Math_fround($mul209 + Math_fround($114 * Math_fround(HEAPF32[$right + 36 >> 2])));
 $116 = Math_fround(HEAPF32[$left + 44 >> 2]);
 $add217 = Math_fround($add213 + Math_fround($116 * Math_fround(HEAPF32[$right + 40 >> 2])));
 $118 = Math_fround(HEAPF32[$left + 60 >> 2]);
 HEAPF32[$result + 44 >> 2] = Math_fround($add217 + Math_fround($118 * Math_fround(HEAPF32[$right + 44 >> 2])));
 $120 = Math_fround(HEAPF32[$left + 12 >> 2]);
 $mul225 = Math_fround($120 * Math_fround(HEAPF32[$right + 48 >> 2]));
 $122 = Math_fround(HEAPF32[$left + 28 >> 2]);
 $add229 = Math_fround($mul225 + Math_fround($122 * Math_fround(HEAPF32[$right + 52 >> 2])));
 $124 = Math_fround(HEAPF32[$left + 44 >> 2]);
 $add233 = Math_fround($add229 + Math_fround($124 * Math_fround(HEAPF32[$right + 56 >> 2])));
 $126 = Math_fround(HEAPF32[$left + 60 >> 2]);
 HEAPF32[$result + 60 >> 2] = Math_fround($add233 + Math_fround($126 * Math_fround(HEAPF32[$right + 60 >> 2])));
 dest = $agg$result;
 src = $result;
 stop = dest + 64 | 0;
 do {
  HEAP32[dest >> 2] = HEAP32[src >> 2];
  dest = dest + 4 | 0;
  src = src + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 STACKTOP = sp;
 return;
}

function _stbir__resample_vertical_downsample($stbir_info, $n) {
 $stbir_info = $stbir_info | 0;
 $n = $n | 0;
 var $109 = f0, $116 = f0, $123 = f0, $130 = f0, $145 = f0, $55 = f0, $66 = f0, $73 = f0, $84 = f0, $91 = f0, $98 = f0, $arrayidx101 = 0, $arrayidx118 = 0, $arrayidx23 = 0, $arrayidx35 = 0, $arrayidx41 = 0, $arrayidx56 = 0, $arrayidx62 = 0, $arrayidx68 = 0, $arrayidx83 = 0, $arrayidx89 = 0, $arrayidx95 = 0, $c = 0, $channels = 0, $coefficient = 0, $coefficient_group = 0, $coefficient_index = 0, $coefficient_width = 0, $contributor = 0, $horizontal_buffer = 0, $in_pixel_index = 0, $in_pixel_index109 = 0, $in_pixel_index29 = 0, $in_pixel_index50 = 0, $in_pixel_index77 = 0, $k = 0, $mul116 = f0, $mul21 = f0, $mul33 = f0, $mul39 = f0, $mul54 = f0, $mul60 = f0, $mul66 = f0, $mul81 = f0, $mul87 = f0, $mul93 = f0, $mul99 = f0, $n$addr = 0, $n0 = 0, $n1 = 0, $output_w = 0, $ring_buffer = 0, $ring_buffer_begin_index = 0, $ring_buffer_entries = 0, $ring_buffer_entry = 0, $ring_buffer_first_scanline = 0, $ring_buffer_length = 0, $stbir_info$addr = 0, $vertical_coefficients = 0, $vertical_contributors = 0, $x = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(112);
 $stbir_info$addr = sp + 108 | 0;
 $n$addr = sp + 104 | 0;
 $x = sp + 100 | 0;
 $k = sp + 96 | 0;
 $output_w = sp + 92 | 0;
 $vertical_contributors = sp + 88 | 0;
 $vertical_coefficients = sp + 84 | 0;
 $channels = sp + 80 | 0;
 $ring_buffer_entries = sp + 76 | 0;
 $horizontal_buffer = sp + 72 | 0;
 $coefficient_width = sp + 68 | 0;
 $contributor = sp + 64 | 0;
 $ring_buffer = sp + 60 | 0;
 $ring_buffer_begin_index = sp + 56 | 0;
 $ring_buffer_first_scanline = sp + 52 | 0;
 $ring_buffer_length = sp + 48 | 0;
 $n0 = sp + 44 | 0;
 $n1 = sp + 40 | 0;
 $coefficient_index = sp + 36 | 0;
 $coefficient_group = sp + 32 | 0;
 $coefficient = sp + 28 | 0;
 $ring_buffer_entry = sp + 24 | 0;
 $in_pixel_index = sp + 20 | 0;
 $in_pixel_index29 = sp + 16 | 0;
 $in_pixel_index50 = sp + 12 | 0;
 $in_pixel_index77 = sp + 8 | 0;
 $in_pixel_index109 = sp + 4 | 0;
 $c = sp;
 HEAP32[$stbir_info$addr >> 2] = $stbir_info;
 HEAP32[$n$addr >> 2] = $n;
 HEAP32[$output_w >> 2] = HEAP32[(HEAP32[$stbir_info$addr >> 2] | 0) + 20 >> 2];
 HEAP32[$vertical_contributors >> 2] = HEAP32[(HEAP32[$stbir_info$addr >> 2] | 0) + 108 >> 2];
 HEAP32[$vertical_coefficients >> 2] = HEAP32[(HEAP32[$stbir_info$addr >> 2] | 0) + 112 >> 2];
 HEAP32[$channels >> 2] = HEAP32[(HEAP32[$stbir_info$addr >> 2] | 0) + 64 >> 2];
 HEAP32[$ring_buffer_entries >> 2] = HEAP32[(HEAP32[$stbir_info$addr >> 2] | 0) + 164 >> 2];
 HEAP32[$horizontal_buffer >> 2] = HEAP32[(HEAP32[$stbir_info$addr >> 2] | 0) + 124 >> 2];
 HEAP32[$coefficient_width >> 2] = HEAP32[(HEAP32[$stbir_info$addr >> 2] | 0) + 132 >> 2];
 HEAP32[$contributor >> 2] = (HEAP32[$n$addr >> 2] | 0) + (HEAP32[(HEAP32[$stbir_info$addr >> 2] | 0) + 148 >> 2] | 0);
 HEAP32[$ring_buffer >> 2] = HEAP32[(HEAP32[$stbir_info$addr >> 2] | 0) + 180 >> 2];
 HEAP32[$ring_buffer_begin_index >> 2] = HEAP32[(HEAP32[$stbir_info$addr >> 2] | 0) + 176 >> 2];
 HEAP32[$ring_buffer_first_scanline >> 2] = HEAP32[(HEAP32[$stbir_info$addr >> 2] | 0) + 168 >> 2];
 HEAP32[$ring_buffer_length >> 2] = ((HEAP32[(HEAP32[$stbir_info$addr >> 2] | 0) + 160 >> 2] | 0) >>> 0) / 4 | 0;
 HEAP32[$n0 >> 2] = HEAP32[(HEAP32[$vertical_contributors >> 2] | 0) + (HEAP32[$contributor >> 2] << 3) >> 2];
 HEAP32[$n1 >> 2] = HEAP32[(HEAP32[$vertical_contributors >> 2] | 0) + (HEAP32[$contributor >> 2] << 3) + 4 >> 2];
 if (_stbir__use_height_upsampling(HEAP32[$stbir_info$addr >> 2] | 0) | 0) ___assert_fail(34906, 34244, 2004, 35060);
 HEAP32[$k >> 2] = HEAP32[$n0 >> 2];
 while (1) {
  if ((HEAP32[$k >> 2] | 0) > (HEAP32[$n1 >> 2] | 0)) break;
  HEAP32[$coefficient_index >> 2] = (HEAP32[$k >> 2] | 0) - (HEAP32[$n0 >> 2] | 0);
  HEAP32[$coefficient_group >> 2] = Math_imul(HEAP32[$coefficient_width >> 2] | 0, HEAP32[$contributor >> 2] | 0) | 0;
  HEAPF32[$coefficient >> 2] = Math_fround(HEAPF32[(HEAP32[$vertical_coefficients >> 2] | 0) + ((HEAP32[$coefficient_group >> 2] | 0) + (HEAP32[$coefficient_index >> 2] | 0) << 2) >> 2]);
  HEAP32[$ring_buffer_entry >> 2] = _stbir__get_ring_buffer_scanline(HEAP32[$k >> 2] | 0, HEAP32[$ring_buffer >> 2] | 0, HEAP32[$ring_buffer_begin_index >> 2] | 0, HEAP32[$ring_buffer_first_scanline >> 2] | 0, HEAP32[$ring_buffer_entries >> 2] | 0, HEAP32[$ring_buffer_length >> 2] | 0) | 0;
  L7 : do switch (HEAP32[$channels >> 2] | 0) {
  case 1:
   {
    HEAP32[$x >> 2] = 0;
    while (1) {
     if ((HEAP32[$x >> 2] | 0) >= (HEAP32[$output_w >> 2] | 0)) break L7;
     HEAP32[$in_pixel_index >> 2] = HEAP32[$x >> 2];
     $55 = Math_fround(HEAPF32[(HEAP32[$horizontal_buffer >> 2] | 0) + ((HEAP32[$in_pixel_index >> 2] | 0) + 0 << 2) >> 2]);
     $mul21 = Math_fround($55 * Math_fround(HEAPF32[$coefficient >> 2]));
     $arrayidx23 = (HEAP32[$ring_buffer_entry >> 2] | 0) + ((HEAP32[$in_pixel_index >> 2] | 0) + 0 << 2) | 0;
     HEAPF32[$arrayidx23 >> 2] = Math_fround(Math_fround(HEAPF32[$arrayidx23 >> 2]) + $mul21);
     HEAP32[$x >> 2] = (HEAP32[$x >> 2] | 0) + 1;
    }
    break;
   }
  case 2:
   {
    HEAP32[$x >> 2] = 0;
    while (1) {
     if ((HEAP32[$x >> 2] | 0) >= (HEAP32[$output_w >> 2] | 0)) break L7;
     HEAP32[$in_pixel_index29 >> 2] = HEAP32[$x >> 2] << 1;
     $66 = Math_fround(HEAPF32[(HEAP32[$horizontal_buffer >> 2] | 0) + ((HEAP32[$in_pixel_index29 >> 2] | 0) + 0 << 2) >> 2]);
     $mul33 = Math_fround($66 * Math_fround(HEAPF32[$coefficient >> 2]));
     $arrayidx35 = (HEAP32[$ring_buffer_entry >> 2] | 0) + ((HEAP32[$in_pixel_index29 >> 2] | 0) + 0 << 2) | 0;
     HEAPF32[$arrayidx35 >> 2] = Math_fround(Math_fround(HEAPF32[$arrayidx35 >> 2]) + $mul33);
     $73 = Math_fround(HEAPF32[(HEAP32[$horizontal_buffer >> 2] | 0) + ((HEAP32[$in_pixel_index29 >> 2] | 0) + 1 << 2) >> 2]);
     $mul39 = Math_fround($73 * Math_fround(HEAPF32[$coefficient >> 2]));
     $arrayidx41 = (HEAP32[$ring_buffer_entry >> 2] | 0) + ((HEAP32[$in_pixel_index29 >> 2] | 0) + 1 << 2) | 0;
     HEAPF32[$arrayidx41 >> 2] = Math_fround(Math_fround(HEAPF32[$arrayidx41 >> 2]) + $mul39);
     HEAP32[$x >> 2] = (HEAP32[$x >> 2] | 0) + 1;
    }
    break;
   }
  case 3:
   {
    HEAP32[$x >> 2] = 0;
    while (1) {
     if ((HEAP32[$x >> 2] | 0) >= (HEAP32[$output_w >> 2] | 0)) break L7;
     HEAP32[$in_pixel_index50 >> 2] = (HEAP32[$x >> 2] | 0) * 3;
     $84 = Math_fround(HEAPF32[(HEAP32[$horizontal_buffer >> 2] | 0) + ((HEAP32[$in_pixel_index50 >> 2] | 0) + 0 << 2) >> 2]);
     $mul54 = Math_fround($84 * Math_fround(HEAPF32[$coefficient >> 2]));
     $arrayidx56 = (HEAP32[$ring_buffer_entry >> 2] | 0) + ((HEAP32[$in_pixel_index50 >> 2] | 0) + 0 << 2) | 0;
     HEAPF32[$arrayidx56 >> 2] = Math_fround(Math_fround(HEAPF32[$arrayidx56 >> 2]) + $mul54);
     $91 = Math_fround(HEAPF32[(HEAP32[$horizontal_buffer >> 2] | 0) + ((HEAP32[$in_pixel_index50 >> 2] | 0) + 1 << 2) >> 2]);
     $mul60 = Math_fround($91 * Math_fround(HEAPF32[$coefficient >> 2]));
     $arrayidx62 = (HEAP32[$ring_buffer_entry >> 2] | 0) + ((HEAP32[$in_pixel_index50 >> 2] | 0) + 1 << 2) | 0;
     HEAPF32[$arrayidx62 >> 2] = Math_fround(Math_fround(HEAPF32[$arrayidx62 >> 2]) + $mul60);
     $98 = Math_fround(HEAPF32[(HEAP32[$horizontal_buffer >> 2] | 0) + ((HEAP32[$in_pixel_index50 >> 2] | 0) + 2 << 2) >> 2]);
     $mul66 = Math_fround($98 * Math_fround(HEAPF32[$coefficient >> 2]));
     $arrayidx68 = (HEAP32[$ring_buffer_entry >> 2] | 0) + ((HEAP32[$in_pixel_index50 >> 2] | 0) + 2 << 2) | 0;
     HEAPF32[$arrayidx68 >> 2] = Math_fround(Math_fround(HEAPF32[$arrayidx68 >> 2]) + $mul66);
     HEAP32[$x >> 2] = (HEAP32[$x >> 2] | 0) + 1;
    }
    break;
   }
  case 4:
   {
    HEAP32[$x >> 2] = 0;
    while (1) {
     if ((HEAP32[$x >> 2] | 0) >= (HEAP32[$output_w >> 2] | 0)) break L7;
     HEAP32[$in_pixel_index77 >> 2] = HEAP32[$x >> 2] << 2;
     $109 = Math_fround(HEAPF32[(HEAP32[$horizontal_buffer >> 2] | 0) + ((HEAP32[$in_pixel_index77 >> 2] | 0) + 0 << 2) >> 2]);
     $mul81 = Math_fround($109 * Math_fround(HEAPF32[$coefficient >> 2]));
     $arrayidx83 = (HEAP32[$ring_buffer_entry >> 2] | 0) + ((HEAP32[$in_pixel_index77 >> 2] | 0) + 0 << 2) | 0;
     HEAPF32[$arrayidx83 >> 2] = Math_fround(Math_fround(HEAPF32[$arrayidx83 >> 2]) + $mul81);
     $116 = Math_fround(HEAPF32[(HEAP32[$horizontal_buffer >> 2] | 0) + ((HEAP32[$in_pixel_index77 >> 2] | 0) + 1 << 2) >> 2]);
     $mul87 = Math_fround($116 * Math_fround(HEAPF32[$coefficient >> 2]));
     $arrayidx89 = (HEAP32[$ring_buffer_entry >> 2] | 0) + ((HEAP32[$in_pixel_index77 >> 2] | 0) + 1 << 2) | 0;
     HEAPF32[$arrayidx89 >> 2] = Math_fround(Math_fround(HEAPF32[$arrayidx89 >> 2]) + $mul87);
     $123 = Math_fround(HEAPF32[(HEAP32[$horizontal_buffer >> 2] | 0) + ((HEAP32[$in_pixel_index77 >> 2] | 0) + 2 << 2) >> 2]);
     $mul93 = Math_fround($123 * Math_fround(HEAPF32[$coefficient >> 2]));
     $arrayidx95 = (HEAP32[$ring_buffer_entry >> 2] | 0) + ((HEAP32[$in_pixel_index77 >> 2] | 0) + 2 << 2) | 0;
     HEAPF32[$arrayidx95 >> 2] = Math_fround(Math_fround(HEAPF32[$arrayidx95 >> 2]) + $mul93);
     $130 = Math_fround(HEAPF32[(HEAP32[$horizontal_buffer >> 2] | 0) + ((HEAP32[$in_pixel_index77 >> 2] | 0) + 3 << 2) >> 2]);
     $mul99 = Math_fround($130 * Math_fround(HEAPF32[$coefficient >> 2]));
     $arrayidx101 = (HEAP32[$ring_buffer_entry >> 2] | 0) + ((HEAP32[$in_pixel_index77 >> 2] | 0) + 3 << 2) | 0;
     HEAPF32[$arrayidx101 >> 2] = Math_fround(Math_fround(HEAPF32[$arrayidx101 >> 2]) + $mul99);
     HEAP32[$x >> 2] = (HEAP32[$x >> 2] | 0) + 1;
    }
    break;
   }
  default:
   {
    HEAP32[$x >> 2] = 0;
    while (1) {
     if ((HEAP32[$x >> 2] | 0) >= (HEAP32[$output_w >> 2] | 0)) break L7;
     HEAP32[$in_pixel_index109 >> 2] = Math_imul(HEAP32[$x >> 2] | 0, HEAP32[$channels >> 2] | 0) | 0;
     HEAP32[$c >> 2] = 0;
     while (1) {
      if ((HEAP32[$c >> 2] | 0) >= (HEAP32[$channels >> 2] | 0)) break;
      $145 = Math_fround(HEAPF32[(HEAP32[$horizontal_buffer >> 2] | 0) + ((HEAP32[$in_pixel_index109 >> 2] | 0) + (HEAP32[$c >> 2] | 0) << 2) >> 2]);
      $mul116 = Math_fround($145 * Math_fround(HEAPF32[$coefficient >> 2]));
      $arrayidx118 = (HEAP32[$ring_buffer_entry >> 2] | 0) + ((HEAP32[$in_pixel_index109 >> 2] | 0) + (HEAP32[$c >> 2] | 0) << 2) | 0;
      HEAPF32[$arrayidx118 >> 2] = Math_fround(Math_fround(HEAPF32[$arrayidx118 >> 2]) + $mul116);
      HEAP32[$c >> 2] = (HEAP32[$c >> 2] | 0) + 1;
     }
     HEAP32[$x >> 2] = (HEAP32[$x >> 2] | 0) + 1;
    }
   }
  } while (0);
  HEAP32[$k >> 2] = (HEAP32[$k >> 2] | 0) + 1;
 }
 STACKTOP = sp;
 return;
}

function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($this, $__b, $__e, $__iob, $__err, $__tm, $__fmtb, $__fmte) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__tm = $__tm | 0;
 $__fmtb = $__fmtb | 0;
 $__fmte = $__fmte | 0;
 var $$ph = 0, $0 = 0, $1 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $26 = 0, $28 = 0, $29 = 0, $3 = 0, $33 = 0, $34 = 0, $38 = 0, $39 = 0, $45 = 0, $49 = 0, $50 = 0, $57 = 0, $61 = 0, $62 = 0, $66 = 0, $67 = 0, $7 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $8 = 0, $9 = 0, $__cmd$0 = 0, $__einp_$i$i = 0, $__einp_$i$i117 = 0, $__fmtb$addr$0 = 0, $__fmtb$addr$0$pn = 0, $__fmtb$addr$3 = 0, $__fmtb$addr$3$lcssa = 0, $__fmtb$addr$4 = 0, $__ninp_$i$i = 0, $__ninp_$i$i116 = 0, $__opt$0 = 0, $__tab_$i = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $agg$tmp23 = 0, $agg$tmp23$byval_copy = 0, $call$i = 0, $call$i130 = 0, $call$i40 = 0, $incdec$ptr = 0, $incdec$ptr16 = 0, $retval$0$i$i = 0, $retval$0$i$i$i$i = 0, $retval$0$i$i$i$i158 = 0, $retval$0$i$i$i$i65 = 0, $retval$0$i$i125 = 0, $retval$0$i$i13$i$i = 0, $retval$0$i$i13$i$i179 = 0, $retval$0$i$i13$i$i86 = 0, $retval$sroa$0$0$copyload = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $agg$tmp23$byval_copy = sp + 12 | 0;
 $agg$tmp$byval_copy = sp + 8 | 0;
 $agg$tmp = sp + 4 | 0;
 $agg$tmp23 = sp;
 __ZNKSt3__28ios_base6getlocEv($agg$tmp23$byval_copy, $__iob);
 $call$i = __ZNKSt3__26locale9use_facetERNS0_2idE($agg$tmp23$byval_copy, 61216) | 0;
 __ZNSt3__26localeD2Ev($agg$tmp23$byval_copy);
 HEAP32[$__err >> 2] = 0;
 $__tab_$i = $call$i + 8 | 0;
 $0 = 0;
 $__fmtb$addr$0 = $__fmtb;
 L1 : while (1) {
  $1 = HEAP32[$__b >> 2] | 0;
  if (!(($__fmtb$addr$0 | 0) != ($__fmte | 0) & ($0 | 0) == 0)) {
   $61 = $1;
   break;
  }
  $2 = $1;
  if (!$1) {
   $20 = $2;
   $49 = 0;
   $72 = 1;
  } else {
   $3 = HEAP32[$1 + 12 >> 2] | 0;
   if (($3 | 0) == (HEAP32[$1 + 16 >> 2] | 0)) $retval$0$i$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$1 >> 2] | 0) + 36 >> 2] & 127]($1) | 0; else $retval$0$i$i$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$3 >> 0] | 0) | 0;
   if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i$i$i, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
    HEAP32[$__b >> 2] = 0;
    $20 = 0;
    $49 = 0;
    $72 = 1;
   } else {
    $20 = $2;
    $49 = $1;
    $72 = 0;
   }
  }
  $7 = HEAP32[$__e >> 2] | 0;
  $8 = $7;
  do if (!$7) {
   $$ph = $8;
   label = 15;
  } else {
   $9 = HEAP32[$7 + 12 >> 2] | 0;
   if (($9 | 0) == (HEAP32[$7 + 16 >> 2] | 0)) $retval$0$i$i13$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$7 >> 2] | 0) + 36 >> 2] & 127]($7) | 0; else $retval$0$i$i13$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$9 >> 0] | 0) | 0;
   if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i13$i$i, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
    HEAP32[$__e >> 2] = 0;
    $$ph = 0;
    label = 15;
    break;
   } else if ($72) {
    $21 = $8;
    $73 = $7;
    break;
   } else {
    label = 63;
    break L1;
   }
  } while (0);
  if ((label | 0) == 15) {
   label = 0;
   if ($72) {
    label = 63;
    break;
   } else {
    $21 = $$ph;
    $73 = 0;
   }
  }
  L24 : do if ((FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$call$i >> 2] | 0) + 36 >> 2] & 63]($call$i, HEAP8[$__fmtb$addr$0 >> 0] | 0, 0) | 0) << 24 >> 24 == 37) {
   $incdec$ptr = $__fmtb$addr$0 + 1 | 0;
   if (($incdec$ptr | 0) == ($__fmte | 0)) {
    label = 63;
    break L1;
   }
   $call$i40 = FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$call$i >> 2] | 0) + 36 >> 2] & 63]($call$i, HEAP8[$incdec$ptr >> 0] | 0, 0) | 0;
   switch ($call$i40 << 24 >> 24) {
   case 48:
   case 69:
    {
     $incdec$ptr16 = $__fmtb$addr$0 + 2 | 0;
     if (($incdec$ptr16 | 0) == ($__fmte | 0)) {
      label = 63;
      break L1;
     }
     $22 = $incdec$ptr;
     $__cmd$0 = FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$call$i >> 2] | 0) + 36 >> 2] & 63]($call$i, HEAP8[$incdec$ptr16 >> 0] | 0, 0) | 0;
     $__opt$0 = $call$i40;
     break;
    }
   default:
    {
     $22 = $__fmtb$addr$0;
     $__cmd$0 = $call$i40;
     $__opt$0 = 0;
    }
   }
   $19 = HEAP32[(HEAP32[$this >> 2] | 0) + 36 >> 2] | 0;
   HEAP32[$agg$tmp >> 2] = $20;
   HEAP32[$agg$tmp23 >> 2] = $21;
   HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
   HEAP32[$agg$tmp23$byval_copy >> 2] = HEAP32[$agg$tmp23 >> 2];
   HEAP32[$__b >> 2] = FUNCTION_TABLE_iiiiiiiii[$19 & 15]($this, $agg$tmp$byval_copy, $agg$tmp23$byval_copy, $__iob, $__err, $__tm, $__cmd$0, $__opt$0) | 0;
   $__fmtb$addr$4 = $22 + 2 | 0;
  } else {
   $23 = HEAP8[$__fmtb$addr$0 >> 0] | 0;
   if ($23 << 24 >> 24 > -1) {
    $24 = HEAP32[$__tab_$i >> 2] | 0;
    if (HEAP16[$24 + ($23 << 24 >> 24 << 1) >> 1] & 8192) {
     $__fmtb$addr$0$pn = $__fmtb$addr$0;
     while (1) {
      $__fmtb$addr$3 = $__fmtb$addr$0$pn + 1 | 0;
      if (($__fmtb$addr$3 | 0) == ($__fmte | 0)) {
       $__fmtb$addr$3$lcssa = $__fmte;
       break;
      }
      $26 = HEAP8[$__fmtb$addr$3 >> 0] | 0;
      if ($26 << 24 >> 24 <= -1) {
       $__fmtb$addr$3$lcssa = $__fmtb$addr$3;
       break;
      }
      if (!(HEAP16[$24 + ($26 << 24 >> 24 << 1) >> 1] & 8192)) {
       $__fmtb$addr$3$lcssa = $__fmtb$addr$3;
       break;
      } else $__fmtb$addr$0$pn = $__fmtb$addr$3;
     }
     $28 = $49;
     $33 = $73;
     while (1) {
      if (!$28) {
       $38 = 0;
       $74 = 1;
      } else {
       $29 = HEAP32[$28 + 12 >> 2] | 0;
       if (($29 | 0) == (HEAP32[$28 + 16 >> 2] | 0)) $retval$0$i$i$i$i65 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$28 >> 2] | 0) + 36 >> 2] & 127]($28) | 0; else $retval$0$i$i$i$i65 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$29 >> 0] | 0) | 0;
       if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i$i$i65, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
        HEAP32[$__b >> 2] = 0;
        $38 = 0;
        $74 = 1;
       } else {
        $38 = $28;
        $74 = 0;
       }
      }
      do if (!$33) label = 42; else {
       $34 = HEAP32[$33 + 12 >> 2] | 0;
       if (($34 | 0) == (HEAP32[$33 + 16 >> 2] | 0)) $retval$0$i$i13$i$i86 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$33 >> 2] | 0) + 36 >> 2] & 127]($33) | 0; else $retval$0$i$i13$i$i86 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$34 >> 0] | 0) | 0;
       if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i13$i$i86, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
        HEAP32[$__e >> 2] = 0;
        label = 42;
        break;
       } else if ($74) {
        $75 = $33;
        break;
       } else {
        $__fmtb$addr$4 = $__fmtb$addr$3$lcssa;
        break L24;
       }
      } while (0);
      if ((label | 0) == 42) {
       label = 0;
       if ($74) {
        $__fmtb$addr$4 = $__fmtb$addr$3$lcssa;
        break L24;
       } else $75 = 0;
      }
      $__ninp_$i$i = $38 + 12 | 0;
      $39 = HEAP32[$__ninp_$i$i >> 2] | 0;
      $__einp_$i$i = $38 + 16 | 0;
      if (($39 | 0) == (HEAP32[$__einp_$i$i >> 2] | 0)) $retval$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$38 >> 2] | 0) + 36 >> 2] & 127]($38) | 0; else $retval$0$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$39 >> 0] | 0) | 0;
      if (($retval$0$i$i & 255) << 24 >> 24 <= -1) {
       $__fmtb$addr$4 = $__fmtb$addr$3$lcssa;
       break L24;
      }
      if (!(HEAP16[(HEAP32[$__tab_$i >> 2] | 0) + ($retval$0$i$i << 24 >> 24 << 1) >> 1] & 8192)) {
       $__fmtb$addr$4 = $__fmtb$addr$3$lcssa;
       break L24;
      }
      $45 = HEAP32[$__ninp_$i$i >> 2] | 0;
      if (($45 | 0) == (HEAP32[$__einp_$i$i >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[$38 >> 2] | 0) + 40 >> 2] & 127]($38) | 0; else {
       HEAP32[$__ninp_$i$i >> 2] = $45 + 1;
       __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$45 >> 0] | 0) | 0;
      }
      $28 = $38;
      $33 = $75;
     }
    }
   }
   $__ninp_$i$i116 = $49 + 12 | 0;
   $50 = HEAP32[$__ninp_$i$i116 >> 2] | 0;
   $__einp_$i$i117 = $49 + 16 | 0;
   if (($50 | 0) == (HEAP32[$__einp_$i$i117 >> 2] | 0)) $retval$0$i$i125 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$49 >> 2] | 0) + 36 >> 2] & 127]($49) | 0; else $retval$0$i$i125 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$50 >> 0] | 0) | 0;
   $call$i130 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$call$i >> 2] | 0) + 12 >> 2] & 31]($call$i, $retval$0$i$i125 & 255) | 0;
   if ($call$i130 << 24 >> 24 != (FUNCTION_TABLE_iii[HEAP32[(HEAP32[$call$i >> 2] | 0) + 12 >> 2] & 31]($call$i, HEAP8[$__fmtb$addr$0 >> 0] | 0) | 0) << 24 >> 24) {
    HEAP32[$__err >> 2] = 4;
    $__fmtb$addr$4 = $__fmtb$addr$0;
    break;
   }
   $57 = HEAP32[$__ninp_$i$i116 >> 2] | 0;
   if (($57 | 0) == (HEAP32[$__einp_$i$i117 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[$49 >> 2] | 0) + 40 >> 2] & 127]($49) | 0; else {
    HEAP32[$__ninp_$i$i116 >> 2] = $57 + 1;
    __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$57 >> 0] | 0) | 0;
   }
   $__fmtb$addr$4 = $__fmtb$addr$0 + 1 | 0;
  } while (0);
  $0 = HEAP32[$__err >> 2] | 0;
  $__fmtb$addr$0 = $__fmtb$addr$4;
 }
 if ((label | 0) == 63) {
  HEAP32[$__err >> 2] = 4;
  $61 = $49;
 }
 if (!$61) {
  $76 = 1;
  $retval$sroa$0$0$copyload = 0;
 } else {
  $62 = HEAP32[$61 + 12 >> 2] | 0;
  if (($62 | 0) == (HEAP32[$61 + 16 >> 2] | 0)) $retval$0$i$i$i$i158 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$61 >> 2] | 0) + 36 >> 2] & 127]($61) | 0; else $retval$0$i$i$i$i158 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$62 >> 0] | 0) | 0;
  if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i$i$i158, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
   HEAP32[$__b >> 2] = 0;
   $76 = 1;
   $retval$sroa$0$0$copyload = 0;
  } else {
   $76 = 0;
   $retval$sroa$0$0$copyload = $61;
  }
 }
 $66 = HEAP32[$__e >> 2] | 0;
 do if (!$66) label = 76; else {
  $67 = HEAP32[$66 + 12 >> 2] | 0;
  if (($67 | 0) == (HEAP32[$66 + 16 >> 2] | 0)) $retval$0$i$i13$i$i179 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$66 >> 2] | 0) + 36 >> 2] & 127]($66) | 0; else $retval$0$i$i13$i$i179 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$67 >> 0] | 0) | 0;
  if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i13$i$i179, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
   HEAP32[$__e >> 2] = 0;
   label = 76;
   break;
  } else if ($76) break; else {
   label = 78;
   break;
  }
 } while (0);
 if ((label | 0) == 76) if ($76) label = 78;
 if ((label | 0) == 78) HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
 STACKTOP = sp;
 return $retval$sroa$0$0$copyload | 0;
}

function __ZN4tson8Property14setValueByTypeERKN8nlohmann10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS1_14adl_serializerEEE($this, $json) {
 $this = $this | 0;
 $json = $json | 0;
 var $$pr$pr$i = 0, $$pr$pr$i106 = 0, $$pr$pr$i141 = 0, $$pr$pr$i35 = 0, $$pr$pr$i71 = 0, $1 = 0, $12 = 0, $13 = 0, $18 = 0, $19 = 0, $24 = 0, $25 = 0, $30 = 0, $31 = 0, $6 = 0, $7 = 0, $__s$i$i = 0, $__s$i$i10 = 0, $__s$i$i115 = 0, $__s$i$i45 = 0, $__s$i$i80 = 0, $__s$i6$i = 0, $__s$i7$i = 0, $__tmp$i$i112 = 0, $call13 = 0, $call23 = f0, $frombool = 0, $m_value = 0, $m_value14 = 0, $m_value19 = 0, $m_value24 = 0, $m_value7 = 0, $ref$tmp = 0, $ref$tmp$i113 = 0, $ref$tmp2 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64);
 $__tmp$i$i112 = sp + 40 | 0;
 $ref$tmp$i113 = sp + 24 | 0;
 $ref$tmp = sp + 12 | 0;
 $ref$tmp2 = sp;
 switch (HEAP8[$this >> 0] | 0) {
 case 1:
  {
   __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE3getIS9_S9_Li0EEET0_v($ref$tmp2, $json);
   __ZN4tson5ColorIhEC2ERKNSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE($ref$tmp, $ref$tmp2);
   $m_value = $this + 16 | 0;
   HEAP32[$ref$tmp$i113 >> 2] = 0;
   $__s$i$i = $ref$tmp$i113 + 4 | 0;
   __ZNSt3__23any8_StorageC2Ev($__s$i$i);
   $1 = HEAP32[$ref$tmp >> 2] | 0;
   HEAP32[$__s$i$i >> 2] = $1;
   HEAP32[$ref$tmp$i113 >> 2] = 21;
   do if (($ref$tmp$i113 | 0) == ($m_value | 0)) {
    $7 = 21;
    label = 8;
   } else {
    if (!(HEAP32[$m_value >> 2] | 0)) {
     $__s$i6$i = $this + 20 | 0;
     HEAP8[$__s$i6$i >> 0] = $1;
     HEAP8[$__s$i6$i + 1 >> 0] = $1 >> 8;
     HEAP8[$__s$i6$i + 2 >> 0] = $1 >> 16;
     HEAP8[$__s$i6$i + 3 >> 0] = $1 >> 24;
     HEAP32[$m_value >> 2] = 21;
     HEAP32[$ref$tmp$i113 >> 2] = 0;
     break;
    }
    HEAP32[$__tmp$i$i112 >> 2] = 0;
    __ZNSt3__23any8_StorageC2Ev($__tmp$i$i112 + 4 | 0);
    FUNCTION_TABLE_iiiiii[HEAP32[$m_value >> 2] & 31](2, $m_value, $__tmp$i$i112, 0, 0) | 0;
    FUNCTION_TABLE_iiiiii[HEAP32[$ref$tmp$i113 >> 2] & 31](2, $ref$tmp$i113, $m_value, 0, 0) | 0;
    FUNCTION_TABLE_iiiiii[HEAP32[$__tmp$i$i112 >> 2] & 31](2, $__tmp$i$i112, $ref$tmp$i113, 0, 0) | 0;
    $6 = HEAP32[$__tmp$i$i112 >> 2] | 0;
    if ($6 | 0) FUNCTION_TABLE_iiiiii[$6 & 31](0, $__tmp$i$i112, 0, 0, 0) | 0;
    $$pr$pr$i = HEAP32[$ref$tmp$i113 >> 2] | 0;
    if ($$pr$pr$i | 0) {
     $7 = $$pr$pr$i;
     label = 8;
    }
   } while (0);
   if ((label | 0) == 8) FUNCTION_TABLE_iiiiii[$7 & 31](0, $ref$tmp$i113, 0, 0, 0) | 0;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp2);
   break;
  }
 case 2:
  {
   __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE3getIS9_S9_Li0EEET0_v($ref$tmp2, $json);
   HEAP32[$ref$tmp >> 2] = HEAP32[$ref$tmp2 >> 2];
   HEAP32[$ref$tmp + 4 >> 2] = HEAP32[$ref$tmp2 + 4 >> 2];
   HEAP32[$ref$tmp + 8 >> 2] = HEAP32[$ref$tmp2 + 8 >> 2];
   HEAP32[$ref$tmp2 >> 2] = 0;
   HEAP32[$ref$tmp2 + 4 >> 2] = 0;
   HEAP32[$ref$tmp2 + 8 >> 2] = 0;
   $m_value7 = $this + 16 | 0;
   HEAP32[$ref$tmp$i113 >> 2] = 0;
   $__s$i$i10 = $ref$tmp$i113 + 4 | 0;
   __ZNSt3__23any8_StorageC2Ev($__s$i$i10);
   HEAP32[$__s$i$i10 >> 2] = HEAP32[$ref$tmp >> 2];
   HEAP32[$__s$i$i10 + 4 >> 2] = HEAP32[$ref$tmp + 4 >> 2];
   HEAP32[$__s$i$i10 + 8 >> 2] = HEAP32[$ref$tmp + 8 >> 2];
   HEAP32[$ref$tmp >> 2] = 0;
   HEAP32[$ref$tmp + 4 >> 2] = 0;
   HEAP32[$ref$tmp + 8 >> 2] = 0;
   HEAP32[$ref$tmp$i113 >> 2] = 22;
   do if (($ref$tmp$i113 | 0) == ($m_value7 | 0)) {
    $13 = 22;
    label = 16;
   } else {
    if (!(HEAP32[$m_value7 >> 2] | 0)) {
     $__s$i7$i = $this + 20 | 0;
     HEAP32[$__s$i7$i >> 2] = HEAP32[$__s$i$i10 >> 2];
     HEAP32[$__s$i7$i + 4 >> 2] = HEAP32[$__s$i$i10 + 4 >> 2];
     HEAP32[$__s$i7$i + 8 >> 2] = HEAP32[$__s$i$i10 + 8 >> 2];
     HEAP32[$__s$i$i10 >> 2] = 0;
     HEAP32[$__s$i$i10 + 4 >> 2] = 0;
     HEAP32[$__s$i$i10 + 8 >> 2] = 0;
     HEAP32[$m_value7 >> 2] = 22;
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__s$i$i10);
     HEAP32[$ref$tmp$i113 >> 2] = 0;
     break;
    }
    HEAP32[$__tmp$i$i112 >> 2] = 0;
    __ZNSt3__23any8_StorageC2Ev($__tmp$i$i112 + 4 | 0);
    FUNCTION_TABLE_iiiiii[HEAP32[$m_value7 >> 2] & 31](2, $m_value7, $__tmp$i$i112, 0, 0) | 0;
    FUNCTION_TABLE_iiiiii[HEAP32[$ref$tmp$i113 >> 2] & 31](2, $ref$tmp$i113, $m_value7, 0, 0) | 0;
    FUNCTION_TABLE_iiiiii[HEAP32[$__tmp$i$i112 >> 2] & 31](2, $__tmp$i$i112, $ref$tmp$i113, 0, 0) | 0;
    $12 = HEAP32[$__tmp$i$i112 >> 2] | 0;
    if ($12 | 0) FUNCTION_TABLE_iiiiii[$12 & 31](0, $__tmp$i$i112, 0, 0, 0) | 0;
    $$pr$pr$i35 = HEAP32[$ref$tmp$i113 >> 2] | 0;
    if ($$pr$pr$i35 | 0) {
     $13 = $$pr$pr$i35;
     label = 16;
    }
   } while (0);
   if ((label | 0) == 16) FUNCTION_TABLE_iiiiii[$13 & 31](0, $ref$tmp$i113, 0, 0, 0) | 0;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp);
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp2);
   break;
  }
 case 3:
  {
   $call13 = __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE3getIiiLi0EEET0_v($json) | 0;
   $m_value14 = $this + 16 | 0;
   HEAP32[$ref$tmp$i113 >> 2] = 0;
   $__s$i$i45 = $ref$tmp$i113 + 4 | 0;
   __ZNSt3__23any8_StorageC2Ev($__s$i$i45);
   HEAP32[$__s$i$i45 >> 2] = $call13;
   HEAP32[$ref$tmp$i113 >> 2] = 23;
   do if (($ref$tmp$i113 | 0) == ($m_value14 | 0)) {
    $19 = 23;
    label = 24;
   } else {
    if (!(HEAP32[$m_value14 >> 2] | 0)) {
     HEAP32[$this + 20 >> 2] = $call13;
     HEAP32[$m_value14 >> 2] = 23;
     HEAP32[$ref$tmp$i113 >> 2] = 0;
     break;
    }
    HEAP32[$__tmp$i$i112 >> 2] = 0;
    __ZNSt3__23any8_StorageC2Ev($__tmp$i$i112 + 4 | 0);
    FUNCTION_TABLE_iiiiii[HEAP32[$m_value14 >> 2] & 31](2, $m_value14, $__tmp$i$i112, 0, 0) | 0;
    FUNCTION_TABLE_iiiiii[HEAP32[$ref$tmp$i113 >> 2] & 31](2, $ref$tmp$i113, $m_value14, 0, 0) | 0;
    FUNCTION_TABLE_iiiiii[HEAP32[$__tmp$i$i112 >> 2] & 31](2, $__tmp$i$i112, $ref$tmp$i113, 0, 0) | 0;
    $18 = HEAP32[$__tmp$i$i112 >> 2] | 0;
    if ($18 | 0) FUNCTION_TABLE_iiiiii[$18 & 31](0, $__tmp$i$i112, 0, 0, 0) | 0;
    $$pr$pr$i71 = HEAP32[$ref$tmp$i113 >> 2] | 0;
    if ($$pr$pr$i71 | 0) {
     $19 = $$pr$pr$i71;
     label = 24;
    }
   } while (0);
   if ((label | 0) == 24) FUNCTION_TABLE_iiiiii[$19 & 31](0, $ref$tmp$i113, 0, 0, 0) | 0;
   break;
  }
 case 4:
  {
   $frombool = (__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE3getIbbLi0EEET0_v($json) | 0) & 1;
   $m_value19 = $this + 16 | 0;
   HEAP32[$ref$tmp$i113 >> 2] = 0;
   $__s$i$i80 = $ref$tmp$i113 + 4 | 0;
   __ZNSt3__23any8_StorageC2Ev($__s$i$i80);
   HEAP8[$__s$i$i80 >> 0] = $frombool;
   HEAP32[$ref$tmp$i113 >> 2] = 24;
   do if (($ref$tmp$i113 | 0) == ($m_value19 | 0)) {
    $25 = 24;
    label = 32;
   } else {
    if (!(HEAP32[$m_value19 >> 2] | 0)) {
     HEAP8[$this + 20 >> 0] = $frombool;
     HEAP32[$m_value19 >> 2] = 24;
     HEAP32[$ref$tmp$i113 >> 2] = 0;
     break;
    }
    HEAP32[$__tmp$i$i112 >> 2] = 0;
    __ZNSt3__23any8_StorageC2Ev($__tmp$i$i112 + 4 | 0);
    FUNCTION_TABLE_iiiiii[HEAP32[$m_value19 >> 2] & 31](2, $m_value19, $__tmp$i$i112, 0, 0) | 0;
    FUNCTION_TABLE_iiiiii[HEAP32[$ref$tmp$i113 >> 2] & 31](2, $ref$tmp$i113, $m_value19, 0, 0) | 0;
    FUNCTION_TABLE_iiiiii[HEAP32[$__tmp$i$i112 >> 2] & 31](2, $__tmp$i$i112, $ref$tmp$i113, 0, 0) | 0;
    $24 = HEAP32[$__tmp$i$i112 >> 2] | 0;
    if ($24 | 0) FUNCTION_TABLE_iiiiii[$24 & 31](0, $__tmp$i$i112, 0, 0, 0) | 0;
    $$pr$pr$i106 = HEAP32[$ref$tmp$i113 >> 2] | 0;
    if ($$pr$pr$i106 | 0) {
     $25 = $$pr$pr$i106;
     label = 32;
    }
   } while (0);
   if ((label | 0) == 32) FUNCTION_TABLE_iiiiii[$25 & 31](0, $ref$tmp$i113, 0, 0, 0) | 0;
   break;
  }
 case 5:
  {
   $call23 = Math_fround(__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE3getIffLi0EEET0_v($json));
   $m_value24 = $this + 16 | 0;
   HEAP32[$ref$tmp$i113 >> 2] = 0;
   $__s$i$i115 = $ref$tmp$i113 + 4 | 0;
   __ZNSt3__23any8_StorageC2Ev($__s$i$i115);
   HEAPF32[$__s$i$i115 >> 2] = $call23;
   HEAP32[$ref$tmp$i113 >> 2] = 25;
   do if (($ref$tmp$i113 | 0) == ($m_value24 | 0)) {
    $31 = 25;
    label = 40;
   } else {
    if (!(HEAP32[$m_value24 >> 2] | 0)) {
     HEAPF32[$this + 20 >> 2] = $call23;
     HEAP32[$m_value24 >> 2] = 25;
     HEAP32[$ref$tmp$i113 >> 2] = 0;
     break;
    }
    HEAP32[$__tmp$i$i112 >> 2] = 0;
    __ZNSt3__23any8_StorageC2Ev($__tmp$i$i112 + 4 | 0);
    FUNCTION_TABLE_iiiiii[HEAP32[$m_value24 >> 2] & 31](2, $m_value24, $__tmp$i$i112, 0, 0) | 0;
    FUNCTION_TABLE_iiiiii[HEAP32[$ref$tmp$i113 >> 2] & 31](2, $ref$tmp$i113, $m_value24, 0, 0) | 0;
    FUNCTION_TABLE_iiiiii[HEAP32[$__tmp$i$i112 >> 2] & 31](2, $__tmp$i$i112, $ref$tmp$i113, 0, 0) | 0;
    $30 = HEAP32[$__tmp$i$i112 >> 2] | 0;
    if ($30 | 0) FUNCTION_TABLE_iiiiii[$30 & 31](0, $__tmp$i$i112, 0, 0, 0) | 0;
    $$pr$pr$i141 = HEAP32[$ref$tmp$i113 >> 2] | 0;
    if ($$pr$pr$i141 | 0) {
     $31 = $$pr$pr$i141;
     label = 40;
    }
   } while (0);
   if ((label | 0) == 40) FUNCTION_TABLE_iiiiii[$31 & 31](0, $ref$tmp$i113, 0, 0, 0) | 0;
   break;
  }
 case 6:
  {
   __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE3getIS9_S9_Li0EEET0_v($__tmp$i$i112, $json);
   __ZN4tson8Property11setStrValueERKNSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE($this, $__tmp$i$i112);
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__tmp$i$i112);
   break;
  }
 default:
  {
   __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE3getIS9_S9_Li0EEET0_v($__tmp$i$i112, $json);
   __ZN4tson8Property11setStrValueERKNSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE($this, $__tmp$i$i112);
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__tmp$i$i112);
  }
 }
 STACKTOP = sp;
 return;
}

function _stbi__hdr_load($s, $x, $y, $comp, $req_comp, $ri) {
 $s = $s | 0;
 $x = $x | 0;
 $y = $y | 0;
 $comp = $comp | 0;
 $req_comp = $req_comp | 0;
 $ri = $ri | 0;
 var $104 = 0, $105 = 0, $106 = 0, $118 = 0, $119 = 0, $138 = 0, $20 = 0, $add$ptr207 = 0, $add$ptr80 = 0, $add$ptr82 = 0, $buffer = 0, $c1 = 0, $c2 = 0, $call187 = 0, $cmp138 = 0, $comp$addr = 0, $conv118 = 0, $count = 0, $hdr_data = 0, $headerToken = 0, $height = 0, $i = 0, $j = 0, $k = 0, $len = 0, $mul = 0, $mul204 = 0, $nleft = 0, $req_comp$addr = 0, $retval = 0, $rgbe = 0, $rgbe106 = 0, $s$addr = 0, $scanline = 0, $sub = 0, $tobool = 0, $tobool123 = 0, $tobool133 = 0, $tobool159 = 0, $tobool179 = 0, $tobool19 = 0, $tobool28 = 0, $tobool39 = 0, $tobool55 = 0, $tobool62 = 0, $token = 0, $valid = 0, $value = 0, $width = 0, $x$addr = 0, $y$addr = 0, $z = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1136 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(1136);
 $retval = sp + 1108 | 0;
 $s$addr = sp + 1104 | 0;
 $x$addr = sp + 1100 | 0;
 $y$addr = sp + 1096 | 0;
 $comp$addr = sp + 1092 | 0;
 $req_comp$addr = sp + 1088 | 0;
 $buffer = sp;
 $token = sp + 1080 | 0;
 $valid = sp + 1076 | 0;
 $width = sp + 1072 | 0;
 $height = sp + 1068 | 0;
 $scanline = sp + 1064 | 0;
 $hdr_data = sp + 1060 | 0;
 $len = sp + 1056 | 0;
 $count = sp + 1121 | 0;
 $value = sp + 1120 | 0;
 $i = sp + 1052 | 0;
 $j = sp + 1048 | 0;
 $k = sp + 1044 | 0;
 $c1 = sp + 1040 | 0;
 $c2 = sp + 1036 | 0;
 $z = sp + 1032 | 0;
 $headerToken = sp + 1028 | 0;
 $rgbe = sp + 1116 | 0;
 $rgbe106 = sp + 1112 | 0;
 $nleft = sp + 1024 | 0;
 HEAP32[$s$addr >> 2] = $s;
 HEAP32[$x$addr >> 2] = $x;
 HEAP32[$y$addr >> 2] = $y;
 HEAP32[$comp$addr >> 2] = $comp;
 HEAP32[$req_comp$addr >> 2] = $req_comp;
 HEAP32[sp + 1084 >> 2] = $ri;
 HEAP32[$valid >> 2] = 0;
 HEAP32[$headerToken >> 2] = _stbi__hdr_gettoken(HEAP32[$s$addr >> 2] | 0, $buffer) | 0;
 if (_strcmp(HEAP32[$headerToken >> 2] | 0, 32885) | 0) if (_strcmp(HEAP32[$headerToken >> 2] | 0, 32896) | 0) {
  $tobool = (_stbi__err(32903) | 0) != 0;
  HEAP32[$retval >> 2] = $tobool ? 0 : 0;
  $138 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $138 | 0;
 }
 while (1) {
  HEAP32[$token >> 2] = _stbi__hdr_gettoken(HEAP32[$s$addr >> 2] | 0, $buffer) | 0;
  if (!(HEAP8[HEAP32[$token >> 2] >> 0] | 0)) break;
  if (!(_strcmp(HEAP32[$token >> 2] | 0, 32911) | 0)) HEAP32[$valid >> 2] = 1;
 }
 if (!(HEAP32[$valid >> 2] | 0)) {
  $tobool19 = (_stbi__err(32934) | 0) != 0;
  HEAP32[$retval >> 2] = $tobool19 ? 0 : 0;
  $138 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $138 | 0;
 }
 HEAP32[$token >> 2] = _stbi__hdr_gettoken(HEAP32[$s$addr >> 2] | 0, $buffer) | 0;
 if (_strncmp(HEAP32[$token >> 2] | 0, 32953, 3) | 0) {
  $tobool28 = (_stbi__err(32957) | 0) != 0;
  HEAP32[$retval >> 2] = $tobool28 ? 0 : 0;
  $138 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $138 | 0;
 }
 HEAP32[$token >> 2] = (HEAP32[$token >> 2] | 0) + 3;
 HEAP32[$height >> 2] = _strtol(HEAP32[$token >> 2] | 0, $token, 10) | 0;
 while (1) {
  $20 = HEAP32[$token >> 2] | 0;
  if ((HEAP8[HEAP32[$token >> 2] >> 0] | 0) != 32) break;
  HEAP32[$token >> 2] = $20 + 1;
 }
 if (_strncmp($20, 32981, 3) | 0) {
  $tobool39 = (_stbi__err(32957) | 0) != 0;
  HEAP32[$retval >> 2] = $tobool39 ? 0 : 0;
  $138 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $138 | 0;
 }
 HEAP32[$token >> 2] = (HEAP32[$token >> 2] | 0) + 3;
 HEAP32[$width >> 2] = _strtol(HEAP32[$token >> 2] | 0, 0, 10) | 0;
 HEAP32[HEAP32[$x$addr >> 2] >> 2] = HEAP32[$width >> 2];
 HEAP32[HEAP32[$y$addr >> 2] >> 2] = HEAP32[$height >> 2];
 if (HEAP32[$comp$addr >> 2] | 0) HEAP32[HEAP32[$comp$addr >> 2] >> 2] = 3;
 if (!(HEAP32[$req_comp$addr >> 2] | 0)) HEAP32[$req_comp$addr >> 2] = 3;
 if (!(_stbi__mad4sizes_valid(HEAP32[$width >> 2] | 0, HEAP32[$height >> 2] | 0, HEAP32[$req_comp$addr >> 2] | 0, 4, 0) | 0)) {
  $tobool55 = (_stbi__err(32985) | 0) != 0;
  HEAP32[$retval >> 2] = $tobool55 ? 0 : 0;
  $138 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $138 | 0;
 }
 HEAP32[$hdr_data >> 2] = _stbi__malloc_mad4(HEAP32[$width >> 2] | 0, HEAP32[$height >> 2] | 0, HEAP32[$req_comp$addr >> 2] | 0, 4, 0) | 0;
 if (!(HEAP32[$hdr_data >> 2] | 0)) {
  $tobool62 = (_stbi__err(32857) | 0) != 0;
  HEAP32[$retval >> 2] = $tobool62 ? 0 : 0;
  $138 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $138 | 0;
 }
 do if ((HEAP32[$width >> 2] | 0) < 8 | (HEAP32[$width >> 2] | 0) >= 32768) {
  HEAP32[$j >> 2] = 0;
  label = 28;
 } else {
  HEAP32[$scanline >> 2] = 0;
  HEAP32[$j >> 2] = 0;
  L46 : while (1) {
   if ((HEAP32[$j >> 2] | 0) >= (HEAP32[$height >> 2] | 0)) {
    label = 64;
    break;
   }
   HEAP32[$c1 >> 2] = (_stbi__get8(HEAP32[$s$addr >> 2] | 0) | 0) & 255;
   HEAP32[$c2 >> 2] = (_stbi__get8(HEAP32[$s$addr >> 2] | 0) | 0) & 255;
   HEAP32[$len >> 2] = (_stbi__get8(HEAP32[$s$addr >> 2] | 0) | 0) & 255;
   if ((HEAP32[$c1 >> 2] | 0) != 2 | (HEAP32[$c2 >> 2] | 0) != 2) {
    label = 37;
    break;
   }
   if (HEAP32[$len >> 2] & 128 | 0) {
    label = 37;
    break;
   }
   HEAP32[$len >> 2] = HEAP32[$len >> 2] << 8;
   $conv118 = (_stbi__get8(HEAP32[$s$addr >> 2] | 0) | 0) & 255;
   HEAP32[$len >> 2] = HEAP32[$len >> 2] | $conv118;
   if ((HEAP32[$len >> 2] | 0) != (HEAP32[$width >> 2] | 0)) {
    label = 39;
    break;
   }
   if (!(HEAP32[$scanline >> 2] | 0)) {
    HEAP32[$scanline >> 2] = _stbi__malloc_mad2(HEAP32[$width >> 2] | 0, 4, 0) | 0;
    if (!(HEAP32[$scanline >> 2] | 0)) {
     label = 42;
     break;
    }
   }
   HEAP32[$k >> 2] = 0;
   while (1) {
    $cmp138 = (HEAP32[$k >> 2] | 0) < 4;
    HEAP32[$i >> 2] = 0;
    if (!$cmp138) break;
    while (1) {
     $sub = (HEAP32[$width >> 2] | 0) - (HEAP32[$i >> 2] | 0) | 0;
     HEAP32[$nleft >> 2] = $sub;
     if (($sub | 0) <= 0) break;
     HEAP8[$count >> 0] = _stbi__get8(HEAP32[$s$addr >> 2] | 0) | 0;
     L61 : do if ((HEAPU8[$count >> 0] | 0) > 128) {
      HEAP8[$value >> 0] = _stbi__get8(HEAP32[$s$addr >> 2] | 0) | 0;
      HEAP8[$count >> 0] = (HEAPU8[$count >> 0] | 0) - 128;
      if ((HEAPU8[$count >> 0] | 0) > (HEAP32[$nleft >> 2] | 0)) {
       label = 49;
       break L46;
      }
      HEAP32[$z >> 2] = 0;
      while (1) {
       if ((HEAP32[$z >> 2] | 0) >= (HEAPU8[$count >> 0] | 0)) break L61;
       $104 = HEAP8[$value >> 0] | 0;
       $105 = HEAP32[$scanline >> 2] | 0;
       $106 = HEAP32[$i >> 2] | 0;
       HEAP32[$i >> 2] = $106 + 1;
       HEAP8[$105 + (($106 << 2) + (HEAP32[$k >> 2] | 0)) >> 0] = $104;
       HEAP32[$z >> 2] = (HEAP32[$z >> 2] | 0) + 1;
      }
     } else {
      if ((HEAPU8[$count >> 0] | 0) > (HEAP32[$nleft >> 2] | 0)) {
       label = 54;
       break L46;
      }
      HEAP32[$z >> 2] = 0;
      while (1) {
       if ((HEAP32[$z >> 2] | 0) >= (HEAPU8[$count >> 0] | 0)) break L61;
       $call187 = _stbi__get8(HEAP32[$s$addr >> 2] | 0) | 0;
       $118 = HEAP32[$scanline >> 2] | 0;
       $119 = HEAP32[$i >> 2] | 0;
       HEAP32[$i >> 2] = $119 + 1;
       HEAP8[$118 + (($119 << 2) + (HEAP32[$k >> 2] | 0)) >> 0] = $call187;
       HEAP32[$z >> 2] = (HEAP32[$z >> 2] | 0) + 1;
      }
     } while (0);
    }
    HEAP32[$k >> 2] = (HEAP32[$k >> 2] | 0) + 1;
   }
   while (1) {
    if ((HEAP32[$i >> 2] | 0) >= (HEAP32[$width >> 2] | 0)) break;
    $mul204 = Math_imul(HEAP32[$j >> 2] | 0, HEAP32[$width >> 2] | 0) | 0;
    $add$ptr207 = (HEAP32[$hdr_data >> 2] | 0) + ((Math_imul($mul204 + (HEAP32[$i >> 2] | 0) | 0, HEAP32[$req_comp$addr >> 2] | 0) | 0) << 2) | 0;
    _stbi__hdr_convert($add$ptr207, (HEAP32[$scanline >> 2] | 0) + (HEAP32[$i >> 2] << 2) | 0, HEAP32[$req_comp$addr >> 2] | 0);
    HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
   }
   HEAP32[$j >> 2] = (HEAP32[$j >> 2] | 0) + 1;
  }
  if ((label | 0) == 37) {
   HEAP8[$rgbe106 >> 0] = HEAP32[$c1 >> 2];
   HEAP8[$rgbe106 + 1 >> 0] = HEAP32[$c2 >> 2];
   HEAP8[$rgbe106 + 2 >> 0] = HEAP32[$len >> 2];
   HEAP8[$rgbe106 + 3 >> 0] = _stbi__get8(HEAP32[$s$addr >> 2] | 0) | 0;
   _stbi__hdr_convert(HEAP32[$hdr_data >> 2] | 0, $rgbe106, HEAP32[$req_comp$addr >> 2] | 0);
   HEAP32[$i >> 2] = 1;
   HEAP32[$j >> 2] = 0;
   _free(HEAP32[$scanline >> 2] | 0);
   label = 31;
   break;
  } else if ((label | 0) == 39) {
   _free(HEAP32[$hdr_data >> 2] | 0);
   _free(HEAP32[$scanline >> 2] | 0);
   $tobool123 = (_stbi__err(32995) | 0) != 0;
   HEAP32[$retval >> 2] = $tobool123 ? 0 : 0;
   $138 = HEAP32[$retval >> 2] | 0;
   STACKTOP = sp;
   return $138 | 0;
  } else if ((label | 0) == 42) {
   _free(HEAP32[$hdr_data >> 2] | 0);
   $tobool133 = (_stbi__err(32857) | 0) != 0;
   HEAP32[$retval >> 2] = $tobool133 ? 0 : 0;
   $138 = HEAP32[$retval >> 2] | 0;
   STACKTOP = sp;
   return $138 | 0;
  } else if ((label | 0) == 49) {
   _free(HEAP32[$hdr_data >> 2] | 0);
   _free(HEAP32[$scanline >> 2] | 0);
   $tobool159 = (_stbi__err(33027) | 0) != 0;
   HEAP32[$retval >> 2] = $tobool159 ? 0 : 0;
   $138 = HEAP32[$retval >> 2] | 0;
   STACKTOP = sp;
   return $138 | 0;
  } else if ((label | 0) == 54) {
   _free(HEAP32[$hdr_data >> 2] | 0);
   _free(HEAP32[$scanline >> 2] | 0);
   $tobool179 = (_stbi__err(33027) | 0) != 0;
   HEAP32[$retval >> 2] = $tobool179 ? 0 : 0;
   $138 = HEAP32[$retval >> 2] | 0;
   STACKTOP = sp;
   return $138 | 0;
  } else if ((label | 0) == 64) {
   if (!(HEAP32[$scanline >> 2] | 0)) {
    label = 66;
    break;
   }
   _free(HEAP32[$scanline >> 2] | 0);
   label = 66;
   break;
  }
 } while (0);
 while (1) {
  if ((label | 0) == 28) {
   label = 0;
   if ((HEAP32[$j >> 2] | 0) >= (HEAP32[$height >> 2] | 0)) {
    label = 66;
    continue;
   }
   HEAP32[$i >> 2] = 0;
  } else if ((label | 0) == 31) {
   label = 0;
   _stbi__getn(HEAP32[$s$addr >> 2] | 0, $rgbe, 4) | 0;
   $mul = Math_imul(HEAP32[$j >> 2] | 0, HEAP32[$width >> 2] | 0) | 0;
   $add$ptr80 = (HEAP32[$hdr_data >> 2] | 0) + ((Math_imul($mul, HEAP32[$req_comp$addr >> 2] | 0) | 0) << 2) | 0;
   $add$ptr82 = $add$ptr80 + ((Math_imul(HEAP32[$i >> 2] | 0, HEAP32[$req_comp$addr >> 2] | 0) | 0) << 2) | 0;
   _stbi__hdr_convert($add$ptr82, $rgbe, HEAP32[$req_comp$addr >> 2] | 0);
   HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
  } else if ((label | 0) == 66) {
   label = 0;
   HEAP32[$retval >> 2] = HEAP32[$hdr_data >> 2];
   break;
  }
  if ((HEAP32[$i >> 2] | 0) < (HEAP32[$width >> 2] | 0)) {
   label = 31;
   continue;
  }
  HEAP32[$j >> 2] = (HEAP32[$j >> 2] | 0) + 1;
  label = 28;
 }
 $138 = HEAP32[$retval >> 2] | 0;
 STACKTOP = sp;
 return $138 | 0;
}

function __ZN4tson3MapaSEOS0_($this, $0) {
 $this = $this | 0;
 $0 = $0 | 0;
 var $1 = 0, $12 = 0, $16 = 0, $20 = 0, $24 = 0, $28 = 0, $31 = 0, $36 = 0, $37 = 0, $42 = 0, $46 = 0, $6 = 0, $7 = 0, $__cap_$i$i$i$i$i = 0, $__cap_$i$i$i$i$i100 = 0, $__cap_$i$i$i$i$i118 = 0, $__cap_$i$i$i$i$i27 = 0, $__cap_$i$i$i$i$i45 = 0, $__cap_$i$i$i$i$i63 = 0, $__cap_$i$i$i$i$i81 = 0, $__size_$i1$i$i$i$i = 0, $__size_$i1$i$i$i$i109 = 0, $__size_$i1$i$i$i$i18 = 0, $__size_$i1$i$i$i$i36 = 0, $__size_$i1$i$i$i$i54 = 0, $__size_$i1$i$i$i$i72 = 0, $__size_$i1$i$i$i$i91 = 0, $agg$tmp$i87 = 0, $agg$tmp$i87$byval_copy = 0, $m_orientation = 0, $m_orientation5 = 0, $m_renderOrder = 0, $m_renderOrder9 = 0, $m_staggerAxis = 0, $m_staggerAxis11 = 0, $m_staggerIndex = 0, $m_staggerIndex13 = 0, $m_statusMessage = 0, $m_statusMessage23 = 0, $m_tiledVersion = 0, $m_tiledVersion15 = 0, $m_type = 0, $m_type20 = 0, $m_version = 0, $m_version22 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $agg$tmp$i87$byval_copy = sp + 1 | 0;
 $agg$tmp$i87 = sp;
 HEAP32[$this >> 2] = HEAP32[$0 >> 2];
 HEAP32[$this + 4 >> 2] = HEAP32[$0 + 4 >> 2];
 HEAP32[$this + 8 >> 2] = HEAP32[$0 + 8 >> 2];
 HEAP32[$this + 12 >> 2] = HEAP32[$0 + 12 >> 2];
 HEAP8[$this + 16 >> 0] = HEAP8[$0 + 16 >> 0] | 0;
 HEAP8[$agg$tmp$i87$byval_copy >> 0] = HEAP8[$agg$tmp$i87 >> 0] | 0;
 __ZNSt3__26vectorIN4tson5LayerENS_9allocatorIS2_EEE13__move_assignERS5_NS_17integral_constantIbLb1EEE($this + 20 | 0, $0 + 20 | 0, $agg$tmp$i87$byval_copy);
 $1 = $0 + 32 | 0;
 $6 = HEAP32[$1 + 4 >> 2] | 0;
 $7 = $this + 32 | 0;
 HEAP32[$7 >> 2] = HEAP32[$1 >> 2];
 HEAP32[$7 + 4 >> 2] = $6;
 $m_orientation = $this + 40 | 0;
 $m_orientation5 = $0 + 40 | 0;
 $__size_$i1$i$i$i$i = $m_orientation + 11 | 0;
 if ((HEAP8[$__size_$i1$i$i$i$i >> 0] | 0) < 0) {
  $12 = HEAP32[$m_orientation >> 2] | 0;
  HEAP8[$agg$tmp$i87$byval_copy >> 0] = 0;
  __ZNSt3__211char_traitsIcE6assignERcRKc($12, $agg$tmp$i87$byval_copy);
  HEAP32[$this + 44 >> 2] = 0;
  if ((HEAP8[$__size_$i1$i$i$i$i >> 0] | 0) < 0) {
   $__cap_$i$i$i$i$i = $this + 48 | 0;
   __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm(HEAP32[$m_orientation >> 2] | 0, HEAP32[$__cap_$i$i$i$i$i >> 2] & 2147483647);
   HEAP32[$__cap_$i$i$i$i$i >> 2] = 0;
  }
 } else {
  HEAP8[$agg$tmp$i87$byval_copy >> 0] = 0;
  __ZNSt3__211char_traitsIcE6assignERcRKc($m_orientation, $agg$tmp$i87$byval_copy);
  HEAP8[$__size_$i1$i$i$i$i >> 0] = 0;
 };
 HEAP32[$m_orientation >> 2] = HEAP32[$m_orientation5 >> 2];
 HEAP32[$m_orientation + 4 >> 2] = HEAP32[$m_orientation5 + 4 >> 2];
 HEAP32[$m_orientation + 8 >> 2] = HEAP32[$m_orientation5 + 8 >> 2];
 HEAP32[$m_orientation5 >> 2] = 0;
 HEAP32[$m_orientation5 + 4 >> 2] = 0;
 HEAP32[$m_orientation5 + 8 >> 2] = 0;
 __ZN4tson18PropertyCollectionaSEOS0_($this + 52 | 0, $0 + 52 | 0) | 0;
 $m_renderOrder = $this + 76 | 0;
 $m_renderOrder9 = $0 + 76 | 0;
 $__size_$i1$i$i$i$i18 = $m_renderOrder + 11 | 0;
 if ((HEAP8[$__size_$i1$i$i$i$i18 >> 0] | 0) < 0) {
  $16 = HEAP32[$m_renderOrder >> 2] | 0;
  HEAP8[$agg$tmp$i87$byval_copy >> 0] = 0;
  __ZNSt3__211char_traitsIcE6assignERcRKc($16, $agg$tmp$i87$byval_copy);
  HEAP32[$this + 80 >> 2] = 0;
  if ((HEAP8[$__size_$i1$i$i$i$i18 >> 0] | 0) < 0) {
   $__cap_$i$i$i$i$i27 = $this + 84 | 0;
   __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm(HEAP32[$m_renderOrder >> 2] | 0, HEAP32[$__cap_$i$i$i$i$i27 >> 2] & 2147483647);
   HEAP32[$__cap_$i$i$i$i$i27 >> 2] = 0;
  }
 } else {
  HEAP8[$agg$tmp$i87$byval_copy >> 0] = 0;
  __ZNSt3__211char_traitsIcE6assignERcRKc($m_renderOrder, $agg$tmp$i87$byval_copy);
  HEAP8[$__size_$i1$i$i$i$i18 >> 0] = 0;
 };
 HEAP32[$m_renderOrder >> 2] = HEAP32[$m_renderOrder9 >> 2];
 HEAP32[$m_renderOrder + 4 >> 2] = HEAP32[$m_renderOrder9 + 4 >> 2];
 HEAP32[$m_renderOrder + 8 >> 2] = HEAP32[$m_renderOrder9 + 8 >> 2];
 HEAP32[$m_renderOrder9 >> 2] = 0;
 HEAP32[$m_renderOrder9 + 4 >> 2] = 0;
 HEAP32[$m_renderOrder9 + 8 >> 2] = 0;
 $m_staggerAxis = $this + 88 | 0;
 $m_staggerAxis11 = $0 + 88 | 0;
 $__size_$i1$i$i$i$i36 = $m_staggerAxis + 11 | 0;
 if ((HEAP8[$__size_$i1$i$i$i$i36 >> 0] | 0) < 0) {
  $20 = HEAP32[$m_staggerAxis >> 2] | 0;
  HEAP8[$agg$tmp$i87$byval_copy >> 0] = 0;
  __ZNSt3__211char_traitsIcE6assignERcRKc($20, $agg$tmp$i87$byval_copy);
  HEAP32[$this + 92 >> 2] = 0;
  if ((HEAP8[$__size_$i1$i$i$i$i36 >> 0] | 0) < 0) {
   $__cap_$i$i$i$i$i45 = $this + 96 | 0;
   __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm(HEAP32[$m_staggerAxis >> 2] | 0, HEAP32[$__cap_$i$i$i$i$i45 >> 2] & 2147483647);
   HEAP32[$__cap_$i$i$i$i$i45 >> 2] = 0;
  }
 } else {
  HEAP8[$agg$tmp$i87$byval_copy >> 0] = 0;
  __ZNSt3__211char_traitsIcE6assignERcRKc($m_staggerAxis, $agg$tmp$i87$byval_copy);
  HEAP8[$__size_$i1$i$i$i$i36 >> 0] = 0;
 };
 HEAP32[$m_staggerAxis >> 2] = HEAP32[$m_staggerAxis11 >> 2];
 HEAP32[$m_staggerAxis + 4 >> 2] = HEAP32[$m_staggerAxis11 + 4 >> 2];
 HEAP32[$m_staggerAxis + 8 >> 2] = HEAP32[$m_staggerAxis11 + 8 >> 2];
 HEAP32[$m_staggerAxis11 >> 2] = 0;
 HEAP32[$m_staggerAxis11 + 4 >> 2] = 0;
 HEAP32[$m_staggerAxis11 + 8 >> 2] = 0;
 $m_staggerIndex = $this + 100 | 0;
 $m_staggerIndex13 = $0 + 100 | 0;
 $__size_$i1$i$i$i$i54 = $m_staggerIndex + 11 | 0;
 if ((HEAP8[$__size_$i1$i$i$i$i54 >> 0] | 0) < 0) {
  $24 = HEAP32[$m_staggerIndex >> 2] | 0;
  HEAP8[$agg$tmp$i87$byval_copy >> 0] = 0;
  __ZNSt3__211char_traitsIcE6assignERcRKc($24, $agg$tmp$i87$byval_copy);
  HEAP32[$this + 104 >> 2] = 0;
  if ((HEAP8[$__size_$i1$i$i$i$i54 >> 0] | 0) < 0) {
   $__cap_$i$i$i$i$i63 = $this + 108 | 0;
   __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm(HEAP32[$m_staggerIndex >> 2] | 0, HEAP32[$__cap_$i$i$i$i$i63 >> 2] & 2147483647);
   HEAP32[$__cap_$i$i$i$i$i63 >> 2] = 0;
  }
 } else {
  HEAP8[$agg$tmp$i87$byval_copy >> 0] = 0;
  __ZNSt3__211char_traitsIcE6assignERcRKc($m_staggerIndex, $agg$tmp$i87$byval_copy);
  HEAP8[$__size_$i1$i$i$i$i54 >> 0] = 0;
 };
 HEAP32[$m_staggerIndex >> 2] = HEAP32[$m_staggerIndex13 >> 2];
 HEAP32[$m_staggerIndex + 4 >> 2] = HEAP32[$m_staggerIndex13 + 4 >> 2];
 HEAP32[$m_staggerIndex + 8 >> 2] = HEAP32[$m_staggerIndex13 + 8 >> 2];
 HEAP32[$m_staggerIndex13 >> 2] = 0;
 HEAP32[$m_staggerIndex13 + 4 >> 2] = 0;
 HEAP32[$m_staggerIndex13 + 8 >> 2] = 0;
 $m_tiledVersion = $this + 112 | 0;
 $m_tiledVersion15 = $0 + 112 | 0;
 $__size_$i1$i$i$i$i72 = $m_tiledVersion + 11 | 0;
 if ((HEAP8[$__size_$i1$i$i$i$i72 >> 0] | 0) < 0) {
  $28 = HEAP32[$m_tiledVersion >> 2] | 0;
  HEAP8[$agg$tmp$i87$byval_copy >> 0] = 0;
  __ZNSt3__211char_traitsIcE6assignERcRKc($28, $agg$tmp$i87$byval_copy);
  HEAP32[$this + 116 >> 2] = 0;
  if ((HEAP8[$__size_$i1$i$i$i$i72 >> 0] | 0) < 0) {
   $__cap_$i$i$i$i$i81 = $this + 120 | 0;
   __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm(HEAP32[$m_tiledVersion >> 2] | 0, HEAP32[$__cap_$i$i$i$i$i81 >> 2] & 2147483647);
   HEAP32[$__cap_$i$i$i$i$i81 >> 2] = 0;
  }
 } else {
  HEAP8[$agg$tmp$i87$byval_copy >> 0] = 0;
  __ZNSt3__211char_traitsIcE6assignERcRKc($m_tiledVersion, $agg$tmp$i87$byval_copy);
  HEAP8[$__size_$i1$i$i$i$i72 >> 0] = 0;
 };
 HEAP32[$m_tiledVersion >> 2] = HEAP32[$m_tiledVersion15 >> 2];
 HEAP32[$m_tiledVersion + 4 >> 2] = HEAP32[$m_tiledVersion15 + 4 >> 2];
 HEAP32[$m_tiledVersion + 8 >> 2] = HEAP32[$m_tiledVersion15 + 8 >> 2];
 HEAP32[$m_tiledVersion15 >> 2] = 0;
 HEAP32[$m_tiledVersion15 + 4 >> 2] = 0;
 HEAP32[$m_tiledVersion15 + 8 >> 2] = 0;
 $31 = $0 + 124 | 0;
 $36 = HEAP32[$31 + 4 >> 2] | 0;
 $37 = $this + 124 | 0;
 HEAP32[$37 >> 2] = HEAP32[$31 >> 2];
 HEAP32[$37 + 4 >> 2] = $36;
 HEAP8[$agg$tmp$i87$byval_copy >> 0] = HEAP8[$agg$tmp$i87 >> 0] | 0;
 __ZNSt3__26vectorIN4tson7TilesetENS_9allocatorIS2_EEE13__move_assignERS5_NS_17integral_constantIbLb1EEE($this + 132 | 0, $0 + 132 | 0, $agg$tmp$i87$byval_copy);
 $m_type = $this + 144 | 0;
 $m_type20 = $0 + 144 | 0;
 $__size_$i1$i$i$i$i91 = $m_type + 11 | 0;
 if ((HEAP8[$__size_$i1$i$i$i$i91 >> 0] | 0) < 0) {
  $42 = HEAP32[$m_type >> 2] | 0;
  HEAP8[$agg$tmp$i87$byval_copy >> 0] = 0;
  __ZNSt3__211char_traitsIcE6assignERcRKc($42, $agg$tmp$i87$byval_copy);
  HEAP32[$this + 148 >> 2] = 0;
  if ((HEAP8[$__size_$i1$i$i$i$i91 >> 0] | 0) < 0) {
   $__cap_$i$i$i$i$i100 = $this + 152 | 0;
   __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm(HEAP32[$m_type >> 2] | 0, HEAP32[$__cap_$i$i$i$i$i100 >> 2] & 2147483647);
   HEAP32[$__cap_$i$i$i$i$i100 >> 2] = 0;
  }
 } else {
  HEAP8[$agg$tmp$i87$byval_copy >> 0] = 0;
  __ZNSt3__211char_traitsIcE6assignERcRKc($m_type, $agg$tmp$i87$byval_copy);
  HEAP8[$__size_$i1$i$i$i$i91 >> 0] = 0;
 };
 HEAP32[$m_type >> 2] = HEAP32[$m_type20 >> 2];
 HEAP32[$m_type + 4 >> 2] = HEAP32[$m_type20 + 4 >> 2];
 HEAP32[$m_type + 8 >> 2] = HEAP32[$m_type20 + 8 >> 2];
 HEAP32[$m_type20 >> 2] = 0;
 HEAP32[$m_type20 + 4 >> 2] = 0;
 HEAP32[$m_type20 + 8 >> 2] = 0;
 $m_version = $this + 156 | 0;
 $m_version22 = $0 + 156 | 0;
 HEAP32[$m_version >> 2] = HEAP32[$m_version22 >> 2];
 HEAP8[$m_version + 4 >> 0] = HEAP8[$m_version22 + 4 >> 0] | 0;
 $m_statusMessage = $this + 164 | 0;
 $m_statusMessage23 = $0 + 164 | 0;
 $__size_$i1$i$i$i$i109 = $m_statusMessage + 11 | 0;
 if ((HEAP8[$__size_$i1$i$i$i$i109 >> 0] | 0) < 0) {
  $46 = HEAP32[$m_statusMessage >> 2] | 0;
  HEAP8[$agg$tmp$i87$byval_copy >> 0] = 0;
  __ZNSt3__211char_traitsIcE6assignERcRKc($46, $agg$tmp$i87$byval_copy);
  HEAP32[$this + 168 >> 2] = 0;
  if ((HEAP8[$__size_$i1$i$i$i$i109 >> 0] | 0) < 0) {
   $__cap_$i$i$i$i$i118 = $this + 172 | 0;
   __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm(HEAP32[$m_statusMessage >> 2] | 0, HEAP32[$__cap_$i$i$i$i$i118 >> 2] & 2147483647);
   HEAP32[$__cap_$i$i$i$i$i118 >> 2] = 0;
  }
 } else {
  HEAP8[$agg$tmp$i87$byval_copy >> 0] = 0;
  __ZNSt3__211char_traitsIcE6assignERcRKc($m_statusMessage, $agg$tmp$i87$byval_copy);
  HEAP8[$__size_$i1$i$i$i$i109 >> 0] = 0;
 };
 HEAP32[$m_statusMessage >> 2] = HEAP32[$m_statusMessage23 >> 2];
 HEAP32[$m_statusMessage + 4 >> 2] = HEAP32[$m_statusMessage23 + 4 >> 2];
 HEAP32[$m_statusMessage + 8 >> 2] = HEAP32[$m_statusMessage23 + 8 >> 2];
 HEAP32[$m_statusMessage23 >> 2] = 0;
 HEAP32[$m_statusMessage23 + 4 >> 2] = 0;
 HEAP32[$m_statusMessage23 + 8 >> 2] = 0;
 __ZNSt3__26__treeINS_12__value_typeIiPN4tson4TileEEENS_19__map_value_compareIiS5_NS_4lessIiEELb1EEENS_9allocatorIS5_EEEaSEOSC_($this + 176 | 0, $0 + 176 | 0) | 0;
 STACKTOP = sp;
 return $this | 0;
}

function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($this, $__b, $__e, $__iob, $__err, $__tm, $__fmtb, $__fmte) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__tm = $__tm | 0;
 $__fmtb = $__fmtb | 0;
 $__fmte = $__fmte | 0;
 var $$ph = 0, $0 = 0, $1 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $27 = 0, $28 = 0, $3 = 0, $32 = 0, $33 = 0, $37 = 0, $38 = 0, $43 = 0, $47 = 0, $48 = 0, $55 = 0, $59 = 0, $60 = 0, $64 = 0, $65 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $8 = 0, $9 = 0, $__cmd$0 = 0, $__einp_$i$i = 0, $__einp_$i$i107 = 0, $__fmtb$addr$0 = 0, $__fmtb$addr$0$pn = 0, $__fmtb$addr$3 = 0, $__fmtb$addr$3$lcssa = 0, $__fmtb$addr$4 = 0, $__ninp_$i$i = 0, $__ninp_$i$i106 = 0, $__opt$0 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $agg$tmp23 = 0, $agg$tmp23$byval_copy = 0, $call$i = 0, $call$i119 = 0, $call$i40 = 0, $incdec$ptr = 0, $incdec$ptr16 = 0, $retval$0$i$i = 0, $retval$0$i$i$i$i = 0, $retval$0$i$i$i$i147 = 0, $retval$0$i$i$i$i62 = 0, $retval$0$i$i115 = 0, $retval$0$i$i13$i$i = 0, $retval$0$i$i13$i$i168 = 0, $retval$0$i$i13$i$i83 = 0, $retval$sroa$0$0$copyload = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $agg$tmp23$byval_copy = sp + 12 | 0;
 $agg$tmp$byval_copy = sp + 8 | 0;
 $agg$tmp = sp + 4 | 0;
 $agg$tmp23 = sp;
 __ZNKSt3__28ios_base6getlocEv($agg$tmp23$byval_copy, $__iob);
 $call$i = __ZNKSt3__26locale9use_facetERNS0_2idE($agg$tmp23$byval_copy, 61248) | 0;
 __ZNSt3__26localeD2Ev($agg$tmp23$byval_copy);
 HEAP32[$__err >> 2] = 0;
 $0 = 0;
 $__fmtb$addr$0 = $__fmtb;
 L1 : while (1) {
  $1 = HEAP32[$__b >> 2] | 0;
  if (!(($__fmtb$addr$0 | 0) != ($__fmte | 0) & ($0 | 0) == 0)) {
   $59 = $1;
   break;
  }
  $2 = $1;
  if (!$1) {
   $20 = $2;
   $47 = 0;
   $70 = 1;
  } else {
   $3 = HEAP32[$1 + 12 >> 2] | 0;
   if (($3 | 0) == (HEAP32[$1 + 16 >> 2] | 0)) $retval$0$i$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$1 >> 2] | 0) + 36 >> 2] & 127]($1) | 0; else $retval$0$i$i$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$3 >> 2] | 0) | 0;
   if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i$i$i, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
    HEAP32[$__b >> 2] = 0;
    $20 = 0;
    $47 = 0;
    $70 = 1;
   } else {
    $20 = $2;
    $47 = $1;
    $70 = 0;
   }
  }
  $7 = HEAP32[$__e >> 2] | 0;
  $8 = $7;
  do if (!$7) {
   $$ph = $8;
   label = 15;
  } else {
   $9 = HEAP32[$7 + 12 >> 2] | 0;
   if (($9 | 0) == (HEAP32[$7 + 16 >> 2] | 0)) $retval$0$i$i13$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$7 >> 2] | 0) + 36 >> 2] & 127]($7) | 0; else $retval$0$i$i13$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$9 >> 2] | 0) | 0;
   if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i13$i$i, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
    HEAP32[$__e >> 2] = 0;
    $$ph = 0;
    label = 15;
    break;
   } else if ($70) {
    $21 = $8;
    $71 = $7;
    break;
   } else {
    label = 60;
    break L1;
   }
  } while (0);
  if ((label | 0) == 15) {
   label = 0;
   if ($70) {
    label = 60;
    break;
   } else {
    $21 = $$ph;
    $71 = 0;
   }
  }
  L24 : do if ((FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$call$i >> 2] | 0) + 52 >> 2] & 63]($call$i, HEAP32[$__fmtb$addr$0 >> 2] | 0, 0) | 0) << 24 >> 24 == 37) {
   $incdec$ptr = $__fmtb$addr$0 + 4 | 0;
   if (($incdec$ptr | 0) == ($__fmte | 0)) {
    label = 60;
    break L1;
   }
   $call$i40 = FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$call$i >> 2] | 0) + 52 >> 2] & 63]($call$i, HEAP32[$incdec$ptr >> 2] | 0, 0) | 0;
   switch ($call$i40 << 24 >> 24) {
   case 48:
   case 69:
    {
     $incdec$ptr16 = $__fmtb$addr$0 + 8 | 0;
     if (($incdec$ptr16 | 0) == ($__fmte | 0)) {
      label = 60;
      break L1;
     }
     $22 = $incdec$ptr;
     $__cmd$0 = FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$call$i >> 2] | 0) + 52 >> 2] & 63]($call$i, HEAP32[$incdec$ptr16 >> 2] | 0, 0) | 0;
     $__opt$0 = $call$i40;
     break;
    }
   default:
    {
     $22 = $__fmtb$addr$0;
     $__cmd$0 = $call$i40;
     $__opt$0 = 0;
    }
   }
   $19 = HEAP32[(HEAP32[$this >> 2] | 0) + 36 >> 2] | 0;
   HEAP32[$agg$tmp >> 2] = $20;
   HEAP32[$agg$tmp23 >> 2] = $21;
   HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
   HEAP32[$agg$tmp23$byval_copy >> 2] = HEAP32[$agg$tmp23 >> 2];
   HEAP32[$__b >> 2] = FUNCTION_TABLE_iiiiiiiii[$19 & 15]($this, $agg$tmp$byval_copy, $agg$tmp23$byval_copy, $__iob, $__err, $__tm, $__cmd$0, $__opt$0) | 0;
   $__fmtb$addr$4 = $22 + 8 | 0;
  } else {
   if (!(FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$call$i >> 2] | 0) + 12 >> 2] & 63]($call$i, 8192, HEAP32[$__fmtb$addr$0 >> 2] | 0) | 0)) {
    $__ninp_$i$i106 = $47 + 12 | 0;
    $48 = HEAP32[$__ninp_$i$i106 >> 2] | 0;
    $__einp_$i$i107 = $47 + 16 | 0;
    if (($48 | 0) == (HEAP32[$__einp_$i$i107 >> 2] | 0)) $retval$0$i$i115 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$47 >> 2] | 0) + 36 >> 2] & 127]($47) | 0; else $retval$0$i$i115 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$48 >> 2] | 0) | 0;
    $call$i119 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$call$i >> 2] | 0) + 28 >> 2] & 31]($call$i, $retval$0$i$i115) | 0;
    if (($call$i119 | 0) != (FUNCTION_TABLE_iii[HEAP32[(HEAP32[$call$i >> 2] | 0) + 28 >> 2] & 31]($call$i, HEAP32[$__fmtb$addr$0 >> 2] | 0) | 0)) {
     HEAP32[$__err >> 2] = 4;
     $__fmtb$addr$4 = $__fmtb$addr$0;
     break;
    }
    $55 = HEAP32[$__ninp_$i$i106 >> 2] | 0;
    if (($55 | 0) == (HEAP32[$__einp_$i$i107 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[$47 >> 2] | 0) + 40 >> 2] & 127]($47) | 0; else {
     HEAP32[$__ninp_$i$i106 >> 2] = $55 + 4;
     __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$55 >> 2] | 0) | 0;
    }
    $__fmtb$addr$4 = $__fmtb$addr$0 + 4 | 0;
    break;
   }
   $__fmtb$addr$0$pn = $__fmtb$addr$0;
   while (1) {
    $__fmtb$addr$3 = $__fmtb$addr$0$pn + 4 | 0;
    if (($__fmtb$addr$3 | 0) == ($__fmte | 0)) {
     $__fmtb$addr$3$lcssa = $__fmte;
     break;
    }
    if (FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$call$i >> 2] | 0) + 12 >> 2] & 63]($call$i, 8192, HEAP32[$__fmtb$addr$3 >> 2] | 0) | 0) $__fmtb$addr$0$pn = $__fmtb$addr$3; else {
     $__fmtb$addr$3$lcssa = $__fmtb$addr$3;
     break;
    }
   }
   $27 = $47;
   $32 = $71;
   while (1) {
    if (!$27) {
     $37 = 0;
     $72 = 1;
    } else {
     $28 = HEAP32[$27 + 12 >> 2] | 0;
     if (($28 | 0) == (HEAP32[$27 + 16 >> 2] | 0)) $retval$0$i$i$i$i62 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$27 >> 2] | 0) + 36 >> 2] & 127]($27) | 0; else $retval$0$i$i$i$i62 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$28 >> 2] | 0) | 0;
     if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i$i$i62, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
      HEAP32[$__b >> 2] = 0;
      $37 = 0;
      $72 = 1;
     } else {
      $37 = $27;
      $72 = 0;
     }
    }
    do if (!$32) label = 40; else {
     $33 = HEAP32[$32 + 12 >> 2] | 0;
     if (($33 | 0) == (HEAP32[$32 + 16 >> 2] | 0)) $retval$0$i$i13$i$i83 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$32 >> 2] | 0) + 36 >> 2] & 127]($32) | 0; else $retval$0$i$i13$i$i83 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$33 >> 2] | 0) | 0;
     if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i13$i$i83, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
      HEAP32[$__e >> 2] = 0;
      label = 40;
      break;
     } else if ($72) {
      $73 = $32;
      break;
     } else {
      $__fmtb$addr$4 = $__fmtb$addr$3$lcssa;
      break L24;
     }
    } while (0);
    if ((label | 0) == 40) {
     label = 0;
     if ($72) {
      $__fmtb$addr$4 = $__fmtb$addr$3$lcssa;
      break L24;
     } else $73 = 0;
    }
    $__ninp_$i$i = $37 + 12 | 0;
    $38 = HEAP32[$__ninp_$i$i >> 2] | 0;
    $__einp_$i$i = $37 + 16 | 0;
    if (($38 | 0) == (HEAP32[$__einp_$i$i >> 2] | 0)) $retval$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$37 >> 2] | 0) + 36 >> 2] & 127]($37) | 0; else $retval$0$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$38 >> 2] | 0) | 0;
    if (!(FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$call$i >> 2] | 0) + 12 >> 2] & 63]($call$i, 8192, $retval$0$i$i) | 0)) {
     $__fmtb$addr$4 = $__fmtb$addr$3$lcssa;
     break L24;
    }
    $43 = HEAP32[$__ninp_$i$i >> 2] | 0;
    if (($43 | 0) == (HEAP32[$__einp_$i$i >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[$37 >> 2] | 0) + 40 >> 2] & 127]($37) | 0; else {
     HEAP32[$__ninp_$i$i >> 2] = $43 + 4;
     __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$43 >> 2] | 0) | 0;
    }
    $27 = $37;
    $32 = $73;
   }
  } while (0);
  $0 = HEAP32[$__err >> 2] | 0;
  $__fmtb$addr$0 = $__fmtb$addr$4;
 }
 if ((label | 0) == 60) {
  HEAP32[$__err >> 2] = 4;
  $59 = $47;
 }
 if (!$59) {
  $74 = 1;
  $retval$sroa$0$0$copyload = 0;
 } else {
  $60 = HEAP32[$59 + 12 >> 2] | 0;
  if (($60 | 0) == (HEAP32[$59 + 16 >> 2] | 0)) $retval$0$i$i$i$i147 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$59 >> 2] | 0) + 36 >> 2] & 127]($59) | 0; else $retval$0$i$i$i$i147 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$60 >> 2] | 0) | 0;
  if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i$i$i147, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
   HEAP32[$__b >> 2] = 0;
   $74 = 1;
   $retval$sroa$0$0$copyload = 0;
  } else {
   $74 = 0;
   $retval$sroa$0$0$copyload = $59;
  }
 }
 $64 = HEAP32[$__e >> 2] | 0;
 do if (!$64) label = 73; else {
  $65 = HEAP32[$64 + 12 >> 2] | 0;
  if (($65 | 0) == (HEAP32[$64 + 16 >> 2] | 0)) $retval$0$i$i13$i$i168 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$64 >> 2] | 0) + 36 >> 2] & 127]($64) | 0; else $retval$0$i$i13$i$i168 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$65 >> 2] | 0) | 0;
  if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i13$i$i168, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
   HEAP32[$__e >> 2] = 0;
   label = 73;
   break;
  } else if ($74) break; else {
   label = 75;
   break;
  }
 } while (0);
 if ((label | 0) == 73) if ($74) label = 75;
 if ((label | 0) == 75) HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
 STACKTOP = sp;
 return $retval$sroa$0$0$copyload | 0;
}

function __ZN8nlohmann6detail6parserINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE5parseEbRSD_($this, $strict, $result) {
 $this = $this | 0;
 $strict = $strict | 0;
 $result = $result | 0;
 var $agg$tmp = 0, $agg$tmp39 = 0, $agg$tmp45 = 0, $agg$tmp98 = 0, $call11 = 0, $call66 = 0, $m_lexer = 0, $m_lexer63 = 0, $ref$tmp = 0, $ref$tmp15 = 0, $ref$tmp16 = 0, $ref$tmp18 = 0, $ref$tmp19 = 0, $sdp = 0, $tmp = 0, $tmp64 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(256);
 $sdp = sp + 48 | 0;
 $agg$tmp = sp + 216 | 0;
 $tmp = sp + 184 | 0;
 $ref$tmp = sp + 232 | 0;
 $ref$tmp15 = sp + 196 | 0;
 $ref$tmp16 = sp + 172 | 0;
 $ref$tmp18 = sp + 160 | 0;
 $ref$tmp19 = sp + 148 | 0;
 $agg$tmp39 = sp + 32 | 0;
 $agg$tmp45 = sp + 16 | 0;
 $tmp64 = sp + 136 | 0;
 $agg$tmp98 = sp;
 if (HEAP8[(HEAP32[$this + 12 >> 2] | 0) + 8 >> 0] | 0) {
  __ZN8nlohmann6detail19json_sax_dom_parserINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEEC2ERSD_b($sdp, $result, (HEAP8[$this + 112 >> 0] | 0) != 0);
  __ZN8nlohmann6detail6parserINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE18sax_parse_internalINS0_19json_sax_dom_parserISD_EEEEbPT_($this, $sdp) | 0;
  __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE16assert_invariantEv($result);
  if ($strict) if ((__ZN8nlohmann6detail6parserINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE9get_tokenEv($this) | 0) != 15) {
   $m_lexer63 = $this + 24 | 0;
   __ZNK8nlohmann6detail5lexerINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE12get_positionEv($tmp64, $m_lexer63);
   $call66 = __ZNK8nlohmann6detail10position_tcvmEv($tmp64) | 0;
   __ZNK8nlohmann6detail5lexerINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE16get_token_stringEv($ref$tmp, $m_lexer63);
   __ZNK8nlohmann6detail5lexerINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE12get_positionEv($ref$tmp16, $m_lexer63);
   HEAP32[$ref$tmp19 >> 2] = 0;
   HEAP32[$ref$tmp19 + 4 >> 2] = 0;
   HEAP32[$ref$tmp19 + 8 >> 2] = 0;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcm($ref$tmp19, 22596, __ZNSt3__211char_traitsIcE6lengthEPKc(22596) | 0);
   __ZN8nlohmann6detail6parserINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE17exception_messageENS0_5lexerISD_E10token_typeERKSB_($ref$tmp18, $this, 15, $ref$tmp19);
   __ZN8nlohmann6detail11parse_error6createEiRKNS0_10position_tERKNSt3__212basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEE($ref$tmp15, 101, $ref$tmp16, $ref$tmp18);
   __ZN8nlohmann6detail19json_sax_dom_parserINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE11parse_errorEmRKSB_RKNS0_9exceptionE($sdp, $call66, $ref$tmp, $ref$tmp15) | 0;
   __ZN8nlohmann6detail9exceptionD2Ev($ref$tmp15);
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp18);
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp19);
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp);
  }
  if (__ZNK8nlohmann6detail19json_sax_dom_parserINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE10is_erroredEv($sdp) | 0) {
   __ZN8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEC2ENS_6detail7value_tE($agg$tmp98, 8);
   __ZN8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEaSESB_($result, $agg$tmp98) | 0;
   __ZN8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEED2Ev($agg$tmp98);
  }
  __ZN8nlohmann6detail19json_sax_dom_parserINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEED2Ev($sdp);
  STACKTOP = sp;
  return;
 }
 __ZNSt3__28functionIFbiN8nlohmann6detail6parserINS1_10basic_jsonINS_3mapENS_6vectorENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEbxydSA_NS1_14adl_serializerEEEE13parse_event_tERSE_EEC2ERKSJ_($agg$tmp, $this);
 __ZN8nlohmann6detail28json_sax_dom_callback_parserINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEEC2ERSD_NS3_8functionIFbiNS0_6parserISD_E13parse_event_tESF_EEEb($sdp, $result, $agg$tmp, (HEAP8[$this + 112 >> 0] | 0) != 0);
 __ZNSt3__28functionIFbiN8nlohmann6detail6parserINS1_10basic_jsonINS_3mapENS_6vectorENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEbxydSA_NS1_14adl_serializerEEEE13parse_event_tERSE_EED2Ev($agg$tmp);
 __ZN8nlohmann6detail6parserINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE18sax_parse_internalINS0_28json_sax_dom_callback_parserISD_EEEEbPT_($this, $sdp) | 0;
 __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE16assert_invariantEv($result);
 if ($strict) if ((__ZN8nlohmann6detail6parserINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE9get_tokenEv($this) | 0) != 15) {
  $m_lexer = $this + 24 | 0;
  __ZNK8nlohmann6detail5lexerINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE12get_positionEv($tmp, $m_lexer);
  $call11 = __ZNK8nlohmann6detail10position_tcvmEv($tmp) | 0;
  __ZNK8nlohmann6detail5lexerINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE16get_token_stringEv($ref$tmp, $m_lexer);
  __ZNK8nlohmann6detail5lexerINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE12get_positionEv($ref$tmp16, $m_lexer);
  HEAP32[$ref$tmp19 >> 2] = 0;
  HEAP32[$ref$tmp19 + 4 >> 2] = 0;
  HEAP32[$ref$tmp19 + 8 >> 2] = 0;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcm($ref$tmp19, 22596, __ZNSt3__211char_traitsIcE6lengthEPKc(22596) | 0);
  __ZN8nlohmann6detail6parserINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE17exception_messageENS0_5lexerISD_E10token_typeERKSB_($ref$tmp18, $this, 15, $ref$tmp19);
  __ZN8nlohmann6detail11parse_error6createEiRKNS0_10position_tERKNSt3__212basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEE($ref$tmp15, 101, $ref$tmp16, $ref$tmp18);
  __ZN8nlohmann6detail28json_sax_dom_callback_parserINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE11parse_errorEmRKSB_RKNS0_9exceptionE($sdp, $call11, $ref$tmp, $ref$tmp15) | 0;
  __ZN8nlohmann6detail9exceptionD2Ev($ref$tmp15);
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp18);
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp19);
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp);
 }
 if (__ZNK8nlohmann6detail28json_sax_dom_callback_parserINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE10is_erroredEv($sdp) | 0) {
  __ZN8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEC2ENS_6detail7value_tE($agg$tmp39, 8);
  __ZN8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEaSESB_($result, $agg$tmp39) | 0;
  __ZN8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEED2Ev($agg$tmp39);
 } else if (__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE12is_discardedEv($result) | 0) {
  __ZN8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEC2EDn($agg$tmp45, 0);
  __ZN8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEaSESB_($result, $agg$tmp45) | 0;
  __ZN8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEED2Ev($agg$tmp45);
 }
 __ZN8nlohmann6detail28json_sax_dom_callback_parserINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEED2Ev($sdp);
 STACKTOP = sp;
 return;
}

function __ZN4MapaC2ENSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE($this, $file) {
 $this = $this | 0;
 $file = $file | 0;
 var $0 = 0, $1 = 0, $8 = 0, $9 = 0, $__begin$sroa$0$0156 = 0, $__begin129$sroa$0$0154 = 0, $__size_$i$i$i$i$i = 0, $call$i1$i = 0, $call$i1$i107 = 0, $call$i1$i117 = 0, $call$i1$i80 = 0, $call$i2$i = 0, $call$i2$i110 = 0, $call$i2$i120 = 0, $call$i2$i83 = 0, $call$i3334 = 0, $call112 = 0, $call120 = 0, $call128 = 0, $call14 = 0, $call142 = 0, $call146 = 0, $call150 = 0, $call155 = 0, $call52 = 0, $call60 = 0, $call74 = 0, $call82 = 0, $call93 = 0, $call98 = 0, $map_tex33 = 0, $map_tileset = 0, $ref$tmp$i116 = 0, $ref$tmp2 = 0, $ref$tmp22 = 0, $ref$tmp23 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(240);
 $ref$tmp$i116 = sp + 36 | 0;
 $ref$tmp2 = sp + 24 | 0;
 $ref$tmp22 = sp + 12 | 0;
 $ref$tmp23 = sp;
 __ZN4tson3MapC2Ev($this);
 __ZNSt3__24__fs10filesystem4pathC2INS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEvEERKT_NS2_6formatE($ref$tmp2, $file, 0);
 __ZN4tson7Tileson5parseERKNSt3__24__fs10filesystem4pathE($ref$tmp$i116, sp + 224 | 0, $ref$tmp2);
 __ZN4tson3MapaSEOS0_($this, $ref$tmp$i116) | 0;
 __ZN4tson3MapD2Ev($ref$tmp$i116);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp2);
 if (!((__ZNK4tson3Map9getStatusEv($this) | 0) << 24 >> 24)) {
  $call14 = __ZN4tson3Map11getTilesetsEv($this) | 0;
  $0 = HEAP32[$call14 >> 2] | 0;
  $1 = HEAP32[$call14 + 4 >> 2] | 0;
  if (($0 | 0) != ($1 | 0)) {
   $__size_$i$i$i$i$i = $ref$tmp2 + 11 | 0;
   $map_tex33 = $this + 188 | 0;
   $map_tileset = $this + 208 | 0;
   $__begin$sroa$0$0156 = $0;
   do {
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($ref$tmp23, __ZNK4tson7Tileset8getImageEv($__begin$sroa$0$0156) | 0);
    $call$i3334 = __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6insertEmPKc($ref$tmp23, 0, 22065) | 0;
    HEAP32[$ref$tmp22 >> 2] = HEAP32[$call$i3334 >> 2];
    HEAP32[$ref$tmp22 + 4 >> 2] = HEAP32[$call$i3334 + 4 >> 2];
    HEAP32[$ref$tmp22 + 8 >> 2] = HEAP32[$call$i3334 + 8 >> 2];
    HEAP32[$call$i3334 >> 2] = 0;
    HEAP32[$call$i3334 + 4 >> 2] = 0;
    HEAP32[$call$i3334 + 8 >> 2] = 0;
    HEAP32[$ref$tmp2 >> 2] = HEAP32[$ref$tmp22 >> 2];
    HEAP32[$ref$tmp2 + 4 >> 2] = HEAP32[$ref$tmp22 + 4 >> 2];
    HEAP32[$ref$tmp2 + 8 >> 2] = HEAP32[$ref$tmp22 + 8 >> 2];
    HEAP32[$ref$tmp22 >> 2] = 0;
    HEAP32[$ref$tmp22 + 4 >> 2] = 0;
    HEAP32[$ref$tmp22 + 8 >> 2] = 0;
    _LoadTexture($ref$tmp$i116, (HEAP8[$__size_$i$i$i$i$i >> 0] | 0) < 0 ? HEAP32[$ref$tmp2 >> 2] | 0 : $ref$tmp2);
    HEAP32[$map_tex33 >> 2] = HEAP32[$ref$tmp$i116 >> 2];
    HEAP32[$map_tex33 + 4 >> 2] = HEAP32[$ref$tmp$i116 + 4 >> 2];
    HEAP32[$map_tex33 + 8 >> 2] = HEAP32[$ref$tmp$i116 + 8 >> 2];
    HEAP32[$map_tex33 + 12 >> 2] = HEAP32[$ref$tmp$i116 + 12 >> 2];
    HEAP32[$map_tex33 + 16 >> 2] = HEAP32[$ref$tmp$i116 + 16 >> 2];
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp2);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp22);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp23);
    HEAP32[$map_tileset >> 2] = $__begin$sroa$0$0156;
    $__begin$sroa$0$0156 = $__begin$sroa$0$0156 + 164 | 0;
   } while (($__begin$sroa$0$0156 | 0) != ($1 | 0));
  };
  HEAP32[$ref$tmp$i116 >> 2] = 0;
  HEAP32[$ref$tmp$i116 + 4 >> 2] = 0;
  HEAP32[$ref$tmp$i116 + 8 >> 2] = 0;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcm($ref$tmp$i116, 22057, __ZNSt3__211char_traitsIcE6lengthEPKc(22057) | 0);
  $call52 = __ZN4tson3Map8getLayerERKNSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE($this, $ref$tmp$i116) | 0;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp$i116);
  HEAP32[$ref$tmp$i116 >> 2] = 0;
  HEAP32[$ref$tmp$i116 + 4 >> 2] = 0;
  HEAP32[$ref$tmp$i116 + 8 >> 2] = 0;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcm($ref$tmp$i116, 22080, __ZNSt3__211char_traitsIcE6lengthEPKc(22080) | 0);
  $call60 = __ZN4tson5Layer8firstObjERKNSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE($call52, $ref$tmp$i116) | 0;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp$i116);
  HEAPF32[$this + 212 >> 2] = Math_fround(HEAP32[(__ZNK4tson6Object11getPositionEv($call60) | 0) >> 2] | 0);
  HEAPF32[$this + 216 >> 2] = Math_fround(HEAP32[(__ZNK4tson6Object11getPositionEv($call60) | 0) + 4 >> 2] | 0);
  $call74 = __ZNSt3__2lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc(60344, 22087) | 0;
  HEAP32[$ref$tmp2 >> 2] = 0;
  HEAP32[$ref$tmp2 + 4 >> 2] = 0;
  HEAP32[$ref$tmp2 + 8 >> 2] = 0;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcm($ref$tmp2, 22104, __ZNSt3__211char_traitsIcE6lengthEPKc(22104) | 0);
  $call82 = __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEElsEi($call74, __ZN4tson6Object3getIiEET_RKNSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEE($call60, $ref$tmp2) | 0) | 0;
  __ZNKSt3__28ios_base6getlocEv($ref$tmp$i116, $call82 + (HEAP32[(HEAP32[$call82 >> 2] | 0) + -12 >> 2] | 0) | 0);
  $call$i1$i107 = __ZNKSt3__26locale9use_facetERNS0_2idE($ref$tmp$i116, 61216) | 0;
  $call$i2$i110 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$call$i1$i107 >> 2] | 0) + 28 >> 2] & 31]($call$i1$i107, 10) | 0;
  __ZNSt3__26localeD2Ev($ref$tmp$i116);
  __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE3putEc($call82, $call$i2$i110) | 0;
  __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE5flushEv($call82) | 0;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp2);
  HEAP32[$ref$tmp$i116 >> 2] = 0;
  HEAP32[$ref$tmp$i116 + 4 >> 2] = 0;
  HEAP32[$ref$tmp$i116 + 8 >> 2] = 0;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcm($ref$tmp$i116, 22057, __ZNSt3__211char_traitsIcE6lengthEPKc(22057) | 0);
  $call93 = __ZN4tson3Map8getLayerERKNSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE($this, $ref$tmp$i116) | 0;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp$i116);
  $call98 = __ZN4tson5Layer6getObjEi($call93, 14) | 0;
  HEAPF32[$this + 220 >> 2] = Math_fround(HEAP32[(__ZNK4tson6Object11getPositionEv($call98) | 0) >> 2] | 0);
  HEAPF32[$this + 224 >> 2] = Math_fround(HEAP32[(__ZNK4tson6Object11getPositionEv($call98) | 0) + 4 >> 2] | 0);
  $call112 = __ZNSt3__2lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc(60344, 22109) | 0;
  HEAP32[$ref$tmp2 >> 2] = 0;
  HEAP32[$ref$tmp2 + 4 >> 2] = 0;
  HEAP32[$ref$tmp2 + 8 >> 2] = 0;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcm($ref$tmp2, 22104, __ZNSt3__211char_traitsIcE6lengthEPKc(22104) | 0);
  $call120 = __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEElsEi($call112, __ZN4tson6Object3getIiEET_RKNSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEE($call98, $ref$tmp2) | 0) | 0;
  __ZNKSt3__28ios_base6getlocEv($ref$tmp$i116, $call120 + (HEAP32[(HEAP32[$call120 >> 2] | 0) + -12 >> 2] | 0) | 0);
  $call$i1$i80 = __ZNKSt3__26locale9use_facetERNS0_2idE($ref$tmp$i116, 61216) | 0;
  $call$i2$i83 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$call$i1$i80 >> 2] | 0) + 28 >> 2] & 31]($call$i1$i80, 10) | 0;
  __ZNSt3__26localeD2Ev($ref$tmp$i116);
  __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE3putEc($call120, $call$i2$i83) | 0;
  __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE5flushEv($call120) | 0;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp2);
  $call128 = __ZN4tson5Layer10getObjectsEv($call52) | 0;
  $8 = HEAP32[$call128 >> 2] | 0;
  $9 = HEAP32[$call128 + 4 >> 2] | 0;
  if (($8 | 0) != ($9 | 0)) {
   $__begin129$sroa$0$0154 = $8;
   do {
    $call142 = __ZNSt3__2lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc(60344, 22126) | 0;
    $call146 = __ZNSt3__2lsIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS_13basic_ostreamIT_T0_EES9_RKNS_12basic_stringIS6_S7_T1_EE($call142, __ZNK4tson6Object7getNameEv($__begin129$sroa$0$0154) | 0) | 0;
    __ZNKSt3__28ios_base6getlocEv($ref$tmp$i116, $call146 + (HEAP32[(HEAP32[$call146 >> 2] | 0) + -12 >> 2] | 0) | 0);
    $call$i1$i117 = __ZNKSt3__26locale9use_facetERNS0_2idE($ref$tmp$i116, 61216) | 0;
    $call$i2$i120 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$call$i1$i117 >> 2] | 0) + 28 >> 2] & 31]($call$i1$i117, 10) | 0;
    __ZNSt3__26localeD2Ev($ref$tmp$i116);
    __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE3putEc($call146, $call$i2$i120) | 0;
    __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE5flushEv($call146) | 0;
    $call150 = __ZNSt3__2lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc(60344, 22135) | 0;
    $call155 = __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEElsEi($call150, HEAP32[(__ZNK4tson6Object11getPositionEv($__begin129$sroa$0$0154) | 0) >> 2] | 0) | 0;
    __ZNKSt3__28ios_base6getlocEv($ref$tmp$i116, $call155 + (HEAP32[(HEAP32[$call155 >> 2] | 0) + -12 >> 2] | 0) | 0);
    $call$i1$i = __ZNKSt3__26locale9use_facetERNS0_2idE($ref$tmp$i116, 61216) | 0;
    $call$i2$i = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$call$i1$i >> 2] | 0) + 28 >> 2] & 31]($call$i1$i, 10) | 0;
    __ZNSt3__26localeD2Ev($ref$tmp$i116);
    __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE3putEc($call155, $call$i2$i) | 0;
    __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE5flushEv($call155) | 0;
    $__begin129$sroa$0$0154 = $__begin129$sroa$0$0154 + 140 | 0;
   } while (($__begin129$sroa$0$0154 | 0) != ($9 | 0));
  }
 }
 STACKTOP = sp;
 return;
}

function _hexfloat($f, $bits, $emin, $sign, $pok) {
 $f = $f | 0;
 $bits = $bits | 0;
 $emin = $emin | 0;
 $sign = $sign | 0;
 $pok = $pok | 0;
 var $$pre = 0, $0 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $18 = 0, $28 = 0, $3 = 0, $30 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $46 = 0, $47 = 0, $55 = 0, $56 = 0, $6 = 0, $64 = 0, $66 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $73 = 0, $80 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $91 = 0, $94 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $bias$0 = 0.0, $bits$addr$0 = 0, $bits$addr$0109 = 0, $bits$addr$0110 = 0, $c$0 = 0, $c$0$be = 0, $c$0$ph = 0, $c$3 = 0, $c$3$be = 0, $c$3$lcssa = 0, $c$3$ph = 0, $cmp206 = 0, $cmp54 = 0, $cond29 = 0, $cond46 = 0, $conv241112 = 0.0, $conv253$pre$phiZ2D = 0.0, $d$0 = 0, $div = 0.0, $gotdig$0 = 0, $gotdig$3 = 0, $gotdig$3$ph = 0, $gotdig$4 = 0, $gotrad$1 = 0, $gotrad$1$ph = 0, $gotrad$2 = 0, $gottail$0 = 0, $gottail$1 = 0, $gottail$2 = 0, $mul143 = 0, $or$cond = 0, $or$cond103 = 0, $retval$0 = 0.0, $rpos = 0, $scale$0 = 0.0, $scale$1 = 0.0, $scale$2 = 0.0, $shend = 0, $sub = 0, $sub182 = 0, $sub192 = 0, $sub239111 = 0, $sub260 = 0.0, $tobool108 = 0, $tobool138 = 0, $x$0 = 0, $x$1 = 0, $x$2 = 0, $x$3$lcssa = 0, $x$3125 = 0, $x$4$lcssa = 0, $x$4119 = 0, $x$5 = 0, $y$0 = 0.0, $y$1 = 0.0, $y$2 = 0.0, $y$3$lcssa = 0.0, $y$3120 = 0.0, $y$4 = 0.0, label = 0, $46$looptemp = 0, $47$looptemp = 0;
 label = 0;
 $rpos = $f + 4 | 0;
 $0 = HEAP32[$rpos >> 2] | 0;
 $shend = $f + 104 | 0;
 if ($0 >>> 0 < (HEAP32[$shend >> 2] | 0) >>> 0) {
  HEAP32[$rpos >> 2] = $0 + 1;
  $c$0$ph = HEAPU8[$0 >> 0] | 0;
 } else $c$0$ph = ___shgetc($f) | 0;
 $c$0 = $c$0$ph;
 $gotdig$0 = 0;
 L5 : while (1) {
  switch ($c$0 | 0) {
  case 46:
   {
    label = 10;
    break L5;
    break;
   }
  case 48:
   break;
  default:
   {
    $106 = 0;
    $107 = 0;
    $c$3$ph = $c$0;
    $gotdig$3$ph = $gotdig$0;
    $gotrad$1$ph = 0;
    break L5;
   }
  }
  $3 = HEAP32[$rpos >> 2] | 0;
  if ($3 >>> 0 < (HEAP32[$shend >> 2] | 0) >>> 0) {
   HEAP32[$rpos >> 2] = $3 + 1;
   $c$0$be = HEAPU8[$3 >> 0] | 0;
  } else $c$0$be = ___shgetc($f) | 0;
  $c$0 = $c$0$be;
  $gotdig$0 = 1;
 }
 if ((label | 0) == 10) {
  $6 = HEAP32[$rpos >> 2] | 0;
  if ($6 >>> 0 < (HEAP32[$shend >> 2] | 0) >>> 0) {
   HEAP32[$rpos >> 2] = $6 + 1;
   $cond29 = HEAPU8[$6 >> 0] | 0;
  } else $cond29 = ___shgetc($f) | 0;
  if (($cond29 | 0) == 48) {
   $12 = 0;
   $13 = 0;
   while (1) {
    $9 = HEAP32[$rpos >> 2] | 0;
    if ($9 >>> 0 < (HEAP32[$shend >> 2] | 0) >>> 0) {
     HEAP32[$rpos >> 2] = $9 + 1;
     $cond46 = HEAPU8[$9 >> 0] | 0;
    } else $cond46 = ___shgetc($f) | 0;
    $14 = _i64Add($12 | 0, $13 | 0, -1, -1) | 0;
    $15 = getTempRet0() | 0;
    if (($cond46 | 0) == 48) {
     $12 = $14;
     $13 = $15;
    } else {
     $106 = $14;
     $107 = $15;
     $c$3$ph = $cond46;
     $gotdig$3$ph = 1;
     $gotrad$1$ph = 1;
     break;
    }
   }
  } else {
   $106 = 0;
   $107 = 0;
   $c$3$ph = $cond29;
   $gotdig$3$ph = $gotdig$0;
   $gotrad$1$ph = 1;
  }
 }
 $16 = 0;
 $18 = 0;
 $37 = $106;
 $39 = $107;
 $c$3 = $c$3$ph;
 $gotdig$3 = $gotdig$3$ph;
 $gotrad$1 = $gotrad$1$ph;
 $gottail$0 = 0;
 $scale$0 = 1.0;
 $x$0 = 0;
 $y$0 = 0.0;
 while (1) {
  $sub = $c$3 + -48 | 0;
  $$pre = $c$3 | 32;
  if ($sub >>> 0 < 10) label = 24; else {
   $cmp54 = ($c$3 | 0) == 46;
   if (!($cmp54 | ($$pre + -97 | 0) >>> 0 < 6)) {
    $c$3$lcssa = $c$3;
    break;
   }
   if ($cmp54) if (!$gotrad$1) {
    $108 = $18;
    $109 = $16;
    $110 = $18;
    $111 = $16;
    $gotdig$4 = $gotdig$3;
    $gotrad$2 = 1;
    $gottail$2 = $gottail$0;
    $scale$2 = $scale$0;
    $x$2 = $x$0;
    $y$2 = $y$0;
   } else {
    $c$3$lcssa = 46;
    break;
   } else label = 24;
  }
  if ((label | 0) == 24) {
   label = 0;
   $d$0 = ($c$3 | 0) > 57 ? $$pre + -87 | 0 : $sub;
   do if (($16 | 0) < 0 | ($16 | 0) == 0 & $18 >>> 0 < 8) {
    $gottail$1 = $gottail$0;
    $scale$1 = $scale$0;
    $x$1 = $d$0 + ($x$0 << 4) | 0;
    $y$1 = $y$0;
   } else if (($16 | 0) < 0 | ($16 | 0) == 0 & $18 >>> 0 < 14) {
    $div = $scale$0 * .0625;
    $gottail$1 = $gottail$0;
    $scale$1 = $div;
    $x$1 = $x$0;
    $y$1 = $y$0 + $div * +($d$0 | 0);
    break;
   } else {
    $or$cond = ($gottail$0 | 0) != 0 | ($d$0 | 0) == 0;
    $gottail$1 = $or$cond ? $gottail$0 : 1;
    $scale$1 = $scale$0;
    $x$1 = $x$0;
    $y$1 = $or$cond ? $y$0 : $y$0 + $scale$0 * .5;
    break;
   } while (0);
   $28 = _i64Add($18 | 0, $16 | 0, 1, 0) | 0;
   $108 = $37;
   $109 = $39;
   $110 = $28;
   $111 = getTempRet0() | 0;
   $gotdig$4 = 1;
   $gotrad$2 = $gotrad$1;
   $gottail$2 = $gottail$1;
   $scale$2 = $scale$1;
   $x$2 = $x$1;
   $y$2 = $y$1;
  }
  $30 = HEAP32[$rpos >> 2] | 0;
  if ($30 >>> 0 < (HEAP32[$shend >> 2] | 0) >>> 0) {
   HEAP32[$rpos >> 2] = $30 + 1;
   $c$3$be = HEAPU8[$30 >> 0] | 0;
  } else $c$3$be = ___shgetc($f) | 0;
  $16 = $111;
  $18 = $110;
  $37 = $108;
  $39 = $109;
  $c$3 = $c$3$be;
  $gotdig$3 = $gotdig$4;
  $gotrad$1 = $gotrad$2;
  $gottail$0 = $gottail$2;
  $scale$0 = $scale$2;
  $x$0 = $x$2;
  $y$0 = $y$2;
 }
 do if (!$gotdig$3) {
  $tobool108 = (HEAP32[$shend >> 2] | 0) == 0;
  if (!$tobool108) HEAP32[$rpos >> 2] = (HEAP32[$rpos >> 2] | 0) + -1;
  if (!$pok) ___shlim($f, 0, 0); else if (!$tobool108) {
   HEAP32[$rpos >> 2] = (HEAP32[$rpos >> 2] | 0) + -1;
   if (!(($gotrad$1 | 0) == 0 | $tobool108)) HEAP32[$rpos >> 2] = (HEAP32[$rpos >> 2] | 0) + -1;
  }
  $retval$0 = +($sign | 0) * 0.0;
 } else {
  $tobool138 = ($gotrad$1 | 0) == 0;
  $38 = $tobool138 ? $18 : $37;
  $40 = $tobool138 ? $16 : $39;
  if (($16 | 0) < 0 | ($16 | 0) == 0 & $18 >>> 0 < 8) {
   $46 = $18;
   $47 = $16;
   $x$3125 = $x$0;
   while (1) {
    $mul143 = $x$3125 << 4;
    $46$looptemp = $46;
    $46 = _i64Add($46 | 0, $47 | 0, 1, 0) | 0;
    $47$looptemp = $47;
    $47 = getTempRet0() | 0;
    if (!(($47$looptemp | 0) < 0 | ($47$looptemp | 0) == 0 & $46$looptemp >>> 0 < 7)) {
     $x$3$lcssa = $mul143;
     break;
    } else $x$3125 = $mul143;
   }
  } else $x$3$lcssa = $x$0;
  if (($c$3$lcssa | 32 | 0) == 112) {
   $55 = _scanexp($f, $pok) | 0;
   $56 = getTempRet0() | 0;
   if (($55 | 0) == 0 & ($56 | 0) == -2147483648) {
    if (!$pok) {
     ___shlim($f, 0, 0);
     $retval$0 = 0.0;
     break;
    }
    if (!(HEAP32[$shend >> 2] | 0)) {
     $68 = 0;
     $69 = 0;
    } else {
     HEAP32[$rpos >> 2] = (HEAP32[$rpos >> 2] | 0) + -1;
     $68 = 0;
     $69 = 0;
    }
   } else {
    $68 = $55;
    $69 = $56;
   }
  } else if (!(HEAP32[$shend >> 2] | 0)) {
   $68 = 0;
   $69 = 0;
  } else {
   HEAP32[$rpos >> 2] = (HEAP32[$rpos >> 2] | 0) + -1;
   $68 = 0;
   $69 = 0;
  }
  $64 = _bitshift64Shl($38 | 0, $40 | 0, 2) | 0;
  $66 = _i64Add($64 | 0, getTempRet0() | 0, -32, -1) | 0;
  $70 = _i64Add($66 | 0, getTempRet0() | 0, $68 | 0, $69 | 0) | 0;
  $71 = getTempRet0() | 0;
  if (!$x$3$lcssa) {
   $retval$0 = +($sign | 0) * 0.0;
   break;
  }
  $sub182 = 0 - $emin | 0;
  $73 = (($sub182 | 0) < 0) << 31 >> 31;
  if (($71 | 0) > ($73 | 0) | ($71 | 0) == ($73 | 0) & $70 >>> 0 > $sub182 >>> 0) {
   HEAP32[(___errno_location() | 0) >> 2] = 68;
   $retval$0 = +($sign | 0) * 1797693134862315708145274.0e284 * 1797693134862315708145274.0e284;
   break;
  }
  $sub192 = $emin + -106 | 0;
  $80 = (($sub192 | 0) < 0) << 31 >> 31;
  if (($71 | 0) < ($80 | 0) | ($71 | 0) == ($80 | 0) & $70 >>> 0 < $sub192 >>> 0) {
   HEAP32[(___errno_location() | 0) >> 2] = 68;
   $retval$0 = +($sign | 0) * 2.2250738585072014e-308 * 2.2250738585072014e-308;
   break;
  }
  if (($x$3$lcssa | 0) > -1) {
   $86 = $70;
   $87 = $71;
   $x$4119 = $x$3$lcssa;
   $y$3120 = $y$0;
   while (1) {
    $cmp206 = !($y$3120 >= .5);
    $x$5 = $x$4119 << 1 | ($cmp206 ^ 1) & 1;
    $y$4 = $y$3120 + ($cmp206 ? $y$3120 : $y$3120 + -1.0);
    $88 = _i64Add($86 | 0, $87 | 0, -1, -1) | 0;
    $89 = getTempRet0() | 0;
    if (($x$5 | 0) > -1) {
     $86 = $88;
     $87 = $89;
     $x$4119 = $x$5;
     $y$3120 = $y$4;
    } else {
     $96 = $88;
     $97 = $89;
     $x$4$lcssa = $x$5;
     $y$3$lcssa = $y$4;
     break;
    }
   }
  } else {
   $96 = $70;
   $97 = $71;
   $x$4$lcssa = $x$3$lcssa;
   $y$3$lcssa = $y$0;
  }
  $91 = (($bits | 0) < 0) << 31 >> 31;
  $94 = _i64Subtract(32, 0, $emin | 0, (($emin | 0) < 0) << 31 >> 31 | 0) | 0;
  $98 = _i64Add($94 | 0, getTempRet0() | 0, $96 | 0, $97 | 0) | 0;
  $99 = getTempRet0() | 0;
  if (($99 | 0) < ($91 | 0) | ($99 | 0) == ($91 | 0) & $98 >>> 0 < $bits >>> 0) if (($98 | 0) > 0) {
   $bits$addr$0 = $98;
   label = 65;
  } else {
   $bits$addr$0110 = 0;
   $sub239111 = 84;
   label = 67;
  } else {
   $bits$addr$0 = $bits;
   label = 65;
  }
  if ((label | 0) == 65) if (($bits$addr$0 | 0) < 53) {
   $bits$addr$0110 = $bits$addr$0;
   $sub239111 = 84 - $bits$addr$0 | 0;
   label = 67;
  } else {
   $bias$0 = 0.0;
   $bits$addr$0109 = $bits$addr$0;
   $conv253$pre$phiZ2D = +($sign | 0);
  }
  if ((label | 0) == 67) {
   $conv241112 = +($sign | 0);
   $bias$0 = +_copysignl(+_scalbn(1.0, $sub239111), $conv241112);
   $bits$addr$0109 = $bits$addr$0110;
   $conv253$pre$phiZ2D = $conv241112;
  }
  $or$cond103 = ($x$4$lcssa & 1 | 0) == 0 & ($y$3$lcssa != 0.0 & ($bits$addr$0109 | 0) < 32);
  $sub260 = ($or$cond103 ? 0.0 : $y$3$lcssa) * $conv253$pre$phiZ2D + ($bias$0 + $conv253$pre$phiZ2D * +(($x$4$lcssa + ($or$cond103 & 1) | 0) >>> 0)) - $bias$0;
  if (!($sub260 != 0.0)) HEAP32[(___errno_location() | 0) >> 2] = 68;
  $retval$0 = +_scalbnl($sub260, $96);
 } while (0);
 return +$retval$0;
}

function _LoadDDS($agg$result, $fileName) {
 $agg$result = $agg$result | 0;
 $fileName = $fileName | 0;
 var $113 = 0, $119 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $alpha = 0, $alpha113 = 0, $arrayidx136 = 0, $arrayidx91 = 0, $blue = 0, $ddsFile = 0, $ddsHeader = 0, $ddsHeaderId = 0, $fileName$addr = 0, $format257 = 0, $i = 0, $i114 = 0, $i196 = 0, $image = 0, $mul111 = 0, $mul169 = 0, $mul194 = 0, $mul50 = 0, $mul72 = 0, $size235 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer12 = 0, $vararg_buffer16 = 0, $vararg_buffer20 = 0, $vararg_buffer24 = 0, $vararg_buffer4 = 0, $vararg_buffer8 = 0, label = 0, sp = 0, CSE$0 = 0, CSE$1 = 0, CSE$2 = 0, CSE$3 = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(240);
 $vararg_buffer24 = sp + 56 | 0;
 $vararg_buffer20 = sp + 48 | 0;
 $vararg_buffer16 = sp + 40 | 0;
 $vararg_buffer12 = sp + 32 | 0;
 $vararg_buffer8 = sp + 24 | 0;
 $vararg_buffer4 = sp + 16 | 0;
 $vararg_buffer1 = sp + 8 | 0;
 $vararg_buffer = sp;
 $fileName$addr = sp + 224 | 0;
 $image = sp + 204 | 0;
 $ddsFile = sp + 200 | 0;
 $ddsHeaderId = sp + 232 | 0;
 $ddsHeader = sp + 76 | 0;
 $alpha = sp + 230 | 0;
 $i = sp + 72 | 0;
 $alpha113 = sp + 229 | 0;
 $i114 = sp + 68 | 0;
 $blue = sp + 228 | 0;
 $i196 = sp + 64 | 0;
 $size235 = sp + 60 | 0;
 HEAP32[$fileName$addr >> 2] = $fileName;
 HEAP32[$image >> 2] = 0;
 HEAP32[$image + 4 >> 2] = 0;
 HEAP32[$image + 8 >> 2] = 0;
 HEAP32[$image + 12 >> 2] = 0;
 HEAP32[$image + 16 >> 2] = 0;
 HEAP32[$ddsFile >> 2] = _fopen(HEAP32[$fileName$addr >> 2] | 0, 32752) | 0;
 if (!(HEAP32[$ddsFile >> 2] | 0)) {
  HEAP32[$vararg_buffer >> 2] = HEAP32[$fileName$addr >> 2];
  _TraceLog(4, 37310, $vararg_buffer);
  HEAP32[$agg$result >> 2] = HEAP32[$image >> 2];
  HEAP32[$agg$result + 4 >> 2] = HEAP32[$image + 4 >> 2];
  HEAP32[$agg$result + 8 >> 2] = HEAP32[$image + 8 >> 2];
  HEAP32[$agg$result + 12 >> 2] = HEAP32[$image + 12 >> 2];
  HEAP32[$agg$result + 16 >> 2] = HEAP32[$image + 16 >> 2];
  STACKTOP = sp;
  return;
 }
 _fread($ddsHeaderId, 4, 1, HEAP32[$ddsFile >> 2] | 0) | 0;
 L5 : do if ((HEAP8[$ddsHeaderId >> 0] | 0) != 68) label = 7; else if ((HEAP8[$ddsHeaderId + 1 >> 0] | 0) != 68) label = 7; else if ((HEAP8[$ddsHeaderId + 2 >> 0] | 0) != 83) label = 7; else if ((HEAP8[$ddsHeaderId + 3 >> 0] | 0) != 32) label = 7; else {
  _fread($ddsHeader, 124, 1, HEAP32[$ddsFile >> 2] | 0) | 0;
  HEAP32[$vararg_buffer4 >> 2] = HEAP32[$fileName$addr >> 2];
  HEAP32[$vararg_buffer4 + 4 >> 2] = 124;
  _TraceLog(2, 37392, $vararg_buffer4);
  $12 = HEAP32[$ddsHeader + 72 >> 2] | 0;
  HEAP32[$vararg_buffer8 >> 2] = HEAP32[$fileName$addr >> 2];
  HEAP32[$vararg_buffer8 + 4 >> 2] = $12;
  _TraceLog(2, 37422, $vararg_buffer8);
  $14 = HEAP32[$ddsHeader + 72 + 4 >> 2] | 0;
  HEAP32[$vararg_buffer12 >> 2] = HEAP32[$fileName$addr >> 2];
  HEAP32[$vararg_buffer12 + 4 >> 2] = $14;
  _TraceLog(2, 37458, $vararg_buffer12);
  $16 = HEAP32[$ddsHeader + 72 + 8 >> 2] | 0;
  HEAP32[$vararg_buffer16 >> 2] = HEAP32[$fileName$addr >> 2];
  HEAP32[$vararg_buffer16 + 4 >> 2] = $16;
  _TraceLog(2, 37497, $vararg_buffer16);
  $18 = HEAP32[$ddsHeader + 72 + 12 >> 2] | 0;
  HEAP32[$vararg_buffer20 >> 2] = HEAP32[$fileName$addr >> 2];
  HEAP32[$vararg_buffer20 + 4 >> 2] = $18;
  _TraceLog(2, 37524, $vararg_buffer20);
  HEAP32[$image + 4 >> 2] = HEAP32[$ddsHeader + 12 >> 2];
  HEAP32[$image + 8 >> 2] = HEAP32[$ddsHeader + 8 >> 2];
  if (!(HEAP32[$ddsHeader + 24 >> 2] | 0)) HEAP32[$image + 12 >> 2] = 1; else HEAP32[$image + 12 >> 2] = HEAP32[$ddsHeader + 24 >> 2];
  do if ((HEAP32[$ddsHeader + 72 + 12 >> 2] | 0) == 16) {
   if ((HEAP32[$ddsHeader + 72 + 4 >> 2] | 0) == 64) {
    HEAP32[$image >> 2] = _malloc((Math_imul(HEAP32[$image + 4 >> 2] | 0, HEAP32[$image + 8 >> 2] | 0) | 0) << 1) | 0;
    $mul50 = (Math_imul(HEAP32[$image + 4 >> 2] | 0, HEAP32[$image + 8 >> 2] | 0) | 0) << 1;
    _fread(HEAP32[$image >> 2] | 0, $mul50, 1, HEAP32[$ddsFile >> 2] | 0) | 0;
    HEAP32[$image + 16 >> 2] = 3;
    break;
   }
   if ((HEAP32[$ddsHeader + 72 + 4 >> 2] | 0) == 65) {
    if ((HEAP32[$ddsHeader + 72 + 28 >> 2] | 0) == 32768) {
     HEAP32[$image >> 2] = _malloc((Math_imul(HEAP32[$image + 4 >> 2] | 0, HEAP32[$image + 8 >> 2] | 0) | 0) << 1) | 0;
     $mul72 = (Math_imul(HEAP32[$image + 4 >> 2] | 0, HEAP32[$image + 8 >> 2] | 0) | 0) << 1;
     _fread(HEAP32[$image >> 2] | 0, $mul72, 1, HEAP32[$ddsFile >> 2] | 0) | 0;
     HEAP8[$alpha >> 0] = 0;
     HEAP32[$i >> 2] = 0;
     while (1) {
      if ((HEAP32[$i >> 2] | 0) >= (Math_imul(HEAP32[$image + 4 >> 2] | 0, HEAP32[$image + 8 >> 2] | 0) | 0)) break;
      HEAP8[$alpha >> 0] = HEAPU16[(HEAP32[$image >> 2] | 0) + (HEAP32[$i >> 2] << 1) >> 1] >> 15;
      CSE$0 = (HEAP32[$image >> 2] | 0) + (HEAP32[$i >> 2] << 1) | 0;
      HEAP16[CSE$0 >> 1] = HEAPU16[CSE$0 >> 1] << 1;
      $arrayidx91 = (HEAP32[$image >> 2] | 0) + (HEAP32[$i >> 2] << 1) | 0;
      HEAP16[$arrayidx91 >> 1] = (HEAPU16[$arrayidx91 >> 1] | 0) + (HEAPU8[$alpha >> 0] | 0);
      HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
     }
     HEAP32[$image + 16 >> 2] = 5;
     break;
    }
    if ((HEAP32[$ddsHeader + 72 + 28 >> 2] | 0) == 61440) {
     HEAP32[$image >> 2] = _malloc((Math_imul(HEAP32[$image + 4 >> 2] | 0, HEAP32[$image + 8 >> 2] | 0) | 0) << 1) | 0;
     $mul111 = (Math_imul(HEAP32[$image + 4 >> 2] | 0, HEAP32[$image + 8 >> 2] | 0) | 0) << 1;
     _fread(HEAP32[$image >> 2] | 0, $mul111, 1, HEAP32[$ddsFile >> 2] | 0) | 0;
     HEAP8[$alpha113 >> 0] = 0;
     HEAP32[$i114 >> 2] = 0;
     while (1) {
      if ((HEAP32[$i114 >> 2] | 0) >= (Math_imul(HEAP32[$image + 4 >> 2] | 0, HEAP32[$image + 8 >> 2] | 0) | 0)) break;
      HEAP8[$alpha113 >> 0] = HEAPU16[(HEAP32[$image >> 2] | 0) + (HEAP32[$i114 >> 2] << 1) >> 1] >> 12;
      CSE$1 = (HEAP32[$image >> 2] | 0) + (HEAP32[$i114 >> 2] << 1) | 0;
      HEAP16[CSE$1 >> 1] = HEAPU16[CSE$1 >> 1] << 4;
      $arrayidx136 = (HEAP32[$image >> 2] | 0) + (HEAP32[$i114 >> 2] << 1) | 0;
      HEAP16[$arrayidx136 >> 1] = (HEAPU16[$arrayidx136 >> 1] | 0) + (HEAPU8[$alpha113 >> 0] | 0);
      HEAP32[$i114 >> 2] = (HEAP32[$i114 >> 2] | 0) + 1;
     }
     HEAP32[$image + 16 >> 2] = 6;
    }
   }
  } while (0);
  if ((HEAP32[$ddsHeader + 72 + 4 >> 2] | 0) == 64) if ((HEAP32[$ddsHeader + 72 + 12 >> 2] | 0) == 24) {
   HEAP32[$image >> 2] = _malloc((Math_imul(HEAP32[$image + 4 >> 2] | 0, HEAP32[$image + 8 >> 2] | 0) | 0) * 3 | 0) | 0;
   $mul169 = (Math_imul(HEAP32[$image + 4 >> 2] | 0, HEAP32[$image + 8 >> 2] | 0) | 0) * 3 | 0;
   _fread(HEAP32[$image >> 2] | 0, $mul169, 1, HEAP32[$ddsFile >> 2] | 0) | 0;
   HEAP32[$image + 16 >> 2] = 4;
   break;
  }
  if ((HEAP32[$ddsHeader + 72 + 4 >> 2] | 0) == 65) if ((HEAP32[$ddsHeader + 72 + 12 >> 2] | 0) == 32) {
   HEAP32[$image >> 2] = _malloc((Math_imul(HEAP32[$image + 4 >> 2] | 0, HEAP32[$image + 8 >> 2] | 0) | 0) << 2) | 0;
   $mul194 = (Math_imul(HEAP32[$image + 4 >> 2] | 0, HEAP32[$image + 8 >> 2] | 0) | 0) << 2;
   _fread(HEAP32[$image >> 2] | 0, $mul194, 1, HEAP32[$ddsFile >> 2] | 0) | 0;
   HEAP8[$blue >> 0] = 0;
   HEAP32[$i196 >> 2] = 0;
   while (1) {
    if ((HEAP32[$i196 >> 2] | 0) >= ((Math_imul(HEAP32[$image + 4 >> 2] | 0, HEAP32[$image + 8 >> 2] | 0) | 0) << 2 | 0)) break;
    HEAP8[$blue >> 0] = HEAP8[(HEAP32[$image >> 2] | 0) + (HEAP32[$i196 >> 2] | 0) >> 0] | 0;
    CSE$2 = HEAP32[$image >> 2] | 0;
    CSE$3 = HEAP32[$i196 >> 2] | 0;
    HEAP8[CSE$2 + CSE$3 >> 0] = HEAP8[CSE$2 + (CSE$3 + 2) >> 0] | 0;
    HEAP8[(HEAP32[$image >> 2] | 0) + ((HEAP32[$i196 >> 2] | 0) + 2) >> 0] = HEAP8[$blue >> 0] | 0;
    HEAP32[$i196 >> 2] = (HEAP32[$i196 >> 2] | 0) + 4;
   }
   HEAP32[$image + 16 >> 2] = 7;
   break;
  }
  if ((HEAP32[$ddsHeader + 72 + 4 >> 2] | 0) != 4) if ((HEAP32[$ddsHeader + 72 + 4 >> 2] | 0) != 5) break;
  if ((HEAP32[$ddsHeader + 72 + 8 >> 2] | 0) >>> 0 > 0) {
   $113 = HEAP32[$ddsHeader + 16 >> 2] | 0;
   if ((HEAP32[$ddsHeader + 24 >> 2] | 0) >>> 0 > 1) HEAP32[$size235 >> 2] = $113 << 1; else HEAP32[$size235 >> 2] = $113;
   HEAP32[$vararg_buffer24 >> 2] = HEAP32[$ddsHeader + 16 >> 2];
   _TraceLog(2, 37554, $vararg_buffer24);
   HEAP32[$image >> 2] = _malloc(HEAP32[$size235 >> 2] | 0) | 0;
   _fread(HEAP32[$image >> 2] | 0, HEAP32[$size235 >> 2] | 0, 1, HEAP32[$ddsFile >> 2] | 0) | 0;
   $119 = HEAP32[$ddsHeader + 72 + 8 >> 2] | 0;
   if (($119 | 0) < 861165636) {
    switch ($119 | 0) {
    case 827611204:
     break;
    default:
     break L5;
    }
    $format257 = $image + 16 | 0;
    if ((HEAP32[$ddsHeader + 72 + 4 >> 2] | 0) == 4) {
     HEAP32[$format257 >> 2] = 11;
     break;
    } else {
     HEAP32[$format257 >> 2] = 12;
     break;
    }
   }
   if (($119 | 0) < 894720068) {
    switch ($119 | 0) {
    case 861165636:
     break;
    default:
     break L5;
    }
    HEAP32[$image + 16 >> 2] = 13;
    break;
   } else {
    switch ($119 | 0) {
    case 894720068:
     break;
    default:
     break L5;
    }
    HEAP32[$image + 16 >> 2] = 14;
    break;
   }
  }
 } while (0);
 if ((label | 0) == 7) {
  HEAP32[$vararg_buffer1 >> 2] = HEAP32[$fileName$addr >> 2];
  _TraceLog(4, 37344, $vararg_buffer1);
 }
 _fclose(HEAP32[$ddsFile >> 2] | 0) | 0;
 HEAP32[$agg$result >> 2] = HEAP32[$image >> 2];
 HEAP32[$agg$result + 4 >> 2] = HEAP32[$image + 4 >> 2];
 HEAP32[$agg$result + 8 >> 2] = HEAP32[$image + 8 >> 2];
 HEAP32[$agg$result + 12 >> 2] = HEAP32[$image + 12 >> 2];
 HEAP32[$agg$result + 16 >> 2] = HEAP32[$image + 16 >> 2];
 STACKTOP = sp;
 return;
}

function _GetImageDataNormalized($image) {
 $image = $image | 0;
 var $130 = f0, $141 = f0, $146 = f0, $151 = f0, $159 = f0, $164 = f0, $169 = f0, $174 = f0, $179 = 0, $cond = f0, $div = f0, $div11 = f0, $div134 = f0, $div141 = f0, $div148 = f0, $div155 = f0, $div16 = f0, $div163 = f0, $div170 = f0, $div177 = f0, $div23 = f0, $div29 = f0, $div35 = f0, $div41 = f0, $i = 0, $k = 0, $mul107 = f0, $mul114 = f0, $mul121 = f0, $mul127 = f0, $mul50 = f0, $mul57 = f0, $mul64 = f0, $mul81 = f0, $mul88 = f0, $mul94 = f0, $pixel = 0, $pixel100 = 0, $pixel74 = 0, $pixels = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $pixels = sp + 12 | 0;
 $i = sp + 8 | 0;
 $k = sp + 4 | 0;
 $pixel = sp + 20 | 0;
 $pixel74 = sp + 18 | 0;
 $pixel100 = sp + 16 | 0;
 HEAP32[$pixels >> 2] = _malloc((Math_imul(HEAP32[$image + 4 >> 2] | 0, HEAP32[$image + 8 >> 2] | 0) | 0) << 4) | 0;
 if ((HEAP32[$image + 16 >> 2] | 0) >= 11) {
  _TraceLog(4, 37647, sp);
  $179 = HEAP32[$pixels >> 2] | 0;
  STACKTOP = sp;
  return $179 | 0;
 }
 HEAP32[$i >> 2] = 0;
 HEAP32[$k >> 2] = 0;
 while (1) {
  if ((HEAP32[$i >> 2] | 0) >= (Math_imul(HEAP32[$image + 4 >> 2] | 0, HEAP32[$image + 8 >> 2] | 0) | 0)) break;
  do switch (HEAP32[$image + 16 >> 2] | 0) {
  case 1:
   {
    $div = Math_fround(Math_fround(HEAPU8[(HEAP32[$image >> 2] | 0) + (HEAP32[$i >> 2] | 0) >> 0] | 0) / Math_fround(255.0));
    HEAPF32[(HEAP32[$pixels >> 2] | 0) + (HEAP32[$i >> 2] << 4) >> 2] = $div;
    $div11 = Math_fround(Math_fround(HEAPU8[(HEAP32[$image >> 2] | 0) + (HEAP32[$i >> 2] | 0) >> 0] | 0) / Math_fround(255.0));
    HEAPF32[(HEAP32[$pixels >> 2] | 0) + (HEAP32[$i >> 2] << 4) + 4 >> 2] = $div11;
    $div16 = Math_fround(Math_fround(HEAPU8[(HEAP32[$image >> 2] | 0) + (HEAP32[$i >> 2] | 0) >> 0] | 0) / Math_fround(255.0));
    HEAPF32[(HEAP32[$pixels >> 2] | 0) + (HEAP32[$i >> 2] << 4) + 8 >> 2] = $div16;
    HEAPF32[(HEAP32[$pixels >> 2] | 0) + (HEAP32[$i >> 2] << 4) + 12 >> 2] = Math_fround(1.0);
    break;
   }
  case 2:
   {
    $div23 = Math_fround(Math_fround(HEAPU8[(HEAP32[$image >> 2] | 0) + (HEAP32[$k >> 2] | 0) >> 0] | 0) / Math_fround(255.0));
    HEAPF32[(HEAP32[$pixels >> 2] | 0) + (HEAP32[$i >> 2] << 4) >> 2] = $div23;
    $div29 = Math_fround(Math_fround(HEAPU8[(HEAP32[$image >> 2] | 0) + (HEAP32[$k >> 2] | 0) >> 0] | 0) / Math_fround(255.0));
    HEAPF32[(HEAP32[$pixels >> 2] | 0) + (HEAP32[$i >> 2] << 4) + 4 >> 2] = $div29;
    $div35 = Math_fround(Math_fround(HEAPU8[(HEAP32[$image >> 2] | 0) + (HEAP32[$k >> 2] | 0) >> 0] | 0) / Math_fround(255.0));
    HEAPF32[(HEAP32[$pixels >> 2] | 0) + (HEAP32[$i >> 2] << 4) + 8 >> 2] = $div35;
    $div41 = Math_fround(Math_fround(HEAPU8[(HEAP32[$image >> 2] | 0) + ((HEAP32[$k >> 2] | 0) + 1) >> 0] | 0) / Math_fround(255.0));
    HEAPF32[(HEAP32[$pixels >> 2] | 0) + (HEAP32[$i >> 2] << 4) + 12 >> 2] = $div41;
    HEAP32[$k >> 2] = (HEAP32[$k >> 2] | 0) + 2;
    break;
   }
  case 5:
   {
    HEAP16[$pixel >> 1] = HEAP16[(HEAP32[$image >> 2] | 0) + (HEAP32[$i >> 2] << 1) >> 1] | 0;
    $mul50 = Math_fround(Math_fround(((HEAPU16[$pixel >> 1] | 0) & 63488) >> 11 | 0) * Math_fround(.0322580636));
    HEAPF32[(HEAP32[$pixels >> 2] | 0) + (HEAP32[$i >> 2] << 4) >> 2] = $mul50;
    $mul57 = Math_fround(Math_fround(((HEAPU16[$pixel >> 1] | 0) & 1984) >> 6 | 0) * Math_fround(.0322580636));
    HEAPF32[(HEAP32[$pixels >> 2] | 0) + (HEAP32[$i >> 2] << 4) + 4 >> 2] = $mul57;
    $mul64 = Math_fround(Math_fround(((HEAPU16[$pixel >> 1] | 0) & 62) >> 1 | 0) * Math_fround(.0322580636));
    HEAPF32[(HEAP32[$pixels >> 2] | 0) + (HEAP32[$i >> 2] << 4) + 8 >> 2] = $mul64;
    $cond = ((HEAPU16[$pixel >> 1] | 0) & 1 | 0) == 0 ? Math_fround(0.0) : Math_fround(1.0);
    HEAPF32[(HEAP32[$pixels >> 2] | 0) + (HEAP32[$i >> 2] << 4) + 12 >> 2] = $cond;
    break;
   }
  case 3:
   {
    HEAP16[$pixel74 >> 1] = HEAP16[(HEAP32[$image >> 2] | 0) + (HEAP32[$i >> 2] << 1) >> 1] | 0;
    $mul81 = Math_fround(Math_fround(((HEAPU16[$pixel74 >> 1] | 0) & 63488) >> 11 | 0) * Math_fround(.0322580636));
    HEAPF32[(HEAP32[$pixels >> 2] | 0) + (HEAP32[$i >> 2] << 4) >> 2] = $mul81;
    $mul88 = Math_fround(Math_fround(((HEAPU16[$pixel74 >> 1] | 0) & 2016) >> 5 | 0) * Math_fround(.0158730168));
    HEAPF32[(HEAP32[$pixels >> 2] | 0) + (HEAP32[$i >> 2] << 4) + 4 >> 2] = $mul88;
    $mul94 = Math_fround(Math_fround((HEAPU16[$pixel74 >> 1] | 0) & 31 | 0) * Math_fround(.0322580636));
    HEAPF32[(HEAP32[$pixels >> 2] | 0) + (HEAP32[$i >> 2] << 4) + 8 >> 2] = $mul94;
    HEAPF32[(HEAP32[$pixels >> 2] | 0) + (HEAP32[$i >> 2] << 4) + 12 >> 2] = Math_fround(1.0);
    break;
   }
  case 6:
   {
    HEAP16[$pixel100 >> 1] = HEAP16[(HEAP32[$image >> 2] | 0) + (HEAP32[$i >> 2] << 1) >> 1] | 0;
    $mul107 = Math_fround(Math_fround(((HEAPU16[$pixel100 >> 1] | 0) & 61440) >> 12 | 0) * Math_fround(.0666666701));
    HEAPF32[(HEAP32[$pixels >> 2] | 0) + (HEAP32[$i >> 2] << 4) >> 2] = $mul107;
    $mul114 = Math_fround(Math_fround(((HEAPU16[$pixel100 >> 1] | 0) & 3840) >> 8 | 0) * Math_fround(.0666666701));
    HEAPF32[(HEAP32[$pixels >> 2] | 0) + (HEAP32[$i >> 2] << 4) + 4 >> 2] = $mul114;
    $mul121 = Math_fround(Math_fround(((HEAPU16[$pixel100 >> 1] | 0) & 240) >> 4 | 0) * Math_fround(.0666666701));
    HEAPF32[(HEAP32[$pixels >> 2] | 0) + (HEAP32[$i >> 2] << 4) + 8 >> 2] = $mul121;
    $mul127 = Math_fround(Math_fround((HEAPU16[$pixel100 >> 1] | 0) & 15 | 0) * Math_fround(.0666666701));
    HEAPF32[(HEAP32[$pixels >> 2] | 0) + (HEAP32[$i >> 2] << 4) + 12 >> 2] = $mul127;
    break;
   }
  case 7:
   {
    $div134 = Math_fround(Math_fround(HEAPU8[(HEAP32[$image >> 2] | 0) + (HEAP32[$k >> 2] | 0) >> 0] | 0) / Math_fround(255.0));
    HEAPF32[(HEAP32[$pixels >> 2] | 0) + (HEAP32[$i >> 2] << 4) >> 2] = $div134;
    $div141 = Math_fround(Math_fround(HEAPU8[(HEAP32[$image >> 2] | 0) + ((HEAP32[$k >> 2] | 0) + 1) >> 0] | 0) / Math_fround(255.0));
    HEAPF32[(HEAP32[$pixels >> 2] | 0) + (HEAP32[$i >> 2] << 4) + 4 >> 2] = $div141;
    $div148 = Math_fround(Math_fround(HEAPU8[(HEAP32[$image >> 2] | 0) + ((HEAP32[$k >> 2] | 0) + 2) >> 0] | 0) / Math_fround(255.0));
    HEAPF32[(HEAP32[$pixels >> 2] | 0) + (HEAP32[$i >> 2] << 4) + 8 >> 2] = $div148;
    $div155 = Math_fround(Math_fround(HEAPU8[(HEAP32[$image >> 2] | 0) + ((HEAP32[$k >> 2] | 0) + 3) >> 0] | 0) / Math_fround(255.0));
    HEAPF32[(HEAP32[$pixels >> 2] | 0) + (HEAP32[$i >> 2] << 4) + 12 >> 2] = $div155;
    HEAP32[$k >> 2] = (HEAP32[$k >> 2] | 0) + 4;
    break;
   }
  case 4:
   {
    $div163 = Math_fround(Math_fround(HEAPU8[(HEAP32[$image >> 2] | 0) + (HEAP32[$k >> 2] | 0) >> 0] | 0) / Math_fround(255.0));
    HEAPF32[(HEAP32[$pixels >> 2] | 0) + (HEAP32[$i >> 2] << 4) >> 2] = $div163;
    $div170 = Math_fround(Math_fround(HEAPU8[(HEAP32[$image >> 2] | 0) + ((HEAP32[$k >> 2] | 0) + 1) >> 0] | 0) / Math_fround(255.0));
    HEAPF32[(HEAP32[$pixels >> 2] | 0) + (HEAP32[$i >> 2] << 4) + 4 >> 2] = $div170;
    $div177 = Math_fround(Math_fround(HEAPU8[(HEAP32[$image >> 2] | 0) + ((HEAP32[$k >> 2] | 0) + 2) >> 0] | 0) / Math_fround(255.0));
    HEAPF32[(HEAP32[$pixels >> 2] | 0) + (HEAP32[$i >> 2] << 4) + 8 >> 2] = $div177;
    HEAPF32[(HEAP32[$pixels >> 2] | 0) + (HEAP32[$i >> 2] << 4) + 12 >> 2] = Math_fround(1.0);
    HEAP32[$k >> 2] = (HEAP32[$k >> 2] | 0) + 3;
    break;
   }
  case 8:
   {
    $130 = Math_fround(HEAPF32[(HEAP32[$image >> 2] | 0) + (HEAP32[$k >> 2] << 2) >> 2]);
    HEAPF32[(HEAP32[$pixels >> 2] | 0) + (HEAP32[$i >> 2] << 4) >> 2] = $130;
    HEAPF32[(HEAP32[$pixels >> 2] | 0) + (HEAP32[$i >> 2] << 4) + 4 >> 2] = Math_fround(0.0);
    HEAPF32[(HEAP32[$pixels >> 2] | 0) + (HEAP32[$i >> 2] << 4) + 8 >> 2] = Math_fround(0.0);
    HEAPF32[(HEAP32[$pixels >> 2] | 0) + (HEAP32[$i >> 2] << 4) + 12 >> 2] = Math_fround(1.0);
    break;
   }
  case 9:
   {
    $141 = Math_fround(HEAPF32[(HEAP32[$image >> 2] | 0) + (HEAP32[$k >> 2] << 2) >> 2]);
    HEAPF32[(HEAP32[$pixels >> 2] | 0) + (HEAP32[$i >> 2] << 4) >> 2] = $141;
    $146 = Math_fround(HEAPF32[(HEAP32[$image >> 2] | 0) + ((HEAP32[$k >> 2] | 0) + 1 << 2) >> 2]);
    HEAPF32[(HEAP32[$pixels >> 2] | 0) + (HEAP32[$i >> 2] << 4) + 4 >> 2] = $146;
    $151 = Math_fround(HEAPF32[(HEAP32[$image >> 2] | 0) + ((HEAP32[$k >> 2] | 0) + 2 << 2) >> 2]);
    HEAPF32[(HEAP32[$pixels >> 2] | 0) + (HEAP32[$i >> 2] << 4) + 8 >> 2] = $151;
    HEAPF32[(HEAP32[$pixels >> 2] | 0) + (HEAP32[$i >> 2] << 4) + 12 >> 2] = Math_fround(1.0);
    HEAP32[$k >> 2] = (HEAP32[$k >> 2] | 0) + 3;
    break;
   }
  case 10:
   {
    $159 = Math_fround(HEAPF32[(HEAP32[$image >> 2] | 0) + (HEAP32[$k >> 2] << 2) >> 2]);
    HEAPF32[(HEAP32[$pixels >> 2] | 0) + (HEAP32[$i >> 2] << 4) >> 2] = $159;
    $164 = Math_fround(HEAPF32[(HEAP32[$image >> 2] | 0) + ((HEAP32[$k >> 2] | 0) + 1 << 2) >> 2]);
    HEAPF32[(HEAP32[$pixels >> 2] | 0) + (HEAP32[$i >> 2] << 4) + 4 >> 2] = $164;
    $169 = Math_fround(HEAPF32[(HEAP32[$image >> 2] | 0) + ((HEAP32[$k >> 2] | 0) + 2 << 2) >> 2]);
    HEAPF32[(HEAP32[$pixels >> 2] | 0) + (HEAP32[$i >> 2] << 4) + 8 >> 2] = $169;
    $174 = Math_fround(HEAPF32[(HEAP32[$image >> 2] | 0) + ((HEAP32[$k >> 2] | 0) + 3 << 2) >> 2]);
    HEAPF32[(HEAP32[$pixels >> 2] | 0) + (HEAP32[$i >> 2] << 4) + 12 >> 2] = $174;
    HEAP32[$k >> 2] = (HEAP32[$k >> 2] | 0) + 4;
    break;
   }
  default:
   {}
  } while (0);
  HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
 }
 $179 = HEAP32[$pixels >> 2] | 0;
 STACKTOP = sp;
 return $179 | 0;
}

function _DrawCircleSector($center, $radius, $startAngle, $endAngle, $segments, $color) {
 $center = $center | 0;
 $radius = Math_fround($radius);
 $startAngle = $startAngle | 0;
 $endAngle = $endAngle | 0;
 $segments = $segments | 0;
 $color = $color | 0;
 var $101 = f0, $103 = f0, $106 = f0, $109 = f0, $110 = f0, $112 = f0, $114 = f0, $115 = f0, $117 = f0, $119 = f0, $122 = f0, $124 = f0, $26 = f0, $28 = f0, $30 = f0, $32 = f0, $34 = f0, $37 = f0, $39 = f0, $41 = f0, $43 = f0, $45 = f0, $48 = f0, $51 = f0, $52 = f0, $54 = f0, $56 = f0, $57 = f0, $59 = f0, $61 = f0, $64 = f0, $66 = f0, $67 = f0, $69 = f0, $71 = f0, $72 = f0, $74 = f0, $84 = f0, $86 = f0, $88 = f0, $90 = f0, $92 = f0, $95 = f0, $97 = f0, $99 = f0, $add = f0, $add101 = f0, $add106 = f0, $add109 = f0, $add116 = f0, $add122 = f0, $add42 = f0, $add47 = f0, $add50 = f0, $add57 = f0, $add63 = f0, $add73 = f0, $add95 = f0, $angle = 0, $conv = f0, $conv11 = 0, $conv18 = f0, $div108 = f0, $div124 = f0, $div32 = f0, $div36 = f0, $div49 = f0, $div65 = f0, $div88 = f0, $div94 = f0, $endAngle$addr = 0, $i = 0, $mul80 = f0, $radius$addr = 0, $segments$addr = 0, $startAngle$addr = 0, $stepLength = 0, $th = 0, $tmp = 0, $tmp27 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64);
 $radius$addr = sp + 52 | 0;
 $startAngle$addr = sp + 48 | 0;
 $endAngle$addr = sp + 44 | 0;
 $segments$addr = sp + 40 | 0;
 $tmp = sp + 36 | 0;
 $th = sp + 32 | 0;
 $stepLength = sp + 28 | 0;
 $angle = sp + 24 | 0;
 $tmp27 = sp + 4 | 0;
 $i = sp;
 HEAPF32[$radius$addr >> 2] = $radius;
 HEAP32[$startAngle$addr >> 2] = $startAngle;
 HEAP32[$endAngle$addr >> 2] = $endAngle;
 HEAP32[$segments$addr >> 2] = $segments;
 if (Math_fround(HEAPF32[$radius$addr >> 2]) <= Math_fround(0.0)) HEAPF32[$radius$addr >> 2] = Math_fround(.100000001);
 if ((HEAP32[$endAngle$addr >> 2] | 0) < (HEAP32[$startAngle$addr >> 2] | 0)) {
  HEAP32[$tmp >> 2] = HEAP32[$startAngle$addr >> 2];
  HEAP32[$startAngle$addr >> 2] = HEAP32[$endAngle$addr >> 2];
  HEAP32[$endAngle$addr >> 2] = HEAP32[$tmp >> 2];
 }
 if ((HEAP32[$segments$addr >> 2] | 0) < 4) {
  HEAPF32[$th >> 2] = Math_fround(_acosf(Math_fround(Math_fround(Math_fround(+Math_pow(+Math_fround(Math_fround(1.0) - Math_fround(Math_fround(.5) / Math_fround(HEAPF32[$radius$addr >> 2]))), 2.0)) * Math_fround(2.0)) - Math_fround(1.0))));
  $conv = Math_fround((HEAP32[$endAngle$addr >> 2] | 0) - (HEAP32[$startAngle$addr >> 2] | 0) | 0);
  $conv11 = ~~Math_fround(Math_fround($conv * Math_fround(Math_ceil(Math_fround(Math_fround(6.28318548) / Math_fround(HEAPF32[$th >> 2]))))) / Math_fround(360.0));
  HEAP32[$segments$addr >> 2] = $conv11;
  HEAP32[$segments$addr >> 2] = (HEAP32[$segments$addr >> 2] | 0) <= 0 ? 4 : $conv11;
 }
 $conv18 = Math_fround((HEAP32[$endAngle$addr >> 2] | 0) - (HEAP32[$startAngle$addr >> 2] | 0) | 0);
 HEAPF32[$stepLength >> 2] = Math_fround($conv18 / Math_fround(HEAP32[$segments$addr >> 2] | 0));
 HEAPF32[$angle >> 2] = Math_fround(HEAP32[$startAngle$addr >> 2] | 0);
 if (_rlCheckBufferLimit((HEAP32[$segments$addr >> 2] << 2 | 0) / 2 | 0) | 0) _rlglDraw();
 _GetShapesTexture($tmp27);
 _rlEnableTexture(HEAP32[$tmp27 >> 2] | 0);
 _rlBegin(7);
 HEAP32[$i >> 2] = 0;
 while (1) {
  if ((HEAP32[$i >> 2] | 0) >= ((HEAP32[$segments$addr >> 2] | 0) / 2 | 0 | 0)) break;
  _rlColor4ub(HEAP8[$color >> 0] | 0, HEAP8[$color + 1 >> 0] | 0, HEAP8[$color + 2 >> 0] | 0, HEAP8[$color + 3 >> 0] | 0);
  $26 = Math_fround(HEAPF32[14989]);
  $div32 = Math_fround($26 / Math_fround(HEAP32[14994] | 0));
  $28 = Math_fround(HEAPF32[14990]);
  _rlTexCoord2f($div32, Math_fround($28 / Math_fround(HEAP32[14995] | 0)));
  $30 = Math_fround(HEAPF32[$center >> 2]);
  _rlVertex2f($30, Math_fround(HEAPF32[$center + 4 >> 2]));
  $32 = Math_fround(HEAPF32[14989]);
  $div36 = Math_fround($32 / Math_fround(HEAP32[14994] | 0));
  $34 = Math_fround(HEAPF32[14990]);
  $add = Math_fround($34 + Math_fround(HEAPF32[14992]));
  _rlTexCoord2f($div36, Math_fround($add / Math_fround(HEAP32[14995] | 0)));
  $37 = Math_fround(HEAPF32[$center >> 2]);
  $39 = Math_fround(+_llvm_sin_f32(+Math_fround(Math_fround(HEAPF32[$angle >> 2]) * Math_fround(.0174532924))));
  $add42 = Math_fround($37 + Math_fround($39 * Math_fround(HEAPF32[$radius$addr >> 2])));
  $41 = Math_fround(HEAPF32[$center + 4 >> 2]);
  $43 = Math_fround(+_llvm_cos_f32(+Math_fround(Math_fround(HEAPF32[$angle >> 2]) * Math_fround(.0174532924))));
  _rlVertex2f($add42, Math_fround($41 + Math_fround($43 * Math_fround(HEAPF32[$radius$addr >> 2]))));
  $45 = Math_fround(HEAPF32[14989]);
  $add47 = Math_fround($45 + Math_fround(HEAPF32[14991]));
  $div49 = Math_fround($add47 / Math_fround(HEAP32[14994] | 0));
  $48 = Math_fround(HEAPF32[14990]);
  $add50 = Math_fround($48 + Math_fround(HEAPF32[14992]));
  _rlTexCoord2f($div49, Math_fround($add50 / Math_fround(HEAP32[14995] | 0)));
  $51 = Math_fround(HEAPF32[$center >> 2]);
  $52 = Math_fround(HEAPF32[$angle >> 2]);
  $54 = Math_fround(+_llvm_sin_f32(+Math_fround(Math_fround($52 + Math_fround(HEAPF32[$stepLength >> 2])) * Math_fround(.0174532924))));
  $add57 = Math_fround($51 + Math_fround($54 * Math_fround(HEAPF32[$radius$addr >> 2])));
  $56 = Math_fround(HEAPF32[$center + 4 >> 2]);
  $57 = Math_fround(HEAPF32[$angle >> 2]);
  $59 = Math_fround(+_llvm_cos_f32(+Math_fround(Math_fround($57 + Math_fround(HEAPF32[$stepLength >> 2])) * Math_fround(.0174532924))));
  _rlVertex2f($add57, Math_fround($56 + Math_fround($59 * Math_fround(HEAPF32[$radius$addr >> 2]))));
  $61 = Math_fround(HEAPF32[14989]);
  $add63 = Math_fround($61 + Math_fround(HEAPF32[14991]));
  $div65 = Math_fround($add63 / Math_fround(HEAP32[14994] | 0));
  $64 = Math_fround(HEAPF32[14990]);
  _rlTexCoord2f($div65, Math_fround($64 / Math_fround(HEAP32[14995] | 0)));
  $66 = Math_fround(HEAPF32[$center >> 2]);
  $67 = Math_fround(HEAPF32[$angle >> 2]);
  $69 = Math_fround(+_llvm_sin_f32(+Math_fround(Math_fround($67 + Math_fround(Math_fround(HEAPF32[$stepLength >> 2]) * Math_fround(2.0))) * Math_fround(.0174532924))));
  $add73 = Math_fround($66 + Math_fround($69 * Math_fround(HEAPF32[$radius$addr >> 2])));
  $71 = Math_fround(HEAPF32[$center + 4 >> 2]);
  $72 = Math_fround(HEAPF32[$angle >> 2]);
  $74 = Math_fround(+_llvm_cos_f32(+Math_fround(Math_fround($72 + Math_fround(Math_fround(HEAPF32[$stepLength >> 2]) * Math_fround(2.0))) * Math_fround(.0174532924))));
  _rlVertex2f($add73, Math_fround($71 + Math_fround($74 * Math_fround(HEAPF32[$radius$addr >> 2]))));
  $mul80 = Math_fround(Math_fround(HEAPF32[$stepLength >> 2]) * Math_fround(2.0));
  HEAPF32[$angle >> 2] = Math_fround(Math_fround(HEAPF32[$angle >> 2]) + $mul80);
  HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
 }
 if (!((HEAP32[$segments$addr >> 2] | 0) % 2 | 0)) {
  _rlEnd();
  _rlDisableTexture();
  STACKTOP = sp;
  return;
 }
 _rlColor4ub(HEAP8[$color >> 0] | 0, HEAP8[$color + 1 >> 0] | 0, HEAP8[$color + 2 >> 0] | 0, HEAP8[$color + 3 >> 0] | 0);
 $84 = Math_fround(HEAPF32[14989]);
 $div88 = Math_fround($84 / Math_fround(HEAP32[14994] | 0));
 $86 = Math_fround(HEAPF32[14990]);
 _rlTexCoord2f($div88, Math_fround($86 / Math_fround(HEAP32[14995] | 0)));
 $88 = Math_fround(HEAPF32[$center >> 2]);
 _rlVertex2f($88, Math_fround(HEAPF32[$center + 4 >> 2]));
 $90 = Math_fround(HEAPF32[14989]);
 $div94 = Math_fround($90 / Math_fround(HEAP32[14994] | 0));
 $92 = Math_fround(HEAPF32[14990]);
 $add95 = Math_fround($92 + Math_fround(HEAPF32[14992]));
 _rlTexCoord2f($div94, Math_fround($add95 / Math_fround(HEAP32[14995] | 0)));
 $95 = Math_fround(HEAPF32[$center >> 2]);
 $97 = Math_fround(+_llvm_sin_f32(+Math_fround(Math_fround(HEAPF32[$angle >> 2]) * Math_fround(.0174532924))));
 $add101 = Math_fround($95 + Math_fround($97 * Math_fround(HEAPF32[$radius$addr >> 2])));
 $99 = Math_fround(HEAPF32[$center + 4 >> 2]);
 $101 = Math_fround(+_llvm_cos_f32(+Math_fround(Math_fround(HEAPF32[$angle >> 2]) * Math_fround(.0174532924))));
 _rlVertex2f($add101, Math_fround($99 + Math_fround($101 * Math_fround(HEAPF32[$radius$addr >> 2]))));
 $103 = Math_fround(HEAPF32[14989]);
 $add106 = Math_fround($103 + Math_fround(HEAPF32[14991]));
 $div108 = Math_fround($add106 / Math_fround(HEAP32[14994] | 0));
 $106 = Math_fround(HEAPF32[14990]);
 $add109 = Math_fround($106 + Math_fround(HEAPF32[14992]));
 _rlTexCoord2f($div108, Math_fround($add109 / Math_fround(HEAP32[14995] | 0)));
 $109 = Math_fround(HEAPF32[$center >> 2]);
 $110 = Math_fround(HEAPF32[$angle >> 2]);
 $112 = Math_fround(+_llvm_sin_f32(+Math_fround(Math_fround($110 + Math_fround(HEAPF32[$stepLength >> 2])) * Math_fround(.0174532924))));
 $add116 = Math_fround($109 + Math_fround($112 * Math_fround(HEAPF32[$radius$addr >> 2])));
 $114 = Math_fround(HEAPF32[$center + 4 >> 2]);
 $115 = Math_fround(HEAPF32[$angle >> 2]);
 $117 = Math_fround(+_llvm_cos_f32(+Math_fround(Math_fround($115 + Math_fround(HEAPF32[$stepLength >> 2])) * Math_fround(.0174532924))));
 _rlVertex2f($add116, Math_fround($114 + Math_fround($117 * Math_fround(HEAPF32[$radius$addr >> 2]))));
 $119 = Math_fround(HEAPF32[14989]);
 $add122 = Math_fround($119 + Math_fround(HEAPF32[14991]));
 $div124 = Math_fround($add122 / Math_fround(HEAP32[14994] | 0));
 $122 = Math_fround(HEAPF32[14990]);
 _rlTexCoord2f($div124, Math_fround($122 / Math_fround(HEAP32[14995] | 0)));
 $124 = Math_fround(HEAPF32[$center >> 2]);
 _rlVertex2f($124, Math_fround(HEAPF32[$center + 4 >> 2]));
 _rlEnd();
 _rlDisableTexture();
 STACKTOP = sp;
 return;
}

function _stbi_write_png_to_mem($pixels, $stride_bytes, $x, $y, $n, $out_len) {
 $pixels = $pixels | 0;
 $stride_bytes = $stride_bytes | 0;
 $x = $x | 0;
 $y = $y | 0;
 $n = $n | 0;
 $out_len = $out_len | 0;
 var $116 = 0, $119 = 0, $120 = 0, $121 = 0, $122 = 0, $167 = 0, $add = 0, $add$ptr45 = 0, $best_filter = 0, $best_filter_val = 0, $call23 = 0, $conv120 = 0, $ctype = 0, $est = 0, $filt = 0, $filter_type = 0, $force_filter = 0, $i = 0, $j = 0, $line_buffer = 0, $n$addr = 0, $o = 0, $out = 0, $out_len$addr = 0, $pixels$addr = 0, $retval = 0, $sig = 0, $stride_bytes$addr = 0, $x$addr = 0, $y$addr = 0, $zlen = 0, $zlib = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(112);
 $retval = sp + 96 | 0;
 $pixels$addr = sp + 92 | 0;
 $stride_bytes$addr = sp + 88 | 0;
 $x$addr = sp + 84 | 0;
 $y$addr = sp + 80 | 0;
 $n$addr = sp + 76 | 0;
 $out_len$addr = sp + 72 | 0;
 $force_filter = sp + 68 | 0;
 $ctype = sp;
 $sig = sp + 104 | 0;
 $out = sp + 64 | 0;
 $o = sp + 60 | 0;
 $filt = sp + 56 | 0;
 $zlib = sp + 52 | 0;
 $line_buffer = sp + 48 | 0;
 $j = sp + 44 | 0;
 $zlen = sp + 40 | 0;
 $filter_type = sp + 36 | 0;
 $best_filter = sp + 32 | 0;
 $best_filter_val = sp + 28 | 0;
 $est = sp + 24 | 0;
 $i = sp + 20 | 0;
 HEAP32[$pixels$addr >> 2] = $pixels;
 HEAP32[$stride_bytes$addr >> 2] = $stride_bytes;
 HEAP32[$x$addr >> 2] = $x;
 HEAP32[$y$addr >> 2] = $y;
 HEAP32[$n$addr >> 2] = $n;
 HEAP32[$out_len$addr >> 2] = $out_len;
 HEAP32[$force_filter >> 2] = -1;
 HEAP32[$ctype >> 2] = HEAP32[1296];
 HEAP32[$ctype + 4 >> 2] = HEAP32[1297];
 HEAP32[$ctype + 8 >> 2] = HEAP32[1298];
 HEAP32[$ctype + 12 >> 2] = HEAP32[1299];
 HEAP32[$ctype + 16 >> 2] = HEAP32[1300];
 HEAP8[$sig >> 0] = HEAP8[34155] | 0;
 HEAP8[$sig + 1 >> 0] = HEAP8[34156] | 0;
 HEAP8[$sig + 2 >> 0] = HEAP8[34157] | 0;
 HEAP8[$sig + 3 >> 0] = HEAP8[34158] | 0;
 HEAP8[$sig + 4 >> 0] = HEAP8[34159] | 0;
 HEAP8[$sig + 5 >> 0] = HEAP8[34160] | 0;
 HEAP8[$sig + 6 >> 0] = HEAP8[34161] | 0;
 HEAP8[$sig + 7 >> 0] = HEAP8[34162] | 0;
 if (!(HEAP32[$stride_bytes$addr >> 2] | 0)) HEAP32[$stride_bytes$addr >> 2] = Math_imul(HEAP32[$x$addr >> 2] | 0, HEAP32[$n$addr >> 2] | 0) | 0;
 if ((HEAP32[$force_filter >> 2] | 0) >= 5) HEAP32[$force_filter >> 2] = -1;
 $add = (Math_imul(HEAP32[$x$addr >> 2] | 0, HEAP32[$n$addr >> 2] | 0) | 0) + 1 | 0;
 HEAP32[$filt >> 2] = _malloc(Math_imul($add, HEAP32[$y$addr >> 2] | 0) | 0) | 0;
 if (!(HEAP32[$filt >> 2] | 0)) {
  HEAP32[$retval >> 2] = 0;
  $167 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $167 | 0;
 }
 HEAP32[$line_buffer >> 2] = _malloc(Math_imul(HEAP32[$x$addr >> 2] | 0, HEAP32[$n$addr >> 2] | 0) | 0) | 0;
 if (!(HEAP32[$line_buffer >> 2] | 0)) {
  _free(HEAP32[$filt >> 2] | 0);
  HEAP32[$retval >> 2] = 0;
  $167 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $167 | 0;
 }
 HEAP32[$j >> 2] = 0;
 while (1) {
  if ((HEAP32[$j >> 2] | 0) >= (HEAP32[$y$addr >> 2] | 0)) break;
  if ((HEAP32[$force_filter >> 2] | 0) > -1) {
   HEAP32[$filter_type >> 2] = HEAP32[$force_filter >> 2];
   _stbiw__encode_png_line(HEAP32[$pixels$addr >> 2] | 0, HEAP32[$stride_bytes$addr >> 2] | 0, HEAP32[$x$addr >> 2] | 0, HEAP32[$y$addr >> 2] | 0, HEAP32[$j >> 2] | 0, HEAP32[$n$addr >> 2] | 0, HEAP32[$force_filter >> 2] | 0, HEAP32[$line_buffer >> 2] | 0);
  } else {
   HEAP32[$best_filter >> 2] = 0;
   HEAP32[$best_filter_val >> 2] = 2147483647;
   HEAP32[$filter_type >> 2] = 0;
   while (1) {
    if ((HEAP32[$filter_type >> 2] | 0) >= 5) break;
    _stbiw__encode_png_line(HEAP32[$pixels$addr >> 2] | 0, HEAP32[$stride_bytes$addr >> 2] | 0, HEAP32[$x$addr >> 2] | 0, HEAP32[$y$addr >> 2] | 0, HEAP32[$j >> 2] | 0, HEAP32[$n$addr >> 2] | 0, HEAP32[$filter_type >> 2] | 0, HEAP32[$line_buffer >> 2] | 0);
    HEAP32[$est >> 2] = 0;
    HEAP32[$i >> 2] = 0;
    while (1) {
     if ((HEAP32[$i >> 2] | 0) >= (Math_imul(HEAP32[$x$addr >> 2] | 0, HEAP32[$n$addr >> 2] | 0) | 0)) break;
     $call23 = Math_abs(HEAP8[(HEAP32[$line_buffer >> 2] | 0) + (HEAP32[$i >> 2] | 0) >> 0] | 0) | 0;
     HEAP32[$est >> 2] = (HEAP32[$est >> 2] | 0) + $call23;
     HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
    }
    if ((HEAP32[$est >> 2] | 0) < (HEAP32[$best_filter_val >> 2] | 0)) {
     HEAP32[$best_filter_val >> 2] = HEAP32[$est >> 2];
     HEAP32[$best_filter >> 2] = HEAP32[$filter_type >> 2];
    }
    HEAP32[$filter_type >> 2] = (HEAP32[$filter_type >> 2] | 0) + 1;
   }
   if ((HEAP32[$filter_type >> 2] | 0) != (HEAP32[$best_filter >> 2] | 0)) {
    _stbiw__encode_png_line(HEAP32[$pixels$addr >> 2] | 0, HEAP32[$stride_bytes$addr >> 2] | 0, HEAP32[$x$addr >> 2] | 0, HEAP32[$y$addr >> 2] | 0, HEAP32[$j >> 2] | 0, HEAP32[$n$addr >> 2] | 0, HEAP32[$best_filter >> 2] | 0, HEAP32[$line_buffer >> 2] | 0);
    HEAP32[$filter_type >> 2] = HEAP32[$best_filter >> 2];
   }
  }
  HEAP8[(HEAP32[$filt >> 2] | 0) + (Math_imul(HEAP32[$j >> 2] | 0, (Math_imul(HEAP32[$x$addr >> 2] | 0, HEAP32[$n$addr >> 2] | 0) | 0) + 1 | 0) | 0) >> 0] = HEAP32[$filter_type >> 2];
  $add$ptr45 = (HEAP32[$filt >> 2] | 0) + (Math_imul(HEAP32[$j >> 2] | 0, (Math_imul(HEAP32[$x$addr >> 2] | 0, HEAP32[$n$addr >> 2] | 0) | 0) + 1 | 0) | 0) + 1 | 0;
  _memmove($add$ptr45 | 0, HEAP32[$line_buffer >> 2] | 0, Math_imul(HEAP32[$x$addr >> 2] | 0, HEAP32[$n$addr >> 2] | 0) | 0) | 0;
  HEAP32[$j >> 2] = (HEAP32[$j >> 2] | 0) + 1;
 }
 _free(HEAP32[$line_buffer >> 2] | 0);
 HEAP32[$zlib >> 2] = _stbi_zlib_compress(HEAP32[$filt >> 2] | 0, Math_imul(HEAP32[$y$addr >> 2] | 0, (Math_imul(HEAP32[$x$addr >> 2] | 0, HEAP32[$n$addr >> 2] | 0) | 0) + 1 | 0) | 0, $zlen, 8) | 0;
 _free(HEAP32[$filt >> 2] | 0);
 if (!(HEAP32[$zlib >> 2] | 0)) {
  HEAP32[$retval >> 2] = 0;
  $167 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $167 | 0;
 }
 HEAP32[$out >> 2] = _malloc(45 + (HEAP32[$zlen >> 2] | 0) + 12 | 0) | 0;
 if (!(HEAP32[$out >> 2] | 0)) {
  HEAP32[$retval >> 2] = 0;
  $167 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $167 | 0;
 }
 HEAP32[HEAP32[$out_len$addr >> 2] >> 2] = 45 + (HEAP32[$zlen >> 2] | 0) + 12;
 HEAP32[$o >> 2] = HEAP32[$out >> 2];
 _memmove(HEAP32[$o >> 2] | 0, $sig | 0, 8) | 0;
 HEAP32[$o >> 2] = (HEAP32[$o >> 2] | 0) + 8;
 HEAP8[HEAP32[$o >> 2] >> 0] = 0;
 HEAP8[(HEAP32[$o >> 2] | 0) + 1 >> 0] = 0;
 HEAP8[(HEAP32[$o >> 2] | 0) + 2 >> 0] = 0;
 HEAP8[(HEAP32[$o >> 2] | 0) + 3 >> 0] = 13;
 HEAP32[$o >> 2] = (HEAP32[$o >> 2] | 0) + 4;
 HEAP8[HEAP32[$o >> 2] >> 0] = HEAP8[34163] | 0;
 HEAP8[(HEAP32[$o >> 2] | 0) + 1 >> 0] = HEAP8[34164] | 0;
 HEAP8[(HEAP32[$o >> 2] | 0) + 2 >> 0] = HEAP8[34165] | 0;
 HEAP8[(HEAP32[$o >> 2] | 0) + 3 >> 0] = HEAP8[34166] | 0;
 HEAP32[$o >> 2] = (HEAP32[$o >> 2] | 0) + 4;
 HEAP8[HEAP32[$o >> 2] >> 0] = HEAP32[$x$addr >> 2] >> 24;
 HEAP8[(HEAP32[$o >> 2] | 0) + 1 >> 0] = HEAP32[$x$addr >> 2] >> 16;
 HEAP8[(HEAP32[$o >> 2] | 0) + 2 >> 0] = HEAP32[$x$addr >> 2] >> 8;
 HEAP8[(HEAP32[$o >> 2] | 0) + 3 >> 0] = HEAP32[$x$addr >> 2];
 HEAP32[$o >> 2] = (HEAP32[$o >> 2] | 0) + 4;
 HEAP8[HEAP32[$o >> 2] >> 0] = HEAP32[$y$addr >> 2] >> 24;
 HEAP8[(HEAP32[$o >> 2] | 0) + 1 >> 0] = HEAP32[$y$addr >> 2] >> 16;
 HEAP8[(HEAP32[$o >> 2] | 0) + 2 >> 0] = HEAP32[$y$addr >> 2] >> 8;
 HEAP8[(HEAP32[$o >> 2] | 0) + 3 >> 0] = HEAP32[$y$addr >> 2];
 HEAP32[$o >> 2] = (HEAP32[$o >> 2] | 0) + 4;
 $116 = HEAP32[$o >> 2] | 0;
 HEAP32[$o >> 2] = $116 + 1;
 HEAP8[$116 >> 0] = 8;
 $conv120 = HEAP32[$ctype + (HEAP32[$n$addr >> 2] << 2) >> 2] & 255;
 $119 = HEAP32[$o >> 2] | 0;
 HEAP32[$o >> 2] = $119 + 1;
 HEAP8[$119 >> 0] = $conv120;
 $120 = HEAP32[$o >> 2] | 0;
 HEAP32[$o >> 2] = $120 + 1;
 HEAP8[$120 >> 0] = 0;
 $121 = HEAP32[$o >> 2] | 0;
 HEAP32[$o >> 2] = $121 + 1;
 HEAP8[$121 >> 0] = 0;
 $122 = HEAP32[$o >> 2] | 0;
 HEAP32[$o >> 2] = $122 + 1;
 HEAP8[$122 >> 0] = 0;
 _stbiw__wpcrc($o, 13);
 HEAP8[HEAP32[$o >> 2] >> 0] = HEAP32[$zlen >> 2] >> 24;
 HEAP8[(HEAP32[$o >> 2] | 0) + 1 >> 0] = HEAP32[$zlen >> 2] >> 16;
 HEAP8[(HEAP32[$o >> 2] | 0) + 2 >> 0] = HEAP32[$zlen >> 2] >> 8;
 HEAP8[(HEAP32[$o >> 2] | 0) + 3 >> 0] = HEAP32[$zlen >> 2];
 HEAP32[$o >> 2] = (HEAP32[$o >> 2] | 0) + 4;
 HEAP8[HEAP32[$o >> 2] >> 0] = HEAP8[34168] | 0;
 HEAP8[(HEAP32[$o >> 2] | 0) + 1 >> 0] = HEAP8[34169] | 0;
 HEAP8[(HEAP32[$o >> 2] | 0) + 2 >> 0] = HEAP8[34170] | 0;
 HEAP8[(HEAP32[$o >> 2] | 0) + 3 >> 0] = HEAP8[34171] | 0;
 HEAP32[$o >> 2] = (HEAP32[$o >> 2] | 0) + 4;
 _memmove(HEAP32[$o >> 2] | 0, HEAP32[$zlib >> 2] | 0, HEAP32[$zlen >> 2] | 0) | 0;
 HEAP32[$o >> 2] = (HEAP32[$o >> 2] | 0) + (HEAP32[$zlen >> 2] | 0);
 _free(HEAP32[$zlib >> 2] | 0);
 _stbiw__wpcrc($o, HEAP32[$zlen >> 2] | 0);
 HEAP8[HEAP32[$o >> 2] >> 0] = 0;
 HEAP8[(HEAP32[$o >> 2] | 0) + 1 >> 0] = 0;
 HEAP8[(HEAP32[$o >> 2] | 0) + 2 >> 0] = 0;
 HEAP8[(HEAP32[$o >> 2] | 0) + 3 >> 0] = 0;
 HEAP32[$o >> 2] = (HEAP32[$o >> 2] | 0) + 4;
 HEAP8[HEAP32[$o >> 2] >> 0] = HEAP8[34173] | 0;
 HEAP8[(HEAP32[$o >> 2] | 0) + 1 >> 0] = HEAP8[34174] | 0;
 HEAP8[(HEAP32[$o >> 2] | 0) + 2 >> 0] = HEAP8[34175] | 0;
 HEAP8[(HEAP32[$o >> 2] | 0) + 3 >> 0] = HEAP8[34176] | 0;
 HEAP32[$o >> 2] = (HEAP32[$o >> 2] | 0) + 4;
 _stbiw__wpcrc($o, 0);
 if ((HEAP32[$o >> 2] | 0) != ((HEAP32[$out >> 2] | 0) + (HEAP32[HEAP32[$out_len$addr >> 2] >> 2] | 0) | 0)) ___assert_fail(34178, 34040, 1155, 34198);
 HEAP32[$retval >> 2] = HEAP32[$out >> 2];
 $167 = HEAP32[$retval >> 2] | 0;
 STACKTOP = sp;
 return $167 | 0;
}

function _GetImageData($image) {
 $image = $image | 0;
 var $185 = 0, $conv102 = 0, $conv116 = 0, $conv124 = 0, $conv132 = 0, $conv139 = 0, $conv185 = 0, $conv198 = 0, $conv205 = 0, $conv212 = 0, $conv222 = 0, $conv228 = 0, $conv234 = 0, $conv240 = 0, $conv53 = 0, $conv61 = 0, $conv69 = 0, $conv87 = 0, $conv95 = 0, $i = 0, $k = 0, $pixel = 0, $pixel108 = 0, $pixel79 = 0, $pixels = 0, $retval = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 $vararg_buffer1 = sp + 8 | 0;
 $vararg_buffer = sp;
 $retval = sp + 24 | 0;
 $pixels = sp + 20 | 0;
 $i = sp + 16 | 0;
 $k = sp + 12 | 0;
 $pixel = sp + 32 | 0;
 $pixel79 = sp + 30 | 0;
 $pixel108 = sp + 28 | 0;
 if (HEAP32[$image + 4 >> 2] | 0) if (HEAP32[$image + 8 >> 2] | 0) {
  HEAP32[$pixels >> 2] = _malloc((Math_imul(HEAP32[$image + 4 >> 2] | 0, HEAP32[$image + 8 >> 2] | 0) | 0) << 2) | 0;
  L4 : do if ((HEAP32[$image + 16 >> 2] | 0) >= 11) _TraceLog(4, 37647, $vararg_buffer); else {
   if ((HEAP32[$image + 16 >> 2] | 0) == 8) label = 9; else if ((HEAP32[$image + 16 >> 2] | 0) == 9) label = 9; else if ((HEAP32[$image + 16 >> 2] | 0) == 10) label = 9;
   if ((label | 0) == 9) _TraceLog(4, 37711, $vararg_buffer1);
   HEAP32[$i >> 2] = 0;
   HEAP32[$k >> 2] = 0;
   while (1) {
    if ((HEAP32[$i >> 2] | 0) >= (Math_imul(HEAP32[$image + 4 >> 2] | 0, HEAP32[$image + 8 >> 2] | 0) | 0)) break L4;
    do switch (HEAP32[$image + 16 >> 2] | 0) {
    case 1:
     {
      HEAP8[(HEAP32[$pixels >> 2] | 0) + (HEAP32[$i >> 2] << 2) >> 0] = HEAP8[(HEAP32[$image >> 2] | 0) + (HEAP32[$i >> 2] | 0) >> 0] | 0;
      HEAP8[(HEAP32[$pixels >> 2] | 0) + (HEAP32[$i >> 2] << 2) + 1 >> 0] = HEAP8[(HEAP32[$image >> 2] | 0) + (HEAP32[$i >> 2] | 0) >> 0] | 0;
      HEAP8[(HEAP32[$pixels >> 2] | 0) + (HEAP32[$i >> 2] << 2) + 2 >> 0] = HEAP8[(HEAP32[$image >> 2] | 0) + (HEAP32[$i >> 2] | 0) >> 0] | 0;
      HEAP8[(HEAP32[$pixels >> 2] | 0) + (HEAP32[$i >> 2] << 2) + 3 >> 0] = -1;
      break;
     }
    case 2:
     {
      HEAP8[(HEAP32[$pixels >> 2] | 0) + (HEAP32[$i >> 2] << 2) >> 0] = HEAP8[(HEAP32[$image >> 2] | 0) + (HEAP32[$k >> 2] | 0) >> 0] | 0;
      HEAP8[(HEAP32[$pixels >> 2] | 0) + (HEAP32[$i >> 2] << 2) + 1 >> 0] = HEAP8[(HEAP32[$image >> 2] | 0) + (HEAP32[$k >> 2] | 0) >> 0] | 0;
      HEAP8[(HEAP32[$pixels >> 2] | 0) + (HEAP32[$i >> 2] << 2) + 2 >> 0] = HEAP8[(HEAP32[$image >> 2] | 0) + (HEAP32[$k >> 2] | 0) >> 0] | 0;
      HEAP8[(HEAP32[$pixels >> 2] | 0) + (HEAP32[$i >> 2] << 2) + 3 >> 0] = HEAP8[(HEAP32[$image >> 2] | 0) + ((HEAP32[$k >> 2] | 0) + 1) >> 0] | 0;
      HEAP32[$k >> 2] = (HEAP32[$k >> 2] | 0) + 2;
      break;
     }
    case 5:
     {
      HEAP16[$pixel >> 1] = HEAP16[(HEAP32[$image >> 2] | 0) + (HEAP32[$i >> 2] << 1) >> 1] | 0;
      $conv53 = ~~Math_fround(Math_fround(((HEAPU16[$pixel >> 1] | 0) & 63488) >> 11 | 0) * Math_fround(8.0)) & 255;
      HEAP8[(HEAP32[$pixels >> 2] | 0) + (HEAP32[$i >> 2] << 2) >> 0] = $conv53;
      $conv61 = ~~Math_fround(Math_fround(((HEAPU16[$pixel >> 1] | 0) & 1984) >> 6 | 0) * Math_fround(8.0)) & 255;
      HEAP8[(HEAP32[$pixels >> 2] | 0) + (HEAP32[$i >> 2] << 2) + 1 >> 0] = $conv61;
      $conv69 = ~~Math_fround(Math_fround(((HEAPU16[$pixel >> 1] | 0) & 62) >> 1 | 0) * Math_fround(8.0)) & 255;
      HEAP8[(HEAP32[$pixels >> 2] | 0) + (HEAP32[$i >> 2] << 2) + 2 >> 0] = $conv69;
      HEAP8[(HEAP32[$pixels >> 2] | 0) + (HEAP32[$i >> 2] << 2) + 3 >> 0] = ((HEAPU16[$pixel >> 1] | 0) & 1) * 255;
      break;
     }
    case 3:
     {
      HEAP16[$pixel79 >> 1] = HEAP16[(HEAP32[$image >> 2] | 0) + (HEAP32[$i >> 2] << 1) >> 1] | 0;
      $conv87 = ~~Math_fround(Math_fround(((HEAPU16[$pixel79 >> 1] | 0) & 63488) >> 11 | 0) * Math_fround(8.0)) & 255;
      HEAP8[(HEAP32[$pixels >> 2] | 0) + (HEAP32[$i >> 2] << 2) >> 0] = $conv87;
      $conv95 = ~~Math_fround(Math_fround(((HEAPU16[$pixel79 >> 1] | 0) & 2016) >> 5 | 0) * Math_fround(4.0)) & 255;
      HEAP8[(HEAP32[$pixels >> 2] | 0) + (HEAP32[$i >> 2] << 2) + 1 >> 0] = $conv95;
      $conv102 = ~~Math_fround(Math_fround((HEAPU16[$pixel79 >> 1] | 0) & 31 | 0) * Math_fround(8.0)) & 255;
      HEAP8[(HEAP32[$pixels >> 2] | 0) + (HEAP32[$i >> 2] << 2) + 2 >> 0] = $conv102;
      HEAP8[(HEAP32[$pixels >> 2] | 0) + (HEAP32[$i >> 2] << 2) + 3 >> 0] = -1;
      break;
     }
    case 6:
     {
      HEAP16[$pixel108 >> 1] = HEAP16[(HEAP32[$image >> 2] | 0) + (HEAP32[$i >> 2] << 1) >> 1] | 0;
      $conv116 = ~~Math_fround(Math_fround(((HEAPU16[$pixel108 >> 1] | 0) & 61440) >> 12 | 0) * Math_fround(17.0)) & 255;
      HEAP8[(HEAP32[$pixels >> 2] | 0) + (HEAP32[$i >> 2] << 2) >> 0] = $conv116;
      $conv124 = ~~Math_fround(Math_fround(((HEAPU16[$pixel108 >> 1] | 0) & 3840) >> 8 | 0) * Math_fround(17.0)) & 255;
      HEAP8[(HEAP32[$pixels >> 2] | 0) + (HEAP32[$i >> 2] << 2) + 1 >> 0] = $conv124;
      $conv132 = ~~Math_fround(Math_fround(((HEAPU16[$pixel108 >> 1] | 0) & 240) >> 4 | 0) * Math_fround(17.0)) & 255;
      HEAP8[(HEAP32[$pixels >> 2] | 0) + (HEAP32[$i >> 2] << 2) + 2 >> 0] = $conv132;
      $conv139 = ~~Math_fround(Math_fround((HEAPU16[$pixel108 >> 1] | 0) & 15 | 0) * Math_fround(17.0)) & 255;
      HEAP8[(HEAP32[$pixels >> 2] | 0) + (HEAP32[$i >> 2] << 2) + 3 >> 0] = $conv139;
      break;
     }
    case 7:
     {
      HEAP8[(HEAP32[$pixels >> 2] | 0) + (HEAP32[$i >> 2] << 2) >> 0] = HEAP8[(HEAP32[$image >> 2] | 0) + (HEAP32[$k >> 2] | 0) >> 0] | 0;
      HEAP8[(HEAP32[$pixels >> 2] | 0) + (HEAP32[$i >> 2] << 2) + 1 >> 0] = HEAP8[(HEAP32[$image >> 2] | 0) + ((HEAP32[$k >> 2] | 0) + 1) >> 0] | 0;
      HEAP8[(HEAP32[$pixels >> 2] | 0) + (HEAP32[$i >> 2] << 2) + 2 >> 0] = HEAP8[(HEAP32[$image >> 2] | 0) + ((HEAP32[$k >> 2] | 0) + 2) >> 0] | 0;
      HEAP8[(HEAP32[$pixels >> 2] | 0) + (HEAP32[$i >> 2] << 2) + 3 >> 0] = HEAP8[(HEAP32[$image >> 2] | 0) + ((HEAP32[$k >> 2] | 0) + 3) >> 0] | 0;
      HEAP32[$k >> 2] = (HEAP32[$k >> 2] | 0) + 4;
      break;
     }
    case 4:
     {
      HEAP8[(HEAP32[$pixels >> 2] | 0) + (HEAP32[$i >> 2] << 2) >> 0] = HEAP8[(HEAP32[$image >> 2] | 0) + (HEAP32[$k >> 2] | 0) >> 0] | 0;
      HEAP8[(HEAP32[$pixels >> 2] | 0) + (HEAP32[$i >> 2] << 2) + 1 >> 0] = HEAP8[(HEAP32[$image >> 2] | 0) + ((HEAP32[$k >> 2] | 0) + 1) >> 0] | 0;
      HEAP8[(HEAP32[$pixels >> 2] | 0) + (HEAP32[$i >> 2] << 2) + 2 >> 0] = HEAP8[(HEAP32[$image >> 2] | 0) + ((HEAP32[$k >> 2] | 0) + 2) >> 0] | 0;
      HEAP8[(HEAP32[$pixels >> 2] | 0) + (HEAP32[$i >> 2] << 2) + 3 >> 0] = -1;
      HEAP32[$k >> 2] = (HEAP32[$k >> 2] | 0) + 3;
      break;
     }
    case 8:
     {
      $conv185 = ~~Math_fround(Math_fround(HEAPF32[(HEAP32[$image >> 2] | 0) + (HEAP32[$k >> 2] << 2) >> 2]) * Math_fround(255.0)) & 255;
      HEAP8[(HEAP32[$pixels >> 2] | 0) + (HEAP32[$i >> 2] << 2) >> 0] = $conv185;
      HEAP8[(HEAP32[$pixels >> 2] | 0) + (HEAP32[$i >> 2] << 2) + 1 >> 0] = 0;
      HEAP8[(HEAP32[$pixels >> 2] | 0) + (HEAP32[$i >> 2] << 2) + 2 >> 0] = 0;
      HEAP8[(HEAP32[$pixels >> 2] | 0) + (HEAP32[$i >> 2] << 2) + 3 >> 0] = -1;
      break;
     }
    case 9:
     {
      $conv198 = ~~Math_fround(Math_fround(HEAPF32[(HEAP32[$image >> 2] | 0) + (HEAP32[$k >> 2] << 2) >> 2]) * Math_fround(255.0)) & 255;
      HEAP8[(HEAP32[$pixels >> 2] | 0) + (HEAP32[$i >> 2] << 2) >> 0] = $conv198;
      $conv205 = ~~Math_fround(Math_fround(HEAPF32[(HEAP32[$image >> 2] | 0) + ((HEAP32[$k >> 2] | 0) + 1 << 2) >> 2]) * Math_fround(255.0)) & 255;
      HEAP8[(HEAP32[$pixels >> 2] | 0) + (HEAP32[$i >> 2] << 2) + 1 >> 0] = $conv205;
      $conv212 = ~~Math_fround(Math_fround(HEAPF32[(HEAP32[$image >> 2] | 0) + ((HEAP32[$k >> 2] | 0) + 2 << 2) >> 2]) * Math_fround(255.0)) & 255;
      HEAP8[(HEAP32[$pixels >> 2] | 0) + (HEAP32[$i >> 2] << 2) + 2 >> 0] = $conv212;
      HEAP8[(HEAP32[$pixels >> 2] | 0) + (HEAP32[$i >> 2] << 2) + 3 >> 0] = -1;
      HEAP32[$k >> 2] = (HEAP32[$k >> 2] | 0) + 3;
      break;
     }
    case 10:
     {
      $conv222 = ~~Math_fround(Math_fround(HEAPF32[(HEAP32[$image >> 2] | 0) + (HEAP32[$k >> 2] << 2) >> 2]) * Math_fround(255.0)) & 255;
      HEAP8[(HEAP32[$pixels >> 2] | 0) + (HEAP32[$i >> 2] << 2) >> 0] = $conv222;
      $conv228 = ~~Math_fround(Math_fround(HEAPF32[(HEAP32[$image >> 2] | 0) + (HEAP32[$k >> 2] << 2) >> 2]) * Math_fround(255.0)) & 255;
      HEAP8[(HEAP32[$pixels >> 2] | 0) + (HEAP32[$i >> 2] << 2) + 1 >> 0] = $conv228;
      $conv234 = ~~Math_fround(Math_fround(HEAPF32[(HEAP32[$image >> 2] | 0) + (HEAP32[$k >> 2] << 2) >> 2]) * Math_fround(255.0)) & 255;
      HEAP8[(HEAP32[$pixels >> 2] | 0) + (HEAP32[$i >> 2] << 2) + 2 >> 0] = $conv234;
      $conv240 = ~~Math_fround(Math_fround(HEAPF32[(HEAP32[$image >> 2] | 0) + (HEAP32[$k >> 2] << 2) >> 2]) * Math_fround(255.0)) & 255;
      HEAP8[(HEAP32[$pixels >> 2] | 0) + (HEAP32[$i >> 2] << 2) + 3 >> 0] = $conv240;
      HEAP32[$k >> 2] = (HEAP32[$k >> 2] | 0) + 4;
      break;
     }
    default:
     {}
    } while (0);
    HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
   }
  } while (0);
  HEAP32[$retval >> 2] = HEAP32[$pixels >> 2];
  $185 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $185 | 0;
 }
 HEAP32[$retval >> 2] = 0;
 $185 = HEAP32[$retval >> 2] | 0;
 STACKTOP = sp;
 return $185 | 0;
}

function __ZNSt3__214__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b, $__e, $__kb, $__ke, $__ct, $__err, $__case_sensitive) {
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__kb = $__kb | 0;
 $__ke = $__ke | 0;
 $__ct = $__ct | 0;
 $__err = $__err | 0;
 $__case_sensitive = $__case_sensitive | 0;
 var $0 = 0, $13 = 0, $14 = 0, $16 = 0, $17 = 0, $2 = 0, $21 = 0, $22 = 0, $26 = 0, $3 = 0, $34 = 0, $36 = 0, $38 = 0, $39 = 0, $44 = 0, $49 = 0, $7 = 0, $8 = 0, $__c$0 = 0, $__consume$0$off0 = 0, $__consume$2$off0 = 0, $__indx$0 = 0, $__kb$addr$0 = 0, $__kb$addr$0143 = 0, $__kc$0 = 0, $__ky$0 = 0, $__ky19$0 = 0, $__ky55$0 = 0, $__n_does_match$0 = 0, $__n_does_match$1 = 0, $__n_does_match$2 = 0, $__n_does_match$2$be = 0, $__n_does_match$3 = 0, $__n_does_match$5 = 0, $__n_does_match$6 = 0, $__n_does_match$7 = 0, $__n_might_match$0 = 0, $__n_might_match$1 = 0, $__n_might_match$2 = 0, $__n_might_match$3 = 0, $__n_might_match$5 = 0, $__ninp_$i$i = 0, $__size_$i$i$i$i = 0, $__st$0 = 0, $__st$1 = 0, $__st$2 = 0, $__st$3 = 0, $__stat_hold$sroa$0$0 = 0, $__statbuf = 0, $__status$0 = 0, $add = 0, $call1 = 0, $cond$i = 0, $cond$i$i = 0, $cond$i$i$i = 0, $cond$i132 = 0, $conv$i = 0, $retval$0$i$i = 0, $retval$0$i$i$i$i = 0, $retval$0$i$i$i$i82 = 0, $retval$0$i$i13$i$i = 0, $retval$0$i$i13$i$i103 = 0, $sub$ptr$div$i$i = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(112);
 $__statbuf = sp;
 $sub$ptr$div$i$i = ($__ke - $__kb | 0) / 12 | 0;
 if ($sub$ptr$div$i$i >>> 0 > 100) {
  $call1 = _malloc($sub$ptr$div$i$i) | 0;
  if (!$call1) __ZSt17__throw_bad_allocv(); else {
   $__stat_hold$sroa$0$0 = $call1;
   $__status$0 = $call1;
  }
 } else {
  $__stat_hold$sroa$0$0 = 0;
  $__status$0 = $__statbuf;
 }
 $__ky$0 = $__kb;
 $__n_does_match$0 = 0;
 $__n_might_match$0 = $sub$ptr$div$i$i;
 $__st$0 = $__status$0;
 while (1) {
  if (($__ky$0 | 0) == ($__ke | 0)) break;
  $0 = HEAP8[$__ky$0 + 11 >> 0] | 0;
  if ($0 << 24 >> 24 < 0) $cond$i$i = HEAP32[$__ky$0 + 4 >> 2] | 0; else $cond$i$i = $0 & 255;
  if (!$cond$i$i) {
   HEAP8[$__st$0 >> 0] = 2;
   $__n_does_match$1 = $__n_does_match$0 + 1 | 0;
   $__n_might_match$1 = $__n_might_match$0 + -1 | 0;
  } else {
   HEAP8[$__st$0 >> 0] = 1;
   $__n_does_match$1 = $__n_does_match$0;
   $__n_might_match$1 = $__n_might_match$0;
  }
  $__ky$0 = $__ky$0 + 12 | 0;
  $__n_does_match$0 = $__n_does_match$1;
  $__n_might_match$0 = $__n_might_match$1;
  $__st$0 = $__st$0 + 1 | 0;
 }
 $__indx$0 = 0;
 $__n_does_match$2 = $__n_does_match$0;
 $__n_might_match$2 = $__n_might_match$0;
 while (1) {
  $2 = HEAP32[$__b >> 2] | 0;
  do if (!$2) $14 = 1; else {
   $3 = HEAP32[$2 + 12 >> 2] | 0;
   if (($3 | 0) == (HEAP32[$2 + 16 >> 2] | 0)) $retval$0$i$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$2 >> 2] | 0) + 36 >> 2] & 127]($2) | 0; else $retval$0$i$i$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$3 >> 0] | 0) | 0;
   if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i$i$i, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
    HEAP32[$__b >> 2] = 0;
    $14 = 1;
    break;
   } else {
    $14 = (HEAP32[$__b >> 2] | 0) == 0;
    break;
   }
  } while (0);
  $7 = HEAP32[$__e >> 2] | 0;
  if (!$7) {
   $13 = 1;
   $21 = 0;
  } else {
   $8 = HEAP32[$7 + 12 >> 2] | 0;
   if (($8 | 0) == (HEAP32[$7 + 16 >> 2] | 0)) $retval$0$i$i13$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$7 >> 2] | 0) + 36 >> 2] & 127]($7) | 0; else $retval$0$i$i13$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$8 >> 0] | 0) | 0;
   if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i13$i$i, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
    HEAP32[$__e >> 2] = 0;
    $13 = 1;
    $21 = 0;
   } else {
    $13 = 0;
    $21 = $7;
   }
  }
  $16 = HEAP32[$__b >> 2] | 0;
  if (!(($__n_might_match$2 | 0) != 0 & ($14 ^ $13))) break;
  $26 = HEAP32[$16 + 12 >> 2] | 0;
  if (($26 | 0) == (HEAP32[$16 + 16 >> 2] | 0)) $retval$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$16 >> 2] | 0) + 36 >> 2] & 127]($16) | 0; else $retval$0$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$26 >> 0] | 0) | 0;
  $conv$i = $retval$0$i$i & 255;
  if ($__case_sensitive) $__c$0 = $conv$i; else $__c$0 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$__ct >> 2] | 0) + 12 >> 2] & 31]($__ct, $conv$i) | 0;
  $add = $__indx$0 + 1 | 0;
  $__consume$0$off0 = 0;
  $__ky19$0 = $__kb;
  $__n_does_match$3 = $__n_does_match$2;
  $__n_might_match$3 = $__n_might_match$2;
  $__st$1 = $__status$0;
  while (1) {
   if (($__ky19$0 | 0) == ($__ke | 0)) break;
   do if ((HEAP8[$__st$1 >> 0] | 0) == 1) {
    $__size_$i$i$i$i = $__ky19$0 + 11 | 0;
    if ((HEAP8[$__size_$i$i$i$i >> 0] | 0) < 0) $cond$i$i$i = HEAP32[$__ky19$0 >> 2] | 0; else $cond$i$i$i = $__ky19$0;
    $34 = HEAP8[$cond$i$i$i + $__indx$0 >> 0] | 0;
    if ($__case_sensitive) $__kc$0 = $34; else $__kc$0 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$__ct >> 2] | 0) + 12 >> 2] & 31]($__ct, $34) | 0;
    if ($__c$0 << 24 >> 24 != $__kc$0 << 24 >> 24) {
     HEAP8[$__st$1 >> 0] = 0;
     $__consume$2$off0 = $__consume$0$off0;
     $__n_does_match$5 = $__n_does_match$3;
     $__n_might_match$5 = $__n_might_match$3 + -1 | 0;
     break;
    }
    $36 = HEAP8[$__size_$i$i$i$i >> 0] | 0;
    if ($36 << 24 >> 24 < 0) $cond$i132 = HEAP32[$__ky19$0 + 4 >> 2] | 0; else $cond$i132 = $36 & 255;
    if (($cond$i132 | 0) == ($add | 0)) {
     HEAP8[$__st$1 >> 0] = 2;
     $__consume$2$off0 = 1;
     $__n_does_match$5 = $__n_does_match$3 + 1 | 0;
     $__n_might_match$5 = $__n_might_match$3 + -1 | 0;
    } else {
     $__consume$2$off0 = 1;
     $__n_does_match$5 = $__n_does_match$3;
     $__n_might_match$5 = $__n_might_match$3;
    }
   } else {
    $__consume$2$off0 = $__consume$0$off0;
    $__n_does_match$5 = $__n_does_match$3;
    $__n_might_match$5 = $__n_might_match$3;
   } while (0);
   $__consume$0$off0 = $__consume$2$off0;
   $__ky19$0 = $__ky19$0 + 12 | 0;
   $__n_does_match$3 = $__n_does_match$5;
   $__n_might_match$3 = $__n_might_match$5;
   $__st$1 = $__st$1 + 1 | 0;
  }
  L67 : do if ($__consume$0$off0) {
   $38 = HEAP32[$__b >> 2] | 0;
   $__ninp_$i$i = $38 + 12 | 0;
   $39 = HEAP32[$__ninp_$i$i >> 2] | 0;
   if (($39 | 0) == (HEAP32[$38 + 16 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[$38 >> 2] | 0) + 40 >> 2] & 127]($38) | 0; else {
    HEAP32[$__ninp_$i$i >> 2] = $39 + 1;
    __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$39 >> 0] | 0) | 0;
   }
   if (($__n_does_match$3 + $__n_might_match$3 | 0) >>> 0 > 1) {
    $__ky55$0 = $__kb;
    $__n_does_match$6 = $__n_does_match$3;
    $__st$2 = $__status$0;
    while (1) {
     if (($__ky55$0 | 0) == ($__ke | 0)) {
      $__n_does_match$2$be = $__n_does_match$6;
      break L67;
     }
     if ((HEAP8[$__st$2 >> 0] | 0) == 2) {
      $44 = HEAP8[$__ky55$0 + 11 >> 0] | 0;
      if ($44 << 24 >> 24 < 0) $cond$i = HEAP32[$__ky55$0 + 4 >> 2] | 0; else $cond$i = $44 & 255;
      if (($cond$i | 0) == ($add | 0)) $__n_does_match$7 = $__n_does_match$6; else {
       HEAP8[$__st$2 >> 0] = 0;
       $__n_does_match$7 = $__n_does_match$6 + -1 | 0;
      }
     } else $__n_does_match$7 = $__n_does_match$6;
     $__ky55$0 = $__ky55$0 + 12 | 0;
     $__n_does_match$6 = $__n_does_match$7;
     $__st$2 = $__st$2 + 1 | 0;
    }
   } else $__n_does_match$2$be = $__n_does_match$3;
  } else $__n_does_match$2$be = $__n_does_match$3; while (0);
  $__indx$0 = $add;
  $__n_does_match$2 = $__n_does_match$2$be;
  $__n_might_match$2 = $__n_might_match$3;
 }
 do if (!$16) $49 = 1; else {
  $17 = HEAP32[$16 + 12 >> 2] | 0;
  if (($17 | 0) == (HEAP32[$16 + 16 >> 2] | 0)) $retval$0$i$i$i$i82 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$16 >> 2] | 0) + 36 >> 2] & 127]($16) | 0; else $retval$0$i$i$i$i82 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$17 >> 0] | 0) | 0;
  if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i$i$i82, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
   HEAP32[$__b >> 2] = 0;
   $49 = 1;
   break;
  } else {
   $49 = (HEAP32[$__b >> 2] | 0) == 0;
   break;
  }
 } while (0);
 do if (!$21) label = 41; else {
  $22 = HEAP32[$21 + 12 >> 2] | 0;
  if (($22 | 0) == (HEAP32[$21 + 16 >> 2] | 0)) $retval$0$i$i13$i$i103 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$21 >> 2] | 0) + 36 >> 2] & 127]($21) | 0; else $retval$0$i$i13$i$i103 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$22 >> 0] | 0) | 0;
  if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i13$i$i103, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
   HEAP32[$__e >> 2] = 0;
   label = 41;
   break;
  } else if ($49) break; else {
   label = 79;
   break;
  }
 } while (0);
 if ((label | 0) == 41) if ($49) label = 79;
 if ((label | 0) == 79) HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
 $__kb$addr$0 = $__kb;
 $__st$3 = $__status$0;
 while (1) {
  if (($__kb$addr$0 | 0) == ($__ke | 0)) {
   label = 84;
   break;
  }
  if ((HEAP8[$__st$3 >> 0] | 0) == 2) {
   $__kb$addr$0143 = $__kb$addr$0;
   break;
  }
  $__kb$addr$0 = $__kb$addr$0 + 12 | 0;
  $__st$3 = $__st$3 + 1 | 0;
 }
 if ((label | 0) == 84) {
  HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 4;
  $__kb$addr$0143 = $__ke;
 }
 _free($__stat_hold$sroa$0$0);
 STACKTOP = sp;
 return $__kb$addr$0143 | 0;
}

function _stbi__convert_format16($data, $img_n, $req_comp, $x, $y) {
 $data = $data | 0;
 $img_n = $img_n | 0;
 $req_comp = $req_comp | 0;
 $x = $x | 0;
 $y = $y | 0;
 var $14 = 0, $168 = 0, $36 = 0, $46 = 0, $65 = 0, $75 = 0, $call121 = 0, $call140 = 0, $call160 = 0, $call179 = 0, $data$addr = 0, $dest = 0, $good = 0, $i = 0, $img_n$addr = 0, $j = 0, $mul = 0, $mul10 = 0, $mul12 = 0, $req_comp$addr = 0, $retval = 0, $src = 0, $tobool = 0, $x$addr = 0, $y$addr = 0, label = 0, sp = 0, CSE$0 = 0, CSE$1 = 0, CSE$2 = 0, CSE$3 = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 $retval = sp + 40 | 0;
 $data$addr = sp + 36 | 0;
 $img_n$addr = sp + 32 | 0;
 $req_comp$addr = sp + 28 | 0;
 $x$addr = sp + 24 | 0;
 $y$addr = sp + 20 | 0;
 $i = sp + 16 | 0;
 $j = sp + 12 | 0;
 $good = sp + 8 | 0;
 $src = sp + 4 | 0;
 $dest = sp;
 HEAP32[$data$addr >> 2] = $data;
 HEAP32[$img_n$addr >> 2] = $img_n;
 HEAP32[$req_comp$addr >> 2] = $req_comp;
 HEAP32[$x$addr >> 2] = $x;
 HEAP32[$y$addr >> 2] = $y;
 if ((HEAP32[$req_comp$addr >> 2] | 0) == (HEAP32[$img_n$addr >> 2] | 0)) {
  HEAP32[$retval >> 2] = HEAP32[$data$addr >> 2];
  $168 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $168 | 0;
 }
 if (!((HEAP32[$req_comp$addr >> 2] | 0) >= 1 & (HEAP32[$req_comp$addr >> 2] | 0) <= 4)) ___assert_fail(33068, 32781, 1637, 33099);
 $mul = Math_imul(HEAP32[$req_comp$addr >> 2] | 0, HEAP32[$x$addr >> 2] | 0) | 0;
 HEAP32[$good >> 2] = _stbi__malloc((Math_imul($mul, HEAP32[$y$addr >> 2] | 0) | 0) << 1) | 0;
 if (!(HEAP32[$good >> 2] | 0)) {
  _free(HEAP32[$data$addr >> 2] | 0);
  $tobool = (_stbi__err(32857) | 0) != 0;
  HEAP32[$retval >> 2] = $tobool ? 0 : 0;
  $168 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $168 | 0;
 }
 HEAP32[$j >> 2] = 0;
 L12 : while (1) {
  $14 = HEAP32[$data$addr >> 2] | 0;
  if ((HEAP32[$j >> 2] | 0) >= (HEAP32[$y$addr >> 2] | 0)) break;
  $mul10 = Math_imul(HEAP32[$j >> 2] | 0, HEAP32[$x$addr >> 2] | 0) | 0;
  HEAP32[$src >> 2] = $14 + ((Math_imul($mul10, HEAP32[$img_n$addr >> 2] | 0) | 0) << 1);
  $mul12 = Math_imul(HEAP32[$j >> 2] | 0, HEAP32[$x$addr >> 2] | 0) | 0;
  HEAP32[$dest >> 2] = (HEAP32[$good >> 2] | 0) + ((Math_imul($mul12, HEAP32[$req_comp$addr >> 2] | 0) | 0) << 1);
  L15 : do switch ((HEAP32[$img_n$addr >> 2] << 3) + (HEAP32[$req_comp$addr >> 2] | 0) | 0) {
  case 10:
   {
    HEAP32[$i >> 2] = (HEAP32[$x$addr >> 2] | 0) - 1;
    while (1) {
     if ((HEAP32[$i >> 2] | 0) < 0) break L15;
     HEAP16[HEAP32[$dest >> 2] >> 1] = HEAP16[HEAP32[$src >> 2] >> 1] | 0;
     HEAP16[(HEAP32[$dest >> 2] | 0) + 2 >> 1] = -1;
     HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + -1;
     HEAP32[$src >> 2] = (HEAP32[$src >> 2] | 0) + 2;
     HEAP32[$dest >> 2] = (HEAP32[$dest >> 2] | 0) + 4;
    }
    break;
   }
  case 11:
   {
    HEAP32[$i >> 2] = (HEAP32[$x$addr >> 2] | 0) - 1;
    while (1) {
     if ((HEAP32[$i >> 2] | 0) < 0) break L15;
     $36 = HEAP16[HEAP32[$src >> 2] >> 1] | 0;
     HEAP16[(HEAP32[$dest >> 2] | 0) + 4 >> 1] = $36;
     HEAP16[(HEAP32[$dest >> 2] | 0) + 2 >> 1] = $36;
     HEAP16[HEAP32[$dest >> 2] >> 1] = $36;
     HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + -1;
     HEAP32[$src >> 2] = (HEAP32[$src >> 2] | 0) + 2;
     HEAP32[$dest >> 2] = (HEAP32[$dest >> 2] | 0) + 6;
    }
    break;
   }
  case 12:
   {
    HEAP32[$i >> 2] = (HEAP32[$x$addr >> 2] | 0) - 1;
    while (1) {
     if ((HEAP32[$i >> 2] | 0) < 0) break L15;
     $46 = HEAP16[HEAP32[$src >> 2] >> 1] | 0;
     HEAP16[(HEAP32[$dest >> 2] | 0) + 4 >> 1] = $46;
     HEAP16[(HEAP32[$dest >> 2] | 0) + 2 >> 1] = $46;
     HEAP16[HEAP32[$dest >> 2] >> 1] = $46;
     HEAP16[(HEAP32[$dest >> 2] | 0) + 6 >> 1] = -1;
     HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + -1;
     HEAP32[$src >> 2] = (HEAP32[$src >> 2] | 0) + 2;
     HEAP32[$dest >> 2] = (HEAP32[$dest >> 2] | 0) + 8;
    }
    break;
   }
  case 17:
   {
    HEAP32[$i >> 2] = (HEAP32[$x$addr >> 2] | 0) - 1;
    while (1) {
     if ((HEAP32[$i >> 2] | 0) < 0) break L15;
     HEAP16[HEAP32[$dest >> 2] >> 1] = HEAP16[HEAP32[$src >> 2] >> 1] | 0;
     HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + -1;
     HEAP32[$src >> 2] = (HEAP32[$src >> 2] | 0) + 4;
     HEAP32[$dest >> 2] = (HEAP32[$dest >> 2] | 0) + 2;
    }
    break;
   }
  case 19:
   {
    HEAP32[$i >> 2] = (HEAP32[$x$addr >> 2] | 0) - 1;
    while (1) {
     if ((HEAP32[$i >> 2] | 0) < 0) break L15;
     $65 = HEAP16[HEAP32[$src >> 2] >> 1] | 0;
     HEAP16[(HEAP32[$dest >> 2] | 0) + 4 >> 1] = $65;
     HEAP16[(HEAP32[$dest >> 2] | 0) + 2 >> 1] = $65;
     HEAP16[HEAP32[$dest >> 2] >> 1] = $65;
     HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + -1;
     HEAP32[$src >> 2] = (HEAP32[$src >> 2] | 0) + 4;
     HEAP32[$dest >> 2] = (HEAP32[$dest >> 2] | 0) + 6;
    }
    break;
   }
  case 20:
   {
    HEAP32[$i >> 2] = (HEAP32[$x$addr >> 2] | 0) - 1;
    while (1) {
     if ((HEAP32[$i >> 2] | 0) < 0) break L15;
     $75 = HEAP16[HEAP32[$src >> 2] >> 1] | 0;
     HEAP16[(HEAP32[$dest >> 2] | 0) + 4 >> 1] = $75;
     HEAP16[(HEAP32[$dest >> 2] | 0) + 2 >> 1] = $75;
     HEAP16[HEAP32[$dest >> 2] >> 1] = $75;
     HEAP16[(HEAP32[$dest >> 2] | 0) + 6 >> 1] = HEAP16[(HEAP32[$src >> 2] | 0) + 2 >> 1] | 0;
     HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + -1;
     HEAP32[$src >> 2] = (HEAP32[$src >> 2] | 0) + 4;
     HEAP32[$dest >> 2] = (HEAP32[$dest >> 2] | 0) + 8;
    }
    break;
   }
  case 28:
   {
    HEAP32[$i >> 2] = (HEAP32[$x$addr >> 2] | 0) - 1;
    while (1) {
     if ((HEAP32[$i >> 2] | 0) < 0) break L15;
     HEAP16[HEAP32[$dest >> 2] >> 1] = HEAP16[HEAP32[$src >> 2] >> 1] | 0;
     HEAP16[(HEAP32[$dest >> 2] | 0) + 2 >> 1] = HEAP16[(HEAP32[$src >> 2] | 0) + 2 >> 1] | 0;
     HEAP16[(HEAP32[$dest >> 2] | 0) + 4 >> 1] = HEAP16[(HEAP32[$src >> 2] | 0) + 4 >> 1] | 0;
     HEAP16[(HEAP32[$dest >> 2] | 0) + 6 >> 1] = -1;
     HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + -1;
     HEAP32[$src >> 2] = (HEAP32[$src >> 2] | 0) + 6;
     HEAP32[$dest >> 2] = (HEAP32[$dest >> 2] | 0) + 8;
    }
    break;
   }
  case 25:
   {
    HEAP32[$i >> 2] = (HEAP32[$x$addr >> 2] | 0) - 1;
    while (1) {
     if ((HEAP32[$i >> 2] | 0) < 0) break L15;
     CSE$0 = HEAP32[$src >> 2] | 0;
     $call121 = _stbi__compute_y_16(HEAPU16[HEAP32[$src >> 2] >> 1] | 0, HEAPU16[CSE$0 + 2 >> 1] | 0, HEAPU16[CSE$0 + 4 >> 1] | 0) | 0;
     HEAP16[HEAP32[$dest >> 2] >> 1] = $call121;
     HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + -1;
     HEAP32[$src >> 2] = (HEAP32[$src >> 2] | 0) + 6;
     HEAP32[$dest >> 2] = (HEAP32[$dest >> 2] | 0) + 2;
    }
    break;
   }
  case 26:
   {
    HEAP32[$i >> 2] = (HEAP32[$x$addr >> 2] | 0) - 1;
    while (1) {
     if ((HEAP32[$i >> 2] | 0) < 0) break L15;
     CSE$1 = HEAP32[$src >> 2] | 0;
     $call140 = _stbi__compute_y_16(HEAPU16[HEAP32[$src >> 2] >> 1] | 0, HEAPU16[CSE$1 + 2 >> 1] | 0, HEAPU16[CSE$1 + 4 >> 1] | 0) | 0;
     HEAP16[HEAP32[$dest >> 2] >> 1] = $call140;
     HEAP16[(HEAP32[$dest >> 2] | 0) + 2 >> 1] = -1;
     HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + -1;
     HEAP32[$src >> 2] = (HEAP32[$src >> 2] | 0) + 6;
     HEAP32[$dest >> 2] = (HEAP32[$dest >> 2] | 0) + 4;
    }
    break;
   }
  case 33:
   {
    HEAP32[$i >> 2] = (HEAP32[$x$addr >> 2] | 0) - 1;
    while (1) {
     if ((HEAP32[$i >> 2] | 0) < 0) break L15;
     CSE$2 = HEAP32[$src >> 2] | 0;
     $call160 = _stbi__compute_y_16(HEAPU16[HEAP32[$src >> 2] >> 1] | 0, HEAPU16[CSE$2 + 2 >> 1] | 0, HEAPU16[CSE$2 + 4 >> 1] | 0) | 0;
     HEAP16[HEAP32[$dest >> 2] >> 1] = $call160;
     HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + -1;
     HEAP32[$src >> 2] = (HEAP32[$src >> 2] | 0) + 8;
     HEAP32[$dest >> 2] = (HEAP32[$dest >> 2] | 0) + 2;
    }
    break;
   }
  case 34:
   {
    HEAP32[$i >> 2] = (HEAP32[$x$addr >> 2] | 0) - 1;
    while (1) {
     if ((HEAP32[$i >> 2] | 0) < 0) break L15;
     CSE$3 = HEAP32[$src >> 2] | 0;
     $call179 = _stbi__compute_y_16(HEAPU16[HEAP32[$src >> 2] >> 1] | 0, HEAPU16[CSE$3 + 2 >> 1] | 0, HEAPU16[CSE$3 + 4 >> 1] | 0) | 0;
     HEAP16[HEAP32[$dest >> 2] >> 1] = $call179;
     HEAP16[(HEAP32[$dest >> 2] | 0) + 2 >> 1] = HEAP16[(HEAP32[$src >> 2] | 0) + 6 >> 1] | 0;
     HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + -1;
     HEAP32[$src >> 2] = (HEAP32[$src >> 2] | 0) + 8;
     HEAP32[$dest >> 2] = (HEAP32[$dest >> 2] | 0) + 4;
    }
    break;
   }
  case 35:
   {
    HEAP32[$i >> 2] = (HEAP32[$x$addr >> 2] | 0) - 1;
    while (1) {
     if ((HEAP32[$i >> 2] | 0) < 0) break L15;
     HEAP16[HEAP32[$dest >> 2] >> 1] = HEAP16[HEAP32[$src >> 2] >> 1] | 0;
     HEAP16[(HEAP32[$dest >> 2] | 0) + 2 >> 1] = HEAP16[(HEAP32[$src >> 2] | 0) + 2 >> 1] | 0;
     HEAP16[(HEAP32[$dest >> 2] | 0) + 4 >> 1] = HEAP16[(HEAP32[$src >> 2] | 0) + 4 >> 1] | 0;
     HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + -1;
     HEAP32[$src >> 2] = (HEAP32[$src >> 2] | 0) + 8;
     HEAP32[$dest >> 2] = (HEAP32[$dest >> 2] | 0) + 6;
    }
    break;
   }
  default:
   {
    label = 46;
    break L12;
   }
  } while (0);
  HEAP32[$j >> 2] = (HEAP32[$j >> 2] | 0) + 1;
 }
 if ((label | 0) == 46) ___assert_fail(33122, 32781, 1666, 33099);
 _free($14);
 HEAP32[$retval >> 2] = HEAP32[$good >> 2];
 $168 = HEAP32[$retval >> 2] | 0;
 STACKTOP = sp;
 return $168 | 0;
}

function __ZNSt3__214__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b, $__e, $__kb, $__ke, $__ct, $__err, $__case_sensitive) {
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__kb = $__kb | 0;
 $__ke = $__ke | 0;
 $__ct = $__ct | 0;
 $__err = $__err | 0;
 $__case_sensitive = $__case_sensitive | 0;
 var $1 = 0, $14 = 0, $15 = 0, $17 = 0, $18 = 0, $22 = 0, $23 = 0, $27 = 0, $3 = 0, $36 = 0, $38 = 0, $4 = 0, $40 = 0, $41 = 0, $47 = 0, $52 = 0, $8 = 0, $9 = 0, $__c$0 = 0, $__consume$0$off0 = 0, $__consume$2$off0 = 0, $__indx$0 = 0, $__kb$addr$0 = 0, $__kb$addr$0144 = 0, $__kc$0 = 0, $__ky$0 = 0, $__ky19$0 = 0, $__ky53$0 = 0, $__n_does_match$0 = 0, $__n_does_match$1 = 0, $__n_does_match$2 = 0, $__n_does_match$2$be = 0, $__n_does_match$3 = 0, $__n_does_match$5 = 0, $__n_does_match$6 = 0, $__n_does_match$7 = 0, $__n_might_match$0 = 0, $__n_might_match$1 = 0, $__n_might_match$2 = 0, $__n_might_match$3 = 0, $__n_might_match$5 = 0, $__ninp_$i$i = 0, $__size_$i$i$i$i = 0, $__st$0 = 0, $__st$1 = 0, $__st$2 = 0, $__st$3 = 0, $__stat_hold$sroa$0$0 = 0, $__statbuf = 0, $__status$0 = 0, $add = 0, $call1 = 0, $cond$i = 0, $cond$i$i = 0, $cond$i$i$i = 0, $cond$i133 = 0, $retval$0$i$i = 0, $retval$0$i$i$i$i = 0, $retval$0$i$i$i$i84 = 0, $retval$0$i$i13$i$i = 0, $retval$0$i$i13$i$i105 = 0, $sub$ptr$div$i$i = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(112);
 $__statbuf = sp;
 $sub$ptr$div$i$i = ($__ke - $__kb | 0) / 12 | 0;
 if ($sub$ptr$div$i$i >>> 0 > 100) {
  $call1 = _malloc($sub$ptr$div$i$i) | 0;
  if (!$call1) __ZSt17__throw_bad_allocv(); else {
   $__stat_hold$sroa$0$0 = $call1;
   $__status$0 = $call1;
  }
 } else {
  $__stat_hold$sroa$0$0 = 0;
  $__status$0 = $__statbuf;
 }
 $__ky$0 = $__kb;
 $__n_does_match$0 = 0;
 $__n_might_match$0 = $sub$ptr$div$i$i;
 $__st$0 = $__status$0;
 while (1) {
  if (($__ky$0 | 0) == ($__ke | 0)) break;
  $1 = HEAP8[$__ky$0 + 8 + 3 >> 0] | 0;
  if ($1 << 24 >> 24 < 0) $cond$i$i = HEAP32[$__ky$0 + 4 >> 2] | 0; else $cond$i$i = $1 & 255;
  if (!$cond$i$i) {
   HEAP8[$__st$0 >> 0] = 2;
   $__n_does_match$1 = $__n_does_match$0 + 1 | 0;
   $__n_might_match$1 = $__n_might_match$0 + -1 | 0;
  } else {
   HEAP8[$__st$0 >> 0] = 1;
   $__n_does_match$1 = $__n_does_match$0;
   $__n_might_match$1 = $__n_might_match$0;
  }
  $__ky$0 = $__ky$0 + 12 | 0;
  $__n_does_match$0 = $__n_does_match$1;
  $__n_might_match$0 = $__n_might_match$1;
  $__st$0 = $__st$0 + 1 | 0;
 }
 $__indx$0 = 0;
 $__n_does_match$2 = $__n_does_match$0;
 $__n_might_match$2 = $__n_might_match$0;
 while (1) {
  $3 = HEAP32[$__b >> 2] | 0;
  do if (!$3) $15 = 1; else {
   $4 = HEAP32[$3 + 12 >> 2] | 0;
   if (($4 | 0) == (HEAP32[$3 + 16 >> 2] | 0)) $retval$0$i$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$3 >> 2] | 0) + 36 >> 2] & 127]($3) | 0; else $retval$0$i$i$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$4 >> 2] | 0) | 0;
   if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i$i$i, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
    HEAP32[$__b >> 2] = 0;
    $15 = 1;
    break;
   } else {
    $15 = (HEAP32[$__b >> 2] | 0) == 0;
    break;
   }
  } while (0);
  $8 = HEAP32[$__e >> 2] | 0;
  if (!$8) {
   $14 = 1;
   $22 = 0;
  } else {
   $9 = HEAP32[$8 + 12 >> 2] | 0;
   if (($9 | 0) == (HEAP32[$8 + 16 >> 2] | 0)) $retval$0$i$i13$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$8 >> 2] | 0) + 36 >> 2] & 127]($8) | 0; else $retval$0$i$i13$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$9 >> 2] | 0) | 0;
   if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i13$i$i, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
    HEAP32[$__e >> 2] = 0;
    $14 = 1;
    $22 = 0;
   } else {
    $14 = 0;
    $22 = $8;
   }
  }
  $17 = HEAP32[$__b >> 2] | 0;
  if (!(($__n_might_match$2 | 0) != 0 & ($15 ^ $14))) break;
  $27 = HEAP32[$17 + 12 >> 2] | 0;
  if (($27 | 0) == (HEAP32[$17 + 16 >> 2] | 0)) $retval$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$17 >> 2] | 0) + 36 >> 2] & 127]($17) | 0; else $retval$0$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$27 >> 2] | 0) | 0;
  if ($__case_sensitive) $__c$0 = $retval$0$i$i; else $__c$0 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$__ct >> 2] | 0) + 28 >> 2] & 31]($__ct, $retval$0$i$i) | 0;
  $add = $__indx$0 + 1 | 0;
  $__consume$0$off0 = 0;
  $__ky19$0 = $__kb;
  $__n_does_match$3 = $__n_does_match$2;
  $__n_might_match$3 = $__n_might_match$2;
  $__st$1 = $__status$0;
  while (1) {
   if (($__ky19$0 | 0) == ($__ke | 0)) break;
   do if ((HEAP8[$__st$1 >> 0] | 0) == 1) {
    $__size_$i$i$i$i = $__ky19$0 + 8 + 3 | 0;
    if ((HEAP8[$__size_$i$i$i$i >> 0] | 0) < 0) $cond$i$i$i = HEAP32[$__ky19$0 >> 2] | 0; else $cond$i$i$i = $__ky19$0;
    $36 = HEAP32[$cond$i$i$i + ($__indx$0 << 2) >> 2] | 0;
    if ($__case_sensitive) $__kc$0 = $36; else $__kc$0 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$__ct >> 2] | 0) + 28 >> 2] & 31]($__ct, $36) | 0;
    if (($__c$0 | 0) != ($__kc$0 | 0)) {
     HEAP8[$__st$1 >> 0] = 0;
     $__consume$2$off0 = $__consume$0$off0;
     $__n_does_match$5 = $__n_does_match$3;
     $__n_might_match$5 = $__n_might_match$3 + -1 | 0;
     break;
    }
    $38 = HEAP8[$__size_$i$i$i$i >> 0] | 0;
    if ($38 << 24 >> 24 < 0) $cond$i133 = HEAP32[$__ky19$0 + 4 >> 2] | 0; else $cond$i133 = $38 & 255;
    if (($cond$i133 | 0) == ($add | 0)) {
     HEAP8[$__st$1 >> 0] = 2;
     $__consume$2$off0 = 1;
     $__n_does_match$5 = $__n_does_match$3 + 1 | 0;
     $__n_might_match$5 = $__n_might_match$3 + -1 | 0;
    } else {
     $__consume$2$off0 = 1;
     $__n_does_match$5 = $__n_does_match$3;
     $__n_might_match$5 = $__n_might_match$3;
    }
   } else {
    $__consume$2$off0 = $__consume$0$off0;
    $__n_does_match$5 = $__n_does_match$3;
    $__n_might_match$5 = $__n_might_match$3;
   } while (0);
   $__consume$0$off0 = $__consume$2$off0;
   $__ky19$0 = $__ky19$0 + 12 | 0;
   $__n_does_match$3 = $__n_does_match$5;
   $__n_might_match$3 = $__n_might_match$5;
   $__st$1 = $__st$1 + 1 | 0;
  }
  L67 : do if ($__consume$0$off0) {
   $40 = HEAP32[$__b >> 2] | 0;
   $__ninp_$i$i = $40 + 12 | 0;
   $41 = HEAP32[$__ninp_$i$i >> 2] | 0;
   if (($41 | 0) == (HEAP32[$40 + 16 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[$40 >> 2] | 0) + 40 >> 2] & 127]($40) | 0; else {
    HEAP32[$__ninp_$i$i >> 2] = $41 + 4;
    __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$41 >> 2] | 0) | 0;
   }
   if (($__n_does_match$3 + $__n_might_match$3 | 0) >>> 0 > 1) {
    $__ky53$0 = $__kb;
    $__n_does_match$6 = $__n_does_match$3;
    $__st$2 = $__status$0;
    while (1) {
     if (($__ky53$0 | 0) == ($__ke | 0)) {
      $__n_does_match$2$be = $__n_does_match$6;
      break L67;
     }
     if ((HEAP8[$__st$2 >> 0] | 0) == 2) {
      $47 = HEAP8[$__ky53$0 + 8 + 3 >> 0] | 0;
      if ($47 << 24 >> 24 < 0) $cond$i = HEAP32[$__ky53$0 + 4 >> 2] | 0; else $cond$i = $47 & 255;
      if (($cond$i | 0) == ($add | 0)) $__n_does_match$7 = $__n_does_match$6; else {
       HEAP8[$__st$2 >> 0] = 0;
       $__n_does_match$7 = $__n_does_match$6 + -1 | 0;
      }
     } else $__n_does_match$7 = $__n_does_match$6;
     $__ky53$0 = $__ky53$0 + 12 | 0;
     $__n_does_match$6 = $__n_does_match$7;
     $__st$2 = $__st$2 + 1 | 0;
    }
   } else $__n_does_match$2$be = $__n_does_match$3;
  } else $__n_does_match$2$be = $__n_does_match$3; while (0);
  $__indx$0 = $add;
  $__n_does_match$2 = $__n_does_match$2$be;
  $__n_might_match$2 = $__n_might_match$3;
 }
 do if (!$17) $52 = 1; else {
  $18 = HEAP32[$17 + 12 >> 2] | 0;
  if (($18 | 0) == (HEAP32[$17 + 16 >> 2] | 0)) $retval$0$i$i$i$i84 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$17 >> 2] | 0) + 36 >> 2] & 127]($17) | 0; else $retval$0$i$i$i$i84 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$18 >> 2] | 0) | 0;
  if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i$i$i84, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
   HEAP32[$__b >> 2] = 0;
   $52 = 1;
   break;
  } else {
   $52 = (HEAP32[$__b >> 2] | 0) == 0;
   break;
  }
 } while (0);
 do if (!$22) label = 41; else {
  $23 = HEAP32[$22 + 12 >> 2] | 0;
  if (($23 | 0) == (HEAP32[$22 + 16 >> 2] | 0)) $retval$0$i$i13$i$i105 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$22 >> 2] | 0) + 36 >> 2] & 127]($22) | 0; else $retval$0$i$i13$i$i105 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$23 >> 2] | 0) | 0;
  if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i13$i$i105, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
   HEAP32[$__e >> 2] = 0;
   label = 41;
   break;
  } else if ($52) break; else {
   label = 79;
   break;
  }
 } while (0);
 if ((label | 0) == 41) if ($52) label = 79;
 if ((label | 0) == 79) HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
 $__kb$addr$0 = $__kb;
 $__st$3 = $__status$0;
 while (1) {
  if (($__kb$addr$0 | 0) == ($__ke | 0)) {
   label = 84;
   break;
  }
  if ((HEAP8[$__st$3 >> 0] | 0) == 2) {
   $__kb$addr$0144 = $__kb$addr$0;
   break;
  }
  $__kb$addr$0 = $__kb$addr$0 + 12 | 0;
  $__st$3 = $__st$3 + 1 | 0;
 }
 if ((label | 0) == 84) {
  HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 4;
  $__kb$addr$0144 = $__ke;
 }
 _free($__stat_hold$sroa$0$0);
 STACKTOP = sp;
 return $__kb$addr$0144 | 0;
}

function _ProcessGestureEvent($event) {
 $event = $event | 0;
 var $$compoundliteral = 0, $$compoundliteral159 = 0, $$compoundliteral72 = 0, $10 = f0, $arrayidx118 = 0, $arrayidx131 = 0, $call = 0.0, $call142 = f0, $call27 = 0.0, $cmp1 = 0, $cmp39 = 0, $cmp45 = 0, $cmp52 = 0, $cmp59 = 0, $moveDownPosition$byval_copy15 = 0, $moveDownPosition2$byval_copy16 = 0, $position = 0, $position11 = 0, $position115 = 0, $position128 = 0, $position13 = 0, $position23 = 0, $position88 = 0, $position95 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 $moveDownPosition2$byval_copy16 = sp + 32 | 0;
 $moveDownPosition$byval_copy15 = sp + 24 | 0;
 $$compoundliteral = sp + 16 | 0;
 $$compoundliteral72 = sp + 8 | 0;
 $$compoundliteral159 = sp;
 HEAP32[14936] = HEAP32[$event + 4 >> 2];
 $cmp1 = (HEAP32[$event >> 2] | 0) == 1;
 if ((HEAP32[14936] | 0) >= 2) {
  if ($cmp1) {
   $position115 = $event + 24 | 0;
   HEAP32[14938] = HEAP32[$position115 >> 2];
   HEAP32[14939] = HEAP32[$position115 + 4 >> 2];
   $arrayidx118 = $event + 24 + 8 | 0;
   HEAP32[14949] = HEAP32[$arrayidx118 >> 2];
   HEAP32[14950] = HEAP32[$arrayidx118 + 4 >> 2];
   HEAP32[14935] = 4;
   +_GetCurrentTime();
   STACKTOP = sp;
   return;
  }
  if ((HEAP32[$event >> 2] | 0) != 2) {
   if (HEAP32[$event >> 2] | 0) {
    STACKTOP = sp;
    return;
   }
   HEAPF32[14953] = Math_fround(0.0);
   HEAPF32[$$compoundliteral159 >> 2] = Math_fround(0.0);
   HEAPF32[$$compoundliteral159 + 4 >> 2] = Math_fround(0.0);
   HEAP32[14936] = 0;
   HEAP32[14935] = 0;
   STACKTOP = sp;
   return;
  };
  HEAP32[$moveDownPosition$byval_copy15 >> 2] = HEAP32[14947];
  HEAP32[$moveDownPosition$byval_copy15 + 4 >> 2] = HEAP32[14948];
  HEAP32[$moveDownPosition2$byval_copy16 >> 2] = HEAP32[14951];
  HEAP32[$moveDownPosition2$byval_copy16 + 4 >> 2] = HEAP32[14952];
  HEAPF32[14953] = Math_fround(_Vector2Distance($moveDownPosition$byval_copy15, $moveDownPosition2$byval_copy16));
  HEAP32[14938] = HEAP32[14947];
  HEAP32[14939] = HEAP32[14948];
  HEAP32[14949] = HEAP32[14951];
  HEAP32[14950] = HEAP32[14952];
  $position128 = $event + 24 | 0;
  HEAP32[14947] = HEAP32[$position128 >> 2];
  HEAP32[14948] = HEAP32[$position128 + 4 >> 2];
  $arrayidx131 = $event + 24 + 8 | 0;
  HEAP32[14951] = HEAP32[$arrayidx131 >> 2];
  HEAP32[14952] = HEAP32[$arrayidx131 + 4 >> 2];
  HEAP32[$moveDownPosition$byval_copy15 >> 2] = HEAP32[14938];
  HEAP32[$moveDownPosition$byval_copy15 + 4 >> 2] = HEAP32[14939];
  HEAP32[$moveDownPosition2$byval_copy16 >> 2] = HEAP32[14947];
  HEAP32[$moveDownPosition2$byval_copy16 + 4 >> 2] = HEAP32[14948];
  if (Math_fround(_Vector2Distance($moveDownPosition$byval_copy15, $moveDownPosition2$byval_copy16)) >= Math_fround(.00499999989)) label = 41; else {
   HEAP32[$moveDownPosition$byval_copy15 >> 2] = HEAP32[14949];
   HEAP32[$moveDownPosition$byval_copy15 + 4 >> 2] = HEAP32[14950];
   HEAP32[$moveDownPosition2$byval_copy16 >> 2] = HEAP32[14951];
   HEAP32[$moveDownPosition2$byval_copy16 + 4 >> 2] = HEAP32[14952];
   if (Math_fround(_Vector2Distance($moveDownPosition$byval_copy15, $moveDownPosition2$byval_copy16)) >= Math_fround(.00499999989)) label = 41; else {
    HEAP32[14935] = 4;
    +_GetCurrentTime();
   }
  }
  do if ((label | 0) == 41) {
   HEAP32[$moveDownPosition$byval_copy15 >> 2] = HEAP32[14947];
   HEAP32[$moveDownPosition$byval_copy15 + 4 >> 2] = HEAP32[14948];
   HEAP32[$moveDownPosition2$byval_copy16 >> 2] = HEAP32[14951];
   HEAP32[$moveDownPosition2$byval_copy16 + 4 >> 2] = HEAP32[14952];
   $call142 = Math_fround(_Vector2Distance($moveDownPosition$byval_copy15, $moveDownPosition2$byval_copy16));
   if (Math_fround($call142 - Math_fround(HEAPF32[14953])) < Math_fround(0.0)) {
    HEAP32[14935] = 256;
    break;
   } else {
    HEAP32[14935] = 512;
    break;
   }
  } while (0);
  HEAP32[$moveDownPosition$byval_copy15 >> 2] = HEAP32[14947];
  HEAP32[$moveDownPosition$byval_copy15 + 4 >> 2] = HEAP32[14948];
  HEAP32[$moveDownPosition2$byval_copy16 >> 2] = HEAP32[14951];
  HEAP32[$moveDownPosition2$byval_copy16 + 4 >> 2] = HEAP32[14952];
  Math_fround(_Vector2Angle($moveDownPosition$byval_copy15, $moveDownPosition2$byval_copy16));
  STACKTOP = sp;
  return;
 }
 if ($cmp1) {
  HEAP32[14937] = (HEAP32[14937] | 0) + 1;
  if ((HEAP32[14935] | 0) == 0 & (HEAP32[14937] | 0) >= 2) {
   $call = +_GetCurrentTime();
   if ($call - +HEAPF64[7302] < 300.0) {
    $position = $event + 24 | 0;
    HEAP32[$moveDownPosition$byval_copy15 >> 2] = HEAP32[14938];
    HEAP32[$moveDownPosition$byval_copy15 + 4 >> 2] = HEAP32[14939];
    HEAP32[$moveDownPosition2$byval_copy16 >> 2] = HEAP32[$position >> 2];
    HEAP32[$moveDownPosition2$byval_copy16 + 4 >> 2] = HEAP32[$position + 4 >> 2];
    if (Math_fround(_Vector2Distance($moveDownPosition$byval_copy15, $moveDownPosition2$byval_copy16)) < Math_fround(.0299999993)) {
     HEAP32[14935] = 2;
     HEAP32[14937] = 0;
    } else label = 7;
   } else label = 7;
  } else label = 7;
  if ((label | 0) == 7) {
   HEAP32[14937] = 1;
   HEAP32[14935] = 1;
  }
  $position11 = $event + 24 | 0;
  HEAP32[14938] = HEAP32[$position11 >> 2];
  HEAP32[14939] = HEAP32[$position11 + 4 >> 2];
  $position13 = $event + 24 | 0;
  HEAP32[14940] = HEAP32[$position13 >> 2];
  HEAP32[14941] = HEAP32[$position13 + 4 >> 2];
  HEAP32[14942] = HEAP32[14938];
  HEAP32[14943] = HEAP32[14939];
  HEAPF64[7302] = +_GetCurrentTime();
  HEAP32[4480] = HEAP32[$event + 8 >> 2];
  HEAPF32[$$compoundliteral >> 2] = Math_fround(0.0);
  HEAPF32[$$compoundliteral + 4 >> 2] = Math_fround(0.0);
  STACKTOP = sp;
  return;
 }
 if (HEAP32[$event >> 2] | 0) {
  if ((HEAP32[$event >> 2] | 0) != 2) {
   STACKTOP = sp;
   return;
  }
  if ((HEAP32[14935] | 0) == 8) HEAPF64[7302] = +_GetCurrentTime();
  if (!(HEAP8[62155] & 1)) {
   HEAPF64[7303] = +_GetCurrentTime();
   HEAP8[62155] = 1;
  }
  $position88 = $event + 24 | 0;
  HEAP32[14947] = HEAP32[$position88 >> 2];
  HEAP32[14948] = HEAP32[$position88 + 4 >> 2];
  if ((HEAP32[14935] | 0) == 4) {
   if (HEAP8[62156] & 1) {
    $position95 = $event + 24 | 0;
    HEAP32[14938] = HEAP32[$position95 >> 2];
    HEAP32[14939] = HEAP32[$position95 + 4 >> 2];
   }
   HEAP8[62156] = 0;
   HEAP32[$moveDownPosition$byval_copy15 >> 2] = HEAP32[14938];
   HEAP32[$moveDownPosition$byval_copy15 + 4 >> 2] = HEAP32[14939];
   HEAP32[$moveDownPosition2$byval_copy16 >> 2] = HEAP32[14947];
   HEAP32[$moveDownPosition2$byval_copy16 + 4 >> 2] = HEAP32[14948];
   if (Math_fround(_Vector2Distance($moveDownPosition$byval_copy15, $moveDownPosition2$byval_copy16)) >= Math_fround(.0149999997)) {
    HEAPF64[7302] = +_GetCurrentTime();
    HEAP32[14935] = 8;
   }
  }
  STACKTOP = sp;
  return;
 }
 if ((HEAP32[14935] | 0) == 8) {
  $position23 = $event + 24 | 0;
  HEAP32[14942] = HEAP32[$position23 >> 2];
  HEAP32[14943] = HEAP32[$position23 + 4 >> 2];
 };
 HEAP32[$moveDownPosition$byval_copy15 >> 2] = HEAP32[14938];
 HEAP32[$moveDownPosition$byval_copy15 + 4 >> 2] = HEAP32[14939];
 HEAP32[$moveDownPosition2$byval_copy16 >> 2] = HEAP32[14942];
 HEAP32[$moveDownPosition2$byval_copy16 + 4 >> 2] = HEAP32[14943];
 HEAPF32[14944] = Math_fround(_Vector2Distance($moveDownPosition$byval_copy15, $moveDownPosition2$byval_copy16));
 $10 = Math_fround(HEAPF32[14944]);
 $call27 = +_GetCurrentTime();
 HEAPF32[14945] = Math_fround($10 / Math_fround($call27 - +HEAPF64[7303]));
 HEAP8[62155] = 0;
 do if (Math_fround(HEAPF32[14945]) > Math_fround(.000500000024)) if ((HEAP32[4480] | 0) == (HEAP32[$event + 8 >> 2] | 0)) {
  HEAP32[$moveDownPosition$byval_copy15 >> 2] = HEAP32[14938];
  HEAP32[$moveDownPosition$byval_copy15 + 4 >> 2] = HEAP32[14939];
  HEAP32[$moveDownPosition2$byval_copy16 >> 2] = HEAP32[14942];
  HEAP32[$moveDownPosition2$byval_copy16 + 4 >> 2] = HEAP32[14943];
  HEAPF32[14946] = Math_fround(Math_fround(360.0) - Math_fround(_Vector2Angle($moveDownPosition$byval_copy15, $moveDownPosition2$byval_copy16)));
  $cmp39 = Math_fround(HEAPF32[14946]) < Math_fround(30.0);
  if ($cmp39 | Math_fround(HEAPF32[14946]) > Math_fround(330.0)) {
   HEAP32[14935] = 16;
   break;
  }
  $cmp45 = Math_fround(HEAPF32[14946]) > Math_fround(30.0);
  if ($cmp45 & Math_fround(HEAPF32[14946]) < Math_fround(120.0)) {
   HEAP32[14935] = 64;
   break;
  }
  $cmp52 = Math_fround(HEAPF32[14946]) > Math_fround(120.0);
  if ($cmp52 & Math_fround(HEAPF32[14946]) < Math_fround(210.0)) {
   HEAP32[14935] = 32;
   break;
  }
  $cmp59 = Math_fround(HEAPF32[14946]) > Math_fround(210.0);
  if ($cmp59 & Math_fround(HEAPF32[14946]) < Math_fround(300.0)) {
   HEAP32[14935] = 128;
   break;
  } else {
   HEAP32[14935] = 0;
   break;
  }
 } else label = 23; else label = 23; while (0);
 if ((label | 0) == 23) {
  HEAPF32[14944] = Math_fround(0.0);
  HEAPF32[14945] = Math_fround(0.0);
  HEAPF32[14946] = Math_fround(0.0);
  HEAP32[14935] = 0;
 }
 HEAPF32[$$compoundliteral72 >> 2] = Math_fround(0.0);
 HEAPF32[$$compoundliteral72 + 4 >> 2] = Math_fround(0.0);
 HEAP32[14940] = HEAP32[$$compoundliteral72 >> 2];
 HEAP32[14941] = HEAP32[$$compoundliteral72 + 4 >> 2];
 HEAP32[14936] = 0;
 STACKTOP = sp;
 return;
}

function _rlglInit($width, $height) {
 $width = $width | 0;
 $height = $height | 0;
 var $23 = 0, $arrayidx196 = 0, $extList = 0, $extensions = 0, $extensionsDup = 0, $height$addr = 0, $i = 0, $i17 = 0, $i179 = 0, $i191 = 0, $len = 0, $numExt = 0, $pixels = 0, $tmp = 0, $tmp177 = 0, $tmp197 = 0, $tmp201 = 0, $tmp202 = 0, $vararg_buffer = 0, $vararg_buffer11 = 0, $vararg_buffer14 = 0, $vararg_buffer16 = 0, $vararg_buffer18 = 0, $vararg_buffer2 = 0, $vararg_buffer20 = 0, $vararg_buffer22 = 0, $vararg_buffer24 = 0, $vararg_buffer26 = 0, $vararg_buffer28 = 0, $vararg_buffer30 = 0, $vararg_buffer32 = 0, $vararg_buffer35 = 0, $vararg_buffer37 = 0, $vararg_buffer39 = 0, $vararg_buffer42 = 0, $vararg_buffer44 = 0, $vararg_buffer5 = 0, $vararg_buffer8 = 0, $width$addr = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 480 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(480);
 $vararg_buffer44 = sp + 152 | 0;
 $vararg_buffer42 = sp + 144 | 0;
 $vararg_buffer39 = sp + 136 | 0;
 $vararg_buffer37 = sp + 128 | 0;
 $vararg_buffer35 = sp + 120 | 0;
 $vararg_buffer32 = sp + 112 | 0;
 $vararg_buffer30 = sp + 104 | 0;
 $vararg_buffer28 = sp + 96 | 0;
 $vararg_buffer26 = sp + 88 | 0;
 $vararg_buffer24 = sp + 80 | 0;
 $vararg_buffer22 = sp + 72 | 0;
 $vararg_buffer20 = sp + 64 | 0;
 $vararg_buffer18 = sp + 56 | 0;
 $vararg_buffer16 = sp + 48 | 0;
 $vararg_buffer14 = sp + 40 | 0;
 $vararg_buffer11 = sp + 32 | 0;
 $vararg_buffer8 = sp + 24 | 0;
 $vararg_buffer5 = sp + 16 | 0;
 $vararg_buffer2 = sp + 8 | 0;
 $vararg_buffer = sp;
 $width$addr = sp + 464 | 0;
 $height$addr = sp + 460 | 0;
 $numExt = sp + 456 | 0;
 $extList = sp + 452 | 0;
 $extensions = sp + 448 | 0;
 $len = sp + 444 | 0;
 $extensionsDup = sp + 440 | 0;
 $i = sp + 436 | 0;
 $i17 = sp + 432 | 0;
 $pixels = sp + 468 | 0;
 $tmp = sp + 424 | 0;
 $tmp177 = sp + 360 | 0;
 $i179 = sp + 356 | 0;
 $i191 = sp + 352 | 0;
 $tmp197 = sp + 288 | 0;
 $tmp201 = sp + 224 | 0;
 $tmp202 = sp + 160 | 0;
 HEAP32[$width$addr >> 2] = $width;
 HEAP32[$height$addr >> 2] = $height;
 HEAP32[$vararg_buffer >> 2] = _glGetString(7936) | 0;
 _TraceLog(3, 28504, $vararg_buffer);
 HEAP32[$vararg_buffer2 >> 2] = _glGetString(7937) | 0;
 _TraceLog(3, 28522, $vararg_buffer2);
 HEAP32[$vararg_buffer5 >> 2] = _glGetString(7938) | 0;
 _TraceLog(3, 28540, $vararg_buffer5);
 HEAP32[$vararg_buffer8 >> 2] = _glGetString(35724) | 0;
 _TraceLog(3, 28558, $vararg_buffer8);
 HEAP32[$numExt >> 2] = 0;
 HEAP32[$extList >> 2] = _malloc(2048) | 0;
 HEAP32[$extensions >> 2] = _glGetString(7939) | 0;
 HEAP32[$len >> 2] = (_strlen(HEAP32[$extensions >> 2] | 0) | 0) + 1;
 HEAP32[$extensionsDup >> 2] = _calloc(HEAP32[$len >> 2] | 0, 1) | 0;
 _strcpy(HEAP32[$extensionsDup >> 2] | 0, HEAP32[$extensions >> 2] | 0) | 0;
 HEAP32[(HEAP32[$extList >> 2] | 0) + (HEAP32[$numExt >> 2] << 2) >> 2] = HEAP32[$extensionsDup >> 2];
 HEAP32[$i >> 2] = 0;
 while (1) {
  if ((HEAP32[$i >> 2] | 0) >= (HEAP32[$len >> 2] | 0)) break;
  if ((HEAP8[(HEAP32[$extensionsDup >> 2] | 0) + (HEAP32[$i >> 2] | 0) >> 0] | 0) == 32) {
   HEAP8[(HEAP32[$extensionsDup >> 2] | 0) + (HEAP32[$i >> 2] | 0) >> 0] = 0;
   HEAP32[$numExt >> 2] = (HEAP32[$numExt >> 2] | 0) + 1;
   HEAP32[(HEAP32[$extList >> 2] | 0) + (HEAP32[$numExt >> 2] << 2) >> 2] = (HEAP32[$extensionsDup >> 2] | 0) + ((HEAP32[$i >> 2] | 0) + 1);
  }
  HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
 }
 HEAP32[$vararg_buffer11 >> 2] = HEAP32[$numExt >> 2];
 _TraceLog(3, 28576, $vararg_buffer11);
 HEAP32[$i17 >> 2] = 0;
 while (1) {
  $23 = HEAP32[$extList >> 2] | 0;
  if ((HEAP32[$i17 >> 2] | 0) >= (HEAP32[$numExt >> 2] | 0)) break;
  if (!(_strcmp(HEAP32[$23 + (HEAP32[$i17 >> 2] << 2) >> 2] | 0, 28611) | 0)) {
   HEAP32[14930] = _eglGetProcAddress(42018) | 0;
   HEAP32[14851] = _eglGetProcAddress(41973) | 0;
   HEAP32[14929] = _eglGetProcAddress(41994) | 0;
   if ((HEAP32[14930] | 0) != 0 & (HEAP32[14851] | 0) != 0 & (HEAP32[14929] | 0) != 0) HEAP8[62144] = 1;
  }
  if (!(_strcmp(HEAP32[(HEAP32[$extList >> 2] | 0) + (HEAP32[$i17 >> 2] << 2) >> 2] | 0, 28638) | 0)) HEAP8[62146] = 1;
  if (!(_strcmp(HEAP32[(HEAP32[$extList >> 2] | 0) + (HEAP32[$i17 >> 2] << 2) >> 2] | 0, 28658) | 0)) HEAP8[62147] = 1;
  if (!(_strcmp(HEAP32[(HEAP32[$extList >> 2] | 0) + (HEAP32[$i17 >> 2] << 2) >> 2] | 0, 28730) | 0)) label = 18; else if (!(_strcmp(HEAP32[(HEAP32[$extList >> 2] | 0) + (HEAP32[$i17 >> 2] << 2) >> 2] | 0, 28762) | 0)) label = 18; else if (!(_strcmp(HEAP32[(HEAP32[$extList >> 2] | 0) + (HEAP32[$i17 >> 2] << 2) >> 2] | 0, 28795) | 0)) label = 18;
  if ((label | 0) == 18) {
   label = 0;
   HEAP8[62148] = 1;
  }
  if (!(_strcmp(HEAP32[(HEAP32[$extList >> 2] | 0) + (HEAP32[$i17 >> 2] << 2) >> 2] | 0, 28835) | 0)) label = 21; else if (!(_strcmp(HEAP32[(HEAP32[$extList >> 2] | 0) + (HEAP32[$i17 >> 2] << 2) >> 2] | 0, 28871) | 0)) label = 21;
  if ((label | 0) == 21) {
   label = 0;
   HEAP8[62149] = 1;
  }
  if (!(_strcmp(HEAP32[(HEAP32[$extList >> 2] | 0) + (HEAP32[$i17 >> 2] << 2) >> 2] | 0, 28904) | 0)) HEAP8[62150] = 1;
  if (!(_strcmp(HEAP32[(HEAP32[$extList >> 2] | 0) + (HEAP32[$i17 >> 2] << 2) >> 2] | 0, 28929) | 0)) HEAP8[62151] = 1;
  if (!(_strcmp(HEAP32[(HEAP32[$extList >> 2] | 0) + (HEAP32[$i17 >> 2] << 2) >> 2] | 0, 28962) | 0)) HEAP8[62152] = 1;
  if (!(_strcmp(HEAP32[(HEAP32[$extList >> 2] | 0) + (HEAP32[$i17 >> 2] << 2) >> 2] | 0, 28998) | 0)) {
   HEAP8[62153] = 1;
   _glGetFloatv(34047, 59712);
  }
  if (!(_strcmp(HEAP32[(HEAP32[$extList >> 2] | 0) + (HEAP32[$i17 >> 2] << 2) >> 2] | 0, 29032) | 0)) HEAP8[62145] = 1;
  if (!(_strcmp(HEAP32[(HEAP32[$extList >> 2] | 0) + (HEAP32[$i17 >> 2] << 2) >> 2] | 0, 29060) | 0)) HEAP8[62154] = 1;
  HEAP32[$i17 >> 2] = (HEAP32[$i17 >> 2] | 0) + 1;
 }
 _free($23);
 _free(HEAP32[$extensionsDup >> 2] | 0);
 if (HEAP8[62144] & 1) _TraceLog(3, 29080, $vararg_buffer14); else _TraceLog(4, 29155, $vararg_buffer16);
 if (HEAP8[62146] & 1) _TraceLog(3, 29216, $vararg_buffer18); else _TraceLog(4, 29291, $vararg_buffer20);
 if (HEAP8[62148] & 1) _TraceLog(3, 29383, $vararg_buffer22);
 if (HEAP8[62149] & 1) _TraceLog(3, 29429, $vararg_buffer24);
 if (HEAP8[62150] & 1) _TraceLog(3, 29476, $vararg_buffer26);
 if (HEAP8[62151] & 1) _TraceLog(3, 29527, $vararg_buffer28);
 if (HEAP8[62152] & 1) _TraceLog(3, 29574, $vararg_buffer30);
 if (HEAP8[62153] & 1) {
  HEAPF64[$vararg_buffer32 >> 3] = +Math_fround(HEAPF32[14928]);
  _TraceLog(3, 29621, $vararg_buffer32);
 }
 if (HEAP8[62145] & 1) _TraceLog(3, 29687, $vararg_buffer35);
 if (HEAP8[62154] & 1) _TraceLog(3, 29740, $vararg_buffer37);
 HEAP8[$pixels >> 0] = HEAP8[29775] | 0;
 HEAP8[$pixels + 1 >> 0] = HEAP8[29776] | 0;
 HEAP8[$pixels + 2 >> 0] = HEAP8[29777] | 0;
 HEAP8[$pixels + 3 >> 0] = HEAP8[29778] | 0;
 HEAP32[14848] = _rlLoadTexture($pixels, 1, 1, 7, 1) | 0;
 if (HEAP32[14848] | 0) {
  HEAP32[$vararg_buffer39 >> 2] = HEAP32[14848];
  _TraceLog(3, 29779, $vararg_buffer39);
 } else _TraceLog(4, 29830, $vararg_buffer42);
 _LoadShaderDefault($tmp);
 HEAP32[14931] = HEAP32[$tmp >> 2];
 HEAP32[14932] = HEAP32[$tmp + 4 >> 2];
 HEAP32[14849] = HEAP32[14931];
 HEAP32[14850] = HEAP32[14932];
 _LoadBuffersDefault();
 _MatrixIdentity($tmp177);
 dest = 59316;
 src = $tmp177;
 stop = dest + 64 | 0;
 do {
  HEAP32[dest >> 2] = HEAP32[src >> 2];
  dest = dest + 4 | 0;
  src = src + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP32[14845] = _malloc(4096) | 0;
 HEAP32[$i179 >> 2] = 0;
 while (1) {
  if ((HEAP32[$i179 >> 2] | 0) >= 256) break;
  HEAP32[(HEAP32[14845] | 0) + (HEAP32[$i179 >> 2] << 4) >> 2] = 7;
  HEAP32[(HEAP32[14845] | 0) + (HEAP32[$i179 >> 2] << 4) + 4 >> 2] = 0;
  HEAP32[(HEAP32[14845] | 0) + (HEAP32[$i179 >> 2] << 4) + 8 >> 2] = 0;
  HEAP32[(HEAP32[14845] | 0) + (HEAP32[$i179 >> 2] << 4) + 12 >> 2] = HEAP32[14848];
  HEAP32[$i179 >> 2] = (HEAP32[$i179 >> 2] | 0) + 1;
 }
 HEAP32[14846] = 1;
 HEAP32[$i191 >> 2] = 0;
 while (1) {
  if ((HEAP32[$i191 >> 2] | 0) >= 32) break;
  $arrayidx196 = 45360 + (HEAP32[$i191 >> 2] << 6) | 0;
  _MatrixIdentity($tmp197);
  dest = $arrayidx196;
  src = $tmp197;
  stop = dest + 64 | 0;
  do {
   HEAP32[dest >> 2] = HEAP32[src >> 2];
   dest = dest + 4 | 0;
   src = src + 4 | 0;
  } while ((dest | 0) < (stop | 0));
  HEAP32[$i191 >> 2] = (HEAP32[$i191 >> 2] | 0) + 1;
 }
 _MatrixIdentity($tmp201);
 dest = 59180;
 src = $tmp201;
 stop = dest + 64 | 0;
 do {
  HEAP32[dest >> 2] = HEAP32[src >> 2];
  dest = dest + 4 | 0;
  src = src + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 _MatrixIdentity($tmp202);
 dest = 59248;
 src = $tmp202;
 stop = dest + 64 | 0;
 do {
  HEAP32[dest >> 2] = HEAP32[src >> 2];
  dest = dest + 4 | 0;
  src = src + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP32[14811] = 59248;
 _glDepthFunc(515);
 _glDisable(2929);
 _glBlendFunc(770, 771);
 _glEnable(3042);
 _glCullFace(1029);
 _glFrontFace(2305);
 _glEnable(2884);
 _glClearColor(0.0, 0.0, 0.0, 1.0);
 _glClearDepthf(1.0);
 _glClear(16640);
 HEAP32[14852] = HEAP32[$width$addr >> 2];
 HEAP32[14853] = HEAP32[$height$addr >> 2];
 _TraceLog(3, 29869, $vararg_buffer44);
 STACKTOP = sp;
 return;
}

function _stbi__convert_format($data, $img_n, $req_comp, $x, $y) {
 $data = $data | 0;
 $img_n = $img_n | 0;
 $req_comp = $req_comp | 0;
 $x = $x | 0;
 $y = $y | 0;
 var $14 = 0, $168 = 0, $36 = 0, $46 = 0, $65 = 0, $75 = 0, $call118 = 0, $call137 = 0, $call157 = 0, $call176 = 0, $data$addr = 0, $dest = 0, $good = 0, $i = 0, $img_n$addr = 0, $j = 0, $mul = 0, $mul9 = 0, $req_comp$addr = 0, $retval = 0, $src = 0, $tobool = 0, $x$addr = 0, $y$addr = 0, label = 0, sp = 0, CSE$0 = 0, CSE$1 = 0, CSE$2 = 0, CSE$3 = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 $retval = sp + 40 | 0;
 $data$addr = sp + 36 | 0;
 $img_n$addr = sp + 32 | 0;
 $req_comp$addr = sp + 28 | 0;
 $x$addr = sp + 24 | 0;
 $y$addr = sp + 20 | 0;
 $i = sp + 16 | 0;
 $j = sp + 12 | 0;
 $good = sp + 8 | 0;
 $src = sp + 4 | 0;
 $dest = sp;
 HEAP32[$data$addr >> 2] = $data;
 HEAP32[$img_n$addr >> 2] = $img_n;
 HEAP32[$req_comp$addr >> 2] = $req_comp;
 HEAP32[$x$addr >> 2] = $x;
 HEAP32[$y$addr >> 2] = $y;
 if ((HEAP32[$req_comp$addr >> 2] | 0) == (HEAP32[$img_n$addr >> 2] | 0)) {
  HEAP32[$retval >> 2] = HEAP32[$data$addr >> 2];
  $168 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $168 | 0;
 }
 if (!((HEAP32[$req_comp$addr >> 2] | 0) >= 1 & (HEAP32[$req_comp$addr >> 2] | 0) <= 4)) ___assert_fail(33068, 32781, 1588, 33124);
 HEAP32[$good >> 2] = _stbi__malloc_mad3(HEAP32[$req_comp$addr >> 2] | 0, HEAP32[$x$addr >> 2] | 0, HEAP32[$y$addr >> 2] | 0, 0) | 0;
 if (!(HEAP32[$good >> 2] | 0)) {
  _free(HEAP32[$data$addr >> 2] | 0);
  $tobool = (_stbi__err(32857) | 0) != 0;
  HEAP32[$retval >> 2] = $tobool ? 0 : 0;
  $168 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $168 | 0;
 }
 HEAP32[$j >> 2] = 0;
 L12 : while (1) {
  $14 = HEAP32[$data$addr >> 2] | 0;
  if ((HEAP32[$j >> 2] | 0) >= (HEAP32[$y$addr >> 2] | 0)) break;
  $mul = Math_imul(HEAP32[$j >> 2] | 0, HEAP32[$x$addr >> 2] | 0) | 0;
  HEAP32[$src >> 2] = $14 + (Math_imul($mul, HEAP32[$img_n$addr >> 2] | 0) | 0);
  $mul9 = Math_imul(HEAP32[$j >> 2] | 0, HEAP32[$x$addr >> 2] | 0) | 0;
  HEAP32[$dest >> 2] = (HEAP32[$good >> 2] | 0) + (Math_imul($mul9, HEAP32[$req_comp$addr >> 2] | 0) | 0);
  L15 : do switch ((HEAP32[$img_n$addr >> 2] << 3) + (HEAP32[$req_comp$addr >> 2] | 0) | 0) {
  case 10:
   {
    HEAP32[$i >> 2] = (HEAP32[$x$addr >> 2] | 0) - 1;
    while (1) {
     if ((HEAP32[$i >> 2] | 0) < 0) break L15;
     HEAP8[HEAP32[$dest >> 2] >> 0] = HEAP8[HEAP32[$src >> 2] >> 0] | 0;
     HEAP8[(HEAP32[$dest >> 2] | 0) + 1 >> 0] = -1;
     HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + -1;
     HEAP32[$src >> 2] = (HEAP32[$src >> 2] | 0) + 1;
     HEAP32[$dest >> 2] = (HEAP32[$dest >> 2] | 0) + 2;
    }
    break;
   }
  case 11:
   {
    HEAP32[$i >> 2] = (HEAP32[$x$addr >> 2] | 0) - 1;
    while (1) {
     if ((HEAP32[$i >> 2] | 0) < 0) break L15;
     $36 = HEAP8[HEAP32[$src >> 2] >> 0] | 0;
     HEAP8[(HEAP32[$dest >> 2] | 0) + 2 >> 0] = $36;
     HEAP8[(HEAP32[$dest >> 2] | 0) + 1 >> 0] = $36;
     HEAP8[HEAP32[$dest >> 2] >> 0] = $36;
     HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + -1;
     HEAP32[$src >> 2] = (HEAP32[$src >> 2] | 0) + 1;
     HEAP32[$dest >> 2] = (HEAP32[$dest >> 2] | 0) + 3;
    }
    break;
   }
  case 12:
   {
    HEAP32[$i >> 2] = (HEAP32[$x$addr >> 2] | 0) - 1;
    while (1) {
     if ((HEAP32[$i >> 2] | 0) < 0) break L15;
     $46 = HEAP8[HEAP32[$src >> 2] >> 0] | 0;
     HEAP8[(HEAP32[$dest >> 2] | 0) + 2 >> 0] = $46;
     HEAP8[(HEAP32[$dest >> 2] | 0) + 1 >> 0] = $46;
     HEAP8[HEAP32[$dest >> 2] >> 0] = $46;
     HEAP8[(HEAP32[$dest >> 2] | 0) + 3 >> 0] = -1;
     HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + -1;
     HEAP32[$src >> 2] = (HEAP32[$src >> 2] | 0) + 1;
     HEAP32[$dest >> 2] = (HEAP32[$dest >> 2] | 0) + 4;
    }
    break;
   }
  case 17:
   {
    HEAP32[$i >> 2] = (HEAP32[$x$addr >> 2] | 0) - 1;
    while (1) {
     if ((HEAP32[$i >> 2] | 0) < 0) break L15;
     HEAP8[HEAP32[$dest >> 2] >> 0] = HEAP8[HEAP32[$src >> 2] >> 0] | 0;
     HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + -1;
     HEAP32[$src >> 2] = (HEAP32[$src >> 2] | 0) + 2;
     HEAP32[$dest >> 2] = (HEAP32[$dest >> 2] | 0) + 1;
    }
    break;
   }
  case 19:
   {
    HEAP32[$i >> 2] = (HEAP32[$x$addr >> 2] | 0) - 1;
    while (1) {
     if ((HEAP32[$i >> 2] | 0) < 0) break L15;
     $65 = HEAP8[HEAP32[$src >> 2] >> 0] | 0;
     HEAP8[(HEAP32[$dest >> 2] | 0) + 2 >> 0] = $65;
     HEAP8[(HEAP32[$dest >> 2] | 0) + 1 >> 0] = $65;
     HEAP8[HEAP32[$dest >> 2] >> 0] = $65;
     HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + -1;
     HEAP32[$src >> 2] = (HEAP32[$src >> 2] | 0) + 2;
     HEAP32[$dest >> 2] = (HEAP32[$dest >> 2] | 0) + 3;
    }
    break;
   }
  case 20:
   {
    HEAP32[$i >> 2] = (HEAP32[$x$addr >> 2] | 0) - 1;
    while (1) {
     if ((HEAP32[$i >> 2] | 0) < 0) break L15;
     $75 = HEAP8[HEAP32[$src >> 2] >> 0] | 0;
     HEAP8[(HEAP32[$dest >> 2] | 0) + 2 >> 0] = $75;
     HEAP8[(HEAP32[$dest >> 2] | 0) + 1 >> 0] = $75;
     HEAP8[HEAP32[$dest >> 2] >> 0] = $75;
     HEAP8[(HEAP32[$dest >> 2] | 0) + 3 >> 0] = HEAP8[(HEAP32[$src >> 2] | 0) + 1 >> 0] | 0;
     HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + -1;
     HEAP32[$src >> 2] = (HEAP32[$src >> 2] | 0) + 2;
     HEAP32[$dest >> 2] = (HEAP32[$dest >> 2] | 0) + 4;
    }
    break;
   }
  case 28:
   {
    HEAP32[$i >> 2] = (HEAP32[$x$addr >> 2] | 0) - 1;
    while (1) {
     if ((HEAP32[$i >> 2] | 0) < 0) break L15;
     HEAP8[HEAP32[$dest >> 2] >> 0] = HEAP8[HEAP32[$src >> 2] >> 0] | 0;
     HEAP8[(HEAP32[$dest >> 2] | 0) + 1 >> 0] = HEAP8[(HEAP32[$src >> 2] | 0) + 1 >> 0] | 0;
     HEAP8[(HEAP32[$dest >> 2] | 0) + 2 >> 0] = HEAP8[(HEAP32[$src >> 2] | 0) + 2 >> 0] | 0;
     HEAP8[(HEAP32[$dest >> 2] | 0) + 3 >> 0] = -1;
     HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + -1;
     HEAP32[$src >> 2] = (HEAP32[$src >> 2] | 0) + 3;
     HEAP32[$dest >> 2] = (HEAP32[$dest >> 2] | 0) + 4;
    }
    break;
   }
  case 25:
   {
    HEAP32[$i >> 2] = (HEAP32[$x$addr >> 2] | 0) - 1;
    while (1) {
     if ((HEAP32[$i >> 2] | 0) < 0) break L15;
     CSE$0 = HEAP32[$src >> 2] | 0;
     $call118 = _stbi__compute_y(HEAPU8[HEAP32[$src >> 2] >> 0] | 0, HEAPU8[CSE$0 + 1 >> 0] | 0, HEAPU8[CSE$0 + 2 >> 0] | 0) | 0;
     HEAP8[HEAP32[$dest >> 2] >> 0] = $call118;
     HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + -1;
     HEAP32[$src >> 2] = (HEAP32[$src >> 2] | 0) + 3;
     HEAP32[$dest >> 2] = (HEAP32[$dest >> 2] | 0) + 1;
    }
    break;
   }
  case 26:
   {
    HEAP32[$i >> 2] = (HEAP32[$x$addr >> 2] | 0) - 1;
    while (1) {
     if ((HEAP32[$i >> 2] | 0) < 0) break L15;
     CSE$1 = HEAP32[$src >> 2] | 0;
     $call137 = _stbi__compute_y(HEAPU8[HEAP32[$src >> 2] >> 0] | 0, HEAPU8[CSE$1 + 1 >> 0] | 0, HEAPU8[CSE$1 + 2 >> 0] | 0) | 0;
     HEAP8[HEAP32[$dest >> 2] >> 0] = $call137;
     HEAP8[(HEAP32[$dest >> 2] | 0) + 1 >> 0] = -1;
     HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + -1;
     HEAP32[$src >> 2] = (HEAP32[$src >> 2] | 0) + 3;
     HEAP32[$dest >> 2] = (HEAP32[$dest >> 2] | 0) + 2;
    }
    break;
   }
  case 33:
   {
    HEAP32[$i >> 2] = (HEAP32[$x$addr >> 2] | 0) - 1;
    while (1) {
     if ((HEAP32[$i >> 2] | 0) < 0) break L15;
     CSE$2 = HEAP32[$src >> 2] | 0;
     $call157 = _stbi__compute_y(HEAPU8[HEAP32[$src >> 2] >> 0] | 0, HEAPU8[CSE$2 + 1 >> 0] | 0, HEAPU8[CSE$2 + 2 >> 0] | 0) | 0;
     HEAP8[HEAP32[$dest >> 2] >> 0] = $call157;
     HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + -1;
     HEAP32[$src >> 2] = (HEAP32[$src >> 2] | 0) + 4;
     HEAP32[$dest >> 2] = (HEAP32[$dest >> 2] | 0) + 1;
    }
    break;
   }
  case 34:
   {
    HEAP32[$i >> 2] = (HEAP32[$x$addr >> 2] | 0) - 1;
    while (1) {
     if ((HEAP32[$i >> 2] | 0) < 0) break L15;
     CSE$3 = HEAP32[$src >> 2] | 0;
     $call176 = _stbi__compute_y(HEAPU8[HEAP32[$src >> 2] >> 0] | 0, HEAPU8[CSE$3 + 1 >> 0] | 0, HEAPU8[CSE$3 + 2 >> 0] | 0) | 0;
     HEAP8[HEAP32[$dest >> 2] >> 0] = $call176;
     HEAP8[(HEAP32[$dest >> 2] | 0) + 1 >> 0] = HEAP8[(HEAP32[$src >> 2] | 0) + 3 >> 0] | 0;
     HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + -1;
     HEAP32[$src >> 2] = (HEAP32[$src >> 2] | 0) + 4;
     HEAP32[$dest >> 2] = (HEAP32[$dest >> 2] | 0) + 2;
    }
    break;
   }
  case 35:
   {
    HEAP32[$i >> 2] = (HEAP32[$x$addr >> 2] | 0) - 1;
    while (1) {
     if ((HEAP32[$i >> 2] | 0) < 0) break L15;
     HEAP8[HEAP32[$dest >> 2] >> 0] = HEAP8[HEAP32[$src >> 2] >> 0] | 0;
     HEAP8[(HEAP32[$dest >> 2] | 0) + 1 >> 0] = HEAP8[(HEAP32[$src >> 2] | 0) + 1 >> 0] | 0;
     HEAP8[(HEAP32[$dest >> 2] | 0) + 2 >> 0] = HEAP8[(HEAP32[$src >> 2] | 0) + 2 >> 0] | 0;
     HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + -1;
     HEAP32[$src >> 2] = (HEAP32[$src >> 2] | 0) + 4;
     HEAP32[$dest >> 2] = (HEAP32[$dest >> 2] | 0) + 3;
    }
    break;
   }
  default:
   {
    label = 46;
    break L12;
   }
  } while (0);
  HEAP32[$j >> 2] = (HEAP32[$j >> 2] | 0) + 1;
 }
 if ((label | 0) == 46) ___assert_fail(33122, 32781, 1617, 33124);
 _free($14);
 HEAP32[$retval >> 2] = HEAP32[$good >> 2];
 $168 = HEAP32[$retval >> 2] | 0;
 STACKTOP = sp;
 return $168 | 0;
}

function __ZNSt3__211__money_putIwE8__formatEPwRS2_S3_jPKwS5_RKNS_5ctypeIwEEbRKNS_10money_base7patternEwwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNSE_IwNSF_IwEENSH_IwEEEESQ_i($__mb, $__mi, $__me, $__flags, $__db, $__de, $__ct, $__neg, $__pat, $__dp, $__ts, $__grp, $__sym, $__sn, $__fd) {
 $__mb = $__mb | 0;
 $__mi = $__mi | 0;
 $__me = $__me | 0;
 $__flags = $__flags | 0;
 $__db = $__db | 0;
 $__de = $__de | 0;
 $__ct = $__ct | 0;
 $__neg = $__neg | 0;
 $__pat = $__pat | 0;
 $__dp = $__dp | 0;
 $__ts = $__ts | 0;
 $__grp = $__grp | 0;
 $__sym = $__sym | 0;
 $__sn = $__sn | 0;
 $__fd = $__fd | 0;
 var $12 = 0, $13 = 0, $14 = 0, $17 = 0, $18 = 0, $2 = 0, $20 = 0, $24 = 0, $25 = 0, $28 = 0, $29 = 0, $33 = 0, $34 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $43 = 0, $44 = 0, $47 = 0, $48 = 0, $8 = 0, $9 = 0, $__d$0 = 0, $__d$1 = 0, $__d$2 = 0, $__d$3 = 0, $__db$addr$0 = 0, $__db$addr$2 = 0, $__f$0 = 0, $__f$1 = 0, $__first$addr$0$i$i = 0, $__gl$0 = 0, $__gl$0$ph = 0, $__gl$1 = 0, $__ig$0 = 0, $__ig$1 = 0, $__last$addr$0$i$i = 0, $__ng$0 = 0, $__ng$1 = 0, $__p$0 = 0, $__result$addr$0$i$i = 0, $__result$addr$0$i$i143 = 0, $__size_$i$i$i102 = 0, $__size_$i$i$i111 = 0, $__size_$i$i$i132 = 0, $__size_$i2$i$i113 = 0, $__size_$i2$i$i134 = 0, $__size_$i3$i$i = 0, $add$ptr$i = 0, $add$ptr$i$i178 = 0, $add$ptr$i161 = 0, $call$i = 0, $call$i110 = 0, $cmp27 = 0, $cmp31 = 0, $cond = 0, $cond$i = 0, $cond$i$i138 = 0, $cond$i$i169175 = 0, $inc = 0, $incdec$ptr$i$i73 = 0, $incdec$ptr33 = 0, $incdec$ptr42 = 0, $incdec$ptr42180 = 0, $incdec$ptr51 = 0, $incdec$ptr63 = 0, $incdec$ptr81 = 0, $spec$select = 0, $tobool = 0, $tobool$i$i = 0, $tobool$i$i$i103 = 0, $tobool$i$i$i112 = 0, $tobool$i$i$i133 = 0, $tobool$i$i88 = 0, CSE$0 = 0;
 HEAP32[$__me >> 2] = $__mb;
 $__size_$i$i$i111 = $__sn + 8 + 3 | 0;
 $__size_$i2$i$i113 = $__sn + 4 | 0;
 $__size_$i$i$i132 = $__sym + 8 + 3 | 0;
 $__size_$i2$i$i134 = $__sym + 4 | 0;
 $tobool = ($__flags & 512 | 0) == 0;
 $cmp27 = ($__fd | 0) > 0;
 $__size_$i$i$i102 = $__grp + 11 | 0;
 $__size_$i3$i$i = $__grp + 4 | 0;
 $__db$addr$0 = $__db;
 $__p$0 = 0;
 while (1) {
  if (($__p$0 | 0) == 4) break;
  L4 : do switch (HEAP8[$__pat + $__p$0 >> 0] | 0) {
  case 0:
   {
    HEAP32[$__mi >> 2] = HEAP32[$__me >> 2];
    $__db$addr$2 = $__db$addr$0;
    break;
   }
  case 1:
   {
    HEAP32[$__mi >> 2] = HEAP32[$__me >> 2];
    $call$i110 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$__ct >> 2] | 0) + 44 >> 2] & 31]($__ct, 32) | 0;
    $8 = HEAP32[$__me >> 2] | 0;
    HEAP32[$__me >> 2] = $8 + 4;
    HEAP32[$8 >> 2] = $call$i110;
    $__db$addr$2 = $__db$addr$0;
    break;
   }
  case 3:
   {
    $9 = HEAP8[$__size_$i$i$i111 >> 0] | 0;
    $tobool$i$i$i112 = $9 << 24 >> 24 < 0;
    if (!(($tobool$i$i$i112 ? HEAP32[$__size_$i2$i$i113 >> 2] | 0 : $9 & 255) | 0)) $__db$addr$2 = $__db$addr$0; else {
     $12 = HEAP32[($tobool$i$i$i112 ? HEAP32[$__sn >> 2] | 0 : $__sn) >> 2] | 0;
     $13 = HEAP32[$__me >> 2] | 0;
     HEAP32[$__me >> 2] = $13 + 4;
     HEAP32[$13 >> 2] = $12;
     $__db$addr$2 = $__db$addr$0;
    }
    break;
   }
  case 2:
   {
    $14 = HEAP8[$__size_$i$i$i132 >> 0] | 0;
    $tobool$i$i$i133 = $14 << 24 >> 24 < 0;
    $cond$i$i138 = $tobool$i$i$i133 ? HEAP32[$__size_$i2$i$i134 >> 2] | 0 : $14 & 255;
    if ($tobool | ($cond$i$i138 | 0) == 0) $__db$addr$2 = $__db$addr$0; else {
     $cond$i$i169175 = $tobool$i$i$i133 ? HEAP32[$__sym >> 2] | 0 : $__sym;
     $add$ptr$i161 = $cond$i$i169175 + ($cond$i$i138 << 2) | 0;
     $17 = HEAP32[$__me >> 2] | 0;
     $18 = $cond$i$i169175;
     $__result$addr$0$i$i143 = $17;
     while (1) {
      if (($18 | 0) == ($add$ptr$i161 | 0)) break;
      HEAP32[$__result$addr$0$i$i143 >> 2] = HEAP32[$18 >> 2];
      $18 = $18 + 4 | 0;
      $__result$addr$0$i$i143 = $__result$addr$0$i$i143 + 4 | 0;
     }
     HEAP32[$__me >> 2] = $17 + ($cond$i$i138 << 2);
     $__db$addr$2 = $__db$addr$0;
    }
    break;
   }
  case 4:
   {
    $20 = HEAP32[$__me >> 2] | 0;
    $spec$select = $__neg ? $__db$addr$0 + 4 | 0 : $__db$addr$0;
    $__d$0 = $spec$select;
    while (1) {
     if ($__d$0 >>> 0 >= $__de >>> 0) break;
     if (!(FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$__ct >> 2] | 0) + 12 >> 2] & 63]($__ct, 2048, HEAP32[$__d$0 >> 2] | 0) | 0)) break;
     $__d$0 = $__d$0 + 4 | 0;
    }
    if ($cmp27) {
     $__d$1 = $__d$0;
     $__f$0 = $__fd;
     while (1) {
      $cmp31 = ($__f$0 | 0) > 0;
      if (!($__d$1 >>> 0 > $spec$select >>> 0 & $cmp31)) break;
      $incdec$ptr33 = $__d$1 + -4 | 0;
      $24 = HEAP32[$incdec$ptr33 >> 2] | 0;
      $25 = HEAP32[$__me >> 2] | 0;
      HEAP32[$__me >> 2] = $25 + 4;
      HEAP32[$25 >> 2] = $24;
      $__d$1 = $incdec$ptr33;
      $__f$0 = $__f$0 + -1 | 0;
     }
     if ($cmp31) $cond = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$__ct >> 2] | 0) + 44 >> 2] & 31]($__ct, 48) | 0; else $cond = 0;
     $__f$1 = $__f$0;
     $incdec$ptr42180 = HEAP32[$__me >> 2] | 0;
     while (1) {
      $incdec$ptr42 = $incdec$ptr42180 + 4 | 0;
      if (($__f$1 | 0) <= 0) break;
      HEAP32[$incdec$ptr42180 >> 2] = $cond;
      $__f$1 = $__f$1 + -1 | 0;
      $incdec$ptr42180 = $incdec$ptr42;
     }
     HEAP32[$__me >> 2] = $incdec$ptr42;
     HEAP32[$incdec$ptr42180 >> 2] = $__dp;
     $__d$2 = $__d$1;
    } else $__d$2 = $__d$0;
    if (($__d$2 | 0) == ($spec$select | 0)) {
     $call$i = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$__ct >> 2] | 0) + 44 >> 2] & 31]($__ct, 48) | 0;
     $28 = HEAP32[$__me >> 2] | 0;
     $incdec$ptr51 = $28 + 4 | 0;
     HEAP32[$__me >> 2] = $incdec$ptr51;
     HEAP32[$28 >> 2] = $call$i;
     $40 = $incdec$ptr51;
    } else {
     $29 = HEAP8[$__size_$i$i$i102 >> 0] | 0;
     $tobool$i$i$i103 = $29 << 24 >> 24 < 0;
     if (!(($tobool$i$i$i103 ? HEAP32[$__size_$i3$i$i >> 2] | 0 : $29 & 255) | 0)) $__gl$0$ph = -1; else $__gl$0$ph = HEAP8[($tobool$i$i$i103 ? HEAP32[$__grp >> 2] | 0 : $__grp) >> 0] | 0;
     $__d$3 = $__d$2;
     $__gl$0 = $__gl$0$ph;
     $__ig$0 = 0;
     $__ng$0 = 0;
     while (1) {
      if (($__d$3 | 0) == ($spec$select | 0)) break;
      $33 = HEAP32[$__me >> 2] | 0;
      if (($__ng$0 | 0) == ($__gl$0 | 0)) {
       $incdec$ptr63 = $33 + 4 | 0;
       HEAP32[$__me >> 2] = $incdec$ptr63;
       HEAP32[$33 >> 2] = $__ts;
       $inc = $__ig$0 + 1 | 0;
       $34 = HEAP8[$__size_$i$i$i102 >> 0] | 0;
       $tobool$i$i88 = $34 << 24 >> 24 < 0;
       if ($inc >>> 0 < ($tobool$i$i88 ? HEAP32[$__size_$i3$i$i >> 2] | 0 : $34 & 255) >>> 0) {
        $37 = HEAP8[($tobool$i$i88 ? HEAP32[$__grp >> 2] | 0 : $__grp) + $inc >> 0] | 0;
        $39 = $incdec$ptr63;
        CSE$0 = $37 << 24 >> 24 | 0;
        $__gl$1 = (CSE$0 | 0) == 127 ? -1 : CSE$0 | 0;
        $__ig$1 = $inc;
        $__ng$1 = 0;
       } else {
        $39 = $incdec$ptr63;
        $__gl$1 = $__ng$0;
        $__ig$1 = $inc;
        $__ng$1 = 0;
       }
      } else {
       $39 = $33;
       $__gl$1 = $__gl$0;
       $__ig$1 = $__ig$0;
       $__ng$1 = $__ng$0;
      }
      $incdec$ptr81 = $__d$3 + -4 | 0;
      $38 = HEAP32[$incdec$ptr81 >> 2] | 0;
      HEAP32[$__me >> 2] = $39 + 4;
      HEAP32[$39 >> 2] = $38;
      $__d$3 = $incdec$ptr81;
      $__gl$0 = $__gl$1;
      $__ig$0 = $__ig$1;
      $__ng$0 = $__ng$1 + 1 | 0;
     }
     $40 = HEAP32[$__me >> 2] | 0;
    }
    if (($20 | 0) == ($40 | 0)) $__db$addr$2 = $spec$select; else {
     $__first$addr$0$i$i = $20;
     $__last$addr$0$i$i = $40;
     while (1) {
      $incdec$ptr$i$i73 = $__last$addr$0$i$i + -4 | 0;
      if ($__first$addr$0$i$i >>> 0 >= $incdec$ptr$i$i73 >>> 0) {
       $__db$addr$2 = $spec$select;
       break L4;
      }
      $41 = HEAP32[$__first$addr$0$i$i >> 2] | 0;
      HEAP32[$__first$addr$0$i$i >> 2] = HEAP32[$incdec$ptr$i$i73 >> 2];
      HEAP32[$incdec$ptr$i$i73 >> 2] = $41;
      $__first$addr$0$i$i = $__first$addr$0$i$i + 4 | 0;
      $__last$addr$0$i$i = $incdec$ptr$i$i73;
     }
    }
    break;
   }
  default:
   $__db$addr$2 = $__db$addr$0;
  } while (0);
  $__db$addr$0 = $__db$addr$2;
  $__p$0 = $__p$0 + 1 | 0;
 }
 $2 = HEAP8[$__size_$i$i$i111 >> 0] | 0;
 $tobool$i$i = $2 << 24 >> 24 < 0;
 $cond$i = $tobool$i$i ? HEAP32[$__size_$i2$i$i113 >> 2] | 0 : $2 & 255;
 if ($cond$i >>> 0 > 1) {
  $43 = HEAP32[$__sn >> 2] | 0;
  $add$ptr$i$i178 = $tobool$i$i ? $43 + 4 | 0 : $__size_$i2$i$i113;
  $add$ptr$i = ($tobool$i$i ? $43 : $__sn) + ($cond$i << 2) | 0;
  $44 = HEAP32[$__me >> 2] | 0;
  $47 = $add$ptr$i - $add$ptr$i$i178 | 0;
  $48 = $add$ptr$i$i178;
  $__result$addr$0$i$i = $44;
  while (1) {
   if (($48 | 0) == ($add$ptr$i | 0)) break;
   HEAP32[$__result$addr$0$i$i >> 2] = HEAP32[$48 >> 2];
   $48 = $48 + 4 | 0;
   $__result$addr$0$i$i = $__result$addr$0$i$i + 4 | 0;
  }
  HEAP32[$__me >> 2] = $44 + ($47 >>> 2 << 2);
 }
 switch (($__flags & 176) << 24 >> 24) {
 case 32:
  {
   HEAP32[$__mi >> 2] = HEAP32[$__me >> 2];
   break;
  }
 case 16:
  break;
 default:
  HEAP32[$__mi >> 2] = $__mb;
 }
 return;
}

function __ZNSt3__211__money_putIcE8__formatEPcRS2_S3_jPKcS5_RKNS_5ctypeIcEEbRKNS_10money_base7patternEccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESL_SL_i($__mb, $__mi, $__me, $__flags, $__db, $__de, $__ct, $__neg, $__pat, $__dp, $__ts, $__grp, $__sym, $__sn, $__fd) {
 $__mb = $__mb | 0;
 $__mi = $__mi | 0;
 $__me = $__me | 0;
 $__flags = $__flags | 0;
 $__db = $__db | 0;
 $__de = $__de | 0;
 $__ct = $__ct | 0;
 $__neg = $__neg | 0;
 $__pat = $__pat | 0;
 $__dp = $__dp | 0;
 $__ts = $__ts | 0;
 $__grp = $__grp | 0;
 $__sym = $__sym | 0;
 $__sn = $__sn | 0;
 $__fd = $__fd | 0;
 var $$pn = 0, $$pn$pn = 0, $0 = 0, $10 = 0, $11 = 0, $12 = 0, $17 = 0, $18 = 0, $22 = 0, $23 = 0, $25 = 0, $27 = 0, $28 = 0, $32 = 0, $33 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $6 = 0, $7 = 0, $__d$0 = 0, $__d$1 = 0, $__d$2 = 0, $__d$3 = 0, $__db$addr$0 = 0, $__db$addr$2 = 0, $__f$0 = 0, $__f$1 = 0, $__first$addr$0$i$i = 0, $__gl$0 = 0, $__gl$0$ph = 0, $__gl$1 = 0, $__ig$0 = 0, $__ig$1 = 0, $__last$addr$0$i$i = 0, $__ng$0 = 0, $__ng$1 = 0, $__p$0 = 0, $__result$addr$0$i$i = 0, $__result$addr$0$i$i143 = 0, $__size_$i$i$i106 = 0, $__size_$i$i$i117 = 0, $__size_$i$i$i173 = 0, $__size_$i3$i$i108 = 0, $__size_$i3$i$i119 = 0, $__size_$i3$i$i175 = 0, $__tab_$i = 0, $add$ptr$i = 0, $add$ptr$i161 = 0, $agg$tmp4$sroa$0$0$i = 0, $agg$tmp4$sroa$0$0$i142 = 0, $call$i = 0, $call$i115 = 0, $cmp27 = 0, $cmp31 = 0, $cond = 0, $cond$i = 0, $cond$i$i170186 = 0, $cond$i$i179 = 0, $inc = 0, $incdec$ptr$i$i73 = 0, $incdec$ptr33 = 0, $incdec$ptr81 = 0, $spec$select = 0, $tobool = 0, $tobool$i$i = 0, $tobool$i$i$i107 = 0, $tobool$i$i$i118 = 0, $tobool$i$i$i174 = 0, $tobool$i$i89 = 0, CSE$0 = 0;
 HEAP32[$__me >> 2] = $__mb;
 $__size_$i$i$i117 = $__sn + 11 | 0;
 $__size_$i3$i$i119 = $__sn + 4 | 0;
 $__size_$i$i$i173 = $__sym + 11 | 0;
 $__size_$i3$i$i175 = $__sym + 4 | 0;
 $tobool = ($__flags & 512 | 0) == 0;
 $__tab_$i = $__ct + 8 | 0;
 $cmp27 = ($__fd | 0) > 0;
 $__size_$i$i$i106 = $__grp + 11 | 0;
 $__size_$i3$i$i108 = $__grp + 4 | 0;
 $__db$addr$0 = $__db;
 $__p$0 = 0;
 while (1) {
  if (($__p$0 | 0) == 4) break;
  L4 : do switch (HEAP8[$__pat + $__p$0 >> 0] | 0) {
  case 0:
   {
    HEAP32[$__mi >> 2] = HEAP32[$__me >> 2];
    $__db$addr$2 = $__db$addr$0;
    break;
   }
  case 1:
   {
    HEAP32[$__mi >> 2] = HEAP32[$__me >> 2];
    $call$i115 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$__ct >> 2] | 0) + 28 >> 2] & 31]($__ct, 32) | 0;
    $6 = HEAP32[$__me >> 2] | 0;
    HEAP32[$__me >> 2] = $6 + 1;
    HEAP8[$6 >> 0] = $call$i115;
    $__db$addr$2 = $__db$addr$0;
    break;
   }
  case 3:
   {
    $7 = HEAP8[$__size_$i$i$i117 >> 0] | 0;
    $tobool$i$i$i118 = $7 << 24 >> 24 < 0;
    if (!(($tobool$i$i$i118 ? HEAP32[$__size_$i3$i$i119 >> 2] | 0 : $7 & 255) | 0)) $__db$addr$2 = $__db$addr$0; else {
     $10 = HEAP8[($tobool$i$i$i118 ? HEAP32[$__sn >> 2] | 0 : $__sn) >> 0] | 0;
     $11 = HEAP32[$__me >> 2] | 0;
     HEAP32[$__me >> 2] = $11 + 1;
     HEAP8[$11 >> 0] = $10;
     $__db$addr$2 = $__db$addr$0;
    }
    break;
   }
  case 2:
   {
    $12 = HEAP8[$__size_$i$i$i173 >> 0] | 0;
    $tobool$i$i$i174 = $12 << 24 >> 24 < 0;
    $cond$i$i179 = $tobool$i$i$i174 ? HEAP32[$__size_$i3$i$i175 >> 2] | 0 : $12 & 255;
    if ($tobool | ($cond$i$i179 | 0) == 0) $__db$addr$2 = $__db$addr$0; else {
     $cond$i$i170186 = $tobool$i$i$i174 ? HEAP32[$__sym >> 2] | 0 : $__sym;
     $add$ptr$i161 = $cond$i$i170186 + $cond$i$i179 | 0;
     $__result$addr$0$i$i143 = HEAP32[$__me >> 2] | 0;
     $agg$tmp4$sroa$0$0$i142 = $cond$i$i170186;
     while (1) {
      if (($agg$tmp4$sroa$0$0$i142 | 0) == ($add$ptr$i161 | 0)) break;
      HEAP8[$__result$addr$0$i$i143 >> 0] = HEAP8[$agg$tmp4$sroa$0$0$i142 >> 0] | 0;
      $__result$addr$0$i$i143 = $__result$addr$0$i$i143 + 1 | 0;
      $agg$tmp4$sroa$0$0$i142 = $agg$tmp4$sroa$0$0$i142 + 1 | 0;
     }
     HEAP32[$__me >> 2] = $__result$addr$0$i$i143;
     $__db$addr$2 = $__db$addr$0;
    }
    break;
   }
  case 4:
   {
    $17 = HEAP32[$__me >> 2] | 0;
    $spec$select = $__neg ? $__db$addr$0 + 1 | 0 : $__db$addr$0;
    $__d$0 = $spec$select;
    while (1) {
     if ($__d$0 >>> 0 >= $__de >>> 0) break;
     $18 = HEAP8[$__d$0 >> 0] | 0;
     if ($18 << 24 >> 24 <= -1) break;
     if (!(HEAP16[(HEAP32[$__tab_$i >> 2] | 0) + ($18 << 24 >> 24 << 1) >> 1] & 2048)) break;
     $__d$0 = $__d$0 + 1 | 0;
    }
    if ($cmp27) {
     $__d$1 = $__d$0;
     $__f$0 = $__fd;
     while (1) {
      $cmp31 = ($__f$0 | 0) > 0;
      if (!($__d$1 >>> 0 > $spec$select >>> 0 & $cmp31)) break;
      $incdec$ptr33 = $__d$1 + -1 | 0;
      $22 = HEAP8[$incdec$ptr33 >> 0] | 0;
      $23 = HEAP32[$__me >> 2] | 0;
      HEAP32[$__me >> 2] = $23 + 1;
      HEAP8[$23 >> 0] = $22;
      $__d$1 = $incdec$ptr33;
      $__f$0 = $__f$0 + -1 | 0;
     }
     if ($cmp31) $cond = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$__ct >> 2] | 0) + 28 >> 2] & 31]($__ct, 48) | 0; else $cond = 0;
     $__f$1 = $__f$0;
     while (1) {
      $25 = HEAP32[$__me >> 2] | 0;
      HEAP32[$__me >> 2] = $25 + 1;
      if (($__f$1 | 0) <= 0) break;
      HEAP8[$25 >> 0] = $cond;
      $__f$1 = $__f$1 + -1 | 0;
     }
     HEAP8[$25 >> 0] = $__dp;
     $__d$2 = $__d$1;
    } else $__d$2 = $__d$0;
    L36 : do if (($__d$2 | 0) == ($spec$select | 0)) {
     $call$i = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$__ct >> 2] | 0) + 28 >> 2] & 31]($__ct, 48) | 0;
     $27 = HEAP32[$__me >> 2] | 0;
     HEAP32[$__me >> 2] = $27 + 1;
     HEAP8[$27 >> 0] = $call$i;
    } else {
     $28 = HEAP8[$__size_$i$i$i106 >> 0] | 0;
     $tobool$i$i$i107 = $28 << 24 >> 24 < 0;
     if (!(($tobool$i$i$i107 ? HEAP32[$__size_$i3$i$i108 >> 2] | 0 : $28 & 255) | 0)) $__gl$0$ph = -1; else $__gl$0$ph = HEAP8[($tobool$i$i$i107 ? HEAP32[$__grp >> 2] | 0 : $__grp) >> 0] | 0;
     $__d$3 = $__d$2;
     $__gl$0 = $__gl$0$ph;
     $__ig$0 = 0;
     $__ng$0 = 0;
     while (1) {
      if (($__d$3 | 0) == ($spec$select | 0)) break L36;
      if (($__ng$0 | 0) == ($__gl$0 | 0)) {
       $32 = HEAP32[$__me >> 2] | 0;
       HEAP32[$__me >> 2] = $32 + 1;
       HEAP8[$32 >> 0] = $__ts;
       $inc = $__ig$0 + 1 | 0;
       $33 = HEAP8[$__size_$i$i$i106 >> 0] | 0;
       $tobool$i$i89 = $33 << 24 >> 24 < 0;
       if ($inc >>> 0 < ($tobool$i$i89 ? HEAP32[$__size_$i3$i$i108 >> 2] | 0 : $33 & 255) >>> 0) {
        $36 = HEAP8[($tobool$i$i89 ? HEAP32[$__grp >> 2] | 0 : $__grp) + $inc >> 0] | 0;
        CSE$0 = $36 << 24 >> 24 | 0;
        $__gl$1 = (CSE$0 | 0) == 127 ? -1 : CSE$0 | 0;
        $__ig$1 = $inc;
        $__ng$1 = 0;
       } else {
        $__gl$1 = $__ng$0;
        $__ig$1 = $inc;
        $__ng$1 = 0;
       }
      } else {
       $__gl$1 = $__gl$0;
       $__ig$1 = $__ig$0;
       $__ng$1 = $__ng$0;
      }
      $incdec$ptr81 = $__d$3 + -1 | 0;
      $37 = HEAP8[$incdec$ptr81 >> 0] | 0;
      $38 = HEAP32[$__me >> 2] | 0;
      HEAP32[$__me >> 2] = $38 + 1;
      HEAP8[$38 >> 0] = $37;
      $__d$3 = $incdec$ptr81;
      $__gl$0 = $__gl$1;
      $__ig$0 = $__ig$1;
      $__ng$0 = $__ng$1 + 1 | 0;
     }
    } while (0);
    $39 = HEAP32[$__me >> 2] | 0;
    if (($17 | 0) == ($39 | 0)) $__db$addr$2 = $spec$select; else {
     $__first$addr$0$i$i = $17;
     $__last$addr$0$i$i = $39;
     while (1) {
      $incdec$ptr$i$i73 = $__last$addr$0$i$i + -1 | 0;
      if ($__first$addr$0$i$i >>> 0 >= $incdec$ptr$i$i73 >>> 0) {
       $__db$addr$2 = $spec$select;
       break L4;
      }
      $40 = HEAP8[$__first$addr$0$i$i >> 0] | 0;
      HEAP8[$__first$addr$0$i$i >> 0] = HEAP8[$incdec$ptr$i$i73 >> 0] | 0;
      HEAP8[$incdec$ptr$i$i73 >> 0] = $40;
      $__first$addr$0$i$i = $__first$addr$0$i$i + 1 | 0;
      $__last$addr$0$i$i = $incdec$ptr$i$i73;
     }
    }
    break;
   }
  default:
   $__db$addr$2 = $__db$addr$0;
  } while (0);
  $__db$addr$0 = $__db$addr$2;
  $__p$0 = $__p$0 + 1 | 0;
 }
 $0 = HEAP8[$__size_$i$i$i117 >> 0] | 0;
 $tobool$i$i = $0 << 24 >> 24 < 0;
 $cond$i = $tobool$i$i ? HEAP32[$__size_$i3$i$i119 >> 2] | 0 : $0 & 255;
 if ($cond$i >>> 0 > 1) {
  $$pn = $tobool$i$i ? HEAP32[$__sn >> 2] | 0 : $__sn;
  $add$ptr$i = $$pn + $cond$i | 0;
  $$pn$pn = $$pn;
  $__result$addr$0$i$i = HEAP32[$__me >> 2] | 0;
  while (1) {
   $agg$tmp4$sroa$0$0$i = $$pn$pn + 1 | 0;
   if (($agg$tmp4$sroa$0$0$i | 0) == ($add$ptr$i | 0)) break;
   HEAP8[$__result$addr$0$i$i >> 0] = HEAP8[$agg$tmp4$sroa$0$0$i >> 0] | 0;
   $$pn$pn = $agg$tmp4$sroa$0$0$i;
   $__result$addr$0$i$i = $__result$addr$0$i$i + 1 | 0;
  }
  HEAP32[$__me >> 2] = $__result$addr$0$i$i;
 }
 switch (($__flags & 176) << 24 >> 24) {
 case 32:
  {
   HEAP32[$__mi >> 2] = HEAP32[$__me >> 2];
   break;
  }
 case 16:
  break;
 default:
  HEAP32[$__mi >> 2] = $__mb;
 }
 return;
}

function _LoadFontDefault() {
 var $$compoundliteral = 0, $$compoundliteral13 = 0, $12 = 0, $52 = f0, $arrayidx = 0, $arrayidx12 = 0, $arrayidx75 = 0, $charsDivisor = 0, $charsHeight = 0, $charsWidth = 0, $conv = f0, $conv41 = f0, $conv44 = f0, $conv46 = f0, $conv52 = 0, $conv61 = f0, $conv67 = f0, $counter = 0, $currentLine = 0, $currentPosX = 0, $defaultFontData = 0, $i = 0, $i3 = 0, $i31 = 0, $imFont = 0, $imFont$byval_copy1 = 0, $imFont$byval_copy2 = 0, $imHeight = 0, $imWidth = 0, $image = 0, $imagePixels = 0, $inc20 = 0, $j = 0, $testPosX = 0, $tmp = 0, $tmp76 = 0, $vararg_buffer = 0, sp = 0, CSE$0 = 0, CSE$1 = 0, CSE$2 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 3120 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(3120);
 $imFont$byval_copy2 = sp + 3080 | 0;
 $imFont$byval_copy1 = sp + 3060 | 0;
 $vararg_buffer = sp + 2944 | 0;
 $defaultFontData = sp + 896 | 0;
 $charsHeight = sp + 3056 | 0;
 $charsDivisor = sp + 3052 | 0;
 $charsWidth = sp;
 $imWidth = sp + 3048 | 0;
 $imHeight = sp + 3044 | 0;
 $imagePixels = sp + 3040 | 0;
 $i = sp + 3036 | 0;
 $$compoundliteral = sp + 3104 | 0;
 $counter = sp + 3032 | 0;
 $i3 = sp + 3028 | 0;
 $j = sp + 3024 | 0;
 $$compoundliteral13 = sp + 3100 | 0;
 $imFont = sp + 3004 | 0;
 $tmp = sp + 2984 | 0;
 $currentLine = sp + 2980 | 0;
 $currentPosX = sp + 2976 | 0;
 $testPosX = sp + 2972 | 0;
 $i31 = sp + 2968 | 0;
 $tmp76 = sp + 2948 | 0;
 HEAP32[14999] = 224;
 _memcpy($defaultFontData | 0, 1024, 2048) | 0;
 HEAP32[$charsHeight >> 2] = 10;
 HEAP32[$charsDivisor >> 2] = 1;
 _memcpy($charsWidth | 0, 3072, 896) | 0;
 HEAP32[$imWidth >> 2] = 128;
 HEAP32[$imHeight >> 2] = 128;
 HEAP32[$imagePixels >> 2] = _malloc((Math_imul(HEAP32[$imWidth >> 2] | 0, HEAP32[$imHeight >> 2] | 0) | 0) << 2) | 0;
 HEAP32[$i >> 2] = 0;
 while (1) {
  if ((HEAP32[$i >> 2] | 0) >= (Math_imul(HEAP32[$imWidth >> 2] | 0, HEAP32[$imHeight >> 2] | 0) | 0)) break;
  $arrayidx = (HEAP32[$imagePixels >> 2] | 0) + (HEAP32[$i >> 2] << 2) | 0;
  HEAP8[$$compoundliteral >> 0] = 0;
  HEAP8[$$compoundliteral + 1 >> 0] = 0;
  HEAP8[$$compoundliteral + 2 >> 0] = 0;
  HEAP8[$$compoundliteral + 3 >> 0] = 0;
  HEAP8[$arrayidx >> 0] = HEAP8[$$compoundliteral >> 0] | 0;
  HEAP8[$arrayidx + 1 >> 0] = HEAP8[$$compoundliteral + 1 >> 0] | 0;
  HEAP8[$arrayidx + 2 >> 0] = HEAP8[$$compoundliteral + 2 >> 0] | 0;
  HEAP8[$arrayidx + 3 >> 0] = HEAP8[$$compoundliteral + 3 >> 0] | 0;
  HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
 }
 HEAP32[$counter >> 2] = 0;
 HEAP32[$i3 >> 2] = 0;
 while (1) {
  if ((HEAP32[$i3 >> 2] | 0) >= (Math_imul(HEAP32[$imWidth >> 2] | 0, HEAP32[$imHeight >> 2] | 0) | 0)) break;
  HEAP32[$j >> 2] = 31;
  while (1) {
   $12 = HEAP32[$counter >> 2] | 0;
   if ((HEAP32[$j >> 2] | 0) < 0) break;
   if (HEAP32[$defaultFontData + ($12 << 2) >> 2] & 1 << HEAP32[$j >> 2] | 0) {
    $arrayidx12 = (HEAP32[$imagePixels >> 2] | 0) + ((HEAP32[$i3 >> 2] | 0) + (HEAP32[$j >> 2] | 0) << 2) | 0;
    HEAP8[$$compoundliteral13 >> 0] = -1;
    HEAP8[$$compoundliteral13 + 1 >> 0] = -1;
    HEAP8[$$compoundliteral13 + 2 >> 0] = -1;
    HEAP8[$$compoundliteral13 + 3 >> 0] = -1;
    HEAP8[$arrayidx12 >> 0] = HEAP8[$$compoundliteral13 >> 0] | 0;
    HEAP8[$arrayidx12 + 1 >> 0] = HEAP8[$$compoundliteral13 + 1 >> 0] | 0;
    HEAP8[$arrayidx12 + 2 >> 0] = HEAP8[$$compoundliteral13 + 2 >> 0] | 0;
    HEAP8[$arrayidx12 + 3 >> 0] = HEAP8[$$compoundliteral13 + 3 >> 0] | 0;
   }
   HEAP32[$j >> 2] = (HEAP32[$j >> 2] | 0) + -1;
  }
  $inc20 = $12 + 1 | 0;
  HEAP32[$counter >> 2] = $inc20;
  HEAP32[$counter >> 2] = (HEAP32[$counter >> 2] | 0) > 512 ? 0 : $inc20;
  HEAP32[$i3 >> 2] = (HEAP32[$i3 >> 2] | 0) + 32;
 }
 _LoadImageEx($imFont, HEAP32[$imagePixels >> 2] | 0, HEAP32[$imWidth >> 2] | 0, HEAP32[$imHeight >> 2] | 0);
 _ImageFormat($imFont, 2);
 _free(HEAP32[$imagePixels >> 2] | 0);
 HEAP32[$imFont$byval_copy2 >> 2] = HEAP32[$imFont >> 2];
 HEAP32[$imFont$byval_copy2 + 4 >> 2] = HEAP32[$imFont + 4 >> 2];
 HEAP32[$imFont$byval_copy2 + 8 >> 2] = HEAP32[$imFont + 8 >> 2];
 HEAP32[$imFont$byval_copy2 + 12 >> 2] = HEAP32[$imFont + 12 >> 2];
 HEAP32[$imFont$byval_copy2 + 16 >> 2] = HEAP32[$imFont + 16 >> 2];
 _LoadTextureFromImage($tmp, $imFont$byval_copy2);
 HEAP32[15e3] = HEAP32[$tmp >> 2];
 HEAP32[15001] = HEAP32[$tmp + 4 >> 2];
 HEAP32[15002] = HEAP32[$tmp + 8 >> 2];
 HEAP32[15003] = HEAP32[$tmp + 12 >> 2];
 HEAP32[15004] = HEAP32[$tmp + 16 >> 2];
 HEAP32[15006] = _malloc((HEAP32[14999] | 0) * 36 | 0) | 0;
 HEAP32[15005] = _malloc(HEAP32[14999] << 4) | 0;
 HEAP32[$currentLine >> 2] = 0;
 HEAP32[$currentPosX >> 2] = HEAP32[$charsDivisor >> 2];
 HEAP32[$testPosX >> 2] = HEAP32[$charsDivisor >> 2];
 HEAP32[$i31 >> 2] = 0;
 while (1) {
  if ((HEAP32[$i31 >> 2] | 0) >= (HEAP32[14999] | 0)) break;
  CSE$0 = HEAP32[$i31 >> 2] | 0;
  HEAP32[(HEAP32[15006] | 0) + ((CSE$0 | 0) * 36 | 0) >> 2] = 32 + (CSE$0 | 0);
  $conv = Math_fround(HEAP32[$currentPosX >> 2] | 0);
  HEAPF32[(HEAP32[15005] | 0) + (HEAP32[$i31 >> 2] << 4) >> 2] = $conv;
  CSE$1 = HEAP32[$charsDivisor >> 2] | 0;
  $conv41 = Math_fround(CSE$1 + (Math_imul(HEAP32[$currentLine >> 2] | 0, (HEAP32[$charsHeight >> 2] | 0) + CSE$1 | 0) | 0) | 0);
  HEAPF32[(HEAP32[15005] | 0) + (HEAP32[$i31 >> 2] << 4) + 4 >> 2] = $conv41;
  $conv44 = Math_fround(HEAP32[$charsWidth + (HEAP32[$i31 >> 2] << 2) >> 2] | 0);
  HEAPF32[(HEAP32[15005] | 0) + (HEAP32[$i31 >> 2] << 4) + 8 >> 2] = $conv44;
  $conv46 = Math_fround(HEAP32[$charsHeight >> 2] | 0);
  HEAPF32[(HEAP32[15005] | 0) + (HEAP32[$i31 >> 2] << 4) + 12 >> 2] = $conv46;
  $52 = Math_fround(HEAPF32[(HEAP32[15005] | 0) + (HEAP32[$i31 >> 2] << 4) + 8 >> 2]);
  $conv52 = ~~Math_fround($52 + Math_fround(HEAP32[$charsDivisor >> 2] | 0));
  HEAP32[$testPosX >> 2] = (HEAP32[$testPosX >> 2] | 0) + $conv52;
  if ((HEAP32[$testPosX >> 2] | 0) >= (HEAP32[15001] | 0)) {
   HEAP32[$currentLine >> 2] = (HEAP32[$currentLine >> 2] | 0) + 1;
   HEAP32[$currentPosX >> 2] = (HEAP32[$charsDivisor >> 2] << 1) + (HEAP32[$charsWidth + (HEAP32[$i31 >> 2] << 2) >> 2] | 0);
   HEAP32[$testPosX >> 2] = HEAP32[$currentPosX >> 2];
   $conv61 = Math_fround(HEAP32[$charsDivisor >> 2] | 0);
   HEAPF32[(HEAP32[15005] | 0) + (HEAP32[$i31 >> 2] << 4) >> 2] = $conv61;
   CSE$2 = HEAP32[$charsDivisor >> 2] | 0;
   $conv67 = Math_fround(CSE$2 + (Math_imul(HEAP32[$currentLine >> 2] | 0, (HEAP32[$charsHeight >> 2] | 0) + CSE$2 | 0) | 0) | 0);
   HEAPF32[(HEAP32[15005] | 0) + (HEAP32[$i31 >> 2] << 4) + 4 >> 2] = $conv67;
  } else HEAP32[$currentPosX >> 2] = HEAP32[$testPosX >> 2];
  HEAP32[(HEAP32[15006] | 0) + ((HEAP32[$i31 >> 2] | 0) * 36 | 0) + 4 >> 2] = 0;
  HEAP32[(HEAP32[15006] | 0) + ((HEAP32[$i31 >> 2] | 0) * 36 | 0) + 8 >> 2] = 0;
  HEAP32[(HEAP32[15006] | 0) + ((HEAP32[$i31 >> 2] | 0) * 36 | 0) + 12 >> 2] = 0;
  $image = (HEAP32[15006] | 0) + ((HEAP32[$i31 >> 2] | 0) * 36 | 0) + 16 | 0;
  $arrayidx75 = (HEAP32[15005] | 0) + (HEAP32[$i31 >> 2] << 4) | 0;
  HEAP32[$imFont$byval_copy1 >> 2] = HEAP32[$imFont >> 2];
  HEAP32[$imFont$byval_copy1 + 4 >> 2] = HEAP32[$imFont + 4 >> 2];
  HEAP32[$imFont$byval_copy1 + 8 >> 2] = HEAP32[$imFont + 8 >> 2];
  HEAP32[$imFont$byval_copy1 + 12 >> 2] = HEAP32[$imFont + 12 >> 2];
  HEAP32[$imFont$byval_copy1 + 16 >> 2] = HEAP32[$imFont + 16 >> 2];
  HEAP32[$imFont$byval_copy2 >> 2] = HEAP32[$arrayidx75 >> 2];
  HEAP32[$imFont$byval_copy2 + 4 >> 2] = HEAP32[$arrayidx75 + 4 >> 2];
  HEAP32[$imFont$byval_copy2 + 8 >> 2] = HEAP32[$arrayidx75 + 8 >> 2];
  HEAP32[$imFont$byval_copy2 + 12 >> 2] = HEAP32[$arrayidx75 + 12 >> 2];
  _ImageFromImage($tmp76, $imFont$byval_copy1, $imFont$byval_copy2);
  HEAP32[$image >> 2] = HEAP32[$tmp76 >> 2];
  HEAP32[$image + 4 >> 2] = HEAP32[$tmp76 + 4 >> 2];
  HEAP32[$image + 8 >> 2] = HEAP32[$tmp76 + 8 >> 2];
  HEAP32[$image + 12 >> 2] = HEAP32[$tmp76 + 12 >> 2];
  HEAP32[$image + 16 >> 2] = HEAP32[$tmp76 + 16 >> 2];
  HEAP32[$i31 >> 2] = (HEAP32[$i31 >> 2] | 0) + 1;
 }
 HEAP32[$imFont$byval_copy2 >> 2] = HEAP32[$imFont >> 2];
 HEAP32[$imFont$byval_copy2 + 4 >> 2] = HEAP32[$imFont + 4 >> 2];
 HEAP32[$imFont$byval_copy2 + 8 >> 2] = HEAP32[$imFont + 8 >> 2];
 HEAP32[$imFont$byval_copy2 + 12 >> 2] = HEAP32[$imFont + 12 >> 2];
 HEAP32[$imFont$byval_copy2 + 16 >> 2] = HEAP32[$imFont + 16 >> 2];
 _UnloadImage($imFont$byval_copy2);
 HEAP32[14998] = ~~Math_fround(HEAPF32[(HEAP32[15005] | 0) + 12 >> 2]);
 HEAP32[$vararg_buffer >> 2] = HEAP32[15e3];
 _TraceLog(3, 32707, $vararg_buffer);
 STACKTOP = sp;
 return;
}

function ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 $rem = $rem | 0;
 var $n_sroa_0_0_extract_trunc = 0, $n_sroa_1_4_extract_shift$0 = 0, $n_sroa_1_4_extract_trunc = 0, $d_sroa_0_0_extract_trunc = 0, $d_sroa_1_4_extract_shift$0 = 0, $d_sroa_1_4_extract_trunc = 0, $4 = 0, $17 = 0, $37 = 0, $51 = 0, $57 = 0, $58 = 0, $66 = 0, $78 = 0, $88 = 0, $89 = 0, $91 = 0, $92 = 0, $95 = 0, $105 = 0, $119 = 0, $125 = 0, $126 = 0, $130 = 0, $q_sroa_1_1_ph = 0, $q_sroa_0_1_ph = 0, $r_sroa_1_1_ph = 0, $r_sroa_0_1_ph = 0, $sr_1_ph = 0, $d_sroa_0_0_insert_insert99$0 = 0, $d_sroa_0_0_insert_insert99$1 = 0, $137$0 = 0, $137$1 = 0, $carry_0203 = 0, $sr_1202 = 0, $r_sroa_0_1201 = 0, $r_sroa_1_1200 = 0, $q_sroa_0_1199 = 0, $q_sroa_1_1198 = 0, $r_sroa_0_0_insert_insert42$0 = 0, $r_sroa_0_0_insert_insert42$1 = 0, $150$1 = 0, $151$0 = 0, $carry_0_lcssa$0 = 0, $carry_0_lcssa$1 = 0, $r_sroa_0_1_lcssa = 0, $r_sroa_1_1_lcssa = 0, $q_sroa_0_1_lcssa = 0, $q_sroa_1_1_lcssa = 0, $q_sroa_0_0_insert_ext75$0 = 0, $q_sroa_0_0_insert_ext75$1 = 0, $_0$0 = 0, $_0$1 = 0, $q_sroa_1_1198$looptemp = 0, CSE$0 = 0;
 $n_sroa_0_0_extract_trunc = $a$0;
 $n_sroa_1_4_extract_shift$0 = $a$1;
 $n_sroa_1_4_extract_trunc = $n_sroa_1_4_extract_shift$0;
 $d_sroa_0_0_extract_trunc = $b$0;
 $d_sroa_1_4_extract_shift$0 = $b$1;
 $d_sroa_1_4_extract_trunc = $d_sroa_1_4_extract_shift$0;
 if (!$n_sroa_1_4_extract_trunc) {
  $4 = ($rem | 0) != 0;
  if (!$d_sroa_1_4_extract_trunc) {
   if ($4) {
    HEAP32[$rem >> 2] = ($n_sroa_0_0_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
    HEAP32[$rem + 4 >> 2] = 0;
   }
   $_0$1 = 0;
   $_0$0 = ($n_sroa_0_0_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
   return (setTempRet0($_0$1 | 0), $_0$0) | 0;
  } else {
   if (!$4) {
    $_0$1 = 0;
    $_0$0 = 0;
    return (setTempRet0($_0$1 | 0), $_0$0) | 0;
   }
   HEAP32[$rem >> 2] = $a$0 | 0;
   HEAP32[$rem + 4 >> 2] = $a$1 & 0;
   $_0$1 = 0;
   $_0$0 = 0;
   return (setTempRet0($_0$1 | 0), $_0$0) | 0;
  }
 }
 $17 = ($d_sroa_1_4_extract_trunc | 0) == 0;
 do if (!$d_sroa_0_0_extract_trunc) {
  if ($17) {
   if ($rem | 0) {
    HEAP32[$rem >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
    HEAP32[$rem + 4 >> 2] = 0;
   }
   $_0$1 = 0;
   $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
   return (setTempRet0($_0$1 | 0), $_0$0) | 0;
  }
  if (!$n_sroa_0_0_extract_trunc) {
   if ($rem | 0) {
    HEAP32[$rem >> 2] = 0;
    HEAP32[$rem + 4 >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_1_4_extract_trunc >>> 0);
   }
   $_0$1 = 0;
   $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_1_4_extract_trunc >>> 0) >>> 0;
   return (setTempRet0($_0$1 | 0), $_0$0) | 0;
  }
  $37 = $d_sroa_1_4_extract_trunc - 1 | 0;
  if (!($37 & $d_sroa_1_4_extract_trunc)) {
   if ($rem | 0) {
    HEAP32[$rem >> 2] = $a$0 | 0;
    HEAP32[$rem + 4 >> 2] = $37 & $n_sroa_1_4_extract_trunc | $a$1 & 0;
   }
   $_0$1 = 0;
   $_0$0 = $n_sroa_1_4_extract_trunc >>> ((_llvm_cttz_i32($d_sroa_1_4_extract_trunc | 0) | 0) >>> 0);
   return (setTempRet0($_0$1 | 0), $_0$0) | 0;
  }
  $51 = (Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0) - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
  if ($51 >>> 0 <= 30) {
   $57 = $51 + 1 | 0;
   $58 = 31 - $51 | 0;
   $sr_1_ph = $57;
   $r_sroa_0_1_ph = $n_sroa_1_4_extract_trunc << $58 | $n_sroa_0_0_extract_trunc >>> ($57 >>> 0);
   $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($57 >>> 0);
   $q_sroa_0_1_ph = 0;
   $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $58;
   break;
  }
  if (!$rem) {
   $_0$1 = 0;
   $_0$0 = 0;
   return (setTempRet0($_0$1 | 0), $_0$0) | 0;
  }
  HEAP32[$rem >> 2] = $a$0 | 0;
  HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
  $_0$1 = 0;
  $_0$0 = 0;
  return (setTempRet0($_0$1 | 0), $_0$0) | 0;
 } else {
  if (!$17) {
   $119 = (Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0) - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
   if ($119 >>> 0 <= 31) {
    $125 = $119 + 1 | 0;
    $126 = 31 - $119 | 0;
    $130 = $119 - 31 >> 31;
    $sr_1_ph = $125;
    $r_sroa_0_1_ph = $n_sroa_0_0_extract_trunc >>> ($125 >>> 0) & $130 | $n_sroa_1_4_extract_trunc << $126;
    $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($125 >>> 0) & $130;
    $q_sroa_0_1_ph = 0;
    $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $126;
    break;
   }
   if (!$rem) {
    $_0$1 = 0;
    $_0$0 = 0;
    return (setTempRet0($_0$1 | 0), $_0$0) | 0;
   }
   HEAP32[$rem >> 2] = $a$0 | 0;
   HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
   $_0$1 = 0;
   $_0$0 = 0;
   return (setTempRet0($_0$1 | 0), $_0$0) | 0;
  }
  $66 = $d_sroa_0_0_extract_trunc - 1 | 0;
  if ($66 & $d_sroa_0_0_extract_trunc | 0) {
   $88 = (Math_clz32($d_sroa_0_0_extract_trunc | 0) | 0) + 33 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
   $89 = 64 - $88 | 0;
   $91 = 32 - $88 | 0;
   $92 = $91 >> 31;
   $95 = $88 - 32 | 0;
   $105 = $95 >> 31;
   $sr_1_ph = $88;
   $r_sroa_0_1_ph = $91 - 1 >> 31 & $n_sroa_1_4_extract_trunc >>> ($95 >>> 0) | ($n_sroa_1_4_extract_trunc << $91 | $n_sroa_0_0_extract_trunc >>> ($88 >>> 0)) & $105;
   $r_sroa_1_1_ph = $105 & $n_sroa_1_4_extract_trunc >>> ($88 >>> 0);
   $q_sroa_0_1_ph = $n_sroa_0_0_extract_trunc << $89 & $92;
   $q_sroa_1_1_ph = ($n_sroa_1_4_extract_trunc << $89 | $n_sroa_0_0_extract_trunc >>> ($95 >>> 0)) & $92 | $n_sroa_0_0_extract_trunc << $91 & $88 - 33 >> 31;
   break;
  }
  if ($rem | 0) {
   HEAP32[$rem >> 2] = $66 & $n_sroa_0_0_extract_trunc;
   HEAP32[$rem + 4 >> 2] = 0;
  }
  if (($d_sroa_0_0_extract_trunc | 0) == 1) {
   $_0$1 = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
   $_0$0 = $a$0 | 0 | 0;
   return (setTempRet0($_0$1 | 0), $_0$0) | 0;
  } else {
   $78 = _llvm_cttz_i32($d_sroa_0_0_extract_trunc | 0) | 0;
   $_0$1 = $n_sroa_1_4_extract_trunc >>> ($78 >>> 0) | 0;
   $_0$0 = $n_sroa_1_4_extract_trunc << 32 - $78 | $n_sroa_0_0_extract_trunc >>> ($78 >>> 0) | 0;
   return (setTempRet0($_0$1 | 0), $_0$0) | 0;
  }
 } while (0);
 if (!$sr_1_ph) {
  $q_sroa_1_1_lcssa = $q_sroa_1_1_ph;
  $q_sroa_0_1_lcssa = $q_sroa_0_1_ph;
  $r_sroa_1_1_lcssa = $r_sroa_1_1_ph;
  $r_sroa_0_1_lcssa = $r_sroa_0_1_ph;
  $carry_0_lcssa$1 = 0;
  $carry_0_lcssa$0 = 0;
 } else {
  $d_sroa_0_0_insert_insert99$0 = $b$0 | 0 | 0;
  $d_sroa_0_0_insert_insert99$1 = $d_sroa_1_4_extract_shift$0 | $b$1 & 0;
  $137$0 = _i64Add($d_sroa_0_0_insert_insert99$0 | 0, $d_sroa_0_0_insert_insert99$1 | 0, -1, -1) | 0;
  $137$1 = getTempRet0() | 0;
  $q_sroa_1_1198 = $q_sroa_1_1_ph;
  $q_sroa_0_1199 = $q_sroa_0_1_ph;
  $r_sroa_1_1200 = $r_sroa_1_1_ph;
  $r_sroa_0_1201 = $r_sroa_0_1_ph;
  $sr_1202 = $sr_1_ph;
  $carry_0203 = 0;
  do {
   $q_sroa_1_1198$looptemp = $q_sroa_1_1198;
   $q_sroa_1_1198 = $q_sroa_0_1199 >>> 31 | $q_sroa_1_1198 << 1;
   $q_sroa_0_1199 = $carry_0203 | $q_sroa_0_1199 << 1;
   $r_sroa_0_0_insert_insert42$0 = $r_sroa_0_1201 << 1 | $q_sroa_1_1198$looptemp >>> 31 | 0;
   $r_sroa_0_0_insert_insert42$1 = $r_sroa_0_1201 >>> 31 | $r_sroa_1_1200 << 1 | 0;
   _i64Subtract($137$0 | 0, $137$1 | 0, $r_sroa_0_0_insert_insert42$0 | 0, $r_sroa_0_0_insert_insert42$1 | 0) | 0;
   $150$1 = getTempRet0() | 0;
   CSE$0 = (($150$1 | 0) < 0 ? -1 : 0) << 1 | 0;
   $151$0 = $150$1 >> 31 | CSE$0;
   $carry_0203 = $151$0 & 1;
   $r_sroa_0_1201 = _i64Subtract($r_sroa_0_0_insert_insert42$0 | 0, $r_sroa_0_0_insert_insert42$1 | 0, $151$0 & $d_sroa_0_0_insert_insert99$0 | 0, ((($150$1 | 0) < 0 ? -1 : 0) >> 31 | CSE$0) & $d_sroa_0_0_insert_insert99$1 | 0) | 0;
   $r_sroa_1_1200 = getTempRet0() | 0;
   $sr_1202 = $sr_1202 - 1 | 0;
  } while (($sr_1202 | 0) != 0);
  $q_sroa_1_1_lcssa = $q_sroa_1_1198;
  $q_sroa_0_1_lcssa = $q_sroa_0_1199;
  $r_sroa_1_1_lcssa = $r_sroa_1_1200;
  $r_sroa_0_1_lcssa = $r_sroa_0_1201;
  $carry_0_lcssa$1 = 0;
  $carry_0_lcssa$0 = $carry_0203;
 }
 $q_sroa_0_0_insert_ext75$0 = $q_sroa_0_1_lcssa;
 $q_sroa_0_0_insert_ext75$1 = 0;
 if ($rem | 0) {
  HEAP32[$rem >> 2] = $r_sroa_0_1_lcssa;
  HEAP32[$rem + 4 >> 2] = $r_sroa_1_1_lcssa;
 }
 $_0$1 = ($q_sroa_0_0_insert_ext75$0 | 0) >>> 31 | ($q_sroa_1_1_lcssa | $q_sroa_0_0_insert_ext75$1) << 1 | ($q_sroa_0_0_insert_ext75$1 << 1 | $q_sroa_0_0_insert_ext75$0 >>> 31) & 0 | $carry_0_lcssa$1;
 $_0$0 = ($q_sroa_0_0_insert_ext75$0 << 1 | 0 >>> 31) & -2 | $carry_0_lcssa$0;
 return (setTempRet0($_0$1 | 0), $_0$0) | 0;
}

function __ZNSt3__213__tree_removeIPNS_16__tree_node_baseIPvEEEEvT_S5_($__root, $__z) {
 $__root = $__root | 0;
 $__z = $__z | 0;
 var $$pre = 0, $$pre170 = 0, $$pre173$pn = 0, $$sink = 0, $0 = 0, $10 = 0, $15 = 0, $16 = 0, $18 = 0, $2 = 0, $21 = 0, $23 = 0, $25 = 0, $27 = 0, $29 = 0, $31 = 0, $32 = 0, $34 = 0, $36 = 0, $38 = 0, $4 = 0, $40 = 0, $42 = 0, $43 = 0, $45 = 0, $5 = 0, $__is_black_ = 0, $__is_black_126 = 0, $__is_black_137 = 0, $__is_black_145$pre$phiZ2D = 0, $__is_black_150 = 0, $__is_black_205$phi$trans$insert = 0, $__is_black_216 = 0, $__is_black_224$pre$phiZ2D = 0, $__left_2$pre$phi181Z2D = 0, $__left_2$pre$phi182Z2D = 0, $__left_2$pre$phi183Z2D = 0, $__parent_ = 0, $__parent_$i$pre$phiZZ2D = 0, $__parent_30 = 0, $__root$addr$0 = 0, $__root$addr$1 = 0, $__root$addr$2 = 0, $__root$addr$4 = 0, $__root$addr$4$lcssa194$pn = 0, $__root$addr$6 = 0, $__root$addr$7 = 0, $__w$0 = 0, $__w$1 = 0, $__w$2 = 0, $__w$3 = 0, $__w$4 = 0, $__w$5 = 0, $call = 0, $cmp10142 = 0, $cmp167 = 0, $cond184 = 0, $cond185 = 0, $cond186 = 0, $cond9140 = 0, $cond9141 = 0, $tobool = 0, $tobool151 = 0, label = 0;
 label = 0;
 $0 = HEAP32[$__z >> 2] | 0;
 if (!$0) {
  $__left_2$pre$phi183Z2D = $__z;
  $cond184 = $__z;
  label = 4;
 } else if (!(HEAP32[$__z + 4 >> 2] | 0)) {
  $__left_2$pre$phi182Z2D = $__z;
  $cond185 = $__z;
  $cond9140 = $0;
  label = 6;
 } else {
  $call = __ZNSt3__211__tree_nextIPNS_16__tree_node_baseIPvEEEET_S5_($__z) | 0;
  $$pre = HEAP32[$call >> 2] | 0;
  if (!$$pre) {
   $__left_2$pre$phi183Z2D = $call;
   $cond184 = $call;
   label = 4;
  } else {
   $__left_2$pre$phi182Z2D = $call;
   $cond185 = $call;
   $cond9140 = $$pre;
   label = 6;
  }
 }
 if ((label | 0) == 4) {
  $2 = HEAP32[$cond184 + 4 >> 2] | 0;
  if (!$2) {
   $__left_2$pre$phi181Z2D = $__left_2$pre$phi183Z2D;
   $__parent_$i$pre$phiZZ2D = $cond184 + 8 | 0;
   $cmp10142 = 0;
   $cond186 = $cond184;
   $cond9141 = 0;
  } else {
   $__left_2$pre$phi182Z2D = $__left_2$pre$phi183Z2D;
   $cond185 = $cond184;
   $cond9140 = $2;
   label = 6;
  }
 }
 if ((label | 0) == 6) {
  $__parent_ = $cond185 + 8 | 0;
  HEAP32[$cond9140 + 8 >> 2] = HEAP32[$__parent_ >> 2];
  $__left_2$pre$phi181Z2D = $__left_2$pre$phi182Z2D;
  $__parent_$i$pre$phiZZ2D = $__parent_;
  $cmp10142 = 1;
  $cond186 = $cond185;
  $cond9141 = $cond9140;
 }
 $4 = HEAP32[$__parent_$i$pre$phiZZ2D >> 2] | 0;
 $5 = HEAP32[$4 >> 2] | 0;
 if (($5 | 0) == ($cond186 | 0)) {
  HEAP32[$4 >> 2] = $cond9141;
  if (($cond186 | 0) == ($__root | 0)) {
   $__root$addr$0 = $cond9141;
   $__w$0 = 0;
  } else {
   $__root$addr$0 = $__root;
   $__w$0 = HEAP32[$4 + 4 >> 2] | 0;
  }
 } else {
  HEAP32[$4 + 4 >> 2] = $cond9141;
  $__root$addr$0 = $__root;
  $__w$0 = $5;
 }
 $__is_black_ = $cond186 + 12 | 0;
 $tobool = (HEAP8[$__is_black_ >> 0] | 0) != 0;
 if (($cond186 | 0) == ($__z | 0)) $__root$addr$1 = $__root$addr$0; else {
  $__parent_30 = $__z + 8 | 0;
  $10 = HEAP32[$__parent_30 >> 2] | 0;
  HEAP32[$__parent_$i$pre$phiZZ2D >> 2] = $10;
  HEAP32[((HEAP32[HEAP32[$__parent_30 >> 2] >> 2] | 0) == ($__z | 0) ? $10 : $10 + 4 | 0) >> 2] = $cond186;
  $15 = HEAP32[$__z >> 2] | 0;
  HEAP32[$__left_2$pre$phi181Z2D >> 2] = $15;
  HEAP32[$15 + 8 >> 2] = $cond186;
  $16 = HEAP32[$__z + 4 >> 2] | 0;
  HEAP32[$cond186 + 4 >> 2] = $16;
  if ($16 | 0) HEAP32[$16 + 8 >> 2] = $cond186;
  HEAP8[$__is_black_ >> 0] = HEAP8[$__z + 12 >> 0] | 0;
  $__root$addr$1 = ($__root$addr$0 | 0) == ($__z | 0) ? $cond186 : $__root$addr$0;
 }
 L21 : do if ($tobool & ($__root$addr$1 | 0) != 0) {
  if ($cmp10142) {
   HEAP8[$cond9141 + 12 >> 0] = 1;
   break;
  }
  $__root$addr$2 = $__root$addr$1;
  $__w$1 = $__w$0;
  while (1) {
   $18 = HEAP32[$__w$1 + 8 >> 2] | 0;
   $__is_black_150 = $__w$1 + 12 | 0;
   $tobool151 = (HEAP8[$__is_black_150 >> 0] | 0) != 0;
   if ((HEAP32[$18 >> 2] | 0) == ($__w$1 | 0)) {
    if ($tobool151) {
     $__root$addr$6 = $__root$addr$2;
     $__w$4 = $__w$1;
    } else {
     HEAP8[$__is_black_150 >> 0] = 1;
     HEAP8[$18 + 12 >> 0] = 0;
     __ZNSt3__219__tree_right_rotateIPNS_16__tree_node_baseIPvEEEEvT_($18);
     $34 = HEAP32[$__w$1 + 4 >> 2] | 0;
     $__root$addr$6 = ($__root$addr$2 | 0) == ($34 | 0) ? $__w$1 : $__root$addr$2;
     $__w$4 = HEAP32[$34 >> 2] | 0;
    }
    $36 = HEAP32[$__w$4 >> 2] | 0;
    $cmp167 = ($36 | 0) == 0;
    if (!$cmp167) if (!(HEAP8[$36 + 12 >> 0] | 0)) {
     label = 45;
     break;
    }
    $38 = HEAP32[$__w$4 + 4 >> 2] | 0;
    if ($38 | 0) if (!(HEAP8[$38 + 12 >> 0] | 0)) {
     label = 41;
     break;
    }
    HEAP8[$__w$4 + 12 >> 0] = 0;
    $40 = HEAP32[$__w$4 + 8 >> 2] | 0;
    if (($40 | 0) == ($__root$addr$6 | 0) | (HEAP8[$40 + 12 >> 0] | 0) == 0) {
     label = 40;
     break;
    } else {
     $$sink = $40;
     $__root$addr$7 = $__root$addr$6;
    }
   } else {
    if ($tobool151) {
     $__root$addr$4 = $__root$addr$2;
     $__w$2 = $__w$1;
    } else {
     HEAP8[$__is_black_150 >> 0] = 1;
     HEAP8[$18 + 12 >> 0] = 0;
     __ZNSt3__218__tree_left_rotateIPNS_16__tree_node_baseIPvEEEEvT_($18);
     $21 = HEAP32[$__w$1 >> 2] | 0;
     $__root$addr$4 = ($__root$addr$2 | 0) == ($21 | 0) ? $__w$1 : $__root$addr$2;
     $__w$2 = HEAP32[$21 + 4 >> 2] | 0;
    }
    $23 = HEAP32[$__w$2 >> 2] | 0;
    if ($23 | 0) if (!(HEAP8[$23 + 12 >> 0] | 0)) {
     label = 29;
     break;
    }
    $25 = HEAP32[$__w$2 + 4 >> 2] | 0;
    if ($25 | 0) if (!(HEAP8[$25 + 12 >> 0] | 0)) {
     $29 = $25;
     label = 30;
     break;
    }
    HEAP8[$__w$2 + 12 >> 0] = 0;
    $27 = HEAP32[$__w$2 + 8 >> 2] | 0;
    if (($27 | 0) == ($__root$addr$4 | 0)) {
     $__root$addr$4$lcssa194$pn = $__root$addr$4;
     label = 28;
     break;
    }
    if (!(HEAP8[$27 + 12 >> 0] | 0)) {
     $__root$addr$4$lcssa194$pn = $27;
     label = 28;
     break;
    } else {
     $$sink = $27;
     $__root$addr$7 = $__root$addr$4;
    }
   }
   $45 = HEAP32[$$sink + 8 >> 2] | 0;
   $__root$addr$2 = $__root$addr$7;
   $__w$1 = HEAP32[((HEAP32[$45 >> 2] | 0) == ($$sink | 0) ? $45 + 4 | 0 : $45) >> 2] | 0;
  }
  do if ((label | 0) == 28) {
   HEAP8[$__root$addr$4$lcssa194$pn + 12 >> 0] = 1;
   break L21;
  } else if ((label | 0) == 29) {
   $$pre170 = HEAP32[$__w$2 + 4 >> 2] | 0;
   if (!$$pre170) label = 31; else {
    $29 = $$pre170;
    label = 30;
   }
  } else if ((label | 0) == 40) {
   HEAP8[$40 + 12 >> 0] = 1;
   break L21;
  } else if ((label | 0) == 41) {
   if ($cmp167) $$pre173$pn = $38; else {
    $__is_black_205$phi$trans$insert = $36 + 12 | 0;
    if (!(HEAP8[$__is_black_205$phi$trans$insert >> 0] | 0)) {
     $__is_black_224$pre$phiZ2D = $__is_black_205$phi$trans$insert;
     $__w$5 = $__w$4;
     label = 46;
     break;
    }
    $$pre173$pn = HEAP32[$__w$4 + 4 >> 2] | 0;
   }
   HEAP8[$$pre173$pn + 12 >> 0] = 1;
   HEAP8[$__w$4 + 12 >> 0] = 0;
   __ZNSt3__218__tree_left_rotateIPNS_16__tree_node_baseIPvEEEEvT_($__w$4);
   $42 = HEAP32[$__w$4 + 8 >> 2] | 0;
   $__is_black_224$pre$phiZ2D = (HEAP32[$42 >> 2] | 0) + 12 | 0;
   $__w$5 = $42;
   label = 46;
  } else if ((label | 0) == 45) {
   $__is_black_224$pre$phiZ2D = $36 + 12 | 0;
   $__w$5 = $__w$4;
   label = 46;
  } while (0);
  if ((label | 0) == 30) {
   $__is_black_126 = $29 + 12 | 0;
   if (!(HEAP8[$__is_black_126 >> 0] | 0)) {
    $__is_black_145$pre$phiZ2D = $__is_black_126;
    $__w$3 = $__w$2;
   } else label = 31;
  } else if ((label | 0) == 46) {
   $43 = HEAP32[$__w$5 + 8 >> 2] | 0;
   $__is_black_216 = $43 + 12 | 0;
   HEAP8[$__w$5 + 12 >> 0] = HEAP8[$__is_black_216 >> 0] | 0;
   HEAP8[$__is_black_216 >> 0] = 1;
   HEAP8[$__is_black_224$pre$phiZ2D >> 0] = 1;
   __ZNSt3__219__tree_right_rotateIPNS_16__tree_node_baseIPvEEEEvT_($43);
   break;
  }
  if ((label | 0) == 31) {
   HEAP8[$23 + 12 >> 0] = 1;
   HEAP8[$__w$2 + 12 >> 0] = 0;
   __ZNSt3__219__tree_right_rotateIPNS_16__tree_node_baseIPvEEEEvT_($__w$2);
   $31 = HEAP32[$__w$2 + 8 >> 2] | 0;
   $__is_black_145$pre$phiZ2D = (HEAP32[$31 + 4 >> 2] | 0) + 12 | 0;
   $__w$3 = $31;
  }
  $32 = HEAP32[$__w$3 + 8 >> 2] | 0;
  $__is_black_137 = $32 + 12 | 0;
  HEAP8[$__w$3 + 12 >> 0] = HEAP8[$__is_black_137 >> 0] | 0;
  HEAP8[$__is_black_137 >> 0] = 1;
  HEAP8[$__is_black_145$pre$phiZ2D >> 0] = 1;
  __ZNSt3__218__tree_left_rotateIPNS_16__tree_node_baseIPvEEEEvT_($32);
 } while (0);
 return;
}

function __ZN8nlohmann6detail6parserINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE17exception_messageENS0_5lexerISD_E10token_typeERKSB_($agg$result, $this, $expected, $context) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $expected = $expected | 0;
 $context = $context | 0;
 var $0 = 0, $12 = 0, $15 = 0, $2 = 0, $5 = 0, $6 = 0, $9 = 0, $call$i2223 = 0, $call$i34 = 0, $call$i3839 = 0, $call$i5354 = 0, $call$i910 = 0, $call18 = 0, $call3$i$i21 = 0, $call47 = 0, $call64 = 0, $m_lexer = 0, $ref$tmp = 0, $ref$tmp16 = 0, $ref$tmp17 = 0, $ref$tmp2 = 0, $ref$tmp23 = 0, $tobool$i$i$i$i$i = 0, $tobool$i$i$i$i$i14 = 0, $tobool$i$i$i$i$i27 = 0, $tobool$i$i$i$i$i42 = 0, $tobool$i$i$i$i$i58 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64);
 $ref$tmp = sp + 48 | 0;
 $ref$tmp2 = sp + 36 | 0;
 $ref$tmp16 = sp + 24 | 0;
 $ref$tmp17 = sp + 12 | 0;
 $ref$tmp23 = sp;
 HEAP32[$agg$result >> 2] = 0;
 HEAP32[$agg$result + 4 >> 2] = 0;
 HEAP32[$agg$result + 8 >> 2] = 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcm($agg$result, 24372, __ZNSt3__211char_traitsIcE6lengthEPKc(24372) | 0);
 $0 = HEAP8[$context + 11 >> 0] | 0;
 if (($0 << 24 >> 24 < 0 ? HEAP32[$context + 4 >> 2] | 0 : $0 & 255) | 0) {
  __ZNSt3__2plIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_12basic_stringIT_T0_T1_EEPKS6_RKS9_($ref$tmp2, 24386, $context);
  $call$i34 = __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc($ref$tmp2, 24401) | 0;
  HEAP32[$ref$tmp >> 2] = HEAP32[$call$i34 >> 2];
  HEAP32[$ref$tmp + 4 >> 2] = HEAP32[$call$i34 + 4 >> 2];
  HEAP32[$ref$tmp + 8 >> 2] = HEAP32[$call$i34 + 8 >> 2];
  HEAP32[$call$i34 >> 2] = 0;
  HEAP32[$call$i34 + 4 >> 2] = 0;
  HEAP32[$call$i34 + 8 >> 2] = 0;
  $2 = HEAP8[$ref$tmp + 11 >> 0] | 0;
  $tobool$i$i$i$i$i = $2 << 24 >> 24 < 0;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcm($agg$result, $tobool$i$i$i$i$i ? HEAP32[$ref$tmp >> 2] | 0 : $ref$tmp, $tobool$i$i$i$i$i ? HEAP32[$ref$tmp + 4 >> 2] | 0 : $2 & 255) | 0;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp);
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp2);
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc($agg$result, 24403) | 0;
 $5 = HEAP32[$this + 16 >> 2] | 0;
 if (($5 | 0) == 14) {
  $m_lexer = $this + 24 | 0;
  $call18 = __ZNK8nlohmann6detail5lexerINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE17get_error_messageEv($m_lexer) | 0;
  HEAP32[$ref$tmp17 >> 2] = 0;
  HEAP32[$ref$tmp17 + 4 >> 2] = 0;
  HEAP32[$ref$tmp17 + 8 >> 2] = 0;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcm($ref$tmp17, $call18, __ZNSt3__211char_traitsIcE6lengthEPKc($call18) | 0);
  $call$i910 = __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc($ref$tmp17, 24406) | 0;
  HEAP32[$ref$tmp16 >> 2] = HEAP32[$call$i910 >> 2];
  HEAP32[$ref$tmp16 + 4 >> 2] = HEAP32[$call$i910 + 4 >> 2];
  HEAP32[$ref$tmp16 + 8 >> 2] = HEAP32[$call$i910 + 8 >> 2];
  HEAP32[$call$i910 >> 2] = 0;
  HEAP32[$call$i910 + 4 >> 2] = 0;
  HEAP32[$call$i910 + 8 >> 2] = 0;
  __ZNK8nlohmann6detail5lexerINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE16get_token_stringEv($ref$tmp23, $m_lexer);
  $6 = HEAP8[$ref$tmp23 + 11 >> 0] | 0;
  $tobool$i$i$i$i$i14 = $6 << 24 >> 24 < 0;
  $call3$i$i21 = __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcm($ref$tmp16, $tobool$i$i$i$i$i14 ? HEAP32[$ref$tmp23 >> 2] | 0 : $ref$tmp23, $tobool$i$i$i$i$i14 ? HEAP32[$ref$tmp23 + 4 >> 2] | 0 : $6 & 255) | 0;
  HEAP32[$ref$tmp2 >> 2] = HEAP32[$call3$i$i21 >> 2];
  HEAP32[$ref$tmp2 + 4 >> 2] = HEAP32[$call3$i$i21 + 4 >> 2];
  HEAP32[$ref$tmp2 + 8 >> 2] = HEAP32[$call3$i$i21 + 8 >> 2];
  HEAP32[$call3$i$i21 >> 2] = 0;
  HEAP32[$call3$i$i21 + 4 >> 2] = 0;
  HEAP32[$call3$i$i21 + 8 >> 2] = 0;
  $call$i2223 = __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc($ref$tmp2, 24095) | 0;
  HEAP32[$ref$tmp >> 2] = HEAP32[$call$i2223 >> 2];
  HEAP32[$ref$tmp + 4 >> 2] = HEAP32[$call$i2223 + 4 >> 2];
  HEAP32[$ref$tmp + 8 >> 2] = HEAP32[$call$i2223 + 8 >> 2];
  HEAP32[$call$i2223 >> 2] = 0;
  HEAP32[$call$i2223 + 4 >> 2] = 0;
  HEAP32[$call$i2223 + 8 >> 2] = 0;
  $9 = HEAP8[$ref$tmp + 11 >> 0] | 0;
  $tobool$i$i$i$i$i27 = $9 << 24 >> 24 < 0;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcm($agg$result, $tobool$i$i$i$i$i27 ? HEAP32[$ref$tmp >> 2] | 0 : $ref$tmp, $tobool$i$i$i$i$i27 ? HEAP32[$ref$tmp + 4 >> 2] | 0 : $9 & 255) | 0;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp);
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp2);
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp23);
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp16);
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp17);
 } else {
  $call47 = __ZN8nlohmann6detail5lexerINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE15token_type_nameENSE_10token_typeE($5) | 0;
  HEAP32[$ref$tmp2 >> 2] = 0;
  HEAP32[$ref$tmp2 + 4 >> 2] = 0;
  HEAP32[$ref$tmp2 + 8 >> 2] = 0;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcm($ref$tmp2, $call47, __ZNSt3__211char_traitsIcE6lengthEPKc($call47) | 0);
  $call$i3839 = __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6insertEmPKc($ref$tmp2, 0, 24421) | 0;
  HEAP32[$ref$tmp >> 2] = HEAP32[$call$i3839 >> 2];
  HEAP32[$ref$tmp + 4 >> 2] = HEAP32[$call$i3839 + 4 >> 2];
  HEAP32[$ref$tmp + 8 >> 2] = HEAP32[$call$i3839 + 8 >> 2];
  HEAP32[$call$i3839 >> 2] = 0;
  HEAP32[$call$i3839 + 4 >> 2] = 0;
  HEAP32[$call$i3839 + 8 >> 2] = 0;
  $12 = HEAP8[$ref$tmp + 11 >> 0] | 0;
  $tobool$i$i$i$i$i42 = $12 << 24 >> 24 < 0;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcm($agg$result, $tobool$i$i$i$i$i42 ? HEAP32[$ref$tmp >> 2] | 0 : $ref$tmp, $tobool$i$i$i$i$i42 ? HEAP32[$ref$tmp + 4 >> 2] | 0 : $12 & 255) | 0;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp);
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp2);
 }
 if ($expected | 0) {
  $call64 = __ZN8nlohmann6detail5lexerINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE15token_type_nameENSE_10token_typeE($expected) | 0;
  HEAP32[$ref$tmp2 >> 2] = 0;
  HEAP32[$ref$tmp2 + 4 >> 2] = 0;
  HEAP32[$ref$tmp2 + 8 >> 2] = 0;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcm($ref$tmp2, $call64, __ZNSt3__211char_traitsIcE6lengthEPKc($call64) | 0);
  $call$i5354 = __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6insertEmPKc($ref$tmp2, 0, 24433) | 0;
  HEAP32[$ref$tmp >> 2] = HEAP32[$call$i5354 >> 2];
  HEAP32[$ref$tmp + 4 >> 2] = HEAP32[$call$i5354 + 4 >> 2];
  HEAP32[$ref$tmp + 8 >> 2] = HEAP32[$call$i5354 + 8 >> 2];
  HEAP32[$call$i5354 >> 2] = 0;
  HEAP32[$call$i5354 + 4 >> 2] = 0;
  HEAP32[$call$i5354 + 8 >> 2] = 0;
  $15 = HEAP8[$ref$tmp + 11 >> 0] | 0;
  $tobool$i$i$i$i$i58 = $15 << 24 >> 24 < 0;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcm($agg$result, $tobool$i$i$i$i$i58 ? HEAP32[$ref$tmp >> 2] | 0 : $ref$tmp, $tobool$i$i$i$i$i58 ? HEAP32[$ref$tmp + 4 >> 2] | 0 : $15 & 255) | 0;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp);
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp2);
 }
 STACKTOP = sp;
 return;
}

function __ZNSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8nlohmann10basic_jsonINS_3mapENS_6vectorES7_bxydS5_NS8_14adl_serializerEEEEENS_19__map_value_compareIS7_SE_NS_4lessIvEELb1EEENS5_ISE_EEE12__find_equalIS7_EERPNS_16__tree_node_baseIPvEENS_21__tree_const_iteratorISE_PNS_11__tree_nodeISE_SN_EElEERPNS_15__tree_end_nodeISP_EESQ_RKT_($this, $__hint, $__parent, $__dummy, $__v) {
 $this = $this | 0;
 $__hint = $__hint | 0;
 $__parent = $__parent | 0;
 $__dummy = $__dummy | 0;
 $__v = $__v | 0;
 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $15 = 0, $19 = 0, $2 = 0, $20 = 0, $22 = 0, $23 = 0, $25 = 0, $6 = 0, $7 = 0, $__cc$i$i42 = 0, $__parent_$i410$i$i$i$i$i = 0, $__parent_$i47$i$i$i$i$i = 0, $__prior$sroa$0$0 = 0, $__value_$i$i$i$i = 0, $__x$addr$0$i$i$i = 0, $__x$addr$0$i$i$i$i$i$i = 0, $__xx$0$in$i$i = 0, $call$i$i$i = 0, $call$i$i$i26 = 0, $call$i$i$i43 = 0, $call$i$i$i71 = 0, $cond$i$i$i$i$i$i = 0, $cond$i$i$i$i$i$i35 = 0, $cond$i$i$i$i$i$i52 = 0, $cond$i$i$i$i$i$i81 = 0, $ref$tmp$i$i$i$i69 = 0, $retval$0$i$i = 0, $retval$0$i$i$i$i$i = 0, $retval$2 = 0, $tobool$i$i$i$i$i$i$i$i = 0, $tobool$i$i$i$i$i$i$i$i29 = 0, $tobool$i$i$i$i$i$i$i$i46 = 0, $tobool$i$i$i$i$i$i$i$i75 = 0, label = 0, sp = 0, $__xx$0$in$i$i$looptemp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $ref$tmp$i$i$i$i69 = sp;
 $__value_$i$i$i$i = $this + 4 | 0;
 $0 = HEAP32[$__hint >> 2] | 0;
 $1 = $0;
 do if (($0 | 0) == ($__value_$i$i$i$i | 0)) label = 3; else {
  $__cc$i$i42 = $0 + 16 | 0;
  $call$i$i$i43 = __ZNSt3__29__launderIKNS_4pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8nlohmann10basic_jsonINS_3mapENS_6vectorES7_bxydS5_NS9_14adl_serializerEEEEEEEPT_SI_($__cc$i$i42) | 0;
  $2 = HEAP8[$call$i$i$i43 + 11 >> 0] | 0;
  $tobool$i$i$i$i$i$i$i$i46 = $2 << 24 >> 24 < 0;
  $cond$i$i$i$i$i$i52 = $tobool$i$i$i$i$i$i$i$i46 ? HEAP32[$call$i$i$i43 + 4 >> 2] | 0 : $2 & 255;
  HEAP32[$ref$tmp$i$i$i$i69 >> 2] = $tobool$i$i$i$i$i$i$i$i46 ? HEAP32[$call$i$i$i43 >> 2] | 0 : $call$i$i$i43;
  HEAP32[$ref$tmp$i$i$i$i69 + 4 >> 2] = $cond$i$i$i$i$i$i52;
  if ((__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareINS_17basic_string_viewIcS2_EEEENS_9enable_ifIXsr33__can_be_converted_to_string_viewIcS2_T_EE5valueEiE4typeERKSA_($__v, $ref$tmp$i$i$i$i69) | 0) < 0) label = 3; else {
   $call$i$i$i26 = __ZNSt3__29__launderIKNS_4pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8nlohmann10basic_jsonINS_3mapENS_6vectorES7_bxydS5_NS9_14adl_serializerEEEEEEEPT_SI_($__cc$i$i42) | 0;
   $15 = HEAP8[$__v + 11 >> 0] | 0;
   $tobool$i$i$i$i$i$i$i$i29 = $15 << 24 >> 24 < 0;
   $cond$i$i$i$i$i$i35 = $tobool$i$i$i$i$i$i$i$i29 ? HEAP32[$__v + 4 >> 2] | 0 : $15 & 255;
   HEAP32[$ref$tmp$i$i$i$i69 >> 2] = $tobool$i$i$i$i$i$i$i$i29 ? HEAP32[$__v >> 2] | 0 : $__v;
   HEAP32[$ref$tmp$i$i$i$i69 + 4 >> 2] = $cond$i$i$i$i$i$i35;
   if ((__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareINS_17basic_string_viewIcS2_EEEENS_9enable_ifIXsr33__can_be_converted_to_string_viewIcS2_T_EE5valueEiE4typeERKSA_($call$i$i$i26, $ref$tmp$i$i$i$i69) | 0) >= 0) {
    HEAP32[$__parent >> 2] = $1;
    HEAP32[$__dummy >> 2] = $1;
    $retval$2 = $__dummy;
    break;
   }
   $$pre = HEAP32[$0 + 4 >> 2] | 0;
   if (!$$pre) {
    $__parent_$i47$i$i$i$i$i = $0 + 8 | 0;
    $20 = HEAP32[$__parent_$i47$i$i$i$i$i >> 2] | 0;
    if ((HEAP32[$20 >> 2] | 0) == ($0 | 0)) $retval$0$i$i$i$i$i = $20; else {
     $__parent_$i410$i$i$i$i$i = $__parent_$i47$i$i$i$i$i;
     do {
      $22 = HEAP32[$__parent_$i410$i$i$i$i$i >> 2] | 0;
      $__parent_$i410$i$i$i$i$i = $22 + 8 | 0;
      $23 = HEAP32[$__parent_$i410$i$i$i$i$i >> 2] | 0;
     } while ((HEAP32[$23 >> 2] | 0) != ($22 | 0));
     $retval$0$i$i$i$i$i = $23;
    }
   } else {
    $__x$addr$0$i$i$i$i$i$i = $$pre;
    while (1) {
     $19 = HEAP32[$__x$addr$0$i$i$i$i$i$i >> 2] | 0;
     if (!$19) break; else $__x$addr$0$i$i$i$i$i$i = $19;
    }
    $retval$0$i$i$i$i$i = $__x$addr$0$i$i$i$i$i$i;
   }
   if (($retval$0$i$i$i$i$i | 0) != ($__value_$i$i$i$i | 0)) {
    $call$i$i$i = __ZNSt3__29__launderIKNS_4pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8nlohmann10basic_jsonINS_3mapENS_6vectorES7_bxydS5_NS9_14adl_serializerEEEEEEEPT_SI_($retval$0$i$i$i$i$i + 16 | 0) | 0;
    $25 = HEAP8[$call$i$i$i + 11 >> 0] | 0;
    $tobool$i$i$i$i$i$i$i$i = $25 << 24 >> 24 < 0;
    $cond$i$i$i$i$i$i = $tobool$i$i$i$i$i$i$i$i ? HEAP32[$call$i$i$i + 4 >> 2] | 0 : $25 & 255;
    HEAP32[$ref$tmp$i$i$i$i69 >> 2] = $tobool$i$i$i$i$i$i$i$i ? HEAP32[$call$i$i$i >> 2] | 0 : $call$i$i$i;
    HEAP32[$ref$tmp$i$i$i$i69 + 4 >> 2] = $cond$i$i$i$i$i$i;
    if ((__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareINS_17basic_string_viewIcS2_EEEENS_9enable_ifIXsr33__can_be_converted_to_string_viewIcS2_T_EE5valueEiE4typeERKSA_($__v, $ref$tmp$i$i$i$i69) | 0) >= 0) {
     $retval$2 = __ZNSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8nlohmann10basic_jsonINS_3mapENS_6vectorES7_bxydS5_NS8_14adl_serializerEEEEENS_19__map_value_compareIS7_SE_NS_4lessIvEELb1EEENS5_ISE_EEE12__find_equalIS7_EERPNS_16__tree_node_baseIPvEERPNS_15__tree_end_nodeISP_EERKT_($this, $__parent, $__v) | 0;
     break;
    }
   }
   if (!(HEAP32[$0 + 4 >> 2] | 0)) {
    HEAP32[$__parent >> 2] = $1;
    $retval$2 = $0 + 4 | 0;
    break;
   } else {
    HEAP32[$__parent >> 2] = $retval$0$i$i$i$i$i;
    $retval$2 = $retval$0$i$i$i$i$i;
    break;
   }
  }
 } while (0);
 do if ((label | 0) == 3) {
  if ((HEAP32[$this >> 2] | 0) == ($0 | 0)) $__prior$sroa$0$0 = $1; else {
   $6 = HEAP32[$0 >> 2] | 0;
   if (!$6) {
    $__xx$0$in$i$i = $0;
    do {
     $__xx$0$in$i$i$looptemp = $__xx$0$in$i$i;
     $__xx$0$in$i$i = HEAP32[$__xx$0$in$i$i + 8 >> 2] | 0;
    } while ((HEAP32[$__xx$0$in$i$i >> 2] | 0) == ($__xx$0$in$i$i$looptemp | 0));
    $retval$0$i$i = $__xx$0$in$i$i;
   } else {
    $__x$addr$0$i$i$i = $6;
    while (1) {
     $7 = HEAP32[$__x$addr$0$i$i$i + 4 >> 2] | 0;
     if (!$7) {
      $retval$0$i$i = $__x$addr$0$i$i$i;
      break;
     } else $__x$addr$0$i$i$i = $7;
    }
   }
   $call$i$i$i71 = __ZNSt3__29__launderIKNS_4pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8nlohmann10basic_jsonINS_3mapENS_6vectorES7_bxydS5_NS9_14adl_serializerEEEEEEEPT_SI_($retval$0$i$i + 16 | 0) | 0;
   $10 = HEAP8[$__v + 11 >> 0] | 0;
   $tobool$i$i$i$i$i$i$i$i75 = $10 << 24 >> 24 < 0;
   $cond$i$i$i$i$i$i81 = $tobool$i$i$i$i$i$i$i$i75 ? HEAP32[$__v + 4 >> 2] | 0 : $10 & 255;
   HEAP32[$ref$tmp$i$i$i$i69 >> 2] = $tobool$i$i$i$i$i$i$i$i75 ? HEAP32[$__v >> 2] | 0 : $__v;
   HEAP32[$ref$tmp$i$i$i$i69 + 4 >> 2] = $cond$i$i$i$i$i$i81;
   if ((__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareINS_17basic_string_viewIcS2_EEEENS_9enable_ifIXsr33__can_be_converted_to_string_viewIcS2_T_EE5valueEiE4typeERKSA_($call$i$i$i71, $ref$tmp$i$i$i$i69) | 0) < 0) $__prior$sroa$0$0 = $retval$0$i$i; else {
    $retval$2 = __ZNSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8nlohmann10basic_jsonINS_3mapENS_6vectorES7_bxydS5_NS8_14adl_serializerEEEEENS_19__map_value_compareIS7_SE_NS_4lessIvEELb1EEENS5_ISE_EEE12__find_equalIS7_EERPNS_16__tree_node_baseIPvEERPNS_15__tree_end_nodeISP_EERKT_($this, $__parent, $__v) | 0;
    break;
   }
  }
  if (!(HEAP32[$0 >> 2] | 0)) {
   HEAP32[$__parent >> 2] = $0;
   $retval$2 = $0;
   break;
  } else {
   HEAP32[$__parent >> 2] = $__prior$sroa$0$0;
   $retval$2 = $__prior$sroa$0$0 + 4 | 0;
   break;
  }
 } while (0);
 STACKTOP = sp;
 return $retval$2 | 0;
}
function __ZNSt3__29__num_putIwE23__widen_and_group_floatEPcS2_S2_PwRS3_S4_RKNS_6localeE($__nb, $__np, $__ne, $__ob, $__op, $__oe, $__loc) {
 $__nb = $__nb | 0;
 $__np = $__np | 0;
 $__ne = $__ne | 0;
 $__ob = $__ob | 0;
 $__op = $__op | 0;
 $__oe = $__oe | 0;
 $__loc = $__loc | 0;
 var $$pre$phiZ2D = 0, $1 = 0, $10 = 0, $13 = 0, $18 = 0, $21 = 0, $22 = 0, $26 = 0, $27 = 0, $28 = 0, $3 = 0, $32 = 0, $33 = 0, $35 = 0, $37 = 0, $39 = 0, $41 = 0, $42 = 0, $7 = 0, $__dc$0 = 0, $__dc$1 = 0, $__dg$0 = 0, $__dg$1 = 0, $__first$addr$0$i$i = 0, $__first$addr$0$i$i102 = 0, $__grouping = 0, $__last$addr$0$i$i = 0, $__last$addr$0$i$i103 = 0, $__nf$0 = 0, $__nf$1 = 0, $__nf$2 = 0, $__nf$3 = 0, $__ns$0 = 0, $__ns$1 = 0, $__ns$2 = 0, $__p$0 = 0, $__size_$i$i$i = 0, $__size_$i3$i$i = 0, $add$ptr = 0, $add$ptr100 = 0, $add$ptr78 = 0, $arrayidx10 = 0, $call$i = 0, $call$i111 = 0, $call$i120 = 0, $call$i133 = 0, $call$i81 = 0, $call$i84 = 0, $call$i87 = 0, $call$i90 = 0, $call$i99 = 0, $conv25 = 0, $conv34 = 0, $incdec$ptr$i$i = 0, $incdec$ptr$i$i104 = 0, $incdec$ptr21 = 0, $incdec$ptr87 = 0, $incdec$ptr91 = 0, $sub$ptr$lhs$cast = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $__grouping = sp;
 $call$i = __ZNKSt3__26locale9use_facetERNS0_2idE($__loc, 61248) | 0;
 $call$i81 = __ZNKSt3__26locale9use_facetERNS0_2idE($__loc, 61256) | 0;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[$call$i81 >> 2] | 0) + 20 >> 2] & 127]($__grouping, $call$i81);
 HEAP32[$__oe >> 2] = $__ob;
 $1 = HEAP8[$__nb >> 0] | 0;
 switch ($1 << 24 >> 24) {
 case 43:
 case 45:
  {
   $call$i84 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$call$i >> 2] | 0) + 44 >> 2] & 31]($call$i, $1) | 0;
   $3 = HEAP32[$__oe >> 2] | 0;
   HEAP32[$__oe >> 2] = $3 + 4;
   HEAP32[$3 >> 2] = $call$i84;
   $__nf$0 = $__nb + 1 | 0;
   break;
  }
 default:
  $__nf$0 = $__nb;
 }
 $sub$ptr$lhs$cast = $__ne;
 L4 : do if (($sub$ptr$lhs$cast - $__nf$0 | 0) > 1) if ((HEAP8[$__nf$0 >> 0] | 0) == 48) {
  $arrayidx10 = $__nf$0 + 1 | 0;
  switch (HEAP8[$arrayidx10 >> 0] | 0) {
  case 88:
  case 120:
   break;
  default:
   {
    label = 4;
    break L4;
   }
  }
  $call$i87 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$call$i >> 2] | 0) + 44 >> 2] & 31]($call$i, 48) | 0;
  $7 = HEAP32[$__oe >> 2] | 0;
  HEAP32[$__oe >> 2] = $7 + 4;
  HEAP32[$7 >> 2] = $call$i87;
  $incdec$ptr21 = $__nf$0 + 2 | 0;
  $call$i90 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$call$i >> 2] | 0) + 44 >> 2] & 31]($call$i, HEAP8[$arrayidx10 >> 0] | 0) | 0;
  $10 = HEAP32[$__oe >> 2] | 0;
  HEAP32[$__oe >> 2] = $10 + 4;
  HEAP32[$10 >> 2] = $call$i90;
  $__ns$0 = $incdec$ptr21;
  while (1) {
   if ($__ns$0 >>> 0 >= $__ne >>> 0) {
    $__nf$1 = $incdec$ptr21;
    $__ns$2 = $__ns$0;
    break L4;
   }
   $conv25 = HEAP8[$__ns$0 >> 0] | 0;
   if (!(_isxdigit_l($conv25, __ZNSt3__26__clocEv() | 0) | 0)) {
    $__nf$1 = $incdec$ptr21;
    $__ns$2 = $__ns$0;
    break L4;
   }
   $__ns$0 = $__ns$0 + 1 | 0;
  }
 } else label = 4; else label = 4; while (0);
 L12 : do if ((label | 0) == 4) {
  $__ns$1 = $__nf$0;
  while (1) {
   if ($__ns$1 >>> 0 >= $__ne >>> 0) {
    $__nf$1 = $__nf$0;
    $__ns$2 = $__ns$1;
    break L12;
   }
   $conv34 = HEAP8[$__ns$1 >> 0] | 0;
   if (!(_isdigit_l($conv34, __ZNSt3__26__clocEv() | 0) | 0)) {
    $__nf$1 = $__nf$0;
    $__ns$2 = $__ns$1;
    break L12;
   }
   $__ns$1 = $__ns$1 + 1 | 0;
  }
 } while (0);
 $__size_$i$i$i = $__grouping + 11 | 0;
 $13 = HEAP8[$__size_$i$i$i >> 0] | 0;
 $__size_$i3$i$i = $__grouping + 4 | 0;
 L19 : do if (!(($13 << 24 >> 24 < 0 ? HEAP32[$__size_$i3$i$i >> 2] | 0 : $13 & 255) | 0)) {
  FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[$call$i >> 2] | 0) + 48 >> 2] & 15]($call$i, $__nf$1, $__ns$2, HEAP32[$__oe >> 2] | 0) | 0;
  $add$ptr = (HEAP32[$__oe >> 2] | 0) + ($__ns$2 - $__nf$1 << 2) | 0;
  HEAP32[$__oe >> 2] = $add$ptr;
  $$pre$phiZ2D = $call$i;
  $41 = $add$ptr;
 } else {
  L22 : do if (($__nf$1 | 0) != ($__ns$2 | 0)) {
   $__first$addr$0$i$i = $__nf$1;
   $__last$addr$0$i$i = $__ns$2;
   while (1) {
    $incdec$ptr$i$i = $__last$addr$0$i$i + -1 | 0;
    if ($__first$addr$0$i$i >>> 0 >= $incdec$ptr$i$i >>> 0) break L22;
    $18 = HEAP8[$__first$addr$0$i$i >> 0] | 0;
    HEAP8[$__first$addr$0$i$i >> 0] = HEAP8[$incdec$ptr$i$i >> 0] | 0;
    HEAP8[$incdec$ptr$i$i >> 0] = $18;
    $__first$addr$0$i$i = $__first$addr$0$i$i + 1 | 0;
    $__last$addr$0$i$i = $incdec$ptr$i$i;
   }
  } while (0);
  $call$i99 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$call$i81 >> 2] | 0) + 16 >> 2] & 127]($call$i81) | 0;
  $__dc$0 = 0;
  $__dg$0 = 0;
  $__p$0 = $__nf$1;
  while (1) {
   if ($__p$0 >>> 0 >= $__ns$2 >>> 0) break;
   $26 = HEAP8[((HEAP8[$__size_$i$i$i >> 0] | 0) < 0 ? HEAP32[$__grouping >> 2] | 0 : $__grouping) + $__dg$0 >> 0] | 0;
   if ($26 << 24 >> 24 > 0 & ($__dc$0 | 0) == ($26 << 24 >> 24 | 0)) {
    $27 = HEAP32[$__oe >> 2] | 0;
    HEAP32[$__oe >> 2] = $27 + 4;
    HEAP32[$27 >> 2] = $call$i99;
    $28 = HEAP8[$__size_$i$i$i >> 0] | 0;
    $__dc$1 = 0;
    $__dg$1 = $__dg$0 + ($__dg$0 >>> 0 < (($28 << 24 >> 24 < 0 ? HEAP32[$__size_$i3$i$i >> 2] | 0 : $28 & 255) + -1 | 0) >>> 0 & 1) | 0;
   } else {
    $__dc$1 = $__dc$0;
    $__dg$1 = $__dg$0;
   }
   $call$i133 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$call$i >> 2] | 0) + 44 >> 2] & 31]($call$i, HEAP8[$__p$0 >> 0] | 0) | 0;
   $32 = HEAP32[$__oe >> 2] | 0;
   HEAP32[$__oe >> 2] = $32 + 4;
   HEAP32[$32 >> 2] = $call$i133;
   $__dc$0 = $__dc$1 + 1 | 0;
   $__dg$0 = $__dg$1;
   $__p$0 = $__p$0 + 1 | 0;
  }
  $add$ptr78 = $__ob + ($__nf$1 - $__nb << 2) | 0;
  $21 = HEAP32[$__oe >> 2] | 0;
  if (($add$ptr78 | 0) == ($21 | 0)) {
   $$pre$phiZ2D = $call$i;
   $41 = $add$ptr78;
  } else {
   $__first$addr$0$i$i102 = $add$ptr78;
   $__last$addr$0$i$i103 = $21;
   while (1) {
    $incdec$ptr$i$i104 = $__last$addr$0$i$i103 + -4 | 0;
    if ($__first$addr$0$i$i102 >>> 0 >= $incdec$ptr$i$i104 >>> 0) {
     $$pre$phiZ2D = $call$i;
     $41 = $21;
     break L19;
    }
    $22 = HEAP32[$__first$addr$0$i$i102 >> 2] | 0;
    HEAP32[$__first$addr$0$i$i102 >> 2] = HEAP32[$incdec$ptr$i$i104 >> 2];
    HEAP32[$incdec$ptr$i$i104 >> 2] = $22;
    $__first$addr$0$i$i102 = $__first$addr$0$i$i102 + 4 | 0;
    $__last$addr$0$i$i103 = $incdec$ptr$i$i104;
   }
  }
 } while (0);
 $42 = $41;
 $__nf$2 = $__ns$2;
 while (1) {
  if ($__nf$2 >>> 0 >= $__ne >>> 0) {
   $39 = $42;
   $__nf$3 = $__nf$2;
   break;
  }
  $33 = HEAP8[$__nf$2 >> 0] | 0;
  if ($33 << 24 >> 24 == 46) {
   label = 32;
   break;
  }
  $call$i111 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$$pre$phiZ2D >> 2] | 0) + 44 >> 2] & 31]($call$i, $33) | 0;
  $37 = HEAP32[$__oe >> 2] | 0;
  $incdec$ptr91 = $37 + 4 | 0;
  HEAP32[$__oe >> 2] = $incdec$ptr91;
  HEAP32[$37 >> 2] = $call$i111;
  $42 = $incdec$ptr91;
  $__nf$2 = $__nf$2 + 1 | 0;
 }
 if ((label | 0) == 32) {
  $call$i120 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$call$i81 >> 2] | 0) + 12 >> 2] & 127]($call$i81) | 0;
  $35 = HEAP32[$__oe >> 2] | 0;
  $incdec$ptr87 = $35 + 4 | 0;
  HEAP32[$__oe >> 2] = $incdec$ptr87;
  HEAP32[$35 >> 2] = $call$i120;
  $39 = $incdec$ptr87;
  $__nf$3 = $__nf$2 + 1 | 0;
 }
 FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[$call$i >> 2] | 0) + 48 >> 2] & 15]($call$i, $__nf$3, $__ne, $39) | 0;
 $add$ptr100 = (HEAP32[$__oe >> 2] | 0) + ($sub$ptr$lhs$cast - $__nf$3 << 2) | 0;
 HEAP32[$__oe >> 2] = $add$ptr100;
 HEAP32[$__op >> 2] = ($__np | 0) == ($__ne | 0) ? $add$ptr100 : $__ob + ($__np - $__nb << 2) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 STACKTOP = sp;
 return;
}

function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIfEES4_S4_S4_RNS_8ios_baseERjRT_($this, $__b, $__e, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$pre = 0, $10 = 0, $15 = 0, $21 = 0, $22 = 0, $28 = 0, $32 = 0, $35 = 0, $36 = 0, $39 = 0, $4 = 0, $41 = 0, $44 = 0, $45 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $9 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__cap_$i$i = 0, $__dc = 0, $__decimal_point = 0, $__einp_$i$i = 0, $__exp = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__i$0$i$i = 0, $__in_units = 0, $__ninp_$i$i = 0, $__size_$i$i = 0, $__size_$i3$i = 0, $__thousands_sep = 0, $cond$i = 0, $cond$i$i = 0, $cond$i$i90 = 0, $cond$i55 = 0, $cond$i81 = 0, $retval$0$i$i = 0, $retval$0$i$i$i$i = 0, $retval$0$i$i$i$i22 = 0, $retval$0$i$i13$i$i = 0, $retval$0$i$i13$i$i43 = 0, $retval$sroa$0$0$copyload = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 336 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(336);
 $__atoms = sp + 160 | 0;
 $__decimal_point = sp + 328 | 0;
 $__thousands_sep = sp + 324 | 0;
 $__grouping = sp + 312 | 0;
 $__buf = sp + 300 | 0;
 $__a_end = sp + 296 | 0;
 $__g = sp;
 $__g_end = sp + 292 | 0;
 $__dc = sp + 288 | 0;
 $__in_units = sp + 333 | 0;
 $__exp = sp + 332 | 0;
 __ZNSt3__29__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_($__grouping, $__iob, $__atoms, $__decimal_point, $__thousands_sep);
 HEAP32[$__buf >> 2] = 0;
 HEAP32[$__buf + 4 >> 2] = 0;
 HEAP32[$__buf + 8 >> 2] = 0;
 $__i$0$i$i = 0;
 while (1) {
  if (($__i$0$i$i | 0) == 3) break;
  HEAP32[$__buf + ($__i$0$i$i << 2) >> 2] = 0;
  $__i$0$i$i = $__i$0$i$i + 1 | 0;
 }
 $__size_$i$i = $__buf + 11 | 0;
 $__cap_$i$i = $__buf + 8 | 0;
 if ((HEAP8[$__size_$i$i >> 0] | 0) < 0) $cond$i = (HEAP32[$__cap_$i$i >> 2] & 2147483647) + -1 | 0; else $cond$i = 10;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($__buf, $cond$i, 0);
 $cond$i$i = (HEAP8[$__size_$i$i >> 0] | 0) < 0 ? HEAP32[$__buf >> 2] | 0 : $__buf;
 HEAP32[$__a_end >> 2] = $cond$i$i;
 HEAP32[$__g_end >> 2] = $__g;
 HEAP32[$__dc >> 2] = 0;
 HEAP8[$__in_units >> 0] = 1;
 HEAP8[$__exp >> 0] = 69;
 $__size_$i3$i = $__buf + 4 | 0;
 $$pre = HEAP32[$__b >> 2] | 0;
 $4 = $$pre;
 $50 = $$pre;
 $__a$0 = $cond$i$i;
 L8 : while (1) {
  if (!$4) {
   $21 = 0;
   $41 = 0;
   $51 = 1;
  } else {
   $5 = HEAP32[$4 + 12 >> 2] | 0;
   if (($5 | 0) == (HEAP32[$4 + 16 >> 2] | 0)) $retval$0$i$i$i$i22 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$4 >> 2] | 0) + 36 >> 2] & 127]($4) | 0; else $retval$0$i$i$i$i22 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$5 >> 2] | 0) | 0;
   if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i$i$i22, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
    HEAP32[$__b >> 2] = 0;
    $21 = 0;
    $41 = 0;
    $51 = 1;
   } else {
    $21 = $4;
    $41 = $50;
    $51 = 0;
   }
  }
  $9 = HEAP32[$__e >> 2] | 0;
  do if (!$9) label = 19; else {
   $10 = HEAP32[$9 + 12 >> 2] | 0;
   if (($10 | 0) == (HEAP32[$9 + 16 >> 2] | 0)) $retval$0$i$i13$i$i43 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$9 >> 2] | 0) + 36 >> 2] & 127]($9) | 0; else $retval$0$i$i13$i$i43 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$10 >> 2] | 0) | 0;
   if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i13$i$i43, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
    HEAP32[$__e >> 2] = 0;
    label = 19;
    break;
   } else if ($51) {
    $52 = $9;
    break;
   } else {
    $44 = $9;
    $__a$2 = $__a$0;
    break L8;
   }
  } while (0);
  if ((label | 0) == 19) {
   label = 0;
   if ($51) {
    $44 = 0;
    $__a$2 = $__a$0;
    break;
   } else $52 = 0;
  }
  $15 = HEAP8[$__size_$i$i >> 0] | 0;
  $cond$i55 = $15 << 24 >> 24 < 0 ? HEAP32[$__size_$i3$i >> 2] | 0 : $15 & 255;
  if ((HEAP32[$__a_end >> 2] | 0) == ($__a$0 + $cond$i55 | 0)) {
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($__buf, $cond$i55 << 1, 0);
   if ((HEAP8[$__size_$i$i >> 0] | 0) < 0) $cond$i81 = (HEAP32[$__cap_$i$i >> 2] & 2147483647) + -1 | 0; else $cond$i81 = 10;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($__buf, $cond$i81, 0);
   $cond$i$i90 = (HEAP8[$__size_$i$i >> 0] | 0) < 0 ? HEAP32[$__buf >> 2] | 0 : $__buf;
   HEAP32[$__a_end >> 2] = $cond$i$i90 + $cond$i55;
   $__a$1 = $cond$i$i90;
  } else $__a$1 = $__a$0;
  $__ninp_$i$i = $21 + 12 | 0;
  $22 = HEAP32[$__ninp_$i$i >> 2] | 0;
  $__einp_$i$i = $21 + 16 | 0;
  if (($22 | 0) == (HEAP32[$__einp_$i$i >> 2] | 0)) $retval$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$21 >> 2] | 0) + 36 >> 2] & 127]($21) | 0; else $retval$0$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$22 >> 2] | 0) | 0;
  if (__ZNSt3__29__num_getIwE19__stage2_float_loopEwRbRcPcRS4_wwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjPw($retval$0$i$i, $__in_units, $__exp, $__a$1, $__a_end, HEAP32[$__decimal_point >> 2] | 0, HEAP32[$__thousands_sep >> 2] | 0, $__grouping, $__g, $__g_end, $__dc, $__atoms) | 0) {
   $44 = $52;
   $__a$2 = $__a$1;
   break;
  }
  $28 = HEAP32[$__ninp_$i$i >> 2] | 0;
  if (($28 | 0) == (HEAP32[$__einp_$i$i >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[$21 >> 2] | 0) + 40 >> 2] & 127]($21) | 0; else {
   HEAP32[$__ninp_$i$i >> 2] = $28 + 4;
   __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$28 >> 2] | 0) | 0;
  }
  $4 = $21;
  $50 = $41;
  $__a$0 = $__a$1;
 }
 $32 = HEAP8[$__grouping + 11 >> 0] | 0;
 if (!((HEAP8[$__in_units >> 0] | 0) == 0 ? 1 : (($32 << 24 >> 24 < 0 ? HEAP32[$__grouping + 4 >> 2] | 0 : $32 & 255) | 0) == 0)) {
  $35 = HEAP32[$__g_end >> 2] | 0;
  if (($35 - $__g | 0) < 160) {
   $36 = HEAP32[$__dc >> 2] | 0;
   HEAP32[$__g_end >> 2] = $35 + 4;
   HEAP32[$35 >> 2] = $36;
  }
 }
 HEAPF32[$__v >> 2] = Math_fround(__ZNSt3__215__num_get_floatIfEET_PKcS3_Rj($__a$2, HEAP32[$__a_end >> 2] | 0, $__err));
 __ZNSt3__216__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping, $__g, HEAP32[$__g_end >> 2] | 0, $__err);
 if (!$21) $53 = 1; else {
  $39 = HEAP32[$21 + 12 >> 2] | 0;
  if (($39 | 0) == (HEAP32[$21 + 16 >> 2] | 0)) $retval$0$i$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$41 >> 2] | 0) + 36 >> 2] & 127]($21) | 0; else $retval$0$i$i$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$39 >> 2] | 0) | 0;
  if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i$i$i, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
   HEAP32[$__b >> 2] = 0;
   $53 = 1;
  } else $53 = 0;
 }
 do if (!$44) label = 48; else {
  $45 = HEAP32[$44 + 12 >> 2] | 0;
  if (($45 | 0) == (HEAP32[$44 + 16 >> 2] | 0)) $retval$0$i$i13$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$44 >> 2] | 0) + 36 >> 2] & 127]($44) | 0; else $retval$0$i$i13$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$45 >> 2] | 0) | 0;
  if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i13$i$i, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
   HEAP32[$__e >> 2] = 0;
   label = 48;
   break;
  } else if ($53) break; else {
   label = 50;
   break;
  }
 } while (0);
 if ((label | 0) == 48) if ($53) label = 50;
 if ((label | 0) == 50) HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
 $retval$sroa$0$0$copyload = HEAP32[$__b >> 2] | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 STACKTOP = sp;
 return $retval$sroa$0$0$copyload | 0;
}

function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIfEES4_S4_S4_RNS_8ios_baseERjRT_($this, $__b, $__e, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$pre = 0, $10 = 0, $15 = 0, $21 = 0, $22 = 0, $28 = 0, $32 = 0, $35 = 0, $36 = 0, $39 = 0, $4 = 0, $41 = 0, $44 = 0, $45 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $9 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__cap_$i$i = 0, $__dc = 0, $__decimal_point = 0, $__einp_$i$i = 0, $__exp = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__i$0$i$i = 0, $__in_units = 0, $__ninp_$i$i = 0, $__size_$i$i = 0, $__size_$i3$i = 0, $__thousands_sep = 0, $cond$i = 0, $cond$i$i = 0, $cond$i$i90 = 0, $cond$i55 = 0, $cond$i81 = 0, $retval$0$i$i = 0, $retval$0$i$i$i$i = 0, $retval$0$i$i$i$i22 = 0, $retval$0$i$i13$i$i = 0, $retval$0$i$i13$i$i43 = 0, $retval$sroa$0$0$copyload = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(240);
 $__atoms = sp + 160 | 0;
 $__decimal_point = sp + 231 | 0;
 $__thousands_sep = sp + 230 | 0;
 $__grouping = sp + 216 | 0;
 $__buf = sp + 204 | 0;
 $__a_end = sp + 200 | 0;
 $__g = sp;
 $__g_end = sp + 196 | 0;
 $__dc = sp + 192 | 0;
 $__in_units = sp + 229 | 0;
 $__exp = sp + 228 | 0;
 __ZNSt3__29__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_($__grouping, $__iob, $__atoms, $__decimal_point, $__thousands_sep);
 HEAP32[$__buf >> 2] = 0;
 HEAP32[$__buf + 4 >> 2] = 0;
 HEAP32[$__buf + 8 >> 2] = 0;
 $__i$0$i$i = 0;
 while (1) {
  if (($__i$0$i$i | 0) == 3) break;
  HEAP32[$__buf + ($__i$0$i$i << 2) >> 2] = 0;
  $__i$0$i$i = $__i$0$i$i + 1 | 0;
 }
 $__size_$i$i = $__buf + 11 | 0;
 $__cap_$i$i = $__buf + 8 | 0;
 if ((HEAP8[$__size_$i$i >> 0] | 0) < 0) $cond$i = (HEAP32[$__cap_$i$i >> 2] & 2147483647) + -1 | 0; else $cond$i = 10;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($__buf, $cond$i, 0);
 $cond$i$i = (HEAP8[$__size_$i$i >> 0] | 0) < 0 ? HEAP32[$__buf >> 2] | 0 : $__buf;
 HEAP32[$__a_end >> 2] = $cond$i$i;
 HEAP32[$__g_end >> 2] = $__g;
 HEAP32[$__dc >> 2] = 0;
 HEAP8[$__in_units >> 0] = 1;
 HEAP8[$__exp >> 0] = 69;
 $__size_$i3$i = $__buf + 4 | 0;
 $$pre = HEAP32[$__b >> 2] | 0;
 $4 = $$pre;
 $50 = $$pre;
 $__a$0 = $cond$i$i;
 L8 : while (1) {
  if (!$4) {
   $21 = 0;
   $41 = 0;
   $51 = 1;
  } else {
   $5 = HEAP32[$4 + 12 >> 2] | 0;
   if (($5 | 0) == (HEAP32[$4 + 16 >> 2] | 0)) $retval$0$i$i$i$i22 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$4 >> 2] | 0) + 36 >> 2] & 127]($4) | 0; else $retval$0$i$i$i$i22 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$5 >> 0] | 0) | 0;
   if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i$i$i22, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
    HEAP32[$__b >> 2] = 0;
    $21 = 0;
    $41 = 0;
    $51 = 1;
   } else {
    $21 = $4;
    $41 = $50;
    $51 = 0;
   }
  }
  $9 = HEAP32[$__e >> 2] | 0;
  do if (!$9) label = 19; else {
   $10 = HEAP32[$9 + 12 >> 2] | 0;
   if (($10 | 0) == (HEAP32[$9 + 16 >> 2] | 0)) $retval$0$i$i13$i$i43 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$9 >> 2] | 0) + 36 >> 2] & 127]($9) | 0; else $retval$0$i$i13$i$i43 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$10 >> 0] | 0) | 0;
   if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i13$i$i43, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
    HEAP32[$__e >> 2] = 0;
    label = 19;
    break;
   } else if ($51) {
    $52 = $9;
    break;
   } else {
    $44 = $9;
    $__a$2 = $__a$0;
    break L8;
   }
  } while (0);
  if ((label | 0) == 19) {
   label = 0;
   if ($51) {
    $44 = 0;
    $__a$2 = $__a$0;
    break;
   } else $52 = 0;
  }
  $15 = HEAP8[$__size_$i$i >> 0] | 0;
  $cond$i55 = $15 << 24 >> 24 < 0 ? HEAP32[$__size_$i3$i >> 2] | 0 : $15 & 255;
  if ((HEAP32[$__a_end >> 2] | 0) == ($__a$0 + $cond$i55 | 0)) {
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($__buf, $cond$i55 << 1, 0);
   if ((HEAP8[$__size_$i$i >> 0] | 0) < 0) $cond$i81 = (HEAP32[$__cap_$i$i >> 2] & 2147483647) + -1 | 0; else $cond$i81 = 10;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($__buf, $cond$i81, 0);
   $cond$i$i90 = (HEAP8[$__size_$i$i >> 0] | 0) < 0 ? HEAP32[$__buf >> 2] | 0 : $__buf;
   HEAP32[$__a_end >> 2] = $cond$i$i90 + $cond$i55;
   $__a$1 = $cond$i$i90;
  } else $__a$1 = $__a$0;
  $__ninp_$i$i = $21 + 12 | 0;
  $22 = HEAP32[$__ninp_$i$i >> 2] | 0;
  $__einp_$i$i = $21 + 16 | 0;
  if (($22 | 0) == (HEAP32[$__einp_$i$i >> 2] | 0)) $retval$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$21 >> 2] | 0) + 36 >> 2] & 127]($21) | 0; else $retval$0$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$22 >> 0] | 0) | 0;
  if (__ZNSt3__29__num_getIcE19__stage2_float_loopEcRbRcPcRS4_ccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjS4_($retval$0$i$i & 255, $__in_units, $__exp, $__a$1, $__a_end, HEAP8[$__decimal_point >> 0] | 0, HEAP8[$__thousands_sep >> 0] | 0, $__grouping, $__g, $__g_end, $__dc, $__atoms) | 0) {
   $44 = $52;
   $__a$2 = $__a$1;
   break;
  }
  $28 = HEAP32[$__ninp_$i$i >> 2] | 0;
  if (($28 | 0) == (HEAP32[$__einp_$i$i >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[$21 >> 2] | 0) + 40 >> 2] & 127]($21) | 0; else {
   HEAP32[$__ninp_$i$i >> 2] = $28 + 1;
   __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$28 >> 0] | 0) | 0;
  }
  $4 = $21;
  $50 = $41;
  $__a$0 = $__a$1;
 }
 $32 = HEAP8[$__grouping + 11 >> 0] | 0;
 if (!((HEAP8[$__in_units >> 0] | 0) == 0 ? 1 : (($32 << 24 >> 24 < 0 ? HEAP32[$__grouping + 4 >> 2] | 0 : $32 & 255) | 0) == 0)) {
  $35 = HEAP32[$__g_end >> 2] | 0;
  if (($35 - $__g | 0) < 160) {
   $36 = HEAP32[$__dc >> 2] | 0;
   HEAP32[$__g_end >> 2] = $35 + 4;
   HEAP32[$35 >> 2] = $36;
  }
 }
 HEAPF32[$__v >> 2] = Math_fround(__ZNSt3__215__num_get_floatIfEET_PKcS3_Rj($__a$2, HEAP32[$__a_end >> 2] | 0, $__err));
 __ZNSt3__216__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping, $__g, HEAP32[$__g_end >> 2] | 0, $__err);
 if (!$21) $53 = 1; else {
  $39 = HEAP32[$21 + 12 >> 2] | 0;
  if (($39 | 0) == (HEAP32[$21 + 16 >> 2] | 0)) $retval$0$i$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$41 >> 2] | 0) + 36 >> 2] & 127]($21) | 0; else $retval$0$i$i$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$39 >> 0] | 0) | 0;
  if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i$i$i, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
   HEAP32[$__b >> 2] = 0;
   $53 = 1;
  } else $53 = 0;
 }
 do if (!$44) label = 48; else {
  $45 = HEAP32[$44 + 12 >> 2] | 0;
  if (($45 | 0) == (HEAP32[$44 + 16 >> 2] | 0)) $retval$0$i$i13$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$44 >> 2] | 0) + 36 >> 2] & 127]($44) | 0; else $retval$0$i$i13$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$45 >> 0] | 0) | 0;
  if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i13$i$i, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
   HEAP32[$__e >> 2] = 0;
   label = 48;
   break;
  } else if ($53) break; else {
   label = 50;
   break;
  }
 } while (0);
 if ((label | 0) == 48) if ($53) label = 50;
 if ((label | 0) == 50) HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
 $retval$sroa$0$0$copyload = HEAP32[$__b >> 2] | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 STACKTOP = sp;
 return $retval$sroa$0$0$copyload | 0;
}

function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv($this, $__b, $__e, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$pre = 0, $10 = 0, $11 = 0, $16 = 0, $22 = 0, $23 = 0, $27 = 0, $34 = 0, $36 = 0, $39 = 0, $40 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $6 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__cap_$i$i = 0, $__dc = 0, $__einp_$i$i = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__i$0$i$i = 0, $__i$0$i$i12 = 0, $__ninp_$i$i = 0, $__size_$i$i = 0, $__size_$i3$i = 0, $call$i = 0, $call21 = 0, $cond$i = 0, $cond$i$i = 0, $cond$i$i$i = 0, $cond$i$i100 = 0, $cond$i65 = 0, $cond$i91 = 0, $ref$tmp = 0, $retval$0$i$i = 0, $retval$0$i$i$i$i = 0, $retval$0$i$i$i$i32 = 0, $retval$0$i$i13$i$i = 0, $retval$0$i$i13$i$i53 = 0, $retval$sroa$0$0$copyload = 0, $vararg_buffer = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(304);
 $vararg_buffer = sp + 264 | 0;
 $__atoms = sp + 160 | 0;
 $__grouping = sp + 292 | 0;
 $ref$tmp = sp + 280 | 0;
 $__a_end = sp + 276 | 0;
 $__g = sp;
 $__g_end = sp + 272 | 0;
 $__dc = sp + 268 | 0;
 HEAP32[$__grouping >> 2] = 0;
 HEAP32[$__grouping + 4 >> 2] = 0;
 HEAP32[$__grouping + 8 >> 2] = 0;
 $__i$0$i$i = 0;
 while (1) {
  if (($__i$0$i$i | 0) == 3) break;
  HEAP32[$__grouping + ($__i$0$i$i << 2) >> 2] = 0;
  $__i$0$i$i = $__i$0$i$i + 1 | 0;
 }
 __ZNKSt3__28ios_base6getlocEv($ref$tmp, $__iob);
 $call$i = __ZNKSt3__26locale9use_facetERNS0_2idE($ref$tmp, 61248) | 0;
 FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[$call$i >> 2] | 0) + 48 >> 2] & 15]($call$i, 14672, 14698, $__atoms) | 0;
 __ZNSt3__26localeD2Ev($ref$tmp);
 HEAP32[$ref$tmp >> 2] = 0;
 HEAP32[$ref$tmp + 4 >> 2] = 0;
 HEAP32[$ref$tmp + 8 >> 2] = 0;
 $__i$0$i$i12 = 0;
 while (1) {
  if (($__i$0$i$i12 | 0) == 3) break;
  HEAP32[$ref$tmp + ($__i$0$i$i12 << 2) >> 2] = 0;
  $__i$0$i$i12 = $__i$0$i$i12 + 1 | 0;
 }
 $__size_$i$i = $ref$tmp + 11 | 0;
 $__cap_$i$i = $ref$tmp + 8 | 0;
 if ((HEAP8[$__size_$i$i >> 0] | 0) < 0) $cond$i = (HEAP32[$__cap_$i$i >> 2] & 2147483647) + -1 | 0; else $cond$i = 10;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($ref$tmp, $cond$i, 0);
 $cond$i$i = (HEAP8[$__size_$i$i >> 0] | 0) < 0 ? HEAP32[$ref$tmp >> 2] | 0 : $ref$tmp;
 HEAP32[$__a_end >> 2] = $cond$i$i;
 HEAP32[$__g_end >> 2] = $__g;
 HEAP32[$__dc >> 2] = 0;
 $__size_$i3$i = $ref$tmp + 4 | 0;
 $$pre = HEAP32[$__b >> 2] | 0;
 $45 = $$pre;
 $5 = $$pre;
 $__a$0 = $cond$i$i;
 L12 : while (1) {
  if (!$5) {
   $22 = 0;
   $36 = 0;
   $46 = 1;
  } else {
   $6 = HEAP32[$5 + 12 >> 2] | 0;
   if (($6 | 0) == (HEAP32[$5 + 16 >> 2] | 0)) $retval$0$i$i$i$i32 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$5 >> 2] | 0) + 36 >> 2] & 127]($5) | 0; else $retval$0$i$i$i$i32 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$6 >> 2] | 0) | 0;
   if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i$i$i32, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
    HEAP32[$__b >> 2] = 0;
    $22 = 0;
    $36 = 0;
    $46 = 1;
   } else {
    $22 = $5;
    $36 = $45;
    $46 = 0;
   }
  }
  $10 = HEAP32[$__e >> 2] | 0;
  do if (!$10) label = 22; else {
   $11 = HEAP32[$10 + 12 >> 2] | 0;
   if (($11 | 0) == (HEAP32[$10 + 16 >> 2] | 0)) $retval$0$i$i13$i$i53 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$10 >> 2] | 0) + 36 >> 2] & 127]($10) | 0; else $retval$0$i$i13$i$i53 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$11 >> 2] | 0) | 0;
   if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i13$i$i53, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
    HEAP32[$__e >> 2] = 0;
    label = 22;
    break;
   } else if ($46) {
    $47 = $10;
    break;
   } else {
    $39 = $10;
    $__a$2 = $__a$0;
    break L12;
   }
  } while (0);
  if ((label | 0) == 22) {
   label = 0;
   if ($46) {
    $39 = 0;
    $__a$2 = $__a$0;
    break;
   } else $47 = 0;
  }
  $16 = HEAP8[$__size_$i$i >> 0] | 0;
  $cond$i65 = $16 << 24 >> 24 < 0 ? HEAP32[$__size_$i3$i >> 2] | 0 : $16 & 255;
  if ((HEAP32[$__a_end >> 2] | 0) == ($__a$0 + $cond$i65 | 0)) {
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($ref$tmp, $cond$i65 << 1, 0);
   if ((HEAP8[$__size_$i$i >> 0] | 0) < 0) $cond$i91 = (HEAP32[$__cap_$i$i >> 2] & 2147483647) + -1 | 0; else $cond$i91 = 10;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($ref$tmp, $cond$i91, 0);
   $cond$i$i100 = (HEAP8[$__size_$i$i >> 0] | 0) < 0 ? HEAP32[$ref$tmp >> 2] | 0 : $ref$tmp;
   HEAP32[$__a_end >> 2] = $cond$i$i100 + $cond$i65;
   $__a$1 = $cond$i$i100;
  } else $__a$1 = $__a$0;
  $__ninp_$i$i = $22 + 12 | 0;
  $23 = HEAP32[$__ninp_$i$i >> 2] | 0;
  $__einp_$i$i = $22 + 16 | 0;
  if (($23 | 0) == (HEAP32[$__einp_$i$i >> 2] | 0)) $retval$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$22 >> 2] | 0) + 36 >> 2] & 127]($22) | 0; else $retval$0$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$23 >> 2] | 0) | 0;
  if (__ZNSt3__29__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_PKw($retval$0$i$i, 16, $__a$1, $__a_end, $__dc, 0, $__grouping, $__g, $__g_end, $__atoms) | 0) {
   $39 = $47;
   $__a$2 = $__a$1;
   break;
  }
  $27 = HEAP32[$__ninp_$i$i >> 2] | 0;
  if (($27 | 0) == (HEAP32[$__einp_$i$i >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[$22 >> 2] | 0) + 40 >> 2] & 127]($22) | 0; else {
   HEAP32[$__ninp_$i$i >> 2] = $27 + 4;
   __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$27 >> 2] | 0) | 0;
  }
  $45 = $36;
  $5 = $22;
  $__a$0 = $__a$1;
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($ref$tmp, (HEAP32[$__a_end >> 2] | 0) - $__a$2 | 0, 0);
 $cond$i$i$i = (HEAP8[$__size_$i$i >> 0] | 0) < 0 ? HEAP32[$ref$tmp >> 2] | 0 : $ref$tmp;
 $call21 = __ZNSt3__26__clocEv() | 0;
 HEAP32[$vararg_buffer >> 2] = $__v;
 if ((__ZNSt3__217__libcpp_sscanf_lEPKcP15__locale_structS1_z($cond$i$i$i, $call21, 42851, $vararg_buffer) | 0) != 1) HEAP32[$__err >> 2] = 4;
 if (!$22) $48 = 1; else {
  $34 = HEAP32[$22 + 12 >> 2] | 0;
  if (($34 | 0) == (HEAP32[$22 + 16 >> 2] | 0)) $retval$0$i$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$36 >> 2] | 0) + 36 >> 2] & 127]($22) | 0; else $retval$0$i$i$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$34 >> 2] | 0) | 0;
  if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i$i$i, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
   HEAP32[$__b >> 2] = 0;
   $48 = 1;
  } else $48 = 0;
 }
 do if (!$39) label = 50; else {
  $40 = HEAP32[$39 + 12 >> 2] | 0;
  if (($40 | 0) == (HEAP32[$39 + 16 >> 2] | 0)) $retval$0$i$i13$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$39 >> 2] | 0) + 36 >> 2] & 127]($39) | 0; else $retval$0$i$i13$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$40 >> 2] | 0) | 0;
  if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i13$i$i, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
   HEAP32[$__e >> 2] = 0;
   label = 50;
   break;
  } else if ($48) break; else {
   label = 52;
   break;
  }
 } while (0);
 if ((label | 0) == 50) if ($48) label = 52;
 if ((label | 0) == 52) HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
 $retval$sroa$0$0$copyload = HEAP32[$__b >> 2] | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 STACKTOP = sp;
 return $retval$sroa$0$0$copyload | 0;
}

function _stbiw__encode_png_line($pixels, $stride_bytes, $width, $height, $y, $n, $filter_type, $line_buffer) {
 $pixels = $pixels | 0;
 $stride_bytes = $stride_bytes | 0;
 $width = $width | 0;
 $height = $height | 0;
 $y = $y | 0;
 $n = $n | 0;
 $filter_type = $filter_type | 0;
 $line_buffer = $line_buffer | 0;
 var $17 = 0, $9 = 0, $cond2 = 0, $conv109 = 0, $conv123 = 0, $conv153 = 0, $conv160 = 0, $conv39 = 0, $filter_type$addr = 0, $height$addr = 0, $i = 0, $line_buffer$addr = 0, $mymap = 0, $n$addr = 0, $pixels$addr = 0, $signed_stride = 0, $stride_bytes$addr = 0, $type = 0, $width$addr = 0, $y$addr = 0, $z = 0, sp = 0, CSE$0 = 0, CSE$1 = 0, CSE$2 = 0, CSE$3 = 0, CSE$4 = 0, CSE$5 = 0, CSE$6 = 0, CSE$7 = 0, CSE$8 = 0, CSE$9 = 0, CSE$10 = 0, CSE$11 = 0, CSE$12 = 0, CSE$13 = 0, CSE$14 = 0, CSE$15 = 0, CSE$16 = 0, CSE$17 = 0, CSE$18 = 0, CSE$19 = 0, CSE$20 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64);
 $pixels$addr = sp + 48 | 0;
 $stride_bytes$addr = sp + 44 | 0;
 $width$addr = sp + 40 | 0;
 $height$addr = sp + 36 | 0;
 $y$addr = sp + 32 | 0;
 $n$addr = sp + 28 | 0;
 $filter_type$addr = sp + 24 | 0;
 $line_buffer$addr = sp + 20 | 0;
 $mymap = sp + 16 | 0;
 $i = sp + 12 | 0;
 $type = sp + 8 | 0;
 $z = sp + 4 | 0;
 $signed_stride = sp;
 HEAP32[$pixels$addr >> 2] = $pixels;
 HEAP32[$stride_bytes$addr >> 2] = $stride_bytes;
 HEAP32[$width$addr >> 2] = $width;
 HEAP32[$height$addr >> 2] = $height;
 HEAP32[$y$addr >> 2] = $y;
 HEAP32[$n$addr >> 2] = $n;
 HEAP32[$filter_type$addr >> 2] = $filter_type;
 HEAP32[$line_buffer$addr >> 2] = $line_buffer;
 HEAP32[$mymap >> 2] = HEAP32[$y$addr >> 2] | 0 ? 6240 : 6272;
 HEAP32[$type >> 2] = HEAP32[(HEAP32[$mymap >> 2] | 0) + (HEAP32[$filter_type$addr >> 2] << 2) >> 2];
 if (0) $cond2 = (HEAP32[$height$addr >> 2] | 0) - 1 - (HEAP32[$y$addr >> 2] | 0) | 0; else $cond2 = HEAP32[$y$addr >> 2] | 0;
 HEAP32[$z >> 2] = (HEAP32[$pixels$addr >> 2] | 0) + (Math_imul(HEAP32[$stride_bytes$addr >> 2] | 0, $cond2) | 0);
 $9 = HEAP32[$stride_bytes$addr >> 2] | 0;
 HEAP32[$signed_stride >> 2] = 0 ? 0 - $9 | 0 : $9;
 if (!(HEAP32[$type >> 2] | 0)) {
  _memcpy(HEAP32[$line_buffer$addr >> 2] | 0, HEAP32[$z >> 2] | 0, Math_imul(HEAP32[$width$addr >> 2] | 0, HEAP32[$n$addr >> 2] | 0) | 0) | 0;
  STACKTOP = sp;
  return;
 }
 HEAP32[$i >> 2] = 0;
 while (1) {
  $17 = HEAP32[$type >> 2] | 0;
  if ((HEAP32[$i >> 2] | 0) >= (HEAP32[$n$addr >> 2] | 0)) break;
  switch ($17 | 0) {
  case 1:
   {
    CSE$0 = HEAP32[$i >> 2] | 0;
    HEAP8[(HEAP32[$line_buffer$addr >> 2] | 0) + CSE$0 >> 0] = HEAP8[(HEAP32[$z >> 2] | 0) + CSE$0 >> 0] | 0;
    break;
   }
  case 2:
   {
    CSE$1 = HEAP32[$i >> 2] | 0;
    CSE$2 = HEAP32[$z >> 2] | 0;
    HEAP8[(HEAP32[$line_buffer$addr >> 2] | 0) + CSE$1 >> 0] = (HEAPU8[CSE$2 + CSE$1 >> 0] | 0) - (HEAPU8[CSE$2 + (CSE$1 - (HEAP32[$signed_stride >> 2] | 0)) >> 0] | 0);
    break;
   }
  case 3:
   {
    CSE$3 = HEAP32[$i >> 2] | 0;
    CSE$4 = HEAP32[$z >> 2] | 0;
    HEAP8[(HEAP32[$line_buffer$addr >> 2] | 0) + CSE$3 >> 0] = (HEAPU8[CSE$4 + CSE$3 >> 0] | 0) - (HEAPU8[CSE$4 + (CSE$3 - (HEAP32[$signed_stride >> 2] | 0)) >> 0] >> 1);
    break;
   }
  case 4:
   {
    CSE$5 = HEAP32[$z >> 2] | 0;
    CSE$6 = HEAP32[$i >> 2] | 0;
    $conv39 = (HEAPU8[CSE$5 + CSE$6 >> 0] | 0) - ((_stbiw__paeth(0, HEAPU8[CSE$5 + (CSE$6 - (HEAP32[$signed_stride >> 2] | 0)) >> 0] | 0, 0) | 0) & 255) & 255;
    HEAP8[(HEAP32[$line_buffer$addr >> 2] | 0) + (HEAP32[$i >> 2] | 0) >> 0] = $conv39;
    break;
   }
  case 5:
   {
    CSE$7 = HEAP32[$i >> 2] | 0;
    HEAP8[(HEAP32[$line_buffer$addr >> 2] | 0) + CSE$7 >> 0] = HEAP8[(HEAP32[$z >> 2] | 0) + CSE$7 >> 0] | 0;
    break;
   }
  case 6:
   {
    CSE$8 = HEAP32[$i >> 2] | 0;
    HEAP8[(HEAP32[$line_buffer$addr >> 2] | 0) + CSE$8 >> 0] = HEAP8[(HEAP32[$z >> 2] | 0) + CSE$8 >> 0] | 0;
    break;
   }
  default:
   {}
  }
  HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
 }
 switch ($17 | 0) {
 case 1:
  {
   HEAP32[$i >> 2] = HEAP32[$n$addr >> 2];
   while (1) {
    if ((HEAP32[$i >> 2] | 0) >= (Math_imul(HEAP32[$width$addr >> 2] | 0, HEAP32[$n$addr >> 2] | 0) | 0)) break;
    CSE$9 = HEAP32[$i >> 2] | 0;
    CSE$10 = HEAP32[$z >> 2] | 0;
    HEAP8[(HEAP32[$line_buffer$addr >> 2] | 0) + CSE$9 >> 0] = (HEAPU8[CSE$10 + CSE$9 >> 0] | 0) - (HEAPU8[CSE$10 + (CSE$9 - (HEAP32[$n$addr >> 2] | 0)) >> 0] | 0);
    HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
   }
   STACKTOP = sp;
   return;
  }
 case 2:
  {
   HEAP32[$i >> 2] = HEAP32[$n$addr >> 2];
   while (1) {
    if ((HEAP32[$i >> 2] | 0) >= (Math_imul(HEAP32[$width$addr >> 2] | 0, HEAP32[$n$addr >> 2] | 0) | 0)) break;
    CSE$11 = HEAP32[$i >> 2] | 0;
    CSE$12 = HEAP32[$z >> 2] | 0;
    HEAP8[(HEAP32[$line_buffer$addr >> 2] | 0) + CSE$11 >> 0] = (HEAPU8[CSE$12 + CSE$11 >> 0] | 0) - (HEAPU8[CSE$12 + (CSE$11 - (HEAP32[$signed_stride >> 2] | 0)) >> 0] | 0);
    HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
   }
   STACKTOP = sp;
   return;
  }
 case 3:
  {
   HEAP32[$i >> 2] = HEAP32[$n$addr >> 2];
   while (1) {
    if ((HEAP32[$i >> 2] | 0) >= (Math_imul(HEAP32[$width$addr >> 2] | 0, HEAP32[$n$addr >> 2] | 0) | 0)) break;
    CSE$13 = HEAP32[$i >> 2] | 0;
    CSE$14 = HEAP32[$z >> 2] | 0;
    HEAP8[(HEAP32[$line_buffer$addr >> 2] | 0) + CSE$13 >> 0] = (HEAPU8[CSE$14 + CSE$13 >> 0] | 0) - ((HEAPU8[CSE$14 + (CSE$13 - (HEAP32[$n$addr >> 2] | 0)) >> 0] | 0) + (HEAPU8[CSE$14 + (CSE$13 - (HEAP32[$signed_stride >> 2] | 0)) >> 0] | 0) >> 1);
    HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
   }
   STACKTOP = sp;
   return;
  }
 case 4:
  {
   HEAP32[$i >> 2] = HEAP32[$n$addr >> 2];
   while (1) {
    if ((HEAP32[$i >> 2] | 0) >= (Math_imul(HEAP32[$width$addr >> 2] | 0, HEAP32[$n$addr >> 2] | 0) | 0)) break;
    $conv109 = HEAPU8[(HEAP32[$z >> 2] | 0) + (HEAP32[$i >> 2] | 0) >> 0] | 0;
    CSE$15 = HEAP32[$z >> 2] | 0;
    CSE$16 = HEAP32[$i >> 2] | 0;
    CSE$17 = (HEAP32[$i >> 2] | 0) - (HEAP32[$signed_stride >> 2] | 0) | 0;
    CSE$18 = HEAP32[$n$addr >> 2] | 0;
    $conv123 = $conv109 - ((_stbiw__paeth(HEAPU8[CSE$15 + (CSE$16 - CSE$18) >> 0] | 0, HEAPU8[CSE$15 + CSE$17 >> 0] | 0, HEAPU8[CSE$15 + (CSE$17 - CSE$18) >> 0] | 0) | 0) & 255) & 255;
    HEAP8[(HEAP32[$line_buffer$addr >> 2] | 0) + (HEAP32[$i >> 2] | 0) >> 0] = $conv123;
    HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
   }
   STACKTOP = sp;
   return;
  }
 case 5:
  {
   HEAP32[$i >> 2] = HEAP32[$n$addr >> 2];
   while (1) {
    if ((HEAP32[$i >> 2] | 0) >= (Math_imul(HEAP32[$width$addr >> 2] | 0, HEAP32[$n$addr >> 2] | 0) | 0)) break;
    CSE$19 = HEAP32[$i >> 2] | 0;
    CSE$20 = HEAP32[$z >> 2] | 0;
    HEAP8[(HEAP32[$line_buffer$addr >> 2] | 0) + CSE$19 >> 0] = (HEAPU8[CSE$20 + CSE$19 >> 0] | 0) - (HEAPU8[CSE$20 + (CSE$19 - (HEAP32[$n$addr >> 2] | 0)) >> 0] >> 1);
    HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
   }
   STACKTOP = sp;
   return;
  }
 case 6:
  {
   HEAP32[$i >> 2] = HEAP32[$n$addr >> 2];
   while (1) {
    if ((HEAP32[$i >> 2] | 0) >= (Math_imul(HEAP32[$width$addr >> 2] | 0, HEAP32[$n$addr >> 2] | 0) | 0)) break;
    $conv153 = HEAPU8[(HEAP32[$z >> 2] | 0) + (HEAP32[$i >> 2] | 0) >> 0] | 0;
    $conv160 = $conv153 - ((_stbiw__paeth(HEAPU8[(HEAP32[$z >> 2] | 0) + ((HEAP32[$i >> 2] | 0) - (HEAP32[$n$addr >> 2] | 0)) >> 0] | 0, 0, 0) | 0) & 255) & 255;
    HEAP8[(HEAP32[$line_buffer$addr >> 2] | 0) + (HEAP32[$i >> 2] | 0) >> 0] = $conv160;
    HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
   }
   STACKTOP = sp;
   return;
  }
 default:
  {
   STACKTOP = sp;
   return;
  }
 }
}

function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv($this, $__b, $__e, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$pre = 0, $10 = 0, $11 = 0, $16 = 0, $22 = 0, $23 = 0, $27 = 0, $34 = 0, $36 = 0, $39 = 0, $40 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $6 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__cap_$i$i = 0, $__dc = 0, $__einp_$i$i = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__i$0$i$i = 0, $__i$0$i$i11 = 0, $__ninp_$i$i = 0, $__size_$i$i = 0, $__size_$i3$i = 0, $call$i = 0, $call21 = 0, $cond$i = 0, $cond$i$i = 0, $cond$i$i$i = 0, $cond$i$i99 = 0, $cond$i64 = 0, $cond$i90 = 0, $ref$tmp = 0, $retval$0$i$i = 0, $retval$0$i$i$i$i = 0, $retval$0$i$i$i$i31 = 0, $retval$0$i$i13$i$i = 0, $retval$0$i$i13$i$i52 = 0, $retval$sroa$0$0$copyload = 0, $vararg_buffer = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(240);
 $vararg_buffer = sp + 192 | 0;
 $__atoms = sp + 160 | 0;
 $__grouping = sp + 220 | 0;
 $ref$tmp = sp + 208 | 0;
 $__a_end = sp + 204 | 0;
 $__g = sp;
 $__g_end = sp + 200 | 0;
 $__dc = sp + 196 | 0;
 HEAP32[$__grouping >> 2] = 0;
 HEAP32[$__grouping + 4 >> 2] = 0;
 HEAP32[$__grouping + 8 >> 2] = 0;
 $__i$0$i$i = 0;
 while (1) {
  if (($__i$0$i$i | 0) == 3) break;
  HEAP32[$__grouping + ($__i$0$i$i << 2) >> 2] = 0;
  $__i$0$i$i = $__i$0$i$i + 1 | 0;
 }
 __ZNKSt3__28ios_base6getlocEv($ref$tmp, $__iob);
 $call$i = __ZNKSt3__26locale9use_facetERNS0_2idE($ref$tmp, 61216) | 0;
 FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[$call$i >> 2] | 0) + 32 >> 2] & 15]($call$i, 14672, 14698, $__atoms) | 0;
 __ZNSt3__26localeD2Ev($ref$tmp);
 HEAP32[$ref$tmp >> 2] = 0;
 HEAP32[$ref$tmp + 4 >> 2] = 0;
 HEAP32[$ref$tmp + 8 >> 2] = 0;
 $__i$0$i$i11 = 0;
 while (1) {
  if (($__i$0$i$i11 | 0) == 3) break;
  HEAP32[$ref$tmp + ($__i$0$i$i11 << 2) >> 2] = 0;
  $__i$0$i$i11 = $__i$0$i$i11 + 1 | 0;
 }
 $__size_$i$i = $ref$tmp + 11 | 0;
 $__cap_$i$i = $ref$tmp + 8 | 0;
 if ((HEAP8[$__size_$i$i >> 0] | 0) < 0) $cond$i = (HEAP32[$__cap_$i$i >> 2] & 2147483647) + -1 | 0; else $cond$i = 10;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($ref$tmp, $cond$i, 0);
 $cond$i$i = (HEAP8[$__size_$i$i >> 0] | 0) < 0 ? HEAP32[$ref$tmp >> 2] | 0 : $ref$tmp;
 HEAP32[$__a_end >> 2] = $cond$i$i;
 HEAP32[$__g_end >> 2] = $__g;
 HEAP32[$__dc >> 2] = 0;
 $__size_$i3$i = $ref$tmp + 4 | 0;
 $$pre = HEAP32[$__b >> 2] | 0;
 $45 = $$pre;
 $5 = $$pre;
 $__a$0 = $cond$i$i;
 L12 : while (1) {
  if (!$5) {
   $22 = 0;
   $36 = 0;
   $46 = 1;
  } else {
   $6 = HEAP32[$5 + 12 >> 2] | 0;
   if (($6 | 0) == (HEAP32[$5 + 16 >> 2] | 0)) $retval$0$i$i$i$i31 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$5 >> 2] | 0) + 36 >> 2] & 127]($5) | 0; else $retval$0$i$i$i$i31 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$6 >> 0] | 0) | 0;
   if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i$i$i31, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
    HEAP32[$__b >> 2] = 0;
    $22 = 0;
    $36 = 0;
    $46 = 1;
   } else {
    $22 = $5;
    $36 = $45;
    $46 = 0;
   }
  }
  $10 = HEAP32[$__e >> 2] | 0;
  do if (!$10) label = 22; else {
   $11 = HEAP32[$10 + 12 >> 2] | 0;
   if (($11 | 0) == (HEAP32[$10 + 16 >> 2] | 0)) $retval$0$i$i13$i$i52 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$10 >> 2] | 0) + 36 >> 2] & 127]($10) | 0; else $retval$0$i$i13$i$i52 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$11 >> 0] | 0) | 0;
   if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i13$i$i52, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
    HEAP32[$__e >> 2] = 0;
    label = 22;
    break;
   } else if ($46) {
    $47 = $10;
    break;
   } else {
    $39 = $10;
    $__a$2 = $__a$0;
    break L12;
   }
  } while (0);
  if ((label | 0) == 22) {
   label = 0;
   if ($46) {
    $39 = 0;
    $__a$2 = $__a$0;
    break;
   } else $47 = 0;
  }
  $16 = HEAP8[$__size_$i$i >> 0] | 0;
  $cond$i64 = $16 << 24 >> 24 < 0 ? HEAP32[$__size_$i3$i >> 2] | 0 : $16 & 255;
  if ((HEAP32[$__a_end >> 2] | 0) == ($__a$0 + $cond$i64 | 0)) {
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($ref$tmp, $cond$i64 << 1, 0);
   if ((HEAP8[$__size_$i$i >> 0] | 0) < 0) $cond$i90 = (HEAP32[$__cap_$i$i >> 2] & 2147483647) + -1 | 0; else $cond$i90 = 10;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($ref$tmp, $cond$i90, 0);
   $cond$i$i99 = (HEAP8[$__size_$i$i >> 0] | 0) < 0 ? HEAP32[$ref$tmp >> 2] | 0 : $ref$tmp;
   HEAP32[$__a_end >> 2] = $cond$i$i99 + $cond$i64;
   $__a$1 = $cond$i$i99;
  } else $__a$1 = $__a$0;
  $__ninp_$i$i = $22 + 12 | 0;
  $23 = HEAP32[$__ninp_$i$i >> 2] | 0;
  $__einp_$i$i = $22 + 16 | 0;
  if (($23 | 0) == (HEAP32[$__einp_$i$i >> 2] | 0)) $retval$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$22 >> 2] | 0) + 36 >> 2] & 127]($22) | 0; else $retval$0$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$23 >> 0] | 0) | 0;
  if (__ZNSt3__29__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_PKc($retval$0$i$i & 255, 16, $__a$1, $__a_end, $__dc, 0, $__grouping, $__g, $__g_end, $__atoms) | 0) {
   $39 = $47;
   $__a$2 = $__a$1;
   break;
  }
  $27 = HEAP32[$__ninp_$i$i >> 2] | 0;
  if (($27 | 0) == (HEAP32[$__einp_$i$i >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[$22 >> 2] | 0) + 40 >> 2] & 127]($22) | 0; else {
   HEAP32[$__ninp_$i$i >> 2] = $27 + 1;
   __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$27 >> 0] | 0) | 0;
  }
  $45 = $36;
  $5 = $22;
  $__a$0 = $__a$1;
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($ref$tmp, (HEAP32[$__a_end >> 2] | 0) - $__a$2 | 0, 0);
 $cond$i$i$i = (HEAP8[$__size_$i$i >> 0] | 0) < 0 ? HEAP32[$ref$tmp >> 2] | 0 : $ref$tmp;
 $call21 = __ZNSt3__26__clocEv() | 0;
 HEAP32[$vararg_buffer >> 2] = $__v;
 if ((__ZNSt3__217__libcpp_sscanf_lEPKcP15__locale_structS1_z($cond$i$i$i, $call21, 42851, $vararg_buffer) | 0) != 1) HEAP32[$__err >> 2] = 4;
 if (!$22) $48 = 1; else {
  $34 = HEAP32[$22 + 12 >> 2] | 0;
  if (($34 | 0) == (HEAP32[$22 + 16 >> 2] | 0)) $retval$0$i$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$36 >> 2] | 0) + 36 >> 2] & 127]($22) | 0; else $retval$0$i$i$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$34 >> 0] | 0) | 0;
  if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i$i$i, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
   HEAP32[$__b >> 2] = 0;
   $48 = 1;
  } else $48 = 0;
 }
 do if (!$39) label = 50; else {
  $40 = HEAP32[$39 + 12 >> 2] | 0;
  if (($40 | 0) == (HEAP32[$39 + 16 >> 2] | 0)) $retval$0$i$i13$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$39 >> 2] | 0) + 36 >> 2] & 127]($39) | 0; else $retval$0$i$i13$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$40 >> 0] | 0) | 0;
  if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i13$i$i, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
   HEAP32[$__e >> 2] = 0;
   label = 50;
   break;
  } else if ($48) break; else {
   label = 52;
   break;
  }
 } while (0);
 if ((label | 0) == 50) if ($48) label = 52;
 if ((label | 0) == 52) HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
 $retval$sroa$0$0$copyload = HEAP32[$__b >> 2] | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 STACKTOP = sp;
 return $retval$sroa$0$0$copyload | 0;
}

function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIeEES4_S4_S4_RNS_8ios_baseERjRT_($this, $__b, $__e, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$pre = 0, $10 = 0, $15 = 0, $21 = 0, $22 = 0, $28 = 0, $32 = 0, $35 = 0, $36 = 0, $39 = 0, $4 = 0, $41 = 0, $44 = 0, $45 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $9 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__cap_$i$i = 0, $__dc = 0, $__decimal_point = 0, $__einp_$i$i = 0, $__exp = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__i$0$i$i = 0, $__in_units = 0, $__ninp_$i$i = 0, $__size_$i$i = 0, $__size_$i3$i = 0, $__thousands_sep = 0, $cond$i = 0, $cond$i$i = 0, $cond$i$i90 = 0, $cond$i55 = 0, $cond$i81 = 0, $retval$0$i$i = 0, $retval$0$i$i$i$i = 0, $retval$0$i$i$i$i22 = 0, $retval$0$i$i13$i$i = 0, $retval$0$i$i13$i$i43 = 0, $retval$sroa$0$0$copyload = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 336 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(336);
 $__atoms = sp + 160 | 0;
 $__decimal_point = sp + 328 | 0;
 $__thousands_sep = sp + 324 | 0;
 $__grouping = sp + 312 | 0;
 $__buf = sp + 300 | 0;
 $__a_end = sp + 296 | 0;
 $__g = sp;
 $__g_end = sp + 292 | 0;
 $__dc = sp + 288 | 0;
 $__in_units = sp + 333 | 0;
 $__exp = sp + 332 | 0;
 __ZNSt3__29__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_($__grouping, $__iob, $__atoms, $__decimal_point, $__thousands_sep);
 HEAP32[$__buf >> 2] = 0;
 HEAP32[$__buf + 4 >> 2] = 0;
 HEAP32[$__buf + 8 >> 2] = 0;
 $__i$0$i$i = 0;
 while (1) {
  if (($__i$0$i$i | 0) == 3) break;
  HEAP32[$__buf + ($__i$0$i$i << 2) >> 2] = 0;
  $__i$0$i$i = $__i$0$i$i + 1 | 0;
 }
 $__size_$i$i = $__buf + 11 | 0;
 $__cap_$i$i = $__buf + 8 | 0;
 if ((HEAP8[$__size_$i$i >> 0] | 0) < 0) $cond$i = (HEAP32[$__cap_$i$i >> 2] & 2147483647) + -1 | 0; else $cond$i = 10;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($__buf, $cond$i, 0);
 $cond$i$i = (HEAP8[$__size_$i$i >> 0] | 0) < 0 ? HEAP32[$__buf >> 2] | 0 : $__buf;
 HEAP32[$__a_end >> 2] = $cond$i$i;
 HEAP32[$__g_end >> 2] = $__g;
 HEAP32[$__dc >> 2] = 0;
 HEAP8[$__in_units >> 0] = 1;
 HEAP8[$__exp >> 0] = 69;
 $__size_$i3$i = $__buf + 4 | 0;
 $$pre = HEAP32[$__b >> 2] | 0;
 $4 = $$pre;
 $50 = $$pre;
 $__a$0 = $cond$i$i;
 L8 : while (1) {
  if (!$4) {
   $21 = 0;
   $41 = 0;
   $51 = 1;
  } else {
   $5 = HEAP32[$4 + 12 >> 2] | 0;
   if (($5 | 0) == (HEAP32[$4 + 16 >> 2] | 0)) $retval$0$i$i$i$i22 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$4 >> 2] | 0) + 36 >> 2] & 127]($4) | 0; else $retval$0$i$i$i$i22 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$5 >> 2] | 0) | 0;
   if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i$i$i22, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
    HEAP32[$__b >> 2] = 0;
    $21 = 0;
    $41 = 0;
    $51 = 1;
   } else {
    $21 = $4;
    $41 = $50;
    $51 = 0;
   }
  }
  $9 = HEAP32[$__e >> 2] | 0;
  do if (!$9) label = 19; else {
   $10 = HEAP32[$9 + 12 >> 2] | 0;
   if (($10 | 0) == (HEAP32[$9 + 16 >> 2] | 0)) $retval$0$i$i13$i$i43 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$9 >> 2] | 0) + 36 >> 2] & 127]($9) | 0; else $retval$0$i$i13$i$i43 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$10 >> 2] | 0) | 0;
   if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i13$i$i43, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
    HEAP32[$__e >> 2] = 0;
    label = 19;
    break;
   } else if ($51) {
    $52 = $9;
    break;
   } else {
    $44 = $9;
    $__a$2 = $__a$0;
    break L8;
   }
  } while (0);
  if ((label | 0) == 19) {
   label = 0;
   if ($51) {
    $44 = 0;
    $__a$2 = $__a$0;
    break;
   } else $52 = 0;
  }
  $15 = HEAP8[$__size_$i$i >> 0] | 0;
  $cond$i55 = $15 << 24 >> 24 < 0 ? HEAP32[$__size_$i3$i >> 2] | 0 : $15 & 255;
  if ((HEAP32[$__a_end >> 2] | 0) == ($__a$0 + $cond$i55 | 0)) {
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($__buf, $cond$i55 << 1, 0);
   if ((HEAP8[$__size_$i$i >> 0] | 0) < 0) $cond$i81 = (HEAP32[$__cap_$i$i >> 2] & 2147483647) + -1 | 0; else $cond$i81 = 10;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($__buf, $cond$i81, 0);
   $cond$i$i90 = (HEAP8[$__size_$i$i >> 0] | 0) < 0 ? HEAP32[$__buf >> 2] | 0 : $__buf;
   HEAP32[$__a_end >> 2] = $cond$i$i90 + $cond$i55;
   $__a$1 = $cond$i$i90;
  } else $__a$1 = $__a$0;
  $__ninp_$i$i = $21 + 12 | 0;
  $22 = HEAP32[$__ninp_$i$i >> 2] | 0;
  $__einp_$i$i = $21 + 16 | 0;
  if (($22 | 0) == (HEAP32[$__einp_$i$i >> 2] | 0)) $retval$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$21 >> 2] | 0) + 36 >> 2] & 127]($21) | 0; else $retval$0$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$22 >> 2] | 0) | 0;
  if (__ZNSt3__29__num_getIwE19__stage2_float_loopEwRbRcPcRS4_wwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjPw($retval$0$i$i, $__in_units, $__exp, $__a$1, $__a_end, HEAP32[$__decimal_point >> 2] | 0, HEAP32[$__thousands_sep >> 2] | 0, $__grouping, $__g, $__g_end, $__dc, $__atoms) | 0) {
   $44 = $52;
   $__a$2 = $__a$1;
   break;
  }
  $28 = HEAP32[$__ninp_$i$i >> 2] | 0;
  if (($28 | 0) == (HEAP32[$__einp_$i$i >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[$21 >> 2] | 0) + 40 >> 2] & 127]($21) | 0; else {
   HEAP32[$__ninp_$i$i >> 2] = $28 + 4;
   __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$28 >> 2] | 0) | 0;
  }
  $4 = $21;
  $50 = $41;
  $__a$0 = $__a$1;
 }
 $32 = HEAP8[$__grouping + 11 >> 0] | 0;
 if (!((HEAP8[$__in_units >> 0] | 0) == 0 ? 1 : (($32 << 24 >> 24 < 0 ? HEAP32[$__grouping + 4 >> 2] | 0 : $32 & 255) | 0) == 0)) {
  $35 = HEAP32[$__g_end >> 2] | 0;
  if (($35 - $__g | 0) < 160) {
   $36 = HEAP32[$__dc >> 2] | 0;
   HEAP32[$__g_end >> 2] = $35 + 4;
   HEAP32[$35 >> 2] = $36;
  }
 }
 HEAPF64[$__v >> 3] = +__ZNSt3__215__num_get_floatIeEET_PKcS3_Rj($__a$2, HEAP32[$__a_end >> 2] | 0, $__err);
 __ZNSt3__216__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping, $__g, HEAP32[$__g_end >> 2] | 0, $__err);
 if (!$21) $53 = 1; else {
  $39 = HEAP32[$21 + 12 >> 2] | 0;
  if (($39 | 0) == (HEAP32[$21 + 16 >> 2] | 0)) $retval$0$i$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$41 >> 2] | 0) + 36 >> 2] & 127]($21) | 0; else $retval$0$i$i$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$39 >> 2] | 0) | 0;
  if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i$i$i, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
   HEAP32[$__b >> 2] = 0;
   $53 = 1;
  } else $53 = 0;
 }
 do if (!$44) label = 48; else {
  $45 = HEAP32[$44 + 12 >> 2] | 0;
  if (($45 | 0) == (HEAP32[$44 + 16 >> 2] | 0)) $retval$0$i$i13$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$44 >> 2] | 0) + 36 >> 2] & 127]($44) | 0; else $retval$0$i$i13$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$45 >> 2] | 0) | 0;
  if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i13$i$i, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
   HEAP32[$__e >> 2] = 0;
   label = 48;
   break;
  } else if ($53) break; else {
   label = 50;
   break;
  }
 } while (0);
 if ((label | 0) == 48) if ($53) label = 50;
 if ((label | 0) == 50) HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
 $retval$sroa$0$0$copyload = HEAP32[$__b >> 2] | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 STACKTOP = sp;
 return $retval$sroa$0$0$copyload | 0;
}

function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIdEES4_S4_S4_RNS_8ios_baseERjRT_($this, $__b, $__e, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$pre = 0, $10 = 0, $15 = 0, $21 = 0, $22 = 0, $28 = 0, $32 = 0, $35 = 0, $36 = 0, $39 = 0, $4 = 0, $41 = 0, $44 = 0, $45 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $9 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__cap_$i$i = 0, $__dc = 0, $__decimal_point = 0, $__einp_$i$i = 0, $__exp = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__i$0$i$i = 0, $__in_units = 0, $__ninp_$i$i = 0, $__size_$i$i = 0, $__size_$i3$i = 0, $__thousands_sep = 0, $cond$i = 0, $cond$i$i = 0, $cond$i$i90 = 0, $cond$i55 = 0, $cond$i81 = 0, $retval$0$i$i = 0, $retval$0$i$i$i$i = 0, $retval$0$i$i$i$i22 = 0, $retval$0$i$i13$i$i = 0, $retval$0$i$i13$i$i43 = 0, $retval$sroa$0$0$copyload = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 336 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(336);
 $__atoms = sp + 160 | 0;
 $__decimal_point = sp + 328 | 0;
 $__thousands_sep = sp + 324 | 0;
 $__grouping = sp + 312 | 0;
 $__buf = sp + 300 | 0;
 $__a_end = sp + 296 | 0;
 $__g = sp;
 $__g_end = sp + 292 | 0;
 $__dc = sp + 288 | 0;
 $__in_units = sp + 333 | 0;
 $__exp = sp + 332 | 0;
 __ZNSt3__29__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_($__grouping, $__iob, $__atoms, $__decimal_point, $__thousands_sep);
 HEAP32[$__buf >> 2] = 0;
 HEAP32[$__buf + 4 >> 2] = 0;
 HEAP32[$__buf + 8 >> 2] = 0;
 $__i$0$i$i = 0;
 while (1) {
  if (($__i$0$i$i | 0) == 3) break;
  HEAP32[$__buf + ($__i$0$i$i << 2) >> 2] = 0;
  $__i$0$i$i = $__i$0$i$i + 1 | 0;
 }
 $__size_$i$i = $__buf + 11 | 0;
 $__cap_$i$i = $__buf + 8 | 0;
 if ((HEAP8[$__size_$i$i >> 0] | 0) < 0) $cond$i = (HEAP32[$__cap_$i$i >> 2] & 2147483647) + -1 | 0; else $cond$i = 10;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($__buf, $cond$i, 0);
 $cond$i$i = (HEAP8[$__size_$i$i >> 0] | 0) < 0 ? HEAP32[$__buf >> 2] | 0 : $__buf;
 HEAP32[$__a_end >> 2] = $cond$i$i;
 HEAP32[$__g_end >> 2] = $__g;
 HEAP32[$__dc >> 2] = 0;
 HEAP8[$__in_units >> 0] = 1;
 HEAP8[$__exp >> 0] = 69;
 $__size_$i3$i = $__buf + 4 | 0;
 $$pre = HEAP32[$__b >> 2] | 0;
 $4 = $$pre;
 $50 = $$pre;
 $__a$0 = $cond$i$i;
 L8 : while (1) {
  if (!$4) {
   $21 = 0;
   $41 = 0;
   $51 = 1;
  } else {
   $5 = HEAP32[$4 + 12 >> 2] | 0;
   if (($5 | 0) == (HEAP32[$4 + 16 >> 2] | 0)) $retval$0$i$i$i$i22 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$4 >> 2] | 0) + 36 >> 2] & 127]($4) | 0; else $retval$0$i$i$i$i22 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$5 >> 2] | 0) | 0;
   if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i$i$i22, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
    HEAP32[$__b >> 2] = 0;
    $21 = 0;
    $41 = 0;
    $51 = 1;
   } else {
    $21 = $4;
    $41 = $50;
    $51 = 0;
   }
  }
  $9 = HEAP32[$__e >> 2] | 0;
  do if (!$9) label = 19; else {
   $10 = HEAP32[$9 + 12 >> 2] | 0;
   if (($10 | 0) == (HEAP32[$9 + 16 >> 2] | 0)) $retval$0$i$i13$i$i43 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$9 >> 2] | 0) + 36 >> 2] & 127]($9) | 0; else $retval$0$i$i13$i$i43 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$10 >> 2] | 0) | 0;
   if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i13$i$i43, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
    HEAP32[$__e >> 2] = 0;
    label = 19;
    break;
   } else if ($51) {
    $52 = $9;
    break;
   } else {
    $44 = $9;
    $__a$2 = $__a$0;
    break L8;
   }
  } while (0);
  if ((label | 0) == 19) {
   label = 0;
   if ($51) {
    $44 = 0;
    $__a$2 = $__a$0;
    break;
   } else $52 = 0;
  }
  $15 = HEAP8[$__size_$i$i >> 0] | 0;
  $cond$i55 = $15 << 24 >> 24 < 0 ? HEAP32[$__size_$i3$i >> 2] | 0 : $15 & 255;
  if ((HEAP32[$__a_end >> 2] | 0) == ($__a$0 + $cond$i55 | 0)) {
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($__buf, $cond$i55 << 1, 0);
   if ((HEAP8[$__size_$i$i >> 0] | 0) < 0) $cond$i81 = (HEAP32[$__cap_$i$i >> 2] & 2147483647) + -1 | 0; else $cond$i81 = 10;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($__buf, $cond$i81, 0);
   $cond$i$i90 = (HEAP8[$__size_$i$i >> 0] | 0) < 0 ? HEAP32[$__buf >> 2] | 0 : $__buf;
   HEAP32[$__a_end >> 2] = $cond$i$i90 + $cond$i55;
   $__a$1 = $cond$i$i90;
  } else $__a$1 = $__a$0;
  $__ninp_$i$i = $21 + 12 | 0;
  $22 = HEAP32[$__ninp_$i$i >> 2] | 0;
  $__einp_$i$i = $21 + 16 | 0;
  if (($22 | 0) == (HEAP32[$__einp_$i$i >> 2] | 0)) $retval$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$21 >> 2] | 0) + 36 >> 2] & 127]($21) | 0; else $retval$0$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$22 >> 2] | 0) | 0;
  if (__ZNSt3__29__num_getIwE19__stage2_float_loopEwRbRcPcRS4_wwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjPw($retval$0$i$i, $__in_units, $__exp, $__a$1, $__a_end, HEAP32[$__decimal_point >> 2] | 0, HEAP32[$__thousands_sep >> 2] | 0, $__grouping, $__g, $__g_end, $__dc, $__atoms) | 0) {
   $44 = $52;
   $__a$2 = $__a$1;
   break;
  }
  $28 = HEAP32[$__ninp_$i$i >> 2] | 0;
  if (($28 | 0) == (HEAP32[$__einp_$i$i >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[$21 >> 2] | 0) + 40 >> 2] & 127]($21) | 0; else {
   HEAP32[$__ninp_$i$i >> 2] = $28 + 4;
   __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$28 >> 2] | 0) | 0;
  }
  $4 = $21;
  $50 = $41;
  $__a$0 = $__a$1;
 }
 $32 = HEAP8[$__grouping + 11 >> 0] | 0;
 if (!((HEAP8[$__in_units >> 0] | 0) == 0 ? 1 : (($32 << 24 >> 24 < 0 ? HEAP32[$__grouping + 4 >> 2] | 0 : $32 & 255) | 0) == 0)) {
  $35 = HEAP32[$__g_end >> 2] | 0;
  if (($35 - $__g | 0) < 160) {
   $36 = HEAP32[$__dc >> 2] | 0;
   HEAP32[$__g_end >> 2] = $35 + 4;
   HEAP32[$35 >> 2] = $36;
  }
 }
 HEAPF64[$__v >> 3] = +__ZNSt3__215__num_get_floatIdEET_PKcS3_Rj($__a$2, HEAP32[$__a_end >> 2] | 0, $__err);
 __ZNSt3__216__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping, $__g, HEAP32[$__g_end >> 2] | 0, $__err);
 if (!$21) $53 = 1; else {
  $39 = HEAP32[$21 + 12 >> 2] | 0;
  if (($39 | 0) == (HEAP32[$21 + 16 >> 2] | 0)) $retval$0$i$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$41 >> 2] | 0) + 36 >> 2] & 127]($21) | 0; else $retval$0$i$i$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$39 >> 2] | 0) | 0;
  if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i$i$i, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
   HEAP32[$__b >> 2] = 0;
   $53 = 1;
  } else $53 = 0;
 }
 do if (!$44) label = 48; else {
  $45 = HEAP32[$44 + 12 >> 2] | 0;
  if (($45 | 0) == (HEAP32[$44 + 16 >> 2] | 0)) $retval$0$i$i13$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$44 >> 2] | 0) + 36 >> 2] & 127]($44) | 0; else $retval$0$i$i13$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$45 >> 2] | 0) | 0;
  if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i13$i$i, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
   HEAP32[$__e >> 2] = 0;
   label = 48;
   break;
  } else if ($53) break; else {
   label = 50;
   break;
  }
 } while (0);
 if ((label | 0) == 48) if ($53) label = 50;
 if ((label | 0) == 50) HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
 $retval$sroa$0$0$copyload = HEAP32[$__b >> 2] | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 STACKTOP = sp;
 return $retval$sroa$0$0$copyload | 0;
}

function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIeEES4_S4_S4_RNS_8ios_baseERjRT_($this, $__b, $__e, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$pre = 0, $10 = 0, $15 = 0, $21 = 0, $22 = 0, $28 = 0, $32 = 0, $35 = 0, $36 = 0, $39 = 0, $4 = 0, $41 = 0, $44 = 0, $45 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $9 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__cap_$i$i = 0, $__dc = 0, $__decimal_point = 0, $__einp_$i$i = 0, $__exp = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__i$0$i$i = 0, $__in_units = 0, $__ninp_$i$i = 0, $__size_$i$i = 0, $__size_$i3$i = 0, $__thousands_sep = 0, $cond$i = 0, $cond$i$i = 0, $cond$i$i90 = 0, $cond$i55 = 0, $cond$i81 = 0, $retval$0$i$i = 0, $retval$0$i$i$i$i = 0, $retval$0$i$i$i$i22 = 0, $retval$0$i$i13$i$i = 0, $retval$0$i$i13$i$i43 = 0, $retval$sroa$0$0$copyload = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(240);
 $__atoms = sp + 160 | 0;
 $__decimal_point = sp + 231 | 0;
 $__thousands_sep = sp + 230 | 0;
 $__grouping = sp + 216 | 0;
 $__buf = sp + 204 | 0;
 $__a_end = sp + 200 | 0;
 $__g = sp;
 $__g_end = sp + 196 | 0;
 $__dc = sp + 192 | 0;
 $__in_units = sp + 229 | 0;
 $__exp = sp + 228 | 0;
 __ZNSt3__29__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_($__grouping, $__iob, $__atoms, $__decimal_point, $__thousands_sep);
 HEAP32[$__buf >> 2] = 0;
 HEAP32[$__buf + 4 >> 2] = 0;
 HEAP32[$__buf + 8 >> 2] = 0;
 $__i$0$i$i = 0;
 while (1) {
  if (($__i$0$i$i | 0) == 3) break;
  HEAP32[$__buf + ($__i$0$i$i << 2) >> 2] = 0;
  $__i$0$i$i = $__i$0$i$i + 1 | 0;
 }
 $__size_$i$i = $__buf + 11 | 0;
 $__cap_$i$i = $__buf + 8 | 0;
 if ((HEAP8[$__size_$i$i >> 0] | 0) < 0) $cond$i = (HEAP32[$__cap_$i$i >> 2] & 2147483647) + -1 | 0; else $cond$i = 10;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($__buf, $cond$i, 0);
 $cond$i$i = (HEAP8[$__size_$i$i >> 0] | 0) < 0 ? HEAP32[$__buf >> 2] | 0 : $__buf;
 HEAP32[$__a_end >> 2] = $cond$i$i;
 HEAP32[$__g_end >> 2] = $__g;
 HEAP32[$__dc >> 2] = 0;
 HEAP8[$__in_units >> 0] = 1;
 HEAP8[$__exp >> 0] = 69;
 $__size_$i3$i = $__buf + 4 | 0;
 $$pre = HEAP32[$__b >> 2] | 0;
 $4 = $$pre;
 $50 = $$pre;
 $__a$0 = $cond$i$i;
 L8 : while (1) {
  if (!$4) {
   $21 = 0;
   $41 = 0;
   $51 = 1;
  } else {
   $5 = HEAP32[$4 + 12 >> 2] | 0;
   if (($5 | 0) == (HEAP32[$4 + 16 >> 2] | 0)) $retval$0$i$i$i$i22 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$4 >> 2] | 0) + 36 >> 2] & 127]($4) | 0; else $retval$0$i$i$i$i22 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$5 >> 0] | 0) | 0;
   if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i$i$i22, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
    HEAP32[$__b >> 2] = 0;
    $21 = 0;
    $41 = 0;
    $51 = 1;
   } else {
    $21 = $4;
    $41 = $50;
    $51 = 0;
   }
  }
  $9 = HEAP32[$__e >> 2] | 0;
  do if (!$9) label = 19; else {
   $10 = HEAP32[$9 + 12 >> 2] | 0;
   if (($10 | 0) == (HEAP32[$9 + 16 >> 2] | 0)) $retval$0$i$i13$i$i43 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$9 >> 2] | 0) + 36 >> 2] & 127]($9) | 0; else $retval$0$i$i13$i$i43 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$10 >> 0] | 0) | 0;
   if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i13$i$i43, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
    HEAP32[$__e >> 2] = 0;
    label = 19;
    break;
   } else if ($51) {
    $52 = $9;
    break;
   } else {
    $44 = $9;
    $__a$2 = $__a$0;
    break L8;
   }
  } while (0);
  if ((label | 0) == 19) {
   label = 0;
   if ($51) {
    $44 = 0;
    $__a$2 = $__a$0;
    break;
   } else $52 = 0;
  }
  $15 = HEAP8[$__size_$i$i >> 0] | 0;
  $cond$i55 = $15 << 24 >> 24 < 0 ? HEAP32[$__size_$i3$i >> 2] | 0 : $15 & 255;
  if ((HEAP32[$__a_end >> 2] | 0) == ($__a$0 + $cond$i55 | 0)) {
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($__buf, $cond$i55 << 1, 0);
   if ((HEAP8[$__size_$i$i >> 0] | 0) < 0) $cond$i81 = (HEAP32[$__cap_$i$i >> 2] & 2147483647) + -1 | 0; else $cond$i81 = 10;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($__buf, $cond$i81, 0);
   $cond$i$i90 = (HEAP8[$__size_$i$i >> 0] | 0) < 0 ? HEAP32[$__buf >> 2] | 0 : $__buf;
   HEAP32[$__a_end >> 2] = $cond$i$i90 + $cond$i55;
   $__a$1 = $cond$i$i90;
  } else $__a$1 = $__a$0;
  $__ninp_$i$i = $21 + 12 | 0;
  $22 = HEAP32[$__ninp_$i$i >> 2] | 0;
  $__einp_$i$i = $21 + 16 | 0;
  if (($22 | 0) == (HEAP32[$__einp_$i$i >> 2] | 0)) $retval$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$21 >> 2] | 0) + 36 >> 2] & 127]($21) | 0; else $retval$0$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$22 >> 0] | 0) | 0;
  if (__ZNSt3__29__num_getIcE19__stage2_float_loopEcRbRcPcRS4_ccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjS4_($retval$0$i$i & 255, $__in_units, $__exp, $__a$1, $__a_end, HEAP8[$__decimal_point >> 0] | 0, HEAP8[$__thousands_sep >> 0] | 0, $__grouping, $__g, $__g_end, $__dc, $__atoms) | 0) {
   $44 = $52;
   $__a$2 = $__a$1;
   break;
  }
  $28 = HEAP32[$__ninp_$i$i >> 2] | 0;
  if (($28 | 0) == (HEAP32[$__einp_$i$i >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[$21 >> 2] | 0) + 40 >> 2] & 127]($21) | 0; else {
   HEAP32[$__ninp_$i$i >> 2] = $28 + 1;
   __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$28 >> 0] | 0) | 0;
  }
  $4 = $21;
  $50 = $41;
  $__a$0 = $__a$1;
 }
 $32 = HEAP8[$__grouping + 11 >> 0] | 0;
 if (!((HEAP8[$__in_units >> 0] | 0) == 0 ? 1 : (($32 << 24 >> 24 < 0 ? HEAP32[$__grouping + 4 >> 2] | 0 : $32 & 255) | 0) == 0)) {
  $35 = HEAP32[$__g_end >> 2] | 0;
  if (($35 - $__g | 0) < 160) {
   $36 = HEAP32[$__dc >> 2] | 0;
   HEAP32[$__g_end >> 2] = $35 + 4;
   HEAP32[$35 >> 2] = $36;
  }
 }
 HEAPF64[$__v >> 3] = +__ZNSt3__215__num_get_floatIeEET_PKcS3_Rj($__a$2, HEAP32[$__a_end >> 2] | 0, $__err);
 __ZNSt3__216__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping, $__g, HEAP32[$__g_end >> 2] | 0, $__err);
 if (!$21) $53 = 1; else {
  $39 = HEAP32[$21 + 12 >> 2] | 0;
  if (($39 | 0) == (HEAP32[$21 + 16 >> 2] | 0)) $retval$0$i$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$41 >> 2] | 0) + 36 >> 2] & 127]($21) | 0; else $retval$0$i$i$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$39 >> 0] | 0) | 0;
  if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i$i$i, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
   HEAP32[$__b >> 2] = 0;
   $53 = 1;
  } else $53 = 0;
 }
 do if (!$44) label = 48; else {
  $45 = HEAP32[$44 + 12 >> 2] | 0;
  if (($45 | 0) == (HEAP32[$44 + 16 >> 2] | 0)) $retval$0$i$i13$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$44 >> 2] | 0) + 36 >> 2] & 127]($44) | 0; else $retval$0$i$i13$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$45 >> 0] | 0) | 0;
  if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i13$i$i, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
   HEAP32[$__e >> 2] = 0;
   label = 48;
   break;
  } else if ($53) break; else {
   label = 50;
   break;
  }
 } while (0);
 if ((label | 0) == 48) if ($53) label = 50;
 if ((label | 0) == 50) HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
 $retval$sroa$0$0$copyload = HEAP32[$__b >> 2] | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 STACKTOP = sp;
 return $retval$sroa$0$0$copyload | 0;
}

function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIdEES4_S4_S4_RNS_8ios_baseERjRT_($this, $__b, $__e, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$pre = 0, $10 = 0, $15 = 0, $21 = 0, $22 = 0, $28 = 0, $32 = 0, $35 = 0, $36 = 0, $39 = 0, $4 = 0, $41 = 0, $44 = 0, $45 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $9 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__cap_$i$i = 0, $__dc = 0, $__decimal_point = 0, $__einp_$i$i = 0, $__exp = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__i$0$i$i = 0, $__in_units = 0, $__ninp_$i$i = 0, $__size_$i$i = 0, $__size_$i3$i = 0, $__thousands_sep = 0, $cond$i = 0, $cond$i$i = 0, $cond$i$i90 = 0, $cond$i55 = 0, $cond$i81 = 0, $retval$0$i$i = 0, $retval$0$i$i$i$i = 0, $retval$0$i$i$i$i22 = 0, $retval$0$i$i13$i$i = 0, $retval$0$i$i13$i$i43 = 0, $retval$sroa$0$0$copyload = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(240);
 $__atoms = sp + 160 | 0;
 $__decimal_point = sp + 231 | 0;
 $__thousands_sep = sp + 230 | 0;
 $__grouping = sp + 216 | 0;
 $__buf = sp + 204 | 0;
 $__a_end = sp + 200 | 0;
 $__g = sp;
 $__g_end = sp + 196 | 0;
 $__dc = sp + 192 | 0;
 $__in_units = sp + 229 | 0;
 $__exp = sp + 228 | 0;
 __ZNSt3__29__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_($__grouping, $__iob, $__atoms, $__decimal_point, $__thousands_sep);
 HEAP32[$__buf >> 2] = 0;
 HEAP32[$__buf + 4 >> 2] = 0;
 HEAP32[$__buf + 8 >> 2] = 0;
 $__i$0$i$i = 0;
 while (1) {
  if (($__i$0$i$i | 0) == 3) break;
  HEAP32[$__buf + ($__i$0$i$i << 2) >> 2] = 0;
  $__i$0$i$i = $__i$0$i$i + 1 | 0;
 }
 $__size_$i$i = $__buf + 11 | 0;
 $__cap_$i$i = $__buf + 8 | 0;
 if ((HEAP8[$__size_$i$i >> 0] | 0) < 0) $cond$i = (HEAP32[$__cap_$i$i >> 2] & 2147483647) + -1 | 0; else $cond$i = 10;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($__buf, $cond$i, 0);
 $cond$i$i = (HEAP8[$__size_$i$i >> 0] | 0) < 0 ? HEAP32[$__buf >> 2] | 0 : $__buf;
 HEAP32[$__a_end >> 2] = $cond$i$i;
 HEAP32[$__g_end >> 2] = $__g;
 HEAP32[$__dc >> 2] = 0;
 HEAP8[$__in_units >> 0] = 1;
 HEAP8[$__exp >> 0] = 69;
 $__size_$i3$i = $__buf + 4 | 0;
 $$pre = HEAP32[$__b >> 2] | 0;
 $4 = $$pre;
 $50 = $$pre;
 $__a$0 = $cond$i$i;
 L8 : while (1) {
  if (!$4) {
   $21 = 0;
   $41 = 0;
   $51 = 1;
  } else {
   $5 = HEAP32[$4 + 12 >> 2] | 0;
   if (($5 | 0) == (HEAP32[$4 + 16 >> 2] | 0)) $retval$0$i$i$i$i22 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$4 >> 2] | 0) + 36 >> 2] & 127]($4) | 0; else $retval$0$i$i$i$i22 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$5 >> 0] | 0) | 0;
   if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i$i$i22, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
    HEAP32[$__b >> 2] = 0;
    $21 = 0;
    $41 = 0;
    $51 = 1;
   } else {
    $21 = $4;
    $41 = $50;
    $51 = 0;
   }
  }
  $9 = HEAP32[$__e >> 2] | 0;
  do if (!$9) label = 19; else {
   $10 = HEAP32[$9 + 12 >> 2] | 0;
   if (($10 | 0) == (HEAP32[$9 + 16 >> 2] | 0)) $retval$0$i$i13$i$i43 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$9 >> 2] | 0) + 36 >> 2] & 127]($9) | 0; else $retval$0$i$i13$i$i43 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$10 >> 0] | 0) | 0;
   if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i13$i$i43, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
    HEAP32[$__e >> 2] = 0;
    label = 19;
    break;
   } else if ($51) {
    $52 = $9;
    break;
   } else {
    $44 = $9;
    $__a$2 = $__a$0;
    break L8;
   }
  } while (0);
  if ((label | 0) == 19) {
   label = 0;
   if ($51) {
    $44 = 0;
    $__a$2 = $__a$0;
    break;
   } else $52 = 0;
  }
  $15 = HEAP8[$__size_$i$i >> 0] | 0;
  $cond$i55 = $15 << 24 >> 24 < 0 ? HEAP32[$__size_$i3$i >> 2] | 0 : $15 & 255;
  if ((HEAP32[$__a_end >> 2] | 0) == ($__a$0 + $cond$i55 | 0)) {
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($__buf, $cond$i55 << 1, 0);
   if ((HEAP8[$__size_$i$i >> 0] | 0) < 0) $cond$i81 = (HEAP32[$__cap_$i$i >> 2] & 2147483647) + -1 | 0; else $cond$i81 = 10;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($__buf, $cond$i81, 0);
   $cond$i$i90 = (HEAP8[$__size_$i$i >> 0] | 0) < 0 ? HEAP32[$__buf >> 2] | 0 : $__buf;
   HEAP32[$__a_end >> 2] = $cond$i$i90 + $cond$i55;
   $__a$1 = $cond$i$i90;
  } else $__a$1 = $__a$0;
  $__ninp_$i$i = $21 + 12 | 0;
  $22 = HEAP32[$__ninp_$i$i >> 2] | 0;
  $__einp_$i$i = $21 + 16 | 0;
  if (($22 | 0) == (HEAP32[$__einp_$i$i >> 2] | 0)) $retval$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$21 >> 2] | 0) + 36 >> 2] & 127]($21) | 0; else $retval$0$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$22 >> 0] | 0) | 0;
  if (__ZNSt3__29__num_getIcE19__stage2_float_loopEcRbRcPcRS4_ccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjS4_($retval$0$i$i & 255, $__in_units, $__exp, $__a$1, $__a_end, HEAP8[$__decimal_point >> 0] | 0, HEAP8[$__thousands_sep >> 0] | 0, $__grouping, $__g, $__g_end, $__dc, $__atoms) | 0) {
   $44 = $52;
   $__a$2 = $__a$1;
   break;
  }
  $28 = HEAP32[$__ninp_$i$i >> 2] | 0;
  if (($28 | 0) == (HEAP32[$__einp_$i$i >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[$21 >> 2] | 0) + 40 >> 2] & 127]($21) | 0; else {
   HEAP32[$__ninp_$i$i >> 2] = $28 + 1;
   __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$28 >> 0] | 0) | 0;
  }
  $4 = $21;
  $50 = $41;
  $__a$0 = $__a$1;
 }
 $32 = HEAP8[$__grouping + 11 >> 0] | 0;
 if (!((HEAP8[$__in_units >> 0] | 0) == 0 ? 1 : (($32 << 24 >> 24 < 0 ? HEAP32[$__grouping + 4 >> 2] | 0 : $32 & 255) | 0) == 0)) {
  $35 = HEAP32[$__g_end >> 2] | 0;
  if (($35 - $__g | 0) < 160) {
   $36 = HEAP32[$__dc >> 2] | 0;
   HEAP32[$__g_end >> 2] = $35 + 4;
   HEAP32[$35 >> 2] = $36;
  }
 }
 HEAPF64[$__v >> 3] = +__ZNSt3__215__num_get_floatIdEET_PKcS3_Rj($__a$2, HEAP32[$__a_end >> 2] | 0, $__err);
 __ZNSt3__216__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping, $__g, HEAP32[$__g_end >> 2] | 0, $__err);
 if (!$21) $53 = 1; else {
  $39 = HEAP32[$21 + 12 >> 2] | 0;
  if (($39 | 0) == (HEAP32[$21 + 16 >> 2] | 0)) $retval$0$i$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$41 >> 2] | 0) + 36 >> 2] & 127]($21) | 0; else $retval$0$i$i$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$39 >> 0] | 0) | 0;
  if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i$i$i, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
   HEAP32[$__b >> 2] = 0;
   $53 = 1;
  } else $53 = 0;
 }
 do if (!$44) label = 48; else {
  $45 = HEAP32[$44 + 12 >> 2] | 0;
  if (($45 | 0) == (HEAP32[$44 + 16 >> 2] | 0)) $retval$0$i$i13$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$44 >> 2] | 0) + 36 >> 2] & 127]($44) | 0; else $retval$0$i$i13$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$45 >> 0] | 0) | 0;
  if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i13$i$i, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
   HEAP32[$__e >> 2] = 0;
   label = 48;
   break;
  } else if ($53) break; else {
   label = 50;
   break;
  }
 } while (0);
 if ((label | 0) == 48) if ($53) label = 50;
 if ((label | 0) == 50) HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
 $retval$sroa$0$0$copyload = HEAP32[$__b >> 2] | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 STACKTOP = sp;
 return $retval$sroa$0$0$copyload | 0;
}

function _stbir__normalize_downsample_coefficients($contributors, $coefficients, $filter, $scale_ratio, $input_size, $output_size) {
 $contributors = $contributors | 0;
 $coefficients = $coefficients | 0;
 $filter = $filter | 0;
 $scale_ratio = Math_fround($scale_ratio);
 $input_size = $input_size | 0;
 $output_size = $output_size | 0;
 var $0 = f0, $101 = f0, $104 = f0, $20 = f0, $27 = f0, $47 = f0, $50 = f0, $67 = f0, $71 = 0, $97 = f0, $arrayidx55 = 0, $arrayidx63 = 0, $call35 = 0, $call98 = 0, $cmp53 = 0, $coefficient = 0, $coefficients$addr = 0, $contributors$addr = 0, $filter$addr = 0, $i = 0, $input_size$addr = 0, $j = 0, $max = 0, $num_coefficients = 0, $num_contributors = 0, $output_size$addr = 0, $range = 0, $scale = 0, $scale_ratio$addr = 0, $skip = 0, $total = 0, $width = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(80);
 $contributors$addr = sp + 64 | 0;
 $coefficients$addr = sp + 60 | 0;
 $filter$addr = sp + 56 | 0;
 $scale_ratio$addr = sp + 52 | 0;
 $input_size$addr = sp + 48 | 0;
 $output_size$addr = sp + 44 | 0;
 $num_contributors = sp + 40 | 0;
 $num_coefficients = sp + 36 | 0;
 $i = sp + 32 | 0;
 $j = sp + 28 | 0;
 $skip = sp + 24 | 0;
 $scale = sp + 20 | 0;
 $total = sp + 16 | 0;
 $coefficient = sp + 12 | 0;
 $range = sp + 8 | 0;
 $max = sp + 4 | 0;
 $width = sp;
 HEAP32[$contributors$addr >> 2] = $contributors;
 HEAP32[$coefficients$addr >> 2] = $coefficients;
 HEAP32[$filter$addr >> 2] = $filter;
 HEAPF32[$scale_ratio$addr >> 2] = $scale_ratio;
 HEAP32[$input_size$addr >> 2] = $input_size;
 HEAP32[$output_size$addr >> 2] = $output_size;
 $0 = Math_fround(HEAPF32[$scale_ratio$addr >> 2]);
 HEAP32[$num_contributors >> 2] = _stbir__get_contributors($0, HEAP32[$filter$addr >> 2] | 0, HEAP32[$input_size$addr >> 2] | 0, HEAP32[$output_size$addr >> 2] | 0) | 0;
 HEAP32[$num_coefficients >> 2] = _stbir__get_coefficient_width(HEAP32[$filter$addr >> 2] | 0, Math_fround(HEAPF32[$scale_ratio$addr >> 2])) | 0;
 HEAP32[$i >> 2] = 0;
 while (1) {
  if ((HEAP32[$i >> 2] | 0) >= (HEAP32[$output_size$addr >> 2] | 0)) {
   label = 22;
   break;
  }
  HEAPF32[$total >> 2] = Math_fround(0.0);
  HEAP32[$j >> 2] = 0;
  while (1) {
   if ((HEAP32[$j >> 2] | 0) >= (HEAP32[$num_contributors >> 2] | 0)) break;
   if ((HEAP32[$i >> 2] | 0) >= (HEAP32[(HEAP32[$contributors$addr >> 2] | 0) + (HEAP32[$j >> 2] << 3) >> 2] | 0)) if ((HEAP32[$i >> 2] | 0) <= (HEAP32[(HEAP32[$contributors$addr >> 2] | 0) + (HEAP32[$j >> 2] << 3) + 4 >> 2] | 0)) {
    $20 = Math_fround(HEAPF32[$scale_ratio$addr >> 2]);
    HEAPF32[$coefficient >> 2] = Math_fround(HEAPF32[(_stbir__get_coefficient(HEAP32[$coefficients$addr >> 2] | 0, HEAP32[$filter$addr >> 2] | 0, $20, HEAP32[$j >> 2] | 0, (HEAP32[$i >> 2] | 0) - (HEAP32[(HEAP32[$contributors$addr >> 2] | 0) + (HEAP32[$j >> 2] << 3) >> 2] | 0) | 0) | 0) >> 2]);
    $27 = Math_fround(HEAPF32[$coefficient >> 2]);
    HEAPF32[$total >> 2] = Math_fround(Math_fround(HEAPF32[$total >> 2]) + $27);
   } else label = 8; else label = 8;
   if ((label | 0) == 8) {
    label = 0;
    if ((HEAP32[$i >> 2] | 0) < (HEAP32[(HEAP32[$contributors$addr >> 2] | 0) + (HEAP32[$j >> 2] << 3) >> 2] | 0)) break;
   }
   HEAP32[$j >> 2] = (HEAP32[$j >> 2] | 0) + 1;
  }
  if (!(Math_fround(HEAPF32[$total >> 2]) > Math_fround(.899999976))) {
   label = 11;
   break;
  }
  if (!(Math_fround(HEAPF32[$total >> 2]) < Math_fround(1.10000002))) {
   label = 13;
   break;
  }
  HEAPF32[$scale >> 2] = Math_fround(Math_fround(1.0) / Math_fround(HEAPF32[$total >> 2]));
  HEAP32[$j >> 2] = 0;
  while (1) {
   if ((HEAP32[$j >> 2] | 0) >= (HEAP32[$num_contributors >> 2] | 0)) break;
   if ((HEAP32[$i >> 2] | 0) >= (HEAP32[(HEAP32[$contributors$addr >> 2] | 0) + (HEAP32[$j >> 2] << 3) >> 2] | 0)) if ((HEAP32[$i >> 2] | 0) <= (HEAP32[(HEAP32[$contributors$addr >> 2] | 0) + (HEAP32[$j >> 2] << 3) + 4 >> 2] | 0)) {
    $47 = Math_fround(HEAPF32[$scale >> 2]);
    $50 = Math_fround(HEAPF32[$scale_ratio$addr >> 2]);
    $call35 = _stbir__get_coefficient(HEAP32[$coefficients$addr >> 2] | 0, HEAP32[$filter$addr >> 2] | 0, $50, HEAP32[$j >> 2] | 0, (HEAP32[$i >> 2] | 0) - (HEAP32[(HEAP32[$contributors$addr >> 2] | 0) + (HEAP32[$j >> 2] << 3) >> 2] | 0) | 0) | 0;
    HEAPF32[$call35 >> 2] = Math_fround(Math_fround(HEAPF32[$call35 >> 2]) * $47);
   } else label = 19; else label = 19;
   if ((label | 0) == 19) {
    label = 0;
    if ((HEAP32[$i >> 2] | 0) < (HEAP32[(HEAP32[$contributors$addr >> 2] | 0) + (HEAP32[$j >> 2] << 3) >> 2] | 0)) break;
   }
   HEAP32[$j >> 2] = (HEAP32[$j >> 2] | 0) + 1;
  }
  HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
 }
 if ((label | 0) == 11) ___assert_fail(35956, 34244, 1140, 35969); else if ((label | 0) == 13) ___assert_fail(36010, 34244, 1141, 35969); else if ((label | 0) == 22) {
  HEAP32[$j >> 2] = 0;
  while (1) {
   if ((HEAP32[$j >> 2] | 0) >= (HEAP32[$num_contributors >> 2] | 0)) break;
   HEAP32[$skip >> 2] = 0;
   while (1) {
    $67 = Math_fround(HEAPF32[$scale_ratio$addr >> 2]);
    $cmp53 = Math_fround(HEAPF32[(_stbir__get_coefficient(HEAP32[$coefficients$addr >> 2] | 0, HEAP32[$filter$addr >> 2] | 0, $67, HEAP32[$j >> 2] | 0, HEAP32[$skip >> 2] | 0) | 0) >> 2]) == Math_fround(0.0);
    $71 = HEAP32[$skip >> 2] | 0;
    if (!$cmp53) break;
    HEAP32[$skip >> 2] = $71 + 1;
   }
   $arrayidx55 = (HEAP32[$contributors$addr >> 2] | 0) + (HEAP32[$j >> 2] << 3) | 0;
   HEAP32[$arrayidx55 >> 2] = (HEAP32[$arrayidx55 >> 2] | 0) + $71;
   while (1) {
    $arrayidx63 = (HEAP32[$contributors$addr >> 2] | 0) + (HEAP32[$j >> 2] << 3) | 0;
    if ((HEAP32[(HEAP32[$contributors$addr >> 2] | 0) + (HEAP32[$j >> 2] << 3) >> 2] | 0) >= 0) break;
    HEAP32[$arrayidx63 >> 2] = (HEAP32[$arrayidx63 >> 2] | 0) + 1;
    HEAP32[$skip >> 2] = (HEAP32[$skip >> 2] | 0) + 1;
   }
   HEAP32[$range >> 2] = (HEAP32[$arrayidx63 + 4 >> 2] | 0) - (HEAP32[(HEAP32[$contributors$addr >> 2] | 0) + (HEAP32[$j >> 2] << 3) >> 2] | 0) + 1;
   HEAP32[$max >> 2] = _stbir__min(HEAP32[$num_coefficients >> 2] | 0, HEAP32[$range >> 2] | 0) | 0;
   HEAP32[$width >> 2] = _stbir__get_coefficient_width(HEAP32[$filter$addr >> 2] | 0, Math_fround(HEAPF32[$scale_ratio$addr >> 2])) | 0;
   HEAP32[$i >> 2] = 0;
   while (1) {
    if ((HEAP32[$i >> 2] | 0) >= (HEAP32[$max >> 2] | 0)) break;
    if (((HEAP32[$i >> 2] | 0) + (HEAP32[$skip >> 2] | 0) | 0) >= (HEAP32[$width >> 2] | 0)) break;
    $97 = Math_fround(HEAPF32[$scale_ratio$addr >> 2]);
    $101 = Math_fround(HEAPF32[(_stbir__get_coefficient(HEAP32[$coefficients$addr >> 2] | 0, HEAP32[$filter$addr >> 2] | 0, $97, HEAP32[$j >> 2] | 0, (HEAP32[$i >> 2] | 0) + (HEAP32[$skip >> 2] | 0) | 0) | 0) >> 2]);
    $104 = Math_fround(HEAPF32[$scale_ratio$addr >> 2]);
    HEAPF32[(_stbir__get_coefficient(HEAP32[$coefficients$addr >> 2] | 0, HEAP32[$filter$addr >> 2] | 0, $104, HEAP32[$j >> 2] | 0, HEAP32[$i >> 2] | 0) | 0) >> 2] = $101;
    HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
   }
   HEAP32[$j >> 2] = (HEAP32[$j >> 2] | 0) + 1;
  }
  HEAP32[$i >> 2] = 0;
  while (1) {
   if ((HEAP32[$i >> 2] | 0) >= (HEAP32[$num_contributors >> 2] | 0)) break;
   $call98 = _stbir__min(HEAP32[(HEAP32[$contributors$addr >> 2] | 0) + (HEAP32[$i >> 2] << 3) + 4 >> 2] | 0, (HEAP32[$output_size$addr >> 2] | 0) - 1 | 0) | 0;
   HEAP32[(HEAP32[$contributors$addr >> 2] | 0) + (HEAP32[$i >> 2] << 3) + 4 >> 2] = $call98;
   HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
  }
  STACKTOP = sp;
  return;
 }
}

function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedIyEES4_S4_S4_RNS_8ios_baseERjRT_($this, $__b, $__e, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$pre = 0, $10 = 0, $15 = 0, $21 = 0, $22 = 0, $27 = 0, $31 = 0, $33 = 0, $34 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $43 = 0, $45 = 0, $48 = 0, $49 = 0, $5 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $9 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__buf = 0, $__cap_$i$i = 0, $__dc = 0, $__einp_$i$i = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__i$0$i$i = 0, $__ninp_$i$i = 0, $__size_$i$i = 0, $__size_$i3$i = 0, $__thousands_sep = 0, $call = 0, $call2 = 0, $cond$i = 0, $cond$i$i = 0, $cond$i$i96 = 0, $cond$i61 = 0, $cond$i87 = 0, $retval$0$i$i = 0, $retval$0$i$i$i$i = 0, $retval$0$i$i$i$i28 = 0, $retval$0$i$i13$i$i = 0, $retval$0$i$i13$i$i49 = 0, $retval$sroa$0$0$copyload = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(304);
 $__thousands_sep = sp + 300 | 0;
 $__grouping = sp + 288 | 0;
 $__buf = sp + 276 | 0;
 $__a_end = sp + 272 | 0;
 $__g = sp;
 $__g_end = sp + 268 | 0;
 $__dc = sp + 264 | 0;
 $call = __ZNSt3__214__num_get_base10__get_baseERNS_8ios_baseE($__iob) | 0;
 $call2 = __ZNKSt3__29__num_getIwE10__do_widenERNS_8ios_baseEPw($this, $__iob, sp + 160 | 0) | 0;
 __ZNSt3__29__num_getIwE17__stage2_int_prepERNS_8ios_baseERw($__grouping, $__iob, $__thousands_sep);
 HEAP32[$__buf >> 2] = 0;
 HEAP32[$__buf + 4 >> 2] = 0;
 HEAP32[$__buf + 8 >> 2] = 0;
 $__i$0$i$i = 0;
 while (1) {
  if (($__i$0$i$i | 0) == 3) break;
  HEAP32[$__buf + ($__i$0$i$i << 2) >> 2] = 0;
  $__i$0$i$i = $__i$0$i$i + 1 | 0;
 }
 $__size_$i$i = $__buf + 11 | 0;
 $__cap_$i$i = $__buf + 8 | 0;
 if ((HEAP8[$__size_$i$i >> 0] | 0) < 0) $cond$i = (HEAP32[$__cap_$i$i >> 2] & 2147483647) + -1 | 0; else $cond$i = 10;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($__buf, $cond$i, 0);
 $cond$i$i = (HEAP8[$__size_$i$i >> 0] | 0) < 0 ? HEAP32[$__buf >> 2] | 0 : $__buf;
 HEAP32[$__a_end >> 2] = $cond$i$i;
 HEAP32[$__g_end >> 2] = $__g;
 HEAP32[$__dc >> 2] = 0;
 $__size_$i3$i = $__buf + 4 | 0;
 $$pre = HEAP32[$__b >> 2] | 0;
 $4 = $$pre;
 $54 = $$pre;
 $__a$0 = $cond$i$i;
 L8 : while (1) {
  if (!$4) {
   $21 = 0;
   $45 = 0;
   $55 = 1;
  } else {
   $5 = HEAP32[$4 + 12 >> 2] | 0;
   if (($5 | 0) == (HEAP32[$4 + 16 >> 2] | 0)) $retval$0$i$i$i$i28 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$4 >> 2] | 0) + 36 >> 2] & 127]($4) | 0; else $retval$0$i$i$i$i28 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$5 >> 2] | 0) | 0;
   if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i$i$i28, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
    HEAP32[$__b >> 2] = 0;
    $21 = 0;
    $45 = 0;
    $55 = 1;
   } else {
    $21 = $4;
    $45 = $54;
    $55 = 0;
   }
  }
  $9 = HEAP32[$__e >> 2] | 0;
  do if (!$9) label = 19; else {
   $10 = HEAP32[$9 + 12 >> 2] | 0;
   if (($10 | 0) == (HEAP32[$9 + 16 >> 2] | 0)) $retval$0$i$i13$i$i49 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$9 >> 2] | 0) + 36 >> 2] & 127]($9) | 0; else $retval$0$i$i13$i$i49 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$10 >> 2] | 0) | 0;
   if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i13$i$i49, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
    HEAP32[$__e >> 2] = 0;
    label = 19;
    break;
   } else if ($55) {
    $56 = $9;
    break;
   } else {
    $48 = $9;
    $__a$2 = $__a$0;
    break L8;
   }
  } while (0);
  if ((label | 0) == 19) {
   label = 0;
   if ($55) {
    $48 = 0;
    $__a$2 = $__a$0;
    break;
   } else $56 = 0;
  }
  $15 = HEAP8[$__size_$i$i >> 0] | 0;
  $cond$i61 = $15 << 24 >> 24 < 0 ? HEAP32[$__size_$i3$i >> 2] | 0 : $15 & 255;
  if ((HEAP32[$__a_end >> 2] | 0) == ($__a$0 + $cond$i61 | 0)) {
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($__buf, $cond$i61 << 1, 0);
   if ((HEAP8[$__size_$i$i >> 0] | 0) < 0) $cond$i87 = (HEAP32[$__cap_$i$i >> 2] & 2147483647) + -1 | 0; else $cond$i87 = 10;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($__buf, $cond$i87, 0);
   $cond$i$i96 = (HEAP8[$__size_$i$i >> 0] | 0) < 0 ? HEAP32[$__buf >> 2] | 0 : $__buf;
   HEAP32[$__a_end >> 2] = $cond$i$i96 + $cond$i61;
   $__a$1 = $cond$i$i96;
  } else $__a$1 = $__a$0;
  $__ninp_$i$i = $21 + 12 | 0;
  $22 = HEAP32[$__ninp_$i$i >> 2] | 0;
  $__einp_$i$i = $21 + 16 | 0;
  if (($22 | 0) == (HEAP32[$__einp_$i$i >> 2] | 0)) $retval$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$21 >> 2] | 0) + 36 >> 2] & 127]($21) | 0; else $retval$0$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$22 >> 2] | 0) | 0;
  if (__ZNSt3__29__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_PKw($retval$0$i$i, $call, $__a$1, $__a_end, $__dc, HEAP32[$__thousands_sep >> 2] | 0, $__grouping, $__g, $__g_end, $call2) | 0) {
   $48 = $56;
   $__a$2 = $__a$1;
   break;
  }
  $27 = HEAP32[$__ninp_$i$i >> 2] | 0;
  if (($27 | 0) == (HEAP32[$__einp_$i$i >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[$21 >> 2] | 0) + 40 >> 2] & 127]($21) | 0; else {
   HEAP32[$__ninp_$i$i >> 2] = $27 + 4;
   __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$27 >> 2] | 0) | 0;
  }
  $4 = $21;
  $54 = $45;
  $__a$0 = $__a$1;
 }
 $31 = HEAP8[$__grouping + 11 >> 0] | 0;
 if (($31 << 24 >> 24 < 0 ? HEAP32[$__grouping + 4 >> 2] | 0 : $31 & 255) | 0) {
  $33 = HEAP32[$__g_end >> 2] | 0;
  if (($33 - $__g | 0) < 160) {
   $34 = HEAP32[$__dc >> 2] | 0;
   HEAP32[$__g_end >> 2] = $33 + 4;
   HEAP32[$33 >> 2] = $34;
  }
 }
 $36 = __ZNSt3__227__num_get_unsigned_integralIyEET_PKcS3_Rji($__a$2, HEAP32[$__a_end >> 2] | 0, $__err, $call) | 0;
 $37 = getTempRet0() | 0;
 $38 = $__v;
 HEAP32[$38 >> 2] = $36;
 HEAP32[$38 + 4 >> 2] = $37;
 __ZNSt3__216__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping, $__g, HEAP32[$__g_end >> 2] | 0, $__err);
 if (!$21) $57 = 1; else {
  $43 = HEAP32[$21 + 12 >> 2] | 0;
  if (($43 | 0) == (HEAP32[$21 + 16 >> 2] | 0)) $retval$0$i$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$45 >> 2] | 0) + 36 >> 2] & 127]($21) | 0; else $retval$0$i$i$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$43 >> 2] | 0) | 0;
  if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i$i$i, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
   HEAP32[$__b >> 2] = 0;
   $57 = 1;
  } else $57 = 0;
 }
 do if (!$48) label = 48; else {
  $49 = HEAP32[$48 + 12 >> 2] | 0;
  if (($49 | 0) == (HEAP32[$48 + 16 >> 2] | 0)) $retval$0$i$i13$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$48 >> 2] | 0) + 36 >> 2] & 127]($48) | 0; else $retval$0$i$i13$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$49 >> 2] | 0) | 0;
  if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i13$i$i, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
   HEAP32[$__e >> 2] = 0;
   label = 48;
   break;
  } else if ($57) break; else {
   label = 50;
   break;
  }
 } while (0);
 if ((label | 0) == 48) if ($57) label = 50;
 if ((label | 0) == 50) HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
 $retval$sroa$0$0$copyload = HEAP32[$__b >> 2] | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 STACKTOP = sp;
 return $retval$sroa$0$0$copyload | 0;
}

function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedIyEES4_S4_S4_RNS_8ios_baseERjRT_($this, $__b, $__e, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$pre = 0, $10 = 0, $15 = 0, $21 = 0, $22 = 0, $27 = 0, $31 = 0, $33 = 0, $34 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $43 = 0, $45 = 0, $48 = 0, $49 = 0, $5 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $9 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__buf = 0, $__cap_$i$i = 0, $__dc = 0, $__einp_$i$i = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__i$0$i$i = 0, $__ninp_$i$i = 0, $__size_$i$i = 0, $__size_$i3$i = 0, $__thousands_sep = 0, $call = 0, $call2 = 0, $cond$i = 0, $cond$i$i = 0, $cond$i$i96 = 0, $cond$i61 = 0, $cond$i87 = 0, $retval$0$i$i = 0, $retval$0$i$i$i$i = 0, $retval$0$i$i$i$i28 = 0, $retval$0$i$i13$i$i = 0, $retval$0$i$i13$i$i49 = 0, $retval$sroa$0$0$copyload = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(240);
 $__thousands_sep = sp + 224 | 0;
 $__grouping = sp + 212 | 0;
 $__buf = sp + 200 | 0;
 $__a_end = sp + 196 | 0;
 $__g = sp;
 $__g_end = sp + 192 | 0;
 $__dc = sp + 188 | 0;
 $call = __ZNSt3__214__num_get_base10__get_baseERNS_8ios_baseE($__iob) | 0;
 $call2 = __ZNKSt3__29__num_getIcE10__do_widenERNS_8ios_baseEPc($this, $__iob, sp + 160 | 0) | 0;
 __ZNSt3__29__num_getIcE17__stage2_int_prepERNS_8ios_baseERc($__grouping, $__iob, $__thousands_sep);
 HEAP32[$__buf >> 2] = 0;
 HEAP32[$__buf + 4 >> 2] = 0;
 HEAP32[$__buf + 8 >> 2] = 0;
 $__i$0$i$i = 0;
 while (1) {
  if (($__i$0$i$i | 0) == 3) break;
  HEAP32[$__buf + ($__i$0$i$i << 2) >> 2] = 0;
  $__i$0$i$i = $__i$0$i$i + 1 | 0;
 }
 $__size_$i$i = $__buf + 11 | 0;
 $__cap_$i$i = $__buf + 8 | 0;
 if ((HEAP8[$__size_$i$i >> 0] | 0) < 0) $cond$i = (HEAP32[$__cap_$i$i >> 2] & 2147483647) + -1 | 0; else $cond$i = 10;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($__buf, $cond$i, 0);
 $cond$i$i = (HEAP8[$__size_$i$i >> 0] | 0) < 0 ? HEAP32[$__buf >> 2] | 0 : $__buf;
 HEAP32[$__a_end >> 2] = $cond$i$i;
 HEAP32[$__g_end >> 2] = $__g;
 HEAP32[$__dc >> 2] = 0;
 $__size_$i3$i = $__buf + 4 | 0;
 $$pre = HEAP32[$__b >> 2] | 0;
 $4 = $$pre;
 $54 = $$pre;
 $__a$0 = $cond$i$i;
 L8 : while (1) {
  if (!$4) {
   $21 = 0;
   $45 = 0;
   $55 = 1;
  } else {
   $5 = HEAP32[$4 + 12 >> 2] | 0;
   if (($5 | 0) == (HEAP32[$4 + 16 >> 2] | 0)) $retval$0$i$i$i$i28 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$4 >> 2] | 0) + 36 >> 2] & 127]($4) | 0; else $retval$0$i$i$i$i28 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$5 >> 0] | 0) | 0;
   if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i$i$i28, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
    HEAP32[$__b >> 2] = 0;
    $21 = 0;
    $45 = 0;
    $55 = 1;
   } else {
    $21 = $4;
    $45 = $54;
    $55 = 0;
   }
  }
  $9 = HEAP32[$__e >> 2] | 0;
  do if (!$9) label = 19; else {
   $10 = HEAP32[$9 + 12 >> 2] | 0;
   if (($10 | 0) == (HEAP32[$9 + 16 >> 2] | 0)) $retval$0$i$i13$i$i49 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$9 >> 2] | 0) + 36 >> 2] & 127]($9) | 0; else $retval$0$i$i13$i$i49 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$10 >> 0] | 0) | 0;
   if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i13$i$i49, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
    HEAP32[$__e >> 2] = 0;
    label = 19;
    break;
   } else if ($55) {
    $56 = $9;
    break;
   } else {
    $48 = $9;
    $__a$2 = $__a$0;
    break L8;
   }
  } while (0);
  if ((label | 0) == 19) {
   label = 0;
   if ($55) {
    $48 = 0;
    $__a$2 = $__a$0;
    break;
   } else $56 = 0;
  }
  $15 = HEAP8[$__size_$i$i >> 0] | 0;
  $cond$i61 = $15 << 24 >> 24 < 0 ? HEAP32[$__size_$i3$i >> 2] | 0 : $15 & 255;
  if ((HEAP32[$__a_end >> 2] | 0) == ($__a$0 + $cond$i61 | 0)) {
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($__buf, $cond$i61 << 1, 0);
   if ((HEAP8[$__size_$i$i >> 0] | 0) < 0) $cond$i87 = (HEAP32[$__cap_$i$i >> 2] & 2147483647) + -1 | 0; else $cond$i87 = 10;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($__buf, $cond$i87, 0);
   $cond$i$i96 = (HEAP8[$__size_$i$i >> 0] | 0) < 0 ? HEAP32[$__buf >> 2] | 0 : $__buf;
   HEAP32[$__a_end >> 2] = $cond$i$i96 + $cond$i61;
   $__a$1 = $cond$i$i96;
  } else $__a$1 = $__a$0;
  $__ninp_$i$i = $21 + 12 | 0;
  $22 = HEAP32[$__ninp_$i$i >> 2] | 0;
  $__einp_$i$i = $21 + 16 | 0;
  if (($22 | 0) == (HEAP32[$__einp_$i$i >> 2] | 0)) $retval$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$21 >> 2] | 0) + 36 >> 2] & 127]($21) | 0; else $retval$0$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$22 >> 0] | 0) | 0;
  if (__ZNSt3__29__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_PKc($retval$0$i$i & 255, $call, $__a$1, $__a_end, $__dc, HEAP8[$__thousands_sep >> 0] | 0, $__grouping, $__g, $__g_end, $call2) | 0) {
   $48 = $56;
   $__a$2 = $__a$1;
   break;
  }
  $27 = HEAP32[$__ninp_$i$i >> 2] | 0;
  if (($27 | 0) == (HEAP32[$__einp_$i$i >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[$21 >> 2] | 0) + 40 >> 2] & 127]($21) | 0; else {
   HEAP32[$__ninp_$i$i >> 2] = $27 + 1;
   __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$27 >> 0] | 0) | 0;
  }
  $4 = $21;
  $54 = $45;
  $__a$0 = $__a$1;
 }
 $31 = HEAP8[$__grouping + 11 >> 0] | 0;
 if (($31 << 24 >> 24 < 0 ? HEAP32[$__grouping + 4 >> 2] | 0 : $31 & 255) | 0) {
  $33 = HEAP32[$__g_end >> 2] | 0;
  if (($33 - $__g | 0) < 160) {
   $34 = HEAP32[$__dc >> 2] | 0;
   HEAP32[$__g_end >> 2] = $33 + 4;
   HEAP32[$33 >> 2] = $34;
  }
 }
 $36 = __ZNSt3__227__num_get_unsigned_integralIyEET_PKcS3_Rji($__a$2, HEAP32[$__a_end >> 2] | 0, $__err, $call) | 0;
 $37 = getTempRet0() | 0;
 $38 = $__v;
 HEAP32[$38 >> 2] = $36;
 HEAP32[$38 + 4 >> 2] = $37;
 __ZNSt3__216__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping, $__g, HEAP32[$__g_end >> 2] | 0, $__err);
 if (!$21) $57 = 1; else {
  $43 = HEAP32[$21 + 12 >> 2] | 0;
  if (($43 | 0) == (HEAP32[$21 + 16 >> 2] | 0)) $retval$0$i$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$45 >> 2] | 0) + 36 >> 2] & 127]($21) | 0; else $retval$0$i$i$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$43 >> 0] | 0) | 0;
  if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i$i$i, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
   HEAP32[$__b >> 2] = 0;
   $57 = 1;
  } else $57 = 0;
 }
 do if (!$48) label = 48; else {
  $49 = HEAP32[$48 + 12 >> 2] | 0;
  if (($49 | 0) == (HEAP32[$48 + 16 >> 2] | 0)) $retval$0$i$i13$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$48 >> 2] | 0) + 36 >> 2] & 127]($48) | 0; else $retval$0$i$i13$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$49 >> 0] | 0) | 0;
  if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i13$i$i, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
   HEAP32[$__e >> 2] = 0;
   label = 48;
   break;
  } else if ($57) break; else {
   label = 50;
   break;
  }
 } while (0);
 if ((label | 0) == 48) if ($57) label = 50;
 if ((label | 0) == 50) HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
 $retval$sroa$0$0$copyload = HEAP32[$__b >> 2] | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 STACKTOP = sp;
 return $retval$sroa$0$0$copyload | 0;
}

function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__do_get_signedIxEES4_S4_S4_RNS_8ios_baseERjRT_($this, $__b, $__e, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$pre = 0, $10 = 0, $15 = 0, $21 = 0, $22 = 0, $27 = 0, $31 = 0, $33 = 0, $34 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $43 = 0, $45 = 0, $48 = 0, $49 = 0, $5 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $9 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__buf = 0, $__cap_$i$i = 0, $__dc = 0, $__einp_$i$i = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__i$0$i$i = 0, $__ninp_$i$i = 0, $__size_$i$i = 0, $__size_$i3$i = 0, $__thousands_sep = 0, $call = 0, $call2 = 0, $cond$i = 0, $cond$i$i = 0, $cond$i$i96 = 0, $cond$i61 = 0, $cond$i87 = 0, $retval$0$i$i = 0, $retval$0$i$i$i$i = 0, $retval$0$i$i$i$i28 = 0, $retval$0$i$i13$i$i = 0, $retval$0$i$i13$i$i49 = 0, $retval$sroa$0$0$copyload = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(304);
 $__thousands_sep = sp + 300 | 0;
 $__grouping = sp + 288 | 0;
 $__buf = sp + 276 | 0;
 $__a_end = sp + 272 | 0;
 $__g = sp;
 $__g_end = sp + 268 | 0;
 $__dc = sp + 264 | 0;
 $call = __ZNSt3__214__num_get_base10__get_baseERNS_8ios_baseE($__iob) | 0;
 $call2 = __ZNKSt3__29__num_getIwE10__do_widenERNS_8ios_baseEPw($this, $__iob, sp + 160 | 0) | 0;
 __ZNSt3__29__num_getIwE17__stage2_int_prepERNS_8ios_baseERw($__grouping, $__iob, $__thousands_sep);
 HEAP32[$__buf >> 2] = 0;
 HEAP32[$__buf + 4 >> 2] = 0;
 HEAP32[$__buf + 8 >> 2] = 0;
 $__i$0$i$i = 0;
 while (1) {
  if (($__i$0$i$i | 0) == 3) break;
  HEAP32[$__buf + ($__i$0$i$i << 2) >> 2] = 0;
  $__i$0$i$i = $__i$0$i$i + 1 | 0;
 }
 $__size_$i$i = $__buf + 11 | 0;
 $__cap_$i$i = $__buf + 8 | 0;
 if ((HEAP8[$__size_$i$i >> 0] | 0) < 0) $cond$i = (HEAP32[$__cap_$i$i >> 2] & 2147483647) + -1 | 0; else $cond$i = 10;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($__buf, $cond$i, 0);
 $cond$i$i = (HEAP8[$__size_$i$i >> 0] | 0) < 0 ? HEAP32[$__buf >> 2] | 0 : $__buf;
 HEAP32[$__a_end >> 2] = $cond$i$i;
 HEAP32[$__g_end >> 2] = $__g;
 HEAP32[$__dc >> 2] = 0;
 $__size_$i3$i = $__buf + 4 | 0;
 $$pre = HEAP32[$__b >> 2] | 0;
 $4 = $$pre;
 $54 = $$pre;
 $__a$0 = $cond$i$i;
 L8 : while (1) {
  if (!$4) {
   $21 = 0;
   $45 = 0;
   $55 = 1;
  } else {
   $5 = HEAP32[$4 + 12 >> 2] | 0;
   if (($5 | 0) == (HEAP32[$4 + 16 >> 2] | 0)) $retval$0$i$i$i$i28 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$4 >> 2] | 0) + 36 >> 2] & 127]($4) | 0; else $retval$0$i$i$i$i28 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$5 >> 2] | 0) | 0;
   if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i$i$i28, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
    HEAP32[$__b >> 2] = 0;
    $21 = 0;
    $45 = 0;
    $55 = 1;
   } else {
    $21 = $4;
    $45 = $54;
    $55 = 0;
   }
  }
  $9 = HEAP32[$__e >> 2] | 0;
  do if (!$9) label = 19; else {
   $10 = HEAP32[$9 + 12 >> 2] | 0;
   if (($10 | 0) == (HEAP32[$9 + 16 >> 2] | 0)) $retval$0$i$i13$i$i49 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$9 >> 2] | 0) + 36 >> 2] & 127]($9) | 0; else $retval$0$i$i13$i$i49 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$10 >> 2] | 0) | 0;
   if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i13$i$i49, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
    HEAP32[$__e >> 2] = 0;
    label = 19;
    break;
   } else if ($55) {
    $56 = $9;
    break;
   } else {
    $48 = $9;
    $__a$2 = $__a$0;
    break L8;
   }
  } while (0);
  if ((label | 0) == 19) {
   label = 0;
   if ($55) {
    $48 = 0;
    $__a$2 = $__a$0;
    break;
   } else $56 = 0;
  }
  $15 = HEAP8[$__size_$i$i >> 0] | 0;
  $cond$i61 = $15 << 24 >> 24 < 0 ? HEAP32[$__size_$i3$i >> 2] | 0 : $15 & 255;
  if ((HEAP32[$__a_end >> 2] | 0) == ($__a$0 + $cond$i61 | 0)) {
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($__buf, $cond$i61 << 1, 0);
   if ((HEAP8[$__size_$i$i >> 0] | 0) < 0) $cond$i87 = (HEAP32[$__cap_$i$i >> 2] & 2147483647) + -1 | 0; else $cond$i87 = 10;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($__buf, $cond$i87, 0);
   $cond$i$i96 = (HEAP8[$__size_$i$i >> 0] | 0) < 0 ? HEAP32[$__buf >> 2] | 0 : $__buf;
   HEAP32[$__a_end >> 2] = $cond$i$i96 + $cond$i61;
   $__a$1 = $cond$i$i96;
  } else $__a$1 = $__a$0;
  $__ninp_$i$i = $21 + 12 | 0;
  $22 = HEAP32[$__ninp_$i$i >> 2] | 0;
  $__einp_$i$i = $21 + 16 | 0;
  if (($22 | 0) == (HEAP32[$__einp_$i$i >> 2] | 0)) $retval$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$21 >> 2] | 0) + 36 >> 2] & 127]($21) | 0; else $retval$0$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$22 >> 2] | 0) | 0;
  if (__ZNSt3__29__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_PKw($retval$0$i$i, $call, $__a$1, $__a_end, $__dc, HEAP32[$__thousands_sep >> 2] | 0, $__grouping, $__g, $__g_end, $call2) | 0) {
   $48 = $56;
   $__a$2 = $__a$1;
   break;
  }
  $27 = HEAP32[$__ninp_$i$i >> 2] | 0;
  if (($27 | 0) == (HEAP32[$__einp_$i$i >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[$21 >> 2] | 0) + 40 >> 2] & 127]($21) | 0; else {
   HEAP32[$__ninp_$i$i >> 2] = $27 + 4;
   __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$27 >> 2] | 0) | 0;
  }
  $4 = $21;
  $54 = $45;
  $__a$0 = $__a$1;
 }
 $31 = HEAP8[$__grouping + 11 >> 0] | 0;
 if (($31 << 24 >> 24 < 0 ? HEAP32[$__grouping + 4 >> 2] | 0 : $31 & 255) | 0) {
  $33 = HEAP32[$__g_end >> 2] | 0;
  if (($33 - $__g | 0) < 160) {
   $34 = HEAP32[$__dc >> 2] | 0;
   HEAP32[$__g_end >> 2] = $33 + 4;
   HEAP32[$33 >> 2] = $34;
  }
 }
 $36 = __ZNSt3__225__num_get_signed_integralIxEET_PKcS3_Rji($__a$2, HEAP32[$__a_end >> 2] | 0, $__err, $call) | 0;
 $37 = getTempRet0() | 0;
 $38 = $__v;
 HEAP32[$38 >> 2] = $36;
 HEAP32[$38 + 4 >> 2] = $37;
 __ZNSt3__216__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping, $__g, HEAP32[$__g_end >> 2] | 0, $__err);
 if (!$21) $57 = 1; else {
  $43 = HEAP32[$21 + 12 >> 2] | 0;
  if (($43 | 0) == (HEAP32[$21 + 16 >> 2] | 0)) $retval$0$i$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$45 >> 2] | 0) + 36 >> 2] & 127]($21) | 0; else $retval$0$i$i$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$43 >> 2] | 0) | 0;
  if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i$i$i, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
   HEAP32[$__b >> 2] = 0;
   $57 = 1;
  } else $57 = 0;
 }
 do if (!$48) label = 48; else {
  $49 = HEAP32[$48 + 12 >> 2] | 0;
  if (($49 | 0) == (HEAP32[$48 + 16 >> 2] | 0)) $retval$0$i$i13$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$48 >> 2] | 0) + 36 >> 2] & 127]($48) | 0; else $retval$0$i$i13$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$49 >> 2] | 0) | 0;
  if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i13$i$i, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
   HEAP32[$__e >> 2] = 0;
   label = 48;
   break;
  } else if ($57) break; else {
   label = 50;
   break;
  }
 } while (0);
 if ((label | 0) == 48) if ($57) label = 50;
 if ((label | 0) == 50) HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
 $retval$sroa$0$0$copyload = HEAP32[$__b >> 2] | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 STACKTOP = sp;
 return $retval$sroa$0$0$copyload | 0;
}

function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__do_get_signedIxEES4_S4_S4_RNS_8ios_baseERjRT_($this, $__b, $__e, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$pre = 0, $10 = 0, $15 = 0, $21 = 0, $22 = 0, $27 = 0, $31 = 0, $33 = 0, $34 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $43 = 0, $45 = 0, $48 = 0, $49 = 0, $5 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $9 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__buf = 0, $__cap_$i$i = 0, $__dc = 0, $__einp_$i$i = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__i$0$i$i = 0, $__ninp_$i$i = 0, $__size_$i$i = 0, $__size_$i3$i = 0, $__thousands_sep = 0, $call = 0, $call2 = 0, $cond$i = 0, $cond$i$i = 0, $cond$i$i96 = 0, $cond$i61 = 0, $cond$i87 = 0, $retval$0$i$i = 0, $retval$0$i$i$i$i = 0, $retval$0$i$i$i$i28 = 0, $retval$0$i$i13$i$i = 0, $retval$0$i$i13$i$i49 = 0, $retval$sroa$0$0$copyload = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(240);
 $__thousands_sep = sp + 224 | 0;
 $__grouping = sp + 212 | 0;
 $__buf = sp + 200 | 0;
 $__a_end = sp + 196 | 0;
 $__g = sp;
 $__g_end = sp + 192 | 0;
 $__dc = sp + 188 | 0;
 $call = __ZNSt3__214__num_get_base10__get_baseERNS_8ios_baseE($__iob) | 0;
 $call2 = __ZNKSt3__29__num_getIcE10__do_widenERNS_8ios_baseEPc($this, $__iob, sp + 160 | 0) | 0;
 __ZNSt3__29__num_getIcE17__stage2_int_prepERNS_8ios_baseERc($__grouping, $__iob, $__thousands_sep);
 HEAP32[$__buf >> 2] = 0;
 HEAP32[$__buf + 4 >> 2] = 0;
 HEAP32[$__buf + 8 >> 2] = 0;
 $__i$0$i$i = 0;
 while (1) {
  if (($__i$0$i$i | 0) == 3) break;
  HEAP32[$__buf + ($__i$0$i$i << 2) >> 2] = 0;
  $__i$0$i$i = $__i$0$i$i + 1 | 0;
 }
 $__size_$i$i = $__buf + 11 | 0;
 $__cap_$i$i = $__buf + 8 | 0;
 if ((HEAP8[$__size_$i$i >> 0] | 0) < 0) $cond$i = (HEAP32[$__cap_$i$i >> 2] & 2147483647) + -1 | 0; else $cond$i = 10;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($__buf, $cond$i, 0);
 $cond$i$i = (HEAP8[$__size_$i$i >> 0] | 0) < 0 ? HEAP32[$__buf >> 2] | 0 : $__buf;
 HEAP32[$__a_end >> 2] = $cond$i$i;
 HEAP32[$__g_end >> 2] = $__g;
 HEAP32[$__dc >> 2] = 0;
 $__size_$i3$i = $__buf + 4 | 0;
 $$pre = HEAP32[$__b >> 2] | 0;
 $4 = $$pre;
 $54 = $$pre;
 $__a$0 = $cond$i$i;
 L8 : while (1) {
  if (!$4) {
   $21 = 0;
   $45 = 0;
   $55 = 1;
  } else {
   $5 = HEAP32[$4 + 12 >> 2] | 0;
   if (($5 | 0) == (HEAP32[$4 + 16 >> 2] | 0)) $retval$0$i$i$i$i28 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$4 >> 2] | 0) + 36 >> 2] & 127]($4) | 0; else $retval$0$i$i$i$i28 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$5 >> 0] | 0) | 0;
   if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i$i$i28, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
    HEAP32[$__b >> 2] = 0;
    $21 = 0;
    $45 = 0;
    $55 = 1;
   } else {
    $21 = $4;
    $45 = $54;
    $55 = 0;
   }
  }
  $9 = HEAP32[$__e >> 2] | 0;
  do if (!$9) label = 19; else {
   $10 = HEAP32[$9 + 12 >> 2] | 0;
   if (($10 | 0) == (HEAP32[$9 + 16 >> 2] | 0)) $retval$0$i$i13$i$i49 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$9 >> 2] | 0) + 36 >> 2] & 127]($9) | 0; else $retval$0$i$i13$i$i49 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$10 >> 0] | 0) | 0;
   if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i13$i$i49, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
    HEAP32[$__e >> 2] = 0;
    label = 19;
    break;
   } else if ($55) {
    $56 = $9;
    break;
   } else {
    $48 = $9;
    $__a$2 = $__a$0;
    break L8;
   }
  } while (0);
  if ((label | 0) == 19) {
   label = 0;
   if ($55) {
    $48 = 0;
    $__a$2 = $__a$0;
    break;
   } else $56 = 0;
  }
  $15 = HEAP8[$__size_$i$i >> 0] | 0;
  $cond$i61 = $15 << 24 >> 24 < 0 ? HEAP32[$__size_$i3$i >> 2] | 0 : $15 & 255;
  if ((HEAP32[$__a_end >> 2] | 0) == ($__a$0 + $cond$i61 | 0)) {
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($__buf, $cond$i61 << 1, 0);
   if ((HEAP8[$__size_$i$i >> 0] | 0) < 0) $cond$i87 = (HEAP32[$__cap_$i$i >> 2] & 2147483647) + -1 | 0; else $cond$i87 = 10;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($__buf, $cond$i87, 0);
   $cond$i$i96 = (HEAP8[$__size_$i$i >> 0] | 0) < 0 ? HEAP32[$__buf >> 2] | 0 : $__buf;
   HEAP32[$__a_end >> 2] = $cond$i$i96 + $cond$i61;
   $__a$1 = $cond$i$i96;
  } else $__a$1 = $__a$0;
  $__ninp_$i$i = $21 + 12 | 0;
  $22 = HEAP32[$__ninp_$i$i >> 2] | 0;
  $__einp_$i$i = $21 + 16 | 0;
  if (($22 | 0) == (HEAP32[$__einp_$i$i >> 2] | 0)) $retval$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$21 >> 2] | 0) + 36 >> 2] & 127]($21) | 0; else $retval$0$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$22 >> 0] | 0) | 0;
  if (__ZNSt3__29__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_PKc($retval$0$i$i & 255, $call, $__a$1, $__a_end, $__dc, HEAP8[$__thousands_sep >> 0] | 0, $__grouping, $__g, $__g_end, $call2) | 0) {
   $48 = $56;
   $__a$2 = $__a$1;
   break;
  }
  $27 = HEAP32[$__ninp_$i$i >> 2] | 0;
  if (($27 | 0) == (HEAP32[$__einp_$i$i >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[$21 >> 2] | 0) + 40 >> 2] & 127]($21) | 0; else {
   HEAP32[$__ninp_$i$i >> 2] = $27 + 1;
   __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$27 >> 0] | 0) | 0;
  }
  $4 = $21;
  $54 = $45;
  $__a$0 = $__a$1;
 }
 $31 = HEAP8[$__grouping + 11 >> 0] | 0;
 if (($31 << 24 >> 24 < 0 ? HEAP32[$__grouping + 4 >> 2] | 0 : $31 & 255) | 0) {
  $33 = HEAP32[$__g_end >> 2] | 0;
  if (($33 - $__g | 0) < 160) {
   $34 = HEAP32[$__dc >> 2] | 0;
   HEAP32[$__g_end >> 2] = $33 + 4;
   HEAP32[$33 >> 2] = $34;
  }
 }
 $36 = __ZNSt3__225__num_get_signed_integralIxEET_PKcS3_Rji($__a$2, HEAP32[$__a_end >> 2] | 0, $__err, $call) | 0;
 $37 = getTempRet0() | 0;
 $38 = $__v;
 HEAP32[$38 >> 2] = $36;
 HEAP32[$38 + 4 >> 2] = $37;
 __ZNSt3__216__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping, $__g, HEAP32[$__g_end >> 2] | 0, $__err);
 if (!$21) $57 = 1; else {
  $43 = HEAP32[$21 + 12 >> 2] | 0;
  if (($43 | 0) == (HEAP32[$21 + 16 >> 2] | 0)) $retval$0$i$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$45 >> 2] | 0) + 36 >> 2] & 127]($21) | 0; else $retval$0$i$i$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$43 >> 0] | 0) | 0;
  if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i$i$i, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
   HEAP32[$__b >> 2] = 0;
   $57 = 1;
  } else $57 = 0;
 }
 do if (!$48) label = 48; else {
  $49 = HEAP32[$48 + 12 >> 2] | 0;
  if (($49 | 0) == (HEAP32[$48 + 16 >> 2] | 0)) $retval$0$i$i13$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$48 >> 2] | 0) + 36 >> 2] & 127]($48) | 0; else $retval$0$i$i13$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$49 >> 0] | 0) | 0;
  if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i13$i$i, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
   HEAP32[$__e >> 2] = 0;
   label = 48;
   break;
  } else if ($57) break; else {
   label = 50;
   break;
  }
 } while (0);
 if ((label | 0) == 48) if ($57) label = 50;
 if ((label | 0) == 50) HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
 $retval$sroa$0$0$copyload = HEAP32[$__b >> 2] | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 STACKTOP = sp;
 return $retval$sroa$0$0$copyload | 0;
}

function __ZNSt3__220__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, $__e, $__err, $__ct, $__n) {
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__err = $__err | 0;
 $__ct = $__ct | 0;
 $__n = $__n | 0;
 var $0 = 0, $1 = 0, $11 = 0, $12 = 0, $20 = 0, $21 = 0, $25 = 0, $26 = 0, $30 = 0, $31 = 0, $36 = 0, $37 = 0, $39 = 0, $40 = 0, $47 = 0, $48 = 0, $5 = 0, $52 = 0, $56 = 0, $57 = 0, $6 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $__n$addr$0 = 0, $__n$addr$0$in = 0, $__ninp_$i$i21 = 0, $__ninp_$i$i97 = 0, $__r$0 = 0, $__r$0$in = 0, $__tab_$i = 0, $add = 0, $conv = 0, $conv$i = 0, $conv$i82 = 0, $retval$0$i$i = 0, $retval$0$i$i$i$i = 0, $retval$0$i$i$i$i120 = 0, $retval$0$i$i$i$i42 = 0, $retval$0$i$i13$i$i = 0, $retval$0$i$i13$i$i141 = 0, $retval$0$i$i13$i$i63 = 0, $retval$0$i$i81 = 0, $retval$2 = 0, label = 0;
 label = 0;
 $0 = HEAP32[$__b >> 2] | 0;
 do if (!$0) $62 = 1; else {
  $1 = HEAP32[$0 + 12 >> 2] | 0;
  if (($1 | 0) == (HEAP32[$0 + 16 >> 2] | 0)) $retval$0$i$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$0 >> 2] | 0) + 36 >> 2] & 127]($0) | 0; else $retval$0$i$i$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$1 >> 0] | 0) | 0;
  if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i$i$i, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
   HEAP32[$__b >> 2] = 0;
   $62 = 1;
   break;
  } else {
   $62 = (HEAP32[$__b >> 2] | 0) == 0;
   break;
  }
 } while (0);
 $5 = HEAP32[$__e >> 2] | 0;
 do if (!$5) label = 14; else {
  $6 = HEAP32[$5 + 12 >> 2] | 0;
  if (($6 | 0) == (HEAP32[$5 + 16 >> 2] | 0)) $retval$0$i$i13$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$5 >> 2] | 0) + 36 >> 2] & 127]($5) | 0; else $retval$0$i$i13$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$6 >> 0] | 0) | 0;
  if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i13$i$i, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
   HEAP32[$__e >> 2] = 0;
   label = 14;
   break;
  } else if ($62) {
   $63 = $5;
   label = 17;
   break;
  } else {
   label = 16;
   break;
  }
 } while (0);
 if ((label | 0) == 14) if ($62) label = 16; else {
  $63 = 0;
  label = 17;
 }
 L22 : do if ((label | 0) == 16) {
  HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 6;
  $retval$2 = 0;
 } else if ((label | 0) == 17) {
  $11 = HEAP32[$__b >> 2] | 0;
  $12 = HEAP32[$11 + 12 >> 2] | 0;
  if (($12 | 0) == (HEAP32[$11 + 16 >> 2] | 0)) $retval$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$11 >> 2] | 0) + 36 >> 2] & 127]($11) | 0; else $retval$0$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$12 >> 0] | 0) | 0;
  $conv$i = $retval$0$i$i & 255;
  if ($conv$i << 24 >> 24 > -1) {
   $__tab_$i = $__ct + 8 | 0;
   if (HEAP16[(HEAP32[$__tab_$i >> 2] | 0) + ($retval$0$i$i << 24 >> 24 << 1) >> 1] & 2048) {
    $conv = (FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$__ct >> 2] | 0) + 36 >> 2] & 63]($__ct, $conv$i, 0) | 0) << 24 >> 24;
    $20 = HEAP32[$__b >> 2] | 0;
    $__ninp_$i$i21 = $20 + 12 | 0;
    $21 = HEAP32[$__ninp_$i$i21 >> 2] | 0;
    if (($21 | 0) == (HEAP32[$20 + 16 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[$20 >> 2] | 0) + 40 >> 2] & 127]($20) | 0; else {
     HEAP32[$__ninp_$i$i21 >> 2] = $21 + 1;
     __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$21 >> 0] | 0) | 0;
    }
    $30 = $63;
    $64 = $63;
    $__n$addr$0$in = $__n;
    $__r$0$in = $conv;
    while (1) {
     $__r$0 = $__r$0$in + -48 | 0;
     $__n$addr$0 = $__n$addr$0$in + -1 | 0;
     $25 = HEAP32[$__b >> 2] | 0;
     do if (!$25) $37 = 1; else {
      $26 = HEAP32[$25 + 12 >> 2] | 0;
      if (($26 | 0) == (HEAP32[$25 + 16 >> 2] | 0)) $retval$0$i$i$i$i42 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$25 >> 2] | 0) + 36 >> 2] & 127]($25) | 0; else $retval$0$i$i$i$i42 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$26 >> 0] | 0) | 0;
      if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i$i$i42, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
       HEAP32[$__b >> 2] = 0;
       $37 = 1;
       break;
      } else {
       $37 = (HEAP32[$__b >> 2] | 0) == 0;
       break;
      }
     } while (0);
     if (!$30) {
      $36 = 1;
      $56 = $64;
      $65 = 0;
     } else {
      $31 = HEAP32[$30 + 12 >> 2] | 0;
      if (($31 | 0) == (HEAP32[$30 + 16 >> 2] | 0)) $retval$0$i$i13$i$i63 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$30 >> 2] | 0) + 36 >> 2] & 127]($30) | 0; else $retval$0$i$i13$i$i63 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$31 >> 0] | 0) | 0;
      if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i13$i$i63, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
       HEAP32[$__e >> 2] = 0;
       $36 = 1;
       $56 = 0;
       $65 = 0;
      } else {
       $36 = 0;
       $56 = $64;
       $65 = $30;
      }
     }
     $39 = HEAP32[$__b >> 2] | 0;
     if (!(($__n$addr$0$in | 0) > 1 & ($37 ^ $36))) break;
     $40 = HEAP32[$39 + 12 >> 2] | 0;
     if (($40 | 0) == (HEAP32[$39 + 16 >> 2] | 0)) $retval$0$i$i81 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$39 >> 2] | 0) + 36 >> 2] & 127]($39) | 0; else $retval$0$i$i81 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$40 >> 0] | 0) | 0;
     $conv$i82 = $retval$0$i$i81 & 255;
     if ($conv$i82 << 24 >> 24 <= -1) {
      $retval$2 = $__r$0;
      break L22;
     }
     if (!(HEAP16[(HEAP32[$__tab_$i >> 2] | 0) + ($retval$0$i$i81 << 24 >> 24 << 1) >> 1] & 2048)) {
      $retval$2 = $__r$0;
      break L22;
     }
     $add = ($__r$0 * 10 | 0) + ((FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$__ct >> 2] | 0) + 36 >> 2] & 63]($__ct, $conv$i82, 0) | 0) << 24 >> 24) | 0;
     $47 = HEAP32[$__b >> 2] | 0;
     $__ninp_$i$i97 = $47 + 12 | 0;
     $48 = HEAP32[$__ninp_$i$i97 >> 2] | 0;
     if (($48 | 0) == (HEAP32[$47 + 16 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[$47 >> 2] | 0) + 40 >> 2] & 127]($47) | 0; else {
      HEAP32[$__ninp_$i$i97 >> 2] = $48 + 1;
      __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$48 >> 0] | 0) | 0;
     }
     $30 = $65;
     $64 = $56;
     $__n$addr$0$in = $__n$addr$0;
     $__r$0$in = $add;
    }
    do if (!$39) $66 = 1; else {
     $52 = HEAP32[$39 + 12 >> 2] | 0;
     if (($52 | 0) == (HEAP32[$39 + 16 >> 2] | 0)) $retval$0$i$i$i$i120 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$39 >> 2] | 0) + 36 >> 2] & 127]($39) | 0; else $retval$0$i$i$i$i120 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$52 >> 0] | 0) | 0;
     if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i$i$i120, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
      HEAP32[$__b >> 2] = 0;
      $66 = 1;
      break;
     } else {
      $66 = (HEAP32[$__b >> 2] | 0) == 0;
      break;
     }
    } while (0);
    do if (!$56) label = 63; else {
     $57 = HEAP32[$56 + 12 >> 2] | 0;
     if (($57 | 0) == (HEAP32[$56 + 16 >> 2] | 0)) $retval$0$i$i13$i$i141 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$56 >> 2] | 0) + 36 >> 2] & 127]($56) | 0; else $retval$0$i$i13$i$i141 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$57 >> 0] | 0) | 0;
     if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i13$i$i141, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
      HEAP32[$__e >> 2] = 0;
      label = 63;
      break;
     } else if ($66) {
      $retval$2 = $__r$0;
      break L22;
     } else break;
    } while (0);
    if ((label | 0) == 63) if (!$66) {
     $retval$2 = $__r$0;
     break;
    }
    HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
    $retval$2 = $__r$0;
    break;
   }
  }
  HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 4;
  $retval$2 = 0;
 } while (0);
 return $retval$2 | 0;
}

function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedItEES4_S4_S4_RNS_8ios_baseERjRT_($this, $__b, $__e, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$pre = 0, $10 = 0, $15 = 0, $21 = 0, $22 = 0, $27 = 0, $31 = 0, $33 = 0, $34 = 0, $37 = 0, $39 = 0, $4 = 0, $42 = 0, $43 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $9 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__buf = 0, $__cap_$i$i = 0, $__dc = 0, $__einp_$i$i = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__i$0$i$i = 0, $__ninp_$i$i = 0, $__size_$i$i = 0, $__size_$i3$i = 0, $__thousands_sep = 0, $call = 0, $call2 = 0, $cond$i = 0, $cond$i$i = 0, $cond$i$i96 = 0, $cond$i61 = 0, $cond$i87 = 0, $retval$0$i$i = 0, $retval$0$i$i$i$i = 0, $retval$0$i$i$i$i28 = 0, $retval$0$i$i13$i$i = 0, $retval$0$i$i13$i$i49 = 0, $retval$sroa$0$0$copyload = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(304);
 $__thousands_sep = sp + 300 | 0;
 $__grouping = sp + 288 | 0;
 $__buf = sp + 276 | 0;
 $__a_end = sp + 272 | 0;
 $__g = sp;
 $__g_end = sp + 268 | 0;
 $__dc = sp + 264 | 0;
 $call = __ZNSt3__214__num_get_base10__get_baseERNS_8ios_baseE($__iob) | 0;
 $call2 = __ZNKSt3__29__num_getIwE10__do_widenERNS_8ios_baseEPw($this, $__iob, sp + 160 | 0) | 0;
 __ZNSt3__29__num_getIwE17__stage2_int_prepERNS_8ios_baseERw($__grouping, $__iob, $__thousands_sep);
 HEAP32[$__buf >> 2] = 0;
 HEAP32[$__buf + 4 >> 2] = 0;
 HEAP32[$__buf + 8 >> 2] = 0;
 $__i$0$i$i = 0;
 while (1) {
  if (($__i$0$i$i | 0) == 3) break;
  HEAP32[$__buf + ($__i$0$i$i << 2) >> 2] = 0;
  $__i$0$i$i = $__i$0$i$i + 1 | 0;
 }
 $__size_$i$i = $__buf + 11 | 0;
 $__cap_$i$i = $__buf + 8 | 0;
 if ((HEAP8[$__size_$i$i >> 0] | 0) < 0) $cond$i = (HEAP32[$__cap_$i$i >> 2] & 2147483647) + -1 | 0; else $cond$i = 10;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($__buf, $cond$i, 0);
 $cond$i$i = (HEAP8[$__size_$i$i >> 0] | 0) < 0 ? HEAP32[$__buf >> 2] | 0 : $__buf;
 HEAP32[$__a_end >> 2] = $cond$i$i;
 HEAP32[$__g_end >> 2] = $__g;
 HEAP32[$__dc >> 2] = 0;
 $__size_$i3$i = $__buf + 4 | 0;
 $$pre = HEAP32[$__b >> 2] | 0;
 $4 = $$pre;
 $48 = $$pre;
 $__a$0 = $cond$i$i;
 L8 : while (1) {
  if (!$4) {
   $21 = 0;
   $39 = 0;
   $49 = 1;
  } else {
   $5 = HEAP32[$4 + 12 >> 2] | 0;
   if (($5 | 0) == (HEAP32[$4 + 16 >> 2] | 0)) $retval$0$i$i$i$i28 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$4 >> 2] | 0) + 36 >> 2] & 127]($4) | 0; else $retval$0$i$i$i$i28 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$5 >> 2] | 0) | 0;
   if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i$i$i28, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
    HEAP32[$__b >> 2] = 0;
    $21 = 0;
    $39 = 0;
    $49 = 1;
   } else {
    $21 = $4;
    $39 = $48;
    $49 = 0;
   }
  }
  $9 = HEAP32[$__e >> 2] | 0;
  do if (!$9) label = 19; else {
   $10 = HEAP32[$9 + 12 >> 2] | 0;
   if (($10 | 0) == (HEAP32[$9 + 16 >> 2] | 0)) $retval$0$i$i13$i$i49 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$9 >> 2] | 0) + 36 >> 2] & 127]($9) | 0; else $retval$0$i$i13$i$i49 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$10 >> 2] | 0) | 0;
   if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i13$i$i49, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
    HEAP32[$__e >> 2] = 0;
    label = 19;
    break;
   } else if ($49) {
    $50 = $9;
    break;
   } else {
    $42 = $9;
    $__a$2 = $__a$0;
    break L8;
   }
  } while (0);
  if ((label | 0) == 19) {
   label = 0;
   if ($49) {
    $42 = 0;
    $__a$2 = $__a$0;
    break;
   } else $50 = 0;
  }
  $15 = HEAP8[$__size_$i$i >> 0] | 0;
  $cond$i61 = $15 << 24 >> 24 < 0 ? HEAP32[$__size_$i3$i >> 2] | 0 : $15 & 255;
  if ((HEAP32[$__a_end >> 2] | 0) == ($__a$0 + $cond$i61 | 0)) {
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($__buf, $cond$i61 << 1, 0);
   if ((HEAP8[$__size_$i$i >> 0] | 0) < 0) $cond$i87 = (HEAP32[$__cap_$i$i >> 2] & 2147483647) + -1 | 0; else $cond$i87 = 10;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($__buf, $cond$i87, 0);
   $cond$i$i96 = (HEAP8[$__size_$i$i >> 0] | 0) < 0 ? HEAP32[$__buf >> 2] | 0 : $__buf;
   HEAP32[$__a_end >> 2] = $cond$i$i96 + $cond$i61;
   $__a$1 = $cond$i$i96;
  } else $__a$1 = $__a$0;
  $__ninp_$i$i = $21 + 12 | 0;
  $22 = HEAP32[$__ninp_$i$i >> 2] | 0;
  $__einp_$i$i = $21 + 16 | 0;
  if (($22 | 0) == (HEAP32[$__einp_$i$i >> 2] | 0)) $retval$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$21 >> 2] | 0) + 36 >> 2] & 127]($21) | 0; else $retval$0$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$22 >> 2] | 0) | 0;
  if (__ZNSt3__29__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_PKw($retval$0$i$i, $call, $__a$1, $__a_end, $__dc, HEAP32[$__thousands_sep >> 2] | 0, $__grouping, $__g, $__g_end, $call2) | 0) {
   $42 = $50;
   $__a$2 = $__a$1;
   break;
  }
  $27 = HEAP32[$__ninp_$i$i >> 2] | 0;
  if (($27 | 0) == (HEAP32[$__einp_$i$i >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[$21 >> 2] | 0) + 40 >> 2] & 127]($21) | 0; else {
   HEAP32[$__ninp_$i$i >> 2] = $27 + 4;
   __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$27 >> 2] | 0) | 0;
  }
  $4 = $21;
  $48 = $39;
  $__a$0 = $__a$1;
 }
 $31 = HEAP8[$__grouping + 11 >> 0] | 0;
 if (($31 << 24 >> 24 < 0 ? HEAP32[$__grouping + 4 >> 2] | 0 : $31 & 255) | 0) {
  $33 = HEAP32[$__g_end >> 2] | 0;
  if (($33 - $__g | 0) < 160) {
   $34 = HEAP32[$__dc >> 2] | 0;
   HEAP32[$__g_end >> 2] = $33 + 4;
   HEAP32[$33 >> 2] = $34;
  }
 }
 HEAP16[$__v >> 1] = __ZNSt3__227__num_get_unsigned_integralItEET_PKcS3_Rji($__a$2, HEAP32[$__a_end >> 2] | 0, $__err, $call) | 0;
 __ZNSt3__216__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping, $__g, HEAP32[$__g_end >> 2] | 0, $__err);
 if (!$21) $51 = 1; else {
  $37 = HEAP32[$21 + 12 >> 2] | 0;
  if (($37 | 0) == (HEAP32[$21 + 16 >> 2] | 0)) $retval$0$i$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$39 >> 2] | 0) + 36 >> 2] & 127]($21) | 0; else $retval$0$i$i$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$37 >> 2] | 0) | 0;
  if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i$i$i, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
   HEAP32[$__b >> 2] = 0;
   $51 = 1;
  } else $51 = 0;
 }
 do if (!$42) label = 48; else {
  $43 = HEAP32[$42 + 12 >> 2] | 0;
  if (($43 | 0) == (HEAP32[$42 + 16 >> 2] | 0)) $retval$0$i$i13$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$42 >> 2] | 0) + 36 >> 2] & 127]($42) | 0; else $retval$0$i$i13$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$43 >> 2] | 0) | 0;
  if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i13$i$i, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
   HEAP32[$__e >> 2] = 0;
   label = 48;
   break;
  } else if ($51) break; else {
   label = 50;
   break;
  }
 } while (0);
 if ((label | 0) == 48) if ($51) label = 50;
 if ((label | 0) == 50) HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
 $retval$sroa$0$0$copyload = HEAP32[$__b >> 2] | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 STACKTOP = sp;
 return $retval$sroa$0$0$copyload | 0;
}

function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedImEES4_S4_S4_RNS_8ios_baseERjRT_($this, $__b, $__e, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$pre = 0, $10 = 0, $15 = 0, $21 = 0, $22 = 0, $27 = 0, $31 = 0, $33 = 0, $34 = 0, $37 = 0, $39 = 0, $4 = 0, $42 = 0, $43 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $9 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__buf = 0, $__cap_$i$i = 0, $__dc = 0, $__einp_$i$i = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__i$0$i$i = 0, $__ninp_$i$i = 0, $__size_$i$i = 0, $__size_$i3$i = 0, $__thousands_sep = 0, $call = 0, $call2 = 0, $cond$i = 0, $cond$i$i = 0, $cond$i$i96 = 0, $cond$i61 = 0, $cond$i87 = 0, $retval$0$i$i = 0, $retval$0$i$i$i$i = 0, $retval$0$i$i$i$i28 = 0, $retval$0$i$i13$i$i = 0, $retval$0$i$i13$i$i49 = 0, $retval$sroa$0$0$copyload = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(304);
 $__thousands_sep = sp + 300 | 0;
 $__grouping = sp + 288 | 0;
 $__buf = sp + 276 | 0;
 $__a_end = sp + 272 | 0;
 $__g = sp;
 $__g_end = sp + 268 | 0;
 $__dc = sp + 264 | 0;
 $call = __ZNSt3__214__num_get_base10__get_baseERNS_8ios_baseE($__iob) | 0;
 $call2 = __ZNKSt3__29__num_getIwE10__do_widenERNS_8ios_baseEPw($this, $__iob, sp + 160 | 0) | 0;
 __ZNSt3__29__num_getIwE17__stage2_int_prepERNS_8ios_baseERw($__grouping, $__iob, $__thousands_sep);
 HEAP32[$__buf >> 2] = 0;
 HEAP32[$__buf + 4 >> 2] = 0;
 HEAP32[$__buf + 8 >> 2] = 0;
 $__i$0$i$i = 0;
 while (1) {
  if (($__i$0$i$i | 0) == 3) break;
  HEAP32[$__buf + ($__i$0$i$i << 2) >> 2] = 0;
  $__i$0$i$i = $__i$0$i$i + 1 | 0;
 }
 $__size_$i$i = $__buf + 11 | 0;
 $__cap_$i$i = $__buf + 8 | 0;
 if ((HEAP8[$__size_$i$i >> 0] | 0) < 0) $cond$i = (HEAP32[$__cap_$i$i >> 2] & 2147483647) + -1 | 0; else $cond$i = 10;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($__buf, $cond$i, 0);
 $cond$i$i = (HEAP8[$__size_$i$i >> 0] | 0) < 0 ? HEAP32[$__buf >> 2] | 0 : $__buf;
 HEAP32[$__a_end >> 2] = $cond$i$i;
 HEAP32[$__g_end >> 2] = $__g;
 HEAP32[$__dc >> 2] = 0;
 $__size_$i3$i = $__buf + 4 | 0;
 $$pre = HEAP32[$__b >> 2] | 0;
 $4 = $$pre;
 $48 = $$pre;
 $__a$0 = $cond$i$i;
 L8 : while (1) {
  if (!$4) {
   $21 = 0;
   $39 = 0;
   $49 = 1;
  } else {
   $5 = HEAP32[$4 + 12 >> 2] | 0;
   if (($5 | 0) == (HEAP32[$4 + 16 >> 2] | 0)) $retval$0$i$i$i$i28 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$4 >> 2] | 0) + 36 >> 2] & 127]($4) | 0; else $retval$0$i$i$i$i28 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$5 >> 2] | 0) | 0;
   if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i$i$i28, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
    HEAP32[$__b >> 2] = 0;
    $21 = 0;
    $39 = 0;
    $49 = 1;
   } else {
    $21 = $4;
    $39 = $48;
    $49 = 0;
   }
  }
  $9 = HEAP32[$__e >> 2] | 0;
  do if (!$9) label = 19; else {
   $10 = HEAP32[$9 + 12 >> 2] | 0;
   if (($10 | 0) == (HEAP32[$9 + 16 >> 2] | 0)) $retval$0$i$i13$i$i49 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$9 >> 2] | 0) + 36 >> 2] & 127]($9) | 0; else $retval$0$i$i13$i$i49 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$10 >> 2] | 0) | 0;
   if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i13$i$i49, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
    HEAP32[$__e >> 2] = 0;
    label = 19;
    break;
   } else if ($49) {
    $50 = $9;
    break;
   } else {
    $42 = $9;
    $__a$2 = $__a$0;
    break L8;
   }
  } while (0);
  if ((label | 0) == 19) {
   label = 0;
   if ($49) {
    $42 = 0;
    $__a$2 = $__a$0;
    break;
   } else $50 = 0;
  }
  $15 = HEAP8[$__size_$i$i >> 0] | 0;
  $cond$i61 = $15 << 24 >> 24 < 0 ? HEAP32[$__size_$i3$i >> 2] | 0 : $15 & 255;
  if ((HEAP32[$__a_end >> 2] | 0) == ($__a$0 + $cond$i61 | 0)) {
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($__buf, $cond$i61 << 1, 0);
   if ((HEAP8[$__size_$i$i >> 0] | 0) < 0) $cond$i87 = (HEAP32[$__cap_$i$i >> 2] & 2147483647) + -1 | 0; else $cond$i87 = 10;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($__buf, $cond$i87, 0);
   $cond$i$i96 = (HEAP8[$__size_$i$i >> 0] | 0) < 0 ? HEAP32[$__buf >> 2] | 0 : $__buf;
   HEAP32[$__a_end >> 2] = $cond$i$i96 + $cond$i61;
   $__a$1 = $cond$i$i96;
  } else $__a$1 = $__a$0;
  $__ninp_$i$i = $21 + 12 | 0;
  $22 = HEAP32[$__ninp_$i$i >> 2] | 0;
  $__einp_$i$i = $21 + 16 | 0;
  if (($22 | 0) == (HEAP32[$__einp_$i$i >> 2] | 0)) $retval$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$21 >> 2] | 0) + 36 >> 2] & 127]($21) | 0; else $retval$0$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$22 >> 2] | 0) | 0;
  if (__ZNSt3__29__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_PKw($retval$0$i$i, $call, $__a$1, $__a_end, $__dc, HEAP32[$__thousands_sep >> 2] | 0, $__grouping, $__g, $__g_end, $call2) | 0) {
   $42 = $50;
   $__a$2 = $__a$1;
   break;
  }
  $27 = HEAP32[$__ninp_$i$i >> 2] | 0;
  if (($27 | 0) == (HEAP32[$__einp_$i$i >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[$21 >> 2] | 0) + 40 >> 2] & 127]($21) | 0; else {
   HEAP32[$__ninp_$i$i >> 2] = $27 + 4;
   __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$27 >> 2] | 0) | 0;
  }
  $4 = $21;
  $48 = $39;
  $__a$0 = $__a$1;
 }
 $31 = HEAP8[$__grouping + 11 >> 0] | 0;
 if (($31 << 24 >> 24 < 0 ? HEAP32[$__grouping + 4 >> 2] | 0 : $31 & 255) | 0) {
  $33 = HEAP32[$__g_end >> 2] | 0;
  if (($33 - $__g | 0) < 160) {
   $34 = HEAP32[$__dc >> 2] | 0;
   HEAP32[$__g_end >> 2] = $33 + 4;
   HEAP32[$33 >> 2] = $34;
  }
 }
 HEAP32[$__v >> 2] = __ZNSt3__227__num_get_unsigned_integralImEET_PKcS3_Rji($__a$2, HEAP32[$__a_end >> 2] | 0, $__err, $call) | 0;
 __ZNSt3__216__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping, $__g, HEAP32[$__g_end >> 2] | 0, $__err);
 if (!$21) $51 = 1; else {
  $37 = HEAP32[$21 + 12 >> 2] | 0;
  if (($37 | 0) == (HEAP32[$21 + 16 >> 2] | 0)) $retval$0$i$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$39 >> 2] | 0) + 36 >> 2] & 127]($21) | 0; else $retval$0$i$i$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$37 >> 2] | 0) | 0;
  if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i$i$i, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
   HEAP32[$__b >> 2] = 0;
   $51 = 1;
  } else $51 = 0;
 }
 do if (!$42) label = 48; else {
  $43 = HEAP32[$42 + 12 >> 2] | 0;
  if (($43 | 0) == (HEAP32[$42 + 16 >> 2] | 0)) $retval$0$i$i13$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$42 >> 2] | 0) + 36 >> 2] & 127]($42) | 0; else $retval$0$i$i13$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$43 >> 2] | 0) | 0;
  if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i13$i$i, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
   HEAP32[$__e >> 2] = 0;
   label = 48;
   break;
  } else if ($51) break; else {
   label = 50;
   break;
  }
 } while (0);
 if ((label | 0) == 48) if ($51) label = 50;
 if ((label | 0) == 50) HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
 $retval$sroa$0$0$copyload = HEAP32[$__b >> 2] | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 STACKTOP = sp;
 return $retval$sroa$0$0$copyload | 0;
}

function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedIjEES4_S4_S4_RNS_8ios_baseERjRT_($this, $__b, $__e, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$pre = 0, $10 = 0, $15 = 0, $21 = 0, $22 = 0, $27 = 0, $31 = 0, $33 = 0, $34 = 0, $37 = 0, $39 = 0, $4 = 0, $42 = 0, $43 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $9 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__buf = 0, $__cap_$i$i = 0, $__dc = 0, $__einp_$i$i = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__i$0$i$i = 0, $__ninp_$i$i = 0, $__size_$i$i = 0, $__size_$i3$i = 0, $__thousands_sep = 0, $call = 0, $call2 = 0, $cond$i = 0, $cond$i$i = 0, $cond$i$i96 = 0, $cond$i61 = 0, $cond$i87 = 0, $retval$0$i$i = 0, $retval$0$i$i$i$i = 0, $retval$0$i$i$i$i28 = 0, $retval$0$i$i13$i$i = 0, $retval$0$i$i13$i$i49 = 0, $retval$sroa$0$0$copyload = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(304);
 $__thousands_sep = sp + 300 | 0;
 $__grouping = sp + 288 | 0;
 $__buf = sp + 276 | 0;
 $__a_end = sp + 272 | 0;
 $__g = sp;
 $__g_end = sp + 268 | 0;
 $__dc = sp + 264 | 0;
 $call = __ZNSt3__214__num_get_base10__get_baseERNS_8ios_baseE($__iob) | 0;
 $call2 = __ZNKSt3__29__num_getIwE10__do_widenERNS_8ios_baseEPw($this, $__iob, sp + 160 | 0) | 0;
 __ZNSt3__29__num_getIwE17__stage2_int_prepERNS_8ios_baseERw($__grouping, $__iob, $__thousands_sep);
 HEAP32[$__buf >> 2] = 0;
 HEAP32[$__buf + 4 >> 2] = 0;
 HEAP32[$__buf + 8 >> 2] = 0;
 $__i$0$i$i = 0;
 while (1) {
  if (($__i$0$i$i | 0) == 3) break;
  HEAP32[$__buf + ($__i$0$i$i << 2) >> 2] = 0;
  $__i$0$i$i = $__i$0$i$i + 1 | 0;
 }
 $__size_$i$i = $__buf + 11 | 0;
 $__cap_$i$i = $__buf + 8 | 0;
 if ((HEAP8[$__size_$i$i >> 0] | 0) < 0) $cond$i = (HEAP32[$__cap_$i$i >> 2] & 2147483647) + -1 | 0; else $cond$i = 10;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($__buf, $cond$i, 0);
 $cond$i$i = (HEAP8[$__size_$i$i >> 0] | 0) < 0 ? HEAP32[$__buf >> 2] | 0 : $__buf;
 HEAP32[$__a_end >> 2] = $cond$i$i;
 HEAP32[$__g_end >> 2] = $__g;
 HEAP32[$__dc >> 2] = 0;
 $__size_$i3$i = $__buf + 4 | 0;
 $$pre = HEAP32[$__b >> 2] | 0;
 $4 = $$pre;
 $48 = $$pre;
 $__a$0 = $cond$i$i;
 L8 : while (1) {
  if (!$4) {
   $21 = 0;
   $39 = 0;
   $49 = 1;
  } else {
   $5 = HEAP32[$4 + 12 >> 2] | 0;
   if (($5 | 0) == (HEAP32[$4 + 16 >> 2] | 0)) $retval$0$i$i$i$i28 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$4 >> 2] | 0) + 36 >> 2] & 127]($4) | 0; else $retval$0$i$i$i$i28 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$5 >> 2] | 0) | 0;
   if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i$i$i28, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
    HEAP32[$__b >> 2] = 0;
    $21 = 0;
    $39 = 0;
    $49 = 1;
   } else {
    $21 = $4;
    $39 = $48;
    $49 = 0;
   }
  }
  $9 = HEAP32[$__e >> 2] | 0;
  do if (!$9) label = 19; else {
   $10 = HEAP32[$9 + 12 >> 2] | 0;
   if (($10 | 0) == (HEAP32[$9 + 16 >> 2] | 0)) $retval$0$i$i13$i$i49 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$9 >> 2] | 0) + 36 >> 2] & 127]($9) | 0; else $retval$0$i$i13$i$i49 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$10 >> 2] | 0) | 0;
   if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i13$i$i49, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
    HEAP32[$__e >> 2] = 0;
    label = 19;
    break;
   } else if ($49) {
    $50 = $9;
    break;
   } else {
    $42 = $9;
    $__a$2 = $__a$0;
    break L8;
   }
  } while (0);
  if ((label | 0) == 19) {
   label = 0;
   if ($49) {
    $42 = 0;
    $__a$2 = $__a$0;
    break;
   } else $50 = 0;
  }
  $15 = HEAP8[$__size_$i$i >> 0] | 0;
  $cond$i61 = $15 << 24 >> 24 < 0 ? HEAP32[$__size_$i3$i >> 2] | 0 : $15 & 255;
  if ((HEAP32[$__a_end >> 2] | 0) == ($__a$0 + $cond$i61 | 0)) {
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($__buf, $cond$i61 << 1, 0);
   if ((HEAP8[$__size_$i$i >> 0] | 0) < 0) $cond$i87 = (HEAP32[$__cap_$i$i >> 2] & 2147483647) + -1 | 0; else $cond$i87 = 10;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($__buf, $cond$i87, 0);
   $cond$i$i96 = (HEAP8[$__size_$i$i >> 0] | 0) < 0 ? HEAP32[$__buf >> 2] | 0 : $__buf;
   HEAP32[$__a_end >> 2] = $cond$i$i96 + $cond$i61;
   $__a$1 = $cond$i$i96;
  } else $__a$1 = $__a$0;
  $__ninp_$i$i = $21 + 12 | 0;
  $22 = HEAP32[$__ninp_$i$i >> 2] | 0;
  $__einp_$i$i = $21 + 16 | 0;
  if (($22 | 0) == (HEAP32[$__einp_$i$i >> 2] | 0)) $retval$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$21 >> 2] | 0) + 36 >> 2] & 127]($21) | 0; else $retval$0$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$22 >> 2] | 0) | 0;
  if (__ZNSt3__29__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_PKw($retval$0$i$i, $call, $__a$1, $__a_end, $__dc, HEAP32[$__thousands_sep >> 2] | 0, $__grouping, $__g, $__g_end, $call2) | 0) {
   $42 = $50;
   $__a$2 = $__a$1;
   break;
  }
  $27 = HEAP32[$__ninp_$i$i >> 2] | 0;
  if (($27 | 0) == (HEAP32[$__einp_$i$i >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[$21 >> 2] | 0) + 40 >> 2] & 127]($21) | 0; else {
   HEAP32[$__ninp_$i$i >> 2] = $27 + 4;
   __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$27 >> 2] | 0) | 0;
  }
  $4 = $21;
  $48 = $39;
  $__a$0 = $__a$1;
 }
 $31 = HEAP8[$__grouping + 11 >> 0] | 0;
 if (($31 << 24 >> 24 < 0 ? HEAP32[$__grouping + 4 >> 2] | 0 : $31 & 255) | 0) {
  $33 = HEAP32[$__g_end >> 2] | 0;
  if (($33 - $__g | 0) < 160) {
   $34 = HEAP32[$__dc >> 2] | 0;
   HEAP32[$__g_end >> 2] = $33 + 4;
   HEAP32[$33 >> 2] = $34;
  }
 }
 HEAP32[$__v >> 2] = __ZNSt3__227__num_get_unsigned_integralIjEET_PKcS3_Rji($__a$2, HEAP32[$__a_end >> 2] | 0, $__err, $call) | 0;
 __ZNSt3__216__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping, $__g, HEAP32[$__g_end >> 2] | 0, $__err);
 if (!$21) $51 = 1; else {
  $37 = HEAP32[$21 + 12 >> 2] | 0;
  if (($37 | 0) == (HEAP32[$21 + 16 >> 2] | 0)) $retval$0$i$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$39 >> 2] | 0) + 36 >> 2] & 127]($21) | 0; else $retval$0$i$i$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$37 >> 2] | 0) | 0;
  if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i$i$i, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
   HEAP32[$__b >> 2] = 0;
   $51 = 1;
  } else $51 = 0;
 }
 do if (!$42) label = 48; else {
  $43 = HEAP32[$42 + 12 >> 2] | 0;
  if (($43 | 0) == (HEAP32[$42 + 16 >> 2] | 0)) $retval$0$i$i13$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$42 >> 2] | 0) + 36 >> 2] & 127]($42) | 0; else $retval$0$i$i13$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$43 >> 2] | 0) | 0;
  if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i13$i$i, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
   HEAP32[$__e >> 2] = 0;
   label = 48;
   break;
  } else if ($51) break; else {
   label = 50;
   break;
  }
 } while (0);
 if ((label | 0) == 48) if ($51) label = 50;
 if ((label | 0) == 50) HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
 $retval$sroa$0$0$copyload = HEAP32[$__b >> 2] | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 STACKTOP = sp;
 return $retval$sroa$0$0$copyload | 0;
}

function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedItEES4_S4_S4_RNS_8ios_baseERjRT_($this, $__b, $__e, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$pre = 0, $10 = 0, $15 = 0, $21 = 0, $22 = 0, $27 = 0, $31 = 0, $33 = 0, $34 = 0, $37 = 0, $39 = 0, $4 = 0, $42 = 0, $43 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $9 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__buf = 0, $__cap_$i$i = 0, $__dc = 0, $__einp_$i$i = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__i$0$i$i = 0, $__ninp_$i$i = 0, $__size_$i$i = 0, $__size_$i3$i = 0, $__thousands_sep = 0, $call = 0, $call2 = 0, $cond$i = 0, $cond$i$i = 0, $cond$i$i96 = 0, $cond$i61 = 0, $cond$i87 = 0, $retval$0$i$i = 0, $retval$0$i$i$i$i = 0, $retval$0$i$i$i$i28 = 0, $retval$0$i$i13$i$i = 0, $retval$0$i$i13$i$i49 = 0, $retval$sroa$0$0$copyload = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(240);
 $__thousands_sep = sp + 224 | 0;
 $__grouping = sp + 212 | 0;
 $__buf = sp + 200 | 0;
 $__a_end = sp + 196 | 0;
 $__g = sp;
 $__g_end = sp + 192 | 0;
 $__dc = sp + 188 | 0;
 $call = __ZNSt3__214__num_get_base10__get_baseERNS_8ios_baseE($__iob) | 0;
 $call2 = __ZNKSt3__29__num_getIcE10__do_widenERNS_8ios_baseEPc($this, $__iob, sp + 160 | 0) | 0;
 __ZNSt3__29__num_getIcE17__stage2_int_prepERNS_8ios_baseERc($__grouping, $__iob, $__thousands_sep);
 HEAP32[$__buf >> 2] = 0;
 HEAP32[$__buf + 4 >> 2] = 0;
 HEAP32[$__buf + 8 >> 2] = 0;
 $__i$0$i$i = 0;
 while (1) {
  if (($__i$0$i$i | 0) == 3) break;
  HEAP32[$__buf + ($__i$0$i$i << 2) >> 2] = 0;
  $__i$0$i$i = $__i$0$i$i + 1 | 0;
 }
 $__size_$i$i = $__buf + 11 | 0;
 $__cap_$i$i = $__buf + 8 | 0;
 if ((HEAP8[$__size_$i$i >> 0] | 0) < 0) $cond$i = (HEAP32[$__cap_$i$i >> 2] & 2147483647) + -1 | 0; else $cond$i = 10;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($__buf, $cond$i, 0);
 $cond$i$i = (HEAP8[$__size_$i$i >> 0] | 0) < 0 ? HEAP32[$__buf >> 2] | 0 : $__buf;
 HEAP32[$__a_end >> 2] = $cond$i$i;
 HEAP32[$__g_end >> 2] = $__g;
 HEAP32[$__dc >> 2] = 0;
 $__size_$i3$i = $__buf + 4 | 0;
 $$pre = HEAP32[$__b >> 2] | 0;
 $4 = $$pre;
 $48 = $$pre;
 $__a$0 = $cond$i$i;
 L8 : while (1) {
  if (!$4) {
   $21 = 0;
   $39 = 0;
   $49 = 1;
  } else {
   $5 = HEAP32[$4 + 12 >> 2] | 0;
   if (($5 | 0) == (HEAP32[$4 + 16 >> 2] | 0)) $retval$0$i$i$i$i28 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$4 >> 2] | 0) + 36 >> 2] & 127]($4) | 0; else $retval$0$i$i$i$i28 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$5 >> 0] | 0) | 0;
   if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i$i$i28, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
    HEAP32[$__b >> 2] = 0;
    $21 = 0;
    $39 = 0;
    $49 = 1;
   } else {
    $21 = $4;
    $39 = $48;
    $49 = 0;
   }
  }
  $9 = HEAP32[$__e >> 2] | 0;
  do if (!$9) label = 19; else {
   $10 = HEAP32[$9 + 12 >> 2] | 0;
   if (($10 | 0) == (HEAP32[$9 + 16 >> 2] | 0)) $retval$0$i$i13$i$i49 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$9 >> 2] | 0) + 36 >> 2] & 127]($9) | 0; else $retval$0$i$i13$i$i49 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$10 >> 0] | 0) | 0;
   if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i13$i$i49, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
    HEAP32[$__e >> 2] = 0;
    label = 19;
    break;
   } else if ($49) {
    $50 = $9;
    break;
   } else {
    $42 = $9;
    $__a$2 = $__a$0;
    break L8;
   }
  } while (0);
  if ((label | 0) == 19) {
   label = 0;
   if ($49) {
    $42 = 0;
    $__a$2 = $__a$0;
    break;
   } else $50 = 0;
  }
  $15 = HEAP8[$__size_$i$i >> 0] | 0;
  $cond$i61 = $15 << 24 >> 24 < 0 ? HEAP32[$__size_$i3$i >> 2] | 0 : $15 & 255;
  if ((HEAP32[$__a_end >> 2] | 0) == ($__a$0 + $cond$i61 | 0)) {
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($__buf, $cond$i61 << 1, 0);
   if ((HEAP8[$__size_$i$i >> 0] | 0) < 0) $cond$i87 = (HEAP32[$__cap_$i$i >> 2] & 2147483647) + -1 | 0; else $cond$i87 = 10;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($__buf, $cond$i87, 0);
   $cond$i$i96 = (HEAP8[$__size_$i$i >> 0] | 0) < 0 ? HEAP32[$__buf >> 2] | 0 : $__buf;
   HEAP32[$__a_end >> 2] = $cond$i$i96 + $cond$i61;
   $__a$1 = $cond$i$i96;
  } else $__a$1 = $__a$0;
  $__ninp_$i$i = $21 + 12 | 0;
  $22 = HEAP32[$__ninp_$i$i >> 2] | 0;
  $__einp_$i$i = $21 + 16 | 0;
  if (($22 | 0) == (HEAP32[$__einp_$i$i >> 2] | 0)) $retval$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$21 >> 2] | 0) + 36 >> 2] & 127]($21) | 0; else $retval$0$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$22 >> 0] | 0) | 0;
  if (__ZNSt3__29__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_PKc($retval$0$i$i & 255, $call, $__a$1, $__a_end, $__dc, HEAP8[$__thousands_sep >> 0] | 0, $__grouping, $__g, $__g_end, $call2) | 0) {
   $42 = $50;
   $__a$2 = $__a$1;
   break;
  }
  $27 = HEAP32[$__ninp_$i$i >> 2] | 0;
  if (($27 | 0) == (HEAP32[$__einp_$i$i >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[$21 >> 2] | 0) + 40 >> 2] & 127]($21) | 0; else {
   HEAP32[$__ninp_$i$i >> 2] = $27 + 1;
   __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$27 >> 0] | 0) | 0;
  }
  $4 = $21;
  $48 = $39;
  $__a$0 = $__a$1;
 }
 $31 = HEAP8[$__grouping + 11 >> 0] | 0;
 if (($31 << 24 >> 24 < 0 ? HEAP32[$__grouping + 4 >> 2] | 0 : $31 & 255) | 0) {
  $33 = HEAP32[$__g_end >> 2] | 0;
  if (($33 - $__g | 0) < 160) {
   $34 = HEAP32[$__dc >> 2] | 0;
   HEAP32[$__g_end >> 2] = $33 + 4;
   HEAP32[$33 >> 2] = $34;
  }
 }
 HEAP16[$__v >> 1] = __ZNSt3__227__num_get_unsigned_integralItEET_PKcS3_Rji($__a$2, HEAP32[$__a_end >> 2] | 0, $__err, $call) | 0;
 __ZNSt3__216__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping, $__g, HEAP32[$__g_end >> 2] | 0, $__err);
 if (!$21) $51 = 1; else {
  $37 = HEAP32[$21 + 12 >> 2] | 0;
  if (($37 | 0) == (HEAP32[$21 + 16 >> 2] | 0)) $retval$0$i$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$39 >> 2] | 0) + 36 >> 2] & 127]($21) | 0; else $retval$0$i$i$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$37 >> 0] | 0) | 0;
  if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i$i$i, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
   HEAP32[$__b >> 2] = 0;
   $51 = 1;
  } else $51 = 0;
 }
 do if (!$42) label = 48; else {
  $43 = HEAP32[$42 + 12 >> 2] | 0;
  if (($43 | 0) == (HEAP32[$42 + 16 >> 2] | 0)) $retval$0$i$i13$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$42 >> 2] | 0) + 36 >> 2] & 127]($42) | 0; else $retval$0$i$i13$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$43 >> 0] | 0) | 0;
  if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i13$i$i, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
   HEAP32[$__e >> 2] = 0;
   label = 48;
   break;
  } else if ($51) break; else {
   label = 50;
   break;
  }
 } while (0);
 if ((label | 0) == 48) if ($51) label = 50;
 if ((label | 0) == 50) HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
 $retval$sroa$0$0$copyload = HEAP32[$__b >> 2] | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 STACKTOP = sp;
 return $retval$sroa$0$0$copyload | 0;
}

function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedImEES4_S4_S4_RNS_8ios_baseERjRT_($this, $__b, $__e, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$pre = 0, $10 = 0, $15 = 0, $21 = 0, $22 = 0, $27 = 0, $31 = 0, $33 = 0, $34 = 0, $37 = 0, $39 = 0, $4 = 0, $42 = 0, $43 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $9 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__buf = 0, $__cap_$i$i = 0, $__dc = 0, $__einp_$i$i = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__i$0$i$i = 0, $__ninp_$i$i = 0, $__size_$i$i = 0, $__size_$i3$i = 0, $__thousands_sep = 0, $call = 0, $call2 = 0, $cond$i = 0, $cond$i$i = 0, $cond$i$i96 = 0, $cond$i61 = 0, $cond$i87 = 0, $retval$0$i$i = 0, $retval$0$i$i$i$i = 0, $retval$0$i$i$i$i28 = 0, $retval$0$i$i13$i$i = 0, $retval$0$i$i13$i$i49 = 0, $retval$sroa$0$0$copyload = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(240);
 $__thousands_sep = sp + 224 | 0;
 $__grouping = sp + 212 | 0;
 $__buf = sp + 200 | 0;
 $__a_end = sp + 196 | 0;
 $__g = sp;
 $__g_end = sp + 192 | 0;
 $__dc = sp + 188 | 0;
 $call = __ZNSt3__214__num_get_base10__get_baseERNS_8ios_baseE($__iob) | 0;
 $call2 = __ZNKSt3__29__num_getIcE10__do_widenERNS_8ios_baseEPc($this, $__iob, sp + 160 | 0) | 0;
 __ZNSt3__29__num_getIcE17__stage2_int_prepERNS_8ios_baseERc($__grouping, $__iob, $__thousands_sep);
 HEAP32[$__buf >> 2] = 0;
 HEAP32[$__buf + 4 >> 2] = 0;
 HEAP32[$__buf + 8 >> 2] = 0;
 $__i$0$i$i = 0;
 while (1) {
  if (($__i$0$i$i | 0) == 3) break;
  HEAP32[$__buf + ($__i$0$i$i << 2) >> 2] = 0;
  $__i$0$i$i = $__i$0$i$i + 1 | 0;
 }
 $__size_$i$i = $__buf + 11 | 0;
 $__cap_$i$i = $__buf + 8 | 0;
 if ((HEAP8[$__size_$i$i >> 0] | 0) < 0) $cond$i = (HEAP32[$__cap_$i$i >> 2] & 2147483647) + -1 | 0; else $cond$i = 10;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($__buf, $cond$i, 0);
 $cond$i$i = (HEAP8[$__size_$i$i >> 0] | 0) < 0 ? HEAP32[$__buf >> 2] | 0 : $__buf;
 HEAP32[$__a_end >> 2] = $cond$i$i;
 HEAP32[$__g_end >> 2] = $__g;
 HEAP32[$__dc >> 2] = 0;
 $__size_$i3$i = $__buf + 4 | 0;
 $$pre = HEAP32[$__b >> 2] | 0;
 $4 = $$pre;
 $48 = $$pre;
 $__a$0 = $cond$i$i;
 L8 : while (1) {
  if (!$4) {
   $21 = 0;
   $39 = 0;
   $49 = 1;
  } else {
   $5 = HEAP32[$4 + 12 >> 2] | 0;
   if (($5 | 0) == (HEAP32[$4 + 16 >> 2] | 0)) $retval$0$i$i$i$i28 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$4 >> 2] | 0) + 36 >> 2] & 127]($4) | 0; else $retval$0$i$i$i$i28 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$5 >> 0] | 0) | 0;
   if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i$i$i28, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
    HEAP32[$__b >> 2] = 0;
    $21 = 0;
    $39 = 0;
    $49 = 1;
   } else {
    $21 = $4;
    $39 = $48;
    $49 = 0;
   }
  }
  $9 = HEAP32[$__e >> 2] | 0;
  do if (!$9) label = 19; else {
   $10 = HEAP32[$9 + 12 >> 2] | 0;
   if (($10 | 0) == (HEAP32[$9 + 16 >> 2] | 0)) $retval$0$i$i13$i$i49 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$9 >> 2] | 0) + 36 >> 2] & 127]($9) | 0; else $retval$0$i$i13$i$i49 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$10 >> 0] | 0) | 0;
   if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i13$i$i49, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
    HEAP32[$__e >> 2] = 0;
    label = 19;
    break;
   } else if ($49) {
    $50 = $9;
    break;
   } else {
    $42 = $9;
    $__a$2 = $__a$0;
    break L8;
   }
  } while (0);
  if ((label | 0) == 19) {
   label = 0;
   if ($49) {
    $42 = 0;
    $__a$2 = $__a$0;
    break;
   } else $50 = 0;
  }
  $15 = HEAP8[$__size_$i$i >> 0] | 0;
  $cond$i61 = $15 << 24 >> 24 < 0 ? HEAP32[$__size_$i3$i >> 2] | 0 : $15 & 255;
  if ((HEAP32[$__a_end >> 2] | 0) == ($__a$0 + $cond$i61 | 0)) {
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($__buf, $cond$i61 << 1, 0);
   if ((HEAP8[$__size_$i$i >> 0] | 0) < 0) $cond$i87 = (HEAP32[$__cap_$i$i >> 2] & 2147483647) + -1 | 0; else $cond$i87 = 10;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($__buf, $cond$i87, 0);
   $cond$i$i96 = (HEAP8[$__size_$i$i >> 0] | 0) < 0 ? HEAP32[$__buf >> 2] | 0 : $__buf;
   HEAP32[$__a_end >> 2] = $cond$i$i96 + $cond$i61;
   $__a$1 = $cond$i$i96;
  } else $__a$1 = $__a$0;
  $__ninp_$i$i = $21 + 12 | 0;
  $22 = HEAP32[$__ninp_$i$i >> 2] | 0;
  $__einp_$i$i = $21 + 16 | 0;
  if (($22 | 0) == (HEAP32[$__einp_$i$i >> 2] | 0)) $retval$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$21 >> 2] | 0) + 36 >> 2] & 127]($21) | 0; else $retval$0$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$22 >> 0] | 0) | 0;
  if (__ZNSt3__29__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_PKc($retval$0$i$i & 255, $call, $__a$1, $__a_end, $__dc, HEAP8[$__thousands_sep >> 0] | 0, $__grouping, $__g, $__g_end, $call2) | 0) {
   $42 = $50;
   $__a$2 = $__a$1;
   break;
  }
  $27 = HEAP32[$__ninp_$i$i >> 2] | 0;
  if (($27 | 0) == (HEAP32[$__einp_$i$i >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[$21 >> 2] | 0) + 40 >> 2] & 127]($21) | 0; else {
   HEAP32[$__ninp_$i$i >> 2] = $27 + 1;
   __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$27 >> 0] | 0) | 0;
  }
  $4 = $21;
  $48 = $39;
  $__a$0 = $__a$1;
 }
 $31 = HEAP8[$__grouping + 11 >> 0] | 0;
 if (($31 << 24 >> 24 < 0 ? HEAP32[$__grouping + 4 >> 2] | 0 : $31 & 255) | 0) {
  $33 = HEAP32[$__g_end >> 2] | 0;
  if (($33 - $__g | 0) < 160) {
   $34 = HEAP32[$__dc >> 2] | 0;
   HEAP32[$__g_end >> 2] = $33 + 4;
   HEAP32[$33 >> 2] = $34;
  }
 }
 HEAP32[$__v >> 2] = __ZNSt3__227__num_get_unsigned_integralImEET_PKcS3_Rji($__a$2, HEAP32[$__a_end >> 2] | 0, $__err, $call) | 0;
 __ZNSt3__216__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping, $__g, HEAP32[$__g_end >> 2] | 0, $__err);
 if (!$21) $51 = 1; else {
  $37 = HEAP32[$21 + 12 >> 2] | 0;
  if (($37 | 0) == (HEAP32[$21 + 16 >> 2] | 0)) $retval$0$i$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$39 >> 2] | 0) + 36 >> 2] & 127]($21) | 0; else $retval$0$i$i$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$37 >> 0] | 0) | 0;
  if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i$i$i, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
   HEAP32[$__b >> 2] = 0;
   $51 = 1;
  } else $51 = 0;
 }
 do if (!$42) label = 48; else {
  $43 = HEAP32[$42 + 12 >> 2] | 0;
  if (($43 | 0) == (HEAP32[$42 + 16 >> 2] | 0)) $retval$0$i$i13$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$42 >> 2] | 0) + 36 >> 2] & 127]($42) | 0; else $retval$0$i$i13$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$43 >> 0] | 0) | 0;
  if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i13$i$i, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
   HEAP32[$__e >> 2] = 0;
   label = 48;
   break;
  } else if ($51) break; else {
   label = 50;
   break;
  }
 } while (0);
 if ((label | 0) == 48) if ($51) label = 50;
 if ((label | 0) == 50) HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
 $retval$sroa$0$0$copyload = HEAP32[$__b >> 2] | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 STACKTOP = sp;
 return $retval$sroa$0$0$copyload | 0;
}

function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedIjEES4_S4_S4_RNS_8ios_baseERjRT_($this, $__b, $__e, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$pre = 0, $10 = 0, $15 = 0, $21 = 0, $22 = 0, $27 = 0, $31 = 0, $33 = 0, $34 = 0, $37 = 0, $39 = 0, $4 = 0, $42 = 0, $43 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $9 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__buf = 0, $__cap_$i$i = 0, $__dc = 0, $__einp_$i$i = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__i$0$i$i = 0, $__ninp_$i$i = 0, $__size_$i$i = 0, $__size_$i3$i = 0, $__thousands_sep = 0, $call = 0, $call2 = 0, $cond$i = 0, $cond$i$i = 0, $cond$i$i96 = 0, $cond$i61 = 0, $cond$i87 = 0, $retval$0$i$i = 0, $retval$0$i$i$i$i = 0, $retval$0$i$i$i$i28 = 0, $retval$0$i$i13$i$i = 0, $retval$0$i$i13$i$i49 = 0, $retval$sroa$0$0$copyload = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(240);
 $__thousands_sep = sp + 224 | 0;
 $__grouping = sp + 212 | 0;
 $__buf = sp + 200 | 0;
 $__a_end = sp + 196 | 0;
 $__g = sp;
 $__g_end = sp + 192 | 0;
 $__dc = sp + 188 | 0;
 $call = __ZNSt3__214__num_get_base10__get_baseERNS_8ios_baseE($__iob) | 0;
 $call2 = __ZNKSt3__29__num_getIcE10__do_widenERNS_8ios_baseEPc($this, $__iob, sp + 160 | 0) | 0;
 __ZNSt3__29__num_getIcE17__stage2_int_prepERNS_8ios_baseERc($__grouping, $__iob, $__thousands_sep);
 HEAP32[$__buf >> 2] = 0;
 HEAP32[$__buf + 4 >> 2] = 0;
 HEAP32[$__buf + 8 >> 2] = 0;
 $__i$0$i$i = 0;
 while (1) {
  if (($__i$0$i$i | 0) == 3) break;
  HEAP32[$__buf + ($__i$0$i$i << 2) >> 2] = 0;
  $__i$0$i$i = $__i$0$i$i + 1 | 0;
 }
 $__size_$i$i = $__buf + 11 | 0;
 $__cap_$i$i = $__buf + 8 | 0;
 if ((HEAP8[$__size_$i$i >> 0] | 0) < 0) $cond$i = (HEAP32[$__cap_$i$i >> 2] & 2147483647) + -1 | 0; else $cond$i = 10;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($__buf, $cond$i, 0);
 $cond$i$i = (HEAP8[$__size_$i$i >> 0] | 0) < 0 ? HEAP32[$__buf >> 2] | 0 : $__buf;
 HEAP32[$__a_end >> 2] = $cond$i$i;
 HEAP32[$__g_end >> 2] = $__g;
 HEAP32[$__dc >> 2] = 0;
 $__size_$i3$i = $__buf + 4 | 0;
 $$pre = HEAP32[$__b >> 2] | 0;
 $4 = $$pre;
 $48 = $$pre;
 $__a$0 = $cond$i$i;
 L8 : while (1) {
  if (!$4) {
   $21 = 0;
   $39 = 0;
   $49 = 1;
  } else {
   $5 = HEAP32[$4 + 12 >> 2] | 0;
   if (($5 | 0) == (HEAP32[$4 + 16 >> 2] | 0)) $retval$0$i$i$i$i28 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$4 >> 2] | 0) + 36 >> 2] & 127]($4) | 0; else $retval$0$i$i$i$i28 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$5 >> 0] | 0) | 0;
   if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i$i$i28, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
    HEAP32[$__b >> 2] = 0;
    $21 = 0;
    $39 = 0;
    $49 = 1;
   } else {
    $21 = $4;
    $39 = $48;
    $49 = 0;
   }
  }
  $9 = HEAP32[$__e >> 2] | 0;
  do if (!$9) label = 19; else {
   $10 = HEAP32[$9 + 12 >> 2] | 0;
   if (($10 | 0) == (HEAP32[$9 + 16 >> 2] | 0)) $retval$0$i$i13$i$i49 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$9 >> 2] | 0) + 36 >> 2] & 127]($9) | 0; else $retval$0$i$i13$i$i49 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$10 >> 0] | 0) | 0;
   if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i13$i$i49, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
    HEAP32[$__e >> 2] = 0;
    label = 19;
    break;
   } else if ($49) {
    $50 = $9;
    break;
   } else {
    $42 = $9;
    $__a$2 = $__a$0;
    break L8;
   }
  } while (0);
  if ((label | 0) == 19) {
   label = 0;
   if ($49) {
    $42 = 0;
    $__a$2 = $__a$0;
    break;
   } else $50 = 0;
  }
  $15 = HEAP8[$__size_$i$i >> 0] | 0;
  $cond$i61 = $15 << 24 >> 24 < 0 ? HEAP32[$__size_$i3$i >> 2] | 0 : $15 & 255;
  if ((HEAP32[$__a_end >> 2] | 0) == ($__a$0 + $cond$i61 | 0)) {
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($__buf, $cond$i61 << 1, 0);
   if ((HEAP8[$__size_$i$i >> 0] | 0) < 0) $cond$i87 = (HEAP32[$__cap_$i$i >> 2] & 2147483647) + -1 | 0; else $cond$i87 = 10;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($__buf, $cond$i87, 0);
   $cond$i$i96 = (HEAP8[$__size_$i$i >> 0] | 0) < 0 ? HEAP32[$__buf >> 2] | 0 : $__buf;
   HEAP32[$__a_end >> 2] = $cond$i$i96 + $cond$i61;
   $__a$1 = $cond$i$i96;
  } else $__a$1 = $__a$0;
  $__ninp_$i$i = $21 + 12 | 0;
  $22 = HEAP32[$__ninp_$i$i >> 2] | 0;
  $__einp_$i$i = $21 + 16 | 0;
  if (($22 | 0) == (HEAP32[$__einp_$i$i >> 2] | 0)) $retval$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$21 >> 2] | 0) + 36 >> 2] & 127]($21) | 0; else $retval$0$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$22 >> 0] | 0) | 0;
  if (__ZNSt3__29__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_PKc($retval$0$i$i & 255, $call, $__a$1, $__a_end, $__dc, HEAP8[$__thousands_sep >> 0] | 0, $__grouping, $__g, $__g_end, $call2) | 0) {
   $42 = $50;
   $__a$2 = $__a$1;
   break;
  }
  $27 = HEAP32[$__ninp_$i$i >> 2] | 0;
  if (($27 | 0) == (HEAP32[$__einp_$i$i >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[$21 >> 2] | 0) + 40 >> 2] & 127]($21) | 0; else {
   HEAP32[$__ninp_$i$i >> 2] = $27 + 1;
   __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$27 >> 0] | 0) | 0;
  }
  $4 = $21;
  $48 = $39;
  $__a$0 = $__a$1;
 }
 $31 = HEAP8[$__grouping + 11 >> 0] | 0;
 if (($31 << 24 >> 24 < 0 ? HEAP32[$__grouping + 4 >> 2] | 0 : $31 & 255) | 0) {
  $33 = HEAP32[$__g_end >> 2] | 0;
  if (($33 - $__g | 0) < 160) {
   $34 = HEAP32[$__dc >> 2] | 0;
   HEAP32[$__g_end >> 2] = $33 + 4;
   HEAP32[$33 >> 2] = $34;
  }
 }
 HEAP32[$__v >> 2] = __ZNSt3__227__num_get_unsigned_integralIjEET_PKcS3_Rji($__a$2, HEAP32[$__a_end >> 2] | 0, $__err, $call) | 0;
 __ZNSt3__216__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping, $__g, HEAP32[$__g_end >> 2] | 0, $__err);
 if (!$21) $51 = 1; else {
  $37 = HEAP32[$21 + 12 >> 2] | 0;
  if (($37 | 0) == (HEAP32[$21 + 16 >> 2] | 0)) $retval$0$i$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$39 >> 2] | 0) + 36 >> 2] & 127]($21) | 0; else $retval$0$i$i$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$37 >> 0] | 0) | 0;
  if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i$i$i, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
   HEAP32[$__b >> 2] = 0;
   $51 = 1;
  } else $51 = 0;
 }
 do if (!$42) label = 48; else {
  $43 = HEAP32[$42 + 12 >> 2] | 0;
  if (($43 | 0) == (HEAP32[$42 + 16 >> 2] | 0)) $retval$0$i$i13$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$42 >> 2] | 0) + 36 >> 2] & 127]($42) | 0; else $retval$0$i$i13$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$43 >> 0] | 0) | 0;
  if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i13$i$i, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
   HEAP32[$__e >> 2] = 0;
   label = 48;
   break;
  } else if ($51) break; else {
   label = 50;
   break;
  }
 } while (0);
 if ((label | 0) == 48) if ($51) label = 50;
 if ((label | 0) == 50) HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
 $retval$sroa$0$0$copyload = HEAP32[$__b >> 2] | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 STACKTOP = sp;
 return $retval$sroa$0$0$copyload | 0;
}

function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__do_get_signedIlEES4_S4_S4_RNS_8ios_baseERjRT_($this, $__b, $__e, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$pre = 0, $10 = 0, $15 = 0, $21 = 0, $22 = 0, $27 = 0, $31 = 0, $33 = 0, $34 = 0, $37 = 0, $39 = 0, $4 = 0, $42 = 0, $43 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $9 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__buf = 0, $__cap_$i$i = 0, $__dc = 0, $__einp_$i$i = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__i$0$i$i = 0, $__ninp_$i$i = 0, $__size_$i$i = 0, $__size_$i3$i = 0, $__thousands_sep = 0, $call = 0, $call2 = 0, $cond$i = 0, $cond$i$i = 0, $cond$i$i96 = 0, $cond$i61 = 0, $cond$i87 = 0, $retval$0$i$i = 0, $retval$0$i$i$i$i = 0, $retval$0$i$i$i$i28 = 0, $retval$0$i$i13$i$i = 0, $retval$0$i$i13$i$i49 = 0, $retval$sroa$0$0$copyload = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(304);
 $__thousands_sep = sp + 300 | 0;
 $__grouping = sp + 288 | 0;
 $__buf = sp + 276 | 0;
 $__a_end = sp + 272 | 0;
 $__g = sp;
 $__g_end = sp + 268 | 0;
 $__dc = sp + 264 | 0;
 $call = __ZNSt3__214__num_get_base10__get_baseERNS_8ios_baseE($__iob) | 0;
 $call2 = __ZNKSt3__29__num_getIwE10__do_widenERNS_8ios_baseEPw($this, $__iob, sp + 160 | 0) | 0;
 __ZNSt3__29__num_getIwE17__stage2_int_prepERNS_8ios_baseERw($__grouping, $__iob, $__thousands_sep);
 HEAP32[$__buf >> 2] = 0;
 HEAP32[$__buf + 4 >> 2] = 0;
 HEAP32[$__buf + 8 >> 2] = 0;
 $__i$0$i$i = 0;
 while (1) {
  if (($__i$0$i$i | 0) == 3) break;
  HEAP32[$__buf + ($__i$0$i$i << 2) >> 2] = 0;
  $__i$0$i$i = $__i$0$i$i + 1 | 0;
 }
 $__size_$i$i = $__buf + 11 | 0;
 $__cap_$i$i = $__buf + 8 | 0;
 if ((HEAP8[$__size_$i$i >> 0] | 0) < 0) $cond$i = (HEAP32[$__cap_$i$i >> 2] & 2147483647) + -1 | 0; else $cond$i = 10;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($__buf, $cond$i, 0);
 $cond$i$i = (HEAP8[$__size_$i$i >> 0] | 0) < 0 ? HEAP32[$__buf >> 2] | 0 : $__buf;
 HEAP32[$__a_end >> 2] = $cond$i$i;
 HEAP32[$__g_end >> 2] = $__g;
 HEAP32[$__dc >> 2] = 0;
 $__size_$i3$i = $__buf + 4 | 0;
 $$pre = HEAP32[$__b >> 2] | 0;
 $4 = $$pre;
 $48 = $$pre;
 $__a$0 = $cond$i$i;
 L8 : while (1) {
  if (!$4) {
   $21 = 0;
   $39 = 0;
   $49 = 1;
  } else {
   $5 = HEAP32[$4 + 12 >> 2] | 0;
   if (($5 | 0) == (HEAP32[$4 + 16 >> 2] | 0)) $retval$0$i$i$i$i28 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$4 >> 2] | 0) + 36 >> 2] & 127]($4) | 0; else $retval$0$i$i$i$i28 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$5 >> 2] | 0) | 0;
   if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i$i$i28, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
    HEAP32[$__b >> 2] = 0;
    $21 = 0;
    $39 = 0;
    $49 = 1;
   } else {
    $21 = $4;
    $39 = $48;
    $49 = 0;
   }
  }
  $9 = HEAP32[$__e >> 2] | 0;
  do if (!$9) label = 19; else {
   $10 = HEAP32[$9 + 12 >> 2] | 0;
   if (($10 | 0) == (HEAP32[$9 + 16 >> 2] | 0)) $retval$0$i$i13$i$i49 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$9 >> 2] | 0) + 36 >> 2] & 127]($9) | 0; else $retval$0$i$i13$i$i49 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$10 >> 2] | 0) | 0;
   if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i13$i$i49, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
    HEAP32[$__e >> 2] = 0;
    label = 19;
    break;
   } else if ($49) {
    $50 = $9;
    break;
   } else {
    $42 = $9;
    $__a$2 = $__a$0;
    break L8;
   }
  } while (0);
  if ((label | 0) == 19) {
   label = 0;
   if ($49) {
    $42 = 0;
    $__a$2 = $__a$0;
    break;
   } else $50 = 0;
  }
  $15 = HEAP8[$__size_$i$i >> 0] | 0;
  $cond$i61 = $15 << 24 >> 24 < 0 ? HEAP32[$__size_$i3$i >> 2] | 0 : $15 & 255;
  if ((HEAP32[$__a_end >> 2] | 0) == ($__a$0 + $cond$i61 | 0)) {
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($__buf, $cond$i61 << 1, 0);
   if ((HEAP8[$__size_$i$i >> 0] | 0) < 0) $cond$i87 = (HEAP32[$__cap_$i$i >> 2] & 2147483647) + -1 | 0; else $cond$i87 = 10;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($__buf, $cond$i87, 0);
   $cond$i$i96 = (HEAP8[$__size_$i$i >> 0] | 0) < 0 ? HEAP32[$__buf >> 2] | 0 : $__buf;
   HEAP32[$__a_end >> 2] = $cond$i$i96 + $cond$i61;
   $__a$1 = $cond$i$i96;
  } else $__a$1 = $__a$0;
  $__ninp_$i$i = $21 + 12 | 0;
  $22 = HEAP32[$__ninp_$i$i >> 2] | 0;
  $__einp_$i$i = $21 + 16 | 0;
  if (($22 | 0) == (HEAP32[$__einp_$i$i >> 2] | 0)) $retval$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$21 >> 2] | 0) + 36 >> 2] & 127]($21) | 0; else $retval$0$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$22 >> 2] | 0) | 0;
  if (__ZNSt3__29__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_PKw($retval$0$i$i, $call, $__a$1, $__a_end, $__dc, HEAP32[$__thousands_sep >> 2] | 0, $__grouping, $__g, $__g_end, $call2) | 0) {
   $42 = $50;
   $__a$2 = $__a$1;
   break;
  }
  $27 = HEAP32[$__ninp_$i$i >> 2] | 0;
  if (($27 | 0) == (HEAP32[$__einp_$i$i >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[$21 >> 2] | 0) + 40 >> 2] & 127]($21) | 0; else {
   HEAP32[$__ninp_$i$i >> 2] = $27 + 4;
   __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$27 >> 2] | 0) | 0;
  }
  $4 = $21;
  $48 = $39;
  $__a$0 = $__a$1;
 }
 $31 = HEAP8[$__grouping + 11 >> 0] | 0;
 if (($31 << 24 >> 24 < 0 ? HEAP32[$__grouping + 4 >> 2] | 0 : $31 & 255) | 0) {
  $33 = HEAP32[$__g_end >> 2] | 0;
  if (($33 - $__g | 0) < 160) {
   $34 = HEAP32[$__dc >> 2] | 0;
   HEAP32[$__g_end >> 2] = $33 + 4;
   HEAP32[$33 >> 2] = $34;
  }
 }
 HEAP32[$__v >> 2] = __ZNSt3__225__num_get_signed_integralIlEET_PKcS3_Rji($__a$2, HEAP32[$__a_end >> 2] | 0, $__err, $call) | 0;
 __ZNSt3__216__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping, $__g, HEAP32[$__g_end >> 2] | 0, $__err);
 if (!$21) $51 = 1; else {
  $37 = HEAP32[$21 + 12 >> 2] | 0;
  if (($37 | 0) == (HEAP32[$21 + 16 >> 2] | 0)) $retval$0$i$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$39 >> 2] | 0) + 36 >> 2] & 127]($21) | 0; else $retval$0$i$i$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$37 >> 2] | 0) | 0;
  if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i$i$i, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
   HEAP32[$__b >> 2] = 0;
   $51 = 1;
  } else $51 = 0;
 }
 do if (!$42) label = 48; else {
  $43 = HEAP32[$42 + 12 >> 2] | 0;
  if (($43 | 0) == (HEAP32[$42 + 16 >> 2] | 0)) $retval$0$i$i13$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$42 >> 2] | 0) + 36 >> 2] & 127]($42) | 0; else $retval$0$i$i13$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$43 >> 2] | 0) | 0;
  if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i13$i$i, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
   HEAP32[$__e >> 2] = 0;
   label = 48;
   break;
  } else if ($51) break; else {
   label = 50;
   break;
  }
 } while (0);
 if ((label | 0) == 48) if ($51) label = 50;
 if ((label | 0) == 50) HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
 $retval$sroa$0$0$copyload = HEAP32[$__b >> 2] | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 STACKTOP = sp;
 return $retval$sroa$0$0$copyload | 0;
}

function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__do_get_signedIlEES4_S4_S4_RNS_8ios_baseERjRT_($this, $__b, $__e, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$pre = 0, $10 = 0, $15 = 0, $21 = 0, $22 = 0, $27 = 0, $31 = 0, $33 = 0, $34 = 0, $37 = 0, $39 = 0, $4 = 0, $42 = 0, $43 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $9 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__buf = 0, $__cap_$i$i = 0, $__dc = 0, $__einp_$i$i = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__i$0$i$i = 0, $__ninp_$i$i = 0, $__size_$i$i = 0, $__size_$i3$i = 0, $__thousands_sep = 0, $call = 0, $call2 = 0, $cond$i = 0, $cond$i$i = 0, $cond$i$i96 = 0, $cond$i61 = 0, $cond$i87 = 0, $retval$0$i$i = 0, $retval$0$i$i$i$i = 0, $retval$0$i$i$i$i28 = 0, $retval$0$i$i13$i$i = 0, $retval$0$i$i13$i$i49 = 0, $retval$sroa$0$0$copyload = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(240);
 $__thousands_sep = sp + 224 | 0;
 $__grouping = sp + 212 | 0;
 $__buf = sp + 200 | 0;
 $__a_end = sp + 196 | 0;
 $__g = sp;
 $__g_end = sp + 192 | 0;
 $__dc = sp + 188 | 0;
 $call = __ZNSt3__214__num_get_base10__get_baseERNS_8ios_baseE($__iob) | 0;
 $call2 = __ZNKSt3__29__num_getIcE10__do_widenERNS_8ios_baseEPc($this, $__iob, sp + 160 | 0) | 0;
 __ZNSt3__29__num_getIcE17__stage2_int_prepERNS_8ios_baseERc($__grouping, $__iob, $__thousands_sep);
 HEAP32[$__buf >> 2] = 0;
 HEAP32[$__buf + 4 >> 2] = 0;
 HEAP32[$__buf + 8 >> 2] = 0;
 $__i$0$i$i = 0;
 while (1) {
  if (($__i$0$i$i | 0) == 3) break;
  HEAP32[$__buf + ($__i$0$i$i << 2) >> 2] = 0;
  $__i$0$i$i = $__i$0$i$i + 1 | 0;
 }
 $__size_$i$i = $__buf + 11 | 0;
 $__cap_$i$i = $__buf + 8 | 0;
 if ((HEAP8[$__size_$i$i >> 0] | 0) < 0) $cond$i = (HEAP32[$__cap_$i$i >> 2] & 2147483647) + -1 | 0; else $cond$i = 10;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($__buf, $cond$i, 0);
 $cond$i$i = (HEAP8[$__size_$i$i >> 0] | 0) < 0 ? HEAP32[$__buf >> 2] | 0 : $__buf;
 HEAP32[$__a_end >> 2] = $cond$i$i;
 HEAP32[$__g_end >> 2] = $__g;
 HEAP32[$__dc >> 2] = 0;
 $__size_$i3$i = $__buf + 4 | 0;
 $$pre = HEAP32[$__b >> 2] | 0;
 $4 = $$pre;
 $48 = $$pre;
 $__a$0 = $cond$i$i;
 L8 : while (1) {
  if (!$4) {
   $21 = 0;
   $39 = 0;
   $49 = 1;
  } else {
   $5 = HEAP32[$4 + 12 >> 2] | 0;
   if (($5 | 0) == (HEAP32[$4 + 16 >> 2] | 0)) $retval$0$i$i$i$i28 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$4 >> 2] | 0) + 36 >> 2] & 127]($4) | 0; else $retval$0$i$i$i$i28 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$5 >> 0] | 0) | 0;
   if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i$i$i28, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
    HEAP32[$__b >> 2] = 0;
    $21 = 0;
    $39 = 0;
    $49 = 1;
   } else {
    $21 = $4;
    $39 = $48;
    $49 = 0;
   }
  }
  $9 = HEAP32[$__e >> 2] | 0;
  do if (!$9) label = 19; else {
   $10 = HEAP32[$9 + 12 >> 2] | 0;
   if (($10 | 0) == (HEAP32[$9 + 16 >> 2] | 0)) $retval$0$i$i13$i$i49 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$9 >> 2] | 0) + 36 >> 2] & 127]($9) | 0; else $retval$0$i$i13$i$i49 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$10 >> 0] | 0) | 0;
   if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i13$i$i49, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
    HEAP32[$__e >> 2] = 0;
    label = 19;
    break;
   } else if ($49) {
    $50 = $9;
    break;
   } else {
    $42 = $9;
    $__a$2 = $__a$0;
    break L8;
   }
  } while (0);
  if ((label | 0) == 19) {
   label = 0;
   if ($49) {
    $42 = 0;
    $__a$2 = $__a$0;
    break;
   } else $50 = 0;
  }
  $15 = HEAP8[$__size_$i$i >> 0] | 0;
  $cond$i61 = $15 << 24 >> 24 < 0 ? HEAP32[$__size_$i3$i >> 2] | 0 : $15 & 255;
  if ((HEAP32[$__a_end >> 2] | 0) == ($__a$0 + $cond$i61 | 0)) {
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($__buf, $cond$i61 << 1, 0);
   if ((HEAP8[$__size_$i$i >> 0] | 0) < 0) $cond$i87 = (HEAP32[$__cap_$i$i >> 2] & 2147483647) + -1 | 0; else $cond$i87 = 10;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($__buf, $cond$i87, 0);
   $cond$i$i96 = (HEAP8[$__size_$i$i >> 0] | 0) < 0 ? HEAP32[$__buf >> 2] | 0 : $__buf;
   HEAP32[$__a_end >> 2] = $cond$i$i96 + $cond$i61;
   $__a$1 = $cond$i$i96;
  } else $__a$1 = $__a$0;
  $__ninp_$i$i = $21 + 12 | 0;
  $22 = HEAP32[$__ninp_$i$i >> 2] | 0;
  $__einp_$i$i = $21 + 16 | 0;
  if (($22 | 0) == (HEAP32[$__einp_$i$i >> 2] | 0)) $retval$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$21 >> 2] | 0) + 36 >> 2] & 127]($21) | 0; else $retval$0$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$22 >> 0] | 0) | 0;
  if (__ZNSt3__29__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_PKc($retval$0$i$i & 255, $call, $__a$1, $__a_end, $__dc, HEAP8[$__thousands_sep >> 0] | 0, $__grouping, $__g, $__g_end, $call2) | 0) {
   $42 = $50;
   $__a$2 = $__a$1;
   break;
  }
  $27 = HEAP32[$__ninp_$i$i >> 2] | 0;
  if (($27 | 0) == (HEAP32[$__einp_$i$i >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[$21 >> 2] | 0) + 40 >> 2] & 127]($21) | 0; else {
   HEAP32[$__ninp_$i$i >> 2] = $27 + 1;
   __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$27 >> 0] | 0) | 0;
  }
  $4 = $21;
  $48 = $39;
  $__a$0 = $__a$1;
 }
 $31 = HEAP8[$__grouping + 11 >> 0] | 0;
 if (($31 << 24 >> 24 < 0 ? HEAP32[$__grouping + 4 >> 2] | 0 : $31 & 255) | 0) {
  $33 = HEAP32[$__g_end >> 2] | 0;
  if (($33 - $__g | 0) < 160) {
   $34 = HEAP32[$__dc >> 2] | 0;
   HEAP32[$__g_end >> 2] = $33 + 4;
   HEAP32[$33 >> 2] = $34;
  }
 }
 HEAP32[$__v >> 2] = __ZNSt3__225__num_get_signed_integralIlEET_PKcS3_Rji($__a$2, HEAP32[$__a_end >> 2] | 0, $__err, $call) | 0;
 __ZNSt3__216__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping, $__g, HEAP32[$__g_end >> 2] | 0, $__err);
 if (!$21) $51 = 1; else {
  $37 = HEAP32[$21 + 12 >> 2] | 0;
  if (($37 | 0) == (HEAP32[$21 + 16 >> 2] | 0)) $retval$0$i$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$39 >> 2] | 0) + 36 >> 2] & 127]($21) | 0; else $retval$0$i$i$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$37 >> 0] | 0) | 0;
  if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i$i$i, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
   HEAP32[$__b >> 2] = 0;
   $51 = 1;
  } else $51 = 0;
 }
 do if (!$42) label = 48; else {
  $43 = HEAP32[$42 + 12 >> 2] | 0;
  if (($43 | 0) == (HEAP32[$42 + 16 >> 2] | 0)) $retval$0$i$i13$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$42 >> 2] | 0) + 36 >> 2] & 127]($42) | 0; else $retval$0$i$i13$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$43 >> 0] | 0) | 0;
  if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i13$i$i, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
   HEAP32[$__e >> 2] = 0;
   label = 48;
   break;
  } else if ($51) break; else {
   label = 50;
   break;
  }
 } while (0);
 if ((label | 0) == 48) if ($51) label = 50;
 if ((label | 0) == 50) HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
 $retval$sroa$0$0$copyload = HEAP32[$__b >> 2] | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 STACKTOP = sp;
 return $retval$sroa$0$0$copyload | 0;
}

function _twoway_strstr($h, $n) {
 $h = $h | 0;
 $n = $n | 0;
 var $0 = 0, $12 = 0, $14 = 0, $2 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $add13165 = 0, $add46157 = 0, $add90 = 0, $add99 = 0, $arrayidx8 = 0, $byteset = 0, $call108 = 0, $cmp156 = 0, $cmp160 = 0, $cmp85 = 0, $cond162 = 0, $conv125 = 0, $conv5 = 0, $h$addr$0 = 0, $inc177 = 0, $ip$0$lcssa179 = 0, $ip$0161 = 0, $ip$1 = 0, $ip$2$ip$0 = 0, $ip$2$lcssa = 0, $ip$2153 = 0, $ip$3 = 0, $jp$0162 = 0, $jp$1 = 0, $jp$2154 = 0, $jp$3 = 0, $k$0163 = 0, $k$1 = 0, $k$2155 = 0, $k$3 = 0, $k$4$sink = 0, $k$5148 = 0, $k$6150 = 0, $l$0$lcssa176178 = 0, $l$0169 = 0, $mem$0 = 0, $mem$0$be = 0, $mem0$0 = 0, $or107 = 0, $p$0$lcssa180 = 0, $p$0164 = 0, $p$1 = 0, $p$2$lcssa = 0, $p$2$p$0 = 0, $p$2156 = 0, $p$3 = 0, $p$5 = 0, $retval$3 = 0, $shift = 0, $sub$ptr$rhs$cast = 0, $sub101 = 0, $sub123 = 0, $sub139 = 0, $sub148$pre$phiZ2D = 0, $sub94 = 0, $tobool142 = 0, $z$0 = 0, $z$3 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1056 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(1056);
 $byteset = sp + 1024 | 0;
 $shift = sp;
 HEAP32[$byteset >> 2] = 0;
 HEAP32[$byteset + 4 >> 2] = 0;
 HEAP32[$byteset + 8 >> 2] = 0;
 HEAP32[$byteset + 12 >> 2] = 0;
 HEAP32[$byteset + 16 >> 2] = 0;
 HEAP32[$byteset + 20 >> 2] = 0;
 HEAP32[$byteset + 24 >> 2] = 0;
 HEAP32[$byteset + 28 >> 2] = 0;
 $0 = HEAP8[$n >> 0] | 0;
 L1 : do if (!($0 << 24 >> 24)) {
  $ip$0$lcssa179 = -1;
  $ip$2$lcssa = -1;
  $l$0$lcssa176178 = 0;
  $p$0$lcssa180 = 1;
  $p$2$lcssa = 1;
  label = 25;
 } else {
  $2 = $0;
  $l$0169 = 0;
  do {
   if (!(HEAP8[$h + $l$0169 >> 0] | 0)) {
    $retval$3 = 0;
    break L1;
   }
   $conv5 = $2 & 255;
   $arrayidx8 = $byteset + ($conv5 >>> 5 << 2) | 0;
   HEAP32[$arrayidx8 >> 2] = HEAP32[$arrayidx8 >> 2] | 1 << ($conv5 & 31);
   $l$0169 = $l$0169 + 1 | 0;
   HEAP32[$shift + ($conv5 << 2) >> 2] = $l$0169;
   $2 = HEAP8[$n + $l$0169 >> 0] | 0;
  } while ($2 << 24 >> 24 != 0);
  $cmp160 = $l$0169 >>> 0 > 1;
  if ($cmp160) {
   $add13165 = 1;
   $ip$0161 = -1;
   $jp$0162 = 0;
   $k$0163 = 1;
   $p$0164 = 1;
   while (1) {
    $5 = HEAP8[$n + ($k$0163 + $ip$0161) >> 0] | 0;
    $6 = HEAP8[$n + $add13165 >> 0] | 0;
    do if ($5 << 24 >> 24 == $6 << 24 >> 24) if (($k$0163 | 0) == ($p$0164 | 0)) {
     $ip$1 = $ip$0161;
     $jp$1 = $p$0164 + $jp$0162 | 0;
     $k$1 = 1;
     $p$1 = $p$0164;
     break;
    } else {
     $ip$1 = $ip$0161;
     $jp$1 = $jp$0162;
     $k$1 = $k$0163 + 1 | 0;
     $p$1 = $p$0164;
     break;
    } else if (($5 & 255) > ($6 & 255)) {
     $ip$1 = $ip$0161;
     $jp$1 = $add13165;
     $k$1 = 1;
     $p$1 = $add13165 - $ip$0161 | 0;
     break;
    } else {
     $ip$1 = $jp$0162;
     $jp$1 = $jp$0162 + 1 | 0;
     $k$1 = 1;
     $p$1 = 1;
     break;
    } while (0);
    $add13165 = $k$1 + $jp$1 | 0;
    if ($add13165 >>> 0 >= $l$0169 >>> 0) break; else {
     $ip$0161 = $ip$1;
     $jp$0162 = $jp$1;
     $k$0163 = $k$1;
     $p$0164 = $p$1;
    }
   }
   if ($cmp160) {
    $add46157 = 1;
    $ip$2153 = -1;
    $jp$2154 = 0;
    $k$2155 = 1;
    $p$2156 = 1;
    while (1) {
     $7 = HEAP8[$n + ($k$2155 + $ip$2153) >> 0] | 0;
     $8 = HEAP8[$n + $add46157 >> 0] | 0;
     do if ($7 << 24 >> 24 == $8 << 24 >> 24) if (($k$2155 | 0) == ($p$2156 | 0)) {
      $ip$3 = $ip$2153;
      $jp$3 = $p$2156 + $jp$2154 | 0;
      $k$3 = 1;
      $p$3 = $p$2156;
      break;
     } else {
      $ip$3 = $ip$2153;
      $jp$3 = $jp$2154;
      $k$3 = $k$2155 + 1 | 0;
      $p$3 = $p$2156;
      break;
     } else if (($7 & 255) < ($8 & 255)) {
      $ip$3 = $ip$2153;
      $jp$3 = $add46157;
      $k$3 = 1;
      $p$3 = $add46157 - $ip$2153 | 0;
      break;
     } else {
      $ip$3 = $jp$2154;
      $jp$3 = $jp$2154 + 1 | 0;
      $k$3 = 1;
      $p$3 = 1;
      break;
     } while (0);
     $add46157 = $k$3 + $jp$3 | 0;
     if ($add46157 >>> 0 >= $l$0169 >>> 0) {
      $ip$0$lcssa179 = $ip$1;
      $ip$2$lcssa = $ip$3;
      $l$0$lcssa176178 = $l$0169;
      $p$0$lcssa180 = $p$1;
      $p$2$lcssa = $p$3;
      label = 25;
      break;
     } else {
      $ip$2153 = $ip$3;
      $jp$2154 = $jp$3;
      $k$2155 = $k$3;
      $p$2156 = $p$3;
     }
    }
   } else {
    $ip$0$lcssa179 = $ip$1;
    $ip$2$lcssa = -1;
    $l$0$lcssa176178 = $l$0169;
    $p$0$lcssa180 = $p$1;
    $p$2$lcssa = 1;
    label = 25;
   }
  } else {
   $ip$0$lcssa179 = -1;
   $ip$2$lcssa = -1;
   $l$0$lcssa176178 = $l$0169;
   $p$0$lcssa180 = 1;
   $p$2$lcssa = 1;
   label = 25;
  }
 } while (0);
 L34 : do if ((label | 0) == 25) {
  $cmp85 = ($ip$2$lcssa + 1 | 0) >>> 0 > ($ip$0$lcssa179 + 1 | 0) >>> 0;
  $p$2$p$0 = $cmp85 ? $p$2$lcssa : $p$0$lcssa180;
  $ip$2$ip$0 = $cmp85 ? $ip$2$lcssa : $ip$0$lcssa179;
  $add90 = $ip$2$ip$0 + 1 | 0;
  if (!(_memcmp($n, $n + $p$2$p$0 | 0, $add90) | 0)) {
   $sub101 = $l$0$lcssa176178 - $p$2$p$0 | 0;
   $mem0$0 = $sub101;
   $p$5 = $p$2$p$0;
   $sub148$pre$phiZ2D = $sub101;
  } else {
   $sub94 = $l$0$lcssa176178 - $ip$2$ip$0 + -1 | 0;
   $add99 = ($ip$2$ip$0 >>> 0 > $sub94 >>> 0 ? $ip$2$ip$0 : $sub94) + 1 | 0;
   $mem0$0 = 0;
   $p$5 = $add99;
   $sub148$pre$phiZ2D = $l$0$lcssa176178 - $add99 | 0;
  }
  $or107 = $l$0$lcssa176178 | 63;
  $sub123 = $l$0$lcssa176178 + -1 | 0;
  $tobool142 = ($mem0$0 | 0) != 0;
  $h$addr$0 = $h;
  $mem$0 = 0;
  $z$0 = $h;
  while (1) {
   $sub$ptr$rhs$cast = $h$addr$0;
   do if (($z$0 - $sub$ptr$rhs$cast | 0) >>> 0 < $l$0$lcssa176178 >>> 0) {
    $call108 = _memchr($z$0, 0, $or107) | 0;
    if (!$call108) {
     $z$3 = $z$0 + $or107 | 0;
     break;
    } else if (($call108 - $sub$ptr$rhs$cast | 0) >>> 0 < $l$0$lcssa176178 >>> 0) {
     $retval$3 = 0;
     break L34;
    } else {
     $z$3 = $call108;
     break;
    }
   } else $z$3 = $z$0; while (0);
   $conv125 = HEAPU8[$h$addr$0 + $sub123 >> 0] | 0;
   L48 : do if (!(1 << ($conv125 & 31) & HEAP32[$byteset + ($conv125 >>> 5 << 2) >> 2])) {
    $k$4$sink = $l$0$lcssa176178;
    $mem$0$be = 0;
   } else {
    $sub139 = $l$0$lcssa176178 - (HEAP32[$shift + ($conv125 << 2) >> 2] | 0) | 0;
    if ($sub139 | 0) {
     $k$4$sink = $tobool142 & ($mem$0 | 0) != 0 & $sub139 >>> 0 < $p$5 >>> 0 ? $sub148$pre$phiZ2D : $sub139;
     $mem$0$be = 0;
     break;
    }
    $cmp156 = $add90 >>> 0 > $mem$0 >>> 0;
    $cond162 = $cmp156 ? $add90 : $mem$0;
    $12 = HEAP8[$n + $cond162 >> 0] | 0;
    L53 : do if ($12 << 24 >> 24) {
     $14 = $12;
     $k$5148 = $cond162;
     while (1) {
      if ($14 << 24 >> 24 != (HEAP8[$h$addr$0 + $k$5148 >> 0] | 0)) break;
      $inc177 = $k$5148 + 1 | 0;
      $14 = HEAP8[$n + $inc177 >> 0] | 0;
      if (!($14 << 24 >> 24)) break L53; else $k$5148 = $inc177;
     }
     $k$4$sink = $k$5148 - $ip$2$ip$0 | 0;
     $mem$0$be = 0;
     break L48;
    } while (0);
    if (!$cmp156) {
     $retval$3 = $h$addr$0;
     break L34;
    }
    $k$6150 = $add90;
    while (1) {
     $k$6150 = $k$6150 + -1 | 0;
     if ((HEAP8[$n + $k$6150 >> 0] | 0) != (HEAP8[$h$addr$0 + $k$6150 >> 0] | 0)) {
      $k$4$sink = $p$5;
      $mem$0$be = $mem0$0;
      break L48;
     }
     if ($k$6150 >>> 0 <= $mem$0 >>> 0) {
      $retval$3 = $h$addr$0;
      break L34;
     }
    }
   } while (0);
   $h$addr$0 = $h$addr$0 + $k$4$sink | 0;
   $mem$0 = $mem$0$be;
   $z$0 = $z$3;
  }
 } while (0);
 STACKTOP = sp;
 return $retval$3 | 0;
}

function __ZNSt3__29__num_putIcE23__widen_and_group_floatEPcS2_S2_S2_RS2_S3_RKNS_6localeE($__nb, $__np, $__ne, $__ob, $__op, $__oe, $__loc) {
 $__nb = $__nb | 0;
 $__np = $__np | 0;
 $__ne = $__ne | 0;
 $__ob = $__ob | 0;
 $__op = $__op | 0;
 $__oe = $__oe | 0;
 $__loc = $__loc | 0;
 var $$pre$phiZ2D = 0, $1 = 0, $10 = 0, $13 = 0, $18 = 0, $21 = 0, $22 = 0, $26 = 0, $27 = 0, $28 = 0, $3 = 0, $32 = 0, $33 = 0, $35 = 0, $37 = 0, $7 = 0, $__dc$0 = 0, $__dc$1 = 0, $__dg$0 = 0, $__dg$1 = 0, $__first$addr$0$i$i = 0, $__first$addr$0$i$i101 = 0, $__grouping = 0, $__last$addr$0$i$i = 0, $__last$addr$0$i$i102 = 0, $__nf$0 = 0, $__nf$1 = 0, $__nf$2 = 0, $__nf$3 = 0, $__ns$0 = 0, $__ns$1 = 0, $__ns$2 = 0, $__p$0 = 0, $__size_$i$i$i = 0, $__size_$i3$i$i = 0, $add$ptr100 = 0, $add$ptr78 = 0, $arrayidx10 = 0, $call$i = 0, $call$i111 = 0, $call$i120 = 0, $call$i133 = 0, $call$i80 = 0, $call$i83 = 0, $call$i86 = 0, $call$i89 = 0, $call$i98 = 0, $conv25 = 0, $conv34 = 0, $incdec$ptr$i$i = 0, $incdec$ptr$i$i103 = 0, $incdec$ptr21 = 0, $sub$ptr$lhs$cast = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $__grouping = sp;
 $call$i = __ZNKSt3__26locale9use_facetERNS0_2idE($__loc, 61216) | 0;
 $call$i80 = __ZNKSt3__26locale9use_facetERNS0_2idE($__loc, 61232) | 0;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[$call$i80 >> 2] | 0) + 20 >> 2] & 127]($__grouping, $call$i80);
 HEAP32[$__oe >> 2] = $__ob;
 $1 = HEAP8[$__nb >> 0] | 0;
 switch ($1 << 24 >> 24) {
 case 43:
 case 45:
  {
   $call$i83 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$call$i >> 2] | 0) + 28 >> 2] & 31]($call$i, $1) | 0;
   $3 = HEAP32[$__oe >> 2] | 0;
   HEAP32[$__oe >> 2] = $3 + 1;
   HEAP8[$3 >> 0] = $call$i83;
   $__nf$0 = $__nb + 1 | 0;
   break;
  }
 default:
  $__nf$0 = $__nb;
 }
 $sub$ptr$lhs$cast = $__ne;
 L4 : do if (($sub$ptr$lhs$cast - $__nf$0 | 0) > 1) if ((HEAP8[$__nf$0 >> 0] | 0) == 48) {
  $arrayidx10 = $__nf$0 + 1 | 0;
  switch (HEAP8[$arrayidx10 >> 0] | 0) {
  case 88:
  case 120:
   break;
  default:
   {
    label = 4;
    break L4;
   }
  }
  $call$i86 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$call$i >> 2] | 0) + 28 >> 2] & 31]($call$i, 48) | 0;
  $7 = HEAP32[$__oe >> 2] | 0;
  HEAP32[$__oe >> 2] = $7 + 1;
  HEAP8[$7 >> 0] = $call$i86;
  $incdec$ptr21 = $__nf$0 + 2 | 0;
  $call$i89 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$call$i >> 2] | 0) + 28 >> 2] & 31]($call$i, HEAP8[$arrayidx10 >> 0] | 0) | 0;
  $10 = HEAP32[$__oe >> 2] | 0;
  HEAP32[$__oe >> 2] = $10 + 1;
  HEAP8[$10 >> 0] = $call$i89;
  $__ns$0 = $incdec$ptr21;
  while (1) {
   if ($__ns$0 >>> 0 >= $__ne >>> 0) {
    $__nf$1 = $incdec$ptr21;
    $__ns$2 = $__ns$0;
    break L4;
   }
   $conv25 = HEAP8[$__ns$0 >> 0] | 0;
   if (!(_isxdigit_l($conv25, __ZNSt3__26__clocEv() | 0) | 0)) {
    $__nf$1 = $incdec$ptr21;
    $__ns$2 = $__ns$0;
    break L4;
   }
   $__ns$0 = $__ns$0 + 1 | 0;
  }
 } else label = 4; else label = 4; while (0);
 L12 : do if ((label | 0) == 4) {
  $__ns$1 = $__nf$0;
  while (1) {
   if ($__ns$1 >>> 0 >= $__ne >>> 0) {
    $__nf$1 = $__nf$0;
    $__ns$2 = $__ns$1;
    break L12;
   }
   $conv34 = HEAP8[$__ns$1 >> 0] | 0;
   if (!(_isdigit_l($conv34, __ZNSt3__26__clocEv() | 0) | 0)) {
    $__nf$1 = $__nf$0;
    $__ns$2 = $__ns$1;
    break L12;
   }
   $__ns$1 = $__ns$1 + 1 | 0;
  }
 } while (0);
 $__size_$i$i$i = $__grouping + 11 | 0;
 $13 = HEAP8[$__size_$i$i$i >> 0] | 0;
 $__size_$i3$i$i = $__grouping + 4 | 0;
 L19 : do if (!(($13 << 24 >> 24 < 0 ? HEAP32[$__size_$i3$i$i >> 2] | 0 : $13 & 255) | 0)) {
  FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[$call$i >> 2] | 0) + 32 >> 2] & 15]($call$i, $__nf$1, $__ns$2, HEAP32[$__oe >> 2] | 0) | 0;
  HEAP32[$__oe >> 2] = (HEAP32[$__oe >> 2] | 0) + ($__ns$2 - $__nf$1);
  $$pre$phiZ2D = $call$i;
 } else {
  L22 : do if (($__nf$1 | 0) != ($__ns$2 | 0)) {
   $__first$addr$0$i$i = $__nf$1;
   $__last$addr$0$i$i = $__ns$2;
   while (1) {
    $incdec$ptr$i$i = $__last$addr$0$i$i + -1 | 0;
    if ($__first$addr$0$i$i >>> 0 >= $incdec$ptr$i$i >>> 0) break L22;
    $18 = HEAP8[$__first$addr$0$i$i >> 0] | 0;
    HEAP8[$__first$addr$0$i$i >> 0] = HEAP8[$incdec$ptr$i$i >> 0] | 0;
    HEAP8[$incdec$ptr$i$i >> 0] = $18;
    $__first$addr$0$i$i = $__first$addr$0$i$i + 1 | 0;
    $__last$addr$0$i$i = $incdec$ptr$i$i;
   }
  } while (0);
  $call$i98 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$call$i80 >> 2] | 0) + 16 >> 2] & 127]($call$i80) | 0;
  $__dc$0 = 0;
  $__dg$0 = 0;
  $__p$0 = $__nf$1;
  while (1) {
   if ($__p$0 >>> 0 >= $__ns$2 >>> 0) break;
   $26 = HEAP8[((HEAP8[$__size_$i$i$i >> 0] | 0) < 0 ? HEAP32[$__grouping >> 2] | 0 : $__grouping) + $__dg$0 >> 0] | 0;
   if ($26 << 24 >> 24 > 0 & ($__dc$0 | 0) == ($26 << 24 >> 24 | 0)) {
    $27 = HEAP32[$__oe >> 2] | 0;
    HEAP32[$__oe >> 2] = $27 + 1;
    HEAP8[$27 >> 0] = $call$i98;
    $28 = HEAP8[$__size_$i$i$i >> 0] | 0;
    $__dc$1 = 0;
    $__dg$1 = $__dg$0 + ($__dg$0 >>> 0 < (($28 << 24 >> 24 < 0 ? HEAP32[$__size_$i3$i$i >> 2] | 0 : $28 & 255) + -1 | 0) >>> 0 & 1) | 0;
   } else {
    $__dc$1 = $__dc$0;
    $__dg$1 = $__dg$0;
   }
   $call$i133 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$call$i >> 2] | 0) + 28 >> 2] & 31]($call$i, HEAP8[$__p$0 >> 0] | 0) | 0;
   $32 = HEAP32[$__oe >> 2] | 0;
   HEAP32[$__oe >> 2] = $32 + 1;
   HEAP8[$32 >> 0] = $call$i133;
   $__dc$0 = $__dc$1 + 1 | 0;
   $__dg$0 = $__dg$1;
   $__p$0 = $__p$0 + 1 | 0;
  }
  $add$ptr78 = $__ob + ($__nf$1 - $__nb) | 0;
  $21 = HEAP32[$__oe >> 2] | 0;
  if (($add$ptr78 | 0) == ($21 | 0)) $$pre$phiZ2D = $call$i; else {
   $__first$addr$0$i$i101 = $add$ptr78;
   $__last$addr$0$i$i102 = $21;
   while (1) {
    $incdec$ptr$i$i103 = $__last$addr$0$i$i102 + -1 | 0;
    if ($__first$addr$0$i$i101 >>> 0 >= $incdec$ptr$i$i103 >>> 0) {
     $$pre$phiZ2D = $call$i;
     break L19;
    }
    $22 = HEAP8[$__first$addr$0$i$i101 >> 0] | 0;
    HEAP8[$__first$addr$0$i$i101 >> 0] = HEAP8[$incdec$ptr$i$i103 >> 0] | 0;
    HEAP8[$incdec$ptr$i$i103 >> 0] = $22;
    $__first$addr$0$i$i101 = $__first$addr$0$i$i101 + 1 | 0;
    $__last$addr$0$i$i102 = $incdec$ptr$i$i103;
   }
  }
 } while (0);
 $__nf$2 = $__ns$2;
 while (1) {
  if ($__nf$2 >>> 0 >= $__ne >>> 0) {
   $__nf$3 = $__nf$2;
   break;
  }
  $33 = HEAP8[$__nf$2 >> 0] | 0;
  if ($33 << 24 >> 24 == 46) {
   label = 32;
   break;
  }
  $call$i111 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$$pre$phiZ2D >> 2] | 0) + 28 >> 2] & 31]($call$i, $33) | 0;
  $37 = HEAP32[$__oe >> 2] | 0;
  HEAP32[$__oe >> 2] = $37 + 1;
  HEAP8[$37 >> 0] = $call$i111;
  $__nf$2 = $__nf$2 + 1 | 0;
 }
 if ((label | 0) == 32) {
  $call$i120 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$call$i80 >> 2] | 0) + 12 >> 2] & 127]($call$i80) | 0;
  $35 = HEAP32[$__oe >> 2] | 0;
  HEAP32[$__oe >> 2] = $35 + 1;
  HEAP8[$35 >> 0] = $call$i120;
  $__nf$3 = $__nf$2 + 1 | 0;
 }
 FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[$call$i >> 2] | 0) + 32 >> 2] & 15]($call$i, $__nf$3, $__ne, HEAP32[$__oe >> 2] | 0) | 0;
 $add$ptr100 = (HEAP32[$__oe >> 2] | 0) + ($sub$ptr$lhs$cast - $__nf$3) | 0;
 HEAP32[$__oe >> 2] = $add$ptr100;
 HEAP32[$__op >> 2] = ($__np | 0) == ($__ne | 0) ? $add$ptr100 : $__ob + ($__np - $__nb) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 STACKTOP = sp;
 return;
}

function __ZN4tson5Chunk5parseERKN8nlohmann10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS1_14adl_serializerEEE($this, $json) {
 $this = $this | 0;
 $json = $json | 0;
 var $0 = 0, $10 = 0, $15 = 0, $16 = 0, $21 = 0, $5 = 0, $6 = 0, $__cap_$i$i$i$i$i = 0, $__size_$i1$i$i$i$i = 0, $agg$tmp = 0, $agg$tmp28 = 0, $allFound$0$off0 = 0, $allFound$1$off0 = 0, $call16 = 0, $call5 = 0, $m_base64Data = 0, $ref$tmp$i$i$i$i = 0, $ref$tmp33 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64);
 $ref$tmp$i$i$i$i = sp;
 $agg$tmp = sp + 40 | 0;
 $agg$tmp28 = sp + 24 | 0;
 $ref$tmp33 = sp + 8 | 0;
 if (!(__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE5countIRA6_KcEEmOT_($json, 22412) | 0)) $allFound$0$off0 = 0; else if (!(__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE5countIRA7_KcEEmOT_($json, 22418) | 0)) $allFound$0$off0 = 0; else {
  $call5 = __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE3getIiiLi0EEET0_v(__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEixIKcEERKSB_PT_($json, 22412) | 0) | 0;
  __ZN4tson7Vector2IiEC2Eii($ref$tmp$i$i$i$i, $call5, __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE3getIiiLi0EEET0_v(__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEixIKcEERKSB_PT_($json, 22418) | 0) | 0);
  $0 = $ref$tmp$i$i$i$i;
  $5 = HEAP32[$0 + 4 >> 2] | 0;
  $6 = $this + 24 | 0;
  HEAP32[$6 >> 2] = HEAP32[$0 >> 2];
  HEAP32[$6 + 4 >> 2] = $5;
  $allFound$0$off0 = 1;
 }
 if (!(__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE5countIRA2_KcEEmOT_($json, 23124) | 0)) $allFound$1$off0 = 0; else if (!(__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE5countIRA2_KcEEmOT_($json, 23126) | 0)) $allFound$1$off0 = 0; else {
  $call16 = __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE3getIiiLi0EEET0_v(__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEixIKcEERKSB_PT_($json, 23124) | 0) | 0;
  __ZN4tson7Vector2IiEC2Eii($ref$tmp$i$i$i$i, $call16, __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE3getIiiLi0EEET0_v(__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEixIKcEERKSB_PT_($json, 23126) | 0) | 0);
  $10 = $ref$tmp$i$i$i$i;
  $15 = HEAP32[$10 + 4 >> 2] | 0;
  $16 = $this + 32 | 0;
  HEAP32[$16 >> 2] = HEAP32[$10 >> 2];
  HEAP32[$16 + 4 >> 2] = $15;
  $allFound$1$off0 = $allFound$0$off0;
 }
 do if (__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE5countIRA5_KcEEmOT_($json, 23269) | 0) {
  if (__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE8is_arrayEv(__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEixIKcEERKSB_PT_($json, 23269) | 0) | 0) {
   __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE5beginEv($agg$tmp, __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEixIKcEERKSB_PT_($json, 23269) | 0);
   __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE3endEv($agg$tmp28, __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEixIKcEERKSB_PT_($json, 23269) | 0);
   HEAP32[$ref$tmp$i$i$i$i >> 2] = $this;
   if (__ZNK8nlohmann6detail9iter_implIKNS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEEneERKSF_($agg$tmp, $agg$tmp28) | 0) do {
    __ZZN4tson5Chunk5parseERKN8nlohmann10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS1_14adl_serializerEEEENKUlSF_E_clESF_($ref$tmp$i$i$i$i, __ZNK8nlohmann6detail9iter_implIKNS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEEdeEv($agg$tmp) | 0);
    __ZN8nlohmann6detail9iter_implIKNS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEEppEv($agg$tmp) | 0;
   } while (__ZNK8nlohmann6detail9iter_implIKNS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEEneERKSF_($agg$tmp, $agg$tmp28) | 0);
   break;
  }
  __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE3getIS9_S9_Li0EEET0_v($ref$tmp33, __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEixIKcEERKSB_PT_($json, 23269) | 0);
  $m_base64Data = $this + 12 | 0;
  $__size_$i1$i$i$i$i = $m_base64Data + 11 | 0;
  if ((HEAP8[$__size_$i1$i$i$i$i >> 0] | 0) < 0) {
   $21 = HEAP32[$m_base64Data >> 2] | 0;
   HEAP8[$ref$tmp$i$i$i$i >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($21, $ref$tmp$i$i$i$i);
   HEAP32[$this + 16 >> 2] = 0;
   if ((HEAP8[$__size_$i1$i$i$i$i >> 0] | 0) < 0) {
    $__cap_$i$i$i$i$i = $this + 20 | 0;
    __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm(HEAP32[$m_base64Data >> 2] | 0, HEAP32[$__cap_$i$i$i$i$i >> 2] & 2147483647);
    HEAP32[$__cap_$i$i$i$i$i >> 2] = 0;
   }
  } else {
   HEAP8[$ref$tmp$i$i$i$i >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($m_base64Data, $ref$tmp$i$i$i$i);
   HEAP8[$__size_$i1$i$i$i$i >> 0] = 0;
  };
  HEAP32[$m_base64Data >> 2] = HEAP32[$ref$tmp33 >> 2];
  HEAP32[$m_base64Data + 4 >> 2] = HEAP32[$ref$tmp33 + 4 >> 2];
  HEAP32[$m_base64Data + 8 >> 2] = HEAP32[$ref$tmp33 + 8 >> 2];
  HEAP32[$ref$tmp33 >> 2] = 0;
  HEAP32[$ref$tmp33 + 4 >> 2] = 0;
  HEAP32[$ref$tmp33 + 8 >> 2] = 0;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp33);
 } while (0);
 STACKTOP = sp;
 return $allFound$1$off0 | 0;
}

function _stbi__create_png_image($a, $image_data, $image_data_len, $out_n, $depth, $color, $interlaced) {
 $a = $a | 0;
 $image_data = $image_data | 0;
 $image_data_len = $image_data_len | 0;
 $out_n = $out_n | 0;
 $depth = $depth | 0;
 $color = $color | 0;
 $interlaced = $interlaced | 0;
 var $4 = 0, $62 = 0, $97 = 0, $a$addr = 0, $add$ptr = 0, $add$ptr54 = 0, $add$ptr58 = 0, $add29 = 0, $bytes = 0, $color$addr = 0, $depth$addr = 0, $final = 0, $i = 0, $image_data$addr = 0, $image_data_len$addr = 0, $img_len = 0, $interlaced$addr = 0, $j = 0, $mul26 = 0, $mul42 = 0, $mul46 = 0, $mul51 = 0, $mul55 = 0, $out_bytes = 0, $out_n$addr = 0, $out_x = 0, $out_y = 0, $p = 0, $retval = 0, $x = 0, $xorig = 0, $xspc = 0, $y = 0, $yorig = 0, $yspc = 0, label = 0, sp = 0, CSE$0 = 0, CSE$1 = 0, CSE$2 = 0, CSE$3 = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(208);
 $retval = sp + 196 | 0;
 $a$addr = sp + 192 | 0;
 $image_data$addr = sp + 188 | 0;
 $image_data_len$addr = sp + 184 | 0;
 $out_n$addr = sp + 180 | 0;
 $depth$addr = sp + 176 | 0;
 $color$addr = sp + 172 | 0;
 $interlaced$addr = sp + 168 | 0;
 $bytes = sp + 164 | 0;
 $out_bytes = sp + 160 | 0;
 $final = sp + 156 | 0;
 $p = sp + 152 | 0;
 $xorig = sp + 96 | 0;
 $yorig = sp + 64 | 0;
 $xspc = sp + 32 | 0;
 $yspc = sp;
 $i = sp + 148 | 0;
 $j = sp + 144 | 0;
 $x = sp + 140 | 0;
 $y = sp + 136 | 0;
 $img_len = sp + 132 | 0;
 $out_y = sp + 128 | 0;
 $out_x = sp + 124 | 0;
 HEAP32[$a$addr >> 2] = $a;
 HEAP32[$image_data$addr >> 2] = $image_data;
 HEAP32[$image_data_len$addr >> 2] = $image_data_len;
 HEAP32[$out_n$addr >> 2] = $out_n;
 HEAP32[$depth$addr >> 2] = $depth;
 HEAP32[$color$addr >> 2] = $color;
 HEAP32[$interlaced$addr >> 2] = $interlaced;
 HEAP32[$bytes >> 2] = (HEAP32[$depth$addr >> 2] | 0) == 16 ? 2 : 1;
 HEAP32[$out_bytes >> 2] = Math_imul(HEAP32[$out_n$addr >> 2] | 0, HEAP32[$bytes >> 2] | 0) | 0;
 $4 = HEAP32[$a$addr >> 2] | 0;
 if (!(HEAP32[$interlaced$addr >> 2] | 0)) {
  HEAP32[$retval >> 2] = _stbi__create_png_image_raw($4, HEAP32[$image_data$addr >> 2] | 0, HEAP32[$image_data_len$addr >> 2] | 0, HEAP32[$out_n$addr >> 2] | 0, HEAP32[HEAP32[HEAP32[$a$addr >> 2] >> 2] >> 2] | 0, HEAP32[(HEAP32[HEAP32[$a$addr >> 2] >> 2] | 0) + 4 >> 2] | 0, HEAP32[$depth$addr >> 2] | 0, HEAP32[$color$addr >> 2] | 0) | 0;
  $97 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $97 | 0;
 }
 HEAP32[$final >> 2] = _stbi__malloc_mad3(HEAP32[HEAP32[$4 >> 2] >> 2] | 0, HEAP32[(HEAP32[HEAP32[$a$addr >> 2] >> 2] | 0) + 4 >> 2] | 0, HEAP32[$out_bytes >> 2] | 0, 0) | 0;
 HEAP32[$p >> 2] = 0;
 while (1) {
  if ((HEAP32[$p >> 2] | 0) >= 7) {
   label = 16;
   break;
  };
  HEAP32[$xorig >> 2] = HEAP32[1e3];
  HEAP32[$xorig + 4 >> 2] = HEAP32[1001];
  HEAP32[$xorig + 8 >> 2] = HEAP32[1002];
  HEAP32[$xorig + 12 >> 2] = HEAP32[1003];
  HEAP32[$xorig + 16 >> 2] = HEAP32[1004];
  HEAP32[$xorig + 20 >> 2] = HEAP32[1005];
  HEAP32[$xorig + 24 >> 2] = HEAP32[1006];
  HEAP32[$yorig >> 2] = HEAP32[1008];
  HEAP32[$yorig + 4 >> 2] = HEAP32[1009];
  HEAP32[$yorig + 8 >> 2] = HEAP32[1010];
  HEAP32[$yorig + 12 >> 2] = HEAP32[1011];
  HEAP32[$yorig + 16 >> 2] = HEAP32[1012];
  HEAP32[$yorig + 20 >> 2] = HEAP32[1013];
  HEAP32[$yorig + 24 >> 2] = HEAP32[1014];
  HEAP32[$xspc >> 2] = HEAP32[1016];
  HEAP32[$xspc + 4 >> 2] = HEAP32[1017];
  HEAP32[$xspc + 8 >> 2] = HEAP32[1018];
  HEAP32[$xspc + 12 >> 2] = HEAP32[1019];
  HEAP32[$xspc + 16 >> 2] = HEAP32[1020];
  HEAP32[$xspc + 20 >> 2] = HEAP32[1021];
  HEAP32[$xspc + 24 >> 2] = HEAP32[1022];
  HEAP32[$yspc >> 2] = HEAP32[1024];
  HEAP32[$yspc + 4 >> 2] = HEAP32[1025];
  HEAP32[$yspc + 8 >> 2] = HEAP32[1026];
  HEAP32[$yspc + 12 >> 2] = HEAP32[1027];
  HEAP32[$yspc + 16 >> 2] = HEAP32[1028];
  HEAP32[$yspc + 20 >> 2] = HEAP32[1029];
  HEAP32[$yspc + 24 >> 2] = HEAP32[1030];
  CSE$0 = HEAP32[$p >> 2] << 2 | 0;
  CSE$1 = HEAP32[$xspc + (HEAP32[$p >> 2] << 2) >> 2] | 0;
  HEAP32[$x >> 2] = (((HEAP32[HEAP32[HEAP32[$a$addr >> 2] >> 2] >> 2] | 0) - (HEAP32[$xorig + CSE$0 >> 2] | 0) + CSE$1 - 1 | 0) >>> 0) / ((CSE$1 | 0) >>> 0) | 0;
  CSE$2 = HEAP32[$p >> 2] << 2 | 0;
  CSE$3 = HEAP32[$yspc + (HEAP32[$p >> 2] << 2) >> 2] | 0;
  HEAP32[$y >> 2] = (((HEAP32[(HEAP32[HEAP32[$a$addr >> 2] >> 2] | 0) + 4 >> 2] | 0) - (HEAP32[$yorig + CSE$2 >> 2] | 0) + CSE$3 - 1 | 0) >>> 0) / ((CSE$3 | 0) >>> 0) | 0;
  if ((HEAP32[$x >> 2] | 0) != 0 & (HEAP32[$y >> 2] | 0) != 0) {
   $mul26 = Math_imul(HEAP32[(HEAP32[HEAP32[$a$addr >> 2] >> 2] | 0) + 8 >> 2] | 0, HEAP32[$x >> 2] | 0) | 0;
   $add29 = ((Math_imul($mul26, HEAP32[$depth$addr >> 2] | 0) | 0) + 7 >> 3) + 1 | 0;
   HEAP32[$img_len >> 2] = Math_imul($add29, HEAP32[$y >> 2] | 0) | 0;
   if (!(_stbi__create_png_image_raw(HEAP32[$a$addr >> 2] | 0, HEAP32[$image_data$addr >> 2] | 0, HEAP32[$image_data_len$addr >> 2] | 0, HEAP32[$out_n$addr >> 2] | 0, HEAP32[$x >> 2] | 0, HEAP32[$y >> 2] | 0, HEAP32[$depth$addr >> 2] | 0, HEAP32[$color$addr >> 2] | 0) | 0)) {
    label = 7;
    break;
   }
   HEAP32[$j >> 2] = 0;
   while (1) {
    if ((HEAP32[$j >> 2] | 0) >= (HEAP32[$y >> 2] | 0)) break;
    HEAP32[$i >> 2] = 0;
    while (1) {
     $62 = HEAP32[$j >> 2] | 0;
     if ((HEAP32[$i >> 2] | 0) >= (HEAP32[$x >> 2] | 0)) break;
     $mul42 = Math_imul($62, HEAP32[$yspc + (HEAP32[$p >> 2] << 2) >> 2] | 0) | 0;
     HEAP32[$out_y >> 2] = $mul42 + (HEAP32[$yorig + (HEAP32[$p >> 2] << 2) >> 2] | 0);
     $mul46 = Math_imul(HEAP32[$i >> 2] | 0, HEAP32[$xspc + (HEAP32[$p >> 2] << 2) >> 2] | 0) | 0;
     HEAP32[$out_x >> 2] = $mul46 + (HEAP32[$xorig + (HEAP32[$p >> 2] << 2) >> 2] | 0);
     $mul51 = Math_imul(HEAP32[$out_y >> 2] | 0, HEAP32[HEAP32[HEAP32[$a$addr >> 2] >> 2] >> 2] | 0) | 0;
     $add$ptr = (HEAP32[$final >> 2] | 0) + (Math_imul($mul51, HEAP32[$out_bytes >> 2] | 0) | 0) | 0;
     $add$ptr54 = $add$ptr + (Math_imul(HEAP32[$out_x >> 2] | 0, HEAP32[$out_bytes >> 2] | 0) | 0) | 0;
     $mul55 = Math_imul(HEAP32[$j >> 2] | 0, HEAP32[$x >> 2] | 0) | 0;
     $add$ptr58 = (HEAP32[(HEAP32[$a$addr >> 2] | 0) + 12 >> 2] | 0) + (Math_imul($mul55 + (HEAP32[$i >> 2] | 0) | 0, HEAP32[$out_bytes >> 2] | 0) | 0) | 0;
     _memcpy($add$ptr54 | 0, $add$ptr58 | 0, HEAP32[$out_bytes >> 2] | 0) | 0;
     HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
    }
    HEAP32[$j >> 2] = $62 + 1;
   }
   _free(HEAP32[(HEAP32[$a$addr >> 2] | 0) + 12 >> 2] | 0);
   HEAP32[$image_data$addr >> 2] = (HEAP32[$image_data$addr >> 2] | 0) + (HEAP32[$img_len >> 2] | 0);
   HEAP32[$image_data_len$addr >> 2] = (HEAP32[$image_data_len$addr >> 2] | 0) - (HEAP32[$img_len >> 2] | 0);
  }
  HEAP32[$p >> 2] = (HEAP32[$p >> 2] | 0) + 1;
 }
 if ((label | 0) == 7) {
  _free(HEAP32[$final >> 2] | 0);
  HEAP32[$retval >> 2] = 0;
  $97 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $97 | 0;
 } else if ((label | 0) == 16) {
  HEAP32[(HEAP32[$a$addr >> 2] | 0) + 12 >> 2] = HEAP32[$final >> 2];
  HEAP32[$retval >> 2] = 1;
  $97 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $97 | 0;
 }
 return 0;
}

function __ZNSt3__220__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, $__e, $__err, $__ct, $__n) {
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__err = $__err | 0;
 $__ct = $__ct | 0;
 $__n = $__n | 0;
 var $0 = 0, $1 = 0, $11 = 0, $12 = 0, $19 = 0, $20 = 0, $24 = 0, $25 = 0, $29 = 0, $30 = 0, $35 = 0, $36 = 0, $38 = 0, $39 = 0, $45 = 0, $46 = 0, $5 = 0, $50 = 0, $54 = 0, $55 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $__n$addr$0 = 0, $__n$addr$0$in = 0, $__ninp_$i$i24 = 0, $__ninp_$i$i93 = 0, $__r$0 = 0, $__r$0$in = 0, $add = 0, $conv = 0, $retval$0$i$i = 0, $retval$0$i$i$i$i = 0, $retval$0$i$i$i$i116 = 0, $retval$0$i$i$i$i45 = 0, $retval$0$i$i13$i$i = 0, $retval$0$i$i13$i$i137 = 0, $retval$0$i$i13$i$i66 = 0, $retval$0$i$i84 = 0, $retval$2 = 0, label = 0;
 label = 0;
 $0 = HEAP32[$__b >> 2] | 0;
 do if (!$0) $60 = 1; else {
  $1 = HEAP32[$0 + 12 >> 2] | 0;
  if (($1 | 0) == (HEAP32[$0 + 16 >> 2] | 0)) $retval$0$i$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$0 >> 2] | 0) + 36 >> 2] & 127]($0) | 0; else $retval$0$i$i$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$1 >> 2] | 0) | 0;
  if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i$i$i, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
   HEAP32[$__b >> 2] = 0;
   $60 = 1;
   break;
  } else {
   $60 = (HEAP32[$__b >> 2] | 0) == 0;
   break;
  }
 } while (0);
 $5 = HEAP32[$__e >> 2] | 0;
 do if (!$5) label = 14; else {
  $6 = HEAP32[$5 + 12 >> 2] | 0;
  if (($6 | 0) == (HEAP32[$5 + 16 >> 2] | 0)) $retval$0$i$i13$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$5 >> 2] | 0) + 36 >> 2] & 127]($5) | 0; else $retval$0$i$i13$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$6 >> 2] | 0) | 0;
  if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i13$i$i, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
   HEAP32[$__e >> 2] = 0;
   label = 14;
   break;
  } else if ($60) {
   $61 = $5;
   label = 17;
   break;
  } else {
   label = 16;
   break;
  }
 } while (0);
 if ((label | 0) == 14) if ($60) label = 16; else {
  $61 = 0;
  label = 17;
 }
 L22 : do if ((label | 0) == 16) {
  HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 6;
  $retval$2 = 0;
 } else if ((label | 0) == 17) {
  $11 = HEAP32[$__b >> 2] | 0;
  $12 = HEAP32[$11 + 12 >> 2] | 0;
  if (($12 | 0) == (HEAP32[$11 + 16 >> 2] | 0)) $retval$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$11 >> 2] | 0) + 36 >> 2] & 127]($11) | 0; else $retval$0$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$12 >> 2] | 0) | 0;
  if (!(FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$__ct >> 2] | 0) + 12 >> 2] & 63]($__ct, 2048, $retval$0$i$i) | 0)) {
   HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 4;
   $retval$2 = 0;
   break;
  }
  $conv = (FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$__ct >> 2] | 0) + 52 >> 2] & 63]($__ct, $retval$0$i$i, 0) | 0) << 24 >> 24;
  $19 = HEAP32[$__b >> 2] | 0;
  $__ninp_$i$i24 = $19 + 12 | 0;
  $20 = HEAP32[$__ninp_$i$i24 >> 2] | 0;
  if (($20 | 0) == (HEAP32[$19 + 16 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[$19 >> 2] | 0) + 40 >> 2] & 127]($19) | 0; else {
   HEAP32[$__ninp_$i$i24 >> 2] = $20 + 4;
   __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$20 >> 2] | 0) | 0;
  }
  $29 = $61;
  $62 = $61;
  $__n$addr$0$in = $__n;
  $__r$0$in = $conv;
  while (1) {
   $__r$0 = $__r$0$in + -48 | 0;
   $__n$addr$0 = $__n$addr$0$in + -1 | 0;
   $24 = HEAP32[$__b >> 2] | 0;
   do if (!$24) $36 = 1; else {
    $25 = HEAP32[$24 + 12 >> 2] | 0;
    if (($25 | 0) == (HEAP32[$24 + 16 >> 2] | 0)) $retval$0$i$i$i$i45 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$24 >> 2] | 0) + 36 >> 2] & 127]($24) | 0; else $retval$0$i$i$i$i45 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$25 >> 2] | 0) | 0;
    if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i$i$i45, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
     HEAP32[$__b >> 2] = 0;
     $36 = 1;
     break;
    } else {
     $36 = (HEAP32[$__b >> 2] | 0) == 0;
     break;
    }
   } while (0);
   if (!$29) {
    $35 = 1;
    $54 = $62;
    $63 = 0;
   } else {
    $30 = HEAP32[$29 + 12 >> 2] | 0;
    if (($30 | 0) == (HEAP32[$29 + 16 >> 2] | 0)) $retval$0$i$i13$i$i66 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$29 >> 2] | 0) + 36 >> 2] & 127]($29) | 0; else $retval$0$i$i13$i$i66 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$30 >> 2] | 0) | 0;
    if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i13$i$i66, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
     HEAP32[$__e >> 2] = 0;
     $35 = 1;
     $54 = 0;
     $63 = 0;
    } else {
     $35 = 0;
     $54 = $62;
     $63 = $29;
    }
   }
   $38 = HEAP32[$__b >> 2] | 0;
   if (!(($__n$addr$0$in | 0) > 1 & ($36 ^ $35))) break;
   $39 = HEAP32[$38 + 12 >> 2] | 0;
   if (($39 | 0) == (HEAP32[$38 + 16 >> 2] | 0)) $retval$0$i$i84 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$38 >> 2] | 0) + 36 >> 2] & 127]($38) | 0; else $retval$0$i$i84 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$39 >> 2] | 0) | 0;
   if (!(FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$__ct >> 2] | 0) + 12 >> 2] & 63]($__ct, 2048, $retval$0$i$i84) | 0)) {
    $retval$2 = $__r$0;
    break L22;
   }
   $add = ($__r$0 * 10 | 0) + ((FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$__ct >> 2] | 0) + 52 >> 2] & 63]($__ct, $retval$0$i$i84, 0) | 0) << 24 >> 24) | 0;
   $45 = HEAP32[$__b >> 2] | 0;
   $__ninp_$i$i93 = $45 + 12 | 0;
   $46 = HEAP32[$__ninp_$i$i93 >> 2] | 0;
   if (($46 | 0) == (HEAP32[$45 + 16 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[$45 >> 2] | 0) + 40 >> 2] & 127]($45) | 0; else {
    HEAP32[$__ninp_$i$i93 >> 2] = $46 + 4;
    __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$46 >> 2] | 0) | 0;
   }
   $29 = $63;
   $62 = $54;
   $__n$addr$0$in = $__n$addr$0;
   $__r$0$in = $add;
  }
  do if (!$38) $64 = 1; else {
   $50 = HEAP32[$38 + 12 >> 2] | 0;
   if (($50 | 0) == (HEAP32[$38 + 16 >> 2] | 0)) $retval$0$i$i$i$i116 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$38 >> 2] | 0) + 36 >> 2] & 127]($38) | 0; else $retval$0$i$i$i$i116 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$50 >> 2] | 0) | 0;
   if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i$i$i116, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
    HEAP32[$__b >> 2] = 0;
    $64 = 1;
    break;
   } else {
    $64 = (HEAP32[$__b >> 2] | 0) == 0;
    break;
   }
  } while (0);
  do if (!$54) label = 61; else {
   $55 = HEAP32[$54 + 12 >> 2] | 0;
   if (($55 | 0) == (HEAP32[$54 + 16 >> 2] | 0)) $retval$0$i$i13$i$i137 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$54 >> 2] | 0) + 36 >> 2] & 127]($54) | 0; else $retval$0$i$i13$i$i137 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$55 >> 2] | 0) | 0;
   if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i13$i$i137, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
    HEAP32[$__e >> 2] = 0;
    label = 61;
    break;
   } else if ($64) {
    $retval$2 = $__r$0;
    break L22;
   } else break;
  } while (0);
  if ((label | 0) == 61) if (!$64) {
   $retval$2 = $__r$0;
   break;
  }
  HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
  $retval$2 = $__r$0;
 } while (0);
 return $retval$2 | 0;
}

function __emscripten_dceable_type_decls() {
 _emscripten_glHint(0, 0);
 _emscripten_glIsBuffer(0) << 24 >> 24;
 _emscripten_glIsEnabled(0) << 24 >> 24;
 _emscripten_glIsFramebuffer(0) << 24 >> 24;
 _emscripten_glIsProgram(0) << 24 >> 24;
 _emscripten_glIsRenderbuffer(0) << 24 >> 24;
 _emscripten_glIsShader(0) << 24 >> 24;
 _emscripten_glIsTexture(0) << 24 >> 24;
 _emscripten_glLineWidth(Math_fround(0.0));
 _emscripten_glLinkProgram(0);
 _emscripten_glPixelStorei(0, 0);
 _emscripten_glPolygonOffset(Math_fround(0.0), Math_fround(0.0));
 _emscripten_glReadPixels(0, 0, 0, 0, 0, 0, 0);
 _emscripten_glReleaseShaderCompiler();
 _emscripten_glRenderbufferStorage(0, 0, 0, 0);
 _emscripten_glSampleCoverage(Math_fround(0.0), 0);
 _emscripten_glScissor(0, 0, 0, 0);
 _emscripten_glShaderBinary(0, 0, 0, 0, 0);
 _emscripten_glShaderSource(0, 0, 0, 0);
 _emscripten_glStencilFunc(0, 0, 0);
 _emscripten_glStencilFuncSeparate(0, 0, 0, 0);
 _emscripten_glStencilMask(0);
 _emscripten_glStencilMaskSeparate(0, 0);
 _emscripten_glStencilOp(0, 0, 0);
 _emscripten_glStencilOpSeparate(0, 0, 0, 0);
 _emscripten_glTexImage2D(0, 0, 0, 0, 0, 0, 0, 0, 0);
 _emscripten_glTexParameterf(0, 0, Math_fround(0.0));
 _emscripten_glTexParameterfv(0, 0, 0);
 _emscripten_glTexParameteri(0, 0, 0);
 _emscripten_glTexParameteriv(0, 0, 0);
 _emscripten_glTexSubImage2D(0, 0, 0, 0, 0, 0, 0, 0, 0);
 _emscripten_glUniform1f(0, Math_fround(0.0));
 _emscripten_glUniform1fv(0, 0, 0);
 _emscripten_glUniform1i(0, 0);
 _emscripten_glUniform1iv(0, 0, 0);
 _emscripten_glUniform2f(0, Math_fround(0.0), Math_fround(0.0));
 _emscripten_glUniform2fv(0, 0, 0);
 _emscripten_glUniform2i(0, 0, 0);
 _emscripten_glUniform2iv(0, 0, 0);
 _emscripten_glUniform3f(0, Math_fround(0.0), Math_fround(0.0), Math_fround(0.0));
 _emscripten_glUniform3fv(0, 0, 0);
 _emscripten_glUniform3i(0, 0, 0, 0);
 _emscripten_glUniform3iv(0, 0, 0);
 _emscripten_glUniform4f(0, Math_fround(0.0), Math_fround(0.0), Math_fround(0.0), Math_fround(0.0));
 _emscripten_glUniform4fv(0, 0, 0);
 _emscripten_glUniform4i(0, 0, 0, 0, 0);
 _emscripten_glUniform4iv(0, 0, 0);
 _emscripten_glUniformMatrix2fv(0, 0, 0, 0);
 _emscripten_glUniformMatrix3fv(0, 0, 0, 0);
 _emscripten_glUniformMatrix4fv(0, 0, 0, 0);
 _emscripten_glUseProgram(0);
 _emscripten_glValidateProgram(0);
 _emscripten_glVertexAttrib1f(0, Math_fround(0.0));
 _emscripten_glVertexAttrib1fv(0, 0);
 _emscripten_glVertexAttrib2f(0, Math_fround(0.0), Math_fround(0.0));
 _emscripten_glVertexAttrib2fv(0, 0);
 _emscripten_glVertexAttrib3f(0, Math_fround(0.0), Math_fround(0.0), Math_fround(0.0));
 _emscripten_glVertexAttrib3fv(0, 0);
 _emscripten_glVertexAttrib4f(0, Math_fround(0.0), Math_fround(0.0), Math_fround(0.0), Math_fround(0.0));
 _emscripten_glVertexAttrib4fv(0, 0);
 _emscripten_glVertexAttribPointer(0, 0, 0, 0, 0, 0);
 _emscripten_glViewport(0, 0, 0, 0);
 _emscripten_glBindVertexArrayOES(0);
 _emscripten_glDeleteVertexArraysOES(0, 0);
 _emscripten_glGenVertexArraysOES(0, 0);
 _emscripten_glIsVertexArrayOES(0) << 24 >> 24;
 _emscripten_glDrawBuffersWEBGL(0, 0);
 _emscripten_glVertexAttribDivisorANGLE(0, 0);
 _emscripten_glDrawArraysInstancedANGLE(0, 0, 0, 0);
 _emscripten_glDrawElementsInstancedANGLE(0, 0, 0, 0, 0);
 _emscripten_glGenQueriesEXT(0, 0);
 _emscripten_glDeleteQueriesEXT(0, 0);
 _emscripten_glIsQueryEXT(0) << 24 >> 24;
 _emscripten_glBeginQueryEXT(0, 0);
 _emscripten_glEndQueryEXT(0);
 _emscripten_glQueryCounterEXT(0, 0);
 _emscripten_glGetQueryivEXT(0, 0, 0);
 _emscripten_glGetQueryObjectivEXT(0, 0, 0);
 _emscripten_glGetQueryObjectuivEXT(0, 0, 0);
 _emscripten_glGetQueryObjecti64vEXT(0, 0, 0);
 _emscripten_glGetQueryObjectui64vEXT(0, 0, 0);
 _emscripten_glActiveTexture(0);
 _emscripten_glAttachShader(0, 0);
 _emscripten_glBindAttribLocation(0, 0, 0);
 _emscripten_glBindBuffer(0, 0);
 _emscripten_glBindFramebuffer(0, 0);
 _emscripten_glBindRenderbuffer(0, 0);
 _emscripten_glBindTexture(0, 0);
 _emscripten_glBlendColor(Math_fround(0.0), Math_fround(0.0), Math_fround(0.0), Math_fround(0.0));
 _emscripten_glBlendEquation(0);
 _emscripten_glBlendEquationSeparate(0, 0);
 _emscripten_glBlendFunc(0, 0);
 _emscripten_glBlendFuncSeparate(0, 0, 0, 0);
 _emscripten_glBufferData(0, 0, 0, 0);
 _emscripten_glBufferSubData(0, 0, 0, 0);
 _emscripten_glCheckFramebufferStatus(0) | 0;
 _emscripten_glClear(0);
 _emscripten_glClearColor(Math_fround(0.0), Math_fround(0.0), Math_fround(0.0), Math_fround(0.0));
 _emscripten_glClearDepthf(Math_fround(0.0));
 _emscripten_glClearStencil(0);
 _emscripten_glColorMask(0, 0, 0, 0);
 _emscripten_glCompileShader(0);
 _emscripten_glCompressedTexImage2D(0, 0, 0, 0, 0, 0, 0, 0);
 _emscripten_glCompressedTexSubImage2D(0, 0, 0, 0, 0, 0, 0, 0, 0);
 _emscripten_glCopyTexImage2D(0, 0, 0, 0, 0, 0, 0, 0);
 _emscripten_glCopyTexSubImage2D(0, 0, 0, 0, 0, 0, 0, 0);
 _emscripten_glCreateProgram() | 0;
 _emscripten_glCreateShader(0) | 0;
 _emscripten_glCullFace(0);
 _emscripten_glDeleteBuffers(0, 0);
 _emscripten_glDeleteFramebuffers(0, 0);
 _emscripten_glDeleteProgram(0);
 _emscripten_glDeleteRenderbuffers(0, 0);
 _emscripten_glDeleteShader(0);
 _emscripten_glDeleteTextures(0, 0);
 _emscripten_glDepthFunc(0);
 _emscripten_glDepthMask(0);
 _emscripten_glDepthRangef(Math_fround(0.0), Math_fround(0.0));
 _emscripten_glDetachShader(0, 0);
 _emscripten_glDisable(0);
 _emscripten_glDisableVertexAttribArray(0);
 _emscripten_glDrawArrays(0, 0, 0);
 _emscripten_glDrawElements(0, 0, 0, 0);
 _emscripten_glEnable(0);
 _emscripten_glEnableVertexAttribArray(0);
 _emscripten_glFinish();
 _emscripten_glFlush();
 _emscripten_glFramebufferRenderbuffer(0, 0, 0, 0);
 _emscripten_glFramebufferTexture2D(0, 0, 0, 0, 0);
 _emscripten_glFrontFace(0);
 _emscripten_glGenBuffers(0, 0);
 _emscripten_glGenerateMipmap(0);
 _emscripten_glGenFramebuffers(0, 0);
 _emscripten_glGenRenderbuffers(0, 0);
 _emscripten_glGenTextures(0, 0);
 _emscripten_glGetActiveAttrib(0, 0, 0, 0, 0, 0, 0);
 _emscripten_glGetActiveUniform(0, 0, 0, 0, 0, 0, 0);
 _emscripten_glGetAttachedShaders(0, 0, 0, 0);
 _emscripten_glGetAttribLocation(0, 0) | 0;
 _emscripten_glGetBooleanv(0, 0);
 _emscripten_glGetBufferParameteriv(0, 0, 0);
 _emscripten_glGetError() | 0;
 _emscripten_glGetFloatv(0, 0);
 _emscripten_glGetFramebufferAttachmentParameteriv(0, 0, 0, 0);
 _emscripten_glGetIntegerv(0, 0);
 _emscripten_glGetProgramiv(0, 0, 0);
 _emscripten_glGetProgramInfoLog(0, 0, 0, 0);
 _emscripten_glGetRenderbufferParameteriv(0, 0, 0);
 _emscripten_glGetShaderiv(0, 0, 0);
 _emscripten_glGetShaderInfoLog(0, 0, 0, 0);
 _emscripten_glGetShaderPrecisionFormat(0, 0, 0, 0);
 _emscripten_glGetShaderSource(0, 0, 0, 0);
 _emscripten_glGetString(0) | 0;
 _emscripten_glGetTexParameterfv(0, 0, 0);
 _emscripten_glGetTexParameteriv(0, 0, 0);
 _emscripten_glGetUniformfv(0, 0, 0);
 _emscripten_glGetUniformiv(0, 0, 0);
 _emscripten_glGetUniformLocation(0, 0) | 0;
 _emscripten_glGetVertexAttribfv(0, 0, 0);
 _emscripten_glGetVertexAttribiv(0, 0, 0);
 _emscripten_glGetVertexAttribPointerv(0, 0, 0);
}

function __ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this, $info, $current_ptr, $path_below, $use_strcmp) {
 $this = $this | 0;
 $info = $info | 0;
 $current_ptr = $current_ptr | 0;
 $path_below = $path_below | 0;
 $use_strcmp = $use_strcmp | 0;
 var $12 = 0, $17 = 0, $18 = 0, $__flags34 = 0, $add$ptr = 0, $add$ptr64 = 0, $does_dst_type_point_to_our_static_type$0 = 0, $does_dst_type_point_to_our_static_type$1 = 0, $does_dst_type_point_to_our_static_type$273 = 0, $does_dst_type_point_to_our_static_type$274 = 0, $dst_ptr_not_leading_to_static_ptr = 0, $found_any_static_type = 0, $found_our_static_ptr = 0, $incdec$ptr69 = 0, $is_dst_type_derived_from_static_type = 0, $is_dst_type_derived_from_static_type13$0$off0 = 0, $is_dst_type_derived_from_static_type13$1$off0 = 0, $number_to_dst_ptr = 0, $number_to_static_ptr76 = 0, $p$0 = 0, $p65$0 = 0, $p65$1 = 0, $p65$2 = 0, $path_dst_ptr_to_static_ptr = 0, $path_dst_ptr_to_static_ptr99 = 0, $search_done = 0, $search_done110 = 0, $search_done79 = 0, $search_done92 = 0, label = 0;
 label = 0;
 L1 : do if (__ZL8is_equalPKSt9type_infoS1_b($this, HEAP32[$info + 8 >> 2] | 0, $use_strcmp) | 0) __ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi(0, $info, $current_ptr, $path_below); else {
  if (!(__ZL8is_equalPKSt9type_infoS1_b($this, HEAP32[$info >> 2] | 0, $use_strcmp) | 0)) {
   $17 = HEAP32[$this + 12 >> 2] | 0;
   $add$ptr64 = $this + 16 + ($17 << 3) | 0;
   __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this + 16 | 0, $info, $current_ptr, $path_below, $use_strcmp);
   $incdec$ptr69 = $this + 24 | 0;
   if (($17 | 0) <= 1) break;
   $18 = HEAP32[$this + 8 >> 2] | 0;
   if (!($18 & 2)) {
    $number_to_static_ptr76 = $info + 36 | 0;
    if ((HEAP32[$number_to_static_ptr76 >> 2] | 0) != 1) {
     if (!($18 & 1)) {
      $search_done110 = $info + 54 | 0;
      $p65$2 = $incdec$ptr69;
      while (1) {
       if (HEAP8[$search_done110 >> 0] | 0) break L1;
       if ((HEAP32[$number_to_static_ptr76 >> 2] | 0) == 1) break L1;
       __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($p65$2, $info, $current_ptr, $path_below, $use_strcmp);
       $p65$2 = $p65$2 + 8 | 0;
       if ($p65$2 >>> 0 >= $add$ptr64 >>> 0) break L1;
      }
     }
     $path_dst_ptr_to_static_ptr99 = $info + 24 | 0;
     $search_done92 = $info + 54 | 0;
     $p65$1 = $incdec$ptr69;
     while (1) {
      if (HEAP8[$search_done92 >> 0] | 0) break L1;
      if ((HEAP32[$number_to_static_ptr76 >> 2] | 0) == 1) if ((HEAP32[$path_dst_ptr_to_static_ptr99 >> 2] | 0) == 1) break L1;
      __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($p65$1, $info, $current_ptr, $path_below, $use_strcmp);
      $p65$1 = $p65$1 + 8 | 0;
      if ($p65$1 >>> 0 >= $add$ptr64 >>> 0) break L1;
     }
    }
   }
   $search_done79 = $info + 54 | 0;
   $p65$0 = $incdec$ptr69;
   while (1) {
    if (HEAP8[$search_done79 >> 0] | 0) break L1;
    __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($p65$0, $info, $current_ptr, $path_below, $use_strcmp);
    $p65$0 = $p65$0 + 8 | 0;
    if ($p65$0 >>> 0 >= $add$ptr64 >>> 0) break L1;
   }
  }
  if ((HEAP32[$info + 16 >> 2] | 0) != ($current_ptr | 0)) {
   $dst_ptr_not_leading_to_static_ptr = $info + 20 | 0;
   if ((HEAP32[$dst_ptr_not_leading_to_static_ptr >> 2] | 0) != ($current_ptr | 0)) {
    HEAP32[$info + 32 >> 2] = $path_below;
    $is_dst_type_derived_from_static_type = $info + 44 | 0;
    if ((HEAP32[$is_dst_type_derived_from_static_type >> 2] | 0) != 4) {
     $add$ptr = $this + 16 + (HEAP32[$this + 12 >> 2] << 3) | 0;
     $found_our_static_ptr = $info + 52 | 0;
     $found_any_static_type = $info + 53 | 0;
     $search_done = $info + 54 | 0;
     $__flags34 = $this + 8 | 0;
     $path_dst_ptr_to_static_ptr = $info + 24 | 0;
     $does_dst_type_point_to_our_static_type$0 = 0;
     $is_dst_type_derived_from_static_type13$0$off0 = 0;
     $p$0 = $this + 16 | 0;
     L33 : while (1) {
      if ($p$0 >>> 0 >= $add$ptr >>> 0) {
       label = 18;
       break;
      }
      HEAP8[$found_our_static_ptr >> 0] = 0;
      HEAP8[$found_any_static_type >> 0] = 0;
      __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($p$0, $info, $current_ptr, $current_ptr, 1, $use_strcmp);
      if (HEAP8[$search_done >> 0] | 0) {
       label = 18;
       break;
      }
      do if (!(HEAP8[$found_any_static_type >> 0] | 0)) {
       $does_dst_type_point_to_our_static_type$1 = $does_dst_type_point_to_our_static_type$0;
       $is_dst_type_derived_from_static_type13$1$off0 = $is_dst_type_derived_from_static_type13$0$off0;
      } else {
       if (!(HEAP8[$found_our_static_ptr >> 0] | 0)) if (!(HEAP32[$__flags34 >> 2] & 1)) {
        $does_dst_type_point_to_our_static_type$274 = $does_dst_type_point_to_our_static_type$0;
        label = 19;
        break L33;
       } else {
        $does_dst_type_point_to_our_static_type$1 = $does_dst_type_point_to_our_static_type$0;
        $is_dst_type_derived_from_static_type13$1$off0 = 1;
        break;
       }
       if ((HEAP32[$path_dst_ptr_to_static_ptr >> 2] | 0) == 1) {
        $does_dst_type_point_to_our_static_type$274 = 1;
        label = 19;
        break L33;
       }
       if (!(HEAP32[$__flags34 >> 2] & 2)) {
        $does_dst_type_point_to_our_static_type$274 = 1;
        label = 19;
        break L33;
       } else {
        $does_dst_type_point_to_our_static_type$1 = 1;
        $is_dst_type_derived_from_static_type13$1$off0 = 1;
       }
      } while (0);
      $does_dst_type_point_to_our_static_type$0 = $does_dst_type_point_to_our_static_type$1;
      $is_dst_type_derived_from_static_type13$0$off0 = $is_dst_type_derived_from_static_type13$1$off0;
      $p$0 = $p$0 + 8 | 0;
     }
     if ((label | 0) == 18) if ($is_dst_type_derived_from_static_type13$0$off0) {
      $does_dst_type_point_to_our_static_type$274 = $does_dst_type_point_to_our_static_type$0;
      label = 19;
     } else {
      $12 = 4;
      $does_dst_type_point_to_our_static_type$273 = $does_dst_type_point_to_our_static_type$0;
     }
     if ((label | 0) == 19) {
      $12 = 3;
      $does_dst_type_point_to_our_static_type$273 = $does_dst_type_point_to_our_static_type$274;
     }
     HEAP32[$is_dst_type_derived_from_static_type >> 2] = $12;
     if ($does_dst_type_point_to_our_static_type$273 & 1) break;
    }
    HEAP32[$dst_ptr_not_leading_to_static_ptr >> 2] = $current_ptr;
    $number_to_dst_ptr = $info + 40 | 0;
    HEAP32[$number_to_dst_ptr >> 2] = (HEAP32[$number_to_dst_ptr >> 2] | 0) + 1;
    if ((HEAP32[$info + 36 >> 2] | 0) != 1) break;
    if ((HEAP32[$info + 24 >> 2] | 0) != 2) break;
    HEAP8[$info + 54 >> 0] = 1;
    break;
   }
  }
  if (($path_below | 0) == 1) HEAP32[$info + 32 >> 2] = 1;
 } while (0);
 return;
}

function __ZN8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE5eraseINS_6detail9iter_implISB_EELi0EEET_SG_($agg$result, $this, $pos) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $pos = $pos | 0;
 var $$pre$i = 0, $10 = 0, $11 = 0, $4 = 0, $6 = 0, $8 = 0, $__end_$i = 0, $__first$addr$06$i$i$i = 0, $__result$addr$0$lcssa$i$i10$i = 0, $__result$addr$0$lcssa$i$i11$i = 0, $__result$addr$07$i$i$i = 0, $__soon_to_be_end$07$i$i$i = 0, $add$ptr$i = 0, $add$ptr3$i = 0, $agg$tmp2$i = 0, $agg$tmp2$i$byval_copy = 0, $call$i1011 = 0, $call55 = 0, $exception = 0, $exception13 = 0, $exception52 = 0, $m_value = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $agg$tmp2$i$byval_copy = sp;
 $agg$tmp2$i = sp + 16 | 0;
 if ((HEAP32[$pos >> 2] | 0) != ($this | 0)) {
  $exception = ___cxa_allocate_exception(16) | 0;
  HEAP32[$agg$tmp2$i$byval_copy >> 2] = 0;
  HEAP32[$agg$tmp2$i$byval_copy + 4 >> 2] = 0;
  HEAP32[$agg$tmp2$i$byval_copy + 8 >> 2] = 0;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcm($agg$tmp2$i$byval_copy, 28015, __ZNSt3__211char_traitsIcE6lengthEPKc(28015) | 0);
  __ZN8nlohmann6detail16invalid_iterator6createEiRKNSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE($exception, 202, $agg$tmp2$i$byval_copy);
  ___cxa_throw($exception | 0, 15064, 9);
 }
 __ZN8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE3endEv($agg$result, $this);
 switch (HEAP8[$this >> 0] | 0) {
 case 3:
 case 6:
 case 5:
 case 7:
 case 4:
  {
   if (!(__ZNK8nlohmann6detail20primitive_iterator_t8is_beginEv($pos + 12 | 0) | 0)) {
    $exception13 = ___cxa_allocate_exception(16) | 0;
    HEAP32[$agg$tmp2$i$byval_copy >> 2] = 0;
    HEAP32[$agg$tmp2$i$byval_copy + 4 >> 2] = 0;
    HEAP32[$agg$tmp2$i$byval_copy + 8 >> 2] = 0;
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcm($agg$tmp2$i$byval_copy, 28051, __ZNSt3__211char_traitsIcE6lengthEPKc(28051) | 0);
    __ZN8nlohmann6detail16invalid_iterator6createEiRKNSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE($exception13, 205, $agg$tmp2$i$byval_copy);
    ___cxa_throw($exception13 | 0, 15064, 9);
   }
   if (__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE9is_stringEv($this) | 0) {
    $m_value = $this + 8 | 0;
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(HEAP32[$m_value >> 2] | 0);
    __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm(HEAP32[$m_value >> 2] | 0, 12);
    HEAP32[$m_value >> 2] = 0;
   }
   HEAP8[$this >> 0] = 0;
   __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE16assert_invariantEv($this);
   break;
  }
 case 1:
  {
   $4 = HEAP32[$this + 8 >> 2] | 0;
   HEAP32[$agg$tmp2$i >> 2] = HEAP32[$pos + 4 >> 2];
   HEAP32[$agg$tmp2$i$byval_copy >> 2] = HEAP32[$agg$tmp2$i >> 2];
   HEAP32[$agg$result + 4 >> 2] = __ZNSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8nlohmann10basic_jsonINS_3mapENS_6vectorES7_bxydS5_NS8_14adl_serializerEEEEENS_19__map_value_compareIS7_SE_NS_4lessIvEELb1EEENS5_ISE_EEE5eraseENS_21__tree_const_iteratorISE_PNS_11__tree_nodeISE_PvEElEE($4, $agg$tmp2$i$byval_copy) | 0;
   break;
  }
 case 2:
  {
   $6 = HEAP32[$this + 8 >> 2] | 0;
   $8 = HEAP32[$6 >> 2] | 0;
   $add$ptr$i = $8 + ((HEAP32[$pos + 8 >> 2] | 0) - $8 >> 4 << 4) | 0;
   $add$ptr3$i = $add$ptr$i + 16 | 0;
   $__end_$i = $6 + 4 | 0;
   $10 = HEAP32[$__end_$i >> 2] | 0;
   if (($add$ptr3$i | 0) == ($10 | 0)) {
    $11 = $add$ptr3$i;
    $__result$addr$0$lcssa$i$i10$i = $add$ptr$i;
    label = 15;
   } else {
    $__first$addr$06$i$i$i = $add$ptr3$i;
    $__result$addr$07$i$i$i = $add$ptr$i;
    do {
     __ZN8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEC2EOSB_($agg$tmp2$i$byval_copy, $__first$addr$06$i$i$i);
     __ZN8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEaSESB_($__result$addr$07$i$i$i, $agg$tmp2$i$byval_copy) | 0;
     __ZN8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEED2Ev($agg$tmp2$i$byval_copy);
     $__first$addr$06$i$i$i = $__first$addr$06$i$i$i + 16 | 0;
     $__result$addr$07$i$i$i = $__result$addr$07$i$i$i + 16 | 0;
    } while (($__first$addr$06$i$i$i | 0) != ($10 | 0));
    $$pre$i = HEAP32[$__end_$i >> 2] | 0;
    if (($$pre$i | 0) == ($__result$addr$07$i$i$i | 0)) $__result$addr$0$lcssa$i$i11$i = $__result$addr$07$i$i$i; else {
     $11 = $$pre$i;
     $__result$addr$0$lcssa$i$i10$i = $__result$addr$07$i$i$i;
     label = 15;
    }
   }
   if ((label | 0) == 15) {
    $__soon_to_be_end$07$i$i$i = $11;
    do {
     $__soon_to_be_end$07$i$i$i = $__soon_to_be_end$07$i$i$i + -16 | 0;
     __ZN8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEED2Ev($__soon_to_be_end$07$i$i$i);
    } while (($__soon_to_be_end$07$i$i$i | 0) != ($__result$addr$0$lcssa$i$i10$i | 0));
    $__result$addr$0$lcssa$i$i11$i = $__result$addr$0$lcssa$i$i10$i;
   }
   HEAP32[$__end_$i >> 2] = $__result$addr$0$lcssa$i$i11$i;
   HEAP32[$agg$result + 8 >> 2] = $add$ptr$i;
   break;
  }
 default:
  {
   $exception52 = ___cxa_allocate_exception(16) | 0;
   $call55 = __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE9type_nameEv($this) | 0;
   HEAP32[$agg$tmp2$i >> 2] = 0;
   HEAP32[$agg$tmp2$i + 4 >> 2] = 0;
   HEAP32[$agg$tmp2$i + 8 >> 2] = 0;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcm($agg$tmp2$i, $call55, __ZNSt3__211char_traitsIcE6lengthEPKc($call55) | 0);
   $call$i1011 = __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6insertEmPKc($agg$tmp2$i, 0, 28073) | 0;
   HEAP32[$agg$tmp2$i$byval_copy >> 2] = HEAP32[$call$i1011 >> 2];
   HEAP32[$agg$tmp2$i$byval_copy + 4 >> 2] = HEAP32[$call$i1011 + 4 >> 2];
   HEAP32[$agg$tmp2$i$byval_copy + 8 >> 2] = HEAP32[$call$i1011 + 8 >> 2];
   HEAP32[$call$i1011 >> 2] = 0;
   HEAP32[$call$i1011 + 4 >> 2] = 0;
   HEAP32[$call$i1011 + 8 >> 2] = 0;
   __ZN8nlohmann6detail10type_error6createEiRKNSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE($exception52, 307, $agg$tmp2$i$byval_copy);
   ___cxa_throw($exception52 | 0, 15016, 9);
  }
 }
 STACKTOP = sp;
 return;
}

function _try_realloc_chunk($p, $nb) {
 $p = $p | 0;
 $nb = $nb | 0;
 var $0 = 0, $1 = 0, $11 = 0, $12 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $30 = 0, $31 = 0, $32 = 0, $R$1 = 0, $R$1$be = 0, $R$1$ph = 0, $R$3 = 0, $RP$1 = 0, $RP$1$be = 0, $RP$1$ph = 0, $add = 0, $add$ptr = 0, $add$ptr17 = 0, $add$ptr303 = 0, $add$ptr41 = 0, $add$ptr66 = 0, $add$ptr67 = 0, $add105 = 0, $add58 = 0, $and = 0, $and2 = 0, $arrayidx = 0, $arrayidx179 = 0, $arrayidx186 = 0, $arrayidx190 = 0, $arrayidx206 = 0, $arrayidx226 = 0, $bk164 = 0, $child = 0, $child249 = 0, $fd138 = 0, $fd148$pre$phiZ2D = 0, $fd167 = 0, $head = 0, $head299 = 0, $head318 = 0, $head6 = 0, $head79 = 0, $head92 = 0, $newp$2 = 0, $shr = 0, $storemerge = 0, $storemerge3 = 0, $sub = 0, $sub110 = 0, $sub40 = 0, $sub62 = 0;
 $head = $p + 4 | 0;
 $0 = HEAP32[$head >> 2] | 0;
 $and = $0 & -8;
 $add$ptr = $p + $and | 0;
 $1 = HEAP32[15415] | 0;
 $and2 = $0 & 3;
 if (!(($and2 | 0) != 1 & $1 >>> 0 <= $p >>> 0 & $add$ptr >>> 0 > $p >>> 0)) _abort();
 $head6 = $add$ptr + 4 | 0;
 $2 = HEAP32[$head6 >> 2] | 0;
 if (!($2 & 1)) _abort();
 if (!$and2) {
  if ($nb >>> 0 < 256) {
   $newp$2 = 0;
   return $newp$2 | 0;
  }
  if ($and >>> 0 >= ($nb + 4 | 0) >>> 0) if (($and - $nb | 0) >>> 0 <= HEAP32[15531] << 1 >>> 0) {
   $newp$2 = $p;
   return $newp$2 | 0;
  }
  $newp$2 = 0;
  return $newp$2 | 0;
 }
 if ($and >>> 0 >= $nb >>> 0) {
  $sub = $and - $nb | 0;
  if ($sub >>> 0 <= 15) {
   $newp$2 = $p;
   return $newp$2 | 0;
  }
  $add$ptr17 = $p + $nb | 0;
  HEAP32[$head >> 2] = $0 & 1 | $nb | 2;
  HEAP32[$add$ptr17 + 4 >> 2] = $sub | 3;
  HEAP32[$head6 >> 2] = HEAP32[$head6 >> 2] | 1;
  _dispose_chunk($add$ptr17, $sub);
  $newp$2 = $p;
  return $newp$2 | 0;
 }
 if ((HEAP32[15417] | 0) == ($add$ptr | 0)) {
  $add = (HEAP32[15414] | 0) + $and | 0;
  $sub40 = $add - $nb | 0;
  $add$ptr41 = $p + $nb | 0;
  if ($add >>> 0 <= $nb >>> 0) {
   $newp$2 = 0;
   return $newp$2 | 0;
  }
  HEAP32[$head >> 2] = $0 & 1 | $nb | 2;
  HEAP32[$add$ptr41 + 4 >> 2] = $sub40 | 1;
  HEAP32[15417] = $add$ptr41;
  HEAP32[15414] = $sub40;
  $newp$2 = $p;
  return $newp$2 | 0;
 }
 if ((HEAP32[15416] | 0) == ($add$ptr | 0)) {
  $add58 = (HEAP32[15413] | 0) + $and | 0;
  if ($add58 >>> 0 < $nb >>> 0) {
   $newp$2 = 0;
   return $newp$2 | 0;
  }
  $sub62 = $add58 - $nb | 0;
  if ($sub62 >>> 0 > 15) {
   $add$ptr66 = $p + $nb | 0;
   $add$ptr67 = $p + $add58 | 0;
   HEAP32[$head >> 2] = $0 & 1 | $nb | 2;
   HEAP32[$add$ptr66 + 4 >> 2] = $sub62 | 1;
   HEAP32[$add$ptr67 >> 2] = $sub62;
   $head79 = $add$ptr67 + 4 | 0;
   HEAP32[$head79 >> 2] = HEAP32[$head79 >> 2] & -2;
   $storemerge = $add$ptr66;
   $storemerge3 = $sub62;
  } else {
   HEAP32[$head >> 2] = $0 & 1 | $add58 | 2;
   $head92 = $p + $add58 + 4 | 0;
   HEAP32[$head92 >> 2] = HEAP32[$head92 >> 2] | 1;
   $storemerge = 0;
   $storemerge3 = 0;
  }
  HEAP32[15413] = $storemerge3;
  HEAP32[15416] = $storemerge;
  $newp$2 = $p;
  return $newp$2 | 0;
 }
 if ($2 & 2 | 0) {
  $newp$2 = 0;
  return $newp$2 | 0;
 }
 $add105 = ($2 & -8) + $and | 0;
 if ($add105 >>> 0 < $nb >>> 0) {
  $newp$2 = 0;
  return $newp$2 | 0;
 }
 $sub110 = $add105 - $nb | 0;
 $shr = $2 >>> 3;
 L49 : do if ($2 >>> 0 < 256) {
  $11 = HEAP32[$add$ptr + 8 >> 2] | 0;
  $12 = HEAP32[$add$ptr + 12 >> 2] | 0;
  $arrayidx = 61684 + ($shr << 1 << 2) | 0;
  if (($11 | 0) != ($arrayidx | 0)) {
   if ($1 >>> 0 > $11 >>> 0) _abort();
   if ((HEAP32[$11 + 12 >> 2] | 0) != ($add$ptr | 0)) _abort();
  }
  if (($12 | 0) == ($11 | 0)) {
   HEAP32[15411] = HEAP32[15411] & ~(1 << $shr);
   break;
  }
  if (($12 | 0) == ($arrayidx | 0)) $fd148$pre$phiZ2D = $12 + 8 | 0; else {
   if ($1 >>> 0 > $12 >>> 0) _abort();
   $fd138 = $12 + 8 | 0;
   if ((HEAP32[$fd138 >> 2] | 0) == ($add$ptr | 0)) $fd148$pre$phiZ2D = $fd138; else _abort();
  }
  HEAP32[$11 + 12 >> 2] = $12;
  HEAP32[$fd148$pre$phiZ2D >> 2] = $11;
 } else {
  $16 = HEAP32[$add$ptr + 24 >> 2] | 0;
  $17 = HEAP32[$add$ptr + 12 >> 2] | 0;
  do if (($17 | 0) == ($add$ptr | 0)) {
   $child = $add$ptr + 16 | 0;
   $arrayidx179 = $child + 4 | 0;
   $21 = HEAP32[$arrayidx179 >> 2] | 0;
   if (!$21) {
    $22 = HEAP32[$child >> 2] | 0;
    if (!$22) {
     $R$3 = 0;
     break;
    } else {
     $R$1$ph = $22;
     $RP$1$ph = $child;
    }
   } else {
    $R$1$ph = $21;
    $RP$1$ph = $arrayidx179;
   }
   $R$1 = $R$1$ph;
   $RP$1 = $RP$1$ph;
   while (1) {
    $arrayidx186 = $R$1 + 20 | 0;
    $23 = HEAP32[$arrayidx186 >> 2] | 0;
    if (!$23) {
     $arrayidx190 = $R$1 + 16 | 0;
     $24 = HEAP32[$arrayidx190 >> 2] | 0;
     if (!$24) break; else {
      $R$1$be = $24;
      $RP$1$be = $arrayidx190;
     }
    } else {
     $R$1$be = $23;
     $RP$1$be = $arrayidx186;
    }
    $R$1 = $R$1$be;
    $RP$1 = $RP$1$be;
   }
   if ($1 >>> 0 > $RP$1 >>> 0) _abort(); else {
    HEAP32[$RP$1 >> 2] = 0;
    $R$3 = $R$1;
    break;
   }
  } else {
   $18 = HEAP32[$add$ptr + 8 >> 2] | 0;
   if ($1 >>> 0 > $18 >>> 0) _abort();
   $bk164 = $18 + 12 | 0;
   if ((HEAP32[$bk164 >> 2] | 0) != ($add$ptr | 0)) _abort();
   $fd167 = $17 + 8 | 0;
   if ((HEAP32[$fd167 >> 2] | 0) == ($add$ptr | 0)) {
    HEAP32[$bk164 >> 2] = $17;
    HEAP32[$fd167 >> 2] = $18;
    $R$3 = $17;
    break;
   } else _abort();
  } while (0);
  if ($16 | 0) {
   $25 = HEAP32[$add$ptr + 28 >> 2] | 0;
   $arrayidx206 = 61948 + ($25 << 2) | 0;
   do if ((HEAP32[$arrayidx206 >> 2] | 0) == ($add$ptr | 0)) {
    HEAP32[$arrayidx206 >> 2] = $R$3;
    if (!$R$3) {
     HEAP32[15412] = HEAP32[15412] & ~(1 << $25);
     break L49;
    }
   } else if ((HEAP32[15415] | 0) >>> 0 > $16 >>> 0) _abort(); else {
    $arrayidx226 = $16 + 16 | 0;
    HEAP32[((HEAP32[$arrayidx226 >> 2] | 0) == ($add$ptr | 0) ? $arrayidx226 : $16 + 20 | 0) >> 2] = $R$3;
    if (!$R$3) break L49; else break;
   } while (0);
   $30 = HEAP32[15415] | 0;
   if ($30 >>> 0 > $R$3 >>> 0) _abort();
   HEAP32[$R$3 + 24 >> 2] = $16;
   $child249 = $add$ptr + 16 | 0;
   $31 = HEAP32[$child249 >> 2] | 0;
   do if ($31 | 0) if ($30 >>> 0 > $31 >>> 0) _abort(); else {
    HEAP32[$R$3 + 16 >> 2] = $31;
    HEAP32[$31 + 24 >> 2] = $R$3;
    break;
   } while (0);
   $32 = HEAP32[$child249 + 4 >> 2] | 0;
   if ($32 | 0) if ((HEAP32[15415] | 0) >>> 0 > $32 >>> 0) _abort(); else {
    HEAP32[$R$3 + 20 >> 2] = $32;
    HEAP32[$32 + 24 >> 2] = $R$3;
    break;
   }
  }
 } while (0);
 if ($sub110 >>> 0 < 16) {
  HEAP32[$head >> 2] = $0 & 1 | $add105 | 2;
  $head299 = $p + $add105 + 4 | 0;
  HEAP32[$head299 >> 2] = HEAP32[$head299 >> 2] | 1;
  $newp$2 = $p;
  return $newp$2 | 0;
 } else {
  $add$ptr303 = $p + $nb | 0;
  HEAP32[$head >> 2] = $0 & 1 | $nb | 2;
  HEAP32[$add$ptr303 + 4 >> 2] = $sub110 | 3;
  $head318 = $p + $add105 + 4 | 0;
  HEAP32[$head318 >> 2] = HEAP32[$head318 >> 2] | 1;
  _dispose_chunk($add$ptr303, $sub110);
  $newp$2 = $p;
  return $newp$2 | 0;
 }
 return 0;
}

function _DrawTextEx($font, $text, $position, $fontSize, $spacing, $tint) {
 $font = $font | 0;
 $text = $text | 0;
 $position = $position | 0;
 $fontSize = Math_fround($fontSize);
 $spacing = Math_fround($spacing);
 $tint = $tint | 0;
 var $$compoundliteral = 0, $$compoundliteral$byval_copy = 0, $1 = f0, $16 = f0, $22 = f0, $30 = f0, $34 = f0, $43 = f0, $7 = 0, $add21 = f0, $add28 = f0, $add55 = f0, $add63 = f0, $arrayidx42 = 0, $arrayidx42$byval_copy = 0, $codepoint = 0, $codepointByteCount = 0, $conv12 = f0, $conv13 = 0, $conv23 = f0, $conv31 = f0, $conv61 = f0, $fontSize$addr = 0, $i = 0, $index = 0, $length = 0, $mul54 = f0, $mul62 = f0, $rec = 0, $rec$byval_copy = 0, $scaleFactor = 0, $spacing$addr = 0, $text$addr = 0, $textOffsetX = 0, $textOffsetY = 0, $texture = 0, $texture$byval_copy = 0, $tint$byval_copy = 0, dest = 0, sp = 0, src = 0, stop = 0, CSE$0 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(176);
 $tint$byval_copy = sp + 128 | 0;
 $$compoundliteral$byval_copy = sp + 120 | 0;
 $rec$byval_copy = sp + 104 | 0;
 $arrayidx42$byval_copy = sp + 88 | 0;
 $texture$byval_copy = sp + 68 | 0;
 $text$addr = sp + 64 | 0;
 $fontSize$addr = sp + 60 | 0;
 $spacing$addr = sp + 56 | 0;
 $length = sp + 52 | 0;
 $textOffsetY = sp + 48 | 0;
 $textOffsetX = sp + 44 | 0;
 $scaleFactor = sp + 40 | 0;
 $i = sp + 36 | 0;
 $codepointByteCount = sp + 32 | 0;
 $codepoint = sp + 28 | 0;
 $index = sp + 24 | 0;
 $rec = sp + 8 | 0;
 $$compoundliteral = sp;
 HEAP32[$text$addr >> 2] = $text;
 HEAPF32[$fontSize$addr >> 2] = $fontSize;
 HEAPF32[$spacing$addr >> 2] = $spacing;
 HEAP32[$length >> 2] = _strlen(HEAP32[$text$addr >> 2] | 0) | 0;
 HEAP32[$textOffsetY >> 2] = 0;
 HEAPF32[$textOffsetX >> 2] = Math_fround(0.0);
 $1 = Math_fround(HEAPF32[$fontSize$addr >> 2]);
 HEAPF32[$scaleFactor >> 2] = Math_fround($1 / Math_fround(HEAP32[$font >> 2] | 0));
 HEAP32[$i >> 2] = 0;
 while (1) {
  if ((HEAP32[$i >> 2] | 0) >= (HEAP32[$length >> 2] | 0)) break;
  HEAP32[$codepointByteCount >> 2] = 0;
  HEAP32[$codepoint >> 2] = _GetNextCodepoint((HEAP32[$text$addr >> 2] | 0) + (HEAP32[$i >> 2] | 0) | 0, $codepointByteCount) | 0;
  $7 = HEAP32[$codepoint >> 2] | 0;
  dest = $tint$byval_copy;
  src = $font;
  stop = dest + 36 | 0;
  do {
   HEAP32[dest >> 2] = HEAP32[src >> 2];
   dest = dest + 4 | 0;
   src = src + 4 | 0;
  } while ((dest | 0) < (stop | 0));
  HEAP32[$index >> 2] = _GetGlyphIndex($tint$byval_copy, $7) | 0;
  if ((HEAP32[$codepoint >> 2] | 0) == 63) HEAP32[$codepointByteCount >> 2] = 1;
  do if ((HEAP32[$codepoint >> 2] | 0) == 10) {
   CSE$0 = HEAP32[$font >> 2] | 0;
   $conv12 = Math_fround(CSE$0 + ((CSE$0 | 0) / 2 | 0) | 0);
   $conv13 = ~~Math_fround($conv12 * Math_fround(HEAPF32[$scaleFactor >> 2]));
   HEAP32[$textOffsetY >> 2] = (HEAP32[$textOffsetY >> 2] | 0) + $conv13;
   HEAPF32[$textOffsetX >> 2] = Math_fround(0.0);
  } else {
   if ((HEAP32[$codepoint >> 2] | 0) != 32 & (HEAP32[$codepoint >> 2] | 0) != 9) {
    $16 = Math_fround(HEAPF32[$position >> 2]);
    $add21 = Math_fround($16 + Math_fround(HEAPF32[$textOffsetX >> 2]));
    $conv23 = Math_fround(HEAP32[(HEAP32[$font + 32 >> 2] | 0) + ((HEAP32[$index >> 2] | 0) * 36 | 0) + 4 >> 2] | 0);
    HEAPF32[$rec >> 2] = Math_fround($add21 + Math_fround($conv23 * Math_fround(HEAPF32[$scaleFactor >> 2])));
    $22 = Math_fround(HEAPF32[$position + 4 >> 2]);
    $add28 = Math_fround($22 + Math_fround(HEAP32[$textOffsetY >> 2] | 0));
    $conv31 = Math_fround(HEAP32[(HEAP32[$font + 32 >> 2] | 0) + ((HEAP32[$index >> 2] | 0) * 36 | 0) + 8 >> 2] | 0);
    HEAPF32[$rec + 4 >> 2] = Math_fround($add28 + Math_fround($conv31 * Math_fround(HEAPF32[$scaleFactor >> 2])));
    $30 = Math_fround(HEAPF32[(HEAP32[$font + 28 >> 2] | 0) + (HEAP32[$index >> 2] << 4) + 8 >> 2]);
    HEAPF32[$rec + 8 >> 2] = Math_fround($30 * Math_fround(HEAPF32[$scaleFactor >> 2]));
    $34 = Math_fround(HEAPF32[(HEAP32[$font + 28 >> 2] | 0) + (HEAP32[$index >> 2] << 4) + 12 >> 2]);
    HEAPF32[$rec + 12 >> 2] = Math_fround($34 * Math_fround(HEAPF32[$scaleFactor >> 2]));
    $texture = $font + 8 | 0;
    $arrayidx42 = (HEAP32[$font + 28 >> 2] | 0) + (HEAP32[$index >> 2] << 4) | 0;
    HEAPF32[$$compoundliteral >> 2] = Math_fround(0.0);
    HEAPF32[$$compoundliteral + 4 >> 2] = Math_fround(0.0);
    HEAP32[$texture$byval_copy >> 2] = HEAP32[$texture >> 2];
    HEAP32[$texture$byval_copy + 4 >> 2] = HEAP32[$texture + 4 >> 2];
    HEAP32[$texture$byval_copy + 8 >> 2] = HEAP32[$texture + 8 >> 2];
    HEAP32[$texture$byval_copy + 12 >> 2] = HEAP32[$texture + 12 >> 2];
    HEAP32[$texture$byval_copy + 16 >> 2] = HEAP32[$texture + 16 >> 2];
    HEAP32[$arrayidx42$byval_copy >> 2] = HEAP32[$arrayidx42 >> 2];
    HEAP32[$arrayidx42$byval_copy + 4 >> 2] = HEAP32[$arrayidx42 + 4 >> 2];
    HEAP32[$arrayidx42$byval_copy + 8 >> 2] = HEAP32[$arrayidx42 + 8 >> 2];
    HEAP32[$arrayidx42$byval_copy + 12 >> 2] = HEAP32[$arrayidx42 + 12 >> 2];
    HEAP32[$rec$byval_copy >> 2] = HEAP32[$rec >> 2];
    HEAP32[$rec$byval_copy + 4 >> 2] = HEAP32[$rec + 4 >> 2];
    HEAP32[$rec$byval_copy + 8 >> 2] = HEAP32[$rec + 8 >> 2];
    HEAP32[$rec$byval_copy + 12 >> 2] = HEAP32[$rec + 12 >> 2];
    HEAP32[$$compoundliteral$byval_copy >> 2] = HEAP32[$$compoundliteral >> 2];
    HEAP32[$$compoundliteral$byval_copy + 4 >> 2] = HEAP32[$$compoundliteral + 4 >> 2];
    HEAP8[$tint$byval_copy >> 0] = HEAP8[$tint >> 0] | 0;
    HEAP8[$tint$byval_copy + 1 >> 0] = HEAP8[$tint + 1 >> 0] | 0;
    HEAP8[$tint$byval_copy + 2 >> 0] = HEAP8[$tint + 2 >> 0] | 0;
    HEAP8[$tint$byval_copy + 3 >> 0] = HEAP8[$tint + 3 >> 0] | 0;
    _DrawTexturePro($texture$byval_copy, $arrayidx42$byval_copy, $rec$byval_copy, $$compoundliteral$byval_copy, Math_fround(0.0), $tint$byval_copy);
   }
   if (!(HEAP32[(HEAP32[$font + 32 >> 2] | 0) + ((HEAP32[$index >> 2] | 0) * 36 | 0) + 12 >> 2] | 0)) {
    $43 = Math_fround(HEAPF32[(HEAP32[$font + 28 >> 2] | 0) + (HEAP32[$index >> 2] << 4) + 8 >> 2]);
    $mul54 = Math_fround($43 * Math_fround(HEAPF32[$scaleFactor >> 2]));
    $add55 = Math_fround($mul54 + Math_fround(HEAPF32[$spacing$addr >> 2]));
    HEAPF32[$textOffsetX >> 2] = Math_fround(Math_fround(HEAPF32[$textOffsetX >> 2]) + $add55);
    break;
   } else {
    $conv61 = Math_fround(HEAP32[(HEAP32[$font + 32 >> 2] | 0) + ((HEAP32[$index >> 2] | 0) * 36 | 0) + 12 >> 2] | 0);
    $mul62 = Math_fround($conv61 * Math_fround(HEAPF32[$scaleFactor >> 2]));
    $add63 = Math_fround($mul62 + Math_fround(HEAPF32[$spacing$addr >> 2]));
    HEAPF32[$textOffsetX >> 2] = Math_fround(Math_fround(HEAPF32[$textOffsetX >> 2]) + $add63);
    break;
   }
  } while (0);
  HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + ((HEAP32[$codepointByteCount >> 2] | 0) - 1);
  HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
 }
 STACKTOP = sp;
 return;
}

function __ZN4Mapa7dibujarEv($this) {
 $this = $this | 0;
 var $10 = 0, $18 = 0, $22 = 0, $23 = 0, $24 = 0, $26 = 0, $27 = 0, $__begin27$sroa$0$072 = 0, $__parent_$i410$i$i$i = 0, $__parent_$i47$i$i$i = 0, $__value_$i$i$i$i$i = 0, $__x$addr$0$i$i$i$i = 0, $add62 = 0, $agg$tmp = 0, $agg$tmp74 = 0, $agg$tmp74$byval_copy = 0, $agg$tmp75 = 0, $agg$tmp75$byval_copy = 0, $agg$tmp76 = 0, $call$i$i$i = 0, $call11 = 0, $call13 = 0, $call15 = 0, $call24 = 0, $call26 = 0, $call7 = 0, $call9 = 0, $conv = f0, $conv44 = f0, $conv51 = f0, $conv6 = f0, $conv71 = f0, $div = 0, $map_tex = 0, $map_tex$byval_copy = 0, $map_tileset = 0, $mul = f0, $mul56 = f0, $position$sroa$4$0$$sroa_idx8 = 0, $retval$0$i$i$i = 0, $second$i$i = 0, $sub = 0, $tile_rec$sroa$6$0$$sroa_idx49 = 0, $tile_rec$sroa$8$0$$sroa_idx52 = 0, $tile_rec$sroa$9$0$$sroa_idx55 = 0, $tmpcast$byval_copy = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(96);
 $tmpcast$byval_copy = sp + 80 | 0;
 $agg$tmp75$byval_copy = sp + 72 | 0;
 $agg$tmp74$byval_copy = sp + 56 | 0;
 $map_tex$byval_copy = sp + 32 | 0;
 $agg$tmp = sp + 92 | 0;
 $agg$tmp74 = sp + 16 | 0;
 $agg$tmp75 = sp + 8 | 0;
 $agg$tmp76 = sp;
 $conv = Math_fround(HEAP32[(__ZNK4tson3Map11getTileSizeEv($this) | 0) >> 2] | 0);
 $conv6 = Math_fround(HEAP32[(__ZNK4tson3Map11getTileSizeEv($this) | 0) + 4 >> 2] | 0);
 $map_tileset = $this + 208 | 0;
 $call7 = __ZNK4tson7Tileset11getFirstgidEv(HEAP32[$map_tileset >> 2] | 0) | 0;
 $call9 = __ZNK4tson7Tileset10getColumnsEv(HEAP32[$map_tileset >> 2] | 0) | 0;
 $call11 = __ZNK4tson7Tileset9getMarginEv(HEAP32[$map_tileset >> 2] | 0) | 0;
 $call13 = __ZNK4tson7Tileset10getSpacingEv(HEAP32[$map_tileset >> 2] | 0) | 0;
 $call15 = __ZNK4tson3Map18getBackgroundColorEv($this) | 0;
 HEAP8[$agg$tmp >> 0] = HEAP8[$call15 >> 0] | 0;
 HEAP8[$agg$tmp + 1 >> 0] = HEAP8[$call15 + 1 >> 0] | 0;
 HEAP8[$agg$tmp + 2 >> 0] = HEAP8[$call15 + 2 >> 0] | 0;
 HEAP8[$agg$tmp + 3 >> 0] = HEAP8[$call15 + 3 >> 0] | 0;
 HEAP8[$tmpcast$byval_copy >> 0] = HEAP8[$agg$tmp >> 0] | 0;
 HEAP8[$tmpcast$byval_copy + 1 >> 0] = HEAP8[$agg$tmp + 1 >> 0] | 0;
 HEAP8[$tmpcast$byval_copy + 2 >> 0] = HEAP8[$agg$tmp + 2 >> 0] | 0;
 HEAP8[$tmpcast$byval_copy + 3 >> 0] = HEAP8[$agg$tmp + 3 >> 0] | 0;
 _ClearBackground($tmpcast$byval_copy);
 $map_tex = $this + 188 | 0;
 $tile_rec$sroa$6$0$$sroa_idx49 = $agg$tmp74 + 4 | 0;
 $tile_rec$sroa$8$0$$sroa_idx52 = $agg$tmp74 + 8 | 0;
 $tile_rec$sroa$9$0$$sroa_idx55 = $agg$tmp74 + 12 | 0;
 $position$sroa$4$0$$sroa_idx8 = $agg$tmp75 + 4 | 0;
 HEAP32[$tmpcast$byval_copy >> 2] = 0;
 HEAP32[$tmpcast$byval_copy + 4 >> 2] = 0;
 HEAP32[$tmpcast$byval_copy + 8 >> 2] = 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcm($tmpcast$byval_copy, 28446, __ZNSt3__211char_traitsIcE6lengthEPKc(28446) | 0);
 $call24 = __ZN4tson3Map8getLayerERKNSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE($this, $tmpcast$byval_copy) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($tmpcast$byval_copy);
 $call26 = __ZNK4tson5Layer11getTileDataEv($call24) | 0;
 $10 = HEAP32[$call26 >> 2] | 0;
 $__value_$i$i$i$i$i = $call26 + 4 | 0;
 if (($10 | 0) != ($__value_$i$i$i$i$i | 0)) {
  $__begin27$sroa$0$072 = $10;
  while (1) {
   $call$i$i$i = __ZNSt3__29__launderIKNS_4pairIKNS_5tupleIJiiEEEPN4tson4TileEEEEEPT_SB_($__begin27$sroa$0$072 + 16 | 0) | 0;
   $second$i$i = $call$i$i$i + 8 | 0;
   if (HEAP32[$second$i$i >> 2] | 0) {
    $conv44 = Math_fround(HEAP32[$call$i$i$i >> 2] | 0);
    $mul = Math_fround($conv44 * Math_fround(HEAP32[(__ZNK4tson3Map11getTileSizeEv($this) | 0) >> 2] | 0));
    $conv51 = Math_fround(HEAP32[$call$i$i$i + 4 >> 2] | 0);
    $mul56 = Math_fround($conv51 * Math_fround(HEAP32[(__ZNK4tson3Map11getTileSizeEv($this) | 0) + 4 >> 2] | 0));
    $sub = (__ZNK4tson4Tile5getIdEv(HEAP32[$second$i$i >> 2] | 0) | 0) - $call7 | 0;
    $div = ($sub | 0) / ($call9 | 0) | 0;
    $18 = $sub - (Math_imul($div, $call9) | 0) | 0;
    $add62 = (Math_imul((HEAP32[(__ZNK4tson3Map11getTileSizeEv($this) | 0) >> 2] | 0) + $call13 | 0, $18) | 0) + $call11 | 0;
    $conv71 = Math_fround((Math_imul((HEAP32[(__ZNK4tson3Map11getTileSizeEv($this) | 0) + 4 >> 2] | 0) + $call13 | 0, $div) | 0) + $call11 | 0);
    HEAPF32[$agg$tmp74 >> 2] = Math_fround($add62 | 0);
    HEAPF32[$tile_rec$sroa$6$0$$sroa_idx49 >> 2] = $conv71;
    HEAPF32[$tile_rec$sroa$8$0$$sroa_idx52 >> 2] = $conv;
    HEAPF32[$tile_rec$sroa$9$0$$sroa_idx55 >> 2] = $conv6;
    HEAPF32[$agg$tmp75 >> 2] = $mul;
    HEAPF32[$position$sroa$4$0$$sroa_idx8 >> 2] = $mul56;
    HEAP32[$agg$tmp76 >> 2] = -1;
    HEAP32[$map_tex$byval_copy >> 2] = HEAP32[$map_tex >> 2];
    HEAP32[$map_tex$byval_copy + 4 >> 2] = HEAP32[$map_tex + 4 >> 2];
    HEAP32[$map_tex$byval_copy + 8 >> 2] = HEAP32[$map_tex + 8 >> 2];
    HEAP32[$map_tex$byval_copy + 12 >> 2] = HEAP32[$map_tex + 12 >> 2];
    HEAP32[$map_tex$byval_copy + 16 >> 2] = HEAP32[$map_tex + 16 >> 2];
    HEAP32[$agg$tmp74$byval_copy >> 2] = HEAP32[$agg$tmp74 >> 2];
    HEAP32[$agg$tmp74$byval_copy + 4 >> 2] = HEAP32[$agg$tmp74 + 4 >> 2];
    HEAP32[$agg$tmp74$byval_copy + 8 >> 2] = HEAP32[$agg$tmp74 + 8 >> 2];
    HEAP32[$agg$tmp74$byval_copy + 12 >> 2] = HEAP32[$agg$tmp74 + 12 >> 2];
    HEAP32[$agg$tmp75$byval_copy >> 2] = HEAP32[$agg$tmp75 >> 2];
    HEAP32[$agg$tmp75$byval_copy + 4 >> 2] = HEAP32[$agg$tmp75 + 4 >> 2];
    HEAP8[$tmpcast$byval_copy >> 0] = HEAP8[$agg$tmp76 >> 0] | 0;
    HEAP8[$tmpcast$byval_copy + 1 >> 0] = HEAP8[$agg$tmp76 + 1 >> 0] | 0;
    HEAP8[$tmpcast$byval_copy + 2 >> 0] = HEAP8[$agg$tmp76 + 2 >> 0] | 0;
    HEAP8[$tmpcast$byval_copy + 3 >> 0] = HEAP8[$agg$tmp76 + 3 >> 0] | 0;
    _DrawTextureRec($map_tex$byval_copy, $agg$tmp74$byval_copy, $agg$tmp75$byval_copy, $tmpcast$byval_copy);
   }
   $22 = HEAP32[$__begin27$sroa$0$072 + 4 >> 2] | 0;
   if (!$22) {
    $__parent_$i47$i$i$i = $__begin27$sroa$0$072 + 8 | 0;
    $24 = HEAP32[$__parent_$i47$i$i$i >> 2] | 0;
    if ((HEAP32[$24 >> 2] | 0) == ($__begin27$sroa$0$072 | 0)) $retval$0$i$i$i = $24; else {
     $__parent_$i410$i$i$i = $__parent_$i47$i$i$i;
     do {
      $26 = HEAP32[$__parent_$i410$i$i$i >> 2] | 0;
      $__parent_$i410$i$i$i = $26 + 8 | 0;
      $27 = HEAP32[$__parent_$i410$i$i$i >> 2] | 0;
     } while ((HEAP32[$27 >> 2] | 0) != ($26 | 0));
     $retval$0$i$i$i = $27;
    }
   } else {
    $__x$addr$0$i$i$i$i = $22;
    while (1) {
     $23 = HEAP32[$__x$addr$0$i$i$i$i >> 2] | 0;
     if (!$23) break; else $__x$addr$0$i$i$i$i = $23;
    }
    $retval$0$i$i$i = $__x$addr$0$i$i$i$i;
   }
   if (($retval$0$i$i$i | 0) == ($__value_$i$i$i$i$i | 0)) break; else $__begin27$sroa$0$072 = $retval$0$i$i$i;
  }
 }
 STACKTOP = sp;
 return;
}

function _stbir__calculate_memory($info) {
 $info = $info | 0;
 var $18 = f0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $9 = f0, $add55 = 0, $add57 = 0, $add59 = 0, $add61 = 0, $add63 = 0, $add65 = 0, $add67 = 0, $call4 = 0, $call7 = 0, $decode_buffer_size60 = 0, $encode_buffer_size66 = 0, $filter_height = 0, $horizontal_buffer_size62 = 0, $horizontal_coefficients_size54 = 0, $horizontal_contributors_size53 = 0, $info$addr = 0, $mul10 = 0, $mul14 = 0, $mul19 = 0, $mul23 = 0, $mul26 = 0, $mul29 = 0, $mul33 = 0, $pixel_margin = 0, $ring_buffer_size64 = 0, $tobool = 0, $vertical_coefficients_size58 = 0, $vertical_contributors_size56 = 0, sp = 0, CSE$0 = 0, CSE$1 = 0, CSE$2 = 0, CSE$3 = 0, CSE$4 = 0, CSE$5 = 0, CSE$6 = 0, CSE$7 = 0, CSE$8 = 0, CSE$9 = 0, CSE$10 = 0, CSE$11 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $info$addr = sp + 8 | 0;
 $pixel_margin = sp + 4 | 0;
 $filter_height = sp;
 HEAP32[$info$addr >> 2] = $info;
 CSE$0 = HEAP32[$info$addr >> 2] | 0;
 HEAP32[$pixel_margin >> 2] = _stbir__get_filter_pixel_margin(HEAP32[CSE$0 + 80 >> 2] | 0, Math_fround(HEAPF32[CSE$0 + 56 >> 2])) | 0;
 CSE$1 = HEAP32[$info$addr >> 2] | 0;
 HEAP32[$filter_height >> 2] = _stbir__get_filter_pixel_width(HEAP32[CSE$1 + 84 >> 2] | 0, Math_fround(HEAPF32[CSE$1 + 60 >> 2])) | 0;
 $9 = Math_fround(HEAPF32[(HEAP32[$info$addr >> 2] | 0) + 56 >> 2]);
 CSE$2 = HEAP32[$info$addr >> 2] | 0;
 $call4 = _stbir__get_contributors($9, HEAP32[CSE$2 + 80 >> 2] | 0, HEAP32[CSE$2 + 4 >> 2] | 0, HEAP32[CSE$2 + 20 >> 2] | 0) | 0;
 HEAP32[(HEAP32[$info$addr >> 2] | 0) + 152 >> 2] = $call4;
 $18 = Math_fround(HEAPF32[(HEAP32[$info$addr >> 2] | 0) + 60 >> 2]);
 CSE$3 = HEAP32[$info$addr >> 2] | 0;
 $call7 = _stbir__get_contributors($18, HEAP32[CSE$3 + 84 >> 2] | 0, HEAP32[CSE$3 + 8 >> 2] | 0, HEAP32[CSE$3 + 24 >> 2] | 0) | 0;
 HEAP32[(HEAP32[$info$addr >> 2] | 0) + 156 >> 2] = $call7;
 HEAP32[(HEAP32[$info$addr >> 2] | 0) + 164 >> 2] = (HEAP32[$filter_height >> 2] | 0) + 1;
 CSE$4 = HEAP32[$info$addr >> 2] | 0;
 HEAP32[CSE$4 + 188 >> 2] = HEAP32[CSE$4 + 152 >> 2] << 3;
 $mul10 = (_stbir__get_total_horizontal_coefficients(HEAP32[$info$addr >> 2] | 0) | 0) << 2;
 HEAP32[(HEAP32[$info$addr >> 2] | 0) + 192 >> 2] = $mul10;
 CSE$5 = HEAP32[$info$addr >> 2] | 0;
 HEAP32[CSE$5 + 196 >> 2] = HEAP32[CSE$5 + 156 >> 2] << 3;
 $mul14 = (_stbir__get_total_vertical_coefficients(HEAP32[$info$addr >> 2] | 0) | 0) << 2;
 HEAP32[(HEAP32[$info$addr >> 2] | 0) + 200 >> 2] = $mul14;
 CSE$6 = HEAP32[$info$addr >> 2] | 0;
 $mul19 = (Math_imul((HEAP32[CSE$6 + 4 >> 2] | 0) + (HEAP32[$pixel_margin >> 2] << 1) | 0, HEAP32[CSE$6 + 64 >> 2] | 0) | 0) << 2;
 HEAP32[(HEAP32[$info$addr >> 2] | 0) + 204 >> 2] = $mul19;
 CSE$7 = HEAP32[$info$addr >> 2] | 0;
 $mul23 = (Math_imul(HEAP32[CSE$7 + 20 >> 2] | 0, HEAP32[CSE$7 + 64 >> 2] | 0) | 0) << 2;
 HEAP32[(HEAP32[$info$addr >> 2] | 0) + 208 >> 2] = $mul23;
 CSE$8 = HEAP32[$info$addr >> 2] | 0;
 $mul26 = Math_imul(HEAP32[CSE$8 + 20 >> 2] | 0, HEAP32[CSE$8 + 64 >> 2] | 0) | 0;
 $mul29 = (Math_imul($mul26, HEAP32[(HEAP32[$info$addr >> 2] | 0) + 164 >> 2] | 0) | 0) << 2;
 HEAP32[(HEAP32[$info$addr >> 2] | 0) + 212 >> 2] = $mul29;
 CSE$9 = HEAP32[$info$addr >> 2] | 0;
 $mul33 = (Math_imul(HEAP32[CSE$9 + 20 >> 2] | 0, HEAP32[CSE$9 + 64 >> 2] | 0) | 0) << 2;
 HEAP32[(HEAP32[$info$addr >> 2] | 0) + 216 >> 2] = $mul33;
 if (!(HEAP32[(HEAP32[$info$addr >> 2] | 0) + 80 >> 2] | 0)) ___assert_fail(36728, 34244, 2265, 36757);
 if ((HEAP32[(HEAP32[$info$addr >> 2] | 0) + 80 >> 2] | 0) >>> 0 >= 6) ___assert_fail(34340, 34244, 2266, 36757);
 if (!(HEAP32[(HEAP32[$info$addr >> 2] | 0) + 84 >> 2] | 0)) ___assert_fail(36781, 34244, 2267, 36757);
 if ((HEAP32[(HEAP32[$info$addr >> 2] | 0) + 84 >> 2] | 0) >>> 0 >= 6) ___assert_fail(34441, 34244, 2268, 36757);
 $tobool = (_stbir__use_height_upsampling(HEAP32[$info$addr >> 2] | 0) | 0) != 0;
 $70 = HEAP32[$info$addr >> 2] | 0;
 if ($tobool) {
  HEAP32[$70 + 208 >> 2] = 0;
  CSE$10 = HEAP32[$info$addr >> 2] | 0;
  $71 = CSE$10 | 0;
  $horizontal_contributors_size53 = $71 + 188 | 0;
  $72 = HEAP32[$horizontal_contributors_size53 >> 2] | 0;
  $73 = CSE$10 | 0;
  $horizontal_coefficients_size54 = $73 + 192 | 0;
  $74 = HEAP32[$horizontal_coefficients_size54 >> 2] | 0;
  $add55 = $72 + $74 | 0;
  $75 = CSE$10 | 0;
  $vertical_contributors_size56 = $75 + 196 | 0;
  $76 = HEAP32[$vertical_contributors_size56 >> 2] | 0;
  $add57 = $add55 + $76 | 0;
  $77 = CSE$10 | 0;
  $vertical_coefficients_size58 = $77 + 200 | 0;
  $78 = HEAP32[$vertical_coefficients_size58 >> 2] | 0;
  $add59 = $add57 + $78 | 0;
  $79 = CSE$10 | 0;
  $decode_buffer_size60 = $79 + 204 | 0;
  $80 = HEAP32[$decode_buffer_size60 >> 2] | 0;
  $add61 = $add59 + $80 | 0;
  $81 = CSE$10 | 0;
  $horizontal_buffer_size62 = $81 + 208 | 0;
  $82 = HEAP32[$horizontal_buffer_size62 >> 2] | 0;
  $add63 = $add61 + $82 | 0;
  $83 = CSE$10 | 0;
  $ring_buffer_size64 = $83 + 212 | 0;
  $84 = HEAP32[$ring_buffer_size64 >> 2] | 0;
  $add65 = $add63 + $84 | 0;
  $85 = CSE$10 | 0;
  $encode_buffer_size66 = $85 + 216 | 0;
  $86 = HEAP32[$encode_buffer_size66 >> 2] | 0;
  $add67 = $add65 + $86 | 0;
  STACKTOP = sp;
  return $add67 | 0;
 } else {
  HEAP32[$70 + 216 >> 2] = 0;
  CSE$11 = HEAP32[$info$addr >> 2] | 0;
  $71 = CSE$11 | 0;
  $horizontal_contributors_size53 = $71 + 188 | 0;
  $72 = HEAP32[$horizontal_contributors_size53 >> 2] | 0;
  $73 = CSE$11 | 0;
  $horizontal_coefficients_size54 = $73 + 192 | 0;
  $74 = HEAP32[$horizontal_coefficients_size54 >> 2] | 0;
  $add55 = $72 + $74 | 0;
  $75 = CSE$11 | 0;
  $vertical_contributors_size56 = $75 + 196 | 0;
  $76 = HEAP32[$vertical_contributors_size56 >> 2] | 0;
  $add57 = $add55 + $76 | 0;
  $77 = CSE$11 | 0;
  $vertical_coefficients_size58 = $77 + 200 | 0;
  $78 = HEAP32[$vertical_coefficients_size58 >> 2] | 0;
  $add59 = $add57 + $78 | 0;
  $79 = CSE$11 | 0;
  $decode_buffer_size60 = $79 + 204 | 0;
  $80 = HEAP32[$decode_buffer_size60 >> 2] | 0;
  $add61 = $add59 + $80 | 0;
  $81 = CSE$11 | 0;
  $horizontal_buffer_size62 = $81 + 208 | 0;
  $82 = HEAP32[$horizontal_buffer_size62 >> 2] | 0;
  $add63 = $add61 + $82 | 0;
  $83 = CSE$11 | 0;
  $ring_buffer_size64 = $83 + 212 | 0;
  $84 = HEAP32[$ring_buffer_size64 >> 2] | 0;
  $add65 = $add63 + $84 | 0;
  $85 = CSE$11 | 0;
  $encode_buffer_size66 = $85 + 216 | 0;
  $86 = HEAP32[$encode_buffer_size66 >> 2] | 0;
  $add67 = $add65 + $86 | 0;
  STACKTOP = sp;
  return $add67 | 0;
 }
 return 0;
}

function __ZN4tson5LayerC2EOS0_($this, $0) {
 $this = $this | 0;
 $0 = $0 | 0;
 var $__end_$i = 0, $__end_$i$i = 0, $__end_$i$i21 = 0, $__end_$i$i27 = 0, $__end_$i$i33 = 0, $__end_$i24 = 0, $__end_$i30 = 0, $__end_$i36 = 0, $__value_$i$i$i8$i = 0, $__value_$i$i$i8$i25 = 0, $__value_$i$i$i8$i31 = 0, $__value_$i$i$i8$i37 = 0, $__value_$i$i$i9$i = 0, $__value_$i$i$i9$i22 = 0, $__value_$i$i$i9$i28 = 0, $__value_$i$i$i9$i34 = 0, $m_base64Data = 0, $m_base64Data5 = 0, $m_compression = 0, $m_compression3 = 0, $m_data = 0, $m_data4 = 0, $m_drawOrder = 0, $m_drawOrder6 = 0, $m_encoding = 0, $m_encoding7 = 0, $m_image = 0, $m_image9 = 0, $m_layers = 0, $m_layers10 = 0, $m_name = 0, $m_name11 = 0, $m_objects = 0, $m_objects12 = 0, $m_offset = 0, $m_offset13 = 0, $m_size = 0, $m_size15 = 0, $m_type = 0, $m_type17 = 0, $m_typeStr = 0, $m_typeStr16 = 0;
 HEAP32[$this >> 2] = 0;
 $__end_$i$i = $this + 4 | 0;
 HEAP32[$__end_$i$i >> 2] = 0;
 $__value_$i$i$i9$i = $this + 8 | 0;
 HEAP32[$__value_$i$i$i9$i >> 2] = 0;
 HEAP32[$this >> 2] = HEAP32[$0 >> 2];
 $__end_$i = $0 + 4 | 0;
 HEAP32[$__end_$i$i >> 2] = HEAP32[$__end_$i >> 2];
 $__value_$i$i$i8$i = $0 + 8 | 0;
 HEAP32[$__value_$i$i$i9$i >> 2] = HEAP32[$__value_$i$i$i8$i >> 2];
 HEAP32[$__value_$i$i$i8$i >> 2] = 0;
 HEAP32[$__end_$i >> 2] = 0;
 HEAP32[$0 >> 2] = 0;
 $m_compression = $this + 12 | 0;
 $m_compression3 = $0 + 12 | 0;
 HEAP32[$m_compression >> 2] = HEAP32[$m_compression3 >> 2];
 HEAP32[$m_compression + 4 >> 2] = HEAP32[$m_compression3 + 4 >> 2];
 HEAP32[$m_compression + 8 >> 2] = HEAP32[$m_compression3 + 8 >> 2];
 HEAP32[$m_compression3 >> 2] = 0;
 HEAP32[$m_compression3 + 4 >> 2] = 0;
 HEAP32[$m_compression3 + 8 >> 2] = 0;
 $m_data = $this + 24 | 0;
 $m_data4 = $0 + 24 | 0;
 HEAP32[$m_data >> 2] = 0;
 $__end_$i$i21 = $this + 28 | 0;
 HEAP32[$__end_$i$i21 >> 2] = 0;
 $__value_$i$i$i9$i22 = $this + 32 | 0;
 HEAP32[$__value_$i$i$i9$i22 >> 2] = 0;
 HEAP32[$m_data >> 2] = HEAP32[$m_data4 >> 2];
 $__end_$i24 = $0 + 28 | 0;
 HEAP32[$__end_$i$i21 >> 2] = HEAP32[$__end_$i24 >> 2];
 $__value_$i$i$i8$i25 = $0 + 32 | 0;
 HEAP32[$__value_$i$i$i9$i22 >> 2] = HEAP32[$__value_$i$i$i8$i25 >> 2];
 HEAP32[$__value_$i$i$i8$i25 >> 2] = 0;
 HEAP32[$__end_$i24 >> 2] = 0;
 HEAP32[$m_data4 >> 2] = 0;
 $m_base64Data = $this + 36 | 0;
 $m_base64Data5 = $0 + 36 | 0;
 HEAP32[$m_base64Data >> 2] = HEAP32[$m_base64Data5 >> 2];
 HEAP32[$m_base64Data + 4 >> 2] = HEAP32[$m_base64Data5 + 4 >> 2];
 HEAP32[$m_base64Data + 8 >> 2] = HEAP32[$m_base64Data5 + 8 >> 2];
 HEAP32[$m_base64Data5 >> 2] = 0;
 HEAP32[$m_base64Data5 + 4 >> 2] = 0;
 HEAP32[$m_base64Data5 + 8 >> 2] = 0;
 $m_drawOrder = $this + 48 | 0;
 $m_drawOrder6 = $0 + 48 | 0;
 HEAP32[$m_drawOrder >> 2] = HEAP32[$m_drawOrder6 >> 2];
 HEAP32[$m_drawOrder + 4 >> 2] = HEAP32[$m_drawOrder6 + 4 >> 2];
 HEAP32[$m_drawOrder + 8 >> 2] = HEAP32[$m_drawOrder6 + 8 >> 2];
 HEAP32[$m_drawOrder6 >> 2] = 0;
 HEAP32[$m_drawOrder6 + 4 >> 2] = 0;
 HEAP32[$m_drawOrder6 + 8 >> 2] = 0;
 $m_encoding = $this + 60 | 0;
 $m_encoding7 = $0 + 60 | 0;
 HEAP32[$m_encoding >> 2] = HEAP32[$m_encoding7 >> 2];
 HEAP32[$m_encoding + 4 >> 2] = HEAP32[$m_encoding7 + 4 >> 2];
 HEAP32[$m_encoding + 8 >> 2] = HEAP32[$m_encoding7 + 8 >> 2];
 HEAP32[$m_encoding7 >> 2] = 0;
 HEAP32[$m_encoding7 + 4 >> 2] = 0;
 HEAP32[$m_encoding7 + 8 >> 2] = 0;
 HEAP32[$this + 72 >> 2] = HEAP32[$0 + 72 >> 2];
 $m_image = $this + 76 | 0;
 $m_image9 = $0 + 76 | 0;
 HEAP32[$m_image >> 2] = HEAP32[$m_image9 >> 2];
 HEAP32[$m_image + 4 >> 2] = HEAP32[$m_image9 + 4 >> 2];
 HEAP32[$m_image + 8 >> 2] = HEAP32[$m_image9 + 8 >> 2];
 HEAP32[$m_image9 >> 2] = 0;
 HEAP32[$m_image9 + 4 >> 2] = 0;
 HEAP32[$m_image9 + 8 >> 2] = 0;
 $m_layers = $this + 88 | 0;
 $m_layers10 = $0 + 88 | 0;
 HEAP32[$m_layers >> 2] = 0;
 $__end_$i$i33 = $this + 92 | 0;
 HEAP32[$__end_$i$i33 >> 2] = 0;
 $__value_$i$i$i9$i34 = $this + 96 | 0;
 HEAP32[$__value_$i$i$i9$i34 >> 2] = 0;
 HEAP32[$m_layers >> 2] = HEAP32[$m_layers10 >> 2];
 $__end_$i36 = $0 + 92 | 0;
 HEAP32[$__end_$i$i33 >> 2] = HEAP32[$__end_$i36 >> 2];
 $__value_$i$i$i8$i37 = $0 + 96 | 0;
 HEAP32[$__value_$i$i$i9$i34 >> 2] = HEAP32[$__value_$i$i$i8$i37 >> 2];
 HEAP32[$__value_$i$i$i8$i37 >> 2] = 0;
 HEAP32[$__end_$i36 >> 2] = 0;
 HEAP32[$m_layers10 >> 2] = 0;
 $m_name = $this + 100 | 0;
 $m_name11 = $0 + 100 | 0;
 HEAP32[$m_name >> 2] = HEAP32[$m_name11 >> 2];
 HEAP32[$m_name + 4 >> 2] = HEAP32[$m_name11 + 4 >> 2];
 HEAP32[$m_name + 8 >> 2] = HEAP32[$m_name11 + 8 >> 2];
 HEAP32[$m_name11 >> 2] = 0;
 HEAP32[$m_name11 + 4 >> 2] = 0;
 HEAP32[$m_name11 + 8 >> 2] = 0;
 $m_objects = $this + 112 | 0;
 $m_objects12 = $0 + 112 | 0;
 HEAP32[$m_objects >> 2] = 0;
 $__end_$i$i27 = $this + 116 | 0;
 HEAP32[$__end_$i$i27 >> 2] = 0;
 $__value_$i$i$i9$i28 = $this + 120 | 0;
 HEAP32[$__value_$i$i$i9$i28 >> 2] = 0;
 HEAP32[$m_objects >> 2] = HEAP32[$m_objects12 >> 2];
 $__end_$i30 = $0 + 116 | 0;
 HEAP32[$__end_$i$i27 >> 2] = HEAP32[$__end_$i30 >> 2];
 $__value_$i$i$i8$i31 = $0 + 120 | 0;
 HEAP32[$__value_$i$i$i9$i28 >> 2] = HEAP32[$__value_$i$i$i8$i31 >> 2];
 HEAP32[$__value_$i$i$i8$i31 >> 2] = 0;
 HEAP32[$__end_$i30 >> 2] = 0;
 HEAP32[$m_objects12 >> 2] = 0;
 $m_offset = $this + 124 | 0;
 $m_offset13 = $0 + 124 | 0;
 HEAP32[$m_offset >> 2] = HEAP32[$m_offset13 >> 2];
 HEAP32[$m_offset + 4 >> 2] = HEAP32[$m_offset13 + 4 >> 2];
 HEAP32[$m_offset + 8 >> 2] = HEAP32[$m_offset13 + 8 >> 2];
 __ZN4tson18PropertyCollectionC2EOS0_($this + 136 | 0, $0 + 136 | 0);
 $m_size = $this + 160 | 0;
 $m_size15 = $0 + 160 | 0;
 HEAP32[$m_size >> 2] = HEAP32[$m_size15 >> 2];
 HEAP32[$m_size + 4 >> 2] = HEAP32[$m_size15 + 4 >> 2];
 HEAP32[$m_size + 8 >> 2] = HEAP32[$m_size15 + 8 >> 2];
 $m_typeStr = $this + 172 | 0;
 $m_typeStr16 = $0 + 172 | 0;
 HEAP32[$m_typeStr >> 2] = HEAP32[$m_typeStr16 >> 2];
 HEAP32[$m_typeStr + 4 >> 2] = HEAP32[$m_typeStr16 + 4 >> 2];
 HEAP32[$m_typeStr + 8 >> 2] = HEAP32[$m_typeStr16 + 8 >> 2];
 HEAP32[$m_typeStr16 >> 2] = 0;
 HEAP32[$m_typeStr16 + 4 >> 2] = 0;
 HEAP32[$m_typeStr16 + 8 >> 2] = 0;
 $m_type = $this + 184 | 0;
 $m_type17 = $0 + 184 | 0;
 HEAP32[$m_type >> 2] = HEAP32[$m_type17 >> 2];
 HEAP32[$m_type + 4 >> 2] = HEAP32[$m_type17 + 4 >> 2];
 HEAP32[$m_type + 8 >> 2] = HEAP32[$m_type17 + 8 >> 2];
 __ZNSt3__26__treeINS_12__value_typeIiPN4tson4TileEEENS_19__map_value_compareIiS5_NS_4lessIiEELb1EEENS_9allocatorIS5_EEEC2EOSC_($this + 196 | 0, $0 + 196 | 0);
 __ZNSt3__26__treeINS_12__value_typeINS_5tupleIJiiEEEPN4tson4TileEEENS_19__map_value_compareIS3_S7_NS_4lessIS3_EELb1EEENS_9allocatorIS7_EEEC2EOSE_($this + 208 | 0, $0 + 208 | 0);
 return;
}

function _InitGraphicsDevice($width, $height) {
 $width = $width | 0;
 $height = $height | 0;
 var $$compoundliteral = 0, $$compoundliteral$byval_copy = 0, $$pre_trunc = 0, $28 = 0, $31 = 0, $32 = 0, $33 = 0, $42 = 0, $44 = 0, $46 = 0, $63 = 0, $count = 0, $fbHeight = 0, $fbWidth = 0, $height$addr = 0, $i = 0, $modes = 0, $retval = 0, $tmp = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer12 = 0, $vararg_buffer20 = 0, $vararg_buffer4 = 0, $vararg_buffer6 = 0, $vararg_buffer8 = 0, $width$addr = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(176);
 $$compoundliteral$byval_copy = sp + 56 | 0;
 $vararg_buffer20 = sp + 48 | 0;
 $vararg_buffer12 = sp + 40 | 0;
 $vararg_buffer8 = sp + 32 | 0;
 $vararg_buffer6 = sp + 24 | 0;
 $vararg_buffer4 = sp + 16 | 0;
 $vararg_buffer1 = sp + 8 | 0;
 $vararg_buffer = sp;
 $retval = sp + 164 | 0;
 $width$addr = sp + 156 | 0;
 $height$addr = sp + 152 | 0;
 $tmp = sp + 88 | 0;
 $count = sp + 80 | 0;
 $modes = sp + 76 | 0;
 $i = sp + 72 | 0;
 $fbWidth = sp + 68 | 0;
 $fbHeight = sp + 64 | 0;
 $$compoundliteral = sp + 160 | 0;
 HEAP32[$width$addr >> 2] = $width;
 HEAP32[$height$addr >> 2] = $height;
 HEAP32[14957] = HEAP32[$width$addr >> 2];
 HEAP32[14958] = HEAP32[$height$addr >> 2];
 _MatrixIdentity($tmp);
 dest = 59836;
 src = $tmp;
 stop = dest + 64 | 0;
 do {
  HEAP32[dest >> 2] = HEAP32[src >> 2];
  dest = dest + 4 | 0;
  src = src + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 _glfwSetErrorCallback(41) | 0;
 if (!(_glfwInit() | 0)) {
  _TraceLog(4, 32003, $vararg_buffer);
  HEAP8[$retval >> 0] = 0;
  $$pre_trunc = HEAP8[$retval >> 0] | 0;
  $63 = $$pre_trunc & 1;
  STACKTOP = sp;
  return $63 | 0;
 }
 HEAP32[14975] = HEAP32[14957];
 HEAP32[14976] = HEAP32[14958];
 _glfwDefaultWindowHints();
 if (0 | 0) _glfwWindowHint(131076, 0); else _glfwWindowHint(131076, 1);
 if (0 | 0) _glfwWindowHint(131075, 1); else _glfwWindowHint(131075, 0);
 if (0 | 0) _glfwWindowHint(131077, 0); else _glfwWindowHint(131077, 1);
 if (0 | 0) _glfwWindowHint(135181, 4);
 do if ((_rlGetVersion() | 0) == 2) {
  _glfwWindowHint(139266, 2);
  _glfwWindowHint(139267, 1);
 } else {
  if ((_rlGetVersion() | 0) == 3) {
   _glfwWindowHint(139266, 3);
   _glfwWindowHint(139267, 3);
   _glfwWindowHint(139272, 204801);
   _glfwWindowHint(139270, 0);
   break;
  }
  if ((_rlGetVersion() | 0) == 4) {
   _glfwWindowHint(139266, 2);
   _glfwWindowHint(139267, 0);
   _glfwWindowHint(139265, 196610);
   _glfwWindowHint(139275, 221185);
  }
 } while (0);
 if (0) {
  HEAP32[14977] = ((HEAP32[14975] | 0) / 2 | 0) - ((HEAP32[14957] | 0) / 2 | 0);
  HEAP32[14978] = ((HEAP32[14976] | 0) / 2 | 0) - ((HEAP32[14958] | 0) / 2 | 0);
  if ((HEAP32[14977] | 0) < 0) HEAP32[14977] = 0;
  if ((HEAP32[14978] | 0) < 0) HEAP32[14978] = 0;
  HEAP32[$count >> 2] = 0;
  HEAP32[$modes >> 2] = _glfwGetVideoModes(_glfwGetPrimaryMonitor() | 0, $count | 0) | 0;
  HEAP32[$i >> 2] = 0;
  while (1) {
   if ((HEAP32[$i >> 2] | 0) >= (HEAP32[$count >> 2] | 0)) break;
   if ((HEAP32[(HEAP32[$modes >> 2] | 0) + ((HEAP32[$i >> 2] | 0) * 24 | 0) >> 2] | 0) >= (HEAP32[14957] | 0)) if ((HEAP32[(HEAP32[$modes >> 2] | 0) + ((HEAP32[$i >> 2] | 0) * 24 | 0) + 4 >> 2] | 0) >= (HEAP32[14958] | 0)) {
    label = 29;
    break;
   }
   HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
  }
  if ((label | 0) == 29) {
   HEAP32[14975] = HEAP32[(HEAP32[$modes >> 2] | 0) + ((HEAP32[$i >> 2] | 0) * 24 | 0) >> 2];
   HEAP32[14976] = HEAP32[(HEAP32[$modes >> 2] | 0) + ((HEAP32[$i >> 2] | 0) * 24 | 0) + 4 >> 2];
  }
  $28 = HEAP32[14976] | 0;
  HEAP32[$vararg_buffer1 >> 2] = HEAP32[14975];
  HEAP32[$vararg_buffer1 + 4 >> 2] = $28;
  _TraceLog(4, 32029, $vararg_buffer1);
  _SetupFramebuffer(HEAP32[14975] | 0, HEAP32[14976] | 0);
  $31 = HEAP32[14975] | 0;
  $32 = HEAP32[14976] | 0;
  $33 = HEAP32[14956] | 0;
  HEAP32[14954] = _glfwCreateWindow($31 | 0, $32 | 0, $33 | 0, _glfwGetPrimaryMonitor() | 0, 0) | 0;
 } else {
  HEAP32[14954] = _glfwCreateWindow(HEAP32[14957] | 0, HEAP32[14958] | 0, HEAP32[14956] | 0, 0, 0) | 0;
  if (HEAP32[14954] | 0) {
   HEAP32[14979] = HEAP32[14957];
   HEAP32[14980] = HEAP32[14958];
  }
 }
 if (!(HEAP32[14954] | 0)) {
  _glfwTerminate();
  _TraceLog(4, 32067, $vararg_buffer4);
  HEAP8[$retval >> 0] = 0;
  $$pre_trunc = HEAP8[$retval >> 0] | 0;
  $63 = $$pre_trunc & 1;
  STACKTOP = sp;
  return $63 | 0;
 }
 _TraceLog(3, 32100, $vararg_buffer6);
 $42 = HEAP32[14980] | 0;
 HEAP32[$vararg_buffer8 >> 2] = HEAP32[14979];
 HEAP32[$vararg_buffer8 + 4 >> 2] = $42;
 _TraceLog(3, 32140, $vararg_buffer8);
 $44 = HEAP32[14958] | 0;
 HEAP32[$vararg_buffer12 >> 2] = HEAP32[14957];
 HEAP32[$vararg_buffer12 + 4 >> 2] = $44;
 _TraceLog(3, 32161, $vararg_buffer12);
 $46 = HEAP32[14982] | 0;
 HEAP32[$$compoundliteral$byval_copy >> 2] = HEAP32[14981];
 HEAP32[$$compoundliteral$byval_copy + 4 >> 2] = $46;
 _TraceLog(3, 32182, $$compoundliteral$byval_copy);
 _glfwSetWindowSizeCallback(HEAP32[14954] | 0, 5) | 0;
 _glfwSetCursorEnterCallback(HEAP32[14954] | 0, 42) | 0;
 _glfwSetKeyCallback(HEAP32[14954] | 0, 4) | 0;
 _glfwSetMouseButtonCallback(HEAP32[14954] | 0, 9) | 0;
 _glfwSetCursorPosCallback(HEAP32[14954] | 0, 1) | 0;
 _glfwSetCharCallback(HEAP32[14954] | 0, 43) | 0;
 _glfwSetScrollCallback(HEAP32[14954] | 0, 2) | 0;
 _glfwSetWindowIconifyCallback(HEAP32[14954] | 0, 44) | 0;
 _glfwSetDropCallback(HEAP32[14954] | 0, 6) | 0;
 _glfwMakeContextCurrent(HEAP32[14954] | 0);
 if (0 | 0) {
  _glfwSwapInterval(1);
  _TraceLog(3, 32207, $vararg_buffer20);
 }
 _rlglInit(HEAP32[14957] | 0, HEAP32[14958] | 0);
 HEAP32[$fbWidth >> 2] = HEAP32[14979];
 HEAP32[$fbHeight >> 2] = HEAP32[14980];
 _SetupViewport(HEAP32[$fbWidth >> 2] | 0, HEAP32[$fbHeight >> 2] | 0);
 HEAP8[$$compoundliteral >> 0] = -11;
 HEAP8[$$compoundliteral + 1 >> 0] = -11;
 HEAP8[$$compoundliteral + 2 >> 0] = -11;
 HEAP8[$$compoundliteral + 3 >> 0] = -1;
 HEAP8[$$compoundliteral$byval_copy >> 0] = HEAP8[$$compoundliteral >> 0] | 0;
 HEAP8[$$compoundliteral$byval_copy + 1 >> 0] = HEAP8[$$compoundliteral + 1 >> 0] | 0;
 HEAP8[$$compoundliteral$byval_copy + 2 >> 0] = HEAP8[$$compoundliteral + 2 >> 0] | 0;
 HEAP8[$$compoundliteral$byval_copy + 3 >> 0] = HEAP8[$$compoundliteral + 3 >> 0] | 0;
 _ClearBackground($$compoundliteral$byval_copy);
 HEAP8[$retval >> 0] = 1;
 $$pre_trunc = HEAP8[$retval >> 0] | 0;
 $63 = $$pre_trunc & 1;
 STACKTOP = sp;
 return $63 | 0;
}

function _DrawBuffersDefault() {
 var $3 = 0, $8 = 0, $eye = 0, $eyesCount = 0, $i = 0, $i68 = 0, $inc81 = 0, $matMVP = 0, $matMVP$byval_copy = 0, $matModelView = 0, $matProjection = 0, $modelview$byval_copy = 0, $tmp = 0, $vertexOffset = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0, CSE$0 = 0, CSE$1 = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 416 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(416);
 $matMVP$byval_copy = sp + 344 | 0;
 $modelview$byval_copy = sp + 216 | 0;
 $matProjection = sp + 280 | 0;
 $matModelView = sp + 152 | 0;
 $eyesCount = sp + 148 | 0;
 $eye = sp + 144 | 0;
 $matMVP = sp + 80 | 0;
 $tmp = sp + 16 | 0;
 $vertexOffset = sp + 8 | 0;
 $i = sp + 4 | 0;
 $i68 = sp;
 dest = $matProjection;
 src = 59180;
 stop = dest + 64 | 0;
 do {
  HEAP32[dest >> 2] = HEAP32[src >> 2];
  dest = dest + 4 | 0;
  src = src + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $matModelView;
 src = 59248;
 stop = dest + 64 | 0;
 do {
  HEAP32[dest >> 2] = HEAP32[src >> 2];
  dest = dest + 4 | 0;
  src = src + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP32[$eyesCount >> 2] = 1;
 HEAP32[$eyesCount >> 2] = 0 ? 2 : 1;
 HEAP32[$eye >> 2] = 0;
 while (1) {
  if ((HEAP32[$eye >> 2] | 0) >= (HEAP32[$eyesCount >> 2] | 0)) break;
  if ((HEAP32[$eyesCount >> 2] | 0) == 2) {
   $3 = HEAP32[$eye >> 2] | 0;
   dest = $modelview$byval_copy;
   src = $matProjection;
   stop = dest + 64 | 0;
   do {
    HEAP32[dest >> 2] = HEAP32[src >> 2];
    dest = dest + 4 | 0;
    src = src + 4 | 0;
   } while ((dest | 0) < (stop | 0));
   dest = $matMVP$byval_copy;
   src = $matModelView;
   stop = dest + 64 | 0;
   do {
    HEAP32[dest >> 2] = HEAP32[src >> 2];
    dest = dest + 4 | 0;
    src = src + 4 | 0;
   } while ((dest | 0) < (stop | 0));
   _SetStereoView($3, $modelview$byval_copy, $matMVP$byval_copy);
  }
  if ((HEAP32[47408 + ((HEAP32[14847] | 0) * 48 | 0) >> 2] | 0) > 0) {
   _glUseProgram(HEAP32[14849] | 0);
   dest = $modelview$byval_copy;
   src = 59248;
   stop = dest + 64 | 0;
   do {
    HEAP32[dest >> 2] = HEAP32[src >> 2];
    dest = dest + 4 | 0;
    src = src + 4 | 0;
   } while ((dest | 0) < (stop | 0));
   dest = $matMVP$byval_copy;
   src = 59180;
   stop = dest + 64 | 0;
   do {
    HEAP32[dest >> 2] = HEAP32[src >> 2];
    dest = dest + 4 | 0;
    src = src + 4 | 0;
   } while ((dest | 0) < (stop | 0));
   _MatrixMultiply($matMVP, $modelview$byval_copy, $matMVP$byval_copy);
   $8 = HEAP32[(HEAP32[14850] | 0) + 24 >> 2] | 0;
   dest = $matMVP$byval_copy;
   src = $matMVP;
   stop = dest + 64 | 0;
   do {
    HEAP32[dest >> 2] = HEAP32[src >> 2];
    dest = dest + 4 | 0;
    src = src + 4 | 0;
   } while ((dest | 0) < (stop | 0));
   _MatrixToFloatV($tmp, $matMVP$byval_copy);
   _glUniformMatrix4fv($8 | 0, 1, 0, $tmp | 0);
   _glUniform4f(HEAP32[(HEAP32[14850] | 0) + 44 >> 2] | 0, 1.0, 1.0, 1.0, 1.0);
   _glUniform1i(HEAP32[(HEAP32[14850] | 0) + 56 >> 2] | 0, 0);
   HEAP32[$vertexOffset >> 2] = 0;
   if (HEAP8[62144] & 1) FUNCTION_TABLE_vi[HEAP32[14851] & 255](HEAP32[47408 + ((HEAP32[14847] | 0) * 48 | 0) + 28 >> 2] | 0); else {
    _glBindBuffer(34962, HEAP32[47408 + ((HEAP32[14847] | 0) * 48 | 0) + 32 >> 2] | 0);
    _glVertexAttribPointer(HEAP32[HEAP32[14850] >> 2] | 0, 3, 5126, 0, 0, 0);
    _glEnableVertexAttribArray(HEAP32[HEAP32[14850] >> 2] | 0);
    _glBindBuffer(34962, HEAP32[47408 + ((HEAP32[14847] | 0) * 48 | 0) + 32 + 4 >> 2] | 0);
    _glVertexAttribPointer(HEAP32[(HEAP32[14850] | 0) + 4 >> 2] | 0, 2, 5126, 0, 0, 0);
    _glEnableVertexAttribArray(HEAP32[(HEAP32[14850] | 0) + 4 >> 2] | 0);
    _glBindBuffer(34962, HEAP32[47408 + ((HEAP32[14847] | 0) * 48 | 0) + 32 + 8 >> 2] | 0);
    _glVertexAttribPointer(HEAP32[(HEAP32[14850] | 0) + 20 >> 2] | 0, 4, 5121, 1, 0, 0);
    _glEnableVertexAttribArray(HEAP32[(HEAP32[14850] | 0) + 20 >> 2] | 0);
    _glBindBuffer(34963, HEAP32[47408 + ((HEAP32[14847] | 0) * 48 | 0) + 32 + 12 >> 2] | 0);
   }
   _glActiveTexture(33984);
   HEAP32[$i >> 2] = 0;
   while (1) {
    if ((HEAP32[$i >> 2] | 0) >= (HEAP32[14846] | 0)) break;
    _glBindTexture(3553, HEAP32[(HEAP32[14845] | 0) + (HEAP32[$i >> 2] << 4) + 12 >> 2] | 0);
    if ((HEAP32[(HEAP32[14845] | 0) + (HEAP32[$i >> 2] << 4) >> 2] | 0) == 1) label = 13; else if ((HEAP32[(HEAP32[14845] | 0) + (HEAP32[$i >> 2] << 4) >> 2] | 0) == 4) label = 13; else _glDrawElements(4, ((HEAP32[(HEAP32[14845] | 0) + (HEAP32[$i >> 2] << 4) + 4 >> 2] | 0) / 4 | 0) * 6 | 0, 5123, ((HEAP32[$vertexOffset >> 2] << 1 >>> 0) / 4 | 0) * 6 | 0);
    if ((label | 0) == 13) {
     label = 0;
     CSE$1 = (HEAP32[14845] | 0) + (HEAP32[$i >> 2] << 4) | 0;
     _glDrawArrays(HEAP32[CSE$1 >> 2] | 0, HEAP32[$vertexOffset >> 2] | 0, HEAP32[CSE$1 + 4 >> 2] | 0);
    }
    CSE$0 = (HEAP32[14845] | 0) + (HEAP32[$i >> 2] << 4) | 0;
    HEAP32[$vertexOffset >> 2] = (HEAP32[$vertexOffset >> 2] | 0) + ((HEAP32[CSE$0 + 4 >> 2] | 0) + (HEAP32[CSE$0 + 8 >> 2] | 0));
    HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
   }
   if (!(HEAP8[62144] & 1)) {
    _glBindBuffer(34962, 0);
    _glBindBuffer(34963, 0);
   }
   _glBindTexture(3553, 0);
  }
  if (HEAP8[62144] & 1) FUNCTION_TABLE_vi[HEAP32[14851] & 255](0);
  _glUseProgram(0);
  HEAP32[$eye >> 2] = (HEAP32[$eye >> 2] | 0) + 1;
 }
 HEAP32[47408 + ((HEAP32[14847] | 0) * 48 | 0) >> 2] = 0;
 HEAP32[47408 + ((HEAP32[14847] | 0) * 48 | 0) + 4 >> 2] = 0;
 HEAP32[47408 + ((HEAP32[14847] | 0) * 48 | 0) + 8 >> 2] = 0;
 HEAPF32[4479] = Math_fround(-1.0);
 dest = 59180;
 src = $matProjection;
 stop = dest + 64 | 0;
 do {
  HEAP32[dest >> 2] = HEAP32[src >> 2];
  dest = dest + 4 | 0;
  src = src + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = 59248;
 src = $matModelView;
 stop = dest + 64 | 0;
 do {
  HEAP32[dest >> 2] = HEAP32[src >> 2];
  dest = dest + 4 | 0;
  src = src + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP32[$i68 >> 2] = 0;
 while (1) {
  if ((HEAP32[$i68 >> 2] | 0) >= 256) break;
  HEAP32[(HEAP32[14845] | 0) + (HEAP32[$i68 >> 2] << 4) >> 2] = 7;
  HEAP32[(HEAP32[14845] | 0) + (HEAP32[$i68 >> 2] << 4) + 4 >> 2] = 0;
  HEAP32[(HEAP32[14845] | 0) + (HEAP32[$i68 >> 2] << 4) + 12 >> 2] = HEAP32[14848];
  HEAP32[$i68 >> 2] = (HEAP32[$i68 >> 2] | 0) + 1;
 }
 HEAP32[14846] = 1;
 $inc81 = (HEAP32[14847] | 0) + 1 | 0;
 HEAP32[14847] = $inc81;
 HEAP32[14847] = (HEAP32[14847] | 0) >= 1 ? 0 : $inc81;
 STACKTOP = sp;
 return;
}

function ___floatscan($f, $prec, $pok) {
 $f = $f | 0;
 $prec = $prec | 0;
 $pok = $pok | 0;
 var $0 = 0, $14 = 0, $17 = 0, $22 = 0, $3 = 0, $30 = 0, $7 = 0, $bits$0 = 0, $c$0 = 0, $c$1$lcssa = 0, $c$197 = 0, $c$2 = 0, $c$395 = 0, $c$4 = 0, $c$5 = 0, $c$6 = 0, $cond = 0, $cond135 = 0, $cond159 = 0, $cond231 = 0, $dec19293$in = 0, $emin$0 = 0, $i$096 = 0, $i$190 = 0, $i$294 = 0, $i$3 = 0, $i$4 = 0, $retval$0 = 0.0, $rpos = 0, $shend = 0, $sign$0 = 0, $sub13 = 0, $tobool181 = 0, $tobool55 = 0, $tobool61 = 0, $trunc = 0, label = 0;
 label = 0;
 switch ($prec | 0) {
 case 0:
  {
   $bits$0 = 24;
   $emin$0 = -149;
   label = 4;
   break;
  }
 case 1:
  {
   $bits$0 = 53;
   $emin$0 = -1074;
   label = 4;
   break;
  }
 case 2:
  {
   $bits$0 = 53;
   $emin$0 = -1074;
   label = 4;
   break;
  }
 default:
  $retval$0 = 0.0;
 }
 L4 : do if ((label | 0) == 4) {
  $rpos = $f + 4 | 0;
  $shend = $f + 104 | 0;
  do {
   $0 = HEAP32[$rpos >> 2] | 0;
   if ($0 >>> 0 < (HEAP32[$shend >> 2] | 0) >>> 0) {
    HEAP32[$rpos >> 2] = $0 + 1;
    $cond = HEAPU8[$0 >> 0] | 0;
   } else $cond = ___shgetc($f) | 0;
  } while ((_isspace($cond) | 0) != 0);
  L13 : do switch ($cond | 0) {
  case 43:
  case 45:
   {
    $sub13 = 1 - ((($cond | 0) == 45 & 1) << 1) | 0;
    $3 = HEAP32[$rpos >> 2] | 0;
    if ($3 >>> 0 < (HEAP32[$shend >> 2] | 0) >>> 0) {
     HEAP32[$rpos >> 2] = $3 + 1;
     $c$0 = HEAPU8[$3 >> 0] | 0;
     $sign$0 = $sub13;
     break L13;
    } else {
     $c$0 = ___shgetc($f) | 0;
     $sign$0 = $sub13;
     break L13;
    }
    break;
   }
  default:
   {
    $c$0 = $cond;
    $sign$0 = 1;
   }
  } while (0);
  $c$197 = $c$0;
  $i$096 = 0;
  while (1) {
   if (($c$197 | 32 | 0) != (HEAP8[38477 + $i$096 >> 0] | 0)) {
    $c$1$lcssa = $c$197;
    $trunc = $i$096;
    break;
   }
   do if ($i$096 >>> 0 < 7) {
    $7 = HEAP32[$rpos >> 2] | 0;
    if ($7 >>> 0 < (HEAP32[$shend >> 2] | 0) >>> 0) {
     HEAP32[$rpos >> 2] = $7 + 1;
     $c$2 = HEAPU8[$7 >> 0] | 0;
     break;
    } else {
     $c$2 = ___shgetc($f) | 0;
     break;
    }
   } else $c$2 = $c$197; while (0);
   $i$096 = $i$096 + 1 | 0;
   if ($i$096 >>> 0 >= 8) {
    $c$1$lcssa = $c$2;
    $trunc = 8;
    break;
   } else $c$197 = $c$2;
  }
  L29 : do switch ($trunc & 2147483647 | 0) {
  case 8:
   break;
  case 3:
   {
    label = 23;
    break;
   }
  default:
   {
    $tobool55 = ($pok | 0) != 0;
    if ($tobool55 & $trunc >>> 0 > 3) if (($trunc | 0) == 8) break L29; else {
     label = 23;
     break L29;
    }
    L34 : do if (!$trunc) {
     $c$395 = $c$1$lcssa;
     $i$294 = 0;
     while (1) {
      if (($c$395 | 32 | 0) != (HEAP8[38486 + $i$294 >> 0] | 0)) {
       $c$5 = $c$395;
       $i$3 = $i$294;
       break L34;
      }
      do if ($i$294 >>> 0 < 2) {
       $14 = HEAP32[$rpos >> 2] | 0;
       if ($14 >>> 0 < (HEAP32[$shend >> 2] | 0) >>> 0) {
        HEAP32[$rpos >> 2] = $14 + 1;
        $c$4 = HEAPU8[$14 >> 0] | 0;
        break;
       } else {
        $c$4 = ___shgetc($f) | 0;
        break;
       }
      } else $c$4 = $c$395; while (0);
      $i$294 = $i$294 + 1 | 0;
      if ($i$294 >>> 0 >= 3) {
       $c$5 = $c$4;
       $i$3 = 3;
       break;
      } else $c$395 = $c$4;
     }
    } else {
     $c$5 = $c$1$lcssa;
     $i$3 = $trunc;
    } while (0);
    switch ($i$3 | 0) {
    case 3:
     {
      $17 = HEAP32[$rpos >> 2] | 0;
      if ($17 >>> 0 < (HEAP32[$shend >> 2] | 0) >>> 0) {
       HEAP32[$rpos >> 2] = $17 + 1;
       $cond135 = HEAPU8[$17 >> 0] | 0;
      } else $cond135 = ___shgetc($f) | 0;
      if (($cond135 | 0) != 40) {
       if (!(HEAP32[$shend >> 2] | 0)) {
        $retval$0 = nan;
        break L4;
       }
       HEAP32[$rpos >> 2] = (HEAP32[$rpos >> 2] | 0) + -1;
       $retval$0 = nan;
       break L4;
      }
      $i$4 = 1;
      while (1) {
       $22 = HEAP32[$rpos >> 2] | 0;
       if ($22 >>> 0 < (HEAP32[$shend >> 2] | 0) >>> 0) {
        HEAP32[$rpos >> 2] = $22 + 1;
        $cond159 = HEAPU8[$22 >> 0] | 0;
       } else $cond159 = ___shgetc($f) | 0;
       if (!(($cond159 + -48 | 0) >>> 0 < 10 | ($cond159 + -65 | 0) >>> 0 < 26)) if (!(($cond159 | 0) == 95 | ($cond159 + -97 | 0) >>> 0 < 26)) break;
       $i$4 = $i$4 + 1 | 0;
      }
      if (($cond159 | 0) == 41) {
       $retval$0 = nan;
       break L4;
      }
      $tobool181 = (HEAP32[$shend >> 2] | 0) == 0;
      if (!$tobool181) HEAP32[$rpos >> 2] = (HEAP32[$rpos >> 2] | 0) + -1;
      if (!$tobool55) {
       HEAP32[(___errno_location() | 0) >> 2] = 28;
       ___shlim($f, 0, 0);
       $retval$0 = 0.0;
       break L4;
      }
      if (!$i$4) {
       $retval$0 = nan;
       break L4;
      }
      $dec19293$in = $i$4;
      while (1) {
       $dec19293$in = $dec19293$in + -1 | 0;
       if (!$tobool181) HEAP32[$rpos >> 2] = (HEAP32[$rpos >> 2] | 0) + -1;
       if (!$dec19293$in) {
        $retval$0 = nan;
        break L4;
       }
      }
      break;
     }
    case 0:
     {
      if (($c$5 | 0) == 48) {
       $30 = HEAP32[$rpos >> 2] | 0;
       if ($30 >>> 0 < (HEAP32[$shend >> 2] | 0) >>> 0) {
        HEAP32[$rpos >> 2] = $30 + 1;
        $cond231 = HEAPU8[$30 >> 0] | 0;
       } else $cond231 = ___shgetc($f) | 0;
       if (($cond231 | 32 | 0) == 120) {
        $retval$0 = +_hexfloat($f, $bits$0, $emin$0, $sign$0, $pok);
        break L4;
       }
       if (!(HEAP32[$shend >> 2] | 0)) $c$6 = 48; else {
        HEAP32[$rpos >> 2] = (HEAP32[$rpos >> 2] | 0) + -1;
        $c$6 = 48;
       }
      } else $c$6 = $c$5;
      $retval$0 = +_decfloat($f, $c$6, $bits$0, $emin$0, $sign$0, $pok);
      break L4;
      break;
     }
    default:
     {
      if (HEAP32[$shend >> 2] | 0) HEAP32[$rpos >> 2] = (HEAP32[$rpos >> 2] | 0) + -1;
      HEAP32[(___errno_location() | 0) >> 2] = 28;
      ___shlim($f, 0, 0);
      $retval$0 = 0.0;
      break L4;
     }
    }
   }
  } while (0);
  if ((label | 0) == 23) {
   $tobool61 = (HEAP32[$shend >> 2] | 0) == 0;
   if (!$tobool61) HEAP32[$rpos >> 2] = (HEAP32[$rpos >> 2] | 0) + -1;
   if (($pok | 0) != 0 & $trunc >>> 0 > 3) {
    $i$190 = $trunc;
    do {
     if (!$tobool61) HEAP32[$rpos >> 2] = (HEAP32[$rpos >> 2] | 0) + -1;
     $i$190 = $i$190 + -1 | 0;
    } while ($i$190 >>> 0 > 3);
   }
  }
  $retval$0 = +Math_fround(Math_fround($sign$0 | 0) * Math_fround(inf));
 } while (0);
 return +$retval$0;
}

function _ImageMipmaps($image) {
 $image = $image | 0;
 var $24 = 0, $25 = 0, $34 = 0, $49 = 0, $64 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $call22 = 0, $i = 0, $imCopy = 0, $imCopy$byval_copy = 0, $image$addr = 0, $mipCount = 0, $mipHeight = 0, $mipSize = 0, $mipWidth = 0, $mipmaps47 = 0, $nextmip = 0, $temp = 0, $vararg_buffer = 0, $vararg_buffer13 = 0, $vararg_buffer16 = 0, $vararg_buffer18 = 0, $vararg_buffer25 = 0, $vararg_buffer3 = 0, $vararg_buffer7 = 0, sp = 0, CSE$0 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(160);
 $imCopy$byval_copy = sp + 80 | 0;
 $vararg_buffer25 = sp + 72 | 0;
 $vararg_buffer18 = sp + 48 | 0;
 $vararg_buffer16 = sp + 40 | 0;
 $vararg_buffer13 = sp + 32 | 0;
 $vararg_buffer7 = sp + 24 | 0;
 $vararg_buffer3 = sp + 16 | 0;
 $vararg_buffer = sp;
 $image$addr = sp + 148 | 0;
 $mipCount = sp + 144 | 0;
 $mipWidth = sp + 140 | 0;
 $mipHeight = sp + 136 | 0;
 $mipSize = sp + 132 | 0;
 $temp = sp + 128 | 0;
 $nextmip = sp + 124 | 0;
 $imCopy = sp + 104 | 0;
 $i = sp + 100 | 0;
 HEAP32[$image$addr >> 2] = $image;
 if (!(HEAP32[HEAP32[$image$addr >> 2] >> 2] | 0)) {
  STACKTOP = sp;
  return;
 }
 if (!(HEAP32[(HEAP32[$image$addr >> 2] | 0) + 4 >> 2] | 0)) {
  STACKTOP = sp;
  return;
 }
 if (!(HEAP32[(HEAP32[$image$addr >> 2] | 0) + 8 >> 2] | 0)) {
  STACKTOP = sp;
  return;
 }
 HEAP32[$mipCount >> 2] = 1;
 HEAP32[$mipWidth >> 2] = HEAP32[(HEAP32[$image$addr >> 2] | 0) + 4 >> 2];
 HEAP32[$mipHeight >> 2] = HEAP32[(HEAP32[$image$addr >> 2] | 0) + 8 >> 2];
 HEAP32[$mipSize >> 2] = _GetPixelDataSize(HEAP32[$mipWidth >> 2] | 0, HEAP32[$mipHeight >> 2] | 0, HEAP32[(HEAP32[$image$addr >> 2] | 0) + 16 >> 2] | 0) | 0;
 while (1) {
  if (!((HEAP32[$mipWidth >> 2] | 0) != 1 ? 1 : (HEAP32[$mipHeight >> 2] | 0) != 1)) break;
  if ((HEAP32[$mipWidth >> 2] | 0) != 1) HEAP32[$mipWidth >> 2] = (HEAP32[$mipWidth >> 2] | 0) / 2 | 0;
  if ((HEAP32[$mipHeight >> 2] | 0) != 1) HEAP32[$mipHeight >> 2] = (HEAP32[$mipHeight >> 2] | 0) / 2 | 0;
  if ((HEAP32[$mipWidth >> 2] | 0) < 1) HEAP32[$mipWidth >> 2] = 1;
  if ((HEAP32[$mipHeight >> 2] | 0) < 1) HEAP32[$mipHeight >> 2] = 1;
  $24 = HEAP32[$mipHeight >> 2] | 0;
  $25 = HEAP32[$mipSize >> 2] | 0;
  HEAP32[$vararg_buffer >> 2] = HEAP32[$mipWidth >> 2];
  HEAP32[$vararg_buffer + 4 >> 2] = $24;
  HEAP32[$vararg_buffer + 8 >> 2] = $25;
  _TraceLog(2, 38031, $vararg_buffer);
  HEAP32[$mipCount >> 2] = (HEAP32[$mipCount >> 2] | 0) + 1;
  $call22 = _GetPixelDataSize(HEAP32[$mipWidth >> 2] | 0, HEAP32[$mipHeight >> 2] | 0, HEAP32[(HEAP32[$image$addr >> 2] | 0) + 16 >> 2] | 0) | 0;
  HEAP32[$mipSize >> 2] = (HEAP32[$mipSize >> 2] | 0) + $call22;
 }
 $34 = HEAP32[$mipCount >> 2] | 0;
 HEAP32[$vararg_buffer3 >> 2] = HEAP32[(HEAP32[$image$addr >> 2] | 0) + 12 >> 2];
 HEAP32[$vararg_buffer3 + 4 >> 2] = $34;
 _TraceLog(2, 38076, $vararg_buffer3);
 HEAP32[$vararg_buffer7 >> 2] = HEAP32[$mipSize >> 2];
 _TraceLog(2, 38121, $vararg_buffer7);
 HEAP32[$imCopy$byval_copy >> 2] = HEAP32[HEAP32[$image$addr >> 2] >> 2];
 _TraceLog(2, 38153, $imCopy$byval_copy);
 if ((HEAP32[(HEAP32[$image$addr >> 2] | 0) + 12 >> 2] | 0) >= (HEAP32[$mipCount >> 2] | 0)) {
  _TraceLog(4, 38337, $vararg_buffer25);
  STACKTOP = sp;
  return;
 }
 HEAP32[$temp >> 2] = _realloc(HEAP32[HEAP32[$image$addr >> 2] >> 2] | 0, HEAP32[$mipSize >> 2] | 0) | 0;
 if (HEAP32[$temp >> 2] | 0) {
  HEAP32[HEAP32[$image$addr >> 2] >> 2] = HEAP32[$temp >> 2];
  HEAP32[$vararg_buffer13 >> 2] = HEAP32[$temp >> 2];
  _TraceLog(2, 38191, $vararg_buffer13);
 } else _TraceLog(4, 38233, $vararg_buffer16);
 $49 = HEAP32[HEAP32[$image$addr >> 2] >> 2] | 0;
 CSE$0 = HEAP32[$image$addr >> 2] | 0;
 HEAP32[$nextmip >> 2] = $49 + (_GetPixelDataSize(HEAP32[CSE$0 + 4 >> 2] | 0, HEAP32[CSE$0 + 8 >> 2] | 0, HEAP32[CSE$0 + 16 >> 2] | 0) | 0);
 HEAP32[$mipWidth >> 2] = (HEAP32[(HEAP32[$image$addr >> 2] | 0) + 4 >> 2] | 0) / 2 | 0;
 HEAP32[$mipHeight >> 2] = (HEAP32[(HEAP32[$image$addr >> 2] | 0) + 8 >> 2] | 0) / 2 | 0;
 HEAP32[$mipSize >> 2] = _GetPixelDataSize(HEAP32[$mipWidth >> 2] | 0, HEAP32[$mipHeight >> 2] | 0, HEAP32[(HEAP32[$image$addr >> 2] | 0) + 16 >> 2] | 0) | 0;
 $64 = HEAP32[$image$addr >> 2] | 0;
 HEAP32[$imCopy$byval_copy >> 2] = HEAP32[$64 >> 2];
 HEAP32[$imCopy$byval_copy + 4 >> 2] = HEAP32[$64 + 4 >> 2];
 HEAP32[$imCopy$byval_copy + 8 >> 2] = HEAP32[$64 + 8 >> 2];
 HEAP32[$imCopy$byval_copy + 12 >> 2] = HEAP32[$64 + 12 >> 2];
 HEAP32[$imCopy$byval_copy + 16 >> 2] = HEAP32[$64 + 16 >> 2];
 _ImageCopy($imCopy, $imCopy$byval_copy);
 HEAP32[$i >> 2] = 1;
 while (1) {
  if ((HEAP32[$i >> 2] | 0) >= (HEAP32[$mipCount >> 2] | 0)) break;
  $68 = HEAP32[$mipWidth >> 2] | 0;
  $69 = HEAP32[$mipHeight >> 2] | 0;
  $70 = HEAP32[$mipSize >> 2] | 0;
  $71 = HEAP32[$nextmip >> 2] | 0;
  HEAP32[$vararg_buffer18 >> 2] = HEAP32[$i >> 2];
  HEAP32[$vararg_buffer18 + 4 >> 2] = $68;
  HEAP32[$vararg_buffer18 + 8 >> 2] = $69;
  HEAP32[$vararg_buffer18 + 12 >> 2] = $70;
  HEAP32[$vararg_buffer18 + 16 >> 2] = $71;
  _TraceLog(2, 38280, $vararg_buffer18);
  _ImageResize($imCopy, HEAP32[$mipWidth >> 2] | 0, HEAP32[$mipHeight >> 2] | 0);
  _memcpy(HEAP32[$nextmip >> 2] | 0, HEAP32[$imCopy >> 2] | 0, HEAP32[$mipSize >> 2] | 0) | 0;
  HEAP32[$nextmip >> 2] = (HEAP32[$nextmip >> 2] | 0) + (HEAP32[$mipSize >> 2] | 0);
  $mipmaps47 = (HEAP32[$image$addr >> 2] | 0) + 12 | 0;
  HEAP32[$mipmaps47 >> 2] = (HEAP32[$mipmaps47 >> 2] | 0) + 1;
  HEAP32[$mipWidth >> 2] = (HEAP32[$mipWidth >> 2] | 0) / 2 | 0;
  HEAP32[$mipHeight >> 2] = (HEAP32[$mipHeight >> 2] | 0) / 2 | 0;
  if ((HEAP32[$mipWidth >> 2] | 0) < 1) HEAP32[$mipWidth >> 2] = 1;
  if ((HEAP32[$mipHeight >> 2] | 0) < 1) HEAP32[$mipHeight >> 2] = 1;
  HEAP32[$mipSize >> 2] = _GetPixelDataSize(HEAP32[$mipWidth >> 2] | 0, HEAP32[$mipHeight >> 2] | 0, HEAP32[(HEAP32[$image$addr >> 2] | 0) + 16 >> 2] | 0) | 0;
  HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
 }
 HEAP32[$imCopy$byval_copy >> 2] = HEAP32[$imCopy >> 2];
 HEAP32[$imCopy$byval_copy + 4 >> 2] = HEAP32[$imCopy + 4 >> 2];
 HEAP32[$imCopy$byval_copy + 8 >> 2] = HEAP32[$imCopy + 8 >> 2];
 HEAP32[$imCopy$byval_copy + 12 >> 2] = HEAP32[$imCopy + 12 >> 2];
 HEAP32[$imCopy$byval_copy + 16 >> 2] = HEAP32[$imCopy + 16 >> 2];
 _UnloadImage($imCopy$byval_copy);
 STACKTOP = sp;
 return;
}

function _rlLoadTexture($data, $width, $height, $format, $mipmapCount) {
 $data = $data | 0;
 $width = $width | 0;
 $height = $height | 0;
 $format = $format | 0;
 $mipmapCount = $mipmapCount | 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $59 = 0, $60 = 0, $61 = 0, $63 = 0, $data$addr = 0, $format$addr = 0, $glFormat = 0, $glInternalFormat = 0, $glType = 0, $height$addr = 0, $i = 0, $id = 0, $mipHeight = 0, $mipOffset = 0, $mipSize = 0, $mipWidth = 0, $mipmapCount$addr = 0, $retval = 0, $vararg_buffer = 0, $vararg_buffer11 = 0, $vararg_buffer13 = 0, $vararg_buffer15 = 0, $vararg_buffer17 = 0, $vararg_buffer24 = 0, $vararg_buffer30 = 0, $vararg_buffer7 = 0, $vararg_buffer9 = 0, $width$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(160);
 $vararg_buffer30 = sp + 88 | 0;
 $vararg_buffer24 = sp + 72 | 0;
 $vararg_buffer17 = sp + 48 | 0;
 $vararg_buffer15 = sp + 40 | 0;
 $vararg_buffer13 = sp + 32 | 0;
 $vararg_buffer11 = sp + 24 | 0;
 $vararg_buffer9 = sp + 16 | 0;
 $vararg_buffer7 = sp + 8 | 0;
 $vararg_buffer = sp;
 $retval = sp + 148 | 0;
 $data$addr = sp + 144 | 0;
 $width$addr = sp + 140 | 0;
 $height$addr = sp + 136 | 0;
 $format$addr = sp + 132 | 0;
 $mipmapCount$addr = sp + 128 | 0;
 $id = sp + 124 | 0;
 $mipWidth = sp + 120 | 0;
 $mipHeight = sp + 116 | 0;
 $mipOffset = sp + 112 | 0;
 $i = sp + 108 | 0;
 $mipSize = sp + 104 | 0;
 $glInternalFormat = sp + 100 | 0;
 $glFormat = sp + 96 | 0;
 $glType = sp + 92 | 0;
 HEAP32[$data$addr >> 2] = $data;
 HEAP32[$width$addr >> 2] = $width;
 HEAP32[$height$addr >> 2] = $height;
 HEAP32[$format$addr >> 2] = $format;
 HEAP32[$mipmapCount$addr >> 2] = $mipmapCount;
 _glBindTexture(3553, 0);
 HEAP32[$id >> 2] = 0;
 if (!(HEAP8[62148] & 1)) if ((HEAP32[$format$addr >> 2] | 0) == 11 | (HEAP32[$format$addr >> 2] | 0) == 12 | (HEAP32[$format$addr >> 2] | 0) == 13 | (HEAP32[$format$addr >> 2] | 0) == 14) {
  _TraceLog(4, 31318, $vararg_buffer);
  HEAP32[$retval >> 2] = HEAP32[$id >> 2];
  $63 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $63 | 0;
 }
 if ((HEAP8[62149] & 1 ^ 1) & (HEAP32[$format$addr >> 2] | 0) == 15) {
  _TraceLog(4, 31362, $vararg_buffer7);
  HEAP32[$retval >> 2] = HEAP32[$id >> 2];
  $63 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $63 | 0;
 }
 if (!(HEAP8[62150] & 1)) if ((HEAP32[$format$addr >> 2] | 0) == 16 | (HEAP32[$format$addr >> 2] | 0) == 17) {
  _TraceLog(4, 31407, $vararg_buffer9);
  HEAP32[$retval >> 2] = HEAP32[$id >> 2];
  $63 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $63 | 0;
 }
 if (!(HEAP8[62151] & 1)) if ((HEAP32[$format$addr >> 2] | 0) == 18 | (HEAP32[$format$addr >> 2] | 0) == 19) {
  _TraceLog(4, 31452, $vararg_buffer11);
  HEAP32[$retval >> 2] = HEAP32[$id >> 2];
  $63 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $63 | 0;
 }
 if (!(HEAP8[62152] & 1)) if ((HEAP32[$format$addr >> 2] | 0) == 20 | (HEAP32[$format$addr >> 2] | 0) == 21) {
  _TraceLog(4, 31497, $vararg_buffer13);
  HEAP32[$retval >> 2] = HEAP32[$id >> 2];
  $63 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $63 | 0;
 }
 _glPixelStorei(3317, 1);
 _glGenTextures(1, $id | 0);
 _glBindTexture(3553, HEAP32[$id >> 2] | 0);
 HEAP32[$mipWidth >> 2] = HEAP32[$width$addr >> 2];
 HEAP32[$mipHeight >> 2] = HEAP32[$height$addr >> 2];
 HEAP32[$mipOffset >> 2] = 0;
 HEAP32[$vararg_buffer15 >> 2] = HEAP32[$data$addr >> 2];
 _TraceLog(2, 31542, $vararg_buffer15);
 HEAP32[$i >> 2] = 0;
 while (1) {
  if ((HEAP32[$i >> 2] | 0) >= (HEAP32[$mipmapCount$addr >> 2] | 0)) break;
  HEAP32[$mipSize >> 2] = _GetPixelDataSize(HEAP32[$mipWidth >> 2] | 0, HEAP32[$mipHeight >> 2] | 0, HEAP32[$format$addr >> 2] | 0) | 0;
  _rlGetGlTextureFormats(HEAP32[$format$addr >> 2] | 0, $glInternalFormat, $glFormat, $glType);
  $32 = HEAP32[$mipWidth >> 2] | 0;
  $33 = HEAP32[$mipHeight >> 2] | 0;
  $34 = HEAP32[$mipSize >> 2] | 0;
  $35 = HEAP32[$mipOffset >> 2] | 0;
  HEAP32[$vararg_buffer17 >> 2] = HEAP32[$i >> 2];
  HEAP32[$vararg_buffer17 + 4 >> 2] = $32;
  HEAP32[$vararg_buffer17 + 8 >> 2] = $33;
  HEAP32[$vararg_buffer17 + 12 >> 2] = $34;
  HEAP32[$vararg_buffer17 + 16 >> 2] = $35;
  _TraceLog(2, 31586, $vararg_buffer17);
  do if ((HEAP32[$glInternalFormat >> 2] | 0) != -1) {
   $38 = HEAP32[$i >> 2] | 0;
   $39 = HEAP32[$glInternalFormat >> 2] | 0;
   $40 = HEAP32[$mipWidth >> 2] | 0;
   $41 = HEAP32[$mipHeight >> 2] | 0;
   if ((HEAP32[$format$addr >> 2] | 0) < 11) {
    _glTexImage2D(3553, $38 | 0, $39 | 0, $40 | 0, $41 | 0, 0, HEAP32[$glFormat >> 2] | 0, HEAP32[$glType >> 2] | 0, (HEAP32[$data$addr >> 2] | 0) + (HEAP32[$mipOffset >> 2] | 0) | 0);
    break;
   } else {
    _glCompressedTexImage2D(3553, $38 | 0, $39 | 0, $40 | 0, $41 | 0, 0, HEAP32[$mipSize >> 2] | 0, (HEAP32[$data$addr >> 2] | 0) + (HEAP32[$mipOffset >> 2] | 0) | 0);
    break;
   }
  } while (0);
  HEAP32[$mipWidth >> 2] = (HEAP32[$mipWidth >> 2] | 0) / 2 | 0;
  HEAP32[$mipHeight >> 2] = (HEAP32[$mipHeight >> 2] | 0) / 2 | 0;
  HEAP32[$mipOffset >> 2] = (HEAP32[$mipOffset >> 2] | 0) + (HEAP32[$mipSize >> 2] | 0);
  if ((HEAP32[$mipWidth >> 2] | 0) < 1) HEAP32[$mipWidth >> 2] = 1;
  if ((HEAP32[$mipHeight >> 2] | 0) < 1) HEAP32[$mipHeight >> 2] = 1;
  HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
 }
 if (HEAP8[62146] & 1) {
  _glTexParameteri(3553, 10242, 10497);
  _glTexParameteri(3553, 10243, 10497);
 } else {
  _glTexParameteri(3553, 10242, 33071);
  _glTexParameteri(3553, 10243, 33071);
 }
 _glTexParameteri(3553, 10240, 9728);
 _glTexParameteri(3553, 10241, 9728);
 _glBindTexture(3553, 0);
 if ((HEAP32[$id >> 2] | 0) >>> 0 > 0) {
  $59 = HEAP32[$width$addr >> 2] | 0;
  $60 = HEAP32[$height$addr >> 2] | 0;
  $61 = HEAP32[$mipmapCount$addr >> 2] | 0;
  HEAP32[$vararg_buffer24 >> 2] = HEAP32[$id >> 2];
  HEAP32[$vararg_buffer24 + 4 >> 2] = $59;
  HEAP32[$vararg_buffer24 + 8 >> 2] = $60;
  HEAP32[$vararg_buffer24 + 12 >> 2] = $61;
  _TraceLog(3, 31639, $vararg_buffer24);
 } else _TraceLog(4, 37579, $vararg_buffer30);
 HEAP32[$retval >> 2] = HEAP32[$id >> 2];
 $63 = HEAP32[$retval >> 2] | 0;
 STACKTOP = sp;
 return $63 | 0;
}

function __ZN8nlohmann6detail28json_sax_dom_callback_parserINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE12handle_valueINS0_7value_tEEENS3_4pairIbPSD_EEOT_b($agg$result, $this, $v, $skip_callback) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $v = $v | 0;
 $skip_callback = $skip_callback | 0;
 var $0 = 0, $10 = 0, $16 = 0, $17 = 0, $18 = 0, $25 = 0, $26 = 0, $7 = 0, $9 = 0, $__end_$i = 0, $__end_$i29 = 0, $__end_$i31$pre$phiZZ2D = 0, $__size_$i20 = 0, $agg$tmp = 0, $agg$tmp93 = 0, $call47 = 0, $object_element = 0, $sub$i = 0, $sub$i12 = 0, $tobool$i10 = 0, $value = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 $value = sp + 32 | 0;
 $agg$tmp = sp + 16 | 0;
 $agg$tmp93 = sp;
 $0 = HEAP32[$this + 20 >> 2] | 0;
 if (!$0) ___assert_fail(27922, 22221, 4717, 24197);
 $sub$i = $0 + -1 | 0;
 if (!(HEAP32[(HEAP32[$this + 16 >> 2] | 0) + ($sub$i >>> 5 << 2) >> 2] & 1 << ($sub$i & 31))) {
  HEAP8[$agg$result >> 0] = 0;
  HEAP32[$agg$result + 4 >> 2] = 0;
 } else {
  __ZN8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEC2ENS_6detail7value_tE($value, HEAP8[$v >> 0] | 0);
  if ($skip_callback) {
   $__end_$i31$pre$phiZZ2D = $this + 8 | 0;
   label = 9;
  } else {
   $__end_$i = $this + 8 | 0;
   if (__ZNKSt3__28functionIFbiN8nlohmann6detail6parserINS1_10basic_jsonINS_3mapENS_6vectorENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEbxydSA_NS1_14adl_serializerEEEE13parse_event_tERSE_EEclEiSG_SH_($this + 48 | 0, (HEAP32[$__end_$i >> 2] | 0) - (HEAP32[$this + 4 >> 2] | 0) >> 2, 5, $value) | 0) {
    $__end_$i31$pre$phiZZ2D = $__end_$i;
    label = 9;
   } else {
    HEAP8[$agg$result >> 0] = 0;
    HEAP32[$agg$result + 4 >> 2] = 0;
   }
  }
  do if ((label | 0) == 9) {
   $7 = HEAP32[$__end_$i31$pre$phiZZ2D >> 2] | 0;
   if ((HEAP32[$this + 4 >> 2] | 0) == ($7 | 0)) {
    __ZN8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEC2EOSB_($agg$tmp, $value);
    __ZN8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEaSESB_(HEAP32[$this >> 2] | 0, $agg$tmp) | 0;
    __ZN8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEED2Ev($agg$tmp);
    $9 = HEAP32[$this >> 2] | 0;
    HEAP8[$agg$result >> 0] = 1;
    HEAP32[$agg$result + 4 >> 2] = $9;
    break;
   }
   $10 = HEAP32[$7 + -4 >> 2] | 0;
   if (!$10) {
    HEAP8[$agg$result >> 0] = 0;
    HEAP32[$agg$result + 4 >> 2] = 0;
    break;
   }
   if (!(__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE8is_arrayEv($10) | 0)) if (!(__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE9is_objectEv(HEAP32[(HEAP32[$__end_$i31$pre$phiZZ2D >> 2] | 0) + -4 >> 2] | 0) | 0)) ___assert_fail(24135, 22221, 4752, 24197);
   $call47 = __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE8is_arrayEv(HEAP32[(HEAP32[$__end_$i31$pre$phiZZ2D >> 2] | 0) + -4 >> 2] | 0) | 0;
   $16 = HEAP32[(HEAP32[$__end_$i31$pre$phiZZ2D >> 2] | 0) + -4 >> 2] | 0;
   if ($call47) {
    $17 = HEAP32[$16 + 8 >> 2] | 0;
    $__end_$i29 = $17 + 4 | 0;
    $18 = HEAP32[$__end_$i29 >> 2] | 0;
    if ($18 >>> 0 < (HEAP32[$17 + 8 >> 2] | 0) >>> 0) {
     __ZN8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEC2EOSB_($18, $value);
     HEAP32[$__end_$i29 >> 2] = (HEAP32[$__end_$i29 >> 2] | 0) + 16;
    } else __ZNSt3__26vectorIN8nlohmann10basic_jsonINS_3mapES0_NS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEbxydS7_NS1_14adl_serializerEEENS7_ISB_EEE21__push_back_slow_pathISB_EEvOT_($17, $value);
    $25 = (HEAP32[(HEAP32[(HEAP32[(HEAP32[$__end_$i31$pre$phiZZ2D >> 2] | 0) + -4 >> 2] | 0) + 8 >> 2] | 0) + 4 >> 2] | 0) + -16 | 0;
    HEAP8[$agg$result >> 0] = 1;
    HEAP32[$agg$result + 4 >> 2] = $25;
    break;
   }
   if (!(__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE9is_objectEv($16) | 0)) ___assert_fail(24210, 22221, 4762, 24197);
   $__size_$i20 = $this + 32 | 0;
   $26 = HEAP32[$__size_$i20 >> 2] | 0;
   if (!$26) ___assert_fail(27945, 22221, 4764, 24197);
   $sub$i12 = $26 + -1 | 0;
   $tobool$i10 = (HEAP32[(HEAP32[$this + 28 >> 2] | 0) + ($sub$i12 >>> 5 << 2) >> 2] & 1 << ($sub$i12 & 31) | 0) == 0;
   HEAP32[$__size_$i20 >> 2] = $sub$i12;
   if ($tobool$i10) {
    HEAP8[$agg$result >> 0] = 0;
    HEAP32[$agg$result + 4 >> 2] = 0;
    break;
   }
   $object_element = $this + 40 | 0;
   if (!(HEAP32[$object_element >> 2] | 0)) ___assert_fail(24240, 22221, 4773, 24197); else {
    __ZN8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEC2EOSB_($agg$tmp93, $value);
    __ZN8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEaSESB_(HEAP32[$object_element >> 2] | 0, $agg$tmp93) | 0;
    __ZN8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEED2Ev($agg$tmp93);
    HEAP8[$agg$result >> 0] = 1;
    HEAP32[$agg$result + 4 >> 2] = HEAP32[$object_element >> 2];
    break;
   }
  } while (0);
  __ZN8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEED2Ev($value);
 }
 STACKTOP = sp;
 return;
}

function _fmod($x, $y) {
 $x = +$x;
 $y = +$y;
 var $0 = 0, $1 = 0, $10 = 0, $101 = 0, $104 = 0, $106 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $128 = 0, $131 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $14 = 0, $16 = 0, $2 = 0, $22 = 0, $23 = 0, $3 = 0, $32 = 0, $33 = 0, $39 = 0, $4 = 0, $40 = 0, $48 = 0, $52 = 0, $53 = 0, $59 = 0, $6 = 0, $60 = 0, $68 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $8 = 0, $82 = 0, $83 = 0, $85 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $98 = 0, $99 = 0, $cmp85$lcssa = 0, $cmp8571 = 0, $conv = 0, $conv5 = 0, $dec = 0, $dec117 = 0, $dec64 = 0, $dec96 = 0, $ex$0$lcssa = 0, $ex$081 = 0, $ex$1 = 0, $ex$2$lcssa = 0, $ex$268 = 0, $ex$3$lcssa = 0, $ex$362 = 0, $ey$0$lcssa = 0, $ey$077 = 0, $ey$1 = 0, $mul = 0.0, $retval$0 = 0.0, label = 0;
 label = 0;
 HEAPF64[tempDoublePtr >> 3] = $x;
 $0 = HEAP32[tempDoublePtr >> 2] | 0;
 $1 = HEAP32[tempDoublePtr + 4 >> 2] | 0;
 HEAPF64[tempDoublePtr >> 3] = $y;
 $2 = HEAP32[tempDoublePtr >> 2] | 0;
 $3 = HEAP32[tempDoublePtr + 4 >> 2] | 0;
 $4 = _bitshift64Lshr($0 | 0, $1 | 0, 52) | 0;
 getTempRet0() | 0;
 $conv = $4 & 2047;
 $6 = _bitshift64Lshr($2 | 0, $3 | 0, 52) | 0;
 getTempRet0() | 0;
 $conv5 = $6 & 2047;
 $8 = $1 & -2147483648;
 $9 = _bitshift64Shl($2 | 0, $3 | 0, 1) | 0;
 $10 = getTempRet0() | 0;
 L1 : do if (($9 | 0) == 0 & ($10 | 0) == 0) label = 3; else {
  $14 = ___DOUBLE_BITS_273($y) | 0;
  $16 = (getTempRet0() | 0) & 2147483647;
  if (($conv | 0) == 2047 | ($16 >>> 0 > 2146435072 | ($16 | 0) == 2146435072 & $14 >>> 0 > 0)) label = 3; else {
   $22 = _bitshift64Shl($0 | 0, $1 | 0, 1) | 0;
   $23 = getTempRet0() | 0;
   if (!($23 >>> 0 > $10 >>> 0 | ($23 | 0) == ($10 | 0) & $22 >>> 0 > $9 >>> 0)) return +(($22 | 0) == ($9 | 0) & ($23 | 0) == ($10 | 0) ? $x * 0.0 : $x);
   if (!$conv) {
    $32 = _bitshift64Shl($0 | 0, $1 | 0, 12) | 0;
    $33 = getTempRet0() | 0;
    if (($33 | 0) > -1 | ($33 | 0) == -1 & $32 >>> 0 > 4294967295) {
     $39 = $32;
     $40 = $33;
     $ex$081 = 0;
     while (1) {
      $dec = $ex$081 + -1 | 0;
      $39 = _bitshift64Shl($39 | 0, $40 | 0, 1) | 0;
      $40 = getTempRet0() | 0;
      if (!(($40 | 0) > -1 | ($40 | 0) == -1 & $39 >>> 0 > 4294967295)) {
       $ex$0$lcssa = $dec;
       break;
      } else $ex$081 = $dec;
     }
    } else $ex$0$lcssa = 0;
    $48 = _bitshift64Shl($0 | 0, $1 | 0, 1 - $ex$0$lcssa | 0) | 0;
    $72 = $48;
    $73 = getTempRet0() | 0;
    $ex$1 = $ex$0$lcssa;
   } else {
    $72 = $0;
    $73 = $1 & 1048575 | 1048576;
    $ex$1 = $conv;
   }
   if (!$conv5) {
    $52 = _bitshift64Shl($2 | 0, $3 | 0, 12) | 0;
    $53 = getTempRet0() | 0;
    if (($53 | 0) > -1 | ($53 | 0) == -1 & $52 >>> 0 > 4294967295) {
     $59 = $52;
     $60 = $53;
     $ey$077 = 0;
     while (1) {
      $dec64 = $ey$077 + -1 | 0;
      $59 = _bitshift64Shl($59 | 0, $60 | 0, 1) | 0;
      $60 = getTempRet0() | 0;
      if (!(($60 | 0) > -1 | ($60 | 0) == -1 & $59 >>> 0 > 4294967295)) {
       $ey$0$lcssa = $dec64;
       break;
      } else $ey$077 = $dec64;
     }
    } else $ey$0$lcssa = 0;
    $68 = _bitshift64Shl($2 | 0, $3 | 0, 1 - $ey$0$lcssa | 0) | 0;
    $74 = $68;
    $75 = getTempRet0() | 0;
    $ey$1 = $ey$0$lcssa;
   } else {
    $74 = $2;
    $75 = $3 & 1048575 | 1048576;
    $ey$1 = $conv5;
   }
   $76 = _i64Subtract($72 | 0, $73 | 0, $74 | 0, $75 | 0) | 0;
   $77 = getTempRet0() | 0;
   $82 = ($77 | 0) > -1 | ($77 | 0) == -1 & $76 >>> 0 > 4294967295;
   L25 : do if (($ex$1 | 0) > ($ey$1 | 0)) {
    $136 = $72;
    $137 = $73;
    $83 = $76;
    $85 = $77;
    $cmp8571 = $82;
    $ex$268 = $ex$1;
    while (1) {
     if ($cmp8571) if (($83 | 0) == 0 & ($85 | 0) == 0) break; else {
      $88 = $83;
      $89 = $85;
     } else {
      $88 = $136;
      $89 = $137;
     }
     $90 = _bitshift64Shl($88 | 0, $89 | 0, 1) | 0;
     $91 = getTempRet0() | 0;
     $dec96 = $ex$268 + -1 | 0;
     $92 = _i64Subtract($90 | 0, $91 | 0, $74 | 0, $75 | 0) | 0;
     $93 = getTempRet0() | 0;
     $98 = ($93 | 0) > -1 | ($93 | 0) == -1 & $92 >>> 0 > 4294967295;
     if (($dec96 | 0) > ($ey$1 | 0)) {
      $136 = $90;
      $137 = $91;
      $83 = $92;
      $85 = $93;
      $cmp8571 = $98;
      $ex$268 = $dec96;
     } else {
      $101 = $93;
      $134 = $90;
      $135 = $91;
      $99 = $92;
      $cmp85$lcssa = $98;
      $ex$2$lcssa = $dec96;
      break L25;
     }
    }
    $retval$0 = $x * 0.0;
    break L1;
   } else {
    $101 = $77;
    $134 = $72;
    $135 = $73;
    $99 = $76;
    $cmp85$lcssa = $82;
    $ex$2$lcssa = $ex$1;
   } while (0);
   if ($cmp85$lcssa) if (($99 | 0) == 0 & ($101 | 0) == 0) {
    $retval$0 = $x * 0.0;
    break;
   } else {
    $104 = $101;
    $106 = $99;
   } else {
    $104 = $135;
    $106 = $134;
   }
   if ($104 >>> 0 < 1048576 | ($104 | 0) == 1048576 & $106 >>> 0 < 0) {
    $111 = $106;
    $112 = $104;
    $ex$362 = $ex$2$lcssa;
    while (1) {
     $113 = _bitshift64Shl($111 | 0, $112 | 0, 1) | 0;
     $114 = getTempRet0() | 0;
     $dec117 = $ex$362 + -1 | 0;
     if ($114 >>> 0 < 1048576 | ($114 | 0) == 1048576 & $113 >>> 0 < 0) {
      $111 = $113;
      $112 = $114;
      $ex$362 = $dec117;
     } else {
      $120 = $113;
      $121 = $114;
      $ex$3$lcssa = $dec117;
      break;
     }
    }
   } else {
    $120 = $106;
    $121 = $104;
    $ex$3$lcssa = $ex$2$lcssa;
   }
   if (($ex$3$lcssa | 0) > 0) {
    $122 = _i64Add($120 | 0, $121 | 0, 0, -1048576) | 0;
    $123 = getTempRet0() | 0;
    $124 = _bitshift64Shl($ex$3$lcssa | 0, 0, 52) | 0;
    $131 = $123 | (getTempRet0() | 0);
    $133 = $122 | $124;
   } else {
    $128 = _bitshift64Lshr($120 | 0, $121 | 0, 1 - $ex$3$lcssa | 0) | 0;
    $131 = getTempRet0() | 0;
    $133 = $128;
   }
   HEAP32[tempDoublePtr >> 2] = $133;
   HEAP32[tempDoublePtr + 4 >> 2] = $131 | $8;
   $retval$0 = +HEAPF64[tempDoublePtr >> 3];
  }
 } while (0);
 if ((label | 0) == 3) {
  $mul = $x * $y;
  $retval$0 = $mul / $mul;
 }
 return +$retval$0;
}

function __ZN8nlohmann6detail28json_sax_dom_callback_parserINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE12handle_valueIDnEENS3_4pairIbPSD_EEOT_b($agg$result, $this, $v, $skip_callback) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $v = $v | 0;
 $skip_callback = $skip_callback | 0;
 var $0 = 0, $10 = 0, $16 = 0, $17 = 0, $18 = 0, $25 = 0, $26 = 0, $7 = 0, $9 = 0, $__end_$i = 0, $__end_$i29 = 0, $__end_$i31$pre$phiZZ2D = 0, $__size_$i20 = 0, $agg$tmp = 0, $agg$tmp93 = 0, $call47 = 0, $object_element = 0, $sub$i = 0, $sub$i12 = 0, $tobool$i10 = 0, $value = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 $value = sp + 32 | 0;
 $agg$tmp = sp + 16 | 0;
 $agg$tmp93 = sp;
 $0 = HEAP32[$this + 20 >> 2] | 0;
 if (!$0) ___assert_fail(27922, 22221, 4717, 24197);
 $sub$i = $0 + -1 | 0;
 if (!(HEAP32[(HEAP32[$this + 16 >> 2] | 0) + ($sub$i >>> 5 << 2) >> 2] & 1 << ($sub$i & 31))) {
  HEAP8[$agg$result >> 0] = 0;
  HEAP32[$agg$result + 4 >> 2] = 0;
 } else {
  __ZN8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEC2EDn($value, HEAP32[$v >> 2] | 0);
  if ($skip_callback) {
   $__end_$i31$pre$phiZZ2D = $this + 8 | 0;
   label = 9;
  } else {
   $__end_$i = $this + 8 | 0;
   if (__ZNKSt3__28functionIFbiN8nlohmann6detail6parserINS1_10basic_jsonINS_3mapENS_6vectorENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEbxydSA_NS1_14adl_serializerEEEE13parse_event_tERSE_EEclEiSG_SH_($this + 48 | 0, (HEAP32[$__end_$i >> 2] | 0) - (HEAP32[$this + 4 >> 2] | 0) >> 2, 5, $value) | 0) {
    $__end_$i31$pre$phiZZ2D = $__end_$i;
    label = 9;
   } else {
    HEAP8[$agg$result >> 0] = 0;
    HEAP32[$agg$result + 4 >> 2] = 0;
   }
  }
  do if ((label | 0) == 9) {
   $7 = HEAP32[$__end_$i31$pre$phiZZ2D >> 2] | 0;
   if ((HEAP32[$this + 4 >> 2] | 0) == ($7 | 0)) {
    __ZN8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEC2EOSB_($agg$tmp, $value);
    __ZN8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEaSESB_(HEAP32[$this >> 2] | 0, $agg$tmp) | 0;
    __ZN8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEED2Ev($agg$tmp);
    $9 = HEAP32[$this >> 2] | 0;
    HEAP8[$agg$result >> 0] = 1;
    HEAP32[$agg$result + 4 >> 2] = $9;
    break;
   }
   $10 = HEAP32[$7 + -4 >> 2] | 0;
   if (!$10) {
    HEAP8[$agg$result >> 0] = 0;
    HEAP32[$agg$result + 4 >> 2] = 0;
    break;
   }
   if (!(__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE8is_arrayEv($10) | 0)) if (!(__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE9is_objectEv(HEAP32[(HEAP32[$__end_$i31$pre$phiZZ2D >> 2] | 0) + -4 >> 2] | 0) | 0)) ___assert_fail(24135, 22221, 4752, 24197);
   $call47 = __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE8is_arrayEv(HEAP32[(HEAP32[$__end_$i31$pre$phiZZ2D >> 2] | 0) + -4 >> 2] | 0) | 0;
   $16 = HEAP32[(HEAP32[$__end_$i31$pre$phiZZ2D >> 2] | 0) + -4 >> 2] | 0;
   if ($call47) {
    $17 = HEAP32[$16 + 8 >> 2] | 0;
    $__end_$i29 = $17 + 4 | 0;
    $18 = HEAP32[$__end_$i29 >> 2] | 0;
    if ($18 >>> 0 < (HEAP32[$17 + 8 >> 2] | 0) >>> 0) {
     __ZN8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEC2EOSB_($18, $value);
     HEAP32[$__end_$i29 >> 2] = (HEAP32[$__end_$i29 >> 2] | 0) + 16;
    } else __ZNSt3__26vectorIN8nlohmann10basic_jsonINS_3mapES0_NS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEbxydS7_NS1_14adl_serializerEEENS7_ISB_EEE21__push_back_slow_pathISB_EEvOT_($17, $value);
    $25 = (HEAP32[(HEAP32[(HEAP32[(HEAP32[$__end_$i31$pre$phiZZ2D >> 2] | 0) + -4 >> 2] | 0) + 8 >> 2] | 0) + 4 >> 2] | 0) + -16 | 0;
    HEAP8[$agg$result >> 0] = 1;
    HEAP32[$agg$result + 4 >> 2] = $25;
    break;
   }
   if (!(__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE9is_objectEv($16) | 0)) ___assert_fail(24210, 22221, 4762, 24197);
   $__size_$i20 = $this + 32 | 0;
   $26 = HEAP32[$__size_$i20 >> 2] | 0;
   if (!$26) ___assert_fail(27945, 22221, 4764, 24197);
   $sub$i12 = $26 + -1 | 0;
   $tobool$i10 = (HEAP32[(HEAP32[$this + 28 >> 2] | 0) + ($sub$i12 >>> 5 << 2) >> 2] & 1 << ($sub$i12 & 31) | 0) == 0;
   HEAP32[$__size_$i20 >> 2] = $sub$i12;
   if ($tobool$i10) {
    HEAP8[$agg$result >> 0] = 0;
    HEAP32[$agg$result + 4 >> 2] = 0;
    break;
   }
   $object_element = $this + 40 | 0;
   if (!(HEAP32[$object_element >> 2] | 0)) ___assert_fail(24240, 22221, 4773, 24197); else {
    __ZN8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEC2EOSB_($agg$tmp93, $value);
    __ZN8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEaSESB_(HEAP32[$object_element >> 2] | 0, $agg$tmp93) | 0;
    __ZN8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEED2Ev($agg$tmp93);
    HEAP8[$agg$result >> 0] = 1;
    HEAP32[$agg$result + 4 >> 2] = HEAP32[$object_element >> 2];
    break;
   }
  } while (0);
  __ZN8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEED2Ev($value);
 }
 STACKTOP = sp;
 return;
}

function __ZN8nlohmann6detail28json_sax_dom_callback_parserINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE12handle_valueIRSB_EENS3_4pairIbPSD_EEOT_b($agg$result, $this, $v, $skip_callback) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $v = $v | 0;
 $skip_callback = $skip_callback | 0;
 var $0 = 0, $15 = 0, $16 = 0, $17 = 0, $24 = 0, $25 = 0, $6 = 0, $8 = 0, $9 = 0, $__end_$i = 0, $__end_$i29 = 0, $__end_$i31$pre$phiZZ2D = 0, $__size_$i20 = 0, $agg$tmp = 0, $agg$tmp93 = 0, $call47 = 0, $object_element = 0, $sub$i = 0, $sub$i12 = 0, $tobool$i10 = 0, $value = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 $value = sp + 32 | 0;
 $agg$tmp = sp + 16 | 0;
 $agg$tmp93 = sp;
 $0 = HEAP32[$this + 20 >> 2] | 0;
 if (!$0) ___assert_fail(27922, 22221, 4717, 24197);
 $sub$i = $0 + -1 | 0;
 if (!(HEAP32[(HEAP32[$this + 16 >> 2] | 0) + ($sub$i >>> 5 << 2) >> 2] & 1 << ($sub$i & 31))) {
  HEAP8[$agg$result >> 0] = 0;
  HEAP32[$agg$result + 4 >> 2] = 0;
 } else {
  __ZN8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEC2IRS9_S9_Li0EEEOT_($value, $v);
  if ($skip_callback) {
   $__end_$i31$pre$phiZZ2D = $this + 8 | 0;
   label = 9;
  } else {
   $__end_$i = $this + 8 | 0;
   if (__ZNKSt3__28functionIFbiN8nlohmann6detail6parserINS1_10basic_jsonINS_3mapENS_6vectorENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEbxydSA_NS1_14adl_serializerEEEE13parse_event_tERSE_EEclEiSG_SH_($this + 48 | 0, (HEAP32[$__end_$i >> 2] | 0) - (HEAP32[$this + 4 >> 2] | 0) >> 2, 5, $value) | 0) {
    $__end_$i31$pre$phiZZ2D = $__end_$i;
    label = 9;
   } else {
    HEAP8[$agg$result >> 0] = 0;
    HEAP32[$agg$result + 4 >> 2] = 0;
   }
  }
  do if ((label | 0) == 9) {
   $6 = HEAP32[$__end_$i31$pre$phiZZ2D >> 2] | 0;
   if ((HEAP32[$this + 4 >> 2] | 0) == ($6 | 0)) {
    __ZN8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEC2EOSB_($agg$tmp, $value);
    __ZN8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEaSESB_(HEAP32[$this >> 2] | 0, $agg$tmp) | 0;
    __ZN8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEED2Ev($agg$tmp);
    $8 = HEAP32[$this >> 2] | 0;
    HEAP8[$agg$result >> 0] = 1;
    HEAP32[$agg$result + 4 >> 2] = $8;
    break;
   }
   $9 = HEAP32[$6 + -4 >> 2] | 0;
   if (!$9) {
    HEAP8[$agg$result >> 0] = 0;
    HEAP32[$agg$result + 4 >> 2] = 0;
    break;
   }
   if (!(__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE8is_arrayEv($9) | 0)) if (!(__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE9is_objectEv(HEAP32[(HEAP32[$__end_$i31$pre$phiZZ2D >> 2] | 0) + -4 >> 2] | 0) | 0)) ___assert_fail(24135, 22221, 4752, 24197);
   $call47 = __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE8is_arrayEv(HEAP32[(HEAP32[$__end_$i31$pre$phiZZ2D >> 2] | 0) + -4 >> 2] | 0) | 0;
   $15 = HEAP32[(HEAP32[$__end_$i31$pre$phiZZ2D >> 2] | 0) + -4 >> 2] | 0;
   if ($call47) {
    $16 = HEAP32[$15 + 8 >> 2] | 0;
    $__end_$i29 = $16 + 4 | 0;
    $17 = HEAP32[$__end_$i29 >> 2] | 0;
    if ($17 >>> 0 < (HEAP32[$16 + 8 >> 2] | 0) >>> 0) {
     __ZN8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEC2EOSB_($17, $value);
     HEAP32[$__end_$i29 >> 2] = (HEAP32[$__end_$i29 >> 2] | 0) + 16;
    } else __ZNSt3__26vectorIN8nlohmann10basic_jsonINS_3mapES0_NS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEbxydS7_NS1_14adl_serializerEEENS7_ISB_EEE21__push_back_slow_pathISB_EEvOT_($16, $value);
    $24 = (HEAP32[(HEAP32[(HEAP32[(HEAP32[$__end_$i31$pre$phiZZ2D >> 2] | 0) + -4 >> 2] | 0) + 8 >> 2] | 0) + 4 >> 2] | 0) + -16 | 0;
    HEAP8[$agg$result >> 0] = 1;
    HEAP32[$agg$result + 4 >> 2] = $24;
    break;
   }
   if (!(__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE9is_objectEv($15) | 0)) ___assert_fail(24210, 22221, 4762, 24197);
   $__size_$i20 = $this + 32 | 0;
   $25 = HEAP32[$__size_$i20 >> 2] | 0;
   if (!$25) ___assert_fail(27945, 22221, 4764, 24197);
   $sub$i12 = $25 + -1 | 0;
   $tobool$i10 = (HEAP32[(HEAP32[$this + 28 >> 2] | 0) + ($sub$i12 >>> 5 << 2) >> 2] & 1 << ($sub$i12 & 31) | 0) == 0;
   HEAP32[$__size_$i20 >> 2] = $sub$i12;
   if ($tobool$i10) {
    HEAP8[$agg$result >> 0] = 0;
    HEAP32[$agg$result + 4 >> 2] = 0;
    break;
   }
   $object_element = $this + 40 | 0;
   if (!(HEAP32[$object_element >> 2] | 0)) ___assert_fail(24240, 22221, 4773, 24197); else {
    __ZN8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEC2EOSB_($agg$tmp93, $value);
    __ZN8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEaSESB_(HEAP32[$object_element >> 2] | 0, $agg$tmp93) | 0;
    __ZN8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEED2Ev($agg$tmp93);
    HEAP8[$agg$result >> 0] = 1;
    HEAP32[$agg$result + 4 >> 2] = HEAP32[$object_element >> 2];
    break;
   }
  } while (0);
  __ZN8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEED2Ev($value);
 }
 STACKTOP = sp;
 return;
}

function __ZN8nlohmann6detail28json_sax_dom_callback_parserINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE12handle_valueIRyEENS3_4pairIbPSD_EEOT_b($agg$result, $this, $v, $skip_callback) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $v = $v | 0;
 $skip_callback = $skip_callback | 0;
 var $0 = 0, $15 = 0, $16 = 0, $17 = 0, $24 = 0, $25 = 0, $6 = 0, $8 = 0, $9 = 0, $__end_$i = 0, $__end_$i29 = 0, $__end_$i31$pre$phiZZ2D = 0, $__size_$i20 = 0, $agg$tmp = 0, $agg$tmp93 = 0, $call47 = 0, $object_element = 0, $sub$i = 0, $sub$i12 = 0, $tobool$i10 = 0, $value = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 $value = sp + 32 | 0;
 $agg$tmp = sp + 16 | 0;
 $agg$tmp93 = sp;
 $0 = HEAP32[$this + 20 >> 2] | 0;
 if (!$0) ___assert_fail(27922, 22221, 4717, 24197);
 $sub$i = $0 + -1 | 0;
 if (!(HEAP32[(HEAP32[$this + 16 >> 2] | 0) + ($sub$i >>> 5 << 2) >> 2] & 1 << ($sub$i & 31))) {
  HEAP8[$agg$result >> 0] = 0;
  HEAP32[$agg$result + 4 >> 2] = 0;
 } else {
  __ZN8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEC2IRyyLi0EEEOT_($value, $v);
  if ($skip_callback) {
   $__end_$i31$pre$phiZZ2D = $this + 8 | 0;
   label = 9;
  } else {
   $__end_$i = $this + 8 | 0;
   if (__ZNKSt3__28functionIFbiN8nlohmann6detail6parserINS1_10basic_jsonINS_3mapENS_6vectorENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEbxydSA_NS1_14adl_serializerEEEE13parse_event_tERSE_EEclEiSG_SH_($this + 48 | 0, (HEAP32[$__end_$i >> 2] | 0) - (HEAP32[$this + 4 >> 2] | 0) >> 2, 5, $value) | 0) {
    $__end_$i31$pre$phiZZ2D = $__end_$i;
    label = 9;
   } else {
    HEAP8[$agg$result >> 0] = 0;
    HEAP32[$agg$result + 4 >> 2] = 0;
   }
  }
  do if ((label | 0) == 9) {
   $6 = HEAP32[$__end_$i31$pre$phiZZ2D >> 2] | 0;
   if ((HEAP32[$this + 4 >> 2] | 0) == ($6 | 0)) {
    __ZN8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEC2EOSB_($agg$tmp, $value);
    __ZN8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEaSESB_(HEAP32[$this >> 2] | 0, $agg$tmp) | 0;
    __ZN8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEED2Ev($agg$tmp);
    $8 = HEAP32[$this >> 2] | 0;
    HEAP8[$agg$result >> 0] = 1;
    HEAP32[$agg$result + 4 >> 2] = $8;
    break;
   }
   $9 = HEAP32[$6 + -4 >> 2] | 0;
   if (!$9) {
    HEAP8[$agg$result >> 0] = 0;
    HEAP32[$agg$result + 4 >> 2] = 0;
    break;
   }
   if (!(__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE8is_arrayEv($9) | 0)) if (!(__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE9is_objectEv(HEAP32[(HEAP32[$__end_$i31$pre$phiZZ2D >> 2] | 0) + -4 >> 2] | 0) | 0)) ___assert_fail(24135, 22221, 4752, 24197);
   $call47 = __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE8is_arrayEv(HEAP32[(HEAP32[$__end_$i31$pre$phiZZ2D >> 2] | 0) + -4 >> 2] | 0) | 0;
   $15 = HEAP32[(HEAP32[$__end_$i31$pre$phiZZ2D >> 2] | 0) + -4 >> 2] | 0;
   if ($call47) {
    $16 = HEAP32[$15 + 8 >> 2] | 0;
    $__end_$i29 = $16 + 4 | 0;
    $17 = HEAP32[$__end_$i29 >> 2] | 0;
    if ($17 >>> 0 < (HEAP32[$16 + 8 >> 2] | 0) >>> 0) {
     __ZN8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEC2EOSB_($17, $value);
     HEAP32[$__end_$i29 >> 2] = (HEAP32[$__end_$i29 >> 2] | 0) + 16;
    } else __ZNSt3__26vectorIN8nlohmann10basic_jsonINS_3mapES0_NS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEbxydS7_NS1_14adl_serializerEEENS7_ISB_EEE21__push_back_slow_pathISB_EEvOT_($16, $value);
    $24 = (HEAP32[(HEAP32[(HEAP32[(HEAP32[$__end_$i31$pre$phiZZ2D >> 2] | 0) + -4 >> 2] | 0) + 8 >> 2] | 0) + 4 >> 2] | 0) + -16 | 0;
    HEAP8[$agg$result >> 0] = 1;
    HEAP32[$agg$result + 4 >> 2] = $24;
    break;
   }
   if (!(__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE9is_objectEv($15) | 0)) ___assert_fail(24210, 22221, 4762, 24197);
   $__size_$i20 = $this + 32 | 0;
   $25 = HEAP32[$__size_$i20 >> 2] | 0;
   if (!$25) ___assert_fail(27945, 22221, 4764, 24197);
   $sub$i12 = $25 + -1 | 0;
   $tobool$i10 = (HEAP32[(HEAP32[$this + 28 >> 2] | 0) + ($sub$i12 >>> 5 << 2) >> 2] & 1 << ($sub$i12 & 31) | 0) == 0;
   HEAP32[$__size_$i20 >> 2] = $sub$i12;
   if ($tobool$i10) {
    HEAP8[$agg$result >> 0] = 0;
    HEAP32[$agg$result + 4 >> 2] = 0;
    break;
   }
   $object_element = $this + 40 | 0;
   if (!(HEAP32[$object_element >> 2] | 0)) ___assert_fail(24240, 22221, 4773, 24197); else {
    __ZN8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEC2EOSB_($agg$tmp93, $value);
    __ZN8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEaSESB_(HEAP32[$object_element >> 2] | 0, $agg$tmp93) | 0;
    __ZN8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEED2Ev($agg$tmp93);
    HEAP8[$agg$result >> 0] = 1;
    HEAP32[$agg$result + 4 >> 2] = HEAP32[$object_element >> 2];
    break;
   }
  } while (0);
  __ZN8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEED2Ev($value);
 }
 STACKTOP = sp;
 return;
}

function __ZN8nlohmann6detail28json_sax_dom_callback_parserINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE12handle_valueIRxEENS3_4pairIbPSD_EEOT_b($agg$result, $this, $v, $skip_callback) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $v = $v | 0;
 $skip_callback = $skip_callback | 0;
 var $0 = 0, $15 = 0, $16 = 0, $17 = 0, $24 = 0, $25 = 0, $6 = 0, $8 = 0, $9 = 0, $__end_$i = 0, $__end_$i29 = 0, $__end_$i31$pre$phiZZ2D = 0, $__size_$i20 = 0, $agg$tmp = 0, $agg$tmp93 = 0, $call47 = 0, $object_element = 0, $sub$i = 0, $sub$i12 = 0, $tobool$i10 = 0, $value = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 $value = sp + 32 | 0;
 $agg$tmp = sp + 16 | 0;
 $agg$tmp93 = sp;
 $0 = HEAP32[$this + 20 >> 2] | 0;
 if (!$0) ___assert_fail(27922, 22221, 4717, 24197);
 $sub$i = $0 + -1 | 0;
 if (!(HEAP32[(HEAP32[$this + 16 >> 2] | 0) + ($sub$i >>> 5 << 2) >> 2] & 1 << ($sub$i & 31))) {
  HEAP8[$agg$result >> 0] = 0;
  HEAP32[$agg$result + 4 >> 2] = 0;
 } else {
  __ZN8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEC2IRxxLi0EEEOT_($value, $v);
  if ($skip_callback) {
   $__end_$i31$pre$phiZZ2D = $this + 8 | 0;
   label = 9;
  } else {
   $__end_$i = $this + 8 | 0;
   if (__ZNKSt3__28functionIFbiN8nlohmann6detail6parserINS1_10basic_jsonINS_3mapENS_6vectorENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEbxydSA_NS1_14adl_serializerEEEE13parse_event_tERSE_EEclEiSG_SH_($this + 48 | 0, (HEAP32[$__end_$i >> 2] | 0) - (HEAP32[$this + 4 >> 2] | 0) >> 2, 5, $value) | 0) {
    $__end_$i31$pre$phiZZ2D = $__end_$i;
    label = 9;
   } else {
    HEAP8[$agg$result >> 0] = 0;
    HEAP32[$agg$result + 4 >> 2] = 0;
   }
  }
  do if ((label | 0) == 9) {
   $6 = HEAP32[$__end_$i31$pre$phiZZ2D >> 2] | 0;
   if ((HEAP32[$this + 4 >> 2] | 0) == ($6 | 0)) {
    __ZN8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEC2EOSB_($agg$tmp, $value);
    __ZN8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEaSESB_(HEAP32[$this >> 2] | 0, $agg$tmp) | 0;
    __ZN8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEED2Ev($agg$tmp);
    $8 = HEAP32[$this >> 2] | 0;
    HEAP8[$agg$result >> 0] = 1;
    HEAP32[$agg$result + 4 >> 2] = $8;
    break;
   }
   $9 = HEAP32[$6 + -4 >> 2] | 0;
   if (!$9) {
    HEAP8[$agg$result >> 0] = 0;
    HEAP32[$agg$result + 4 >> 2] = 0;
    break;
   }
   if (!(__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE8is_arrayEv($9) | 0)) if (!(__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE9is_objectEv(HEAP32[(HEAP32[$__end_$i31$pre$phiZZ2D >> 2] | 0) + -4 >> 2] | 0) | 0)) ___assert_fail(24135, 22221, 4752, 24197);
   $call47 = __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE8is_arrayEv(HEAP32[(HEAP32[$__end_$i31$pre$phiZZ2D >> 2] | 0) + -4 >> 2] | 0) | 0;
   $15 = HEAP32[(HEAP32[$__end_$i31$pre$phiZZ2D >> 2] | 0) + -4 >> 2] | 0;
   if ($call47) {
    $16 = HEAP32[$15 + 8 >> 2] | 0;
    $__end_$i29 = $16 + 4 | 0;
    $17 = HEAP32[$__end_$i29 >> 2] | 0;
    if ($17 >>> 0 < (HEAP32[$16 + 8 >> 2] | 0) >>> 0) {
     __ZN8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEC2EOSB_($17, $value);
     HEAP32[$__end_$i29 >> 2] = (HEAP32[$__end_$i29 >> 2] | 0) + 16;
    } else __ZNSt3__26vectorIN8nlohmann10basic_jsonINS_3mapES0_NS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEbxydS7_NS1_14adl_serializerEEENS7_ISB_EEE21__push_back_slow_pathISB_EEvOT_($16, $value);
    $24 = (HEAP32[(HEAP32[(HEAP32[(HEAP32[$__end_$i31$pre$phiZZ2D >> 2] | 0) + -4 >> 2] | 0) + 8 >> 2] | 0) + 4 >> 2] | 0) + -16 | 0;
    HEAP8[$agg$result >> 0] = 1;
    HEAP32[$agg$result + 4 >> 2] = $24;
    break;
   }
   if (!(__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE9is_objectEv($15) | 0)) ___assert_fail(24210, 22221, 4762, 24197);
   $__size_$i20 = $this + 32 | 0;
   $25 = HEAP32[$__size_$i20 >> 2] | 0;
   if (!$25) ___assert_fail(27945, 22221, 4764, 24197);
   $sub$i12 = $25 + -1 | 0;
   $tobool$i10 = (HEAP32[(HEAP32[$this + 28 >> 2] | 0) + ($sub$i12 >>> 5 << 2) >> 2] & 1 << ($sub$i12 & 31) | 0) == 0;
   HEAP32[$__size_$i20 >> 2] = $sub$i12;
   if ($tobool$i10) {
    HEAP8[$agg$result >> 0] = 0;
    HEAP32[$agg$result + 4 >> 2] = 0;
    break;
   }
   $object_element = $this + 40 | 0;
   if (!(HEAP32[$object_element >> 2] | 0)) ___assert_fail(24240, 22221, 4773, 24197); else {
    __ZN8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEC2EOSB_($agg$tmp93, $value);
    __ZN8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEaSESB_(HEAP32[$object_element >> 2] | 0, $agg$tmp93) | 0;
    __ZN8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEED2Ev($agg$tmp93);
    HEAP8[$agg$result >> 0] = 1;
    HEAP32[$agg$result + 4 >> 2] = HEAP32[$object_element >> 2];
    break;
   }
  } while (0);
  __ZN8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEED2Ev($value);
 }
 STACKTOP = sp;
 return;
}

function __ZN8nlohmann6detail28json_sax_dom_callback_parserINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE12handle_valueIRdEENS3_4pairIbPSD_EEOT_b($agg$result, $this, $v, $skip_callback) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $v = $v | 0;
 $skip_callback = $skip_callback | 0;
 var $0 = 0, $15 = 0, $16 = 0, $17 = 0, $24 = 0, $25 = 0, $6 = 0, $8 = 0, $9 = 0, $__end_$i = 0, $__end_$i29 = 0, $__end_$i31$pre$phiZZ2D = 0, $__size_$i20 = 0, $agg$tmp = 0, $agg$tmp93 = 0, $call47 = 0, $object_element = 0, $sub$i = 0, $sub$i12 = 0, $tobool$i10 = 0, $value = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 $value = sp + 32 | 0;
 $agg$tmp = sp + 16 | 0;
 $agg$tmp93 = sp;
 $0 = HEAP32[$this + 20 >> 2] | 0;
 if (!$0) ___assert_fail(27922, 22221, 4717, 24197);
 $sub$i = $0 + -1 | 0;
 if (!(HEAP32[(HEAP32[$this + 16 >> 2] | 0) + ($sub$i >>> 5 << 2) >> 2] & 1 << ($sub$i & 31))) {
  HEAP8[$agg$result >> 0] = 0;
  HEAP32[$agg$result + 4 >> 2] = 0;
 } else {
  __ZN8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEC2IRddLi0EEEOT_($value, $v);
  if ($skip_callback) {
   $__end_$i31$pre$phiZZ2D = $this + 8 | 0;
   label = 9;
  } else {
   $__end_$i = $this + 8 | 0;
   if (__ZNKSt3__28functionIFbiN8nlohmann6detail6parserINS1_10basic_jsonINS_3mapENS_6vectorENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEbxydSA_NS1_14adl_serializerEEEE13parse_event_tERSE_EEclEiSG_SH_($this + 48 | 0, (HEAP32[$__end_$i >> 2] | 0) - (HEAP32[$this + 4 >> 2] | 0) >> 2, 5, $value) | 0) {
    $__end_$i31$pre$phiZZ2D = $__end_$i;
    label = 9;
   } else {
    HEAP8[$agg$result >> 0] = 0;
    HEAP32[$agg$result + 4 >> 2] = 0;
   }
  }
  do if ((label | 0) == 9) {
   $6 = HEAP32[$__end_$i31$pre$phiZZ2D >> 2] | 0;
   if ((HEAP32[$this + 4 >> 2] | 0) == ($6 | 0)) {
    __ZN8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEC2EOSB_($agg$tmp, $value);
    __ZN8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEaSESB_(HEAP32[$this >> 2] | 0, $agg$tmp) | 0;
    __ZN8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEED2Ev($agg$tmp);
    $8 = HEAP32[$this >> 2] | 0;
    HEAP8[$agg$result >> 0] = 1;
    HEAP32[$agg$result + 4 >> 2] = $8;
    break;
   }
   $9 = HEAP32[$6 + -4 >> 2] | 0;
   if (!$9) {
    HEAP8[$agg$result >> 0] = 0;
    HEAP32[$agg$result + 4 >> 2] = 0;
    break;
   }
   if (!(__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE8is_arrayEv($9) | 0)) if (!(__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE9is_objectEv(HEAP32[(HEAP32[$__end_$i31$pre$phiZZ2D >> 2] | 0) + -4 >> 2] | 0) | 0)) ___assert_fail(24135, 22221, 4752, 24197);
   $call47 = __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE8is_arrayEv(HEAP32[(HEAP32[$__end_$i31$pre$phiZZ2D >> 2] | 0) + -4 >> 2] | 0) | 0;
   $15 = HEAP32[(HEAP32[$__end_$i31$pre$phiZZ2D >> 2] | 0) + -4 >> 2] | 0;
   if ($call47) {
    $16 = HEAP32[$15 + 8 >> 2] | 0;
    $__end_$i29 = $16 + 4 | 0;
    $17 = HEAP32[$__end_$i29 >> 2] | 0;
    if ($17 >>> 0 < (HEAP32[$16 + 8 >> 2] | 0) >>> 0) {
     __ZN8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEC2EOSB_($17, $value);
     HEAP32[$__end_$i29 >> 2] = (HEAP32[$__end_$i29 >> 2] | 0) + 16;
    } else __ZNSt3__26vectorIN8nlohmann10basic_jsonINS_3mapES0_NS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEbxydS7_NS1_14adl_serializerEEENS7_ISB_EEE21__push_back_slow_pathISB_EEvOT_($16, $value);
    $24 = (HEAP32[(HEAP32[(HEAP32[(HEAP32[$__end_$i31$pre$phiZZ2D >> 2] | 0) + -4 >> 2] | 0) + 8 >> 2] | 0) + 4 >> 2] | 0) + -16 | 0;
    HEAP8[$agg$result >> 0] = 1;
    HEAP32[$agg$result + 4 >> 2] = $24;
    break;
   }
   if (!(__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE9is_objectEv($15) | 0)) ___assert_fail(24210, 22221, 4762, 24197);
   $__size_$i20 = $this + 32 | 0;
   $25 = HEAP32[$__size_$i20 >> 2] | 0;
   if (!$25) ___assert_fail(27945, 22221, 4764, 24197);
   $sub$i12 = $25 + -1 | 0;
   $tobool$i10 = (HEAP32[(HEAP32[$this + 28 >> 2] | 0) + ($sub$i12 >>> 5 << 2) >> 2] & 1 << ($sub$i12 & 31) | 0) == 0;
   HEAP32[$__size_$i20 >> 2] = $sub$i12;
   if ($tobool$i10) {
    HEAP8[$agg$result >> 0] = 0;
    HEAP32[$agg$result + 4 >> 2] = 0;
    break;
   }
   $object_element = $this + 40 | 0;
   if (!(HEAP32[$object_element >> 2] | 0)) ___assert_fail(24240, 22221, 4773, 24197); else {
    __ZN8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEC2EOSB_($agg$tmp93, $value);
    __ZN8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEaSESB_(HEAP32[$object_element >> 2] | 0, $agg$tmp93) | 0;
    __ZN8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEED2Ev($agg$tmp93);
    HEAP8[$agg$result >> 0] = 1;
    HEAP32[$agg$result + 4 >> 2] = HEAP32[$object_element >> 2];
    break;
   }
  } while (0);
  __ZN8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEED2Ev($value);
 }
 STACKTOP = sp;
 return;
}

function __ZN8nlohmann6detail28json_sax_dom_callback_parserINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE12handle_valueIRbEENS3_4pairIbPSD_EEOT_b($agg$result, $this, $v, $skip_callback) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $v = $v | 0;
 $skip_callback = $skip_callback | 0;
 var $0 = 0, $15 = 0, $16 = 0, $17 = 0, $24 = 0, $25 = 0, $6 = 0, $8 = 0, $9 = 0, $__end_$i = 0, $__end_$i29 = 0, $__end_$i31$pre$phiZZ2D = 0, $__size_$i20 = 0, $agg$tmp = 0, $agg$tmp93 = 0, $call47 = 0, $object_element = 0, $sub$i = 0, $sub$i12 = 0, $tobool$i10 = 0, $value = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 $value = sp + 32 | 0;
 $agg$tmp = sp + 16 | 0;
 $agg$tmp93 = sp;
 $0 = HEAP32[$this + 20 >> 2] | 0;
 if (!$0) ___assert_fail(27922, 22221, 4717, 24197);
 $sub$i = $0 + -1 | 0;
 if (!(HEAP32[(HEAP32[$this + 16 >> 2] | 0) + ($sub$i >>> 5 << 2) >> 2] & 1 << ($sub$i & 31))) {
  HEAP8[$agg$result >> 0] = 0;
  HEAP32[$agg$result + 4 >> 2] = 0;
 } else {
  __ZN8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEC2IRbbLi0EEEOT_($value, $v);
  if ($skip_callback) {
   $__end_$i31$pre$phiZZ2D = $this + 8 | 0;
   label = 9;
  } else {
   $__end_$i = $this + 8 | 0;
   if (__ZNKSt3__28functionIFbiN8nlohmann6detail6parserINS1_10basic_jsonINS_3mapENS_6vectorENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEbxydSA_NS1_14adl_serializerEEEE13parse_event_tERSE_EEclEiSG_SH_($this + 48 | 0, (HEAP32[$__end_$i >> 2] | 0) - (HEAP32[$this + 4 >> 2] | 0) >> 2, 5, $value) | 0) {
    $__end_$i31$pre$phiZZ2D = $__end_$i;
    label = 9;
   } else {
    HEAP8[$agg$result >> 0] = 0;
    HEAP32[$agg$result + 4 >> 2] = 0;
   }
  }
  do if ((label | 0) == 9) {
   $6 = HEAP32[$__end_$i31$pre$phiZZ2D >> 2] | 0;
   if ((HEAP32[$this + 4 >> 2] | 0) == ($6 | 0)) {
    __ZN8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEC2EOSB_($agg$tmp, $value);
    __ZN8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEaSESB_(HEAP32[$this >> 2] | 0, $agg$tmp) | 0;
    __ZN8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEED2Ev($agg$tmp);
    $8 = HEAP32[$this >> 2] | 0;
    HEAP8[$agg$result >> 0] = 1;
    HEAP32[$agg$result + 4 >> 2] = $8;
    break;
   }
   $9 = HEAP32[$6 + -4 >> 2] | 0;
   if (!$9) {
    HEAP8[$agg$result >> 0] = 0;
    HEAP32[$agg$result + 4 >> 2] = 0;
    break;
   }
   if (!(__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE8is_arrayEv($9) | 0)) if (!(__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE9is_objectEv(HEAP32[(HEAP32[$__end_$i31$pre$phiZZ2D >> 2] | 0) + -4 >> 2] | 0) | 0)) ___assert_fail(24135, 22221, 4752, 24197);
   $call47 = __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE8is_arrayEv(HEAP32[(HEAP32[$__end_$i31$pre$phiZZ2D >> 2] | 0) + -4 >> 2] | 0) | 0;
   $15 = HEAP32[(HEAP32[$__end_$i31$pre$phiZZ2D >> 2] | 0) + -4 >> 2] | 0;
   if ($call47) {
    $16 = HEAP32[$15 + 8 >> 2] | 0;
    $__end_$i29 = $16 + 4 | 0;
    $17 = HEAP32[$__end_$i29 >> 2] | 0;
    if ($17 >>> 0 < (HEAP32[$16 + 8 >> 2] | 0) >>> 0) {
     __ZN8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEC2EOSB_($17, $value);
     HEAP32[$__end_$i29 >> 2] = (HEAP32[$__end_$i29 >> 2] | 0) + 16;
    } else __ZNSt3__26vectorIN8nlohmann10basic_jsonINS_3mapES0_NS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEbxydS7_NS1_14adl_serializerEEENS7_ISB_EEE21__push_back_slow_pathISB_EEvOT_($16, $value);
    $24 = (HEAP32[(HEAP32[(HEAP32[(HEAP32[$__end_$i31$pre$phiZZ2D >> 2] | 0) + -4 >> 2] | 0) + 8 >> 2] | 0) + 4 >> 2] | 0) + -16 | 0;
    HEAP8[$agg$result >> 0] = 1;
    HEAP32[$agg$result + 4 >> 2] = $24;
    break;
   }
   if (!(__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE9is_objectEv($15) | 0)) ___assert_fail(24210, 22221, 4762, 24197);
   $__size_$i20 = $this + 32 | 0;
   $25 = HEAP32[$__size_$i20 >> 2] | 0;
   if (!$25) ___assert_fail(27945, 22221, 4764, 24197);
   $sub$i12 = $25 + -1 | 0;
   $tobool$i10 = (HEAP32[(HEAP32[$this + 28 >> 2] | 0) + ($sub$i12 >>> 5 << 2) >> 2] & 1 << ($sub$i12 & 31) | 0) == 0;
   HEAP32[$__size_$i20 >> 2] = $sub$i12;
   if ($tobool$i10) {
    HEAP8[$agg$result >> 0] = 0;
    HEAP32[$agg$result + 4 >> 2] = 0;
    break;
   }
   $object_element = $this + 40 | 0;
   if (!(HEAP32[$object_element >> 2] | 0)) ___assert_fail(24240, 22221, 4773, 24197); else {
    __ZN8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEC2EOSB_($agg$tmp93, $value);
    __ZN8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEaSESB_(HEAP32[$object_element >> 2] | 0, $agg$tmp93) | 0;
    __ZN8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEED2Ev($agg$tmp93);
    HEAP8[$agg$result >> 0] = 1;
    HEAP32[$agg$result + 4 >> 2] = HEAP32[$object_element >> 2];
    break;
   }
  } while (0);
  __ZN8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEED2Ev($value);
 }
 STACKTOP = sp;
 return;
}

function _GifWriteLzwImage($f, $image, $left, $top, $width, $height, $delay, $pPal) {
 $f = $f | 0;
 $image = $image | 0;
 $left = $left | 0;
 $top = $top | 0;
 $width = $width | 0;
 $height = $height | 0;
 $delay = $delay | 0;
 $pPal = $pPal | 0;
 var $95 = 0, $96 = 0, $clearCode = 0, $codeSize = 0, $codetree = 0, $curCode = 0, $delay$addr = 0, $f$addr = 0, $height$addr = 0, $image$addr = 0, $inc = 0, $left$addr = 0, $maxCode = 0, $minCodeSize = 0, $mul = 0, $nextValue = 0, $pPal$addr = 0, $stat = 0, $top$addr = 0, $width$addr = 0, $xx = 0, $yy = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 336 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(336);
 $f$addr = sp + 324 | 0;
 $image$addr = sp + 320 | 0;
 $left$addr = sp + 316 | 0;
 $top$addr = sp + 312 | 0;
 $width$addr = sp + 308 | 0;
 $height$addr = sp + 304 | 0;
 $delay$addr = sp + 300 | 0;
 $pPal$addr = sp + 296 | 0;
 $minCodeSize = sp + 292 | 0;
 $clearCode = sp + 288 | 0;
 $codetree = sp + 284 | 0;
 $curCode = sp + 280 | 0;
 $codeSize = sp + 276 | 0;
 $maxCode = sp + 272 | 0;
 $stat = sp + 8 | 0;
 $yy = sp + 4 | 0;
 $xx = sp;
 $nextValue = sp + 328 | 0;
 HEAP32[$f$addr >> 2] = $f;
 HEAP32[$image$addr >> 2] = $image;
 HEAP32[$left$addr >> 2] = $left;
 HEAP32[$top$addr >> 2] = $top;
 HEAP32[$width$addr >> 2] = $width;
 HEAP32[$height$addr >> 2] = $height;
 HEAP32[$delay$addr >> 2] = $delay;
 HEAP32[$pPal$addr >> 2] = $pPal;
 _fputc(33, HEAP32[$f$addr >> 2] | 0) | 0;
 _fputc(249, HEAP32[$f$addr >> 2] | 0) | 0;
 _fputc(4, HEAP32[$f$addr >> 2] | 0) | 0;
 _fputc(5, HEAP32[$f$addr >> 2] | 0) | 0;
 _fputc(HEAP32[$delay$addr >> 2] & 255, HEAP32[$f$addr >> 2] | 0) | 0;
 _fputc((HEAP32[$delay$addr >> 2] | 0) >>> 8 & 255, HEAP32[$f$addr >> 2] | 0) | 0;
 _fputc(0, HEAP32[$f$addr >> 2] | 0) | 0;
 _fputc(0, HEAP32[$f$addr >> 2] | 0) | 0;
 _fputc(44, HEAP32[$f$addr >> 2] | 0) | 0;
 _fputc(HEAP32[$left$addr >> 2] & 255, HEAP32[$f$addr >> 2] | 0) | 0;
 _fputc((HEAP32[$left$addr >> 2] | 0) >>> 8 & 255, HEAP32[$f$addr >> 2] | 0) | 0;
 _fputc(HEAP32[$top$addr >> 2] & 255, HEAP32[$f$addr >> 2] | 0) | 0;
 _fputc((HEAP32[$top$addr >> 2] | 0) >>> 8 & 255, HEAP32[$f$addr >> 2] | 0) | 0;
 _fputc(HEAP32[$width$addr >> 2] & 255, HEAP32[$f$addr >> 2] | 0) | 0;
 _fputc((HEAP32[$width$addr >> 2] | 0) >>> 8 & 255, HEAP32[$f$addr >> 2] | 0) | 0;
 _fputc(HEAP32[$height$addr >> 2] & 255, HEAP32[$f$addr >> 2] | 0) | 0;
 _fputc((HEAP32[$height$addr >> 2] | 0) >>> 8 & 255, HEAP32[$f$addr >> 2] | 0) | 0;
 _fputc(128 + (HEAP32[HEAP32[$pPal$addr >> 2] >> 2] | 0) - 1 | 0, HEAP32[$f$addr >> 2] | 0) | 0;
 _GifWritePalette(HEAP32[$f$addr >> 2] | 0, HEAP32[$pPal$addr >> 2] | 0);
 HEAP32[$minCodeSize >> 2] = HEAP32[HEAP32[$pPal$addr >> 2] >> 2];
 HEAP32[$clearCode >> 2] = 1 << HEAP32[HEAP32[$pPal$addr >> 2] >> 2];
 _fputc(HEAP32[$minCodeSize >> 2] | 0, HEAP32[$f$addr >> 2] | 0) | 0;
 HEAP32[$codetree >> 2] = _malloc(2097152) | 0;
 _memset(HEAP32[$codetree >> 2] | 0, 0, 2097152) | 0;
 HEAP32[$curCode >> 2] = -1;
 HEAP32[$codeSize >> 2] = (HEAP32[$minCodeSize >> 2] | 0) + 1;
 HEAP32[$maxCode >> 2] = (HEAP32[$clearCode >> 2] | 0) + 1;
 HEAP8[$stat + 1 >> 0] = 0;
 HEAP8[$stat >> 0] = 0;
 HEAP32[$stat + 4 >> 2] = 0;
 _GifWriteCode(HEAP32[$f$addr >> 2] | 0, $stat, HEAP32[$clearCode >> 2] | 0, HEAP32[$codeSize >> 2] | 0);
 HEAP32[$yy >> 2] = 0;
 while (1) {
  if ((HEAP32[$yy >> 2] | 0) >>> 0 >= (HEAP32[$height$addr >> 2] | 0) >>> 0) break;
  HEAP32[$xx >> 2] = 0;
  while (1) {
   if ((HEAP32[$xx >> 2] | 0) >>> 0 >= (HEAP32[$width$addr >> 2] | 0) >>> 0) break;
   $mul = Math_imul(HEAP32[$yy >> 2] | 0, HEAP32[$width$addr >> 2] | 0) | 0;
   HEAP8[$nextValue >> 0] = HEAP8[(HEAP32[$image$addr >> 2] | 0) + (($mul + (HEAP32[$xx >> 2] | 0) << 2) + 3) >> 0] | 0;
   do if ((HEAP32[$curCode >> 2] | 0) < 0) HEAP32[$curCode >> 2] = HEAPU8[$nextValue >> 0]; else {
    if (HEAP16[(HEAP32[$codetree >> 2] | 0) + (HEAP32[$curCode >> 2] << 9) + (HEAPU8[$nextValue >> 0] << 1) >> 1] | 0) {
     HEAP32[$curCode >> 2] = HEAPU16[(HEAP32[$codetree >> 2] | 0) + (HEAP32[$curCode >> 2] << 9) + (HEAPU8[$nextValue >> 0] << 1) >> 1];
     break;
    }
    _GifWriteCode(HEAP32[$f$addr >> 2] | 0, $stat, HEAP32[$curCode >> 2] | 0, HEAP32[$codeSize >> 2] | 0);
    $inc = (HEAP32[$maxCode >> 2] | 0) + 1 | 0;
    HEAP32[$maxCode >> 2] = $inc;
    HEAP16[(HEAP32[$codetree >> 2] | 0) + (HEAP32[$curCode >> 2] << 9) + (HEAPU8[$nextValue >> 0] << 1) >> 1] = $inc;
    if ((HEAP32[$maxCode >> 2] | 0) >>> 0 >= 1 << HEAP32[$codeSize >> 2] >>> 0) HEAP32[$codeSize >> 2] = (HEAP32[$codeSize >> 2] | 0) + 1;
    if ((HEAP32[$maxCode >> 2] | 0) == 4095) {
     _GifWriteCode(HEAP32[$f$addr >> 2] | 0, $stat, HEAP32[$clearCode >> 2] | 0, HEAP32[$codeSize >> 2] | 0);
     _memset(HEAP32[$codetree >> 2] | 0, 0, 2097152) | 0;
     HEAP32[$codeSize >> 2] = (HEAP32[$minCodeSize >> 2] | 0) + 1;
     HEAP32[$maxCode >> 2] = (HEAP32[$clearCode >> 2] | 0) + 1;
    }
    HEAP32[$curCode >> 2] = HEAPU8[$nextValue >> 0];
   } while (0);
   HEAP32[$xx >> 2] = (HEAP32[$xx >> 2] | 0) + 1;
  }
  HEAP32[$yy >> 2] = (HEAP32[$yy >> 2] | 0) + 1;
 }
 _GifWriteCode(HEAP32[$f$addr >> 2] | 0, $stat, HEAP32[$curCode >> 2] | 0, HEAP32[$codeSize >> 2] | 0);
 _GifWriteCode(HEAP32[$f$addr >> 2] | 0, $stat, HEAP32[$clearCode >> 2] | 0, HEAP32[$codeSize >> 2] | 0);
 _GifWriteCode(HEAP32[$f$addr >> 2] | 0, $stat, (HEAP32[$clearCode >> 2] | 0) + 1 | 0, (HEAP32[$minCodeSize >> 2] | 0) + 1 | 0);
 while (1) {
  if (!(HEAP8[$stat >> 0] | 0)) break;
  _GifWriteBit($stat, 0);
 }
 if (!(HEAP32[$stat + 4 >> 2] | 0)) {
  $95 = HEAP32[$f$addr >> 2] | 0;
  _fputc(0, $95) | 0;
  $96 = HEAP32[$codetree >> 2] | 0;
  _free($96);
  STACKTOP = sp;
  return;
 }
 _GifWriteChunk(HEAP32[$f$addr >> 2] | 0, $stat);
 $95 = HEAP32[$f$addr >> 2] | 0;
 _fputc(0, $95) | 0;
 $96 = HEAP32[$codetree >> 2] | 0;
 _free($96);
 STACKTOP = sp;
 return;
}

function _MatrixRotate($agg$result, $axis, $angle) {
 $agg$result = $agg$result | 0;
 $axis = $axis | 0;
 $angle = Math_fround($angle);
 var $13 = f0, $15 = f0, $17 = f0, $24 = f0, $28 = f0, $3 = f0, $31 = f0, $33 = f0, $36 = f0, $38 = f0, $41 = f0, $43 = f0, $47 = f0, $5 = f0, $50 = f0, $52 = f0, $55 = f0, $57 = f0, $60 = f0, $62 = f0, $7 = f0, $add = f0, $angle$addr = 0, $cmp = 0, $cosres = 0, $length = 0, $mul = f0, $mul11 = f0, $mul12 = f0, $mul14 = f0, $mul15 = f0, $mul18 = f0, $mul19 = f0, $mul22 = f0, $mul23 = f0, $mul26 = f0, $mul27 = f0, $mul29 = f0, $mul30 = f0, $mul33 = f0, $mul34 = f0, $mul37 = f0, $mul38 = f0, $mul41 = f0, $mul42 = f0, $result = 0, $sinres = 0, $t = 0, $x = 0, $y = 0, $z = 0, dest = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(112);
 $angle$addr = sp + 96 | 0;
 $result = sp + 32 | 0;
 $x = sp + 24 | 0;
 $y = sp + 20 | 0;
 $z = sp + 16 | 0;
 $length = sp + 12 | 0;
 $sinres = sp + 8 | 0;
 $cosres = sp + 4 | 0;
 $t = sp;
 HEAPF32[$angle$addr >> 2] = $angle;
 dest = $result;
 stop = dest + 64 | 0;
 do {
  HEAP32[dest >> 2] = 0;
  dest = dest + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAPF32[$x >> 2] = Math_fround(HEAPF32[$axis >> 2]);
 HEAPF32[$y >> 2] = Math_fround(HEAPF32[$axis + 4 >> 2]);
 HEAPF32[$z >> 2] = Math_fround(HEAPF32[$axis + 8 >> 2]);
 $3 = Math_fround(HEAPF32[$x >> 2]);
 $mul = Math_fround($3 * Math_fround(HEAPF32[$x >> 2]));
 $5 = Math_fround(HEAPF32[$y >> 2]);
 $add = Math_fround($mul + Math_fround($5 * Math_fround(HEAPF32[$y >> 2])));
 $7 = Math_fround(HEAPF32[$z >> 2]);
 HEAPF32[$length >> 2] = Math_fround(Math_sqrt(Math_fround($add + Math_fround($7 * Math_fround(HEAPF32[$z >> 2])))));
 $cmp = Math_fround(HEAPF32[$length >> 2]) != Math_fround(1.0);
 if ($cmp & Math_fround(HEAPF32[$length >> 2]) != Math_fround(0.0)) {
  HEAPF32[$length >> 2] = Math_fround(Math_fround(1.0) / Math_fround(HEAPF32[$length >> 2]));
  $13 = Math_fround(HEAPF32[$length >> 2]);
  HEAPF32[$x >> 2] = Math_fround(Math_fround(HEAPF32[$x >> 2]) * $13);
  $15 = Math_fround(HEAPF32[$length >> 2]);
  HEAPF32[$y >> 2] = Math_fround(Math_fround(HEAPF32[$y >> 2]) * $15);
  $17 = Math_fround(HEAPF32[$length >> 2]);
  HEAPF32[$z >> 2] = Math_fround(Math_fround(HEAPF32[$z >> 2]) * $17);
 }
 HEAPF32[$sinres >> 2] = Math_fround(+_llvm_sin_f32(+Math_fround(HEAPF32[$angle$addr >> 2])));
 HEAPF32[$cosres >> 2] = Math_fround(+_llvm_cos_f32(+Math_fround(HEAPF32[$angle$addr >> 2])));
 HEAPF32[$t >> 2] = Math_fround(Math_fround(1.0) - Math_fround(HEAPF32[$cosres >> 2]));
 $24 = Math_fround(HEAPF32[$x >> 2]);
 $mul11 = Math_fround($24 * Math_fround(HEAPF32[$x >> 2]));
 $mul12 = Math_fround($mul11 * Math_fround(HEAPF32[$t >> 2]));
 HEAPF32[$result >> 2] = Math_fround($mul12 + Math_fround(HEAPF32[$cosres >> 2]));
 $28 = Math_fround(HEAPF32[$y >> 2]);
 $mul14 = Math_fround($28 * Math_fround(HEAPF32[$x >> 2]));
 $mul15 = Math_fround($mul14 * Math_fround(HEAPF32[$t >> 2]));
 $31 = Math_fround(HEAPF32[$z >> 2]);
 HEAPF32[$result + 16 >> 2] = Math_fround($mul15 + Math_fround($31 * Math_fround(HEAPF32[$sinres >> 2])));
 $33 = Math_fround(HEAPF32[$z >> 2]);
 $mul18 = Math_fround($33 * Math_fround(HEAPF32[$x >> 2]));
 $mul19 = Math_fround($mul18 * Math_fround(HEAPF32[$t >> 2]));
 $36 = Math_fround(HEAPF32[$y >> 2]);
 HEAPF32[$result + 32 >> 2] = Math_fround($mul19 - Math_fround($36 * Math_fround(HEAPF32[$sinres >> 2])));
 HEAPF32[$result + 48 >> 2] = Math_fround(0.0);
 $38 = Math_fround(HEAPF32[$x >> 2]);
 $mul22 = Math_fround($38 * Math_fround(HEAPF32[$y >> 2]));
 $mul23 = Math_fround($mul22 * Math_fround(HEAPF32[$t >> 2]));
 $41 = Math_fround(HEAPF32[$z >> 2]);
 HEAPF32[$result + 4 >> 2] = Math_fround($mul23 - Math_fround($41 * Math_fround(HEAPF32[$sinres >> 2])));
 $43 = Math_fround(HEAPF32[$y >> 2]);
 $mul26 = Math_fround($43 * Math_fround(HEAPF32[$y >> 2]));
 $mul27 = Math_fround($mul26 * Math_fround(HEAPF32[$t >> 2]));
 HEAPF32[$result + 20 >> 2] = Math_fround($mul27 + Math_fround(HEAPF32[$cosres >> 2]));
 $47 = Math_fround(HEAPF32[$z >> 2]);
 $mul29 = Math_fround($47 * Math_fround(HEAPF32[$y >> 2]));
 $mul30 = Math_fround($mul29 * Math_fround(HEAPF32[$t >> 2]));
 $50 = Math_fround(HEAPF32[$x >> 2]);
 HEAPF32[$result + 36 >> 2] = Math_fround($mul30 + Math_fround($50 * Math_fround(HEAPF32[$sinres >> 2])));
 HEAPF32[$result + 52 >> 2] = Math_fround(0.0);
 $52 = Math_fround(HEAPF32[$x >> 2]);
 $mul33 = Math_fround($52 * Math_fround(HEAPF32[$z >> 2]));
 $mul34 = Math_fround($mul33 * Math_fround(HEAPF32[$t >> 2]));
 $55 = Math_fround(HEAPF32[$y >> 2]);
 HEAPF32[$result + 8 >> 2] = Math_fround($mul34 + Math_fround($55 * Math_fround(HEAPF32[$sinres >> 2])));
 $57 = Math_fround(HEAPF32[$y >> 2]);
 $mul37 = Math_fround($57 * Math_fround(HEAPF32[$z >> 2]));
 $mul38 = Math_fround($mul37 * Math_fround(HEAPF32[$t >> 2]));
 $60 = Math_fround(HEAPF32[$x >> 2]);
 HEAPF32[$result + 24 >> 2] = Math_fround($mul38 - Math_fround($60 * Math_fround(HEAPF32[$sinres >> 2])));
 $62 = Math_fround(HEAPF32[$z >> 2]);
 $mul41 = Math_fround($62 * Math_fround(HEAPF32[$z >> 2]));
 $mul42 = Math_fround($mul41 * Math_fround(HEAPF32[$t >> 2]));
 HEAPF32[$result + 40 >> 2] = Math_fround($mul42 + Math_fround(HEAPF32[$cosres >> 2]));
 HEAPF32[$result + 56 >> 2] = Math_fround(0.0);
 HEAPF32[$result + 12 >> 2] = Math_fround(0.0);
 HEAPF32[$result + 28 >> 2] = Math_fround(0.0);
 HEAPF32[$result + 44 >> 2] = Math_fround(0.0);
 HEAPF32[$result + 60 >> 2] = Math_fround(1.0);
 dest = $agg$result;
 src = $result;
 stop = dest + 64 | 0;
 do {
  HEAP32[dest >> 2] = HEAP32[src >> 2];
  dest = dest + 4 | 0;
  src = src + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 STACKTOP = sp;
 return;
}

function __ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE9underflowEv($this) {
 $this = $this | 0;
 var $$pre$phiZ2D = 0, $$pre72 = 0, $10 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $19 = 0, $20 = 0, $21 = 0, $25 = 0, $30 = 0, $31 = 0, $36 = 0, $39 = 0, $42 = 0, $43 = 0, $44 = 0, $5 = 0, $__1buf = 0, $__binp_$i20$pre$phiZZ2D = 0, $__binp_$i42 = 0, $__c$1 = 0, $__c$3 = 0, $__extbuf_ = 0, $__extbuf_55$pre$phiZ2D = 0, $__extbufend_ = 0, $__extbufnext_ = 0, $__file_ = 0, $__ibs_ = 0, $__inext = 0, $__ninp_$i = 0, $__st_ = 0, $add$ptr = 0, $add$ptr113 = 0, $add$ptr113$sink = 0, $add$ptr39 = 0, $add$ptr61 = 0, $add$ptr70 = 0, $add$ptr91 = 0, $call16 = 0, $call2 = 0, $call34 = 0, $call84 = 0, $cond67 = 0, $cond69 = 0, $div = 0, $exception$i = 0, $retval$0 = 0, $sub$ptr$sub80 = 0, $sub74 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $__1buf = sp + 4 | 0;
 $__inext = sp;
 $__file_ = $this + 64 | 0;
 if (!(HEAP32[$__file_ >> 2] | 0)) $retval$0 = __ZNSt3__211char_traitsIcE3eofEv() | 0; else {
  $call2 = __ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE11__read_modeEv($this) | 0;
  $__ninp_$i = $this + 12 | 0;
  if (!(HEAP32[$__ninp_$i >> 2] | 0)) {
   $add$ptr = $__1buf + 1 | 0;
   HEAP32[$this + 8 >> 2] = $__1buf;
   HEAP32[$__ninp_$i >> 2] = $add$ptr;
   HEAP32[$this + 16 >> 2] = $add$ptr;
  }
  $$pre72 = $this + 16 | 0;
  if ($call2) $cond67 = 0; else {
   $div = ((HEAP32[$$pre72 >> 2] | 0) - (HEAP32[$this + 8 >> 2] | 0) | 0) / 2 | 0;
   $cond67 = $div >>> 0 < 4 ? $div : 4;
  }
  $call16 = __ZNSt3__211char_traitsIcE3eofEv() | 0;
  $5 = HEAP32[$__ninp_$i >> 2] | 0;
  do if (($5 | 0) == (HEAP32[$$pre72 >> 2] | 0)) {
   $__binp_$i42 = $this + 8 | 0;
   _memmove(HEAP32[$__binp_$i42 >> 2] | 0, $5 + (0 - $cond67) | 0, $cond67 | 0) | 0;
   if (HEAP8[$this + 98 >> 0] | 0) {
    $10 = HEAP32[$__binp_$i42 >> 2] | 0;
    $call34 = _fread($10 + $cond67 | 0, 1, (HEAP32[$$pre72 >> 2] | 0) - $cond67 - $10 | 0, HEAP32[$__file_ >> 2] | 0) | 0;
    if (!$call34) {
     $__binp_$i20$pre$phiZZ2D = $__binp_$i42;
     $__c$3 = $call16;
     break;
    }
    $add$ptr39 = (HEAP32[$__binp_$i42 >> 2] | 0) + $cond67 | 0;
    HEAP32[$__ninp_$i >> 2] = $add$ptr39;
    HEAP32[$$pre72 >> 2] = $add$ptr39 + $call34;
    $__binp_$i20$pre$phiZZ2D = $__binp_$i42;
    $__c$3 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$add$ptr39 >> 0] | 0) | 0;
    break;
   }
   $__extbufend_ = $this + 40 | 0;
   $14 = HEAP32[$__extbufend_ >> 2] | 0;
   $__extbufnext_ = $this + 36 | 0;
   $15 = HEAP32[$__extbufnext_ >> 2] | 0;
   $16 = $14;
   $17 = $15;
   if (($14 | 0) == ($15 | 0)) {
    $$pre$phiZ2D = $__extbufend_;
    $20 = $17;
    $21 = $16;
    $__extbuf_55$pre$phiZ2D = $this + 32 | 0;
   } else {
    $__extbuf_ = $this + 32 | 0;
    _memmove(HEAP32[$__extbuf_ >> 2] | 0, $15 | 0, $16 - $17 | 0) | 0;
    $$pre$phiZ2D = $__extbufend_;
    $20 = HEAP32[$__extbufnext_ >> 2] | 0;
    $21 = HEAP32[$__extbufend_ >> 2] | 0;
    $__extbuf_55$pre$phiZ2D = $__extbuf_;
   }
   $19 = HEAP32[$__extbuf_55$pre$phiZ2D >> 2] | 0;
   $add$ptr61 = $19 + ($21 - $20) | 0;
   HEAP32[$__extbufnext_ >> 2] = $add$ptr61;
   if (($19 | 0) == ($this + 44 | 0)) $cond69 = 8; else $cond69 = HEAP32[$this + 52 >> 2] | 0;
   $add$ptr70 = $19 + $cond69 | 0;
   HEAP32[$__extbufend_ >> 2] = $add$ptr70;
   $__ibs_ = $this + 60 | 0;
   $sub74 = (HEAP32[$__ibs_ >> 2] | 0) - $cond67 | 0;
   $sub$ptr$sub80 = $add$ptr70 - $add$ptr61 | 0;
   $__st_ = $this + 72 | 0;
   $25 = $__st_;
   $30 = HEAP32[$25 + 4 >> 2] | 0;
   $31 = $this + 80 | 0;
   HEAP32[$31 >> 2] = HEAP32[$25 >> 2];
   HEAP32[$31 + 4 >> 2] = $30;
   $call84 = _fread($add$ptr61, 1, $sub$ptr$sub80 >>> 0 < $sub74 >>> 0 ? $sub$ptr$sub80 : $sub74, HEAP32[$__file_ >> 2] | 0) | 0;
   if (!$call84) {
    $__binp_$i20$pre$phiZZ2D = $__binp_$i42;
    $__c$3 = $call16;
   } else {
    $36 = HEAP32[$this + 68 >> 2] | 0;
    if (!$36) {
     $exception$i = ___cxa_allocate_exception(4) | 0;
     __ZNSt8bad_castC2Ev($exception$i);
     ___cxa_throw($exception$i | 0, 15872, 38);
    }
    $add$ptr91 = (HEAP32[$__extbufnext_ >> 2] | 0) + $call84 | 0;
    HEAP32[$__extbufend_ >> 2] = $add$ptr91;
    $39 = HEAP32[$__binp_$i42 >> 2] | 0;
    if ((FUNCTION_TABLE_iiiiiiiii[HEAP32[(HEAP32[$36 >> 2] | 0) + 16 >> 2] & 15]($36, $__st_, HEAP32[$__extbuf_55$pre$phiZ2D >> 2] | 0, $add$ptr91, $__extbufnext_, $39 + $cond67 | 0, $39 + (HEAP32[$__ibs_ >> 2] | 0) | 0, $__inext) | 0) == 3) {
     $42 = HEAP32[$__extbuf_55$pre$phiZ2D >> 2] | 0;
     $43 = HEAP32[$$pre$phiZ2D >> 2] | 0;
     HEAP32[$__binp_$i42 >> 2] = $42;
     HEAP32[$__ninp_$i >> 2] = $42;
     HEAP32[$$pre72 >> 2] = $43;
     $add$ptr113$sink = $42;
     label = 23;
    } else {
     $44 = HEAP32[$__inext >> 2] | 0;
     $add$ptr113 = (HEAP32[$__binp_$i42 >> 2] | 0) + $cond67 | 0;
     if (($44 | 0) == ($add$ptr113 | 0)) $__c$1 = $call16; else {
      HEAP32[$__ninp_$i >> 2] = $add$ptr113;
      HEAP32[$$pre72 >> 2] = $44;
      $add$ptr113$sink = $add$ptr113;
      label = 23;
     }
    }
    if ((label | 0) == 23) $__c$1 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$add$ptr113$sink >> 0] | 0) | 0;
    $__binp_$i20$pre$phiZZ2D = $__binp_$i42;
    $__c$3 = $__c$1;
   }
  } else {
   $__binp_$i20$pre$phiZZ2D = $this + 8 | 0;
   $__c$3 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$5 >> 0] | 0) | 0;
  } while (0);
  if ((HEAP32[$__binp_$i20$pre$phiZZ2D >> 2] | 0) == ($__1buf | 0)) {
   HEAP32[$__binp_$i20$pre$phiZZ2D >> 2] = 0;
   HEAP32[$__ninp_$i >> 2] = 0;
   HEAP32[$$pre72 >> 2] = 0;
  }
  $retval$0 = $__c$3;
 }
 STACKTOP = sp;
 return $retval$0 | 0;
}

function __ZNSt3__29__num_putIwE21__widen_and_group_intEPcS2_S2_PwRS3_S4_RKNS_6localeE($__nb, $__np, $__ne, $__ob, $__op, $__oe, $__loc) {
 $__nb = $__nb | 0;
 $__np = $__np | 0;
 $__ne = $__ne | 0;
 $__ob = $__ob | 0;
 $__op = $__op | 0;
 $__oe = $__oe | 0;
 $__loc = $__loc | 0;
 var $1 = 0, $10 = 0, $13 = 0, $14 = 0, $17 = 0, $18 = 0, $22 = 0, $23 = 0, $24 = 0, $28 = 0, $29 = 0, $4 = 0, $6 = 0, $__dc$0 = 0, $__dc$1 = 0, $__dg$0 = 0, $__dg$1 = 0, $__first$addr$0$i$i = 0, $__first$addr$0$i$i75 = 0, $__grouping = 0, $__last$addr$0$i$i = 0, $__last$addr$0$i$i76 = 0, $__nf$0 = 0, $__nf$1 = 0, $__p$0 = 0, $__size_$i$i$i = 0, $__size_$i3$i$i = 0, $add$ptr = 0, $add$ptr54 = 0, $arrayidx16 = 0, $call$i = 0, $call$i54 = 0, $call$i60 = 0, $call$i63 = 0, $call$i66 = 0, $call$i69 = 0, $call$i72 = 0, $incdec$ptr$i$i = 0, $incdec$ptr$i$i77 = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$rhs$cast52 = 0, $sub$ptr$rhs$cast60$pre$phiZZZZ2D = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $__grouping = sp;
 $call$i = __ZNKSt3__26locale9use_facetERNS0_2idE($__loc, 61248) | 0;
 $call$i54 = __ZNKSt3__26locale9use_facetERNS0_2idE($__loc, 61256) | 0;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[$call$i54 >> 2] | 0) + 20 >> 2] & 127]($__grouping, $call$i54);
 $__size_$i$i$i = $__grouping + 11 | 0;
 $1 = HEAP8[$__size_$i$i$i >> 0] | 0;
 $__size_$i3$i$i = $__grouping + 4 | 0;
 if (!(($1 << 24 >> 24 < 0 ? HEAP32[$__size_$i3$i$i >> 2] | 0 : $1 & 255) | 0)) {
  FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[$call$i >> 2] | 0) + 48 >> 2] & 15]($call$i, $__nb, $__ne, $__ob) | 0;
  $sub$ptr$rhs$cast = $__nb;
  $add$ptr = $__ob + ($__ne - $sub$ptr$rhs$cast << 2) | 0;
  HEAP32[$__oe >> 2] = $add$ptr;
  $29 = $add$ptr;
  $sub$ptr$rhs$cast60$pre$phiZZZZ2D = $sub$ptr$rhs$cast;
 } else {
  HEAP32[$__oe >> 2] = $__ob;
  $4 = HEAP8[$__nb >> 0] | 0;
  switch ($4 << 24 >> 24) {
  case 43:
  case 45:
   {
    $call$i60 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$call$i >> 2] | 0) + 44 >> 2] & 31]($call$i, $4) | 0;
    $6 = HEAP32[$__oe >> 2] | 0;
    HEAP32[$__oe >> 2] = $6 + 4;
    HEAP32[$6 >> 2] = $call$i60;
    $__nf$0 = $__nb + 1 | 0;
    break;
   }
  default:
   $__nf$0 = $__nb;
  }
  L7 : do if (($__ne - $__nf$0 | 0) > 1) if ((HEAP8[$__nf$0 >> 0] | 0) == 48) {
   $arrayidx16 = $__nf$0 + 1 | 0;
   switch (HEAP8[$arrayidx16 >> 0] | 0) {
   case 88:
   case 120:
    break;
   default:
    {
     $__nf$1 = $__nf$0;
     break L7;
    }
   }
   $call$i63 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$call$i >> 2] | 0) + 44 >> 2] & 31]($call$i, 48) | 0;
   $10 = HEAP32[$__oe >> 2] | 0;
   HEAP32[$__oe >> 2] = $10 + 4;
   HEAP32[$10 >> 2] = $call$i63;
   $call$i66 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$call$i >> 2] | 0) + 44 >> 2] & 31]($call$i, HEAP8[$arrayidx16 >> 0] | 0) | 0;
   $13 = HEAP32[$__oe >> 2] | 0;
   HEAP32[$__oe >> 2] = $13 + 4;
   HEAP32[$13 >> 2] = $call$i66;
   $__nf$1 = $__nf$0 + 2 | 0;
  } else $__nf$1 = $__nf$0; else $__nf$1 = $__nf$0; while (0);
  L12 : do if (($__nf$1 | 0) != ($__ne | 0)) {
   $__first$addr$0$i$i = $__nf$1;
   $__last$addr$0$i$i = $__ne;
   while (1) {
    $incdec$ptr$i$i = $__last$addr$0$i$i + -1 | 0;
    if ($__first$addr$0$i$i >>> 0 >= $incdec$ptr$i$i >>> 0) break L12;
    $14 = HEAP8[$__first$addr$0$i$i >> 0] | 0;
    HEAP8[$__first$addr$0$i$i >> 0] = HEAP8[$incdec$ptr$i$i >> 0] | 0;
    HEAP8[$incdec$ptr$i$i >> 0] = $14;
    $__first$addr$0$i$i = $__first$addr$0$i$i + 1 | 0;
    $__last$addr$0$i$i = $incdec$ptr$i$i;
   }
  } while (0);
  $call$i72 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$call$i54 >> 2] | 0) + 16 >> 2] & 127]($call$i54) | 0;
  $__dc$0 = 0;
  $__dg$0 = 0;
  $__p$0 = $__nf$1;
  while (1) {
   if ($__p$0 >>> 0 >= $__ne >>> 0) break;
   $22 = HEAP8[((HEAP8[$__size_$i$i$i >> 0] | 0) < 0 ? HEAP32[$__grouping >> 2] | 0 : $__grouping) + $__dg$0 >> 0] | 0;
   if ($22 << 24 >> 24 != 0 & ($__dc$0 | 0) == ($22 << 24 >> 24 | 0)) {
    $23 = HEAP32[$__oe >> 2] | 0;
    HEAP32[$__oe >> 2] = $23 + 4;
    HEAP32[$23 >> 2] = $call$i72;
    $24 = HEAP8[$__size_$i$i$i >> 0] | 0;
    $__dc$1 = 0;
    $__dg$1 = $__dg$0 + ($__dg$0 >>> 0 < (($24 << 24 >> 24 < 0 ? HEAP32[$__size_$i3$i$i >> 2] | 0 : $24 & 255) + -1 | 0) >>> 0 & 1) | 0;
   } else {
    $__dc$1 = $__dc$0;
    $__dg$1 = $__dg$0;
   }
   $call$i69 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$call$i >> 2] | 0) + 44 >> 2] & 31]($call$i, HEAP8[$__p$0 >> 0] | 0) | 0;
   $28 = HEAP32[$__oe >> 2] | 0;
   HEAP32[$__oe >> 2] = $28 + 4;
   HEAP32[$28 >> 2] = $call$i69;
   $__dc$0 = $__dc$1 + 1 | 0;
   $__dg$0 = $__dg$1;
   $__p$0 = $__p$0 + 1 | 0;
  }
  $sub$ptr$rhs$cast52 = $__nb;
  $add$ptr54 = $__ob + ($__nf$1 - $sub$ptr$rhs$cast52 << 2) | 0;
  $17 = HEAP32[$__oe >> 2] | 0;
  if (($add$ptr54 | 0) == ($17 | 0)) {
   $29 = $add$ptr54;
   $sub$ptr$rhs$cast60$pre$phiZZZZ2D = $sub$ptr$rhs$cast52;
  } else {
   $__first$addr$0$i$i75 = $add$ptr54;
   $__last$addr$0$i$i76 = $17;
   while (1) {
    $incdec$ptr$i$i77 = $__last$addr$0$i$i76 + -4 | 0;
    if ($__first$addr$0$i$i75 >>> 0 >= $incdec$ptr$i$i77 >>> 0) break;
    $18 = HEAP32[$__first$addr$0$i$i75 >> 2] | 0;
    HEAP32[$__first$addr$0$i$i75 >> 2] = HEAP32[$incdec$ptr$i$i77 >> 2];
    HEAP32[$incdec$ptr$i$i77 >> 2] = $18;
    $__first$addr$0$i$i75 = $__first$addr$0$i$i75 + 4 | 0;
    $__last$addr$0$i$i76 = $incdec$ptr$i$i77;
   }
   $29 = HEAP32[$__oe >> 2] | 0;
   $sub$ptr$rhs$cast60$pre$phiZZZZ2D = $sub$ptr$rhs$cast52;
  }
 }
 HEAP32[$__op >> 2] = ($__np | 0) == ($__ne | 0) ? $29 : $__ob + ($__np - $sub$ptr$rhs$cast60$pre$phiZZZZ2D << 2) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 STACKTOP = sp;
 return;
}

function __ZNSt3__29__num_putIcE21__widen_and_group_intEPcS2_S2_S2_RS2_S3_RKNS_6localeE($__nb, $__np, $__ne, $__ob, $__op, $__oe, $__loc) {
 $__nb = $__nb | 0;
 $__np = $__np | 0;
 $__ne = $__ne | 0;
 $__ob = $__ob | 0;
 $__op = $__op | 0;
 $__oe = $__oe | 0;
 $__loc = $__loc | 0;
 var $1 = 0, $10 = 0, $13 = 0, $14 = 0, $17 = 0, $18 = 0, $22 = 0, $23 = 0, $24 = 0, $28 = 0, $29 = 0, $4 = 0, $6 = 0, $__dc$0 = 0, $__dc$1 = 0, $__dg$0 = 0, $__dg$1 = 0, $__first$addr$0$i$i = 0, $__first$addr$0$i$i74 = 0, $__grouping = 0, $__last$addr$0$i$i = 0, $__last$addr$0$i$i75 = 0, $__nf$0 = 0, $__nf$1 = 0, $__p$0 = 0, $__size_$i$i$i = 0, $__size_$i3$i$i = 0, $add$ptr = 0, $add$ptr54 = 0, $arrayidx16 = 0, $call$i = 0, $call$i53 = 0, $call$i59 = 0, $call$i62 = 0, $call$i65 = 0, $call$i68 = 0, $call$i71 = 0, $incdec$ptr$i$i = 0, $incdec$ptr$i$i76 = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$rhs$cast52 = 0, $sub$ptr$rhs$cast60$pre$phiZZZZ2D = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $__grouping = sp;
 $call$i = __ZNKSt3__26locale9use_facetERNS0_2idE($__loc, 61216) | 0;
 $call$i53 = __ZNKSt3__26locale9use_facetERNS0_2idE($__loc, 61232) | 0;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[$call$i53 >> 2] | 0) + 20 >> 2] & 127]($__grouping, $call$i53);
 $__size_$i$i$i = $__grouping + 11 | 0;
 $1 = HEAP8[$__size_$i$i$i >> 0] | 0;
 $__size_$i3$i$i = $__grouping + 4 | 0;
 if (!(($1 << 24 >> 24 < 0 ? HEAP32[$__size_$i3$i$i >> 2] | 0 : $1 & 255) | 0)) {
  FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[$call$i >> 2] | 0) + 32 >> 2] & 15]($call$i, $__nb, $__ne, $__ob) | 0;
  $sub$ptr$rhs$cast = $__nb;
  $add$ptr = $__ob + ($__ne - $sub$ptr$rhs$cast) | 0;
  HEAP32[$__oe >> 2] = $add$ptr;
  $29 = $add$ptr;
  $sub$ptr$rhs$cast60$pre$phiZZZZ2D = $sub$ptr$rhs$cast;
 } else {
  HEAP32[$__oe >> 2] = $__ob;
  $4 = HEAP8[$__nb >> 0] | 0;
  switch ($4 << 24 >> 24) {
  case 43:
  case 45:
   {
    $call$i59 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$call$i >> 2] | 0) + 28 >> 2] & 31]($call$i, $4) | 0;
    $6 = HEAP32[$__oe >> 2] | 0;
    HEAP32[$__oe >> 2] = $6 + 1;
    HEAP8[$6 >> 0] = $call$i59;
    $__nf$0 = $__nb + 1 | 0;
    break;
   }
  default:
   $__nf$0 = $__nb;
  }
  L7 : do if (($__ne - $__nf$0 | 0) > 1) if ((HEAP8[$__nf$0 >> 0] | 0) == 48) {
   $arrayidx16 = $__nf$0 + 1 | 0;
   switch (HEAP8[$arrayidx16 >> 0] | 0) {
   case 88:
   case 120:
    break;
   default:
    {
     $__nf$1 = $__nf$0;
     break L7;
    }
   }
   $call$i62 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$call$i >> 2] | 0) + 28 >> 2] & 31]($call$i, 48) | 0;
   $10 = HEAP32[$__oe >> 2] | 0;
   HEAP32[$__oe >> 2] = $10 + 1;
   HEAP8[$10 >> 0] = $call$i62;
   $call$i65 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$call$i >> 2] | 0) + 28 >> 2] & 31]($call$i, HEAP8[$arrayidx16 >> 0] | 0) | 0;
   $13 = HEAP32[$__oe >> 2] | 0;
   HEAP32[$__oe >> 2] = $13 + 1;
   HEAP8[$13 >> 0] = $call$i65;
   $__nf$1 = $__nf$0 + 2 | 0;
  } else $__nf$1 = $__nf$0; else $__nf$1 = $__nf$0; while (0);
  L12 : do if (($__nf$1 | 0) != ($__ne | 0)) {
   $__first$addr$0$i$i = $__nf$1;
   $__last$addr$0$i$i = $__ne;
   while (1) {
    $incdec$ptr$i$i = $__last$addr$0$i$i + -1 | 0;
    if ($__first$addr$0$i$i >>> 0 >= $incdec$ptr$i$i >>> 0) break L12;
    $14 = HEAP8[$__first$addr$0$i$i >> 0] | 0;
    HEAP8[$__first$addr$0$i$i >> 0] = HEAP8[$incdec$ptr$i$i >> 0] | 0;
    HEAP8[$incdec$ptr$i$i >> 0] = $14;
    $__first$addr$0$i$i = $__first$addr$0$i$i + 1 | 0;
    $__last$addr$0$i$i = $incdec$ptr$i$i;
   }
  } while (0);
  $call$i71 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$call$i53 >> 2] | 0) + 16 >> 2] & 127]($call$i53) | 0;
  $__dc$0 = 0;
  $__dg$0 = 0;
  $__p$0 = $__nf$1;
  while (1) {
   if ($__p$0 >>> 0 >= $__ne >>> 0) break;
   $22 = HEAP8[((HEAP8[$__size_$i$i$i >> 0] | 0) < 0 ? HEAP32[$__grouping >> 2] | 0 : $__grouping) + $__dg$0 >> 0] | 0;
   if ($22 << 24 >> 24 != 0 & ($__dc$0 | 0) == ($22 << 24 >> 24 | 0)) {
    $23 = HEAP32[$__oe >> 2] | 0;
    HEAP32[$__oe >> 2] = $23 + 1;
    HEAP8[$23 >> 0] = $call$i71;
    $24 = HEAP8[$__size_$i$i$i >> 0] | 0;
    $__dc$1 = 0;
    $__dg$1 = $__dg$0 + ($__dg$0 >>> 0 < (($24 << 24 >> 24 < 0 ? HEAP32[$__size_$i3$i$i >> 2] | 0 : $24 & 255) + -1 | 0) >>> 0 & 1) | 0;
   } else {
    $__dc$1 = $__dc$0;
    $__dg$1 = $__dg$0;
   }
   $call$i68 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$call$i >> 2] | 0) + 28 >> 2] & 31]($call$i, HEAP8[$__p$0 >> 0] | 0) | 0;
   $28 = HEAP32[$__oe >> 2] | 0;
   HEAP32[$__oe >> 2] = $28 + 1;
   HEAP8[$28 >> 0] = $call$i68;
   $__dc$0 = $__dc$1 + 1 | 0;
   $__dg$0 = $__dg$1;
   $__p$0 = $__p$0 + 1 | 0;
  }
  $sub$ptr$rhs$cast52 = $__nb;
  $add$ptr54 = $__ob + ($__nf$1 - $sub$ptr$rhs$cast52) | 0;
  $17 = HEAP32[$__oe >> 2] | 0;
  if (($add$ptr54 | 0) == ($17 | 0)) {
   $29 = $add$ptr54;
   $sub$ptr$rhs$cast60$pre$phiZZZZ2D = $sub$ptr$rhs$cast52;
  } else {
   $__first$addr$0$i$i74 = $add$ptr54;
   $__last$addr$0$i$i75 = $17;
   while (1) {
    $incdec$ptr$i$i76 = $__last$addr$0$i$i75 + -1 | 0;
    if ($__first$addr$0$i$i74 >>> 0 >= $incdec$ptr$i$i76 >>> 0) break;
    $18 = HEAP8[$__first$addr$0$i$i74 >> 0] | 0;
    HEAP8[$__first$addr$0$i$i74 >> 0] = HEAP8[$incdec$ptr$i$i76 >> 0] | 0;
    HEAP8[$incdec$ptr$i$i76 >> 0] = $18;
    $__first$addr$0$i$i74 = $__first$addr$0$i$i74 + 1 | 0;
    $__last$addr$0$i$i75 = $incdec$ptr$i$i76;
   }
   $29 = HEAP32[$__oe >> 2] | 0;
   $sub$ptr$rhs$cast60$pre$phiZZZZ2D = $sub$ptr$rhs$cast52;
  }
 }
 HEAP32[$__op >> 2] = ($__np | 0) == ($__ne | 0) ? $29 : $__ob + ($__np - $sub$ptr$rhs$cast60$pre$phiZZZZ2D) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 STACKTOP = sp;
 return;
}

function _stbir__calculate_coefficients_upsample($filter, $scale, $in_first_pixel, $in_last_pixel, $in_center_of_out, $contributor, $coefficient_group) {
 $filter = $filter | 0;
 $scale = Math_fround($scale);
 $in_first_pixel = $in_first_pixel | 0;
 $in_last_pixel = $in_last_pixel | 0;
 $in_center_of_out = Math_fround($in_center_of_out);
 $contributor = $contributor | 0;
 $coefficient_group = $coefficient_group | 0;
 var $21 = f0, $35 = f0, $49 = f0, $add31 = f0, $arrayidx57 = 0, $call18 = f0, $coefficient_group$addr = 0, $contributor$addr = 0, $div = f0, $div17 = f0, $div33 = f0, $filter$addr = 0, $filter_scale = 0, $i = 0, $in_center_of_out$addr = 0, $in_first_pixel$addr = 0, $in_last_pixel$addr = 0, $in_pixel_center = 0, $inc = 0, $scale$addr = 0, $sub = 0, $sub16 = f0, $sub32 = f0, $total_filter = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 $filter$addr = sp + 40 | 0;
 $scale$addr = sp + 36 | 0;
 $in_first_pixel$addr = sp + 32 | 0;
 $in_last_pixel$addr = sp + 28 | 0;
 $in_center_of_out$addr = sp + 24 | 0;
 $contributor$addr = sp + 20 | 0;
 $coefficient_group$addr = sp + 16 | 0;
 $i = sp + 12 | 0;
 $total_filter = sp + 8 | 0;
 $filter_scale = sp + 4 | 0;
 $in_pixel_center = sp;
 HEAP32[$filter$addr >> 2] = $filter;
 HEAPF32[$scale$addr >> 2] = $scale;
 HEAP32[$in_first_pixel$addr >> 2] = $in_first_pixel;
 HEAP32[$in_last_pixel$addr >> 2] = $in_last_pixel;
 HEAPF32[$in_center_of_out$addr >> 2] = $in_center_of_out;
 HEAP32[$contributor$addr >> 2] = $contributor;
 HEAP32[$coefficient_group$addr >> 2] = $coefficient_group;
 HEAPF32[$total_filter >> 2] = Math_fround(0.0);
 $sub = (HEAP32[$in_last_pixel$addr >> 2] | 0) - (HEAP32[$in_first_pixel$addr >> 2] | 0) | 0;
 $div = Math_fround(Math_fround(1.0) / Math_fround(HEAPF32[$scale$addr >> 2]));
 if (($sub | 0) > (~~+Math_ceil(+(+Math_fround(Math_fround(FUNCTION_TABLE_ff[HEAP32[6304 + (HEAP32[$filter$addr >> 2] << 3) + 4 >> 2] & 7]($div)) * Math_fround(2.0)))) | 0)) ___assert_fail(36317, 34244, 1043, 36416);
 HEAP32[HEAP32[$contributor$addr >> 2] >> 2] = HEAP32[$in_first_pixel$addr >> 2];
 HEAP32[(HEAP32[$contributor$addr >> 2] | 0) + 4 >> 2] = HEAP32[$in_last_pixel$addr >> 2];
 if ((HEAP32[(HEAP32[$contributor$addr >> 2] | 0) + 4 >> 2] | 0) < (HEAP32[HEAP32[$contributor$addr >> 2] >> 2] | 0)) ___assert_fail(36169, 34244, 1048, 36416);
 HEAP32[$i >> 2] = 0;
 while (1) {
  if ((HEAP32[$i >> 2] | 0) > ((HEAP32[$in_last_pixel$addr >> 2] | 0) - (HEAP32[$in_first_pixel$addr >> 2] | 0) | 0)) break;
  HEAPF32[$in_pixel_center >> 2] = Math_fround(Math_fround((HEAP32[$i >> 2] | 0) + (HEAP32[$in_first_pixel$addr >> 2] | 0) | 0) + Math_fround(.5));
  $21 = Math_fround(HEAPF32[$in_center_of_out$addr >> 2]);
  $sub16 = Math_fround($21 - Math_fround(HEAPF32[$in_pixel_center >> 2]));
  $div17 = Math_fround(Math_fround(1.0) / Math_fround(HEAPF32[$scale$addr >> 2]));
  $call18 = Math_fround(FUNCTION_TABLE_fff[HEAP32[6304 + (HEAP32[$filter$addr >> 2] << 3) >> 2] & 7]($sub16, $div17));
  HEAPF32[(HEAP32[$coefficient_group$addr >> 2] | 0) + (HEAP32[$i >> 2] << 2) >> 2] = $call18;
  if (!(HEAP32[$i >> 2] | 0)) if (Math_fround(HEAPF32[(HEAP32[$coefficient_group$addr >> 2] | 0) + (HEAP32[$i >> 2] << 2) >> 2]) != Math_fround(0.0)) label = 10; else {
   $inc = (HEAP32[$in_first_pixel$addr >> 2] | 0) + 1 | 0;
   HEAP32[$in_first_pixel$addr >> 2] = $inc;
   HEAP32[HEAP32[$contributor$addr >> 2] >> 2] = $inc;
   HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + -1;
  } else label = 10;
  if ((label | 0) == 10) {
   label = 0;
   $35 = Math_fround(HEAPF32[(HEAP32[$coefficient_group$addr >> 2] | 0) + (HEAP32[$i >> 2] << 2) >> 2]);
   HEAPF32[$total_filter >> 2] = Math_fround(Math_fround(HEAPF32[$total_filter >> 2]) + $35);
  }
  HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
 }
 $add31 = Math_fround(Math_fround((HEAP32[$in_last_pixel$addr >> 2] | 0) + 1 | 0) + Math_fround(.5));
 $sub32 = Math_fround($add31 - Math_fround(HEAPF32[$in_center_of_out$addr >> 2]));
 $div33 = Math_fround(Math_fround(1.0) / Math_fround(HEAPF32[$scale$addr >> 2]));
 if (!(Math_fround(FUNCTION_TABLE_fff[HEAP32[6304 + (HEAP32[$filter$addr >> 2] << 3) >> 2] & 7]($sub32, $div33)) == Math_fround(0.0))) ___assert_fail(36455, 34244, 1066, 36416);
 if (!(+Math_fround(HEAPF32[$total_filter >> 2]) > .9)) ___assert_fail(36563, 34244, 1068, 36416);
 if (!(Math_fround(HEAPF32[$total_filter >> 2]) < Math_fround(1.10000002))) ___assert_fail(36582, 34244, 1069, 36416);
 HEAPF32[$filter_scale >> 2] = Math_fround(Math_fround(1.0) / Math_fround(HEAPF32[$total_filter >> 2]));
 HEAP32[$i >> 2] = 0;
 while (1) {
  if ((HEAP32[$i >> 2] | 0) > ((HEAP32[$in_last_pixel$addr >> 2] | 0) - (HEAP32[$in_first_pixel$addr >> 2] | 0) | 0)) break;
  $49 = Math_fround(HEAPF32[$filter_scale >> 2]);
  $arrayidx57 = (HEAP32[$coefficient_group$addr >> 2] | 0) + (HEAP32[$i >> 2] << 2) | 0;
  HEAPF32[$arrayidx57 >> 2] = Math_fround(Math_fround(HEAPF32[$arrayidx57 >> 2]) * $49);
  HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
 }
 HEAP32[$i >> 2] = (HEAP32[$in_last_pixel$addr >> 2] | 0) - (HEAP32[$in_first_pixel$addr >> 2] | 0);
 while (1) {
  if ((HEAP32[$i >> 2] | 0) < 0) {
   label = 25;
   break;
  }
  if (Math_fround(HEAPF32[(HEAP32[$coefficient_group$addr >> 2] | 0) + (HEAP32[$i >> 2] << 2) >> 2]) != Math_fround(0.0)) {
   label = 25;
   break;
  }
  HEAP32[(HEAP32[$contributor$addr >> 2] | 0) + 4 >> 2] = (HEAP32[HEAP32[$contributor$addr >> 2] >> 2] | 0) + (HEAP32[$i >> 2] | 0) - 1;
  HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + -1;
 }
 if ((label | 0) == 25) {
  STACKTOP = sp;
  return;
 }
}

function _LoadImage($agg$result, $fileName) {
 $agg$result = $agg$result | 0;
 $fileName = $fileName | 0;
 var $20 = 0, $21 = 0, $22 = 0, $24 = 0, $25 = 0, $26 = 0, $call50 = 0, $call53 = 0, $call57 = 0, $fileName$addr = 0, $imFile = 0, $imFile26 = 0, $image = 0, $image$byval_copy = 0, $imgBpp = 0, $imgBpp25 = 0, $imgHeight = 0, $imgWidth = 0, $tmp = 0, $tmp55 = 0, $tmp59 = 0, $vararg_buffer1 = 0, $vararg_buffer4 = 0, $vararg_buffer9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(160);
 $image$byval_copy = sp + 32 | 0;
 $vararg_buffer9 = sp + 24 | 0;
 $vararg_buffer4 = sp + 8 | 0;
 $vararg_buffer1 = sp;
 $fileName$addr = sp + 156 | 0;
 $image = sp + 136 | 0;
 $imgWidth = sp + 132 | 0;
 $imgHeight = sp + 128 | 0;
 $imgBpp = sp + 124 | 0;
 $imFile = sp + 120 | 0;
 $imgBpp25 = sp + 116 | 0;
 $imFile26 = sp + 112 | 0;
 $tmp = sp + 92 | 0;
 $tmp55 = sp + 72 | 0;
 $tmp59 = sp + 52 | 0;
 HEAP32[$fileName$addr >> 2] = $fileName;
 HEAP32[$image >> 2] = 0;
 HEAP32[$image + 4 >> 2] = 0;
 HEAP32[$image + 8 >> 2] = 0;
 HEAP32[$image + 12 >> 2] = 0;
 HEAP32[$image + 16 >> 2] = 0;
 do if (_IsFileExtension(HEAP32[$fileName$addr >> 2] | 0, 36808) | 0) {
  HEAP32[$imgWidth >> 2] = 0;
  HEAP32[$imgHeight >> 2] = 0;
  HEAP32[$imgBpp >> 2] = 0;
  HEAP32[$imFile >> 2] = _fopen(HEAP32[$fileName$addr >> 2] | 0, 32752) | 0;
  if (HEAP32[$imFile >> 2] | 0) {
   HEAP32[$image >> 2] = _stbi_load_from_file(HEAP32[$imFile >> 2] | 0, $imgWidth, $imgHeight, $imgBpp, 0) | 0;
   _fclose(HEAP32[$imFile >> 2] | 0) | 0;
   HEAP32[$image + 4 >> 2] = HEAP32[$imgWidth >> 2];
   HEAP32[$image + 8 >> 2] = HEAP32[$imgHeight >> 2];
   HEAP32[$image + 12 >> 2] = 1;
   if ((HEAP32[$imgBpp >> 2] | 0) == 1) {
    HEAP32[$image + 16 >> 2] = 1;
    break;
   }
   if ((HEAP32[$imgBpp >> 2] | 0) == 2) {
    HEAP32[$image + 16 >> 2] = 2;
    break;
   }
   if ((HEAP32[$imgBpp >> 2] | 0) == 3) {
    HEAP32[$image + 16 >> 2] = 4;
    break;
   }
   if ((HEAP32[$imgBpp >> 2] | 0) == 4) HEAP32[$image + 16 >> 2] = 7;
  }
 } else if (_IsFileExtension(HEAP32[$fileName$addr >> 2] | 0, 36813) | 0) {
  HEAP32[$imgBpp25 >> 2] = 0;
  HEAP32[$imFile26 >> 2] = _fopen(HEAP32[$fileName$addr >> 2] | 0, 32752) | 0;
  HEAP32[$image >> 2] = _stbi_loadf_from_file(HEAP32[$imFile26 >> 2] | 0, $image + 4 | 0, $image + 8 | 0, $imgBpp25, 0) | 0;
  _fclose(HEAP32[$imFile26 >> 2] | 0) | 0;
  HEAP32[$image + 12 >> 2] = 1;
  if ((HEAP32[$imgBpp25 >> 2] | 0) == 1) {
   HEAP32[$image + 16 >> 2] = 8;
   break;
  }
  if ((HEAP32[$imgBpp25 >> 2] | 0) == 3) {
   HEAP32[$image + 16 >> 2] = 9;
   break;
  }
  if ((HEAP32[$imgBpp25 >> 2] | 0) == 4) {
   HEAP32[$image + 16 >> 2] = 10;
   break;
  } else {
   HEAP32[$image$byval_copy >> 2] = HEAP32[$fileName$addr >> 2];
   _TraceLog(4, 36818, $image$byval_copy);
   HEAP32[$image$byval_copy >> 2] = HEAP32[$image >> 2];
   HEAP32[$image$byval_copy + 4 >> 2] = HEAP32[$image + 4 >> 2];
   HEAP32[$image$byval_copy + 8 >> 2] = HEAP32[$image + 8 >> 2];
   HEAP32[$image$byval_copy + 12 >> 2] = HEAP32[$image + 12 >> 2];
   HEAP32[$image$byval_copy + 16 >> 2] = HEAP32[$image + 16 >> 2];
   _UnloadImage($image$byval_copy);
   break;
  }
 } else {
  $call50 = _IsFileExtension(HEAP32[$fileName$addr >> 2] | 0, 36854) | 0;
  $20 = HEAP32[$fileName$addr >> 2] | 0;
  if ($call50) {
   _LoadDDS($tmp, $20);
   HEAP32[$image >> 2] = HEAP32[$tmp >> 2];
   HEAP32[$image + 4 >> 2] = HEAP32[$tmp + 4 >> 2];
   HEAP32[$image + 8 >> 2] = HEAP32[$tmp + 8 >> 2];
   HEAP32[$image + 12 >> 2] = HEAP32[$tmp + 12 >> 2];
   HEAP32[$image + 16 >> 2] = HEAP32[$tmp + 16 >> 2];
   break;
  }
  $call53 = _IsFileExtension($20, 36859) | 0;
  $21 = HEAP32[$fileName$addr >> 2] | 0;
  if ($call53) {
   _LoadKTX($tmp55, $21);
   HEAP32[$image >> 2] = HEAP32[$tmp55 >> 2];
   HEAP32[$image + 4 >> 2] = HEAP32[$tmp55 + 4 >> 2];
   HEAP32[$image + 8 >> 2] = HEAP32[$tmp55 + 8 >> 2];
   HEAP32[$image + 12 >> 2] = HEAP32[$tmp55 + 12 >> 2];
   HEAP32[$image + 16 >> 2] = HEAP32[$tmp55 + 16 >> 2];
   break;
  }
  $call57 = _IsFileExtension($21, 36864) | 0;
  $22 = HEAP32[$fileName$addr >> 2] | 0;
  if ($call57) {
   _LoadASTC($tmp59, $22);
   HEAP32[$image >> 2] = HEAP32[$tmp59 >> 2];
   HEAP32[$image + 4 >> 2] = HEAP32[$tmp59 + 4 >> 2];
   HEAP32[$image + 8 >> 2] = HEAP32[$tmp59 + 8 >> 2];
   HEAP32[$image + 12 >> 2] = HEAP32[$tmp59 + 12 >> 2];
   HEAP32[$image + 16 >> 2] = HEAP32[$tmp59 + 16 >> 2];
   break;
  } else {
   HEAP32[$vararg_buffer1 >> 2] = $22;
   _TraceLog(4, 36818, $vararg_buffer1);
   break;
  }
 } while (0);
 $24 = HEAP32[$fileName$addr >> 2] | 0;
 if (HEAP32[$image >> 2] | 0) {
  $25 = HEAP32[$image + 4 >> 2] | 0;
  $26 = HEAP32[$image + 8 >> 2] | 0;
  HEAP32[$vararg_buffer4 >> 2] = $24;
  HEAP32[$vararg_buffer4 + 4 >> 2] = $25;
  HEAP32[$vararg_buffer4 + 8 >> 2] = $26;
  _TraceLog(3, 36870, $vararg_buffer4);
  HEAP32[$agg$result >> 2] = HEAP32[$image >> 2];
  HEAP32[$agg$result + 4 >> 2] = HEAP32[$image + 4 >> 2];
  HEAP32[$agg$result + 8 >> 2] = HEAP32[$image + 8 >> 2];
  HEAP32[$agg$result + 12 >> 2] = HEAP32[$image + 12 >> 2];
  HEAP32[$agg$result + 16 >> 2] = HEAP32[$image + 16 >> 2];
  STACKTOP = sp;
  return;
 } else {
  HEAP32[$vararg_buffer9 >> 2] = $24;
  _TraceLog(4, 36909, $vararg_buffer9);
  HEAP32[$agg$result >> 2] = HEAP32[$image >> 2];
  HEAP32[$agg$result + 4 >> 2] = HEAP32[$image + 4 >> 2];
  HEAP32[$agg$result + 8 >> 2] = HEAP32[$image + 8 >> 2];
  HEAP32[$agg$result + 12 >> 2] = HEAP32[$image + 12 >> 2];
  HEAP32[$agg$result + 16 >> 2] = HEAP32[$image + 16 >> 2];
  STACKTOP = sp;
  return;
 }
}

function _GetNextCodepoint($text, $bytesProcessed) {
 $text = $text | 0;
 $bytesProcessed = $bytesProcessed | 0;
 var $81 = 0, $bytesProcessed$addr = 0, $code = 0, $octet = 0, $octet1 = 0, $octet129 = 0, $octet197 = 0, $octet2 = 0, $octet299 = 0, $octet3 = 0, $retval = 0, $text$addr = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $retval = sp + 16 | 0;
 $text$addr = sp + 12 | 0;
 $bytesProcessed$addr = sp + 8 | 0;
 $code = sp + 4 | 0;
 $octet = sp;
 $octet1 = sp + 25 | 0;
 $octet129 = sp + 24 | 0;
 $octet2 = sp + 23 | 0;
 $octet197 = sp + 22 | 0;
 $octet299 = sp + 21 | 0;
 $octet3 = sp + 20 | 0;
 HEAP32[$text$addr >> 2] = $text;
 HEAP32[$bytesProcessed$addr >> 2] = $bytesProcessed;
 HEAP32[$code >> 2] = 63;
 HEAP32[$octet >> 2] = HEAPU8[HEAP32[$text$addr >> 2] >> 0];
 HEAP32[HEAP32[$bytesProcessed$addr >> 2] >> 2] = 1;
 L1 : do if ((HEAP32[$octet >> 2] | 0) <= 127) HEAP32[$code >> 2] = HEAP8[HEAP32[$text$addr >> 2] >> 0]; else {
  if ((HEAP32[$octet >> 2] & 224 | 0) == 192) {
   HEAP8[$octet1 >> 0] = HEAP8[(HEAP32[$text$addr >> 2] | 0) + 1 >> 0] | 0;
   if (HEAPU8[$octet1 >> 0] | 0) if ((HEAPU8[$octet1 >> 0] >> 6 | 0) == 2) {
    if (!((HEAP32[$octet >> 2] | 0) >= 194 & (HEAP32[$octet >> 2] | 0) <= 223)) break;
    HEAP32[$code >> 2] = (HEAP32[$octet >> 2] & 31) << 6 | HEAPU8[$octet1 >> 0] & 63;
    HEAP32[HEAP32[$bytesProcessed$addr >> 2] >> 2] = 2;
    break;
   }
   HEAP32[HEAP32[$bytesProcessed$addr >> 2] >> 2] = 2;
   HEAP32[$retval >> 2] = HEAP32[$code >> 2];
   $81 = HEAP32[$retval >> 2] | 0;
   STACKTOP = sp;
   return $81 | 0;
  }
  if ((HEAP32[$octet >> 2] & 240 | 0) == 224) {
   HEAP8[$octet129 >> 0] = HEAP8[(HEAP32[$text$addr >> 2] | 0) + 1 >> 0] | 0;
   HEAP8[$octet2 >> 0] = 0;
   if (HEAPU8[$octet129 >> 0] | 0) if ((HEAPU8[$octet129 >> 0] >> 6 | 0) == 2) {
    HEAP8[$octet2 >> 0] = HEAP8[(HEAP32[$text$addr >> 2] | 0) + 2 >> 0] | 0;
    if (HEAPU8[$octet2 >> 0] | 0) if ((HEAPU8[$octet2 >> 0] >> 6 | 0) == 2) {
     if ((HEAP32[$octet >> 2] | 0) == 224) {
      if ((HEAPU8[$octet129 >> 0] | 0) >= 160) if ((HEAPU8[$octet129 >> 0] | 0) <= 191) label = 19;
     } else label = 19;
     do if ((label | 0) == 19) {
      if ((HEAP32[$octet >> 2] | 0) == 237) {
       if ((HEAPU8[$octet129 >> 0] | 0) < 128) break;
       if ((HEAPU8[$octet129 >> 0] | 0) > 159) break;
      }
      if ((HEAP32[$octet >> 2] | 0) < 224) break L1;
      HEAP32[$code >> 2] = (HEAP32[$octet >> 2] & 15) << 12 | (HEAPU8[$octet129 >> 0] & 63) << 6 | HEAPU8[$octet2 >> 0] & 63;
      HEAP32[HEAP32[$bytesProcessed$addr >> 2] >> 2] = 3;
      break L1;
     } while (0);
     HEAP32[HEAP32[$bytesProcessed$addr >> 2] >> 2] = 2;
     HEAP32[$retval >> 2] = HEAP32[$code >> 2];
     $81 = HEAP32[$retval >> 2] | 0;
     STACKTOP = sp;
     return $81 | 0;
    }
    HEAP32[HEAP32[$bytesProcessed$addr >> 2] >> 2] = 3;
    HEAP32[$retval >> 2] = HEAP32[$code >> 2];
    $81 = HEAP32[$retval >> 2] | 0;
    STACKTOP = sp;
    return $81 | 0;
   }
   HEAP32[HEAP32[$bytesProcessed$addr >> 2] >> 2] = 2;
   HEAP32[$retval >> 2] = HEAP32[$code >> 2];
   $81 = HEAP32[$retval >> 2] | 0;
   STACKTOP = sp;
   return $81 | 0;
  }
  if ((HEAP32[$octet >> 2] & 248 | 0) == 240) {
   if ((HEAP32[$octet >> 2] | 0) > 244) {
    HEAP32[$retval >> 2] = HEAP32[$code >> 2];
    $81 = HEAP32[$retval >> 2] | 0;
    STACKTOP = sp;
    return $81 | 0;
   }
   HEAP8[$octet197 >> 0] = HEAP8[(HEAP32[$text$addr >> 2] | 0) + 1 >> 0] | 0;
   HEAP8[$octet299 >> 0] = 0;
   HEAP8[$octet3 >> 0] = 0;
   if (HEAPU8[$octet197 >> 0] | 0) if ((HEAPU8[$octet197 >> 0] >> 6 | 0) == 2) {
    HEAP8[$octet299 >> 0] = HEAP8[(HEAP32[$text$addr >> 2] | 0) + 2 >> 0] | 0;
    if (HEAPU8[$octet299 >> 0] | 0) if ((HEAPU8[$octet299 >> 0] >> 6 | 0) == 2) {
     HEAP8[$octet3 >> 0] = HEAP8[(HEAP32[$text$addr >> 2] | 0) + 3 >> 0] | 0;
     if (HEAPU8[$octet3 >> 0] | 0) if ((HEAPU8[$octet3 >> 0] >> 6 | 0) == 2) {
      if ((HEAP32[$octet >> 2] | 0) == 240) {
       if ((HEAPU8[$octet197 >> 0] | 0) >= 144) if ((HEAPU8[$octet197 >> 0] | 0) <= 191) label = 40;
      } else label = 40;
      do if ((label | 0) == 40) {
       if ((HEAP32[$octet >> 2] | 0) == 244) {
        if ((HEAPU8[$octet197 >> 0] | 0) < 128) break;
        if ((HEAPU8[$octet197 >> 0] | 0) > 143) break;
       }
       if ((HEAP32[$octet >> 2] | 0) < 240) break L1;
       HEAP32[$code >> 2] = (HEAP32[$octet >> 2] & 7) << 18 | (HEAPU8[$octet197 >> 0] & 63) << 12 | (HEAPU8[$octet299 >> 0] & 63) << 6 | HEAPU8[$octet3 >> 0] & 63;
       HEAP32[HEAP32[$bytesProcessed$addr >> 2] >> 2] = 4;
       break L1;
      } while (0);
      HEAP32[HEAP32[$bytesProcessed$addr >> 2] >> 2] = 2;
      HEAP32[$retval >> 2] = HEAP32[$code >> 2];
      $81 = HEAP32[$retval >> 2] | 0;
      STACKTOP = sp;
      return $81 | 0;
     }
     HEAP32[HEAP32[$bytesProcessed$addr >> 2] >> 2] = 4;
     HEAP32[$retval >> 2] = HEAP32[$code >> 2];
     $81 = HEAP32[$retval >> 2] | 0;
     STACKTOP = sp;
     return $81 | 0;
    }
    HEAP32[HEAP32[$bytesProcessed$addr >> 2] >> 2] = 3;
    HEAP32[$retval >> 2] = HEAP32[$code >> 2];
    $81 = HEAP32[$retval >> 2] | 0;
    STACKTOP = sp;
    return $81 | 0;
   }
   HEAP32[HEAP32[$bytesProcessed$addr >> 2] >> 2] = 2;
   HEAP32[$retval >> 2] = HEAP32[$code >> 2];
   $81 = HEAP32[$retval >> 2] | 0;
   STACKTOP = sp;
   return $81 | 0;
  }
 } while (0);
 if ((HEAP32[$code >> 2] | 0) > 1114111) HEAP32[$code >> 2] = 63;
 HEAP32[$retval >> 2] = HEAP32[$code >> 2];
 $81 = HEAP32[$retval >> 2] | 0;
 STACKTOP = sp;
 return $81 | 0;
}

function __ZNSt3__26locale5__impC2Em($this, $refs) {
 $this = $this | 0;
 $refs = $refs | 0;
 var $facets_ = 0, $name_ = 0;
 HEAP32[$this + 4 >> 2] = $refs + -1;
 HEAP32[$this >> 2] = 21372;
 $facets_ = $this + 8 | 0;
 __ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEEC2Em($facets_, 28);
 $name_ = $this + 144 | 0;
 HEAP32[$name_ >> 2] = 0;
 HEAP32[$name_ + 4 >> 2] = 0;
 HEAP32[$name_ + 8 >> 2] = 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcm($name_, 42854, __ZNSt3__211char_traitsIcE6lengthEPKc(42854) | 0);
 HEAP32[$this + 12 >> 2] = HEAP32[$facets_ >> 2];
 __ZNSt3__212_GLOBAL__N_14makeINS_7collateIcEEjEERT_T0_();
 __ZNSt3__26locale5__imp7installINS_7collateIcEEEEvPT_($this, 58648);
 __ZNSt3__212_GLOBAL__N_14makeINS_7collateIwEEjEERT_T0_();
 __ZNSt3__26locale5__imp7installINS_7collateIwEEEEvPT_($this, 58656);
 __ZNSt3__212_GLOBAL__N_14makeINS_5ctypeIcEEDnbjEERT_T0_T1_T2_();
 __ZNSt3__26locale5__imp7installINS_5ctypeIcEEEEvPT_($this, 58664);
 __ZNSt3__212_GLOBAL__N_14makeINS_5ctypeIwEEjEERT_T0_();
 __ZNSt3__26locale5__imp7installINS_5ctypeIwEEEEvPT_($this, 58680);
 __ZNSt3__212_GLOBAL__N_14makeINS_7codecvtIcc11__mbstate_tEEjEERT_T0_();
 __ZNSt3__26locale5__imp7installINS_7codecvtIcc11__mbstate_tEEEEvPT_($this, 58688);
 __ZNSt3__212_GLOBAL__N_14makeINS_7codecvtIwc11__mbstate_tEEjEERT_T0_();
 __ZNSt3__26locale5__imp7installINS_7codecvtIwc11__mbstate_tEEEEvPT_($this, 58696);
 __ZNSt3__212_GLOBAL__N_14makeINS_7codecvtIDsc11__mbstate_tEEjEERT_T0_();
 __ZNSt3__26locale5__imp7installINS_7codecvtIDsc11__mbstate_tEEEEvPT_($this, 58712);
 __ZNSt3__212_GLOBAL__N_14makeINS_7codecvtIDic11__mbstate_tEEjEERT_T0_();
 __ZNSt3__26locale5__imp7installINS_7codecvtIDic11__mbstate_tEEEEvPT_($this, 58720);
 __ZNSt3__212_GLOBAL__N_14makeINS_8numpunctIcEEjEERT_T0_();
 __ZNSt3__26locale5__imp7installINS_8numpunctIcEEEEvPT_($this, 58728);
 __ZNSt3__212_GLOBAL__N_14makeINS_8numpunctIwEEjEERT_T0_();
 __ZNSt3__26locale5__imp7installINS_8numpunctIwEEEEvPT_($this, 58752);
 __ZNSt3__212_GLOBAL__N_14makeINS_7num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_();
 __ZNSt3__26locale5__imp7installINS_7num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($this, 58784);
 __ZNSt3__212_GLOBAL__N_14makeINS_7num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_();
 __ZNSt3__26locale5__imp7installINS_7num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($this, 58792);
 __ZNSt3__212_GLOBAL__N_14makeINS_7num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_();
 __ZNSt3__26locale5__imp7installINS_7num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($this, 58800);
 __ZNSt3__212_GLOBAL__N_14makeINS_7num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_();
 __ZNSt3__26locale5__imp7installINS_7num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($this, 58808);
 __ZNSt3__212_GLOBAL__N_14makeINS_10moneypunctIcLb0EEEjEERT_T0_();
 __ZNSt3__26locale5__imp7installINS_10moneypunctIcLb0EEEEEvPT_($this, 58816);
 __ZNSt3__212_GLOBAL__N_14makeINS_10moneypunctIcLb1EEEjEERT_T0_();
 __ZNSt3__26locale5__imp7installINS_10moneypunctIcLb1EEEEEvPT_($this, 58824);
 __ZNSt3__212_GLOBAL__N_14makeINS_10moneypunctIwLb0EEEjEERT_T0_();
 __ZNSt3__26locale5__imp7installINS_10moneypunctIwLb0EEEEEvPT_($this, 58832);
 __ZNSt3__212_GLOBAL__N_14makeINS_10moneypunctIwLb1EEEjEERT_T0_();
 __ZNSt3__26locale5__imp7installINS_10moneypunctIwLb1EEEEEvPT_($this, 58840);
 __ZNSt3__212_GLOBAL__N_14makeINS_9money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_();
 __ZNSt3__26locale5__imp7installINS_9money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($this, 58848);
 __ZNSt3__212_GLOBAL__N_14makeINS_9money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_();
 __ZNSt3__26locale5__imp7installINS_9money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($this, 58856);
 __ZNSt3__212_GLOBAL__N_14makeINS_9money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_();
 __ZNSt3__26locale5__imp7installINS_9money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($this, 58864);
 __ZNSt3__212_GLOBAL__N_14makeINS_9money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_();
 __ZNSt3__26locale5__imp7installINS_9money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($this, 58872);
 __ZNSt3__212_GLOBAL__N_14makeINS_8time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_();
 __ZNSt3__26locale5__imp7installINS_8time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($this, 58880);
 __ZNSt3__212_GLOBAL__N_14makeINS_8time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_();
 __ZNSt3__26locale5__imp7installINS_8time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($this, 58896);
 __ZNSt3__212_GLOBAL__N_14makeINS_8time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_();
 __ZNSt3__26locale5__imp7installINS_8time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($this, 58912);
 __ZNSt3__212_GLOBAL__N_14makeINS_8time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_();
 __ZNSt3__26locale5__imp7installINS_8time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($this, 58928);
 __ZNSt3__212_GLOBAL__N_14makeINS_8messagesIcEEjEERT_T0_();
 __ZNSt3__26locale5__imp7installINS_8messagesIcEEEEvPT_($this, 58944);
 __ZNSt3__212_GLOBAL__N_14makeINS_8messagesIwEEjEERT_T0_();
 __ZNSt3__26locale5__imp7installINS_8messagesIwEEEEvPT_($this, 58952);
 return;
}

function _ImageCrop($image, $crop) {
 $image = $image | 0;
 $crop = $crop | 0;
 var $$byval_copy1 = 0, $10 = f0, $12 = f0, $19 = f0, $26 = f0, $29 = f0, $32 = 0, $37 = f0, $41 = f0, $59 = 0, $60 = 0, $7 = f0, $add19 = f0, $add31 = f0, $arrayidx = 0, $arrayidx91 = 0, $conv25 = f0, $conv38 = f0, $conv55 = 0, $conv97 = 0, $cropPixels = 0, $format = 0, $height13 = 0, $i = 0, $image$addr = 0, $j = 0, $mul83 = 0, $mul89 = 0, $pixels = 0, $sub80 = 0, $tmp = 0, $vararg_buffer = 0, $width7 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(80);
 $$byval_copy1 = sp + 48 | 0;
 $vararg_buffer = sp;
 $image$addr = sp + 44 | 0;
 $pixels = sp + 40 | 0;
 $cropPixels = sp + 36 | 0;
 $j = sp + 32 | 0;
 $i = sp + 28 | 0;
 $format = sp + 24 | 0;
 $tmp = sp + 4 | 0;
 HEAP32[$image$addr >> 2] = $image;
 if (!(HEAP32[HEAP32[$image$addr >> 2] >> 2] | 0)) {
  STACKTOP = sp;
  return;
 }
 if (!(HEAP32[(HEAP32[$image$addr >> 2] | 0) + 4 >> 2] | 0)) {
  STACKTOP = sp;
  return;
 }
 if (!(HEAP32[(HEAP32[$image$addr >> 2] | 0) + 8 >> 2] | 0)) {
  STACKTOP = sp;
  return;
 }
 if (Math_fround(HEAPF32[$crop >> 2]) < Math_fround(0.0)) {
  $7 = Math_fround(HEAPF32[$crop >> 2]);
  $width7 = $crop + 8 | 0;
  HEAPF32[$width7 >> 2] = Math_fround(Math_fround(HEAPF32[$width7 >> 2]) + $7);
  HEAPF32[$crop >> 2] = Math_fround(0.0);
 }
 if (Math_fround(HEAPF32[$crop + 4 >> 2]) < Math_fround(0.0)) {
  $10 = Math_fround(HEAPF32[$crop + 4 >> 2]);
  $height13 = $crop + 12 | 0;
  HEAPF32[$height13 >> 2] = Math_fround(Math_fround(HEAPF32[$height13 >> 2]) + $10);
  HEAPF32[$crop + 4 >> 2] = Math_fround(0.0);
 }
 $12 = Math_fround(HEAPF32[$crop >> 2]);
 $add19 = Math_fround($12 + Math_fround(HEAPF32[$crop + 8 >> 2]));
 if ($add19 > Math_fround(HEAP32[(HEAP32[$image$addr >> 2] | 0) + 4 >> 2] | 0)) {
  $conv25 = Math_fround(HEAP32[(HEAP32[$image$addr >> 2] | 0) + 4 >> 2] | 0);
  HEAPF32[$crop + 8 >> 2] = Math_fround($conv25 - Math_fround(HEAPF32[$crop >> 2]));
 }
 $19 = Math_fround(HEAPF32[$crop + 4 >> 2]);
 $add31 = Math_fround($19 + Math_fround(HEAPF32[$crop + 12 >> 2]));
 if ($add31 > Math_fround(HEAP32[(HEAP32[$image$addr >> 2] | 0) + 8 >> 2] | 0)) {
  $conv38 = Math_fround(HEAP32[(HEAP32[$image$addr >> 2] | 0) + 8 >> 2] | 0);
  HEAPF32[$crop + 12 >> 2] = Math_fround($conv38 - Math_fround(HEAPF32[$crop + 4 >> 2]));
 }
 $26 = Math_fround(HEAPF32[$crop >> 2]);
 if ($26 < Math_fround(HEAP32[(HEAP32[$image$addr >> 2] | 0) + 4 >> 2] | 0)) {
  $29 = Math_fround(HEAPF32[$crop + 4 >> 2]);
  if ($29 < Math_fround(HEAP32[(HEAP32[$image$addr >> 2] | 0) + 8 >> 2] | 0)) {
   $32 = HEAP32[$image$addr >> 2] | 0;
   HEAP32[$$byval_copy1 >> 2] = HEAP32[$32 >> 2];
   HEAP32[$$byval_copy1 + 4 >> 2] = HEAP32[$32 + 4 >> 2];
   HEAP32[$$byval_copy1 + 8 >> 2] = HEAP32[$32 + 8 >> 2];
   HEAP32[$$byval_copy1 + 12 >> 2] = HEAP32[$32 + 12 >> 2];
   HEAP32[$$byval_copy1 + 16 >> 2] = HEAP32[$32 + 16 >> 2];
   HEAP32[$pixels >> 2] = _GetImageData($$byval_copy1) | 0;
   $conv55 = ~~Math_fround(HEAPF32[$crop + 8 >> 2]);
   HEAP32[$cropPixels >> 2] = _malloc((Math_imul($conv55, ~~Math_fround(HEAPF32[$crop + 12 >> 2])) | 0) << 2) | 0;
   HEAP32[$j >> 2] = ~~Math_fround(HEAPF32[$crop + 4 >> 2]);
   while (1) {
    $37 = Math_fround(HEAPF32[$crop + 4 >> 2]);
    if ((HEAP32[$j >> 2] | 0) >= (~~Math_fround($37 + Math_fround(HEAPF32[$crop + 12 >> 2])) | 0)) break;
    HEAP32[$i >> 2] = ~~Math_fround(HEAPF32[$crop >> 2]);
    while (1) {
     $41 = Math_fround(HEAPF32[$crop >> 2]);
     if ((HEAP32[$i >> 2] | 0) >= (~~Math_fround($41 + Math_fround(HEAPF32[$crop + 8 >> 2])) | 0)) break;
     $sub80 = (HEAP32[$j >> 2] | 0) - ~~Math_fround(HEAPF32[$crop + 4 >> 2]) | 0;
     $mul83 = Math_imul($sub80, ~~Math_fround(HEAPF32[$crop + 8 >> 2])) | 0;
     $arrayidx = (HEAP32[$cropPixels >> 2] | 0) + ($mul83 + ((HEAP32[$i >> 2] | 0) - ~~Math_fround(HEAPF32[$crop >> 2])) << 2) | 0;
     $mul89 = Math_imul(HEAP32[$j >> 2] | 0, HEAP32[(HEAP32[$image$addr >> 2] | 0) + 4 >> 2] | 0) | 0;
     $arrayidx91 = (HEAP32[$pixels >> 2] | 0) + ($mul89 + (HEAP32[$i >> 2] | 0) << 2) | 0;
     HEAP8[$arrayidx >> 0] = HEAP8[$arrayidx91 >> 0] | 0;
     HEAP8[$arrayidx + 1 >> 0] = HEAP8[$arrayidx91 + 1 >> 0] | 0;
     HEAP8[$arrayidx + 2 >> 0] = HEAP8[$arrayidx91 + 2 >> 0] | 0;
     HEAP8[$arrayidx + 3 >> 0] = HEAP8[$arrayidx91 + 3 >> 0] | 0;
     HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
    }
    HEAP32[$j >> 2] = (HEAP32[$j >> 2] | 0) + 1;
   }
   _free(HEAP32[$pixels >> 2] | 0);
   HEAP32[$format >> 2] = HEAP32[(HEAP32[$image$addr >> 2] | 0) + 16 >> 2];
   $59 = HEAP32[$image$addr >> 2] | 0;
   HEAP32[$$byval_copy1 >> 2] = HEAP32[$59 >> 2];
   HEAP32[$$byval_copy1 + 4 >> 2] = HEAP32[$59 + 4 >> 2];
   HEAP32[$$byval_copy1 + 8 >> 2] = HEAP32[$59 + 8 >> 2];
   HEAP32[$$byval_copy1 + 12 >> 2] = HEAP32[$59 + 12 >> 2];
   HEAP32[$$byval_copy1 + 16 >> 2] = HEAP32[$59 + 16 >> 2];
   _UnloadImage($$byval_copy1);
   $60 = HEAP32[$image$addr >> 2] | 0;
   $conv97 = ~~Math_fround(HEAPF32[$crop + 8 >> 2]);
   _LoadImageEx($tmp, HEAP32[$cropPixels >> 2] | 0, $conv97, ~~Math_fround(HEAPF32[$crop + 12 >> 2]));
   HEAP32[$60 >> 2] = HEAP32[$tmp >> 2];
   HEAP32[$60 + 4 >> 2] = HEAP32[$tmp + 4 >> 2];
   HEAP32[$60 + 8 >> 2] = HEAP32[$tmp + 8 >> 2];
   HEAP32[$60 + 12 >> 2] = HEAP32[$tmp + 12 >> 2];
   HEAP32[$60 + 16 >> 2] = HEAP32[$tmp + 16 >> 2];
   _free(HEAP32[$cropPixels >> 2] | 0);
   _ImageFormat(HEAP32[$image$addr >> 2] | 0, HEAP32[$format >> 2] | 0);
   STACKTOP = sp;
   return;
  }
 }
 _TraceLog(4, 37922, $vararg_buffer);
 STACKTOP = sp;
 return;
}

function __ZNKSt3__29money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwe($this, $__s, $__intl, $__iob, $__fl, $__units) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__intl = $__intl | 0;
 $__iob = $__iob | 0;
 $__fl = $__fl | 0;
 $__units = +$__units;
 var $0 = 0, $10 = 0, $13 = 0, $16 = 0, $19 = 0, $26 = 0, $27 = 0, $3 = 0, $7 = 0, $8 = 0, $__bb = 0, $__buf = 0, $__db$0 = 0, $__digits = 0, $__dp = 0, $__fd = 0, $__grp = 0, $__hd$sroa$0$0 = 0, $__hn$sroa$0$0 = 0, $__hw$sroa$0$0 = 0, $__i$0$i$i = 0, $__i$0$i$i35 = 0, $__i$0$i$i42 = 0, $__loc = 0, $__mb$0 = 0, $__mbuf = 0, $__me = 0, $__mi = 0, $__n$0 = 0, $__pat = 0, $__sn = 0, $__sym = 0, $__ts = 0, $add31$sink = 0, $add33 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call = 0, $call$i = 0, $call37 = 0, $call4 = 0, $call46 = 0, $call5 = 0, $call8 = 0, $cond$i75$sink = 0, $cond$i83$sink = 0, $vararg_buffer1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 992 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(992);
 $agg$tmp$byval_copy = sp + 912 | 0;
 $vararg_buffer1 = sp + 904 | 0;
 $__buf = sp + 800 | 0;
 $__bb = sp + 984 | 0;
 $__digits = sp + 400 | 0;
 $__loc = sp + 980 | 0;
 $__pat = sp + 988 | 0;
 $__dp = sp + 976 | 0;
 $__ts = sp + 972 | 0;
 $__grp = sp + 960 | 0;
 $__sym = sp + 948 | 0;
 $__sn = sp + 936 | 0;
 $__fd = sp + 932 | 0;
 $__mbuf = sp;
 $__mi = sp + 928 | 0;
 $__me = sp + 920 | 0;
 $agg$tmp = sp + 924 | 0;
 HEAP32[$__bb >> 2] = $__buf;
 HEAPF64[$agg$tmp$byval_copy >> 3] = $__units;
 $call = _snprintf($__buf, 100, 44338, $agg$tmp$byval_copy) | 0;
 if ($call >>> 0 > 99) {
  $call4 = __ZNSt3__26__clocEv() | 0;
  HEAPF64[$vararg_buffer1 >> 3] = $__units;
  $call5 = __ZNSt3__219__libcpp_asprintf_lEPPcP15__locale_structPKcz($__bb, $call4, 44338, $vararg_buffer1) | 0;
  $0 = HEAP32[$__bb >> 2] | 0;
  if (!$0) __ZSt17__throw_bad_allocv();
  $call8 = _malloc($call5 << 2) | 0;
  if (!$call8) __ZSt17__throw_bad_allocv(); else {
   $__db$0 = $call8;
   $__hd$sroa$0$0 = $call8;
   $__hn$sroa$0$0 = $0;
   $__n$0 = $call5;
  }
 } else {
  $__db$0 = $__digits;
  $__hd$sroa$0$0 = 0;
  $__hn$sroa$0$0 = 0;
  $__n$0 = $call;
 }
 __ZNKSt3__28ios_base6getlocEv($__loc, $__iob);
 $call$i = __ZNKSt3__26locale9use_facetERNS0_2idE($__loc, 61248) | 0;
 $3 = HEAP32[$__bb >> 2] | 0;
 FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[$call$i >> 2] | 0) + 48 >> 2] & 15]($call$i, $3, $3 + $__n$0 | 0, $__db$0) | 0;
 if (!$__n$0) $7 = 0; else $7 = (HEAP8[HEAP32[$__bb >> 2] >> 0] | 0) == 45;
 HEAP32[$__grp >> 2] = 0;
 HEAP32[$__grp + 4 >> 2] = 0;
 HEAP32[$__grp + 8 >> 2] = 0;
 $__i$0$i$i = 0;
 while (1) {
  if (($__i$0$i$i | 0) == 3) break;
  HEAP32[$__grp + ($__i$0$i$i << 2) >> 2] = 0;
  $__i$0$i$i = $__i$0$i$i + 1 | 0;
 }
 HEAP32[$__sym >> 2] = 0;
 HEAP32[$__sym + 4 >> 2] = 0;
 HEAP32[$__sym + 8 >> 2] = 0;
 $__i$0$i$i35 = 0;
 while (1) {
  if (($__i$0$i$i35 | 0) == 3) break;
  HEAP32[$__sym + ($__i$0$i$i35 << 2) >> 2] = 0;
  $__i$0$i$i35 = $__i$0$i$i35 + 1 | 0;
 }
 HEAP32[$__sn >> 2] = 0;
 HEAP32[$__sn + 4 >> 2] = 0;
 HEAP32[$__sn + 8 >> 2] = 0;
 $__i$0$i$i42 = 0;
 while (1) {
  if (($__i$0$i$i42 | 0) == 3) break;
  HEAP32[$__sn + ($__i$0$i$i42 << 2) >> 2] = 0;
  $__i$0$i$i42 = $__i$0$i$i42 + 1 | 0;
 }
 __ZNSt3__211__money_putIwE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_Ri($__intl, $7, $__loc, $__pat, $__dp, $__ts, $__grp, $__sym, $__sn, $__fd);
 $8 = HEAP32[$__fd >> 2] | 0;
 if (($__n$0 | 0) > ($8 | 0)) {
  $10 = HEAP8[$__sn + 8 + 3 >> 0] | 0;
  $13 = HEAP8[$__sym + 8 + 3 >> 0] | 0;
  $add31$sink = $8 + 1 + ($__n$0 - $8 << 1) | 0;
  $cond$i75$sink = $10 << 24 >> 24 < 0 ? HEAP32[$__sn + 4 >> 2] | 0 : $10 & 255;
  $cond$i83$sink = $13 << 24 >> 24 < 0 ? HEAP32[$__sym + 4 >> 2] | 0 : $13 & 255;
 } else {
  $16 = HEAP8[$__sn + 8 + 3 >> 0] | 0;
  $19 = HEAP8[$__sym + 8 + 3 >> 0] | 0;
  $add31$sink = $8 + 2 | 0;
  $cond$i75$sink = $16 << 24 >> 24 < 0 ? HEAP32[$__sn + 4 >> 2] | 0 : $16 & 255;
  $cond$i83$sink = $19 << 24 >> 24 < 0 ? HEAP32[$__sym + 4 >> 2] | 0 : $19 & 255;
 }
 $add33 = $add31$sink + $cond$i75$sink + $cond$i83$sink | 0;
 if ($add33 >>> 0 > 100) {
  $call37 = _malloc($add33 << 2) | 0;
  if (!$call37) __ZSt17__throw_bad_allocv(); else {
   $__hw$sroa$0$0 = $call37;
   $__mb$0 = $call37;
  }
 } else {
  $__hw$sroa$0$0 = 0;
  $__mb$0 = $__mbuf;
 }
 __ZNSt3__211__money_putIwE8__formatEPwRS2_S3_jPKwS5_RKNS_5ctypeIwEEbRKNS_10money_base7patternEwwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNSE_IwNSF_IwEENSH_IwEEEESQ_i($__mb$0, $__mi, $__me, HEAP32[$__iob + 4 >> 2] | 0, $__db$0, $__db$0 + ($__n$0 << 2) | 0, $call$i, $7, $__pat, HEAP32[$__dp >> 2] | 0, HEAP32[$__ts >> 2] | 0, $__grp, $__sym, $__sn, $8);
 HEAP32[$agg$tmp >> 2] = HEAP32[$__s >> 2];
 $26 = HEAP32[$__mi >> 2] | 0;
 $27 = HEAP32[$__me >> 2] | 0;
 HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 $call46 = __ZNSt3__216__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$tmp$byval_copy, $__mb$0, $26, $27, $__iob, $__fl) | 0;
 if ($__hw$sroa$0$0 | 0) _free($__hw$sroa$0$0);
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($__sn);
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($__sym);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grp);
 __ZNSt3__26localeD2Ev($__loc);
 if ($__hd$sroa$0$0 | 0) _free($__hd$sroa$0$0);
 if ($__hn$sroa$0$0 | 0) _free($__hn$sroa$0$0);
 STACKTOP = sp;
 return $call46 | 0;
}

function __ZNKSt3__29money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEce($this, $__s, $__intl, $__iob, $__fl, $__units) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__intl = $__intl | 0;
 $__iob = $__iob | 0;
 $__fl = $__fl | 0;
 $__units = +$__units;
 var $0 = 0, $11 = 0, $13 = 0, $15 = 0, $22 = 0, $23 = 0, $3 = 0, $7 = 0, $8 = 0, $9 = 0, $__bb = 0, $__buf = 0, $__db$0 = 0, $__digits = 0, $__dp = 0, $__fd = 0, $__grp = 0, $__hd$sroa$0$0 = 0, $__hn$sroa$0$0 = 0, $__hw$sroa$0$0 = 0, $__i$0$i$i = 0, $__i$0$i$i37 = 0, $__i$0$i$i45 = 0, $__loc = 0, $__mb$0 = 0, $__mbuf = 0, $__me = 0, $__mi = 0, $__n$0 = 0, $__pat = 0, $__sn = 0, $__sym = 0, $__ts = 0, $add31$sink = 0, $add33 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call = 0, $call$i = 0, $call37 = 0, $call4 = 0, $call46 = 0, $call5 = 0, $call8 = 0, $cond$i80$sink = 0, $cond$i89$sink = 0, $vararg_buffer1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 416 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(416);
 $agg$tmp$byval_copy = sp + 336 | 0;
 $vararg_buffer1 = sp + 328 | 0;
 $__buf = sp + 224 | 0;
 $__bb = sp + 400 | 0;
 $__digits = sp + 112 | 0;
 $__loc = sp + 396 | 0;
 $__pat = sp + 408 | 0;
 $__dp = sp + 405 | 0;
 $__ts = sp + 404 | 0;
 $__grp = sp + 384 | 0;
 $__sym = sp + 372 | 0;
 $__sn = sp + 360 | 0;
 $__fd = sp + 356 | 0;
 $__mbuf = sp;
 $__mi = sp + 352 | 0;
 $__me = sp + 344 | 0;
 $agg$tmp = sp + 348 | 0;
 HEAP32[$__bb >> 2] = $__buf;
 HEAPF64[$agg$tmp$byval_copy >> 3] = $__units;
 $call = _snprintf($__buf, 100, 44338, $agg$tmp$byval_copy) | 0;
 if ($call >>> 0 > 99) {
  $call4 = __ZNSt3__26__clocEv() | 0;
  HEAPF64[$vararg_buffer1 >> 3] = $__units;
  $call5 = __ZNSt3__219__libcpp_asprintf_lEPPcP15__locale_structPKcz($__bb, $call4, 44338, $vararg_buffer1) | 0;
  $0 = HEAP32[$__bb >> 2] | 0;
  if (!$0) __ZSt17__throw_bad_allocv();
  $call8 = _malloc($call5) | 0;
  if (!$call8) __ZSt17__throw_bad_allocv(); else {
   $__db$0 = $call8;
   $__hd$sroa$0$0 = $call8;
   $__hn$sroa$0$0 = $0;
   $__n$0 = $call5;
  }
 } else {
  $__db$0 = $__digits;
  $__hd$sroa$0$0 = 0;
  $__hn$sroa$0$0 = 0;
  $__n$0 = $call;
 }
 __ZNKSt3__28ios_base6getlocEv($__loc, $__iob);
 $call$i = __ZNKSt3__26locale9use_facetERNS0_2idE($__loc, 61216) | 0;
 $3 = HEAP32[$__bb >> 2] | 0;
 FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[$call$i >> 2] | 0) + 32 >> 2] & 15]($call$i, $3, $3 + $__n$0 | 0, $__db$0) | 0;
 if (!$__n$0) $7 = 0; else $7 = (HEAP8[HEAP32[$__bb >> 2] >> 0] | 0) == 45;
 HEAP32[$__grp >> 2] = 0;
 HEAP32[$__grp + 4 >> 2] = 0;
 HEAP32[$__grp + 8 >> 2] = 0;
 $__i$0$i$i = 0;
 while (1) {
  if (($__i$0$i$i | 0) == 3) break;
  HEAP32[$__grp + ($__i$0$i$i << 2) >> 2] = 0;
  $__i$0$i$i = $__i$0$i$i + 1 | 0;
 }
 HEAP32[$__sym >> 2] = 0;
 HEAP32[$__sym + 4 >> 2] = 0;
 HEAP32[$__sym + 8 >> 2] = 0;
 $__i$0$i$i37 = 0;
 while (1) {
  if (($__i$0$i$i37 | 0) == 3) break;
  HEAP32[$__sym + ($__i$0$i$i37 << 2) >> 2] = 0;
  $__i$0$i$i37 = $__i$0$i$i37 + 1 | 0;
 }
 HEAP32[$__sn >> 2] = 0;
 HEAP32[$__sn + 4 >> 2] = 0;
 HEAP32[$__sn + 8 >> 2] = 0;
 $__i$0$i$i45 = 0;
 while (1) {
  if (($__i$0$i$i45 | 0) == 3) break;
  HEAP32[$__sn + ($__i$0$i$i45 << 2) >> 2] = 0;
  $__i$0$i$i45 = $__i$0$i$i45 + 1 | 0;
 }
 __ZNSt3__211__money_putIcE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_Ri($__intl, $7, $__loc, $__pat, $__dp, $__ts, $__grp, $__sym, $__sn, $__fd);
 $8 = HEAP32[$__fd >> 2] | 0;
 if (($__n$0 | 0) > ($8 | 0)) {
  $9 = HEAP8[$__sn + 11 >> 0] | 0;
  $11 = HEAP8[$__sym + 11 >> 0] | 0;
  $add31$sink = $8 + 1 + ($__n$0 - $8 << 1) | 0;
  $cond$i80$sink = $9 << 24 >> 24 < 0 ? HEAP32[$__sn + 4 >> 2] | 0 : $9 & 255;
  $cond$i89$sink = $11 << 24 >> 24 < 0 ? HEAP32[$__sym + 4 >> 2] | 0 : $11 & 255;
 } else {
  $13 = HEAP8[$__sn + 11 >> 0] | 0;
  $15 = HEAP8[$__sym + 11 >> 0] | 0;
  $add31$sink = $8 + 2 | 0;
  $cond$i80$sink = $13 << 24 >> 24 < 0 ? HEAP32[$__sn + 4 >> 2] | 0 : $13 & 255;
  $cond$i89$sink = $15 << 24 >> 24 < 0 ? HEAP32[$__sym + 4 >> 2] | 0 : $15 & 255;
 }
 $add33 = $add31$sink + $cond$i80$sink + $cond$i89$sink | 0;
 if ($add33 >>> 0 > 100) {
  $call37 = _malloc($add33) | 0;
  if (!$call37) __ZSt17__throw_bad_allocv(); else {
   $__hw$sroa$0$0 = $call37;
   $__mb$0 = $call37;
  }
 } else {
  $__hw$sroa$0$0 = 0;
  $__mb$0 = $__mbuf;
 }
 __ZNSt3__211__money_putIcE8__formatEPcRS2_S3_jPKcS5_RKNS_5ctypeIcEEbRKNS_10money_base7patternEccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESL_SL_i($__mb$0, $__mi, $__me, HEAP32[$__iob + 4 >> 2] | 0, $__db$0, $__db$0 + $__n$0 | 0, $call$i, $7, $__pat, HEAP8[$__dp >> 0] | 0, HEAP8[$__ts >> 0] | 0, $__grp, $__sym, $__sn, $8);
 HEAP32[$agg$tmp >> 2] = HEAP32[$__s >> 2];
 $22 = HEAP32[$__mi >> 2] | 0;
 $23 = HEAP32[$__me >> 2] | 0;
 HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 $call46 = __ZNSt3__216__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$tmp$byval_copy, $__mb$0, $22, $23, $__iob, $__fl) | 0;
 if ($__hw$sroa$0$0 | 0) _free($__hw$sroa$0$0);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__sn);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__sym);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grp);
 __ZNSt3__26localeD2Ev($__loc);
 if ($__hd$sroa$0$0 | 0) _free($__hd$sroa$0$0);
 if ($__hn$sroa$0$0 | 0) _free($__hn$sroa$0$0);
 STACKTOP = sp;
 return $call46 | 0;
}

function _stbir__calculate_filters($contributors, $coefficients, $filter, $scale_ratio, $shift, $input_size, $output_size) {
 $contributors = $contributors | 0;
 $coefficients = $coefficients | 0;
 $filter = $filter | 0;
 $scale_ratio = Math_fround($scale_ratio);
 $shift = Math_fround($shift);
 $input_size = $input_size | 0;
 $output_size = $output_size | 0;
 var $0 = f0, $12 = f0, $13 = f0, $15 = 0, $16 = f0, $17 = 0, $18 = 0, $19 = f0, $24 = f0, $30 = 0, $34 = f0, $35 = f0, $37 = 0, $38 = f0, $39 = 0, $40 = 0, $41 = f0, $46 = f0, $52 = f0, $6 = 0, $7 = f0, $call13 = 0, $call2 = f0, $call3 = 0, $call7 = f0, $coefficients$addr = 0, $contributors$addr = 0, $div = f0, $filter$addr = 0, $in_center_of_out = 0, $in_first_pixel = 0, $in_last_pixel = 0, $in_pixels_radius = 0, $input_size$addr = 0, $n = 0, $n_adjusted = 0, $out_center_of_in = 0, $out_first_pixel = 0, $out_last_pixel = 0, $out_pixels_radius = 0, $output_size$addr = 0, $scale_ratio$addr = 0, $shift$addr = 0, $tobool = 0, $total_contributors = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(80);
 $contributors$addr = sp + 68 | 0;
 $coefficients$addr = sp + 64 | 0;
 $filter$addr = sp + 60 | 0;
 $scale_ratio$addr = sp + 56 | 0;
 $shift$addr = sp + 52 | 0;
 $input_size$addr = sp + 48 | 0;
 $output_size$addr = sp + 44 | 0;
 $n = sp + 40 | 0;
 $total_contributors = sp + 36 | 0;
 $out_pixels_radius = sp + 32 | 0;
 $in_center_of_out = sp + 28 | 0;
 $in_first_pixel = sp + 24 | 0;
 $in_last_pixel = sp + 20 | 0;
 $in_pixels_radius = sp + 16 | 0;
 $out_center_of_in = sp + 12 | 0;
 $out_first_pixel = sp + 8 | 0;
 $out_last_pixel = sp + 4 | 0;
 $n_adjusted = sp;
 HEAP32[$contributors$addr >> 2] = $contributors;
 HEAP32[$coefficients$addr >> 2] = $coefficients;
 HEAP32[$filter$addr >> 2] = $filter;
 HEAPF32[$scale_ratio$addr >> 2] = $scale_ratio;
 HEAPF32[$shift$addr >> 2] = $shift;
 HEAP32[$input_size$addr >> 2] = $input_size;
 HEAP32[$output_size$addr >> 2] = $output_size;
 $0 = Math_fround(HEAPF32[$scale_ratio$addr >> 2]);
 HEAP32[$total_contributors >> 2] = _stbir__get_contributors($0, HEAP32[$filter$addr >> 2] | 0, HEAP32[$input_size$addr >> 2] | 0, HEAP32[$output_size$addr >> 2] | 0) | 0;
 $tobool = (_stbir__use_upsampling(Math_fround(HEAPF32[$scale_ratio$addr >> 2])) | 0) != 0;
 $6 = HEAP32[6304 + (HEAP32[$filter$addr >> 2] << 3) + 4 >> 2] | 0;
 $7 = Math_fround(HEAPF32[$scale_ratio$addr >> 2]);
 if ($tobool) {
  $div = Math_fround(Math_fround(1.0) / $7);
  $call2 = Math_fround(FUNCTION_TABLE_ff[$6 & 7]($div));
  HEAPF32[$out_pixels_radius >> 2] = Math_fround($call2 * Math_fround(HEAPF32[$scale_ratio$addr >> 2]));
  HEAP32[$n >> 2] = 0;
  while (1) {
   if ((HEAP32[$n >> 2] | 0) >= (HEAP32[$total_contributors >> 2] | 0)) break;
   $12 = Math_fround(HEAPF32[$out_pixels_radius >> 2]);
   $13 = Math_fround(HEAPF32[$scale_ratio$addr >> 2]);
   _stbir__calculate_sample_range_upsample(HEAP32[$n >> 2] | 0, $12, $13, Math_fround(HEAPF32[$shift$addr >> 2]), $in_first_pixel, $in_last_pixel, $in_center_of_out);
   $15 = HEAP32[$filter$addr >> 2] | 0;
   $16 = Math_fround(HEAPF32[$scale_ratio$addr >> 2]);
   $17 = HEAP32[$in_first_pixel >> 2] | 0;
   $18 = HEAP32[$in_last_pixel >> 2] | 0;
   $19 = Math_fround(HEAPF32[$in_center_of_out >> 2]);
   $call3 = _stbir__get_contributor(HEAP32[$contributors$addr >> 2] | 0, HEAP32[$n >> 2] | 0) | 0;
   $24 = Math_fround(HEAPF32[$scale_ratio$addr >> 2]);
   _stbir__calculate_coefficients_upsample($15, $16, $17, $18, $19, $call3, _stbir__get_coefficient(HEAP32[$coefficients$addr >> 2] | 0, HEAP32[$filter$addr >> 2] | 0, $24, HEAP32[$n >> 2] | 0, 0) | 0);
   HEAP32[$n >> 2] = (HEAP32[$n >> 2] | 0) + 1;
  }
  STACKTOP = sp;
  return;
 }
 $call7 = Math_fround(FUNCTION_TABLE_ff[$6 & 7]($7));
 HEAPF32[$in_pixels_radius >> 2] = Math_fround($call7 / Math_fround(HEAPF32[$scale_ratio$addr >> 2]));
 HEAP32[$n >> 2] = 0;
 while (1) {
  if ((HEAP32[$n >> 2] | 0) >= (HEAP32[$total_contributors >> 2] | 0)) break;
  $30 = HEAP32[$n >> 2] | 0;
  HEAP32[$n_adjusted >> 2] = $30 - (_stbir__get_filter_pixel_margin(HEAP32[$filter$addr >> 2] | 0, Math_fround(HEAPF32[$scale_ratio$addr >> 2])) | 0);
  $34 = Math_fround(HEAPF32[$in_pixels_radius >> 2]);
  $35 = Math_fround(HEAPF32[$scale_ratio$addr >> 2]);
  _stbir__calculate_sample_range_downsample(HEAP32[$n_adjusted >> 2] | 0, $34, $35, Math_fround(HEAPF32[$shift$addr >> 2]), $out_first_pixel, $out_last_pixel, $out_center_of_in);
  $37 = HEAP32[$filter$addr >> 2] | 0;
  $38 = Math_fround(HEAPF32[$scale_ratio$addr >> 2]);
  $39 = HEAP32[$out_first_pixel >> 2] | 0;
  $40 = HEAP32[$out_last_pixel >> 2] | 0;
  $41 = Math_fround(HEAPF32[$out_center_of_in >> 2]);
  $call13 = _stbir__get_contributor(HEAP32[$contributors$addr >> 2] | 0, HEAP32[$n >> 2] | 0) | 0;
  $46 = Math_fround(HEAPF32[$scale_ratio$addr >> 2]);
  _stbir__calculate_coefficients_downsample($37, $38, $39, $40, $41, $call13, _stbir__get_coefficient(HEAP32[$coefficients$addr >> 2] | 0, HEAP32[$filter$addr >> 2] | 0, $46, HEAP32[$n >> 2] | 0, 0) | 0);
  HEAP32[$n >> 2] = (HEAP32[$n >> 2] | 0) + 1;
 }
 $52 = Math_fround(HEAPF32[$scale_ratio$addr >> 2]);
 _stbir__normalize_downsample_coefficients(HEAP32[$contributors$addr >> 2] | 0, HEAP32[$coefficients$addr >> 2] | 0, HEAP32[$filter$addr >> 2] | 0, $52, HEAP32[$input_size$addr >> 2] | 0, HEAP32[$output_size$addr >> 2] | 0);
 STACKTOP = sp;
 return;
}

function __ZN4tson3MapC2EOS0_($this, $0) {
 $this = $this | 0;
 $0 = $0 | 0;
 var $10 = 0, $14 = 0, $19 = 0, $20 = 0, $4 = 0, $9 = 0, $__end_$i = 0, $__end_$i$i = 0, $__end_$i$i16 = 0, $__end_$i19 = 0, $__value_$i$i$i8$i = 0, $__value_$i$i$i8$i20 = 0, $__value_$i$i$i9$i = 0, $__value_$i$i$i9$i17 = 0, $m_layers = 0, $m_layers3 = 0, $m_orientation = 0, $m_orientation5 = 0, $m_renderOrder = 0, $m_renderOrder7 = 0, $m_staggerAxis = 0, $m_staggerAxis8 = 0, $m_staggerIndex = 0, $m_staggerIndex9 = 0, $m_statusMessage = 0, $m_statusMessage15 = 0, $m_tiledVersion = 0, $m_tiledVersion10 = 0, $m_tilesets = 0, $m_tilesets12 = 0, $m_type = 0, $m_type13 = 0, $m_version = 0, $m_version14 = 0;
 HEAP32[$this >> 2] = HEAP32[$0 >> 2];
 HEAP32[$this + 4 >> 2] = HEAP32[$0 + 4 >> 2];
 HEAP32[$this + 8 >> 2] = HEAP32[$0 + 8 >> 2];
 HEAP32[$this + 12 >> 2] = HEAP32[$0 + 12 >> 2];
 HEAP8[$this + 16 >> 0] = HEAP8[$0 + 16 >> 0] | 0;
 $m_layers = $this + 20 | 0;
 $m_layers3 = $0 + 20 | 0;
 HEAP32[$m_layers >> 2] = 0;
 $__end_$i$i = $this + 24 | 0;
 HEAP32[$__end_$i$i >> 2] = 0;
 $__value_$i$i$i9$i = $this + 28 | 0;
 HEAP32[$__value_$i$i$i9$i >> 2] = 0;
 HEAP32[$m_layers >> 2] = HEAP32[$m_layers3 >> 2];
 $__end_$i = $0 + 24 | 0;
 HEAP32[$__end_$i$i >> 2] = HEAP32[$__end_$i >> 2];
 $__value_$i$i$i8$i = $0 + 28 | 0;
 HEAP32[$__value_$i$i$i9$i >> 2] = HEAP32[$__value_$i$i$i8$i >> 2];
 HEAP32[$__value_$i$i$i8$i >> 2] = 0;
 HEAP32[$__end_$i >> 2] = 0;
 HEAP32[$m_layers3 >> 2] = 0;
 $4 = $0 + 32 | 0;
 $9 = HEAP32[$4 + 4 >> 2] | 0;
 $10 = $this + 32 | 0;
 HEAP32[$10 >> 2] = HEAP32[$4 >> 2];
 HEAP32[$10 + 4 >> 2] = $9;
 $m_orientation = $this + 40 | 0;
 $m_orientation5 = $0 + 40 | 0;
 HEAP32[$m_orientation >> 2] = HEAP32[$m_orientation5 >> 2];
 HEAP32[$m_orientation + 4 >> 2] = HEAP32[$m_orientation5 + 4 >> 2];
 HEAP32[$m_orientation + 8 >> 2] = HEAP32[$m_orientation5 + 8 >> 2];
 HEAP32[$m_orientation5 >> 2] = 0;
 HEAP32[$m_orientation5 + 4 >> 2] = 0;
 HEAP32[$m_orientation5 + 8 >> 2] = 0;
 __ZN4tson18PropertyCollectionC2EOS0_($this + 52 | 0, $0 + 52 | 0);
 $m_renderOrder = $this + 76 | 0;
 $m_renderOrder7 = $0 + 76 | 0;
 HEAP32[$m_renderOrder >> 2] = HEAP32[$m_renderOrder7 >> 2];
 HEAP32[$m_renderOrder + 4 >> 2] = HEAP32[$m_renderOrder7 + 4 >> 2];
 HEAP32[$m_renderOrder + 8 >> 2] = HEAP32[$m_renderOrder7 + 8 >> 2];
 HEAP32[$m_renderOrder7 >> 2] = 0;
 HEAP32[$m_renderOrder7 + 4 >> 2] = 0;
 HEAP32[$m_renderOrder7 + 8 >> 2] = 0;
 $m_staggerAxis = $this + 88 | 0;
 $m_staggerAxis8 = $0 + 88 | 0;
 HEAP32[$m_staggerAxis >> 2] = HEAP32[$m_staggerAxis8 >> 2];
 HEAP32[$m_staggerAxis + 4 >> 2] = HEAP32[$m_staggerAxis8 + 4 >> 2];
 HEAP32[$m_staggerAxis + 8 >> 2] = HEAP32[$m_staggerAxis8 + 8 >> 2];
 HEAP32[$m_staggerAxis8 >> 2] = 0;
 HEAP32[$m_staggerAxis8 + 4 >> 2] = 0;
 HEAP32[$m_staggerAxis8 + 8 >> 2] = 0;
 $m_staggerIndex = $this + 100 | 0;
 $m_staggerIndex9 = $0 + 100 | 0;
 HEAP32[$m_staggerIndex >> 2] = HEAP32[$m_staggerIndex9 >> 2];
 HEAP32[$m_staggerIndex + 4 >> 2] = HEAP32[$m_staggerIndex9 + 4 >> 2];
 HEAP32[$m_staggerIndex + 8 >> 2] = HEAP32[$m_staggerIndex9 + 8 >> 2];
 HEAP32[$m_staggerIndex9 >> 2] = 0;
 HEAP32[$m_staggerIndex9 + 4 >> 2] = 0;
 HEAP32[$m_staggerIndex9 + 8 >> 2] = 0;
 $m_tiledVersion = $this + 112 | 0;
 $m_tiledVersion10 = $0 + 112 | 0;
 HEAP32[$m_tiledVersion >> 2] = HEAP32[$m_tiledVersion10 >> 2];
 HEAP32[$m_tiledVersion + 4 >> 2] = HEAP32[$m_tiledVersion10 + 4 >> 2];
 HEAP32[$m_tiledVersion + 8 >> 2] = HEAP32[$m_tiledVersion10 + 8 >> 2];
 HEAP32[$m_tiledVersion10 >> 2] = 0;
 HEAP32[$m_tiledVersion10 + 4 >> 2] = 0;
 HEAP32[$m_tiledVersion10 + 8 >> 2] = 0;
 $14 = $0 + 124 | 0;
 $19 = HEAP32[$14 + 4 >> 2] | 0;
 $20 = $this + 124 | 0;
 HEAP32[$20 >> 2] = HEAP32[$14 >> 2];
 HEAP32[$20 + 4 >> 2] = $19;
 $m_tilesets = $this + 132 | 0;
 $m_tilesets12 = $0 + 132 | 0;
 HEAP32[$m_tilesets >> 2] = 0;
 $__end_$i$i16 = $this + 136 | 0;
 HEAP32[$__end_$i$i16 >> 2] = 0;
 $__value_$i$i$i9$i17 = $this + 140 | 0;
 HEAP32[$__value_$i$i$i9$i17 >> 2] = 0;
 HEAP32[$m_tilesets >> 2] = HEAP32[$m_tilesets12 >> 2];
 $__end_$i19 = $0 + 136 | 0;
 HEAP32[$__end_$i$i16 >> 2] = HEAP32[$__end_$i19 >> 2];
 $__value_$i$i$i8$i20 = $0 + 140 | 0;
 HEAP32[$__value_$i$i$i9$i17 >> 2] = HEAP32[$__value_$i$i$i8$i20 >> 2];
 HEAP32[$__value_$i$i$i8$i20 >> 2] = 0;
 HEAP32[$__end_$i19 >> 2] = 0;
 HEAP32[$m_tilesets12 >> 2] = 0;
 $m_type = $this + 144 | 0;
 $m_type13 = $0 + 144 | 0;
 HEAP32[$m_type >> 2] = HEAP32[$m_type13 >> 2];
 HEAP32[$m_type + 4 >> 2] = HEAP32[$m_type13 + 4 >> 2];
 HEAP32[$m_type + 8 >> 2] = HEAP32[$m_type13 + 8 >> 2];
 HEAP32[$m_type13 >> 2] = 0;
 HEAP32[$m_type13 + 4 >> 2] = 0;
 HEAP32[$m_type13 + 8 >> 2] = 0;
 $m_version = $this + 156 | 0;
 $m_version14 = $0 + 156 | 0;
 HEAP32[$m_version >> 2] = HEAP32[$m_version14 >> 2];
 HEAP8[$m_version + 4 >> 0] = HEAP8[$m_version14 + 4 >> 0] | 0;
 $m_statusMessage = $this + 164 | 0;
 $m_statusMessage15 = $0 + 164 | 0;
 HEAP32[$m_statusMessage >> 2] = HEAP32[$m_statusMessage15 >> 2];
 HEAP32[$m_statusMessage + 4 >> 2] = HEAP32[$m_statusMessage15 + 4 >> 2];
 HEAP32[$m_statusMessage + 8 >> 2] = HEAP32[$m_statusMessage15 + 8 >> 2];
 HEAP32[$m_statusMessage15 >> 2] = 0;
 HEAP32[$m_statusMessage15 + 4 >> 2] = 0;
 HEAP32[$m_statusMessage15 + 8 >> 2] = 0;
 __ZNSt3__26__treeINS_12__value_typeIiPN4tson4TileEEENS_19__map_value_compareIiS5_NS_4lessIiEELb1EEENS_9allocatorIS5_EEEC2EOSC_($this + 176 | 0, $0 + 176 | 0);
 return;
}

function __ZN4tson8WangTile5parseERKN8nlohmann10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS1_14adl_serializerEEE($this, $json) {
 $this = $this | 0;
 $json = $json | 0;
 var $agg$tmp = 0, $agg$tmp33 = 0, $agg$tmp3514 = 0, $allFound$0$off0 = 0, $allFound$1$off0 = 0, $allFound$2$off0 = 0, $allFound$3$off0 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 $agg$tmp3514 = sp;
 $agg$tmp = sp + 24 | 0;
 $agg$tmp33 = sp + 8 | 0;
 if (!(__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE5countIRA6_KcEEmOT_($json, 23425) | 0)) $allFound$0$off0 = 0; else {
  HEAP8[$this >> 0] = (__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE3getIbbLi0EEET0_v(__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEixIKcEERKSB_PT_($json, 23425) | 0) | 0) & 1;
  $allFound$0$off0 = 1;
 }
 if (!(__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE5countIRA6_KcEEmOT_($json, 23431) | 0)) $allFound$1$off0 = 0; else {
  HEAP8[$this + 1 >> 0] = (__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE3getIbbLi0EEET0_v(__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEixIKcEERKSB_PT_($json, 23431) | 0) | 0) & 1;
  $allFound$1$off0 = $allFound$0$off0;
 }
 if (!(__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE5countIRA6_KcEEmOT_($json, 23437) | 0)) $allFound$2$off0 = 0; else {
  HEAP8[$this + 8 >> 0] = (__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE3getIbbLi0EEET0_v(__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEixIKcEERKSB_PT_($json, 23437) | 0) | 0) & 1;
  $allFound$2$off0 = $allFound$1$off0;
 }
 if (!(__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE5countIRA7_KcEEmOT_($json, 23199) | 0)) $allFound$3$off0 = 0; else {
  HEAP32[$this + 4 >> 2] = __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE3getIiiLi0EEET0_v(__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEixIKcEERKSB_PT_($json, 23199) | 0) | 0;
  $allFound$3$off0 = $allFound$2$off0;
 }
 if (__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE5countIRA7_KcEEmOT_($json, 23443) | 0) if (__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE8is_arrayEv(__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEixIKcEERKSB_PT_($json, 23443) | 0) | 0) {
  __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE5beginEv($agg$tmp, __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEixIKcEERKSB_PT_($json, 23443) | 0);
  __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE3endEv($agg$tmp33, __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEixIKcEERKSB_PT_($json, 23443) | 0);
  HEAP32[$agg$tmp3514 >> 2] = $this;
  if (__ZNK8nlohmann6detail9iter_implIKNS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEEneERKSF_($agg$tmp, $agg$tmp33) | 0) do {
   __ZZN4tson8WangTile5parseERKN8nlohmann10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS1_14adl_serializerEEEENKUlSF_E_clESF_($agg$tmp3514, __ZNK8nlohmann6detail9iter_implIKNS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEEdeEv($agg$tmp) | 0);
   __ZN8nlohmann6detail9iter_implIKNS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEEppEv($agg$tmp) | 0;
  } while (__ZNK8nlohmann6detail9iter_implIKNS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEEneERKSF_($agg$tmp, $agg$tmp33) | 0);
 }
 STACKTOP = sp;
 return $allFound$3$off0 | 0;
}

function _LoadBuffersDefault() {
 var $call = 0, $call1 = 0, $call3 = 0, $call5 = 0, $i = 0, $i83 = 0, $j = 0, $j13 = 0, $j23 = 0, $j33 = 0, $k = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 $vararg_buffer1 = sp + 8 | 0;
 $vararg_buffer = sp;
 $i = sp + 36 | 0;
 $j = sp + 32 | 0;
 $j13 = sp + 28 | 0;
 $j23 = sp + 24 | 0;
 $k = sp + 20 | 0;
 $j33 = sp + 16 | 0;
 $i83 = sp + 12 | 0;
 HEAP32[$i >> 2] = 0;
 while (1) {
  if ((HEAP32[$i >> 2] | 0) >= 1) break;
  $call = _malloc(98304) | 0;
  HEAP32[47408 + ((HEAP32[$i >> 2] | 0) * 48 | 0) + 12 >> 2] = $call;
  $call1 = _malloc(65536) | 0;
  HEAP32[47408 + ((HEAP32[$i >> 2] | 0) * 48 | 0) + 16 >> 2] = $call1;
  $call3 = _malloc(32768) | 0;
  HEAP32[47408 + ((HEAP32[$i >> 2] | 0) * 48 | 0) + 20 >> 2] = $call3;
  $call5 = _malloc(24576) | 0;
  HEAP32[47408 + ((HEAP32[$i >> 2] | 0) * 48 | 0) + 24 >> 2] = $call5;
  HEAP32[$j >> 2] = 0;
  while (1) {
   if ((HEAP32[$j >> 2] | 0) >= 24576) break;
   HEAPF32[(HEAP32[47408 + ((HEAP32[$i >> 2] | 0) * 48 | 0) + 12 >> 2] | 0) + (HEAP32[$j >> 2] << 2) >> 2] = Math_fround(0.0);
   HEAP32[$j >> 2] = (HEAP32[$j >> 2] | 0) + 1;
  }
  HEAP32[$j13 >> 2] = 0;
  while (1) {
   if ((HEAP32[$j13 >> 2] | 0) >= 16384) break;
   HEAPF32[(HEAP32[47408 + ((HEAP32[$i >> 2] | 0) * 48 | 0) + 16 >> 2] | 0) + (HEAP32[$j13 >> 2] << 2) >> 2] = Math_fround(0.0);
   HEAP32[$j13 >> 2] = (HEAP32[$j13 >> 2] | 0) + 1;
  }
  HEAP32[$j23 >> 2] = 0;
  while (1) {
   if ((HEAP32[$j23 >> 2] | 0) >= 32768) break;
   HEAP8[(HEAP32[47408 + ((HEAP32[$i >> 2] | 0) * 48 | 0) + 20 >> 2] | 0) + (HEAP32[$j23 >> 2] | 0) >> 0] = 0;
   HEAP32[$j23 >> 2] = (HEAP32[$j23 >> 2] | 0) + 1;
  }
  HEAP32[$k >> 2] = 0;
  HEAP32[$j33 >> 2] = 0;
  while (1) {
   if ((HEAP32[$j33 >> 2] | 0) >= 12288) break;
   HEAP16[(HEAP32[47408 + ((HEAP32[$i >> 2] | 0) * 48 | 0) + 24 >> 2] | 0) + (HEAP32[$j33 >> 2] << 1) >> 1] = HEAP32[$k >> 2] << 2;
   HEAP16[(HEAP32[47408 + ((HEAP32[$i >> 2] | 0) * 48 | 0) + 24 >> 2] | 0) + ((HEAP32[$j33 >> 2] | 0) + 1 << 1) >> 1] = (HEAP32[$k >> 2] << 2) + 1;
   HEAP16[(HEAP32[47408 + ((HEAP32[$i >> 2] | 0) * 48 | 0) + 24 >> 2] | 0) + ((HEAP32[$j33 >> 2] | 0) + 2 << 1) >> 1] = (HEAP32[$k >> 2] << 2) + 2;
   HEAP16[(HEAP32[47408 + ((HEAP32[$i >> 2] | 0) * 48 | 0) + 24 >> 2] | 0) + ((HEAP32[$j33 >> 2] | 0) + 3 << 1) >> 1] = HEAP32[$k >> 2] << 2;
   HEAP16[(HEAP32[47408 + ((HEAP32[$i >> 2] | 0) * 48 | 0) + 24 >> 2] | 0) + ((HEAP32[$j33 >> 2] | 0) + 4 << 1) >> 1] = (HEAP32[$k >> 2] << 2) + 2;
   HEAP16[(HEAP32[47408 + ((HEAP32[$i >> 2] | 0) * 48 | 0) + 24 >> 2] | 0) + ((HEAP32[$j33 >> 2] | 0) + 5 << 1) >> 1] = (HEAP32[$k >> 2] << 2) + 3;
   HEAP32[$k >> 2] = (HEAP32[$k >> 2] | 0) + 1;
   HEAP32[$j33 >> 2] = (HEAP32[$j33 >> 2] | 0) + 6;
  }
  HEAP32[47408 + ((HEAP32[$i >> 2] | 0) * 48 | 0) >> 2] = 0;
  HEAP32[47408 + ((HEAP32[$i >> 2] | 0) * 48 | 0) + 4 >> 2] = 0;
  HEAP32[47408 + ((HEAP32[$i >> 2] | 0) * 48 | 0) + 8 >> 2] = 0;
  HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
 }
 _TraceLog(3, 29916, $vararg_buffer);
 HEAP32[$i83 >> 2] = 0;
 while (1) {
  if ((HEAP32[$i83 >> 2] | 0) >= 1) break;
  if (HEAP8[62144] & 1) {
   FUNCTION_TABLE_vii[HEAP32[14930] & 127](1, 47408 + ((HEAP32[$i83 >> 2] | 0) * 48 | 0) + 28 | 0);
   FUNCTION_TABLE_vi[HEAP32[14851] & 255](HEAP32[47408 + ((HEAP32[$i83 >> 2] | 0) * 48 | 0) + 28 >> 2] | 0);
  }
  _glGenBuffers(1, 47408 + ((HEAP32[$i83 >> 2] | 0) * 48 | 0) + 32 | 0);
  _glBindBuffer(34962, HEAP32[47408 + ((HEAP32[$i83 >> 2] | 0) * 48 | 0) + 32 >> 2] | 0);
  _glBufferData(34962, 98304, HEAP32[47408 + ((HEAP32[$i83 >> 2] | 0) * 48 | 0) + 12 >> 2] | 0, 35048);
  _glEnableVertexAttribArray(HEAP32[HEAP32[14850] >> 2] | 0);
  _glVertexAttribPointer(HEAP32[HEAP32[14850] >> 2] | 0, 3, 5126, 0, 0, 0);
  _glGenBuffers(1, 47408 + ((HEAP32[$i83 >> 2] | 0) * 48 | 0) + 32 + 4 | 0);
  _glBindBuffer(34962, HEAP32[47408 + ((HEAP32[$i83 >> 2] | 0) * 48 | 0) + 32 + 4 >> 2] | 0);
  _glBufferData(34962, 65536, HEAP32[47408 + ((HEAP32[$i83 >> 2] | 0) * 48 | 0) + 16 >> 2] | 0, 35048);
  _glEnableVertexAttribArray(HEAP32[(HEAP32[14850] | 0) + 4 >> 2] | 0);
  _glVertexAttribPointer(HEAP32[(HEAP32[14850] | 0) + 4 >> 2] | 0, 2, 5126, 0, 0, 0);
  _glGenBuffers(1, 47408 + ((HEAP32[$i83 >> 2] | 0) * 48 | 0) + 32 + 8 | 0);
  _glBindBuffer(34962, HEAP32[47408 + ((HEAP32[$i83 >> 2] | 0) * 48 | 0) + 32 + 8 >> 2] | 0);
  _glBufferData(34962, 32768, HEAP32[47408 + ((HEAP32[$i83 >> 2] | 0) * 48 | 0) + 20 >> 2] | 0, 35048);
  _glEnableVertexAttribArray(HEAP32[(HEAP32[14850] | 0) + 20 >> 2] | 0);
  _glVertexAttribPointer(HEAP32[(HEAP32[14850] | 0) + 20 >> 2] | 0, 4, 5121, 1, 0, 0);
  _glGenBuffers(1, 47408 + ((HEAP32[$i83 >> 2] | 0) * 48 | 0) + 32 + 12 | 0);
  _glBindBuffer(34963, HEAP32[47408 + ((HEAP32[$i83 >> 2] | 0) * 48 | 0) + 32 + 12 >> 2] | 0);
  _glBufferData(34963, 24576, HEAP32[47408 + ((HEAP32[$i83 >> 2] | 0) * 48 | 0) + 24 >> 2] | 0, 35044);
  HEAP32[$i83 >> 2] = (HEAP32[$i83 >> 2] | 0) + 1;
 }
 _TraceLog(3, 29964, $vararg_buffer1);
 if (!(HEAP8[62144] & 1)) {
  STACKTOP = sp;
  return;
 }
 FUNCTION_TABLE_vi[HEAP32[14851] & 255](0);
 STACKTOP = sp;
 return;
}

function _DrawTexturePro($texture, $sourceRec, $destRec, $origin, $rotation, $tint) {
 $texture = $texture | 0;
 $sourceRec = $sourceRec | 0;
 $destRec = $destRec | 0;
 $origin = $origin | 0;
 $rotation = Math_fround($rotation);
 $tint = $tint | 0;
 var $19 = f0, $22 = f0, $25 = f0, $28 = f0, $31 = f0, $35 = f0, $40 = f0, $42 = f0, $47 = f0, $50 = f0, $53 = f0, $55 = f0, $59 = f0, $6 = f0, $9 = f0, $add = f0, $add35 = f0, $add39 = f0, $add46 = f0, $add56 = f0, $add61 = f0, $add65 = f0, $add79 = f0, $div = f0, $div27 = f0, $div36 = f0, $div43 = f0, $div53 = f0, $div62 = f0, $div73 = f0, $div80 = f0, $flipX = 0, $height = 0, $rotation$addr = 0, $sub18 = f0, $width = 0, $width8 = 0, $y = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $rotation$addr = sp + 8 | 0;
 $width = sp + 4 | 0;
 $height = sp;
 $flipX = sp + 12 | 0;
 HEAPF32[$rotation$addr >> 2] = $rotation;
 if ((HEAP32[$texture >> 2] | 0) >>> 0 <= 0) {
  STACKTOP = sp;
  return;
 }
 HEAPF32[$width >> 2] = Math_fround(HEAP32[$texture + 4 >> 2] | 0);
 HEAPF32[$height >> 2] = Math_fround(HEAP32[$texture + 8 >> 2] | 0);
 HEAP8[$flipX >> 0] = 0;
 if (Math_fround(HEAPF32[$sourceRec + 8 >> 2]) < Math_fround(0.0)) {
  HEAP8[$flipX >> 0] = 1;
  $width8 = $sourceRec + 8 | 0;
  HEAPF32[$width8 >> 2] = Math_fround(Math_fround(HEAPF32[$width8 >> 2]) * Math_fround(-1.0));
 }
 if (Math_fround(HEAPF32[$sourceRec + 12 >> 2]) < Math_fround(0.0)) {
  $6 = Math_fround(HEAPF32[$sourceRec + 12 >> 2]);
  $y = $sourceRec + 4 | 0;
  HEAPF32[$y >> 2] = Math_fround(Math_fround(HEAPF32[$y >> 2]) - $6);
 }
 _rlEnableTexture(HEAP32[$texture >> 2] | 0);
 _rlPushMatrix();
 $9 = Math_fround(HEAPF32[$destRec >> 2]);
 _rlTranslatef($9, Math_fround(HEAPF32[$destRec + 4 >> 2]), Math_fround(0.0));
 _rlRotatef(Math_fround(HEAPF32[$rotation$addr >> 2]), Math_fround(0.0), Math_fround(0.0), Math_fround(1.0));
 $sub18 = Math_fround(-Math_fround(HEAPF32[$origin >> 2]));
 _rlTranslatef($sub18, Math_fround(-Math_fround(HEAPF32[$origin + 4 >> 2])), Math_fround(0.0));
 _rlBegin(7);
 _rlColor4ub(HEAP8[$tint >> 0] | 0, HEAP8[$tint + 1 >> 0] | 0, HEAP8[$tint + 2 >> 0] | 0, HEAP8[$tint + 3 >> 0] | 0);
 _rlNormal3f(Math_fround(0.0), Math_fround(0.0), Math_fround(1.0));
 $19 = Math_fround(HEAPF32[$sourceRec >> 2]);
 if (HEAP8[$flipX >> 0] & 1) {
  $add = Math_fround($19 + Math_fround(HEAPF32[$sourceRec + 8 >> 2]));
  $div = Math_fround($add / Math_fround(HEAPF32[$width >> 2]));
  $22 = Math_fround(HEAPF32[$sourceRec + 4 >> 2]);
  _rlTexCoord2f($div, Math_fround($22 / Math_fround(HEAPF32[$height >> 2])));
 } else {
  $div27 = Math_fround($19 / Math_fround(HEAPF32[$width >> 2]));
  $25 = Math_fround(HEAPF32[$sourceRec + 4 >> 2]);
  _rlTexCoord2f($div27, Math_fround($25 / Math_fround(HEAPF32[$height >> 2])));
 }
 _rlVertex2f(Math_fround(0.0), Math_fround(0.0));
 $28 = Math_fround(HEAPF32[$sourceRec >> 2]);
 if (HEAP8[$flipX >> 0] & 1) {
  $add35 = Math_fround($28 + Math_fround(HEAPF32[$sourceRec + 8 >> 2]));
  $div36 = Math_fround($add35 / Math_fround(HEAPF32[$width >> 2]));
  $31 = Math_fround(HEAPF32[$sourceRec + 4 >> 2]);
  $add39 = Math_fround($31 + Math_fround(HEAPF32[$sourceRec + 12 >> 2]));
  _rlTexCoord2f($div36, Math_fround($add39 / Math_fround(HEAPF32[$height >> 2])));
 } else {
  $div43 = Math_fround($28 / Math_fround(HEAPF32[$width >> 2]));
  $35 = Math_fround(HEAPF32[$sourceRec + 4 >> 2]);
  $add46 = Math_fround($35 + Math_fround(HEAPF32[$sourceRec + 12 >> 2]));
  _rlTexCoord2f($div43, Math_fround($add46 / Math_fround(HEAPF32[$height >> 2])));
 }
 _rlVertex2f(Math_fround(0.0), Math_fround(HEAPF32[$destRec + 12 >> 2]));
 $40 = Math_fround(HEAPF32[$sourceRec >> 2]);
 if (HEAP8[$flipX >> 0] & 1) {
  $div53 = Math_fround($40 / Math_fround(HEAPF32[$width >> 2]));
  $42 = Math_fround(HEAPF32[$sourceRec + 4 >> 2]);
  $add56 = Math_fround($42 + Math_fround(HEAPF32[$sourceRec + 12 >> 2]));
  _rlTexCoord2f($div53, Math_fround($add56 / Math_fround(HEAPF32[$height >> 2])));
 } else {
  $add61 = Math_fround($40 + Math_fround(HEAPF32[$sourceRec + 8 >> 2]));
  $div62 = Math_fround($add61 / Math_fround(HEAPF32[$width >> 2]));
  $47 = Math_fround(HEAPF32[$sourceRec + 4 >> 2]);
  $add65 = Math_fround($47 + Math_fround(HEAPF32[$sourceRec + 12 >> 2]));
  _rlTexCoord2f($div62, Math_fround($add65 / Math_fround(HEAPF32[$height >> 2])));
 }
 $50 = Math_fround(HEAPF32[$destRec + 8 >> 2]);
 _rlVertex2f($50, Math_fround(HEAPF32[$destRec + 12 >> 2]));
 $53 = Math_fround(HEAPF32[$sourceRec >> 2]);
 if (HEAP8[$flipX >> 0] & 1) {
  $div73 = Math_fround($53 / Math_fround(HEAPF32[$width >> 2]));
  $55 = Math_fround(HEAPF32[$sourceRec + 4 >> 2]);
  _rlTexCoord2f($div73, Math_fround($55 / Math_fround(HEAPF32[$height >> 2])));
 } else {
  $add79 = Math_fround($53 + Math_fround(HEAPF32[$sourceRec + 8 >> 2]));
  $div80 = Math_fround($add79 / Math_fround(HEAPF32[$width >> 2]));
  $59 = Math_fround(HEAPF32[$sourceRec + 4 >> 2]);
  _rlTexCoord2f($div80, Math_fround($59 / Math_fround(HEAPF32[$height >> 2])));
 }
 _rlVertex2f(Math_fround(HEAPF32[$destRec + 8 >> 2]), Math_fround(0.0));
 _rlEnd();
 _rlPopMatrix();
 _rlDisableTexture();
 STACKTOP = sp;
 return;
}

function _stbir__resize_arbitrary($alloc_context, $input_data, $input_w, $input_h, $input_stride_in_bytes, $output_data, $output_w, $output_h, $output_stride_in_bytes, $s0, $t0, $s1, $t1, $transform, $channels, $alpha_channel, $flags, $type, $h_filter, $v_filter, $edge_horizontal, $edge_vertical, $colorspace) {
 $alloc_context = $alloc_context | 0;
 $input_data = $input_data | 0;
 $input_w = $input_w | 0;
 $input_h = $input_h | 0;
 $input_stride_in_bytes = $input_stride_in_bytes | 0;
 $output_data = $output_data | 0;
 $output_w = $output_w | 0;
 $output_h = $output_h | 0;
 $output_stride_in_bytes = $output_stride_in_bytes | 0;
 $s0 = Math_fround($s0);
 $t0 = Math_fround($t0);
 $s1 = Math_fround($s1);
 $t1 = Math_fround($t1);
 $transform = $transform | 0;
 $channels = $channels | 0;
 $alpha_channel = $alpha_channel | 0;
 $flags = $flags | 0;
 $type = $type | 0;
 $h_filter = $h_filter | 0;
 $v_filter = $v_filter | 0;
 $edge_horizontal = $edge_horizontal | 0;
 $edge_vertical = $edge_vertical | 0;
 $colorspace = $colorspace | 0;
 var $28 = 0, $5 = f0, $6 = f0, $7 = f0, $8 = f0, $alpha_channel$addr = 0, $channels$addr = 0, $colorspace$addr = 0, $edge_horizontal$addr = 0, $edge_vertical$addr = 0, $extra_memory = 0, $flags$addr = 0, $h_filter$addr = 0, $info = 0, $input_data$addr = 0, $input_h$addr = 0, $input_stride_in_bytes$addr = 0, $input_w$addr = 0, $memory_required = 0, $output_data$addr = 0, $output_h$addr = 0, $output_stride_in_bytes$addr = 0, $output_w$addr = 0, $result = 0, $retval = 0, $s0$addr = 0, $s1$addr = 0, $t0$addr = 0, $t1$addr = 0, $transform$addr = 0, $type$addr = 0, $v_filter$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 336 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(336);
 $retval = sp + 324 | 0;
 $input_data$addr = sp + 316 | 0;
 $input_w$addr = sp + 312 | 0;
 $input_h$addr = sp + 308 | 0;
 $input_stride_in_bytes$addr = sp + 304 | 0;
 $output_data$addr = sp + 300 | 0;
 $output_w$addr = sp + 296 | 0;
 $output_h$addr = sp + 292 | 0;
 $output_stride_in_bytes$addr = sp + 288 | 0;
 $s0$addr = sp + 284 | 0;
 $t0$addr = sp + 280 | 0;
 $s1$addr = sp + 276 | 0;
 $t1$addr = sp + 272 | 0;
 $transform$addr = sp + 268 | 0;
 $channels$addr = sp + 264 | 0;
 $alpha_channel$addr = sp + 260 | 0;
 $flags$addr = sp + 256 | 0;
 $type$addr = sp + 252 | 0;
 $h_filter$addr = sp + 248 | 0;
 $v_filter$addr = sp + 244 | 0;
 $edge_horizontal$addr = sp + 240 | 0;
 $edge_vertical$addr = sp + 236 | 0;
 $colorspace$addr = sp + 232 | 0;
 $info = sp + 12 | 0;
 $result = sp + 8 | 0;
 $memory_required = sp + 4 | 0;
 $extra_memory = sp;
 HEAP32[sp + 320 >> 2] = $alloc_context;
 HEAP32[$input_data$addr >> 2] = $input_data;
 HEAP32[$input_w$addr >> 2] = $input_w;
 HEAP32[$input_h$addr >> 2] = $input_h;
 HEAP32[$input_stride_in_bytes$addr >> 2] = $input_stride_in_bytes;
 HEAP32[$output_data$addr >> 2] = $output_data;
 HEAP32[$output_w$addr >> 2] = $output_w;
 HEAP32[$output_h$addr >> 2] = $output_h;
 HEAP32[$output_stride_in_bytes$addr >> 2] = $output_stride_in_bytes;
 HEAPF32[$s0$addr >> 2] = $s0;
 HEAPF32[$t0$addr >> 2] = $t0;
 HEAPF32[$s1$addr >> 2] = $s1;
 HEAPF32[$t1$addr >> 2] = $t1;
 HEAP32[$transform$addr >> 2] = $transform;
 HEAP32[$channels$addr >> 2] = $channels;
 HEAP32[$alpha_channel$addr >> 2] = $alpha_channel;
 HEAP32[$flags$addr >> 2] = $flags;
 HEAP32[$type$addr >> 2] = $type;
 HEAP32[$h_filter$addr >> 2] = $h_filter;
 HEAP32[$v_filter$addr >> 2] = $v_filter;
 HEAP32[$edge_horizontal$addr >> 2] = $edge_horizontal;
 HEAP32[$edge_vertical$addr >> 2] = $edge_vertical;
 HEAP32[$colorspace$addr >> 2] = $colorspace;
 _stbir__setup($info, HEAP32[$input_w$addr >> 2] | 0, HEAP32[$input_h$addr >> 2] | 0, HEAP32[$output_w$addr >> 2] | 0, HEAP32[$output_h$addr >> 2] | 0, HEAP32[$channels$addr >> 2] | 0);
 $5 = Math_fround(HEAPF32[$s0$addr >> 2]);
 $6 = Math_fround(HEAPF32[$t0$addr >> 2]);
 $7 = Math_fround(HEAPF32[$s1$addr >> 2]);
 $8 = Math_fround(HEAPF32[$t1$addr >> 2]);
 _stbir__calculate_transform($info, $5, $6, $7, $8, HEAP32[$transform$addr >> 2] | 0);
 _stbir__choose_filter($info, HEAP32[$h_filter$addr >> 2] | 0, HEAP32[$v_filter$addr >> 2] | 0);
 HEAP32[$memory_required >> 2] = _stbir__calculate_memory($info) | 0;
 HEAP32[$extra_memory >> 2] = _malloc(HEAP32[$memory_required >> 2] | 0) | 0;
 if (HEAP32[$extra_memory >> 2] | 0) {
  HEAP32[$result >> 2] = _stbir__resize_allocated($info, HEAP32[$input_data$addr >> 2] | 0, HEAP32[$input_stride_in_bytes$addr >> 2] | 0, HEAP32[$output_data$addr >> 2] | 0, HEAP32[$output_stride_in_bytes$addr >> 2] | 0, HEAP32[$alpha_channel$addr >> 2] | 0, HEAP32[$flags$addr >> 2] | 0, HEAP32[$type$addr >> 2] | 0, HEAP32[$edge_horizontal$addr >> 2] | 0, HEAP32[$edge_vertical$addr >> 2] | 0, HEAP32[$colorspace$addr >> 2] | 0, HEAP32[$extra_memory >> 2] | 0, HEAP32[$memory_required >> 2] | 0) | 0;
  _free(HEAP32[$extra_memory >> 2] | 0);
  HEAP32[$retval >> 2] = HEAP32[$result >> 2];
  $28 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $28 | 0;
 } else {
  HEAP32[$retval >> 2] = 0;
  $28 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $28 | 0;
 }
 return 0;
}

function __ZN4tson7Terrain5parseERKN8nlohmann10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS1_14adl_serializerEEE($this, $json) {
 $this = $this | 0;
 $json = $json | 0;
 var $1 = 0, $__cap_$i$i$i$i$i = 0, $__size_$i1$i$i$i$i = 0, $agg$tmp = 0, $agg$tmp17 = 0, $agg$tmp198 = 0, $allFound$0$off0 = 0, $allFound$1$off0 = 0, $ref$tmp = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 $agg$tmp198 = sp;
 $ref$tmp = sp + 4 | 0;
 $agg$tmp = sp + 32 | 0;
 $agg$tmp17 = sp + 16 | 0;
 if (!(__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE5countIRA5_KcEEmOT_($json, 22602) | 0)) $allFound$0$off0 = 0; else {
  __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE3getIS9_S9_Li0EEET0_v($ref$tmp, __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEixIKcEERKSB_PT_($json, 22602) | 0);
  $__size_$i1$i$i$i$i = $this + 11 | 0;
  if ((HEAP8[$__size_$i1$i$i$i$i >> 0] | 0) < 0) {
   $1 = HEAP32[$this >> 2] | 0;
   HEAP8[$agg$tmp198 >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($1, $agg$tmp198);
   HEAP32[$this + 4 >> 2] = 0;
   if ((HEAP8[$__size_$i1$i$i$i$i >> 0] | 0) < 0) {
    $__cap_$i$i$i$i$i = $this + 8 | 0;
    __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm(HEAP32[$this >> 2] | 0, HEAP32[$__cap_$i$i$i$i$i >> 2] & 2147483647);
    HEAP32[$__cap_$i$i$i$i$i >> 2] = 0;
   }
  } else {
   HEAP8[$agg$tmp198 >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($this, $agg$tmp198);
   HEAP8[$__size_$i1$i$i$i$i >> 0] = 0;
  };
  HEAP32[$this >> 2] = HEAP32[$ref$tmp >> 2];
  HEAP32[$this + 4 >> 2] = HEAP32[$ref$tmp + 4 >> 2];
  HEAP32[$this + 8 >> 2] = HEAP32[$ref$tmp + 8 >> 2];
  HEAP32[$ref$tmp >> 2] = 0;
  HEAP32[$ref$tmp + 4 >> 2] = 0;
  HEAP32[$ref$tmp + 8 >> 2] = 0;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp);
  $allFound$0$off0 = 1;
 }
 if (!(__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE5countIRA5_KcEEmOT_($json, 23152) | 0)) $allFound$1$off0 = 0; else {
  HEAP32[$this + 12 >> 2] = __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE3getIiiLi0EEET0_v(__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEixIKcEERKSB_PT_($json, 23152) | 0) | 0;
  $allFound$1$off0 = $allFound$0$off0;
 }
 if (__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE5countIRA11_KcEEmOT_($json, 22585) | 0) if (__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE8is_arrayEv(__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEixIKcEERKSB_PT_($json, 22585) | 0) | 0) {
  __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE5beginEv($agg$tmp, __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEixIKcEERKSB_PT_($json, 22585) | 0);
  __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE3endEv($agg$tmp17, __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEixIKcEERKSB_PT_($json, 22585) | 0);
  HEAP32[$agg$tmp198 >> 2] = $this;
  if (__ZNK8nlohmann6detail9iter_implIKNS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEEneERKSF_($agg$tmp, $agg$tmp17) | 0) do {
   __ZZN4tson7Terrain5parseERKN8nlohmann10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS1_14adl_serializerEEEENKUlSF_E_clESF_($agg$tmp198, __ZNK8nlohmann6detail9iter_implIKNS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEEdeEv($agg$tmp) | 0);
   __ZN8nlohmann6detail9iter_implIKNS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEEppEv($agg$tmp) | 0;
  } while (__ZNK8nlohmann6detail9iter_implIKNS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEEneERKSF_($agg$tmp, $agg$tmp17) | 0);
 }
 STACKTOP = sp;
 return $allFound$1$off0 | 0;
}

function __ZNKSt3__29money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwRKNS_12basic_stringIwS3_NS_9allocatorIwEEEE($this, $__s, $__intl, $__iob, $__fl, $__digits) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__intl = $__intl | 0;
 $__iob = $__iob | 0;
 $__fl = $__fl | 0;
 $__digits = $__digits | 0;
 var $1 = 0, $11 = 0, $14 = 0, $17 = 0, $20 = 0, $28 = 0, $29 = 0, $4 = 0, $6 = 0, $7 = 0, $9 = 0, $__dp = 0, $__fd = 0, $__grp = 0, $__h$sroa$0$0 = 0, $__i$0$i$i = 0, $__i$0$i$i19 = 0, $__i$0$i$i26 = 0, $__loc = 0, $__mb$0 = 0, $__mbuf = 0, $__me = 0, $__mi = 0, $__pat = 0, $__size_$i$i = 0, $__size_$i2$i = 0, $__sn = 0, $__sym = 0, $__ts = 0, $add18$sink = 0, $add20 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call$i = 0, $call23 = 0, $call33 = 0, $cond$i$i109 = 0, $cond$i40 = 0, $cond$i81$sink = 0, $cond$i89$sink = 0, $tobool$i$i = 0, $tobool$i$i35 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 480 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(480);
 $agg$tmp$byval_copy = sp + 464 | 0;
 $__loc = sp + 460 | 0;
 $__pat = sp + 468 | 0;
 $__dp = sp + 456 | 0;
 $__ts = sp + 452 | 0;
 $__grp = sp + 440 | 0;
 $__sym = sp + 428 | 0;
 $__sn = sp + 416 | 0;
 $__fd = sp + 412 | 0;
 $__mbuf = sp;
 $__mi = sp + 408 | 0;
 $__me = sp + 404 | 0;
 $agg$tmp = sp + 400 | 0;
 __ZNKSt3__28ios_base6getlocEv($__loc, $__iob);
 $call$i = __ZNKSt3__26locale9use_facetERNS0_2idE($__loc, 61248) | 0;
 $__size_$i$i = $__digits + 8 + 3 | 0;
 $1 = HEAP8[$__size_$i$i >> 0] | 0;
 $tobool$i$i = $1 << 24 >> 24 < 0;
 $__size_$i2$i = $__digits + 4 | 0;
 if (!(($tobool$i$i ? HEAP32[$__size_$i2$i >> 2] | 0 : $1 & 255) | 0)) $6 = 0; else {
  $4 = HEAP32[($tobool$i$i ? HEAP32[$__digits >> 2] | 0 : $__digits) >> 2] | 0;
  $6 = ($4 | 0) == (FUNCTION_TABLE_iii[HEAP32[(HEAP32[$call$i >> 2] | 0) + 44 >> 2] & 31]($call$i, 45) | 0);
 };
 HEAP32[$__grp >> 2] = 0;
 HEAP32[$__grp + 4 >> 2] = 0;
 HEAP32[$__grp + 8 >> 2] = 0;
 $__i$0$i$i = 0;
 while (1) {
  if (($__i$0$i$i | 0) == 3) break;
  HEAP32[$__grp + ($__i$0$i$i << 2) >> 2] = 0;
  $__i$0$i$i = $__i$0$i$i + 1 | 0;
 }
 HEAP32[$__sym >> 2] = 0;
 HEAP32[$__sym + 4 >> 2] = 0;
 HEAP32[$__sym + 8 >> 2] = 0;
 $__i$0$i$i19 = 0;
 while (1) {
  if (($__i$0$i$i19 | 0) == 3) break;
  HEAP32[$__sym + ($__i$0$i$i19 << 2) >> 2] = 0;
  $__i$0$i$i19 = $__i$0$i$i19 + 1 | 0;
 }
 HEAP32[$__sn >> 2] = 0;
 HEAP32[$__sn + 4 >> 2] = 0;
 HEAP32[$__sn + 8 >> 2] = 0;
 $__i$0$i$i26 = 0;
 while (1) {
  if (($__i$0$i$i26 | 0) == 3) break;
  HEAP32[$__sn + ($__i$0$i$i26 << 2) >> 2] = 0;
  $__i$0$i$i26 = $__i$0$i$i26 + 1 | 0;
 }
 __ZNSt3__211__money_putIwE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_Ri($__intl, $6, $__loc, $__pat, $__dp, $__ts, $__grp, $__sym, $__sn, $__fd);
 $7 = HEAP8[$__size_$i$i >> 0] | 0;
 $tobool$i$i35 = $7 << 24 >> 24 < 0;
 $cond$i40 = $tobool$i$i35 ? HEAP32[$__size_$i2$i >> 2] | 0 : $7 & 255;
 $9 = HEAP32[$__fd >> 2] | 0;
 if (($cond$i40 | 0) > ($9 | 0)) {
  $11 = HEAP8[$__sn + 8 + 3 >> 0] | 0;
  $14 = HEAP8[$__sym + 8 + 3 >> 0] | 0;
  $add18$sink = $9 + 1 + ($cond$i40 - $9 << 1) | 0;
  $cond$i81$sink = $14 << 24 >> 24 < 0 ? HEAP32[$__sym + 4 >> 2] | 0 : $14 & 255;
  $cond$i89$sink = $11 << 24 >> 24 < 0 ? HEAP32[$__sn + 4 >> 2] | 0 : $11 & 255;
 } else {
  $17 = HEAP8[$__sn + 8 + 3 >> 0] | 0;
  $20 = HEAP8[$__sym + 8 + 3 >> 0] | 0;
  $add18$sink = $9 + 2 | 0;
  $cond$i81$sink = $20 << 24 >> 24 < 0 ? HEAP32[$__sym + 4 >> 2] | 0 : $20 & 255;
  $cond$i89$sink = $17 << 24 >> 24 < 0 ? HEAP32[$__sn + 4 >> 2] | 0 : $17 & 255;
 }
 $add20 = $add18$sink + $cond$i89$sink + $cond$i81$sink | 0;
 if ($add20 >>> 0 > 100) {
  $call23 = _malloc($add20 << 2) | 0;
  if (!$call23) __ZSt17__throw_bad_allocv(); else {
   $__h$sroa$0$0 = $call23;
   $__mb$0 = $call23;
  }
 } else {
  $__h$sroa$0$0 = 0;
  $__mb$0 = $__mbuf;
 }
 $cond$i$i109 = $tobool$i$i35 ? HEAP32[$__digits >> 2] | 0 : $__digits;
 __ZNSt3__211__money_putIwE8__formatEPwRS2_S3_jPKwS5_RKNS_5ctypeIwEEbRKNS_10money_base7patternEwwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNSE_IwNSF_IwEENSH_IwEEEESQ_i($__mb$0, $__mi, $__me, HEAP32[$__iob + 4 >> 2] | 0, $cond$i$i109, $cond$i$i109 + ($cond$i40 << 2) | 0, $call$i, $6, $__pat, HEAP32[$__dp >> 2] | 0, HEAP32[$__ts >> 2] | 0, $__grp, $__sym, $__sn, $9);
 HEAP32[$agg$tmp >> 2] = HEAP32[$__s >> 2];
 $28 = HEAP32[$__mi >> 2] | 0;
 $29 = HEAP32[$__me >> 2] | 0;
 HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 $call33 = __ZNSt3__216__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$tmp$byval_copy, $__mb$0, $28, $29, $__iob, $__fl) | 0;
 if ($__h$sroa$0$0 | 0) _free($__h$sroa$0$0);
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($__sn);
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($__sym);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grp);
 __ZNSt3__26localeD2Ev($__loc);
 STACKTOP = sp;
 return $call33 | 0;
}

function ___get_locale($cat, $val) {
 $cat = $cat | 0;
 $val = $val | 0;
 var $11 = 0, $12 = 0, $15 = 0, $18 = 0, $5 = 0, $9 = 0, $add = 0, $arrayidx103 = 0, $buf = 0, $call = 0, $call110 = 0, $call113 = 0, $call139 = 0, $call3 = 0, $call84 = 0, $call9 = 0, $call91 = 0, $map_size = 0, $n$0$lcssa = 0, $n$085 = 0, $name120 = 0, $name144 = 0, $new$4 = 0, $p$084 = 0, $p$182 = 0, $path$180 = 0, $retval$0 = 0, $sub = 0, $sub96 = 0, $val$addr$1 = 0, $val$addr$290 = 0, $val$addr$291 = 0, $val$addr$292 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 272 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(272);
 $buf = sp;
 $map_size = sp + 256 | 0;
 do if (!(HEAP8[$val >> 0] | 0)) {
  $call = _getenv(38490) | 0;
  if ($call | 0) if (HEAP8[$call >> 0] | 0) {
   $val$addr$1 = $call;
   break;
  }
  $call3 = _getenv(14560 + ($cat * 12 | 0) | 0) | 0;
  if ($call3 | 0) if (HEAP8[$call3 >> 0] | 0) {
   $val$addr$1 = $call3;
   break;
  }
  $call9 = _getenv(38497) | 0;
  if ($call9 | 0) if (HEAP8[$call9 >> 0] | 0) {
   $val$addr$1 = $call9;
   break;
  }
  $val$addr$1 = 38502;
 } else $val$addr$1 = $val; while (0);
 $n$085 = 0;
 L13 : while (1) {
  switch (HEAP8[$val$addr$1 + $n$085 >> 0] | 0) {
  case 47:
  case 0:
   {
    $n$0$lcssa = $n$085;
    break L13;
    break;
   }
  default:
   {}
  }
  $n$085 = $n$085 + 1 | 0;
  if ($n$085 >>> 0 >= 15) {
   $n$0$lcssa = 15;
   break;
  }
 }
 $5 = HEAP8[$val$addr$1 >> 0] | 0;
 if ($5 << 24 >> 24 == 46) {
  $val$addr$290 = 38502;
  label = 15;
 } else if (!(HEAP8[$val$addr$1 + $n$0$lcssa >> 0] | 0)) if ($5 << 24 >> 24 == 67) {
  $val$addr$290 = $val$addr$1;
  label = 15;
 } else {
  $val$addr$291 = $val$addr$1;
  label = 16;
 } else {
  $val$addr$290 = 38502;
  label = 15;
 }
 if ((label | 0) == 15) if (!(HEAP8[$val$addr$290 + 1 >> 0] | 0)) {
  $val$addr$292 = $val$addr$290;
  label = 18;
 } else {
  $val$addr$291 = $val$addr$290;
  label = 16;
 }
 L22 : do if ((label | 0) == 16) if (!(_strcmp($val$addr$291, 38502) | 0)) {
  $val$addr$292 = $val$addr$291;
  label = 18;
 } else if (!(_strcmp($val$addr$291, 38510) | 0)) {
  $val$addr$292 = $val$addr$291;
  label = 18;
 } else {
  $9 = HEAP32[15033] | 0;
  if ($9 | 0) {
   $p$084 = $9;
   do {
    if (!(_strcmp($val$addr$291, $p$084 + 8 | 0) | 0)) {
     $retval$0 = $p$084;
     break L22;
    }
    $p$084 = HEAP32[$p$084 + 24 >> 2] | 0;
   } while (($p$084 | 0) != 0);
  }
  ___lock(60136);
  $11 = HEAP32[15033] | 0;
  L32 : do if ($11 | 0) {
   $p$182 = $11;
   while (1) {
    if (!(_strcmp($val$addr$291, $p$182 + 8 | 0) | 0)) break;
    $12 = HEAP32[$p$182 + 24 >> 2] | 0;
    if (!$12) break L32; else $p$182 = $12;
   }
   ___unlock(60136);
   $retval$0 = $p$182;
   break L22;
  } while (0);
  L39 : do if (!(HEAP32[15011] | 0)) {
   $call84 = _getenv(38516) | 0;
   if (!$call84) label = 41; else if (!(HEAP8[$call84 >> 0] | 0)) label = 41; else {
    $sub96 = 254 - $n$0$lcssa | 0;
    $add = $n$0$lcssa + 1 | 0;
    $path$180 = $call84;
    while (1) {
     $call91 = ___strchrnul($path$180, 58) | 0;
     $15 = HEAP8[$call91 >> 0] | 0;
     $sub = $call91 - $path$180 + (($15 << 24 >> 24 != 0) << 31 >> 31) | 0;
     if ($sub >>> 0 < $sub96 >>> 0) {
      _memcpy($buf | 0, $path$180 | 0, $sub | 0) | 0;
      $arrayidx103 = $buf + $sub | 0;
      HEAP8[$arrayidx103 >> 0] = 47;
      _memcpy($arrayidx103 + 1 | 0, $val$addr$291 | 0, $n$0$lcssa | 0) | 0;
      HEAP8[$buf + ($add + $sub) >> 0] = 0;
      $call110 = ___map_file($buf | 0, $map_size | 0) | 0;
      if ($call110 | 0) break;
      $18 = HEAP8[$call91 >> 0] | 0;
     } else $18 = $15;
     $path$180 = $call91 + ($18 << 24 >> 24 != 0 & 1) | 0;
     if (!(HEAP8[$path$180 >> 0] | 0)) {
      label = 41;
      break L39;
     }
    }
    $call113 = _malloc(28) | 0;
    if (!$call113) {
     ___munmap($call110, HEAP32[$map_size >> 2] | 0) | 0;
     label = 41;
     break;
    } else {
     HEAP32[$call113 >> 2] = $call110;
     HEAP32[$call113 + 4 >> 2] = HEAP32[$map_size >> 2];
     $name120 = $call113 + 8 | 0;
     _memcpy($name120 | 0, $val$addr$291 | 0, $n$0$lcssa | 0) | 0;
     HEAP8[$name120 + $n$0$lcssa >> 0] = 0;
     HEAP32[$call113 + 24 >> 2] = HEAP32[15033];
     HEAP32[15033] = $call113;
     $new$4 = $call113;
     break;
    }
   }
  } else label = 41; while (0);
  if ((label | 0) == 41) {
   $call139 = _malloc(28) | 0;
   if (!$call139) $new$4 = $call139; else {
    HEAP32[$call139 >> 2] = HEAP32[4488];
    HEAP32[$call139 + 4 >> 2] = HEAP32[4489];
    $name144 = $call139 + 8 | 0;
    _memcpy($name144 | 0, $val$addr$291 | 0, $n$0$lcssa | 0) | 0;
    HEAP8[$name144 + $n$0$lcssa >> 0] = 0;
    HEAP32[$call139 + 24 >> 2] = HEAP32[15033];
    HEAP32[15033] = $call139;
    $new$4 = $call139;
   }
  }
  ___unlock(60136);
  $retval$0 = ($cat | 0) == 0 & ($new$4 | 0) == 0 ? 17952 : $new$4;
 } while (0);
 do if ((label | 0) == 18) {
  if (!$cat) if ((HEAP8[$val$addr$292 + 1 >> 0] | 0) == 46) {
   $retval$0 = 17952;
   break;
  }
  $retval$0 = 0;
 } while (0);
 STACKTOP = sp;
 return $retval$0 | 0;
}

function __ZNKSt3__29money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEcRKNS_12basic_stringIcS3_NS_9allocatorIcEEEE($this, $__s, $__intl, $__iob, $__fl, $__digits) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__intl = $__intl | 0;
 $__iob = $__iob | 0;
 $__fl = $__fl | 0;
 $__digits = $__digits | 0;
 var $0 = 0, $11 = 0, $13 = 0, $15 = 0, $23 = 0, $24 = 0, $3 = 0, $5 = 0, $6 = 0, $8 = 0, $9 = 0, $__dp = 0, $__fd = 0, $__grp = 0, $__h$sroa$0$0 = 0, $__i$0$i$i = 0, $__i$0$i$i19 = 0, $__i$0$i$i27 = 0, $__loc = 0, $__mb$0 = 0, $__mbuf = 0, $__me = 0, $__mi = 0, $__pat = 0, $__size_$i$i = 0, $__size_$i3$i = 0, $__sn = 0, $__sym = 0, $__ts = 0, $add19$sink = 0, $add21 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call$i = 0, $call24 = 0, $call34 = 0, $cond$i$i118 = 0, $cond$i42 = 0, $cond$i88$sink = 0, $cond$i97$sink = 0, $tobool$i$i = 0, $tobool$i$i37 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(176);
 $agg$tmp$byval_copy = sp + 156 | 0;
 $__loc = sp + 152 | 0;
 $__pat = sp + 164 | 0;
 $__dp = sp + 161 | 0;
 $__ts = sp + 160 | 0;
 $__grp = sp + 140 | 0;
 $__sym = sp + 128 | 0;
 $__sn = sp + 116 | 0;
 $__fd = sp + 112 | 0;
 $__mbuf = sp;
 $__mi = sp + 108 | 0;
 $__me = sp + 104 | 0;
 $agg$tmp = sp + 100 | 0;
 __ZNKSt3__28ios_base6getlocEv($__loc, $__iob);
 $call$i = __ZNKSt3__26locale9use_facetERNS0_2idE($__loc, 61216) | 0;
 $__size_$i$i = $__digits + 11 | 0;
 $0 = HEAP8[$__size_$i$i >> 0] | 0;
 $tobool$i$i = $0 << 24 >> 24 < 0;
 $__size_$i3$i = $__digits + 4 | 0;
 if (!(($tobool$i$i ? HEAP32[$__size_$i3$i >> 2] | 0 : $0 & 255) | 0)) $5 = 0; else {
  $3 = HEAP8[($tobool$i$i ? HEAP32[$__digits >> 2] | 0 : $__digits) >> 0] | 0;
  $5 = $3 << 24 >> 24 == (FUNCTION_TABLE_iii[HEAP32[(HEAP32[$call$i >> 2] | 0) + 28 >> 2] & 31]($call$i, 45) | 0) << 24 >> 24;
 };
 HEAP32[$__grp >> 2] = 0;
 HEAP32[$__grp + 4 >> 2] = 0;
 HEAP32[$__grp + 8 >> 2] = 0;
 $__i$0$i$i = 0;
 while (1) {
  if (($__i$0$i$i | 0) == 3) break;
  HEAP32[$__grp + ($__i$0$i$i << 2) >> 2] = 0;
  $__i$0$i$i = $__i$0$i$i + 1 | 0;
 }
 HEAP32[$__sym >> 2] = 0;
 HEAP32[$__sym + 4 >> 2] = 0;
 HEAP32[$__sym + 8 >> 2] = 0;
 $__i$0$i$i19 = 0;
 while (1) {
  if (($__i$0$i$i19 | 0) == 3) break;
  HEAP32[$__sym + ($__i$0$i$i19 << 2) >> 2] = 0;
  $__i$0$i$i19 = $__i$0$i$i19 + 1 | 0;
 }
 HEAP32[$__sn >> 2] = 0;
 HEAP32[$__sn + 4 >> 2] = 0;
 HEAP32[$__sn + 8 >> 2] = 0;
 $__i$0$i$i27 = 0;
 while (1) {
  if (($__i$0$i$i27 | 0) == 3) break;
  HEAP32[$__sn + ($__i$0$i$i27 << 2) >> 2] = 0;
  $__i$0$i$i27 = $__i$0$i$i27 + 1 | 0;
 }
 __ZNSt3__211__money_putIcE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_Ri($__intl, $5, $__loc, $__pat, $__dp, $__ts, $__grp, $__sym, $__sn, $__fd);
 $6 = HEAP8[$__size_$i$i >> 0] | 0;
 $tobool$i$i37 = $6 << 24 >> 24 < 0;
 $cond$i42 = $tobool$i$i37 ? HEAP32[$__size_$i3$i >> 2] | 0 : $6 & 255;
 $8 = HEAP32[$__fd >> 2] | 0;
 if (($cond$i42 | 0) > ($8 | 0)) {
  $9 = HEAP8[$__sn + 11 >> 0] | 0;
  $11 = HEAP8[$__sym + 11 >> 0] | 0;
  $add19$sink = $8 + 1 + ($cond$i42 - $8 << 1) | 0;
  $cond$i88$sink = $11 << 24 >> 24 < 0 ? HEAP32[$__sym + 4 >> 2] | 0 : $11 & 255;
  $cond$i97$sink = $9 << 24 >> 24 < 0 ? HEAP32[$__sn + 4 >> 2] | 0 : $9 & 255;
 } else {
  $13 = HEAP8[$__sn + 11 >> 0] | 0;
  $15 = HEAP8[$__sym + 11 >> 0] | 0;
  $add19$sink = $8 + 2 | 0;
  $cond$i88$sink = $15 << 24 >> 24 < 0 ? HEAP32[$__sym + 4 >> 2] | 0 : $15 & 255;
  $cond$i97$sink = $13 << 24 >> 24 < 0 ? HEAP32[$__sn + 4 >> 2] | 0 : $13 & 255;
 }
 $add21 = $add19$sink + $cond$i97$sink + $cond$i88$sink | 0;
 if ($add21 >>> 0 > 100) {
  $call24 = _malloc($add21) | 0;
  if (!$call24) __ZSt17__throw_bad_allocv(); else {
   $__h$sroa$0$0 = $call24;
   $__mb$0 = $call24;
  }
 } else {
  $__h$sroa$0$0 = 0;
  $__mb$0 = $__mbuf;
 }
 $cond$i$i118 = $tobool$i$i37 ? HEAP32[$__digits >> 2] | 0 : $__digits;
 __ZNSt3__211__money_putIcE8__formatEPcRS2_S3_jPKcS5_RKNS_5ctypeIcEEbRKNS_10money_base7patternEccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESL_SL_i($__mb$0, $__mi, $__me, HEAP32[$__iob + 4 >> 2] | 0, $cond$i$i118, $cond$i$i118 + $cond$i42 | 0, $call$i, $5, $__pat, HEAP8[$__dp >> 0] | 0, HEAP8[$__ts >> 0] | 0, $__grp, $__sym, $__sn, $8);
 HEAP32[$agg$tmp >> 2] = HEAP32[$__s >> 2];
 $23 = HEAP32[$__mi >> 2] | 0;
 $24 = HEAP32[$__me >> 2] | 0;
 HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 $call34 = __ZNSt3__216__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$tmp$byval_copy, $__mb$0, $23, $24, $__iob, $__fl) | 0;
 if ($__h$sroa$0$0 | 0) _free($__h$sroa$0$0);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__sn);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__sym);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grp);
 __ZNSt3__26localeD2Ev($__loc);
 STACKTOP = sp;
 return $call34 | 0;
}

function __ZNSt3__26__treeINS_12__value_typeIiPN4tson4TileEEENS_19__map_value_compareIiS5_NS_4lessIiEELb1EEENS_9allocatorIS5_EEE14__assign_multiINS_21__tree_const_iteratorIS5_PNS_11__tree_nodeIS5_PvEElEEEEvT_SK_($this, $__first, $__last) {
 $this = $this | 0;
 $__first = $__first | 0;
 $__last = $__last | 0;
 var $$in = 0, $$in62 = 0, $1 = 0, $10 = 0, $11 = 0, $14 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $26 = 0, $27 = 0, $6 = 0, $7 = 0, $8 = 0, $__cache$055 = 0, $__cache$2$lcssa = 0, $__cc$i$i$i = 0, $__parent$i = 0, $__parent_$i410$i$i = 0, $__parent_$i410$i$i35 = 0, $__parent_$i47$i$i30 = 0, $__x$addr$0$i$i$i = 0, $__x$addr$0$i$i$i25 = 0, $call$i$i$i$i = 0, $call$i$i$i15 = 0, $call11 = 0, $call2 = 0, $call2$i1920 = 0, $retval$0$i$i = 0, $retval$0$i$i40 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $__parent$i = sp;
 L1 : do if (HEAP32[$this + 8 >> 2] | 0) {
  $call2 = __ZNSt3__26__treeINS_12__value_typeIiPN4tson4TileEEENS_19__map_value_compareIiS5_NS_4lessIiEELb1EEENS_9allocatorIS5_EEE8__detachEv($this) | 0;
  if ($call2 | 0) {
   $1 = HEAP32[$__last >> 2] | 0;
   $$in = HEAP32[$__first >> 2] | 0;
   $__cache$055 = $call2;
   while (1) {
    if (($$in | 0) == ($1 | 0)) break;
    $call$i$i$i15 = __ZNSt3__29__launderIKNS_4pairIKiPN4tson4TileEEEEEPT_S9_($$in + 16 | 0) | 0;
    $__cc$i$i$i = $__cache$055 + 16 | 0;
    $call$i$i$i$i = __ZNSt3__29__launderINS_4pairIKiPN4tson4TileEEEEEPT_S8_($__cc$i$i$i) | 0;
    HEAP32[$call$i$i$i$i >> 2] = HEAP32[$call$i$i$i15 >> 2];
    HEAP32[$call$i$i$i$i + 4 >> 2] = HEAP32[$call$i$i$i15 + 4 >> 2];
    $call11 = __ZNSt3__26__treeINS_12__value_typeIiPN4tson4TileEEENS_19__map_value_compareIiS5_NS_4lessIiEELb1EEENS_9allocatorIS5_EEE8__detachEPNS_11__tree_nodeIS5_PvEE($__cache$055) | 0;
    $call2$i1920 = __ZNSt3__26__treeINS_12__value_typeIiPN4tson4TileEEENS_19__map_value_compareIiS5_NS_4lessIiEELb1EEENS_9allocatorIS5_EEE16__find_leaf_highERPNS_15__tree_end_nodeIPNS_16__tree_node_baseIPvEEEERKi($this, $__parent$i, __ZNSt3__29__launderIKNS_4pairIKiPN4tson4TileEEEEEPT_S9_($__cc$i$i$i) | 0) | 0;
    __ZNSt3__26__treeINS_12__value_typeIiPN4tson4TileEEENS_19__map_value_compareIiS5_NS_4lessIiEELb1EEENS_9allocatorIS5_EEE16__insert_node_atEPNS_15__tree_end_nodeIPNS_16__tree_node_baseIPvEEEERSH_SH_($this, HEAP32[$__parent$i >> 2] | 0, $call2$i1920, $__cache$055);
    $6 = HEAP32[$$in + 4 >> 2] | 0;
    if (!$6) {
     $__parent_$i47$i$i30 = $$in + 8 | 0;
     $8 = HEAP32[$__parent_$i47$i$i30 >> 2] | 0;
     if ((HEAP32[$8 >> 2] | 0) == ($$in | 0)) $retval$0$i$i40 = $8; else {
      $__parent_$i410$i$i35 = $__parent_$i47$i$i30;
      do {
       $10 = HEAP32[$__parent_$i410$i$i35 >> 2] | 0;
       $__parent_$i410$i$i35 = $10 + 8 | 0;
       $11 = HEAP32[$__parent_$i410$i$i35 >> 2] | 0;
      } while ((HEAP32[$11 >> 2] | 0) != ($10 | 0));
      $retval$0$i$i40 = $11;
     }
    } else {
     $__x$addr$0$i$i$i25 = $6;
     while (1) {
      $7 = HEAP32[$__x$addr$0$i$i$i25 >> 2] | 0;
      if (!$7) break; else $__x$addr$0$i$i$i25 = $7;
     }
     $retval$0$i$i40 = $__x$addr$0$i$i$i25;
    }
    HEAP32[$__first >> 2] = $retval$0$i$i40;
    if (!$call11) break L1; else {
     $$in = $retval$0$i$i40;
     $__cache$055 = $call11;
    }
   }
   $14 = HEAP32[$__cache$055 + 8 >> 2] | 0;
   if (!$14) $__cache$2$lcssa = $__cache$055; else {
    $16 = $14;
    while (1) {
     $17 = HEAP32[$16 + 8 >> 2] | 0;
     if (!$17) break; else $16 = $17;
    }
    $__cache$2$lcssa = $16;
   }
   __ZNSt3__26__treeINS_12__value_typeIiPN4tson4TileEEENS_19__map_value_compareIiS5_NS_4lessIiEELb1EEENS_9allocatorIS5_EEE7destroyEPNS_11__tree_nodeIS5_PvEE($this, $__cache$2$lcssa);
  }
 } while (0);
 $18 = HEAP32[$__first >> 2] | 0;
 $19 = HEAP32[$__last >> 2] | 0;
 if (($18 | 0) != ($19 | 0)) {
  $$in62 = $18;
  while (1) {
   __ZNSt3__26__treeINS_12__value_typeIiPN4tson4TileEEENS_19__map_value_compareIiS5_NS_4lessIiEELb1EEENS_9allocatorIS5_EEE15__emplace_multiIJRKNS_4pairIKiS4_EEEEENS_15__tree_iteratorIS5_PNS_11__tree_nodeIS5_PvEElEEDpOT_($this, __ZNSt3__29__launderIKNS_4pairIKiPN4tson4TileEEEEEPT_S9_($$in62 + 16 | 0) | 0) | 0;
   $21 = HEAP32[$$in62 + 4 >> 2] | 0;
   if (!$21) {
    $23 = $$in62 + 8 | 0;
    $24 = HEAP32[$23 >> 2] | 0;
    if ((HEAP32[$24 >> 2] | 0) == ($$in62 | 0)) $retval$0$i$i = $24; else {
     $__parent_$i410$i$i = $23;
     do {
      $26 = HEAP32[$__parent_$i410$i$i >> 2] | 0;
      $__parent_$i410$i$i = $26 + 8 | 0;
      $27 = HEAP32[$__parent_$i410$i$i >> 2] | 0;
     } while ((HEAP32[$27 >> 2] | 0) != ($26 | 0));
     $retval$0$i$i = $27;
    }
   } else {
    $__x$addr$0$i$i$i = $21;
    while (1) {
     $22 = HEAP32[$__x$addr$0$i$i$i >> 2] | 0;
     if (!$22) break; else $__x$addr$0$i$i$i = $22;
    }
    $retval$0$i$i = $__x$addr$0$i$i$i;
   }
   HEAP32[$__first >> 2] = $retval$0$i$i;
   if (($retval$0$i$i | 0) == ($19 | 0)) break; else $$in62 = $retval$0$i$i;
  }
 }
 STACKTOP = sp;
 return;
}

function __ZNKSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe($this, $__b, $__e, $__intl, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__intl = $__intl | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $11 = 0, $12 = 0, $16 = 0, $17 = 0, $21 = 0, $22 = 0, $27 = 0, $29 = 0, $3 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $__first$addr$0$i = 0, $__first$addr$0$lcssa$i = 0, $__h$sroa$0$0 = 0, $__loc = 0, $__nbuf = 0, $__nc$0 = 0, $__nc$1 = 0, $__nc$2 = 0, $__neg = 0, $__w$0 = 0, $__wb = 0, $__wbuf = 0, $__wn = 0, $add$ptr$i = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call$i = 0, $call16 = 0, $retval$0$i$i$i$i = 0, $retval$0$i$i13$i$i = 0, $retval$sroa$0$0$copyload = 0, $sub$ptr$rhs$cast32 = 0, $sub$ptr$sub = 0, $vararg_buffer = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 592 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(592);
 $agg$tmp$byval_copy = sp + 512 | 0;
 $vararg_buffer = sp + 552 | 0;
 $__wbuf = sp + 112 | 0;
 $__wb = sp + 568 | 0;
 $__wn = sp + 564 | 0;
 $__loc = sp + 560 | 0;
 $__neg = sp + 576 | 0;
 $agg$tmp = sp + 556 | 0;
 $__nbuf = sp;
 HEAP32[$__wb >> 2] = $__wbuf;
 HEAP32[$__wb + 4 >> 2] = 153;
 __ZNKSt3__28ios_base6getlocEv($__loc, $__iob);
 $call$i = __ZNKSt3__26locale9use_facetERNS0_2idE($__loc, 61248) | 0;
 HEAP8[$__neg >> 0] = 0;
 HEAP32[$agg$tmp >> 2] = HEAP32[$__e >> 2];
 $3 = HEAP32[$__iob + 4 >> 2] | 0;
 HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 if (__ZNSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIwEERNS_10unique_ptrIwPFvPvEEERPwSM_($__b, $agg$tmp$byval_copy, $__intl, $__loc, $3, $__err, $__neg, $call$i, $__wb, $__wn, $__wbuf + 400 | 0) | 0) {
  FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[$call$i >> 2] | 0) + 48 >> 2] & 15]($call$i, 44232, 44242, $agg$tmp$byval_copy) | 0;
  $5 = HEAP32[$__wn >> 2] | 0;
  $6 = HEAP32[$__wb >> 2] | 0;
  $sub$ptr$sub = $5 - $6 | 0;
  $7 = $6;
  $8 = $5;
  if (($sub$ptr$sub | 0) > 392) {
   $call16 = _malloc(($sub$ptr$sub >>> 2) + 2 | 0) | 0;
   if (!$call16) __ZSt17__throw_bad_allocv(); else {
    $__h$sroa$0$0 = $call16;
    $__nc$0 = $call16;
   }
  } else {
   $__h$sroa$0$0 = 0;
   $__nc$0 = $__nbuf;
  }
  if (!(HEAP8[$__neg >> 0] | 0)) $__nc$1 = $__nc$0; else {
   HEAP8[$__nc$0 >> 0] = 45;
   $__nc$1 = $__nc$0 + 1 | 0;
  }
  $add$ptr$i = $agg$tmp$byval_copy + 40 | 0;
  $sub$ptr$rhs$cast32 = $agg$tmp$byval_copy;
  $11 = $8;
  $__nc$2 = $__nc$1;
  $__w$0 = $7;
  while (1) {
   if ($__w$0 >>> 0 >= $11 >>> 0) break;
   $12 = HEAP32[$__w$0 >> 2] | 0;
   $__first$addr$0$i = $agg$tmp$byval_copy;
   while (1) {
    if (($__first$addr$0$i | 0) == ($add$ptr$i | 0)) {
     $__first$addr$0$lcssa$i = $add$ptr$i;
     break;
    }
    if ((HEAP32[$__first$addr$0$i >> 2] | 0) == ($12 | 0)) {
     $__first$addr$0$lcssa$i = $__first$addr$0$i;
     break;
    }
    $__first$addr$0$i = $__first$addr$0$i + 4 | 0;
   }
   HEAP8[$__nc$2 >> 0] = HEAP8[44232 + ($__first$addr$0$lcssa$i - $sub$ptr$rhs$cast32 >> 2) >> 0] | 0;
   $11 = HEAP32[$__wn >> 2] | 0;
   $__nc$2 = $__nc$2 + 1 | 0;
   $__w$0 = $__w$0 + 4 | 0;
  }
  HEAP8[$__nc$2 >> 0] = 0;
  HEAP32[$vararg_buffer >> 2] = $__v;
  if ((_sscanf($__nbuf, 44133, $vararg_buffer) | 0) != 1) __ZNSt3__221__throw_runtime_errorEPKc(0);
  if ($__h$sroa$0$0 | 0) _free($__h$sroa$0$0);
 }
 $16 = HEAP32[$__b >> 2] | 0;
 do if (!$16) $29 = 1; else {
  $17 = HEAP32[$16 + 12 >> 2] | 0;
  if (($17 | 0) == (HEAP32[$16 + 16 >> 2] | 0)) $retval$0$i$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$16 >> 2] | 0) + 36 >> 2] & 127]($16) | 0; else $retval$0$i$i$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$17 >> 2] | 0) | 0;
  if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i$i$i, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
   HEAP32[$__b >> 2] = 0;
   $29 = 1;
   break;
  } else {
   $29 = (HEAP32[$__b >> 2] | 0) == 0;
   break;
  }
 } while (0);
 $21 = HEAP32[$__e >> 2] | 0;
 do if (!$21) label = 32; else {
  $22 = HEAP32[$21 + 12 >> 2] | 0;
  if (($22 | 0) == (HEAP32[$21 + 16 >> 2] | 0)) $retval$0$i$i13$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$21 >> 2] | 0) + 36 >> 2] & 127]($21) | 0; else $retval$0$i$i13$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$22 >> 2] | 0) | 0;
  if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i13$i$i, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
   HEAP32[$__e >> 2] = 0;
   label = 32;
   break;
  } else if ($29) break; else {
   label = 34;
   break;
  }
 } while (0);
 if ((label | 0) == 32) if ($29) label = 34;
 if ((label | 0) == 34) HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
 $retval$sroa$0$0$copyload = HEAP32[$__b >> 2] | 0;
 __ZNSt3__26localeD2Ev($__loc);
 $27 = HEAP32[$__wb >> 2] | 0;
 HEAP32[$__wb >> 2] = 0;
 if ($27 | 0) FUNCTION_TABLE_vi[HEAP32[$__wb + 4 >> 2] & 255]($27);
 STACKTOP = sp;
 return $retval$sroa$0$0$copyload | 0;
}

function __ZNKSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe($this, $__b, $__e, $__intl, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__intl = $__intl | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $11 = 0, $12 = 0, $16 = 0, $17 = 0, $21 = 0, $22 = 0, $27 = 0, $29 = 0, $3 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $__first$addr$0$i = 0, $__first$addr$0$lcssa$i = 0, $__h$sroa$0$0 = 0, $__loc = 0, $__nbuf = 0, $__nc$0 = 0, $__nc$1 = 0, $__nc$2 = 0, $__neg = 0, $__w$0 = 0, $__wb = 0, $__wbuf = 0, $__wn = 0, $add$ptr$i = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call$i = 0, $call15 = 0, $retval$0$i$i$i$i = 0, $retval$0$i$i13$i$i = 0, $retval$sroa$0$0$copyload = 0, $sub$ptr$rhs$cast31 = 0, $sub$ptr$sub = 0, $vararg_buffer = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(256);
 $agg$tmp$byval_copy = sp + 240 | 0;
 $vararg_buffer = sp + 216 | 0;
 $__wbuf = sp + 112 | 0;
 $__wb = sp + 232 | 0;
 $__wn = sp + 228 | 0;
 $__loc = sp + 224 | 0;
 $__neg = sp + 250 | 0;
 $agg$tmp = sp + 220 | 0;
 $__nbuf = sp;
 HEAP32[$__wb >> 2] = $__wbuf;
 HEAP32[$__wb + 4 >> 2] = 153;
 __ZNKSt3__28ios_base6getlocEv($__loc, $__iob);
 $call$i = __ZNKSt3__26locale9use_facetERNS0_2idE($__loc, 61216) | 0;
 HEAP8[$__neg >> 0] = 0;
 HEAP32[$agg$tmp >> 2] = HEAP32[$__e >> 2];
 $3 = HEAP32[$__iob + 4 >> 2] | 0;
 HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 if (__ZNSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIcEERNS_10unique_ptrIcPFvPvEEERPcSM_($__b, $agg$tmp$byval_copy, $__intl, $__loc, $3, $__err, $__neg, $call$i, $__wb, $__wn, $__wbuf + 100 | 0) | 0) {
  FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[$call$i >> 2] | 0) + 32 >> 2] & 15]($call$i, 44122, 44132, $agg$tmp$byval_copy) | 0;
  $5 = HEAP32[$__wn >> 2] | 0;
  $6 = HEAP32[$__wb >> 2] | 0;
  $sub$ptr$sub = $5 - $6 | 0;
  $7 = $6;
  $8 = $5;
  if (($sub$ptr$sub | 0) > 98) {
   $call15 = _malloc($sub$ptr$sub + 2 | 0) | 0;
   if (!$call15) __ZSt17__throw_bad_allocv(); else {
    $__h$sroa$0$0 = $call15;
    $__nc$0 = $call15;
   }
  } else {
   $__h$sroa$0$0 = 0;
   $__nc$0 = $__nbuf;
  }
  if (!(HEAP8[$__neg >> 0] | 0)) $__nc$1 = $__nc$0; else {
   HEAP8[$__nc$0 >> 0] = 45;
   $__nc$1 = $__nc$0 + 1 | 0;
  }
  $add$ptr$i = $agg$tmp$byval_copy + 10 | 0;
  $sub$ptr$rhs$cast31 = $agg$tmp$byval_copy;
  $11 = $8;
  $__nc$2 = $__nc$1;
  $__w$0 = $7;
  while (1) {
   if ($__w$0 >>> 0 >= $11 >>> 0) break;
   $12 = HEAP8[$__w$0 >> 0] | 0;
   $__first$addr$0$i = $agg$tmp$byval_copy;
   while (1) {
    if (($__first$addr$0$i | 0) == ($add$ptr$i | 0)) {
     $__first$addr$0$lcssa$i = $add$ptr$i;
     break;
    }
    if ((HEAP8[$__first$addr$0$i >> 0] | 0) == $12 << 24 >> 24) {
     $__first$addr$0$lcssa$i = $__first$addr$0$i;
     break;
    }
    $__first$addr$0$i = $__first$addr$0$i + 1 | 0;
   }
   HEAP8[$__nc$2 >> 0] = HEAP8[44122 + ($__first$addr$0$lcssa$i - $sub$ptr$rhs$cast31) >> 0] | 0;
   $11 = HEAP32[$__wn >> 2] | 0;
   $__nc$2 = $__nc$2 + 1 | 0;
   $__w$0 = $__w$0 + 1 | 0;
  }
  HEAP8[$__nc$2 >> 0] = 0;
  HEAP32[$vararg_buffer >> 2] = $__v;
  if ((_sscanf($__nbuf, 44133, $vararg_buffer) | 0) != 1) __ZNSt3__221__throw_runtime_errorEPKc(0);
  if ($__h$sroa$0$0 | 0) _free($__h$sroa$0$0);
 }
 $16 = HEAP32[$__b >> 2] | 0;
 do if (!$16) $29 = 1; else {
  $17 = HEAP32[$16 + 12 >> 2] | 0;
  if (($17 | 0) == (HEAP32[$16 + 16 >> 2] | 0)) $retval$0$i$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$16 >> 2] | 0) + 36 >> 2] & 127]($16) | 0; else $retval$0$i$i$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$17 >> 0] | 0) | 0;
  if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i$i$i, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
   HEAP32[$__b >> 2] = 0;
   $29 = 1;
   break;
  } else {
   $29 = (HEAP32[$__b >> 2] | 0) == 0;
   break;
  }
 } while (0);
 $21 = HEAP32[$__e >> 2] | 0;
 do if (!$21) label = 32; else {
  $22 = HEAP32[$21 + 12 >> 2] | 0;
  if (($22 | 0) == (HEAP32[$21 + 16 >> 2] | 0)) $retval$0$i$i13$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$21 >> 2] | 0) + 36 >> 2] & 127]($21) | 0; else $retval$0$i$i13$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$22 >> 0] | 0) | 0;
  if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i13$i$i, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
   HEAP32[$__e >> 2] = 0;
   label = 32;
   break;
  } else if ($29) break; else {
   label = 34;
   break;
  }
 } while (0);
 if ((label | 0) == 32) if ($29) label = 34;
 if ((label | 0) == 34) HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
 $retval$sroa$0$0$copyload = HEAP32[$__b >> 2] | 0;
 __ZNSt3__26localeD2Ev($__loc);
 $27 = HEAP32[$__wb >> 2] | 0;
 HEAP32[$__wb >> 2] = 0;
 if ($27 | 0) FUNCTION_TABLE_vi[HEAP32[$__wb + 4 >> 2] & 255]($27);
 STACKTOP = sp;
 return $retval$sroa$0$0$copyload | 0;
}

function __ZNSt3__2L13utf8_to_utf16EPKhS1_RS1_PtS3_RS3_mNS_12codecvt_modeE($frm, $frm_end, $frm_nxt, $to, $to_end, $to_nxt, $Maxcode, $mode) {
 $frm = $frm | 0;
 $frm_end = $frm_end | 0;
 $frm_nxt = $frm_nxt | 0;
 $to = $to | 0;
 $to_end = $to_end | 0;
 $to_nxt = $to_nxt | 0;
 $Maxcode = $Maxcode | 0;
 $mode = $mode | 0;
 var $0 = 0, $14 = 0, $15 = 0, $16 = 0, $4 = 0, $5 = 0, $6 = 0, $8 = 0, $9 = 0, $add$ptr202$sink = 0, $and161 = 0, $and167 = 0, $and171 = 0, $conv14 = 0, $conv146 = 0, $conv149 = 0, $conv163 = 0, $conv36 = 0, $conv82 = 0, $incdec$ptr201 = 0, $or = 0, $or97 = 0, $retval$8 = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$lhs$cast154 = 0, $sub$ptr$lhs$cast29$pre$phiZZZZ2D = 0;
 HEAP32[$frm_nxt >> 2] = $frm;
 HEAP32[$to_nxt >> 2] = $to;
 if (!($mode & 4)) $sub$ptr$lhs$cast29$pre$phiZZZZ2D = $frm_end; else {
  $0 = HEAP32[$frm_nxt >> 2] | 0;
  $sub$ptr$lhs$cast = $frm_end;
  if (($sub$ptr$lhs$cast - $0 | 0) > 2) if ((HEAP8[$0 >> 0] | 0) == -17) if ((HEAP8[$0 + 1 >> 0] | 0) == -69) if ((HEAP8[$0 + 2 >> 0] | 0) == -65) {
   HEAP32[$frm_nxt >> 2] = $0 + 3;
   $sub$ptr$lhs$cast29$pre$phiZZZZ2D = $sub$ptr$lhs$cast;
  } else $sub$ptr$lhs$cast29$pre$phiZZZZ2D = $sub$ptr$lhs$cast; else $sub$ptr$lhs$cast29$pre$phiZZZZ2D = $sub$ptr$lhs$cast; else $sub$ptr$lhs$cast29$pre$phiZZZZ2D = $sub$ptr$lhs$cast; else $sub$ptr$lhs$cast29$pre$phiZZZZ2D = $sub$ptr$lhs$cast;
 }
 $sub$ptr$lhs$cast154 = $to_end;
 L9 : while (1) {
  $4 = HEAP32[$frm_nxt >> 2] | 0;
  if ($4 >>> 0 >= $frm_end >>> 0) {
   $retval$8 = 0;
   break;
  }
  $5 = HEAP32[$to_nxt >> 2] | 0;
  if ($5 >>> 0 >= $to_end >>> 0) {
   $retval$8 = 1;
   break;
  }
  $6 = HEAP8[$4 >> 0] | 0;
  $conv14 = $6 & 255;
  if ($conv14 >>> 0 > $Maxcode >>> 0) {
   $retval$8 = 2;
   break;
  }
  do if ($6 << 24 >> 24 > -1) {
   HEAP16[$5 >> 1] = $6 & 255;
   $add$ptr202$sink = $4 + 1 | 0;
  } else {
   if (($6 & 255) < 194) {
    $retval$8 = 2;
    break L9;
   }
   if (($6 & 255) < 224) {
    if (($sub$ptr$lhs$cast29$pre$phiZZZZ2D - $4 | 0) < 2) {
     $retval$8 = 1;
     break L9;
    }
    $conv36 = HEAPU8[$4 + 1 >> 0] | 0;
    if (($conv36 & 192 | 0) != 128) {
     $retval$8 = 2;
     break L9;
    }
    $or = $conv36 & 63 | $conv14 << 6 & 1984;
    if ($or >>> 0 > $Maxcode >>> 0) {
     $retval$8 = 2;
     break L9;
    }
    HEAP16[$5 >> 1] = $or;
    $add$ptr202$sink = $4 + 2 | 0;
    break;
   }
   if (($6 & 255) < 240) {
    if (($sub$ptr$lhs$cast29$pre$phiZZZZ2D - $4 | 0) < 3) {
     $retval$8 = 1;
     break L9;
    }
    $8 = HEAP8[$4 + 1 >> 0] | 0;
    $9 = HEAP8[$4 + 2 >> 0] | 0;
    switch ($6 << 24 >> 24) {
    case -32:
     {
      if (($8 & -32) << 24 >> 24 != -96) {
       $retval$8 = 2;
       break L9;
      }
      break;
     }
    case -19:
     {
      if (($8 & -32) << 24 >> 24 != -128) {
       $retval$8 = 2;
       break L9;
      }
      break;
     }
    default:
     if (($8 & -64) << 24 >> 24 != -128) {
      $retval$8 = 2;
      break L9;
     }
    }
    $conv82 = $9 & 255;
    if (($conv82 & 192 | 0) != 128) {
     $retval$8 = 2;
     break L9;
    }
    $or97 = ($8 & 63) << 6 | $conv14 << 12 | $conv82 & 63;
    if (($or97 & 65535) >>> 0 > $Maxcode >>> 0) {
     $retval$8 = 2;
     break L9;
    }
    HEAP16[$5 >> 1] = $or97;
    $add$ptr202$sink = $4 + 3 | 0;
    break;
   }
   if (($6 & 255) >= 245) {
    $retval$8 = 2;
    break L9;
   }
   if (($sub$ptr$lhs$cast29$pre$phiZZZZ2D - $4 | 0) < 4) {
    $retval$8 = 1;
    break L9;
   }
   $14 = HEAP8[$4 + 1 >> 0] | 0;
   $15 = HEAP8[$4 + 2 >> 0] | 0;
   $16 = HEAP8[$4 + 3 >> 0] | 0;
   switch ($6 << 24 >> 24) {
   case -16:
    {
     if (($14 + 112 & 255) >= 48) {
      $retval$8 = 2;
      break L9;
     }
     break;
    }
   case -12:
    {
     if (($14 & -16) << 24 >> 24 != -128) {
      $retval$8 = 2;
      break L9;
     }
     break;
    }
   default:
    if (($14 & -64) << 24 >> 24 != -128) {
     $retval$8 = 2;
     break L9;
    }
   }
   $conv146 = $15 & 255;
   if (($conv146 & 192 | 0) != 128) {
    $retval$8 = 2;
    break L9;
   }
   $conv149 = $16 & 255;
   if (($conv149 & 192 | 0) != 128) {
    $retval$8 = 2;
    break L9;
   }
   if (($sub$ptr$lhs$cast154 - $5 | 0) < 4) {
    $retval$8 = 1;
    break L9;
   }
   $and161 = $conv14 & 7;
   $conv163 = $14 & 255;
   $and167 = $conv146 << 6;
   $and171 = $conv149 & 63;
   if (($conv163 << 12 & 258048 | $and161 << 18 | $and167 & 4032 | $and171) >>> 0 > $Maxcode >>> 0) {
    $retval$8 = 2;
    break L9;
   }
   HEAP16[$5 >> 1] = $conv163 << 2 & 60 | $conv146 >>> 4 & 3 | (($conv163 >>> 4 & 3 | $and161 << 2) << 6) + 16320 | 55296;
   $incdec$ptr201 = $5 + 2 | 0;
   HEAP32[$to_nxt >> 2] = $incdec$ptr201;
   HEAP16[$incdec$ptr201 >> 1] = $and171 | $and167 & 960 | 56320;
   $add$ptr202$sink = (HEAP32[$frm_nxt >> 2] | 0) + 4 | 0;
  } while (0);
  HEAP32[$frm_nxt >> 2] = $add$ptr202$sink;
  HEAP32[$to_nxt >> 2] = (HEAP32[$to_nxt >> 2] | 0) + 2;
 }
 return $retval$8 | 0;
}

function __ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE4syncEv($this) {
 $this = $this | 0;
 var $1 = 0, $11 = 0, $14 = 0, $19 = 0, $2 = 0, $20 = 0, $31 = 0, $33 = 0, $39 = 0, $41 = 0, $43 = 0, $5 = 0, $51 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $59 = 0, $6 = 0, $64 = 0, $65 = 0, $69 = 0, $7 = 0, $__cm_ = 0, $__cv_ = 0, $__ebs_ = 0, $__extbe = 0, $__extbuf_ = 0, $__extbuf_71 = 0, $__extbufnext_ = 0, $__file_ = 0, $__st_ = 0, $__update_st$1$off0 = 0, $call$i = 0, $call$i18 = 0, $call$i28 = 0, $call10 = 0, $call9 = 0, $exception$i = 0, $mul = 0, $retval$4 = 0, $sub = 0, $sub$ptr$sub = 0, $sub$ptr$sub49 = 0, $sub$ptr$sub55 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $__extbe = sp;
 $__file_ = $this + 64 | 0;
 L1 : do if (!(HEAP32[$__file_ >> 2] | 0)) $retval$4 = 0; else {
  $__cv_ = $this + 68 | 0;
  $1 = HEAP32[$__cv_ >> 2] | 0;
  if (!$1) {
   $exception$i = ___cxa_allocate_exception(4) | 0;
   __ZNSt8bad_castC2Ev($exception$i);
   ___cxa_throw($exception$i | 0, 15872, 38);
  }
  $__cm_ = $this + 92 | 0;
  $2 = HEAP32[$__cm_ >> 2] | 0;
  if (!($2 & 16)) {
   if ($2 & 8 | 0) {
    $14 = $this + 80 | 0;
    $19 = HEAP32[$14 + 4 >> 2] | 0;
    $20 = $__extbe;
    HEAP32[$20 >> 2] = HEAP32[$14 >> 2];
    HEAP32[$20 + 4 >> 2] = $19;
    do if (!(HEAP8[$this + 98 >> 0] | 0)) {
     $call$i28 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$1 >> 2] | 0) + 24 >> 2] & 127]($1) | 0;
     $__extbufnext_ = $this + 36 | 0;
     $31 = HEAP32[$__extbufnext_ >> 2] | 0;
     $sub$ptr$sub55 = (HEAP32[$this + 40 >> 2] | 0) - $31 | 0;
     $33 = (($sub$ptr$sub55 | 0) < 0) << 31 >> 31;
     if (($call$i28 | 0) > 0) {
      $mul = Math_imul((HEAP32[$this + 16 >> 2] | 0) - (HEAP32[$this + 12 >> 2] | 0) | 0, $call$i28) | 0;
      $39 = _i64Add($mul | 0, (($mul | 0) < 0) << 31 >> 31 | 0, $sub$ptr$sub55 | 0, $33 | 0) | 0;
      $54 = $39;
      $55 = getTempRet0() | 0;
      $__update_st$1$off0 = 0;
      break;
     }
     $41 = HEAP32[$this + 12 >> 2] | 0;
     if (($41 | 0) == (HEAP32[$this + 16 >> 2] | 0)) {
      $54 = $sub$ptr$sub55;
      $55 = $33;
      $__update_st$1$off0 = 0;
     } else {
      $43 = HEAP32[$__cv_ >> 2] | 0;
      $__extbuf_71 = $this + 32 | 0;
      $call$i18 = FUNCTION_TABLE_iiiiii[HEAP32[(HEAP32[$43 >> 2] | 0) + 32 >> 2] & 31]($43, $__extbe, HEAP32[$__extbuf_71 >> 2] | 0, $31, $41 - (HEAP32[$this + 8 >> 2] | 0) | 0) | 0;
      $sub = (HEAP32[$__extbufnext_ >> 2] | 0) - $call$i18 - (HEAP32[$__extbuf_71 >> 2] | 0) | 0;
      $51 = _i64Add($sub | 0, (($sub | 0) < 0) << 31 >> 31 | 0, $sub$ptr$sub55 | 0, $33 | 0) | 0;
      $54 = $51;
      $55 = getTempRet0() | 0;
      $__update_st$1$off0 = 1;
     }
    } else {
     $sub$ptr$sub49 = (HEAP32[$this + 16 >> 2] | 0) - (HEAP32[$this + 12 >> 2] | 0) | 0;
     $54 = $sub$ptr$sub49;
     $55 = (($sub$ptr$sub49 | 0) < 0) << 31 >> 31;
     $__update_st$1$off0 = 0;
    } while (0);
    $53 = HEAP32[$__file_ >> 2] | 0;
    $56 = _i64Subtract(0, 0, $54 | 0, $55 | 0) | 0;
    if (___fseeko($53, $56, getTempRet0() | 0, 1) | 0) {
     $retval$4 = -1;
     break;
    }
    if ($__update_st$1$off0) {
     $59 = $__extbe;
     $64 = HEAP32[$59 + 4 >> 2] | 0;
     $65 = $this + 72 | 0;
     HEAP32[$65 >> 2] = HEAP32[$59 >> 2];
     HEAP32[$65 + 4 >> 2] = $64;
    }
    $69 = HEAP32[$this + 32 >> 2] | 0;
    HEAP32[$this + 40 >> 2] = $69;
    HEAP32[$this + 36 >> 2] = $69;
    HEAP32[$this + 8 >> 2] = 0;
    HEAP32[$this + 12 >> 2] = 0;
    HEAP32[$this + 16 >> 2] = 0;
    HEAP32[$__cm_ >> 2] = 0;
   }
  } else {
   if ((HEAP32[$this + 24 >> 2] | 0) != (HEAP32[$this + 20 >> 2] | 0)) {
    $5 = HEAP32[(HEAP32[$this >> 2] | 0) + 52 >> 2] | 0;
    $call9 = __ZNSt3__211char_traitsIcE3eofEv() | 0;
    $call10 = FUNCTION_TABLE_iii[$5 & 31]($this, $call9) | 0;
    if (($call10 | 0) == (__ZNSt3__211char_traitsIcE3eofEv() | 0)) {
     $retval$4 = -1;
     break;
    }
   }
   $__st_ = $this + 72 | 0;
   $__extbuf_ = $this + 32 | 0;
   $__ebs_ = $this + 52 | 0;
   L27 : while (1) {
    $6 = HEAP32[$__cv_ >> 2] | 0;
    $7 = HEAP32[$__extbuf_ >> 2] | 0;
    $call$i = FUNCTION_TABLE_iiiiii[HEAP32[(HEAP32[$6 >> 2] | 0) + 20 >> 2] & 31]($6, $__st_, $7, $7 + (HEAP32[$__ebs_ >> 2] | 0) | 0, $__extbe) | 0;
    $11 = HEAP32[$__extbuf_ >> 2] | 0;
    $sub$ptr$sub = (HEAP32[$__extbe >> 2] | 0) - $11 | 0;
    if ((_fwrite($11, 1, $sub$ptr$sub, HEAP32[$__file_ >> 2] | 0) | 0) != ($sub$ptr$sub | 0)) {
     $retval$4 = -1;
     break L1;
    }
    switch ($call$i | 0) {
    case 2:
     {
      $retval$4 = -1;
      break L1;
      break;
     }
    case 1:
     break;
    default:
     break L27;
    }
   }
   if (_fflush(HEAP32[$__file_ >> 2] | 0) | 0) {
    $retval$4 = -1;
    break;
   }
  }
  $retval$4 = 0;
 } while (0);
 STACKTOP = sp;
 return $retval$4 | 0;
}

function __ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE8overflowEi($this, $__c) {
 $this = $this | 0;
 $__c = $__c | 0;
 var $$pre = 0, $$pre$phiZ2D = 0, $1 = 0, $10 = 0, $13 = 0, $15 = 0, $18 = 0, $2 = 0, $23 = 0, $26 = 0, $5 = 0, $6 = 0, $__1buf = 0, $__bout_$i = 0, $__cv_ = 0, $__e = 0, $__ebs_ = 0, $__eout_$i = 0, $__extbe = 0, $__extbuf_ = 0, $__file_ = 0, $__nout_$i44$phi$trans$insert = 0, $__st_ = 0, $add$ptr$i42 = 0, $call$i = 0, $call11 = 0, $call5 = 0, $exception$i = 0, $retval$6 = 0, $retval$7 = 0, $sub$ptr$sub = 0, $sub$ptr$sub50 = 0, $sub$ptr$sub69 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $__1buf = sp + 8 | 0;
 $__extbe = sp + 4 | 0;
 $__e = sp;
 $__file_ = $this + 64 | 0;
 if (!(HEAP32[$__file_ >> 2] | 0)) $retval$7 = __ZNSt3__211char_traitsIcE3eofEv() | 0; else {
  __ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE12__write_modeEv($this);
  $__bout_$i = $this + 20 | 0;
  $1 = HEAP32[$__bout_$i >> 2] | 0;
  $__eout_$i = $this + 28 | 0;
  $2 = HEAP32[$__eout_$i >> 2] | 0;
  $call5 = __ZNSt3__211char_traitsIcE11eq_int_typeEii($__c, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0;
  $__nout_$i44$phi$trans$insert = $this + 24 | 0;
  $$pre = HEAP32[$__nout_$i44$phi$trans$insert >> 2] | 0;
  if ($call5) $6 = $$pre; else {
   if (!$$pre) {
    HEAP32[$__nout_$i44$phi$trans$insert >> 2] = $__1buf;
    HEAP32[$__bout_$i >> 2] = $__1buf;
    HEAP32[$__eout_$i >> 2] = $__1buf + 1;
   }
   $call11 = __ZNSt3__211char_traitsIcE12to_char_typeEi($__c) | 0;
   HEAP8[HEAP32[$__nout_$i44$phi$trans$insert >> 2] >> 0] = $call11;
   $add$ptr$i42 = (HEAP32[$__nout_$i44$phi$trans$insert >> 2] | 0) + 1 | 0;
   HEAP32[$__nout_$i44$phi$trans$insert >> 2] = $add$ptr$i42;
   $6 = $add$ptr$i42;
  }
  $5 = HEAP32[$__bout_$i >> 2] | 0;
  L10 : do if (($6 | 0) == ($5 | 0)) label = 27; else {
   L12 : do if (!(HEAP8[$this + 98 >> 0] | 0)) {
    $__extbuf_ = $this + 32 | 0;
    HEAP32[$__extbe >> 2] = HEAP32[$__extbuf_ >> 2];
    $__cv_ = $this + 68 | 0;
    $__st_ = $this + 72 | 0;
    $__ebs_ = $this + 52 | 0;
    $10 = HEAP32[$__cv_ >> 2] | 0;
    L14 : do if ($10 | 0) {
     $15 = $10;
     while (1) {
      $13 = HEAP32[$__extbuf_ >> 2] | 0;
      $call$i = FUNCTION_TABLE_iiiiiiiii[HEAP32[(HEAP32[$15 >> 2] | 0) + 12 >> 2] & 15]($15, $__st_, HEAP32[$__bout_$i >> 2] | 0, HEAP32[$__nout_$i44$phi$trans$insert >> 2] | 0, $__e, $13, $13 + (HEAP32[$__ebs_ >> 2] | 0) | 0, $__extbe) | 0;
      $18 = HEAP32[$__bout_$i >> 2] | 0;
      if ((HEAP32[$__e >> 2] | 0) == ($18 | 0)) {
       label = 25;
       break;
      }
      if (($call$i | 0) == 3) {
       label = 17;
       break;
      }
      if ($call$i >>> 0 >= 2) {
       label = 25;
       break;
      }
      $23 = HEAP32[$__extbuf_ >> 2] | 0;
      $sub$ptr$sub69 = (HEAP32[$__extbe >> 2] | 0) - $23 | 0;
      if ((_fwrite($23, 1, $sub$ptr$sub69, HEAP32[$__file_ >> 2] | 0) | 0) != ($sub$ptr$sub69 | 0)) {
       label = 25;
       break;
      }
      if (($call$i | 0) != 1) {
       label = 23;
       break;
      }
      $26 = HEAP32[$__nout_$i44$phi$trans$insert >> 2] | 0;
      HEAP32[$__bout_$i >> 2] = HEAP32[$__e >> 2];
      HEAP32[$__eout_$i >> 2] = $26;
      HEAP32[$__nout_$i44$phi$trans$insert >> 2] = $26;
      $15 = HEAP32[$__cv_ >> 2] | 0;
      if (!$15) break L14;
     }
     if ((label | 0) == 17) {
      $sub$ptr$sub50 = (HEAP32[$__nout_$i44$phi$trans$insert >> 2] | 0) - $18 | 0;
      if ((_fwrite($18, 1, $sub$ptr$sub50, HEAP32[$__file_ >> 2] | 0) | 0) == ($sub$ptr$sub50 | 0)) label = 24; else label = 25;
     } else if ((label | 0) == 23) label = 24;
     if ((label | 0) == 24) {
      $$pre$phiZ2D = $__nout_$i44$phi$trans$insert;
      break L12;
     } else if ((label | 0) == 25) {
      $retval$6 = __ZNSt3__211char_traitsIcE3eofEv() | 0;
      break L10;
     }
    } while (0);
    $exception$i = ___cxa_allocate_exception(4) | 0;
    __ZNSt8bad_castC2Ev($exception$i);
    ___cxa_throw($exception$i | 0, 15872, 38);
   } else {
    $sub$ptr$sub = $6 - $5 | 0;
    if ((_fwrite($5, 1, $sub$ptr$sub, HEAP32[$__file_ >> 2] | 0) | 0) == ($sub$ptr$sub | 0)) {
     $$pre$phiZ2D = $__nout_$i44$phi$trans$insert;
     break;
    } else {
     $retval$6 = __ZNSt3__211char_traitsIcE3eofEv() | 0;
     break L10;
    }
   } while (0);
   HEAP32[$$pre$phiZ2D >> 2] = $1;
   HEAP32[$__bout_$i >> 2] = $1;
   HEAP32[$__eout_$i >> 2] = $2;
   label = 27;
  } while (0);
  if ((label | 0) == 27) $retval$6 = __ZNSt3__211char_traitsIcE7not_eofEi($__c) | 0;
  $retval$7 = $retval$6;
 }
 STACKTOP = sp;
 return $retval$7 | 0;
}

function __ZN4tson9WangColor5parseERKN8nlohmann10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS1_14adl_serializerEEE($this, $json) {
 $this = $this | 0;
 $json = $json | 0;
 var $0 = 0, $2 = 0, $__cap_$i$i$i$i$i = 0, $__size_$i1$i$i$i$i = 0, $allFound$0$off0 = 0, $allFound$1$off0 = 0, $allFound$2$off0 = 0, $allFound$3$off0 = 0, $m_name = 0, $ref$tmp$i$i$i$i = 0, $ref$tmp2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $ref$tmp$i$i$i$i = sp + 12 | 0;
 $ref$tmp2 = sp;
 if (!(__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE5countIRA6_KcEEmOT_($json, 22926) | 0)) $allFound$0$off0 = 0; else {
  __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE3getIS9_S9_Li0EEET0_v($ref$tmp2, __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEixIKcEERKSB_PT_($json, 22926) | 0);
  __ZN4tson5ColorIhEC2ERKNSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE($ref$tmp$i$i$i$i, $ref$tmp2);
  $0 = HEAP32[$ref$tmp$i$i$i$i >> 2] | 0;
  HEAP8[$this >> 0] = $0;
  HEAP8[$this + 1 >> 0] = $0 >> 8;
  HEAP8[$this + 2 >> 0] = $0 >> 16;
  HEAP8[$this + 3 >> 0] = $0 >> 24;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp2);
  $allFound$0$off0 = 1;
 }
 if (!(__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE5countIRA5_KcEEmOT_($json, 22602) | 0)) $allFound$1$off0 = 0; else {
  __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE3getIS9_S9_Li0EEET0_v($ref$tmp2, __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEixIKcEERKSB_PT_($json, 22602) | 0);
  $m_name = $this + 4 | 0;
  $__size_$i1$i$i$i$i = $m_name + 11 | 0;
  if ((HEAP8[$__size_$i1$i$i$i$i >> 0] | 0) < 0) {
   $2 = HEAP32[$m_name >> 2] | 0;
   HEAP8[$ref$tmp$i$i$i$i >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($2, $ref$tmp$i$i$i$i);
   HEAP32[$this + 8 >> 2] = 0;
   if ((HEAP8[$__size_$i1$i$i$i$i >> 0] | 0) < 0) {
    $__cap_$i$i$i$i$i = $this + 12 | 0;
    __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm(HEAP32[$m_name >> 2] | 0, HEAP32[$__cap_$i$i$i$i$i >> 2] & 2147483647);
    HEAP32[$__cap_$i$i$i$i$i >> 2] = 0;
   }
  } else {
   HEAP8[$ref$tmp$i$i$i$i >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($m_name, $ref$tmp$i$i$i$i);
   HEAP8[$__size_$i1$i$i$i$i >> 0] = 0;
  };
  HEAP32[$m_name >> 2] = HEAP32[$ref$tmp2 >> 2];
  HEAP32[$m_name + 4 >> 2] = HEAP32[$ref$tmp2 + 4 >> 2];
  HEAP32[$m_name + 8 >> 2] = HEAP32[$ref$tmp2 + 8 >> 2];
  HEAP32[$ref$tmp2 >> 2] = 0;
  HEAP32[$ref$tmp2 + 4 >> 2] = 0;
  HEAP32[$ref$tmp2 + 8 >> 2] = 0;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp2);
  $allFound$1$off0 = $allFound$0$off0;
 }
 if (!(__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE5countIRA12_KcEEmOT_($json, 23413) | 0)) $allFound$2$off0 = 0; else {
  HEAPF32[$this + 16 >> 2] = Math_fround(__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE3getIffLi0EEET0_v(__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEixIKcEERKSB_PT_($json, 23413) | 0));
  $allFound$2$off0 = $allFound$1$off0;
 }
 if (!(__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE5countIRA5_KcEEmOT_($json, 23152) | 0)) $allFound$3$off0 = 0; else {
  HEAP32[$this + 20 >> 2] = __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE3getIiiLi0EEET0_v(__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEixIKcEERKSB_PT_($json, 23152) | 0) | 0;
  $allFound$3$off0 = $allFound$2$off0;
 }
 STACKTOP = sp;
 return $allFound$3$off0 | 0;
}

function _stbi__compute_huffman_codes($a) {
 $a = $a | 0;
 var $19 = 0, $45 = 0, $a$addr = 0, $c = 0, $codelength_sizes = 0, $conv23 = 0, $fill = 0, $hclen = 0, $hdist = 0, $hlit = 0, $i = 0, $lencodes = 0, $n = 0, $ntot = 0, $retval = 0, $s = 0, $z_codelength = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 2560 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(2560);
 $retval = sp + 2544 | 0;
 $a$addr = sp + 2540 | 0;
 $z_codelength = sp + 520 | 0;
 $lencodes = sp + 32 | 0;
 $codelength_sizes = sp;
 $i = sp + 516 | 0;
 $n = sp + 512 | 0;
 $hlit = sp + 508 | 0;
 $hdist = sp + 504 | 0;
 $hclen = sp + 500 | 0;
 $ntot = sp + 496 | 0;
 $s = sp + 492 | 0;
 $c = sp + 488 | 0;
 $fill = sp + 2548 | 0;
 HEAP32[$a$addr >> 2] = $a;
 HEAP32[$hlit >> 2] = (_stbi__zreceive(HEAP32[$a$addr >> 2] | 0, 5) | 0) + 257;
 HEAP32[$hdist >> 2] = (_stbi__zreceive(HEAP32[$a$addr >> 2] | 0, 5) | 0) + 1;
 HEAP32[$hclen >> 2] = (_stbi__zreceive(HEAP32[$a$addr >> 2] | 0, 4) | 0) + 4;
 HEAP32[$ntot >> 2] = (HEAP32[$hlit >> 2] | 0) + (HEAP32[$hdist >> 2] | 0);
 HEAP32[$codelength_sizes >> 2] = 0;
 HEAP32[$codelength_sizes + 4 >> 2] = 0;
 HEAP32[$codelength_sizes + 8 >> 2] = 0;
 HEAP32[$codelength_sizes + 12 >> 2] = 0;
 HEAP16[$codelength_sizes + 16 >> 1] = 0;
 HEAP8[$codelength_sizes + 18 >> 0] = 0;
 HEAP32[$i >> 2] = 0;
 while (1) {
  if ((HEAP32[$i >> 2] | 0) >= (HEAP32[$hclen >> 2] | 0)) break;
  HEAP32[$s >> 2] = _stbi__zreceive(HEAP32[$a$addr >> 2] | 0, 3) | 0;
  HEAP8[$codelength_sizes + (HEAPU8[4960 + (HEAP32[$i >> 2] | 0) >> 0] | 0) >> 0] = HEAP32[$s >> 2];
  HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
 }
 if (!(_stbi__zbuild_huffman($z_codelength, $codelength_sizes, 19) | 0)) {
  HEAP32[$retval >> 2] = 0;
  $45 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $45 | 0;
 }
 HEAP32[$n >> 2] = 0;
 L9 : while (1) {
  if ((HEAP32[$n >> 2] | 0) >= (HEAP32[$ntot >> 2] | 0)) {
   label = 25;
   break;
  }
  HEAP32[$c >> 2] = _stbi__zhuffman_decode(HEAP32[$a$addr >> 2] | 0, $z_codelength) | 0;
  if ((HEAP32[$c >> 2] | 0) < 0 | (HEAP32[$c >> 2] | 0) >= 19) {
   label = 9;
   break;
  }
  if ((HEAP32[$c >> 2] | 0) < 16) {
   $conv23 = HEAP32[$c >> 2] & 255;
   $19 = HEAP32[$n >> 2] | 0;
   HEAP32[$n >> 2] = $19 + 1;
   HEAP8[$lencodes + $19 >> 0] = $conv23;
  } else {
   HEAP8[$fill >> 0] = 0;
   do if ((HEAP32[$c >> 2] | 0) == 16) {
    HEAP32[$c >> 2] = (_stbi__zreceive(HEAP32[$a$addr >> 2] | 0, 2) | 0) + 3;
    if (!(HEAP32[$n >> 2] | 0)) {
     label = 14;
     break L9;
    }
    HEAP8[$fill >> 0] = HEAP8[$lencodes + ((HEAP32[$n >> 2] | 0) - 1) >> 0] | 0;
   } else {
    if ((HEAP32[$c >> 2] | 0) == 17) {
     HEAP32[$c >> 2] = (_stbi__zreceive(HEAP32[$a$addr >> 2] | 0, 3) | 0) + 3;
     break;
    }
    if ((HEAP32[$c >> 2] | 0) != 18) {
     label = 19;
     break L9;
    }
    HEAP32[$c >> 2] = (_stbi__zreceive(HEAP32[$a$addr >> 2] | 0, 7) | 0) + 11;
   } while (0);
   if (((HEAP32[$ntot >> 2] | 0) - (HEAP32[$n >> 2] | 0) | 0) < (HEAP32[$c >> 2] | 0)) {
    label = 22;
    break;
   }
   _memset($lencodes + (HEAP32[$n >> 2] | 0) | 0, (HEAPU8[$fill >> 0] | 0) & 255 | 0, HEAP32[$c >> 2] | 0) | 0;
   HEAP32[$n >> 2] = (HEAP32[$n >> 2] | 0) + (HEAP32[$c >> 2] | 0);
  }
 }
 if ((label | 0) == 9) {
  HEAP32[$retval >> 2] = _stbi__err(33841) | 0;
  $45 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $45 | 0;
 } else if ((label | 0) == 14) {
  HEAP32[$retval >> 2] = _stbi__err(33841) | 0;
  $45 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $45 | 0;
 } else if ((label | 0) == 19) ___assert_fail(33857, 32781, 4122, 33865); else if ((label | 0) == 22) {
  HEAP32[$retval >> 2] = _stbi__err(33841) | 0;
  $45 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $45 | 0;
 } else if ((label | 0) == 25) {
  if ((HEAP32[$n >> 2] | 0) != (HEAP32[$ntot >> 2] | 0)) {
   HEAP32[$retval >> 2] = _stbi__err(33841) | 0;
   $45 = HEAP32[$retval >> 2] | 0;
   STACKTOP = sp;
   return $45 | 0;
  }
  if (!(_stbi__zbuild_huffman((HEAP32[$a$addr >> 2] | 0) + 32 | 0, $lencodes, HEAP32[$hlit >> 2] | 0) | 0)) {
   HEAP32[$retval >> 2] = 0;
   $45 = HEAP32[$retval >> 2] | 0;
   STACKTOP = sp;
   return $45 | 0;
  }
  if (_stbi__zbuild_huffman((HEAP32[$a$addr >> 2] | 0) + 2052 | 0, $lencodes + (HEAP32[$hlit >> 2] | 0) | 0, HEAP32[$hdist >> 2] | 0) | 0) {
   HEAP32[$retval >> 2] = 1;
   $45 = HEAP32[$retval >> 2] | 0;
   STACKTOP = sp;
   return $45 | 0;
  } else {
   HEAP32[$retval >> 2] = 0;
   $45 = HEAP32[$retval >> 2] | 0;
   STACKTOP = sp;
   return $45 | 0;
  }
 }
 return 0;
}

function __ZNKSt3__27codecvtIwc11__mbstate_tE5do_inERS1_PKcS5_RS5_PwS7_RS7_($this, $st, $frm, $frm_end, $frm_nxt, $to, $to_end, $to_nxt) {
 $this = $this | 0;
 $st = $st | 0;
 $frm = $frm | 0;
 $frm_end = $frm_end | 0;
 $frm_nxt = $frm_nxt | 0;
 $to = $to | 0;
 $to_end = $to_end | 0;
 $to_nxt = $to_nxt | 0;
 var $$pre = 0, $$sink = 0, $1 = 0, $20 = 0, $21 = 0, $22 = 0, $6 = 0, $7 = 0, $__l = 0, $add$ptr31 = 0, $call$i = 0, $call$i$i = 0, $call$i$i59 = 0, $call$i$i64 = 0, $call$i60 = 0, $call$i65 = 0, $fend$0 = 0, $fend$0$lcssa = 0, $fend$1 = 0, $fend$2 = 0, $fend$2$lcssa = 0, $fend$4$ph = 0, $frm$addr$0 = 0, $frm$addr$1 = 0, $incdec$ptr43 = 0, $retval$1$ph = 0, $retval$2 = 0, $save_state = 0, $storemerge = 0, $sub$ptr$lhs$cast$le = 0, $sub$ptr$lhs$cast7 = 0, $to$addr$0 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $save_state = sp;
 $fend$0 = $frm;
 while (1) {
  if (($fend$0 | 0) == ($frm_end | 0)) {
   $fend$0$lcssa = $frm_end;
   break;
  }
  if (!(HEAP8[$fend$0 >> 0] | 0)) {
   $fend$0$lcssa = $fend$0;
   break;
  }
  $fend$0 = $fend$0 + 1 | 0;
 }
 HEAP32[$to_nxt >> 2] = $to;
 HEAP32[$frm_nxt >> 2] = $frm;
 $sub$ptr$lhs$cast7 = $to_end;
 $__l = $this + 8 | 0;
 $fend$1 = $fend$0$lcssa;
 $frm$addr$0 = $frm;
 $to$addr$0 = $to;
 while (1) {
  if (($to$addr$0 | 0) == ($to_end | 0) | ($frm$addr$0 | 0) == ($frm_end | 0)) {
   $20 = $frm$addr$0;
   label = 33;
   break;
  }
  $1 = $st;
  $6 = HEAP32[$1 + 4 >> 2] | 0;
  $7 = $save_state;
  HEAP32[$7 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$7 + 4 >> 2] = $6;
  $call$i$i = ___uselocale(HEAP32[$__l >> 2] | 0) | 0;
  $call$i = _mbsnrtowcs($to$addr$0, $frm_nxt, $fend$1 - $frm$addr$0 | 0, $sub$ptr$lhs$cast7 - $to$addr$0 >> 2, $st) | 0;
  if ($call$i$i | 0) ___uselocale($call$i$i) | 0;
  if (($call$i | 0) == -1) {
   label = 10;
   break;
  }
  $add$ptr31 = (HEAP32[$to_nxt >> 2] | 0) + ($call$i << 2) | 0;
  HEAP32[$to_nxt >> 2] = $add$ptr31;
  if (($add$ptr31 | 0) == ($to_end | 0)) {
   label = 30;
   break;
  }
  $$pre = HEAP32[$frm_nxt >> 2] | 0;
  if (($fend$1 | 0) == ($frm_end | 0)) {
   $21 = $add$ptr31;
   $22 = $$pre;
   $fend$4$ph = $frm_end;
  } else {
   $call$i$i64 = ___uselocale(HEAP32[$__l >> 2] | 0) | 0;
   $call$i65 = _mbrtowc($add$ptr31, $$pre, 1, $st) | 0;
   if ($call$i$i64 | 0) ___uselocale($call$i$i64) | 0;
   if ($call$i65 | 0) {
    $retval$1$ph = 2;
    label = 29;
    break;
   }
   HEAP32[$to_nxt >> 2] = (HEAP32[$to_nxt >> 2] | 0) + 4;
   $incdec$ptr43 = (HEAP32[$frm_nxt >> 2] | 0) + 1 | 0;
   HEAP32[$frm_nxt >> 2] = $incdec$ptr43;
   $fend$2 = $incdec$ptr43;
   while (1) {
    if (($fend$2 | 0) == ($frm_end | 0)) {
     $fend$2$lcssa = $frm_end;
     break;
    }
    if (!(HEAP8[$fend$2 >> 0] | 0)) {
     $fend$2$lcssa = $fend$2;
     break;
    }
    $fend$2 = $fend$2 + 1 | 0;
   }
   $21 = HEAP32[$to_nxt >> 2] | 0;
   $22 = $incdec$ptr43;
   $fend$4$ph = $fend$2$lcssa;
  }
  $fend$1 = $fend$4$ph;
  $frm$addr$0 = $22;
  $to$addr$0 = $21;
 }
 do if ((label | 0) == 10) {
  $sub$ptr$lhs$cast$le = $fend$1;
  $frm$addr$1 = $frm$addr$0;
  $storemerge = $to$addr$0;
  L29 : while (1) {
   HEAP32[$to_nxt >> 2] = $storemerge;
   if (($frm$addr$1 | 0) == (HEAP32[$frm_nxt >> 2] | 0)) {
    label = 19;
    break;
   }
   $call$i$i59 = ___uselocale(HEAP32[$__l >> 2] | 0) | 0;
   $call$i60 = _mbrtowc($storemerge, $frm$addr$1, $sub$ptr$lhs$cast$le - $frm$addr$1 | 0, $save_state) | 0;
   if ($call$i$i59 | 0) ___uselocale($call$i$i59) | 0;
   switch ($call$i60 | 0) {
   case -1:
    {
     label = 15;
     break L29;
     break;
    }
   case -2:
    {
     label = 16;
     break L29;
     break;
    }
   case 0:
    {
     $$sink = 1;
     break;
    }
   default:
    $$sink = $call$i60;
   }
   $frm$addr$1 = $frm$addr$1 + $$sink | 0;
   $storemerge = (HEAP32[$to_nxt >> 2] | 0) + 4 | 0;
  }
  if ((label | 0) == 15) {
   HEAP32[$frm_nxt >> 2] = $frm$addr$1;
   $retval$1$ph = 2;
   label = 29;
   break;
  } else if ((label | 0) == 16) {
   HEAP32[$frm_nxt >> 2] = $frm$addr$1;
   $retval$1$ph = 1;
   label = 29;
   break;
  } else if ((label | 0) == 19) {
   HEAP32[$frm_nxt >> 2] = $frm$addr$1;
   $retval$1$ph = ($frm$addr$1 | 0) != ($frm_end | 0) & 1;
   label = 29;
   break;
  }
 } else if ((label | 0) == 30) {
  $20 = HEAP32[$frm_nxt >> 2] | 0;
  label = 33;
 } while (0);
 if ((label | 0) == 29) $retval$2 = $retval$1$ph; else if ((label | 0) == 33) $retval$2 = ($20 | 0) != ($frm_end | 0) & 1;
 STACKTOP = sp;
 return $retval$2 | 0;
}

function _stbi__parse_huffman_block($a) {
 $a = $a | 0;
 var $14 = 0, $5 = 0, $56 = 0, $57 = 0, $60 = 0, $61 = 0, $62 = 0, $64 = 0, $a$addr = 0, $call21 = 0, $call34 = 0, $conv = 0, $dec = 0, $dec68 = 0, $dist = 0, $len = 0, $p = 0, $retval = 0, $v = 0, $z = 0, $zout = 0, label = 0, sp = 0, CSE$0 = 0, CSE$1 = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $retval = sp + 24 | 0;
 $a$addr = sp + 20 | 0;
 $zout = sp + 16 | 0;
 $z = sp + 12 | 0;
 $p = sp + 8 | 0;
 $len = sp + 4 | 0;
 $dist = sp;
 $v = sp + 28 | 0;
 HEAP32[$a$addr >> 2] = $a;
 HEAP32[$zout >> 2] = HEAP32[(HEAP32[$a$addr >> 2] | 0) + 16 >> 2];
 L1 : while (1) {
  CSE$0 = HEAP32[$a$addr >> 2] | 0;
  HEAP32[$z >> 2] = _stbi__zhuffman_decode(CSE$0 | 0, CSE$0 + 32 | 0) | 0;
  $5 = HEAP32[$z >> 2] | 0;
  do if ((HEAP32[$z >> 2] | 0) < 256) {
   if (($5 | 0) < 0) {
    label = 4;
    break L1;
   }
   if ((HEAP32[$zout >> 2] | 0) >>> 0 >= (HEAP32[(HEAP32[$a$addr >> 2] | 0) + 24 >> 2] | 0) >>> 0) {
    if (!(_stbi__zexpand(HEAP32[$a$addr >> 2] | 0, HEAP32[$zout >> 2] | 0, 1) | 0)) {
     label = 7;
     break L1;
    }
    HEAP32[$zout >> 2] = HEAP32[(HEAP32[$a$addr >> 2] | 0) + 16 >> 2];
   }
   $conv = HEAP32[$z >> 2] & 255;
   $14 = HEAP32[$zout >> 2] | 0;
   HEAP32[$zout >> 2] = $14 + 1;
   HEAP8[$14 >> 0] = $conv;
  } else {
   if (($5 | 0) == 256) {
    label = 11;
    break L1;
   }
   HEAP32[$z >> 2] = (HEAP32[$z >> 2] | 0) - 257;
   HEAP32[$len >> 2] = HEAP32[4448 + (HEAP32[$z >> 2] << 2) >> 2];
   if (HEAP32[4576 + (HEAP32[$z >> 2] << 2) >> 2] | 0) {
    $call21 = _stbi__zreceive(HEAP32[$a$addr >> 2] | 0, HEAP32[4576 + (HEAP32[$z >> 2] << 2) >> 2] | 0) | 0;
    HEAP32[$len >> 2] = (HEAP32[$len >> 2] | 0) + $call21;
   }
   CSE$1 = HEAP32[$a$addr >> 2] | 0;
   HEAP32[$z >> 2] = _stbi__zhuffman_decode(CSE$1 | 0, CSE$1 + 2052 | 0) | 0;
   if ((HEAP32[$z >> 2] | 0) < 0) {
    label = 15;
    break L1;
   }
   HEAP32[$dist >> 2] = HEAP32[4704 + (HEAP32[$z >> 2] << 2) >> 2];
   if (HEAP32[4832 + (HEAP32[$z >> 2] << 2) >> 2] | 0) {
    $call34 = _stbi__zreceive(HEAP32[$a$addr >> 2] | 0, HEAP32[4832 + (HEAP32[$z >> 2] << 2) >> 2] | 0) | 0;
    HEAP32[$dist >> 2] = (HEAP32[$dist >> 2] | 0) + $call34;
   }
   if (((HEAP32[$zout >> 2] | 0) - (HEAP32[(HEAP32[$a$addr >> 2] | 0) + 20 >> 2] | 0) | 0) < (HEAP32[$dist >> 2] | 0)) {
    label = 19;
    break L1;
   }
   if (((HEAP32[$zout >> 2] | 0) + (HEAP32[$len >> 2] | 0) | 0) >>> 0 > (HEAP32[(HEAP32[$a$addr >> 2] | 0) + 24 >> 2] | 0) >>> 0) {
    if (!(_stbi__zexpand(HEAP32[$a$addr >> 2] | 0, HEAP32[$zout >> 2] | 0, HEAP32[$len >> 2] | 0) | 0)) {
     label = 22;
     break L1;
    }
    HEAP32[$zout >> 2] = HEAP32[(HEAP32[$a$addr >> 2] | 0) + 16 >> 2];
   }
   HEAP32[$p >> 2] = (HEAP32[$zout >> 2] | 0) + (0 - (HEAP32[$dist >> 2] | 0));
   if ((HEAP32[$dist >> 2] | 0) == 1) {
    HEAP8[$v >> 0] = HEAP8[HEAP32[$p >> 2] >> 0] | 0;
    if (!(HEAP32[$len >> 2] | 0)) break;
    do {
     $56 = HEAP8[$v >> 0] | 0;
     $57 = HEAP32[$zout >> 2] | 0;
     HEAP32[$zout >> 2] = $57 + 1;
     HEAP8[$57 >> 0] = $56;
     $dec = (HEAP32[$len >> 2] | 0) + -1 | 0;
     HEAP32[$len >> 2] = $dec;
    } while (($dec | 0) != 0);
   } else {
    if (!(HEAP32[$len >> 2] | 0)) break;
    do {
     $60 = HEAP32[$p >> 2] | 0;
     HEAP32[$p >> 2] = $60 + 1;
     $61 = HEAP8[$60 >> 0] | 0;
     $62 = HEAP32[$zout >> 2] | 0;
     HEAP32[$zout >> 2] = $62 + 1;
     HEAP8[$62 >> 0] = $61;
     $dec68 = (HEAP32[$len >> 2] | 0) + -1 | 0;
     HEAP32[$len >> 2] = $dec68;
    } while (($dec68 | 0) != 0);
   }
  } while (0);
 }
 if ((label | 0) == 4) {
  HEAP32[$retval >> 2] = _stbi__err(33666) | 0;
  $64 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $64 | 0;
 } else if ((label | 0) == 7) {
  HEAP32[$retval >> 2] = 0;
  $64 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $64 | 0;
 } else if ((label | 0) == 11) {
  HEAP32[(HEAP32[$a$addr >> 2] | 0) + 16 >> 2] = HEAP32[$zout >> 2];
  HEAP32[$retval >> 2] = 1;
  $64 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $64 | 0;
 } else if ((label | 0) == 15) {
  HEAP32[$retval >> 2] = _stbi__err(33666) | 0;
  $64 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $64 | 0;
 } else if ((label | 0) == 19) {
  HEAP32[$retval >> 2] = _stbi__err(33683) | 0;
  $64 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $64 | 0;
 } else if ((label | 0) == 22) {
  HEAP32[$retval >> 2] = 0;
  $64 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $64 | 0;
 }
 return 0;
}

function __ZNKSt3__27codecvtIwc11__mbstate_tE6do_outERS1_PKwS5_RS5_PcS7_RS7_($this, $st, $frm, $frm_end, $frm_nxt, $to, $to_end, $to_nxt) {
 $this = $this | 0;
 $st = $st | 0;
 $frm = $frm | 0;
 $frm_end = $frm_end | 0;
 $frm_nxt = $frm_nxt | 0;
 $to = $to | 0;
 $to_end = $to_end | 0;
 $to_nxt = $to_nxt | 0;
 var $1 = 0, $13 = 0, $15 = 0, $21 = 0, $22 = 0, $24 = 0, $25 = 0, $26 = 0, $6 = 0, $7 = 0, $__l = 0, $add$ptr = 0, $add$ptr27 = 0, $call$i = 0, $call$i$i = 0, $call$i$i56 = 0, $call$i$i61 = 0, $call$i57 = 0, $call$i62 = 0, $fend$0 = 0, $fend$0$lcssa = 0, $fend$1 = 0, $fend$2 = 0, $fend$2$lcssa = 0, $fend$5$ph69 = 0, $frm$addr$0 = 0, $frm$addr$1 = 0, $incdec$ptr51 = 0, $n$0 = 0, $p$0 = 0, $retval$1 = 0, $retval$3$ph = 0, $retval$4 = 0, $save_state = 0, $sub$ptr$lhs$cast7 = 0, $tmp = 0, $to$addr$0 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $save_state = sp;
 $tmp = sp + 8 | 0;
 $fend$0 = $frm;
 while (1) {
  if (($fend$0 | 0) == ($frm_end | 0)) {
   $fend$0$lcssa = $frm_end;
   break;
  }
  if (!(HEAP32[$fend$0 >> 2] | 0)) {
   $fend$0$lcssa = $fend$0;
   break;
  }
  $fend$0 = $fend$0 + 4 | 0;
 }
 HEAP32[$to_nxt >> 2] = $to;
 HEAP32[$frm_nxt >> 2] = $frm;
 $sub$ptr$lhs$cast7 = $to_end;
 $__l = $this + 8 | 0;
 $fend$1 = $fend$0$lcssa;
 $frm$addr$0 = $frm;
 $to$addr$0 = $to;
 L6 : while (1) {
  if (($to$addr$0 | 0) == ($to_end | 0) | ($frm$addr$0 | 0) == ($frm_end | 0)) {
   $24 = $frm$addr$0;
   label = 36;
   break;
  }
  $1 = $st;
  $6 = HEAP32[$1 + 4 >> 2] | 0;
  $7 = $save_state;
  HEAP32[$7 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$7 + 4 >> 2] = $6;
  $call$i$i = ___uselocale(HEAP32[$__l >> 2] | 0) | 0;
  $call$i = _wcsnrtombs($to$addr$0, $frm_nxt, $fend$1 - $frm$addr$0 >> 2, $sub$ptr$lhs$cast7 - $to$addr$0 | 0, $st) | 0;
  if ($call$i$i | 0) ___uselocale($call$i$i) | 0;
  switch ($call$i | 0) {
  case -1:
   {
    label = 10;
    break L6;
    break;
   }
  case 0:
   {
    $retval$3$ph = 1;
    label = 33;
    break L6;
    break;
   }
  default:
   {}
  }
  $add$ptr27 = (HEAP32[$to_nxt >> 2] | 0) + $call$i | 0;
  HEAP32[$to_nxt >> 2] = $add$ptr27;
  if (($add$ptr27 | 0) == ($to_end | 0)) {
   label = 34;
   break;
  }
  if (($fend$1 | 0) == ($frm_end | 0)) {
   $25 = $add$ptr27;
   $26 = HEAP32[$frm_nxt >> 2] | 0;
   $fend$5$ph69 = $frm_end;
  } else {
   $call$i$i61 = ___uselocale(HEAP32[$__l >> 2] | 0) | 0;
   $call$i62 = _wcrtomb($tmp, 0, $st) | 0;
   if ($call$i$i61 | 0) ___uselocale($call$i$i61) | 0;
   if (($call$i62 | 0) == -1) {
    $retval$1 = 2;
    label = 32;
    break;
   }
   if ($call$i62 >>> 0 > ($sub$ptr$lhs$cast7 - (HEAP32[$to_nxt >> 2] | 0) | 0) >>> 0) {
    $retval$1 = 1;
    label = 32;
    break;
   }
   $n$0 = $call$i62;
   $p$0 = $tmp;
   while (1) {
    if (!$n$0) break;
    $21 = HEAP8[$p$0 >> 0] | 0;
    $22 = HEAP32[$to_nxt >> 2] | 0;
    HEAP32[$to_nxt >> 2] = $22 + 1;
    HEAP8[$22 >> 0] = $21;
    $n$0 = $n$0 + -1 | 0;
    $p$0 = $p$0 + 1 | 0;
   }
   $incdec$ptr51 = (HEAP32[$frm_nxt >> 2] | 0) + 4 | 0;
   HEAP32[$frm_nxt >> 2] = $incdec$ptr51;
   $fend$2 = $incdec$ptr51;
   while (1) {
    if (($fend$2 | 0) == ($frm_end | 0)) {
     $fend$2$lcssa = $frm_end;
     break;
    }
    if (!(HEAP32[$fend$2 >> 2] | 0)) {
     $fend$2$lcssa = $fend$2;
     break;
    }
    $fend$2 = $fend$2 + 4 | 0;
   }
   $25 = HEAP32[$to_nxt >> 2] | 0;
   $26 = $incdec$ptr51;
   $fend$5$ph69 = $fend$2$lcssa;
  }
  $fend$1 = $fend$5$ph69;
  $frm$addr$0 = $26;
  $to$addr$0 = $25;
 }
 if ((label | 0) == 10) {
  HEAP32[$to_nxt >> 2] = $to$addr$0;
  $15 = $to$addr$0;
  $frm$addr$1 = $frm$addr$0;
  while (1) {
   if (($frm$addr$1 | 0) == (HEAP32[$frm_nxt >> 2] | 0)) break;
   $13 = HEAP32[$frm$addr$1 >> 2] | 0;
   $call$i$i56 = ___uselocale(HEAP32[$__l >> 2] | 0) | 0;
   $call$i57 = _wcrtomb($15, $13, $save_state) | 0;
   if ($call$i$i56 | 0) ___uselocale($call$i$i56) | 0;
   if (($call$i57 | 0) == -1) break;
   $add$ptr = (HEAP32[$to_nxt >> 2] | 0) + $call$i57 | 0;
   HEAP32[$to_nxt >> 2] = $add$ptr;
   $15 = $add$ptr;
   $frm$addr$1 = $frm$addr$1 + 4 | 0;
  }
  HEAP32[$frm_nxt >> 2] = $frm$addr$1;
  $retval$3$ph = 2;
  label = 33;
 } else if ((label | 0) == 32) {
  $retval$3$ph = $retval$1;
  label = 33;
 } else if ((label | 0) == 34) {
  $24 = HEAP32[$frm_nxt >> 2] | 0;
  label = 36;
 }
 if ((label | 0) == 33) $retval$4 = $retval$3$ph; else if ((label | 0) == 36) $retval$4 = ($24 | 0) != ($frm_end | 0) & 1;
 STACKTOP = sp;
 return $retval$4 | 0;
}

function __ZNKSt3__28messagesIwE6do_getEliiRKNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEE($agg$result, $this, $__c, $__set, $__msgid, $__dflt) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__c = $__c | 0;
 $__set = $__set | 0;
 $__msgid = $__msgid | 0;
 $__dflt = $__dflt | 0;
 var $1 = 0, $__bn$i37 = 0, $__buf$i36 = 0, $__i$0$i$i = 0, $__i$0$i$i21 = 0, $__mb$i35 = 0, $__nb$addr$0$i = 0, $__ndflt = 0, $__p$0$i = 0, $__p$0$i51 = 0, $__r$0$i = 0, $__r$0$i40 = 0, $__wb$addr$0$i = 0, $__wn$i = 0, $add$ptr = 0, $add$ptr$i38 = 0, $add$ptr14 = 0, $add$ptr5$i = 0, $call$i = 0, $call$i46 = 0, $call8 = 0, $cond$i$i$i1663 = 0, $cond$i$i$i33 = 0, $sub$ptr$lhs$cast$i = 0, $temp$lvalue = 0, $temp$lvalue9 = 0, $tobool$i$i$i$i = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(176);
 $__mb$i35 = sp + 168 | 0;
 $__buf$i36 = sp;
 $__bn$i37 = sp + 164 | 0;
 $__wn$i = sp + 160 | 0;
 $__ndflt = sp + 128 | 0;
 $temp$lvalue = sp + 152 | 0;
 $temp$lvalue9 = sp + 144 | 0;
 HEAP32[$__ndflt >> 2] = 0;
 HEAP32[$__ndflt + 4 >> 2] = 0;
 HEAP32[$__ndflt + 8 >> 2] = 0;
 $__i$0$i$i = 0;
 while (1) {
  if (($__i$0$i$i | 0) == 3) break;
  HEAP32[$__ndflt + ($__i$0$i$i << 2) >> 2] = 0;
  $__i$0$i$i = $__i$0$i$i + 1 | 0;
 }
 HEAP32[$temp$lvalue + 4 >> 2] = 0;
 HEAP32[$temp$lvalue >> 2] = 21228;
 $1 = HEAP8[$__dflt + 8 + 3 >> 0] | 0;
 $tobool$i$i$i$i = $1 << 24 >> 24 < 0;
 $cond$i$i$i1663 = $tobool$i$i$i$i ? HEAP32[$__dflt >> 2] | 0 : $__dflt;
 $add$ptr = $cond$i$i$i1663 + (($tobool$i$i$i$i ? HEAP32[$__dflt + 4 >> 2] | 0 : $1 & 255) << 2) | 0;
 $add$ptr$i38 = $__buf$i36 + 32 | 0;
 $__r$0$i40 = 0;
 $__wb$addr$0$i = $cond$i$i$i1663;
 while (1) {
  if (!(($__r$0$i40 | 0) != 2 & $__wb$addr$0$i >>> 0 < $add$ptr >>> 0)) break;
  HEAP32[$__wn$i >> 2] = $__wb$addr$0$i;
  $call$i46 = FUNCTION_TABLE_iiiiiiiii[HEAP32[(HEAP32[$temp$lvalue >> 2] | 0) + 12 >> 2] & 15]($temp$lvalue, $__mb$i35, $__wb$addr$0$i, $add$ptr, $__wn$i, $__buf$i36, $add$ptr$i38, $__bn$i37) | 0;
  if (($call$i46 | 0) == 2 ? 1 : (HEAP32[$__wn$i >> 2] | 0) == ($__wb$addr$0$i | 0)) {
   label = 8;
   break;
  }
  $__p$0$i51 = $__buf$i36;
  while (1) {
   if ($__p$0$i51 >>> 0 >= (HEAP32[$__bn$i37 >> 2] | 0) >>> 0) break;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($__ndflt, HEAP8[$__p$0$i51 >> 0] | 0);
   $__p$0$i51 = $__p$0$i51 + 1 | 0;
  }
  $__r$0$i40 = $call$i46;
  $__wb$addr$0$i = HEAP32[$__wn$i >> 2] | 0;
 }
 if ((label | 0) == 8) __ZNSt3__221__throw_runtime_errorEPKc(0);
 __ZNSt3__26locale5facetD2Ev($temp$lvalue);
 $cond$i$i$i33 = (HEAP8[$__ndflt + 11 >> 0] | 0) < 0 ? HEAP32[$__ndflt >> 2] | 0 : $__ndflt;
 $call8 = _catgets(($__c | 0) == -1 ? -1 : $__c << 1, $__set, $__msgid, $cond$i$i$i33) | 0;
 HEAP32[$agg$result >> 2] = 0;
 HEAP32[$agg$result + 4 >> 2] = 0;
 HEAP32[$agg$result + 8 >> 2] = 0;
 $__i$0$i$i21 = 0;
 while (1) {
  if (($__i$0$i$i21 | 0) == 3) break;
  HEAP32[$agg$result + ($__i$0$i$i21 << 2) >> 2] = 0;
  $__i$0$i$i21 = $__i$0$i$i21 + 1 | 0;
 }
 HEAP32[$temp$lvalue9 + 4 >> 2] = 0;
 HEAP32[$temp$lvalue9 >> 2] = 21276;
 $add$ptr14 = $cond$i$i$i33 + (_strlen($call8) | 0) | 0;
 $sub$ptr$lhs$cast$i = $add$ptr14;
 $add$ptr5$i = $__buf$i36 + 128 | 0;
 $__nb$addr$0$i = $cond$i$i$i33;
 $__r$0$i = 0;
 while (1) {
  if (!(($__r$0$i | 0) != 2 & $__nb$addr$0$i >>> 0 < $add$ptr14 >>> 0)) {
   label = 23;
   break;
  }
  HEAP32[$__wn$i >> 2] = $__nb$addr$0$i;
  $call$i = FUNCTION_TABLE_iiiiiiiii[HEAP32[(HEAP32[$temp$lvalue9 >> 2] | 0) + 16 >> 2] & 15]($temp$lvalue9, $__mb$i35, $__nb$addr$0$i, ($sub$ptr$lhs$cast$i - $__nb$addr$0$i | 0) > 32 ? $__nb$addr$0$i + 32 | 0 : $add$ptr14, $__wn$i, $__buf$i36, $add$ptr5$i, $__bn$i37) | 0;
  if (($call$i | 0) == 2 ? 1 : (HEAP32[$__wn$i >> 2] | 0) == ($__nb$addr$0$i | 0)) {
   label = 19;
   break;
  }
  $__p$0$i = $__buf$i36;
  while (1) {
   if ($__p$0$i >>> 0 >= (HEAP32[$__bn$i37 >> 2] | 0) >>> 0) break;
   __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9push_backEw($agg$result, HEAP32[$__p$0$i >> 2] | 0);
   $__p$0$i = $__p$0$i + 4 | 0;
  }
  $__nb$addr$0$i = HEAP32[$__wn$i >> 2] | 0;
  $__r$0$i = $call$i;
 }
 if ((label | 0) == 19) __ZNSt3__221__throw_runtime_errorEPKc(0); else if ((label | 0) == 23) {
  __ZNSt3__26locale5facetD2Ev($temp$lvalue9);
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__ndflt);
  STACKTOP = sp;
  return;
 }
}

function _SetupFramebuffer($width, $height) {
 $width = $width | 0;
 $height = $height | 0;
 var $12 = f0, $28 = f0, $33 = 0, $39 = 0, $40 = 0, $41 = 0, $46 = f0, $5 = 0, $6 = 0, $7 = 0, $conv = f0, $conv12 = f0, $conv17 = f0, $conv27 = f0, $conv3 = f0, $conv30 = f0, $conv36 = f0, $conv42 = f0, $conv9 = f0, $displayRatio = 0, $heightRatio = 0, $scaleRatio = 0, $screenRatio = 0, $tmp = 0, $vararg_buffer = 0, $vararg_buffer4 = 0, $vararg_buffer8 = 0, $widthRatio = 0, dest = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(144);
 $vararg_buffer8 = sp + 24 | 0;
 $vararg_buffer4 = sp + 16 | 0;
 $vararg_buffer = sp;
 $widthRatio = sp + 120 | 0;
 $heightRatio = sp + 116 | 0;
 $scaleRatio = sp + 112 | 0;
 $tmp = sp + 48 | 0;
 $displayRatio = sp + 44 | 0;
 $screenRatio = sp + 40 | 0;
 HEAP32[sp + 128 >> 2] = $width;
 HEAP32[sp + 124 >> 2] = $height;
 if ((HEAP32[14957] | 0) <= (HEAP32[14975] | 0)) if ((HEAP32[14958] | 0) <= (HEAP32[14976] | 0)) {
  if ((HEAP32[14957] | 0) >= (HEAP32[14975] | 0)) if ((HEAP32[14958] | 0) >= (HEAP32[14976] | 0)) {
   HEAP32[14979] = HEAP32[14957];
   HEAP32[14980] = HEAP32[14958];
   HEAP32[14981] = 0;
   HEAP32[14982] = 0;
   STACKTOP = sp;
   return;
  }
  $39 = HEAP32[14958] | 0;
  $40 = HEAP32[14975] | 0;
  $41 = HEAP32[14976] | 0;
  HEAP32[$vararg_buffer8 >> 2] = HEAP32[14957];
  HEAP32[$vararg_buffer8 + 4 >> 2] = $39;
  HEAP32[$vararg_buffer8 + 8 >> 2] = $40;
  HEAP32[$vararg_buffer8 + 12 >> 2] = $41;
  _TraceLog(3, 32549, $vararg_buffer8);
  $conv27 = Math_fround(HEAP32[14975] | 0);
  HEAPF32[$displayRatio >> 2] = Math_fround($conv27 / Math_fround(HEAP32[14976] | 0));
  $conv30 = Math_fround(HEAP32[14957] | 0);
  HEAPF32[$screenRatio >> 2] = Math_fround($conv30 / Math_fround(HEAP32[14958] | 0));
  $46 = Math_fround(HEAPF32[$displayRatio >> 2]);
  if ($46 <= Math_fround(HEAPF32[$screenRatio >> 2])) {
   HEAP32[14979] = HEAP32[14957];
   $conv36 = Math_fround(HEAP32[14957] | 0);
   HEAP32[14980] = ~~+_llvm_round_f64(+(+Math_fround($conv36 / Math_fround(HEAPF32[$displayRatio >> 2]))));
   HEAP32[14981] = 0;
   HEAP32[14982] = (HEAP32[14980] | 0) - (HEAP32[14958] | 0);
   STACKTOP = sp;
   return;
  } else {
   $conv42 = Math_fround(HEAP32[14958] | 0);
   HEAP32[14979] = ~~+_llvm_round_f64(+(+Math_fround($conv42 * Math_fround(HEAPF32[$displayRatio >> 2]))));
   HEAP32[14980] = HEAP32[14958];
   HEAP32[14981] = (HEAP32[14979] | 0) - (HEAP32[14957] | 0);
   HEAP32[14982] = 0;
   STACKTOP = sp;
   return;
  }
 }
 $5 = HEAP32[14958] | 0;
 $6 = HEAP32[14975] | 0;
 $7 = HEAP32[14976] | 0;
 HEAP32[$vararg_buffer >> 2] = HEAP32[14957];
 HEAP32[$vararg_buffer + 4 >> 2] = $5;
 HEAP32[$vararg_buffer + 8 >> 2] = $6;
 HEAP32[$vararg_buffer + 12 >> 2] = $7;
 _TraceLog(4, 32406, $vararg_buffer);
 $conv = Math_fround(HEAP32[14975] | 0);
 HEAPF32[$widthRatio >> 2] = Math_fround($conv / Math_fround(HEAP32[14957] | 0));
 $conv3 = Math_fround(HEAP32[14976] | 0);
 HEAPF32[$heightRatio >> 2] = Math_fround($conv3 / Math_fround(HEAP32[14958] | 0));
 $12 = Math_fround(HEAPF32[$widthRatio >> 2]);
 if ($12 <= Math_fround(HEAPF32[$heightRatio >> 2])) {
  HEAP32[14979] = HEAP32[14975];
  $conv9 = Math_fround(HEAP32[14958] | 0);
  HEAP32[14980] = ~~+_llvm_round_f64(+(+Math_fround($conv9 * Math_fround(HEAPF32[$widthRatio >> 2]))));
  HEAP32[14981] = 0;
  HEAP32[14982] = (HEAP32[14976] | 0) - (HEAP32[14980] | 0);
 } else {
  $conv12 = Math_fround(HEAP32[14957] | 0);
  HEAP32[14979] = ~~+_llvm_round_f64(+(+Math_fround($conv12 * Math_fround(HEAPF32[$heightRatio >> 2]))));
  HEAP32[14980] = HEAP32[14976];
  HEAP32[14981] = (HEAP32[14975] | 0) - (HEAP32[14979] | 0);
  HEAP32[14982] = 0;
 }
 $conv17 = Math_fround(HEAP32[14979] | 0);
 HEAPF32[$scaleRatio >> 2] = Math_fround($conv17 / Math_fround(HEAP32[14957] | 0));
 $28 = Math_fround(HEAPF32[$scaleRatio >> 2]);
 _MatrixScale($tmp, $28, Math_fround(HEAPF32[$scaleRatio >> 2]), Math_fround(1.0));
 dest = 59836;
 src = $tmp;
 stop = dest + 64 | 0;
 do {
  HEAP32[dest >> 2] = HEAP32[src >> 2];
  dest = dest + 4 | 0;
  src = src + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP32[14979] = HEAP32[14975];
 HEAP32[14980] = HEAP32[14976];
 $33 = HEAP32[14980] | 0;
 HEAP32[$vararg_buffer4 >> 2] = HEAP32[14979];
 HEAP32[$vararg_buffer4 + 4 >> 2] = $33;
 _TraceLog(4, 32484, $vararg_buffer4);
 STACKTOP = sp;
 return;
}
function _stbi__zbuild_huffman($z, $sizelist, $num) {
 $z = $z | 0;
 $sizelist = $sizelist | 0;
 $num = $num | 0;
 var $74 = 0, $arrayidx2 = 0, $arrayidx76 = 0, $c = 0, $code = 0, $fastv = 0, $i = 0, $j = 0, $k = 0, $next_code = 0, $num$addr = 0, $retval = 0, $s = 0, $sizelist$addr = 0, $sizes = 0, $z$addr = 0, dest = 0, label = 0, sp = 0, stop = 0, CSE$0 = 0, CSE$1 = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(192);
 $retval = sp + 180 | 0;
 $z$addr = sp + 176 | 0;
 $sizelist$addr = sp + 172 | 0;
 $num$addr = sp + 168 | 0;
 $i = sp + 164 | 0;
 $k = sp + 160 | 0;
 $code = sp + 156 | 0;
 $next_code = sp + 80 | 0;
 $sizes = sp;
 $s = sp + 152 | 0;
 $c = sp + 148 | 0;
 $fastv = sp + 184 | 0;
 $j = sp + 144 | 0;
 HEAP32[$z$addr >> 2] = $z;
 HEAP32[$sizelist$addr >> 2] = $sizelist;
 HEAP32[$num$addr >> 2] = $num;
 HEAP32[$k >> 2] = 0;
 dest = $sizes;
 stop = dest + 68 | 0;
 do {
  HEAP32[dest >> 2] = 0;
  dest = dest + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 _memset(HEAP32[$z$addr >> 2] | 0, 0, 1024) | 0;
 HEAP32[$i >> 2] = 0;
 while (1) {
  if ((HEAP32[$i >> 2] | 0) >= (HEAP32[$num$addr >> 2] | 0)) break;
  $arrayidx2 = $sizes + (HEAPU8[(HEAP32[$sizelist$addr >> 2] | 0) + (HEAP32[$i >> 2] | 0) >> 0] << 2) | 0;
  HEAP32[$arrayidx2 >> 2] = (HEAP32[$arrayidx2 >> 2] | 0) + 1;
  HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
 }
 HEAP32[$sizes >> 2] = 0;
 HEAP32[$i >> 2] = 1;
 while (1) {
  if ((HEAP32[$i >> 2] | 0) >= 16) break;
  if ((HEAP32[$sizes + (HEAP32[$i >> 2] << 2) >> 2] | 0) > (1 << HEAP32[$i >> 2] | 0)) {
   label = 7;
   break;
  }
  HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
 }
 if ((label | 0) == 7) {
  HEAP32[$retval >> 2] = _stbi__err(33893) | 0;
  $74 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $74 | 0;
 }
 HEAP32[$code >> 2] = 0;
 HEAP32[$i >> 2] = 1;
 while (1) {
  if ((HEAP32[$i >> 2] | 0) >= 16) break;
  HEAP32[$next_code + (HEAP32[$i >> 2] << 2) >> 2] = HEAP32[$code >> 2];
  HEAP16[(HEAP32[$z$addr >> 2] | 0) + 1024 + (HEAP32[$i >> 2] << 1) >> 1] = HEAP32[$code >> 2];
  HEAP16[(HEAP32[$z$addr >> 2] | 0) + 1124 + (HEAP32[$i >> 2] << 1) >> 1] = HEAP32[$k >> 2];
  HEAP32[$code >> 2] = (HEAP32[$code >> 2] | 0) + (HEAP32[$sizes + (HEAP32[$i >> 2] << 2) >> 2] | 0);
  if (HEAP32[$sizes + (HEAP32[$i >> 2] << 2) >> 2] | 0) if (((HEAP32[$code >> 2] | 0) - 1 | 0) >= (1 << HEAP32[$i >> 2] | 0)) {
   label = 13;
   break;
  }
  HEAP32[(HEAP32[$z$addr >> 2] | 0) + 1056 + (HEAP32[$i >> 2] << 2) >> 2] = HEAP32[$code >> 2] << 16 - (HEAP32[$i >> 2] | 0);
  HEAP32[$code >> 2] = HEAP32[$code >> 2] << 1;
  HEAP32[$k >> 2] = (HEAP32[$k >> 2] | 0) + (HEAP32[$sizes + (HEAP32[$i >> 2] << 2) >> 2] | 0);
  HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
 }
 if ((label | 0) == 13) {
  HEAP32[$retval >> 2] = _stbi__err(33841) | 0;
  $74 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $74 | 0;
 }
 HEAP32[(HEAP32[$z$addr >> 2] | 0) + 1056 + 64 >> 2] = 65536;
 HEAP32[$i >> 2] = 0;
 while (1) {
  if ((HEAP32[$i >> 2] | 0) >= (HEAP32[$num$addr >> 2] | 0)) break;
  HEAP32[$s >> 2] = HEAPU8[(HEAP32[$sizelist$addr >> 2] | 0) + (HEAP32[$i >> 2] | 0) >> 0];
  if (HEAP32[$s >> 2] | 0) {
   CSE$0 = HEAP32[$z$addr >> 2] | 0;
   CSE$1 = HEAP32[$s >> 2] << 1 | 0;
   HEAP32[$c >> 2] = (HEAP32[$next_code + (HEAP32[$s >> 2] << 2) >> 2] | 0) - (HEAPU16[CSE$0 + 1024 + CSE$1 >> 1] | 0) + (HEAPU16[CSE$0 + 1124 + CSE$1 >> 1] | 0);
   HEAP16[$fastv >> 1] = HEAP32[$s >> 2] << 9 | HEAP32[$i >> 2];
   HEAP8[(HEAP32[$z$addr >> 2] | 0) + 1156 + (HEAP32[$c >> 2] | 0) >> 0] = HEAP32[$s >> 2];
   HEAP16[(HEAP32[$z$addr >> 2] | 0) + 1444 + (HEAP32[$c >> 2] << 1) >> 1] = HEAP32[$i >> 2];
   L28 : do if ((HEAP32[$s >> 2] | 0) <= 9) {
    HEAP32[$j >> 2] = _stbi__bit_reverse(HEAP32[$next_code + (HEAP32[$s >> 2] << 2) >> 2] | 0, HEAP32[$s >> 2] | 0) | 0;
    while (1) {
     if ((HEAP32[$j >> 2] | 0) >= 512) break L28;
     HEAP16[(HEAP32[$z$addr >> 2] | 0) + (HEAP32[$j >> 2] << 1) >> 1] = HEAP16[$fastv >> 1] | 0;
     HEAP32[$j >> 2] = (HEAP32[$j >> 2] | 0) + (1 << HEAP32[$s >> 2]);
    }
   } while (0);
   $arrayidx76 = $next_code + (HEAP32[$s >> 2] << 2) | 0;
   HEAP32[$arrayidx76 >> 2] = (HEAP32[$arrayidx76 >> 2] | 0) + 1;
  }
  HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
 }
 HEAP32[$retval >> 2] = 1;
 $74 = HEAP32[$retval >> 2] | 0;
 STACKTOP = sp;
 return $74 | 0;
}

function __ZNSt3__2L12utf8_to_ucs4EPKhS1_RS1_PjS3_RS3_mNS_12codecvt_modeE($frm, $frm_end, $frm_nxt, $to, $to_end, $to_nxt, $Maxcode, $mode) {
 $frm = $frm | 0;
 $frm_end = $frm_end | 0;
 $frm_nxt = $frm_nxt | 0;
 $to = $to | 0;
 $to_end = $to_end | 0;
 $to_nxt = $to_nxt | 0;
 $Maxcode = $Maxcode | 0;
 $mode = $mode | 0;
 var $$sink = 0, $0 = 0, $14 = 0, $15 = 0, $16 = 0, $4 = 0, $5 = 0, $6 = 0, $8 = 0, $9 = 0, $conv14 = 0, $conv142 = 0, $conv145 = 0, $conv36 = 0, $conv80 = 0, $or = 0, $or164 = 0, $or164$sink = 0, $or95 = 0, $retval$9 = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$lhs$cast29$pre$phiZZZZ2D = 0;
 HEAP32[$frm_nxt >> 2] = $frm;
 HEAP32[$to_nxt >> 2] = $to;
 if (!($mode & 4)) $sub$ptr$lhs$cast29$pre$phiZZZZ2D = $frm_end; else {
  $0 = HEAP32[$frm_nxt >> 2] | 0;
  $sub$ptr$lhs$cast = $frm_end;
  if (($sub$ptr$lhs$cast - $0 | 0) > 2) if ((HEAP8[$0 >> 0] | 0) == -17) if ((HEAP8[$0 + 1 >> 0] | 0) == -69) if ((HEAP8[$0 + 2 >> 0] | 0) == -65) {
   HEAP32[$frm_nxt >> 2] = $0 + 3;
   $sub$ptr$lhs$cast29$pre$phiZZZZ2D = $sub$ptr$lhs$cast;
  } else $sub$ptr$lhs$cast29$pre$phiZZZZ2D = $sub$ptr$lhs$cast; else $sub$ptr$lhs$cast29$pre$phiZZZZ2D = $sub$ptr$lhs$cast; else $sub$ptr$lhs$cast29$pre$phiZZZZ2D = $sub$ptr$lhs$cast; else $sub$ptr$lhs$cast29$pre$phiZZZZ2D = $sub$ptr$lhs$cast;
 }
 L9 : while (1) {
  $4 = HEAP32[$frm_nxt >> 2] | 0;
  if ($4 >>> 0 >= $frm_end >>> 0) {
   $retval$9 = 0;
   break;
  }
  $5 = HEAP32[$to_nxt >> 2] | 0;
  if ($5 >>> 0 >= $to_end >>> 0) {
   $retval$9 = 1;
   break;
  }
  $6 = HEAP8[$4 >> 0] | 0;
  $conv14 = $6 & 255;
  do if ($6 << 24 >> 24 > -1) if ($conv14 >>> 0 > $Maxcode >>> 0) {
   $retval$9 = 2;
   break L9;
  } else {
   $$sink = 1;
   $or164$sink = $conv14;
  } else {
   if (($6 & 255) < 194) {
    $retval$9 = 2;
    break L9;
   }
   if (($6 & 255) < 224) {
    if (($sub$ptr$lhs$cast29$pre$phiZZZZ2D - $4 | 0) < 2) {
     $retval$9 = 1;
     break L9;
    }
    $conv36 = HEAPU8[$4 + 1 >> 0] | 0;
    if (($conv36 & 192 | 0) != 128) {
     $retval$9 = 2;
     break L9;
    }
    $or = $conv36 & 63 | $conv14 << 6 & 1984;
    if ($or >>> 0 > $Maxcode >>> 0) {
     $retval$9 = 2;
     break L9;
    } else {
     $$sink = 2;
     $or164$sink = $or;
     break;
    }
   }
   if (($6 & 255) < 240) {
    if (($sub$ptr$lhs$cast29$pre$phiZZZZ2D - $4 | 0) < 3) {
     $retval$9 = 1;
     break L9;
    }
    $8 = HEAP8[$4 + 1 >> 0] | 0;
    $9 = HEAP8[$4 + 2 >> 0] | 0;
    switch ($6 << 24 >> 24) {
    case -32:
     {
      if (($8 & -32) << 24 >> 24 != -96) {
       $retval$9 = 2;
       break L9;
      }
      break;
     }
    case -19:
     {
      if (($8 & -32) << 24 >> 24 != -128) {
       $retval$9 = 2;
       break L9;
      }
      break;
     }
    default:
     if (($8 & -64) << 24 >> 24 != -128) {
      $retval$9 = 2;
      break L9;
     }
    }
    $conv80 = $9 & 255;
    if (($conv80 & 192 | 0) != 128) {
     $retval$9 = 2;
     break L9;
    }
    $or95 = ($8 & 63) << 6 | $conv14 << 12 & 61440 | $conv80 & 63;
    if ($or95 >>> 0 > $Maxcode >>> 0) {
     $retval$9 = 2;
     break L9;
    } else {
     $$sink = 3;
     $or164$sink = $or95;
     break;
    }
   }
   if (($6 & 255) >= 245) {
    $retval$9 = 2;
    break L9;
   }
   if (($sub$ptr$lhs$cast29$pre$phiZZZZ2D - $4 | 0) < 4) {
    $retval$9 = 1;
    break L9;
   }
   $14 = HEAP8[$4 + 1 >> 0] | 0;
   $15 = HEAP8[$4 + 2 >> 0] | 0;
   $16 = HEAP8[$4 + 3 >> 0] | 0;
   switch ($6 << 24 >> 24) {
   case -16:
    {
     if (($14 + 112 & 255) >= 48) {
      $retval$9 = 2;
      break L9;
     }
     break;
    }
   case -12:
    {
     if (($14 & -16) << 24 >> 24 != -128) {
      $retval$9 = 2;
      break L9;
     }
     break;
    }
   default:
    if (($14 & -64) << 24 >> 24 != -128) {
     $retval$9 = 2;
     break L9;
    }
   }
   $conv142 = $15 & 255;
   if (($conv142 & 192 | 0) != 128) {
    $retval$9 = 2;
    break L9;
   }
   $conv145 = $16 & 255;
   if (($conv145 & 192 | 0) != 128) {
    $retval$9 = 2;
    break L9;
   }
   $or164 = ($14 & 63) << 12 | $conv14 << 18 & 1835008 | $conv142 << 6 & 4032 | $conv145 & 63;
   if ($or164 >>> 0 > $Maxcode >>> 0) {
    $retval$9 = 2;
    break L9;
   } else {
    $$sink = 4;
    $or164$sink = $or164;
   }
  } while (0);
  HEAP32[$5 >> 2] = $or164$sink;
  HEAP32[$frm_nxt >> 2] = $4 + $$sink;
  HEAP32[$to_nxt >> 2] = (HEAP32[$to_nxt >> 2] | 0) + 4;
 }
 return $retval$9 | 0;
}

function __ZN8nlohmann6detail28json_sax_dom_callback_parserINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE10end_objectEv($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $15 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__end_$i = 0, $__size_$i = 0, $add$ptr$i11 = 0, $agg$tmp = 0, $agg$tmp38 = 0, $it = 0, $ref$tmp = 0, $ref_stack = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64);
 $agg$tmp = sp;
 $it = sp + 48 | 0;
 $ref$tmp = sp + 32 | 0;
 $agg$tmp38 = sp + 16 | 0;
 $ref_stack = $this + 4 | 0;
 $__end_$i = $this + 8 | 0;
 $0 = HEAP32[$__end_$i >> 2] | 0;
 $1 = HEAP32[$0 + -4 >> 2] | 0;
 if ($1 | 0) if (!(__ZNKSt3__28functionIFbiN8nlohmann6detail6parserINS1_10basic_jsonINS_3mapENS_6vectorENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEbxydSA_NS1_14adl_serializerEEEE13parse_event_tERSE_EEclEiSG_SH_($this + 48 | 0, ($0 - (HEAP32[$ref_stack >> 2] | 0) >> 2) + -1 | 0, 1, $1) | 0)) {
  __ZN8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEC2ERKSB_($agg$tmp, $this + 72 | 0);
  __ZN8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEaSESB_(HEAP32[(HEAP32[$__end_$i >> 2] | 0) + -4 >> 2] | 0, $agg$tmp) | 0;
  __ZN8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEED2Ev($agg$tmp);
 }
 $6 = HEAP32[$ref_stack >> 2] | 0;
 $7 = HEAP32[$__end_$i >> 2] | 0;
 if (($6 | 0) == ($7 | 0)) ___assert_fail(27972, 22221, 4599, 28004);
 $__size_$i = $this + 20 | 0;
 $8 = HEAP32[$__size_$i >> 2] | 0;
 if (!$8) ___assert_fail(27922, 22221, 4600, 28004);
 $add$ptr$i11 = $7 + -4 | 0;
 HEAP32[$__end_$i >> 2] = $add$ptr$i11;
 HEAP32[$__size_$i >> 2] = $8 + -1;
 if (($6 | 0) != ($add$ptr$i11 | 0)) {
  $9 = HEAP32[$7 + -8 >> 2] | 0;
  if ($9 | 0) if (__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE9is_objectEv($9) | 0) {
   __ZN8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE5beginEv($it, HEAP32[(HEAP32[$__end_$i >> 2] | 0) + -4 >> 2] | 0);
   __ZN8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE3endEv($ref$tmp, HEAP32[(HEAP32[$__end_$i >> 2] | 0) + -4 >> 2] | 0);
   L15 : do if (__ZNK8nlohmann6detail9iter_implINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEEneERKSE_($it, $ref$tmp) | 0) {
    while (1) {
     if (__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE12is_discardedEv(__ZNK8nlohmann6detail9iter_implINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEEptEv($it) | 0) | 0) break;
     __ZN8nlohmann6detail9iter_implINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEEppEv($it) | 0;
     __ZN8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE3endEv($ref$tmp, HEAP32[(HEAP32[$__end_$i >> 2] | 0) + -4 >> 2] | 0);
     if (!(__ZNK8nlohmann6detail9iter_implINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEEneERKSE_($it, $ref$tmp) | 0)) break L15;
    }
    $15 = HEAP32[(HEAP32[$__end_$i >> 2] | 0) + -4 >> 2] | 0;
    __ZN8nlohmann6detail9iter_implINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEEC2ERKSE_($agg$tmp38, $it);
    __ZN8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE5eraseINS_6detail9iter_implISB_EELi0EEET_SG_($ref$tmp, $15, $agg$tmp38);
   } while (0);
  }
 }
 STACKTOP = sp;
 return 1;
}

function __ZNSt3__216__copy_unalignedINS_6vectorIbNS_9allocatorIbEEEELb0EEENS_14__bit_iteratorIT_Lb0EXLi0EEEENS5_IS6_XT0_EXLi0EEEES8_S7_($agg$result, $__first, $__last, $__result) {
 $agg$result = $agg$result | 0;
 $__first = $__first | 0;
 $__last = $__last | 0;
 $__result = $__result | 0;
 var $$sroa$speculated = 0, $$sroa$speculated49 = 0, $$sroa$speculated56 = 0, $1 = 0, $12 = 0, $13 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $27 = 0, $28 = 0, $3 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $6 = 0, $7 = 0, $__ctz_2$i = 0, $__ctz_59$phi$trans$insert = 0, $__ctz_59$pre$phiZ2D = 0, $__ctz_9 = 0, $__n$0 = 0, $__n$1$lcssa = 0, $__n$169 = 0, $add = 0, $add$ptr = 0, $add$ptr110 = 0, $add107 = 0, $and8 = 0, $and90 = 0, $incdec$ptr = 0, $incdec$ptr75 = 0, $neg67 = 0, $rem = 0, $rem113 = 0, $shl63 = 0, $sub = 0, $sub$i = 0, $sub10 = 0, $sub115 = 0, $sub41 = 0, $sub60 = 0;
 $1 = HEAP32[$__first >> 2] | 0;
 $__ctz_2$i = $__first + 4 | 0;
 $3 = HEAP32[$__ctz_2$i >> 2] | 0;
 $sub$i = ((HEAP32[$__last >> 2] | 0) - $1 << 3) + (HEAP32[$__last + 4 >> 2] | 0) - $3 | 0;
 $4 = $1;
 if (($sub$i | 0) > 0) {
  if (!$3) {
   $__ctz_59$phi$trans$insert = $__result + 4 | 0;
   $12 = HEAP32[$__ctz_59$phi$trans$insert >> 2] | 0;
   $33 = $4;
   $__ctz_59$pre$phiZ2D = $__ctz_59$phi$trans$insert;
   $__n$0 = $sub$i;
  } else {
   $sub = 32 - $3 | 0;
   $$sroa$speculated56 = ($sub$i | 0) < ($sub | 0) ? $sub$i : $sub;
   $and8 = -1 >>> ($sub - $$sroa$speculated56 | 0) & -1 << $3 & HEAP32[$4 >> 2];
   $__ctz_9 = $__result + 4 | 0;
   $6 = HEAP32[$__ctz_9 >> 2] | 0;
   $sub10 = 32 - $6 | 0;
   $$sroa$speculated49 = $sub10 >>> 0 < $$sroa$speculated56 >>> 0 ? $sub10 : $$sroa$speculated56;
   $7 = HEAP32[$__result >> 2] | 0;
   HEAP32[$7 >> 2] = HEAP32[$7 >> 2] & ~(-1 >>> ($sub10 - $$sroa$speculated49 | 0) & -1 << $6) | ($6 >>> 0 > $3 >>> 0 ? $and8 << $6 - $3 : $and8 >>> ($3 - $6 | 0));
   $add = $$sroa$speculated49 + $6 | 0;
   $add$ptr = $7 + ($add >>> 5 << 2) | 0;
   HEAP32[$__result >> 2] = $add$ptr;
   $rem = $add & 31;
   HEAP32[$__ctz_9 >> 2] = $rem;
   $sub41 = $$sroa$speculated56 - $$sroa$speculated49 | 0;
   if (($sub41 | 0) > 0) {
    HEAP32[$add$ptr >> 2] = $and8 >>> ((HEAP32[$__ctz_2$i >> 2] | 0) + $$sroa$speculated49 | 0) | HEAP32[$add$ptr >> 2] & ~(-1 >>> (32 - $sub41 | 0));
    HEAP32[$__ctz_9 >> 2] = $sub41;
    $34 = $sub41;
   } else $34 = $rem;
   $incdec$ptr = (HEAP32[$__first >> 2] | 0) + 4 | 0;
   HEAP32[$__first >> 2] = $incdec$ptr;
   $12 = $34;
   $33 = $incdec$ptr;
   $__ctz_59$pre$phiZ2D = $__ctz_9;
   $__n$0 = $sub$i - $$sroa$speculated56 | 0;
  }
  $sub60 = 32 - $12 | 0;
  $shl63 = -1 << $12;
  if (($__n$0 | 0) > 31) {
   $neg67 = ~$shl63;
   $13 = ~$__n$0;
   $17 = $__n$0 + (($13 | 0) > -64 ? $13 : -64) + 32 & -32;
   $19 = $33;
   $__n$169 = $__n$0;
   while (1) {
    $18 = HEAP32[$19 >> 2] | 0;
    $20 = HEAP32[$__result >> 2] | 0;
    HEAP32[$20 >> 2] = HEAP32[$20 >> 2] & $neg67 | $18 << $12;
    $incdec$ptr75 = $20 + 4 | 0;
    HEAP32[$__result >> 2] = $incdec$ptr75;
    HEAP32[$incdec$ptr75 >> 2] = HEAP32[$incdec$ptr75 >> 2] & $shl63 | $18 >>> $sub60;
    $19 = (HEAP32[$__first >> 2] | 0) + 4 | 0;
    HEAP32[$__first >> 2] = $19;
    if (($__n$169 | 0) <= 63) break; else $__n$169 = $__n$169 + -32 | 0;
   }
   $27 = $19;
   $__n$1$lcssa = $__n$0 + -32 - $17 | 0;
  } else {
   $27 = $33;
   $__n$1$lcssa = $__n$0;
  }
  if (($__n$1$lcssa | 0) > 0) {
   $and90 = HEAP32[$27 >> 2] & -1 >>> (32 - $__n$1$lcssa | 0);
   $$sroa$speculated = ($sub60 | 0) < ($__n$1$lcssa | 0) ? $sub60 : $__n$1$lcssa;
   $28 = HEAP32[$__result >> 2] | 0;
   HEAP32[$28 >> 2] = HEAP32[$28 >> 2] & ~(-1 >>> ($sub60 - $$sroa$speculated | 0) & $shl63) | $and90 << $12;
   $add107 = $$sroa$speculated + $12 | 0;
   $add$ptr110 = $28 + ($add107 >>> 5 << 2) | 0;
   HEAP32[$__result >> 2] = $add$ptr110;
   $rem113 = $add107 & 31;
   HEAP32[$__ctz_59$pre$phiZ2D >> 2] = $rem113;
   $sub115 = $__n$1$lcssa - $$sroa$speculated | 0;
   if (($sub115 | 0) > 0) {
    HEAP32[$add$ptr110 >> 2] = HEAP32[$add$ptr110 >> 2] & ~(-1 >>> (32 - $sub115 | 0)) | $and90 >>> $$sroa$speculated;
    HEAP32[$__ctz_59$pre$phiZ2D >> 2] = $sub115;
    $32 = $sub115;
   } else $32 = $rem113;
  } else $32 = $12;
 } else $32 = HEAP32[$__result + 4 >> 2] | 0;
 HEAP32[$agg$result >> 2] = HEAP32[$__result >> 2];
 HEAP32[$agg$result + 4 >> 2] = $32;
 return;
}

function __ZNSt3__24__fs10filesystem6detail12_GLOBAL__N_117format_string_impEPKcz($agg$result, $msg, $varargs) {
 $agg$result = $agg$result | 0;
 $msg = $msg | 0;
 $varargs = $varargs | 0;
 var $0 = 0, $1 = 0, $3 = 0, $4 = 0, $6 = 0, $__i$0$i$i = 0, $__size_$i$i$i11 = 0, $__size_$i3$i$i = 0, $add = 0, $add$ptr$i$i = 0, $add6$i$i = 0, $add632$i$i = 0, $add635$i$i = 0, $args = 0, $args_copy_guard = 0, $args_cp = 0, $args_guard = 0, $call6 = 0, $cond$i$i15 = 0, $cond$i19$i$i = 0, $cond$i2933$i$i = 0, $cond$i30$i$i = 0, $conv$i$i$i = 0, $conv$i$i7$i = 0, $local_buff = 0, $ref$tmp$i8$i = 0, $sub$i = 0, $tobool$i$i$i12 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 320 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(320);
 $ref$tmp$i8$i = sp + 304 | 0;
 $args = sp + 16 | 0;
 $args_guard = sp + 40 | 0;
 $args_cp = sp;
 $args_copy_guard = sp + 32 | 0;
 $local_buff = sp + 48 | 0;
 HEAP32[$args >> 2] = $varargs;
 __ZZNSt3__24__fs10filesystem6detail12_GLOBAL__N_117format_string_impEPKczEN11GuardVAListC2ERA4_i($args_guard, $args);
 HEAP32[$args_cp >> 2] = HEAP32[$args >> 2];
 __ZZNSt3__24__fs10filesystem6detail12_GLOBAL__N_117format_string_impEPKczEN11GuardVAListC2ERA4_i($args_copy_guard, $args_cp);
 HEAP32[$agg$result >> 2] = 0;
 HEAP32[$agg$result + 4 >> 2] = 0;
 HEAP32[$agg$result + 8 >> 2] = 0;
 $__i$0$i$i = 0;
 while (1) {
  if (($__i$0$i$i | 0) == 3) break;
  HEAP32[$agg$result + ($__i$0$i$i << 2) >> 2] = 0;
  $__i$0$i$i = $__i$0$i$i + 1 | 0;
 }
 $call6 = _vsnprintf($local_buff, 256, $msg, $args_cp) | 0;
 __ZZNSt3__24__fs10filesystem6detail12_GLOBAL__N_117format_string_impEPKczEN11GuardVAList5clearEv($args_copy_guard);
 do if ($call6 | 0) {
  if ($call6 >>> 0 < 256) {
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcm($agg$result, $local_buff, $call6) | 0;
   break;
  }
  $add = $call6 + 1 | 0;
  $__size_$i$i$i11 = $agg$result + 11 | 0;
  $0 = HEAP8[$__size_$i$i$i11 >> 0] | 0;
  $tobool$i$i$i12 = $0 << 24 >> 24 < 0;
  $__size_$i3$i$i = $agg$result + 4 | 0;
  $1 = HEAP32[$__size_$i3$i$i >> 2] | 0;
  $conv$i$i$i = $0 & 255;
  $cond$i$i15 = $tobool$i$i$i12 ? $1 : $conv$i$i$i;
  do if ($call6 >>> 0 > $cond$i$i15 >>> 0) {
   $sub$i = $call6 - $cond$i$i15 | 0;
   if (!$sub$i) label = 20; else {
    if ($tobool$i$i$i12) {
     $cond$i19$i$i = $1;
     $cond$i30$i$i = (HEAP32[$agg$result + 8 >> 2] & 2147483647) + -1 | 0;
    } else {
     $cond$i19$i$i = $conv$i$i$i;
     $cond$i30$i$i = 10;
    }
    if (($cond$i30$i$i - $cond$i19$i$i | 0) >>> 0 < $sub$i >>> 0) {
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEmmmmmm($agg$result, $cond$i30$i$i, $cond$i19$i$i + $sub$i - $cond$i30$i$i | 0, $cond$i19$i$i, $cond$i19$i$i, 0, 0);
     $3 = HEAP8[$__size_$i$i$i11 >> 0] | 0;
    } else $3 = $0;
    if ($3 << 24 >> 24 < 0) {
     $4 = HEAP32[$agg$result >> 2] | 0;
     $add632$i$i = $cond$i19$i$i + $sub$i | 0;
     HEAP32[$__size_$i3$i$i >> 2] = $add632$i$i;
     $add635$i$i = $add632$i$i;
     $cond$i2933$i$i = $4;
    } else {
     $add6$i$i = $cond$i19$i$i + $sub$i | 0;
     HEAP8[$__size_$i$i$i11 >> 0] = $add6$i$i;
     $add635$i$i = $add6$i$i;
     $cond$i2933$i$i = $agg$result;
    }
    HEAP8[$ref$tmp$i8$i >> 0] = 0;
    __ZNSt3__211char_traitsIcE6assignERcRKc($cond$i2933$i$i + $add635$i$i | 0, $ref$tmp$i8$i);
    label = 20;
   }
  } else if ($tobool$i$i$i12) {
   $add$ptr$i$i = (HEAP32[$agg$result >> 2] | 0) + $call6 | 0;
   HEAP8[$ref$tmp$i8$i >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($add$ptr$i$i, $ref$tmp$i8$i);
   HEAP32[$__size_$i3$i$i >> 2] = $call6;
   label = 20;
   break;
  } else {
   HEAP8[$ref$tmp$i8$i >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($agg$result + $call6 | 0, $ref$tmp$i8$i);
   $conv$i$i7$i = $call6 & 255;
   HEAP8[$__size_$i$i$i11 >> 0] = $conv$i$i7$i;
   $6 = $conv$i$i7$i;
   break;
  } while (0);
  if ((label | 0) == 20) $6 = HEAP8[$__size_$i$i$i11 >> 0] | 0;
  _vsnprintf($6 << 24 >> 24 < 0 ? HEAP32[$agg$result >> 2] | 0 : $agg$result, $add, $msg, $args) | 0;
 } while (0);
 __ZZNSt3__24__fs10filesystem6detail12_GLOBAL__N_117format_string_impEPKczEN11GuardVAListD2Ev($args_copy_guard);
 __ZZNSt3__24__fs10filesystem6detail12_GLOBAL__N_117format_string_impEPKczEN11GuardVAListD2Ev($args_guard);
 STACKTOP = sp;
 return;
}

function __ZN4tson7TilesetC2EOS0_($this, $0) {
 $this = $this | 0;
 $0 = $0 | 0;
 var $1 = 0, $20 = 0, $25 = 0, $26 = 0, $6 = 0, $7 = 0, $__end_$i = 0, $__end_$i$i = 0, $__end_$i$i13 = 0, $__end_$i$i19 = 0, $__end_$i16 = 0, $__end_$i22 = 0, $__value_$i$i$i8$i = 0, $__value_$i$i$i8$i17 = 0, $__value_$i$i$i8$i23 = 0, $__value_$i$i$i9$i = 0, $__value_$i$i$i9$i14 = 0, $__value_$i$i$i9$i20 = 0, $m_image = 0, $m_image3 = 0, $m_imageSize = 0, $m_imageSize4 = 0, $m_name = 0, $m_name5 = 0, $m_spacing = 0, $m_spacing6 = 0, $m_terrains = 0, $m_terrains11 = 0, $m_tiles = 0, $m_tiles8 = 0, $m_type = 0, $m_type7 = 0, $m_wangsets = 0, $m_wangsets9 = 0;
 $1 = $0;
 $6 = HEAP32[$1 + 4 >> 2] | 0;
 $7 = $this;
 HEAP32[$7 >> 2] = HEAP32[$1 >> 2];
 HEAP32[$7 + 4 >> 2] = $6;
 $m_image = $this + 8 | 0;
 $m_image3 = $0 + 8 | 0;
 HEAP32[$m_image >> 2] = HEAP32[$m_image3 >> 2];
 HEAP32[$m_image + 4 >> 2] = HEAP32[$m_image3 + 4 >> 2];
 HEAP32[$m_image + 8 >> 2] = HEAP32[$m_image3 + 8 >> 2];
 HEAP32[$m_image3 >> 2] = 0;
 HEAP32[$m_image3 + 4 >> 2] = 0;
 HEAP32[$m_image3 + 8 >> 2] = 0;
 $m_imageSize = $this + 20 | 0;
 $m_imageSize4 = $0 + 20 | 0;
 HEAP32[$m_imageSize >> 2] = HEAP32[$m_imageSize4 >> 2];
 HEAP32[$m_imageSize + 4 >> 2] = HEAP32[$m_imageSize4 + 4 >> 2];
 HEAP32[$m_imageSize + 8 >> 2] = HEAP32[$m_imageSize4 + 8 >> 2];
 $m_name = $this + 32 | 0;
 $m_name5 = $0 + 32 | 0;
 HEAP32[$m_name >> 2] = HEAP32[$m_name5 >> 2];
 HEAP32[$m_name + 4 >> 2] = HEAP32[$m_name5 + 4 >> 2];
 HEAP32[$m_name + 8 >> 2] = HEAP32[$m_name5 + 8 >> 2];
 HEAP32[$m_name5 >> 2] = 0;
 HEAP32[$m_name5 + 4 >> 2] = 0;
 HEAP32[$m_name5 + 8 >> 2] = 0;
 $m_spacing = $this + 44 | 0;
 $m_spacing6 = $0 + 44 | 0;
 HEAP32[$m_spacing >> 2] = HEAP32[$m_spacing6 >> 2];
 HEAP32[$m_spacing + 4 >> 2] = HEAP32[$m_spacing6 + 4 >> 2];
 HEAP32[$m_spacing + 8 >> 2] = HEAP32[$m_spacing6 + 8 >> 2];
 HEAP32[$m_spacing + 12 >> 2] = HEAP32[$m_spacing6 + 12 >> 2];
 HEAP32[$m_spacing + 16 >> 2] = HEAP32[$m_spacing6 + 16 >> 2];
 $m_type = $this + 64 | 0;
 $m_type7 = $0 + 64 | 0;
 HEAP32[$m_type >> 2] = HEAP32[$m_type7 >> 2];
 HEAP32[$m_type + 4 >> 2] = HEAP32[$m_type7 + 4 >> 2];
 HEAP32[$m_type + 8 >> 2] = HEAP32[$m_type7 + 8 >> 2];
 HEAP32[$m_type7 >> 2] = 0;
 HEAP32[$m_type7 + 4 >> 2] = 0;
 HEAP32[$m_type7 + 8 >> 2] = 0;
 $m_tiles = $this + 76 | 0;
 $m_tiles8 = $0 + 76 | 0;
 HEAP32[$m_tiles >> 2] = 0;
 $__end_$i$i19 = $this + 80 | 0;
 HEAP32[$__end_$i$i19 >> 2] = 0;
 $__value_$i$i$i9$i20 = $this + 84 | 0;
 HEAP32[$__value_$i$i$i9$i20 >> 2] = 0;
 HEAP32[$m_tiles >> 2] = HEAP32[$m_tiles8 >> 2];
 $__end_$i22 = $0 + 80 | 0;
 HEAP32[$__end_$i$i19 >> 2] = HEAP32[$__end_$i22 >> 2];
 $__value_$i$i$i8$i23 = $0 + 84 | 0;
 HEAP32[$__value_$i$i$i9$i20 >> 2] = HEAP32[$__value_$i$i$i8$i23 >> 2];
 HEAP32[$__value_$i$i$i8$i23 >> 2] = 0;
 HEAP32[$__end_$i22 >> 2] = 0;
 HEAP32[$m_tiles8 >> 2] = 0;
 $m_wangsets = $this + 88 | 0;
 $m_wangsets9 = $0 + 88 | 0;
 HEAP32[$m_wangsets >> 2] = 0;
 $__end_$i$i13 = $this + 92 | 0;
 HEAP32[$__end_$i$i13 >> 2] = 0;
 $__value_$i$i$i9$i14 = $this + 96 | 0;
 HEAP32[$__value_$i$i$i9$i14 >> 2] = 0;
 HEAP32[$m_wangsets >> 2] = HEAP32[$m_wangsets9 >> 2];
 $__end_$i16 = $0 + 92 | 0;
 HEAP32[$__end_$i$i13 >> 2] = HEAP32[$__end_$i16 >> 2];
 $__value_$i$i$i8$i17 = $0 + 96 | 0;
 HEAP32[$__value_$i$i$i9$i14 >> 2] = HEAP32[$__value_$i$i$i8$i17 >> 2];
 HEAP32[$__value_$i$i$i8$i17 >> 2] = 0;
 HEAP32[$__end_$i16 >> 2] = 0;
 HEAP32[$m_wangsets9 >> 2] = 0;
 __ZN4tson18PropertyCollectionC2EOS0_($this + 100 | 0, $0 + 100 | 0);
 $m_terrains = $this + 124 | 0;
 $m_terrains11 = $0 + 124 | 0;
 HEAP32[$m_terrains >> 2] = 0;
 $__end_$i$i = $this + 128 | 0;
 HEAP32[$__end_$i$i >> 2] = 0;
 $__value_$i$i$i9$i = $this + 132 | 0;
 HEAP32[$__value_$i$i$i9$i >> 2] = 0;
 HEAP32[$m_terrains >> 2] = HEAP32[$m_terrains11 >> 2];
 $__end_$i = $0 + 128 | 0;
 HEAP32[$__end_$i$i >> 2] = HEAP32[$__end_$i >> 2];
 $__value_$i$i$i8$i = $0 + 132 | 0;
 HEAP32[$__value_$i$i$i9$i >> 2] = HEAP32[$__value_$i$i$i8$i >> 2];
 HEAP32[$__value_$i$i$i8$i >> 2] = 0;
 HEAP32[$__end_$i >> 2] = 0;
 HEAP32[$m_terrains11 >> 2] = 0;
 $20 = $0 + 136 | 0;
 $25 = HEAP32[$20 + 4 >> 2] | 0;
 $26 = $this + 136 | 0;
 HEAP32[$26 >> 2] = HEAP32[$20 >> 2];
 HEAP32[$26 + 4 >> 2] = $25;
 __ZN4tson4GridC2EOS0_($this + 144 | 0, $0 + 144 | 0);
 return;
}

function __ZNKSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIwS3_NS_9allocatorIwEEEE($this, $__b, $__e, $__intl, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__intl = $__intl | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $12 = 0, $14 = 0, $15 = 0, $19 = 0, $2 = 0, $25 = 0, $27 = 0, $3 = 0, $4 = 0, $7 = 0, $__loc = 0, $__neg = 0, $__size_$i1$i = 0, $__w$0 = 0, $__wb = 0, $__wbuf = 0, $__wn = 0, $add$ptr10 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call$i = 0, $call$i19 = 0, $retval$0$i$i$i$i = 0, $retval$0$i$i13$i$i = 0, $retval$sroa$0$0$copyload = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 432 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(432);
 $agg$tmp$byval_copy = sp + 424 | 0;
 $__wbuf = sp;
 $__wb = sp + 416 | 0;
 $__wn = sp + 408 | 0;
 $__loc = sp + 400 | 0;
 $__neg = sp + 428 | 0;
 $agg$tmp = sp + 404 | 0;
 HEAP32[$__wb >> 2] = $__wbuf;
 HEAP32[$__wb + 4 >> 2] = 153;
 __ZNKSt3__28ios_base6getlocEv($__loc, $__iob);
 $call$i = __ZNKSt3__26locale9use_facetERNS0_2idE($__loc, 61248) | 0;
 HEAP8[$__neg >> 0] = 0;
 $2 = HEAP32[$__e >> 2] | 0;
 HEAP32[$agg$tmp >> 2] = $2;
 $3 = HEAP32[$__iob + 4 >> 2] | 0;
 HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 $4 = $2;
 if (__ZNSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIwEERNS_10unique_ptrIwPFvPvEEERPwSM_($__b, $agg$tmp$byval_copy, $__intl, $__loc, $3, $__err, $__neg, $call$i, $__wb, $__wn, $__wbuf + 400 | 0) | 0) {
  $__size_$i1$i = $__v + 8 + 3 | 0;
  if ((HEAP8[$__size_$i1$i >> 0] | 0) < 0) {
   $7 = HEAP32[$__v >> 2] | 0;
   HEAP32[$agg$tmp$byval_copy >> 2] = 0;
   __ZNSt3__211char_traitsIwE6assignERwRKw($7, $agg$tmp$byval_copy);
   HEAP32[$__v + 4 >> 2] = 0;
  } else {
   HEAP32[$agg$tmp$byval_copy >> 2] = 0;
   __ZNSt3__211char_traitsIwE6assignERwRKw($__v, $agg$tmp$byval_copy);
   HEAP8[$__size_$i1$i >> 0] = 0;
  }
  if (HEAP8[$__neg >> 0] | 0) __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9push_backEw($__v, FUNCTION_TABLE_iii[HEAP32[(HEAP32[$call$i >> 2] | 0) + 44 >> 2] & 31]($call$i, 45) | 0);
  $call$i19 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$call$i >> 2] | 0) + 44 >> 2] & 31]($call$i, 48) | 0;
  $12 = HEAP32[$__wn >> 2] | 0;
  $add$ptr10 = $12 + -4 | 0;
  $__w$0 = HEAP32[$__wb >> 2] | 0;
  while (1) {
   if ($__w$0 >>> 0 >= $add$ptr10 >>> 0) break;
   if ((HEAP32[$__w$0 >> 2] | 0) != ($call$i19 | 0)) break;
   $__w$0 = $__w$0 + 4 | 0;
  }
  __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE23__append_forward_unsafeIPwEERS5_T_S9_($__v, $__w$0, $12) | 0;
 }
 $14 = HEAP32[$__b >> 2] | 0;
 do if (!$14) $27 = 1; else {
  $15 = HEAP32[$14 + 12 >> 2] | 0;
  if (($15 | 0) == (HEAP32[$14 + 16 >> 2] | 0)) $retval$0$i$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$14 >> 2] | 0) + 36 >> 2] & 127]($14) | 0; else $retval$0$i$i$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$15 >> 2] | 0) | 0;
  if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i$i$i, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
   HEAP32[$__b >> 2] = 0;
   $27 = 1;
   break;
  } else {
   $27 = (HEAP32[$__b >> 2] | 0) == 0;
   break;
  }
 } while (0);
 do if (!$2) label = 25; else {
  $19 = HEAP32[$4 + 12 >> 2] | 0;
  if (($19 | 0) == (HEAP32[$4 + 16 >> 2] | 0)) $retval$0$i$i13$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$2 >> 2] | 0) + 36 >> 2] & 127]($4) | 0; else $retval$0$i$i13$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$19 >> 2] | 0) | 0;
  if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i13$i$i, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
   HEAP32[$__e >> 2] = 0;
   label = 25;
   break;
  } else if ($27) break; else {
   label = 27;
   break;
  }
 } while (0);
 if ((label | 0) == 25) if ($27) label = 27;
 if ((label | 0) == 27) HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
 $retval$sroa$0$0$copyload = HEAP32[$__b >> 2] | 0;
 __ZNSt3__26localeD2Ev($__loc);
 $25 = HEAP32[$__wb >> 2] | 0;
 HEAP32[$__wb >> 2] = 0;
 if ($25 | 0) FUNCTION_TABLE_vi[HEAP32[$__wb + 4 >> 2] & 255]($25);
 STACKTOP = sp;
 return $retval$sroa$0$0$copyload | 0;
}

function __ZNSt3__2L13utf16_to_utf8EPKtS1_RS1_PhS3_RS3_mNS_12codecvt_modeE($frm, $frm_end, $frm_nxt, $to, $to_end, $to_nxt, $Maxcode, $mode) {
 $frm = $frm | 0;
 $frm_end = $frm_end | 0;
 $frm_nxt = $frm_nxt | 0;
 $to = $to | 0;
 $to_end = $to_end | 0;
 $to_nxt = $to_nxt | 0;
 $Maxcode = $Maxcode | 0;
 $mode = $mode | 0;
 var $$pre64 = 0, $0 = 0, $1 = 0, $11 = 0, $12 = 0, $17 = 0, $19 = 0, $2 = 0, $21 = 0, $22 = 0, $23 = 0, $26 = 0, $27 = 0, $3 = 0, $4 = 0, $5 = 0, $7 = 0, $8 = 0, $add101 = 0, $and85 = 0, $arrayidx = 0, $conv = 0, $conv73 = 0, $incdec$ptr168 = 0, $retval$4 = 0, $sub$ptr$lhs$cast67 = 0, label = 0;
 label = 0;
 HEAP32[$frm_nxt >> 2] = $frm;
 HEAP32[$to_nxt >> 2] = $to;
 $$pre64 = $to_end;
 if (!($mode & 2)) label = 4; else if (($$pre64 - $to | 0) < 3) $retval$4 = 1; else {
  HEAP32[$to_nxt >> 2] = $to + 1;
  HEAP8[$to >> 0] = -17;
  $0 = HEAP32[$to_nxt >> 2] | 0;
  HEAP32[$to_nxt >> 2] = $0 + 1;
  HEAP8[$0 >> 0] = -69;
  $1 = HEAP32[$to_nxt >> 2] | 0;
  HEAP32[$to_nxt >> 2] = $1 + 1;
  HEAP8[$1 >> 0] = -65;
  label = 4;
 }
 L4 : do if ((label | 0) == 4) {
  $sub$ptr$lhs$cast67 = $frm_end;
  $2 = HEAP32[$frm_nxt >> 2] | 0;
  while (1) {
   if ($2 >>> 0 >= $frm_end >>> 0) {
    $retval$4 = 0;
    break L4;
   }
   $3 = HEAP16[$2 >> 1] | 0;
   $conv = $3 & 65535;
   if ($conv >>> 0 > $Maxcode >>> 0) {
    $retval$4 = 2;
    break L4;
   }
   do if (($3 & 65535) < 128) {
    $4 = HEAP32[$to_nxt >> 2] | 0;
    if (($$pre64 - $4 | 0) < 1) {
     $retval$4 = 1;
     break L4;
    }
    HEAP32[$to_nxt >> 2] = $4 + 1;
    HEAP8[$4 >> 0] = $3;
   } else {
    if (($3 & 65535) < 2048) {
     $5 = HEAP32[$to_nxt >> 2] | 0;
     if (($$pre64 - $5 | 0) < 2) {
      $retval$4 = 1;
      break L4;
     }
     HEAP32[$to_nxt >> 2] = $5 + 1;
     HEAP8[$5 >> 0] = $conv >>> 6 | 192;
     $7 = HEAP32[$to_nxt >> 2] | 0;
     HEAP32[$to_nxt >> 2] = $7 + 1;
     HEAP8[$7 >> 0] = $conv & 63 | 128;
     break;
    }
    if (($3 & 65535) < 55296) {
     $8 = HEAP32[$to_nxt >> 2] | 0;
     if (($$pre64 - $8 | 0) < 3) {
      $retval$4 = 1;
      break L4;
     }
     HEAP32[$to_nxt >> 2] = $8 + 1;
     HEAP8[$8 >> 0] = $conv >>> 12 | 224;
     $11 = HEAP32[$to_nxt >> 2] | 0;
     HEAP32[$to_nxt >> 2] = $11 + 1;
     HEAP8[$11 >> 0] = $conv >>> 6 & 63 | 128;
     $12 = HEAP32[$to_nxt >> 2] | 0;
     HEAP32[$to_nxt >> 2] = $12 + 1;
     HEAP8[$12 >> 0] = $conv & 63 | 128;
     break;
    }
    if (($3 & 65535) >= 56320) {
     if (($3 & 65535) < 57344) {
      $retval$4 = 2;
      break L4;
     }
     $23 = HEAP32[$to_nxt >> 2] | 0;
     if (($$pre64 - $23 | 0) < 3) {
      $retval$4 = 1;
      break L4;
     }
     HEAP32[$to_nxt >> 2] = $23 + 1;
     HEAP8[$23 >> 0] = $conv >>> 12 | 224;
     $26 = HEAP32[$to_nxt >> 2] | 0;
     HEAP32[$to_nxt >> 2] = $26 + 1;
     HEAP8[$26 >> 0] = $conv >>> 6 & 63 | 128;
     $27 = HEAP32[$to_nxt >> 2] | 0;
     HEAP32[$to_nxt >> 2] = $27 + 1;
     HEAP8[$27 >> 0] = $conv & 63 | 128;
     break;
    }
    if (($sub$ptr$lhs$cast67 - $2 | 0) < 4) {
     $retval$4 = 1;
     break L4;
    }
    $arrayidx = $2 + 2 | 0;
    $conv73 = HEAPU16[$arrayidx >> 1] | 0;
    if (($conv73 & 64512 | 0) != 56320) {
     $retval$4 = 2;
     break L4;
    }
    if (($$pre64 - (HEAP32[$to_nxt >> 2] | 0) | 0) < 4) {
     $retval$4 = 1;
     break L4;
    }
    $and85 = $conv & 960;
    if ((($and85 << 10) + 65536 | $conv << 10 & 64512 | $conv73 & 1023) >>> 0 > $Maxcode >>> 0) {
     $retval$4 = 2;
     break L4;
    }
    HEAP32[$frm_nxt >> 2] = $arrayidx;
    $add101 = ($and85 >>> 6) + 1 | 0;
    $17 = HEAP32[$to_nxt >> 2] | 0;
    HEAP32[$to_nxt >> 2] = $17 + 1;
    HEAP8[$17 >> 0] = $add101 >>> 2 | 240;
    $19 = HEAP32[$to_nxt >> 2] | 0;
    HEAP32[$to_nxt >> 2] = $19 + 1;
    HEAP8[$19 >> 0] = $conv >>> 2 & 15 | $add101 << 4 & 48 | 128;
    $21 = HEAP32[$to_nxt >> 2] | 0;
    HEAP32[$to_nxt >> 2] = $21 + 1;
    HEAP8[$21 >> 0] = $conv << 4 & 48 | $conv73 >>> 6 & 15 | 128;
    $22 = HEAP32[$to_nxt >> 2] | 0;
    HEAP32[$to_nxt >> 2] = $22 + 1;
    HEAP8[$22 >> 0] = $conv73 & 63 | 128;
   } while (0);
   $incdec$ptr168 = (HEAP32[$frm_nxt >> 2] | 0) + 2 | 0;
   HEAP32[$frm_nxt >> 2] = $incdec$ptr168;
   $2 = $incdec$ptr168;
  }
 } while (0);
 return $retval$4 | 0;
}

function __ZNKSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIcS3_NS_9allocatorIcEEEE($this, $__b, $__e, $__intl, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__intl = $__intl | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $11 = 0, $13 = 0, $14 = 0, $18 = 0, $2 = 0, $24 = 0, $26 = 0, $3 = 0, $4 = 0, $6 = 0, $__loc = 0, $__neg = 0, $__size_$i1$i = 0, $__w$0 = 0, $__wb = 0, $__wbuf = 0, $__wn = 0, $add$ptr10 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call$i = 0, $call$i18 = 0, $retval$0$i$i$i$i = 0, $retval$0$i$i13$i$i = 0, $retval$sroa$0$0$copyload = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(128);
 $agg$tmp$byval_copy = sp + 120 | 0;
 $__wbuf = sp;
 $__wb = sp + 112 | 0;
 $__wn = sp + 108 | 0;
 $__loc = sp + 100 | 0;
 $__neg = sp + 124 | 0;
 $agg$tmp = sp + 104 | 0;
 HEAP32[$__wb >> 2] = $__wbuf;
 HEAP32[$__wb + 4 >> 2] = 153;
 __ZNKSt3__28ios_base6getlocEv($__loc, $__iob);
 $call$i = __ZNKSt3__26locale9use_facetERNS0_2idE($__loc, 61216) | 0;
 HEAP8[$__neg >> 0] = 0;
 $2 = HEAP32[$__e >> 2] | 0;
 HEAP32[$agg$tmp >> 2] = $2;
 $3 = HEAP32[$__iob + 4 >> 2] | 0;
 HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 $4 = $2;
 if (__ZNSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIcEERNS_10unique_ptrIcPFvPvEEERPcSM_($__b, $agg$tmp$byval_copy, $__intl, $__loc, $3, $__err, $__neg, $call$i, $__wb, $__wn, $__wbuf + 100 | 0) | 0) {
  $__size_$i1$i = $__v + 11 | 0;
  if ((HEAP8[$__size_$i1$i >> 0] | 0) < 0) {
   $6 = HEAP32[$__v >> 2] | 0;
   HEAP8[$agg$tmp$byval_copy >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($6, $agg$tmp$byval_copy);
   HEAP32[$__v + 4 >> 2] = 0;
  } else {
   HEAP8[$agg$tmp$byval_copy >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($__v, $agg$tmp$byval_copy);
   HEAP8[$__size_$i1$i >> 0] = 0;
  }
  if (HEAP8[$__neg >> 0] | 0) __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($__v, FUNCTION_TABLE_iii[HEAP32[(HEAP32[$call$i >> 2] | 0) + 28 >> 2] & 31]($call$i, 45) | 0);
  $call$i18 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$call$i >> 2] | 0) + 28 >> 2] & 31]($call$i, 48) | 0;
  $11 = HEAP32[$__wn >> 2] | 0;
  $add$ptr10 = $11 + -1 | 0;
  $__w$0 = HEAP32[$__wb >> 2] | 0;
  while (1) {
   if ($__w$0 >>> 0 >= $add$ptr10 >>> 0) break;
   if ((HEAP8[$__w$0 >> 0] | 0) != $call$i18 << 24 >> 24) break;
   $__w$0 = $__w$0 + 1 | 0;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE23__append_forward_unsafeIPcEERS5_T_S9_($__v, $__w$0, $11) | 0;
 }
 $13 = HEAP32[$__b >> 2] | 0;
 do if (!$13) $26 = 1; else {
  $14 = HEAP32[$13 + 12 >> 2] | 0;
  if (($14 | 0) == (HEAP32[$13 + 16 >> 2] | 0)) $retval$0$i$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$13 >> 2] | 0) + 36 >> 2] & 127]($13) | 0; else $retval$0$i$i$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$14 >> 0] | 0) | 0;
  if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i$i$i, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
   HEAP32[$__b >> 2] = 0;
   $26 = 1;
   break;
  } else {
   $26 = (HEAP32[$__b >> 2] | 0) == 0;
   break;
  }
 } while (0);
 do if (!$2) label = 25; else {
  $18 = HEAP32[$4 + 12 >> 2] | 0;
  if (($18 | 0) == (HEAP32[$4 + 16 >> 2] | 0)) $retval$0$i$i13$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$2 >> 2] | 0) + 36 >> 2] & 127]($4) | 0; else $retval$0$i$i13$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$18 >> 0] | 0) | 0;
  if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i13$i$i, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
   HEAP32[$__e >> 2] = 0;
   label = 25;
   break;
  } else if ($26) break; else {
   label = 27;
   break;
  }
 } while (0);
 if ((label | 0) == 25) if ($26) label = 27;
 if ((label | 0) == 27) HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
 $retval$sroa$0$0$copyload = HEAP32[$__b >> 2] | 0;
 __ZNSt3__26localeD2Ev($__loc);
 $24 = HEAP32[$__wb >> 2] | 0;
 HEAP32[$__wb >> 2] = 0;
 if ($24 | 0) FUNCTION_TABLE_vi[HEAP32[$__wb + 4 >> 2] & 255]($24);
 STACKTOP = sp;
 return $retval$sroa$0$0$copyload | 0;
}

function _GifGetClosestPaletteColor($pPal, $r, $g, $b, $bestInd, $bestDiff, $treeRoot) {
 $pPal = $pPal | 0;
 $r = $r | 0;
 $g = $g | 0;
 $b = $b | 0;
 $bestInd = $bestInd | 0;
 $bestDiff = $bestDiff | 0;
 $treeRoot = $treeRoot | 0;
 var $20 = 0, $22 = 0, $24 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $b$addr = 0, $b_err = 0, $bestDiff$addr = 0, $bestInd$addr = 0, $comps = 0, $diff = 0, $g$addr = 0, $g_err = 0, $ind = 0, $mul = 0, $pPal$addr = 0, $r$addr = 0, $r_err = 0, $splitComp = 0, $splitPos = 0, $treeRoot$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(80);
 $pPal$addr = sp + 64 | 0;
 $r$addr = sp + 60 | 0;
 $g$addr = sp + 56 | 0;
 $b$addr = sp + 52 | 0;
 $bestInd$addr = sp + 48 | 0;
 $bestDiff$addr = sp + 44 | 0;
 $treeRoot$addr = sp + 40 | 0;
 $ind = sp + 36 | 0;
 $r_err = sp + 32 | 0;
 $g_err = sp + 28 | 0;
 $b_err = sp + 24 | 0;
 $diff = sp + 20 | 0;
 $comps = sp + 8 | 0;
 $splitComp = sp + 4 | 0;
 $splitPos = sp;
 HEAP32[$pPal$addr >> 2] = $pPal;
 HEAP32[$r$addr >> 2] = $r;
 HEAP32[$g$addr >> 2] = $g;
 HEAP32[$b$addr >> 2] = $b;
 HEAP32[$bestInd$addr >> 2] = $bestInd;
 HEAP32[$bestDiff$addr >> 2] = $bestDiff;
 HEAP32[$treeRoot$addr >> 2] = $treeRoot;
 if ((HEAP32[$treeRoot$addr >> 2] | 0) > ((1 << HEAP32[HEAP32[$pPal$addr >> 2] >> 2]) - 1 | 0)) {
  HEAP32[$ind >> 2] = (HEAP32[$treeRoot$addr >> 2] | 0) - (1 << HEAP32[HEAP32[$pPal$addr >> 2] >> 2]);
  if (!(HEAP32[$ind >> 2] | 0)) {
   STACKTOP = sp;
   return;
  }
  HEAP32[$r_err >> 2] = (HEAP32[$r$addr >> 2] | 0) - (HEAPU8[(HEAP32[$pPal$addr >> 2] | 0) + 4 + (HEAP32[$ind >> 2] | 0) >> 0] | 0);
  HEAP32[$g_err >> 2] = (HEAP32[$g$addr >> 2] | 0) - (HEAPU8[(HEAP32[$pPal$addr >> 2] | 0) + 260 + (HEAP32[$ind >> 2] | 0) >> 0] | 0);
  HEAP32[$b_err >> 2] = (HEAP32[$b$addr >> 2] | 0) - (HEAPU8[(HEAP32[$pPal$addr >> 2] | 0) + 516 + (HEAP32[$ind >> 2] | 0) >> 0] | 0);
  $20 = HEAP32[$r_err >> 2] | 0;
  $22 = HEAP32[$g_err >> 2] | 0;
  $24 = HEAP32[$b_err >> 2] | 0;
  HEAP32[$diff >> 2] = ((HEAP32[$r_err >> 2] | 0) < 0 ? 0 - $20 | 0 : $20) + ((HEAP32[$g_err >> 2] | 0) < 0 ? 0 - $22 | 0 : $22) + ((HEAP32[$b_err >> 2] | 0) < 0 ? 0 - $24 | 0 : $24);
  if ((HEAP32[$diff >> 2] | 0) >= (HEAP32[HEAP32[$bestDiff$addr >> 2] >> 2] | 0)) {
   STACKTOP = sp;
   return;
  }
  HEAP32[HEAP32[$bestInd$addr >> 2] >> 2] = HEAP32[$ind >> 2];
  HEAP32[HEAP32[$bestDiff$addr >> 2] >> 2] = HEAP32[$diff >> 2];
  STACKTOP = sp;
  return;
 }
 HEAP32[$comps >> 2] = HEAP32[$r$addr >> 2];
 HEAP32[$comps + 4 >> 2] = HEAP32[$g$addr >> 2];
 HEAP32[$comps + 8 >> 2] = HEAP32[$b$addr >> 2];
 HEAP32[$splitComp >> 2] = HEAP32[$comps + ((HEAPU8[(HEAP32[$pPal$addr >> 2] | 0) + 772 + (HEAP32[$treeRoot$addr >> 2] | 0) >> 0] | 0) << 2) >> 2];
 HEAP32[$splitPos >> 2] = HEAPU8[(HEAP32[$pPal$addr >> 2] | 0) + 1027 + (HEAP32[$treeRoot$addr >> 2] | 0) >> 0];
 $44 = HEAP32[$pPal$addr >> 2] | 0;
 $45 = HEAP32[$r$addr >> 2] | 0;
 $46 = HEAP32[$g$addr >> 2] | 0;
 $47 = HEAP32[$b$addr >> 2] | 0;
 $48 = HEAP32[$bestInd$addr >> 2] | 0;
 $49 = HEAP32[$bestDiff$addr >> 2] | 0;
 $mul = HEAP32[$treeRoot$addr >> 2] << 1;
 if ((HEAP32[$splitPos >> 2] | 0) > (HEAP32[$splitComp >> 2] | 0)) {
  _GifGetClosestPaletteColor($44, $45, $46, $47, $48, $49, $mul);
  if ((HEAP32[HEAP32[$bestDiff$addr >> 2] >> 2] | 0) <= ((HEAP32[$splitPos >> 2] | 0) - (HEAP32[$splitComp >> 2] | 0) | 0)) {
   STACKTOP = sp;
   return;
  }
  _GifGetClosestPaletteColor(HEAP32[$pPal$addr >> 2] | 0, HEAP32[$r$addr >> 2] | 0, HEAP32[$g$addr >> 2] | 0, HEAP32[$b$addr >> 2] | 0, HEAP32[$bestInd$addr >> 2] | 0, HEAP32[$bestDiff$addr >> 2] | 0, (HEAP32[$treeRoot$addr >> 2] << 1) + 1 | 0);
  STACKTOP = sp;
  return;
 } else {
  _GifGetClosestPaletteColor($44, $45, $46, $47, $48, $49, $mul + 1 | 0);
  if ((HEAP32[HEAP32[$bestDiff$addr >> 2] >> 2] | 0) <= ((HEAP32[$splitComp >> 2] | 0) - (HEAP32[$splitPos >> 2] | 0) | 0)) {
   STACKTOP = sp;
   return;
  }
  _GifGetClosestPaletteColor(HEAP32[$pPal$addr >> 2] | 0, HEAP32[$r$addr >> 2] | 0, HEAP32[$g$addr >> 2] | 0, HEAP32[$b$addr >> 2] | 0, HEAP32[$bestInd$addr >> 2] | 0, HEAP32[$bestDiff$addr >> 2] | 0, HEAP32[$treeRoot$addr >> 2] << 1);
  STACKTOP = sp;
  return;
 }
}

function __ZNSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8nlohmann10basic_jsonINS_3mapENS_6vectorES7_bxydS5_NS8_14adl_serializerEEEEENS_19__map_value_compareIS7_SE_NS_4lessIvEELb1EEENS5_ISE_EEE12__find_equalIS7_EERPNS_16__tree_node_baseIPvEERPNS_15__tree_end_nodeISP_EERKT_($this, $__parent, $__v) {
 $this = $this | 0;
 $__parent = $__parent | 0;
 $__v = $__v | 0;
 var $0 = 0, $1 = 0, $4 = 0, $5 = 0, $8 = 0, $9 = 0, $__cc$i$i19 = 0, $__nd$0 = 0, $__nd$1$in = 0, $__nd_ptr$0 = 0, $__nd_ptr$1 = 0, $__size$i$i$i$i$i$i = 0, $__size$i$i$i$i$i$i31 = 0, $__size_$i$i$i$i$i$i$i$i = 0, $__size_$i3$i$i$i$i$i$i = 0, $__value_$i$i$i$i = 0, $call$i$i$i = 0, $call$i$i$i20 = 0, $call2 = 0, $cond$i$i$i$i$i$i = 0, $cond$i$i$i$i$i$i29 = 0, $ref$tmp$i$i$i$i18 = 0, $retval$0 = 0, $tobool$i$i$i$i$i$i$i$i = 0, $tobool$i$i$i$i$i$i$i$i23 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $ref$tmp$i$i$i$i18 = sp;
 $__value_$i$i$i$i = $this + 4 | 0;
 $0 = HEAP32[$__value_$i$i$i$i >> 2] | 0;
 $call2 = __ZNKSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8nlohmann10basic_jsonINS_3mapENS_6vectorES7_bxydS5_NS8_14adl_serializerEEEEENS_19__map_value_compareIS7_SE_NS_4lessIvEELb1EEENS5_ISE_EEE10__root_ptrEv($this) | 0;
 do if (!$0) {
  HEAP32[$__parent >> 2] = $__value_$i$i$i$i;
  $retval$0 = $__value_$i$i$i$i;
 } else {
  $__size$i$i$i$i$i$i31 = $ref$tmp$i$i$i$i18 + 4 | 0;
  $__size_$i$i$i$i$i$i$i$i = $__v + 11 | 0;
  $__size_$i3$i$i$i$i$i$i = $__v + 4 | 0;
  $__size$i$i$i$i$i$i = $ref$tmp$i$i$i$i18 + 4 | 0;
  $__nd$0 = $0;
  $__nd_ptr$0 = $call2;
  while (1) {
   $__cc$i$i19 = $__nd$0 + 16 | 0;
   $call$i$i$i20 = __ZNSt3__29__launderIKNS_4pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8nlohmann10basic_jsonINS_3mapENS_6vectorES7_bxydS5_NS9_14adl_serializerEEEEEEEPT_SI_($__cc$i$i19) | 0;
   $1 = HEAP8[$call$i$i$i20 + 11 >> 0] | 0;
   $tobool$i$i$i$i$i$i$i$i23 = $1 << 24 >> 24 < 0;
   $cond$i$i$i$i$i$i29 = $tobool$i$i$i$i$i$i$i$i23 ? HEAP32[$call$i$i$i20 + 4 >> 2] | 0 : $1 & 255;
   HEAP32[$ref$tmp$i$i$i$i18 >> 2] = $tobool$i$i$i$i$i$i$i$i23 ? HEAP32[$call$i$i$i20 >> 2] | 0 : $call$i$i$i20;
   HEAP32[$__size$i$i$i$i$i$i31 >> 2] = $cond$i$i$i$i$i$i29;
   if ((__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareINS_17basic_string_viewIcS2_EEEENS_9enable_ifIXsr33__can_be_converted_to_string_viewIcS2_T_EE5valueEiE4typeERKSA_($__v, $ref$tmp$i$i$i$i18) | 0) < 0) {
    $4 = HEAP32[$__nd$0 >> 2] | 0;
    if (!$4) {
     label = 5;
     break;
    } else {
     $__nd$1$in = $4;
     $__nd_ptr$1 = $__nd$0;
    }
   } else {
    $call$i$i$i = __ZNSt3__29__launderIKNS_4pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8nlohmann10basic_jsonINS_3mapENS_6vectorES7_bxydS5_NS9_14adl_serializerEEEEEEEPT_SI_($__cc$i$i19) | 0;
    $5 = HEAP8[$__size_$i$i$i$i$i$i$i$i >> 0] | 0;
    $tobool$i$i$i$i$i$i$i$i = $5 << 24 >> 24 < 0;
    $cond$i$i$i$i$i$i = $tobool$i$i$i$i$i$i$i$i ? HEAP32[$__size_$i3$i$i$i$i$i$i >> 2] | 0 : $5 & 255;
    HEAP32[$ref$tmp$i$i$i$i18 >> 2] = $tobool$i$i$i$i$i$i$i$i ? HEAP32[$__v >> 2] | 0 : $__v;
    HEAP32[$__size$i$i$i$i$i$i >> 2] = $cond$i$i$i$i$i$i;
    if ((__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareINS_17basic_string_viewIcS2_EEEENS_9enable_ifIXsr33__can_be_converted_to_string_viewIcS2_T_EE5valueEiE4typeERKSA_($call$i$i$i, $ref$tmp$i$i$i$i18) | 0) >= 0) {
     label = 9;
     break;
    }
    $8 = $__nd$0 + 4 | 0;
    $9 = HEAP32[$8 >> 2] | 0;
    if (!$9) {
     label = 8;
     break;
    } else {
     $__nd$1$in = $9;
     $__nd_ptr$1 = $8;
    }
   }
   $__nd$0 = $__nd$1$in;
   $__nd_ptr$0 = $__nd_ptr$1;
  }
  if ((label | 0) == 5) {
   HEAP32[$__parent >> 2] = $__nd$0;
   $retval$0 = $__nd$0;
   break;
  } else if ((label | 0) == 8) {
   HEAP32[$__parent >> 2] = $__nd$0;
   $retval$0 = $8;
   break;
  } else if ((label | 0) == 9) {
   HEAP32[$__parent >> 2] = $__nd$0;
   $retval$0 = $__nd_ptr$0;
   break;
  }
 } while (0);
 STACKTOP = sp;
 return $retval$0 | 0;
}

function _stbir__calculate_coefficients_downsample($filter, $scale_ratio, $out_first_pixel, $out_last_pixel, $out_center_of_in, $contributor, $coefficient_group) {
 $filter = $filter | 0;
 $scale_ratio = Math_fround($scale_ratio);
 $out_first_pixel = $out_first_pixel | 0;
 $out_last_pixel = $out_last_pixel | 0;
 $out_center_of_in = Math_fround($out_center_of_in);
 $contributor = $contributor | 0;
 $coefficient_group = $coefficient_group | 0;
 var $19 = f0, $23 = f0, $24 = f0, $33 = f0, $4 = f0, $add24 = f0, $call17 = f0, $coefficient_group$addr = 0, $contributor$addr = 0, $filter$addr = 0, $i = 0, $mul18 = f0, $out_center_of_in$addr = 0, $out_first_pixel$addr = 0, $out_last_pixel$addr = 0, $out_pixel_center = 0, $scale_ratio$addr = 0, $sub = 0, $sub25 = f0, $x = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 $filter$addr = sp + 36 | 0;
 $scale_ratio$addr = sp + 32 | 0;
 $out_first_pixel$addr = sp + 28 | 0;
 $out_last_pixel$addr = sp + 24 | 0;
 $out_center_of_in$addr = sp + 20 | 0;
 $contributor$addr = sp + 16 | 0;
 $coefficient_group$addr = sp + 12 | 0;
 $i = sp + 8 | 0;
 $out_pixel_center = sp + 4 | 0;
 $x = sp;
 HEAP32[$filter$addr >> 2] = $filter;
 HEAPF32[$scale_ratio$addr >> 2] = $scale_ratio;
 HEAP32[$out_first_pixel$addr >> 2] = $out_first_pixel;
 HEAP32[$out_last_pixel$addr >> 2] = $out_last_pixel;
 HEAPF32[$out_center_of_in$addr >> 2] = $out_center_of_in;
 HEAP32[$contributor$addr >> 2] = $contributor;
 HEAP32[$coefficient_group$addr >> 2] = $coefficient_group;
 $sub = (HEAP32[$out_last_pixel$addr >> 2] | 0) - (HEAP32[$out_first_pixel$addr >> 2] | 0) | 0;
 $4 = Math_fround(HEAPF32[$scale_ratio$addr >> 2]);
 if (($sub | 0) > (~~+Math_ceil(+(+Math_fround(Math_fround(FUNCTION_TABLE_ff[HEAP32[6304 + (HEAP32[$filter$addr >> 2] << 3) + 4 >> 2] & 7]($4)) * Math_fround(2.0)))) | 0)) ___assert_fail(36023, 34244, 1091, 36128);
 HEAP32[HEAP32[$contributor$addr >> 2] >> 2] = HEAP32[$out_first_pixel$addr >> 2];
 HEAP32[(HEAP32[$contributor$addr >> 2] | 0) + 4 >> 2] = HEAP32[$out_last_pixel$addr >> 2];
 if ((HEAP32[(HEAP32[$contributor$addr >> 2] | 0) + 4 >> 2] | 0) < (HEAP32[HEAP32[$contributor$addr >> 2] >> 2] | 0)) ___assert_fail(36169, 34244, 1096, 36128);
 HEAP32[$i >> 2] = 0;
 while (1) {
  if ((HEAP32[$i >> 2] | 0) > ((HEAP32[$out_last_pixel$addr >> 2] | 0) - (HEAP32[$out_first_pixel$addr >> 2] | 0) | 0)) break;
  HEAPF32[$out_pixel_center >> 2] = Math_fround(Math_fround((HEAP32[$i >> 2] | 0) + (HEAP32[$out_first_pixel$addr >> 2] | 0) | 0) + Math_fround(.5));
  $19 = Math_fround(HEAPF32[$out_pixel_center >> 2]);
  HEAPF32[$x >> 2] = Math_fround($19 - Math_fround(HEAPF32[$out_center_of_in$addr >> 2]));
  $23 = Math_fround(HEAPF32[$x >> 2]);
  $24 = Math_fround(HEAPF32[$scale_ratio$addr >> 2]);
  $call17 = Math_fround(FUNCTION_TABLE_fff[HEAP32[6304 + (HEAP32[$filter$addr >> 2] << 3) >> 2] & 7]($23, $24));
  $mul18 = Math_fround($call17 * Math_fround(HEAPF32[$scale_ratio$addr >> 2]));
  HEAPF32[(HEAP32[$coefficient_group$addr >> 2] | 0) + (HEAP32[$i >> 2] << 2) >> 2] = $mul18;
  HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
 }
 $add24 = Math_fround(Math_fround((HEAP32[$out_last_pixel$addr >> 2] | 0) + 1 | 0) + Math_fround(.5));
 $sub25 = Math_fround($add24 - Math_fround(HEAPF32[$out_center_of_in$addr >> 2]));
 $33 = Math_fround(HEAPF32[$scale_ratio$addr >> 2]);
 if (!(Math_fround(FUNCTION_TABLE_fff[HEAP32[6304 + (HEAP32[$filter$addr >> 2] << 3) >> 2] & 7]($sub25, $33)) == Math_fround(0.0))) ___assert_fail(36204, 34244, 1105, 36128);
 HEAP32[$i >> 2] = (HEAP32[$out_last_pixel$addr >> 2] | 0) - (HEAP32[$out_first_pixel$addr >> 2] | 0);
 while (1) {
  if ((HEAP32[$i >> 2] | 0) < 0) {
   label = 14;
   break;
  }
  if (Math_fround(HEAPF32[(HEAP32[$coefficient_group$addr >> 2] | 0) + (HEAP32[$i >> 2] << 2) >> 2]) != Math_fround(0.0)) {
   label = 14;
   break;
  }
  HEAP32[(HEAP32[$contributor$addr >> 2] | 0) + 4 >> 2] = (HEAP32[HEAP32[$contributor$addr >> 2] >> 2] | 0) + (HEAP32[$i >> 2] | 0) - 1;
  HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + -1;
 }
 if ((label | 0) == 14) {
  STACKTOP = sp;
  return;
 }
}

function _rlGetGlTextureFormats($format, $glInternalFormat, $glFormat, $glType) {
 $format = $format | 0;
 $glInternalFormat = $glInternalFormat | 0;
 $glFormat = $glFormat | 0;
 $glType = $glType | 0;
 var $format$addr = 0, $glFormat$addr = 0, $glInternalFormat$addr = 0, $glType$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $format$addr = sp + 16 | 0;
 $glInternalFormat$addr = sp + 12 | 0;
 $glFormat$addr = sp + 8 | 0;
 $glType$addr = sp + 4 | 0;
 HEAP32[$format$addr >> 2] = $format;
 HEAP32[$glInternalFormat$addr >> 2] = $glInternalFormat;
 HEAP32[$glFormat$addr >> 2] = $glFormat;
 HEAP32[$glType$addr >> 2] = $glType;
 HEAP32[HEAP32[$glInternalFormat$addr >> 2] >> 2] = -1;
 HEAP32[HEAP32[$glFormat$addr >> 2] >> 2] = -1;
 HEAP32[HEAP32[$glType$addr >> 2] >> 2] = -1;
 do switch (HEAP32[$format$addr >> 2] | 0) {
 case 1:
  {
   HEAP32[HEAP32[$glInternalFormat$addr >> 2] >> 2] = 6409;
   HEAP32[HEAP32[$glFormat$addr >> 2] >> 2] = 6409;
   HEAP32[HEAP32[$glType$addr >> 2] >> 2] = 5121;
   break;
  }
 case 2:
  {
   HEAP32[HEAP32[$glInternalFormat$addr >> 2] >> 2] = 6410;
   HEAP32[HEAP32[$glFormat$addr >> 2] >> 2] = 6410;
   HEAP32[HEAP32[$glType$addr >> 2] >> 2] = 5121;
   break;
  }
 case 3:
  {
   HEAP32[HEAP32[$glInternalFormat$addr >> 2] >> 2] = 6407;
   HEAP32[HEAP32[$glFormat$addr >> 2] >> 2] = 6407;
   HEAP32[HEAP32[$glType$addr >> 2] >> 2] = 33635;
   break;
  }
 case 4:
  {
   HEAP32[HEAP32[$glInternalFormat$addr >> 2] >> 2] = 6407;
   HEAP32[HEAP32[$glFormat$addr >> 2] >> 2] = 6407;
   HEAP32[HEAP32[$glType$addr >> 2] >> 2] = 5121;
   break;
  }
 case 5:
  {
   HEAP32[HEAP32[$glInternalFormat$addr >> 2] >> 2] = 6408;
   HEAP32[HEAP32[$glFormat$addr >> 2] >> 2] = 6408;
   HEAP32[HEAP32[$glType$addr >> 2] >> 2] = 32820;
   break;
  }
 case 6:
  {
   HEAP32[HEAP32[$glInternalFormat$addr >> 2] >> 2] = 6408;
   HEAP32[HEAP32[$glFormat$addr >> 2] >> 2] = 6408;
   HEAP32[HEAP32[$glType$addr >> 2] >> 2] = 32819;
   break;
  }
 case 7:
  {
   HEAP32[HEAP32[$glInternalFormat$addr >> 2] >> 2] = 6408;
   HEAP32[HEAP32[$glFormat$addr >> 2] >> 2] = 6408;
   HEAP32[HEAP32[$glType$addr >> 2] >> 2] = 5121;
   break;
  }
 case 8:
  {
   if (HEAP8[62147] & 1) HEAP32[HEAP32[$glInternalFormat$addr >> 2] >> 2] = 6409;
   HEAP32[HEAP32[$glFormat$addr >> 2] >> 2] = 6409;
   HEAP32[HEAP32[$glType$addr >> 2] >> 2] = 5126;
   break;
  }
 case 9:
  {
   if (HEAP8[62147] & 1) HEAP32[HEAP32[$glInternalFormat$addr >> 2] >> 2] = 6407;
   HEAP32[HEAP32[$glFormat$addr >> 2] >> 2] = 6407;
   HEAP32[HEAP32[$glType$addr >> 2] >> 2] = 5126;
   break;
  }
 case 10:
  {
   if (HEAP8[62147] & 1) HEAP32[HEAP32[$glInternalFormat$addr >> 2] >> 2] = 6408;
   HEAP32[HEAP32[$glFormat$addr >> 2] >> 2] = 6408;
   HEAP32[HEAP32[$glType$addr >> 2] >> 2] = 5126;
   break;
  }
 case 11:
  {
   if (HEAP8[62148] & 1) HEAP32[HEAP32[$glInternalFormat$addr >> 2] >> 2] = 33776;
   break;
  }
 case 12:
  {
   if (HEAP8[62148] & 1) HEAP32[HEAP32[$glInternalFormat$addr >> 2] >> 2] = 33777;
   break;
  }
 case 13:
  {
   if (HEAP8[62148] & 1) HEAP32[HEAP32[$glInternalFormat$addr >> 2] >> 2] = 33778;
   break;
  }
 case 14:
  {
   if (HEAP8[62148] & 1) HEAP32[HEAP32[$glInternalFormat$addr >> 2] >> 2] = 33779;
   break;
  }
 case 15:
  {
   if (HEAP8[62149] & 1) HEAP32[HEAP32[$glInternalFormat$addr >> 2] >> 2] = 36196;
   break;
  }
 case 16:
  {
   if (HEAP8[62150] & 1) HEAP32[HEAP32[$glInternalFormat$addr >> 2] >> 2] = 37492;
   break;
  }
 case 17:
  {
   if (HEAP8[62150] & 1) HEAP32[HEAP32[$glInternalFormat$addr >> 2] >> 2] = 37496;
   break;
  }
 case 18:
  {
   if (HEAP8[62151] & 1) HEAP32[HEAP32[$glInternalFormat$addr >> 2] >> 2] = 35840;
   break;
  }
 case 19:
  {
   if (HEAP8[62151] & 1) HEAP32[HEAP32[$glInternalFormat$addr >> 2] >> 2] = 35842;
   break;
  }
 case 20:
  {
   if (HEAP8[62152] & 1) HEAP32[HEAP32[$glInternalFormat$addr >> 2] >> 2] = 37808;
   break;
  }
 case 21:
  {
   if (HEAP8[62152] & 1) HEAP32[HEAP32[$glInternalFormat$addr >> 2] >> 2] = 37815;
   break;
  }
 default:
  _TraceLog(4, 31701, sp);
 } while (0);
 STACKTOP = sp;
 return;
}

function __ZNSt3__29__num_getIcE19__stage2_float_loopEcRbRcPcRS4_ccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjS4_($__ct, $__in_units, $__exp, $__a, $__a_end, $__decimal_point, $__thousands_sep, $__grouping, $__g, $__g_end, $__dc, $__atoms) {
 $__ct = $__ct | 0;
 $__in_units = $__in_units | 0;
 $__exp = $__exp | 0;
 $__a = $__a | 0;
 $__a_end = $__a_end | 0;
 $__decimal_point = $__decimal_point | 0;
 $__thousands_sep = $__thousands_sep | 0;
 $__grouping = $__grouping | 0;
 $__g = $__g | 0;
 $__g_end = $__g_end | 0;
 $__dc = $__dc | 0;
 $__atoms = $__atoms | 0;
 var $1 = 0, $10 = 0, $12 = 0, $13 = 0, $18 = 0, $2 = 0, $22 = 0, $24 = 0, $25 = 0, $26 = 0, $4 = 0, $5 = 0, $6 = 0, $9 = 0, $__first$addr$0$i$idx = 0, $__first$addr$0$i$ptr = 0, $__first$addr$0$lcssa$i = 0, $add$ptr = 0, $and58 = 0, $retval$2 = 0, $sub$ptr$sub31 = 0;
 L1 : do if ($__ct << 24 >> 24 == $__decimal_point << 24 >> 24) if (!(HEAP8[$__in_units >> 0] | 0)) $retval$2 = -1; else {
  HEAP8[$__in_units >> 0] = 0;
  $1 = HEAP32[$__a_end >> 2] | 0;
  HEAP32[$__a_end >> 2] = $1 + 1;
  HEAP8[$1 >> 0] = 46;
  $2 = HEAP8[$__grouping + 11 >> 0] | 0;
  if (!(($2 << 24 >> 24 < 0 ? HEAP32[$__grouping + 4 >> 2] | 0 : $2 & 255) | 0)) $retval$2 = 0; else {
   $4 = HEAP32[$__g_end >> 2] | 0;
   if (($4 - $__g | 0) < 160) {
    $5 = HEAP32[$__dc >> 2] | 0;
    HEAP32[$__g_end >> 2] = $4 + 4;
    HEAP32[$4 >> 2] = $5;
    $retval$2 = 0;
   } else $retval$2 = 0;
  }
 } else {
  if ($__ct << 24 >> 24 == $__thousands_sep << 24 >> 24) {
   $6 = HEAP8[$__grouping + 11 >> 0] | 0;
   if (($6 << 24 >> 24 < 0 ? HEAP32[$__grouping + 4 >> 2] | 0 : $6 & 255) | 0) {
    if (!(HEAP8[$__in_units >> 0] | 0)) {
     $retval$2 = -1;
     break;
    }
    $9 = HEAP32[$__g_end >> 2] | 0;
    if (($9 - $__g | 0) >= 160) {
     $retval$2 = 0;
     break;
    }
    $10 = HEAP32[$__dc >> 2] | 0;
    HEAP32[$__g_end >> 2] = $9 + 4;
    HEAP32[$9 >> 2] = $10;
    HEAP32[$__dc >> 2] = 0;
    $retval$2 = 0;
    break;
   }
  }
  $add$ptr = $__atoms + 32 | 0;
  $__first$addr$0$i$idx = 0;
  while (1) {
   $__first$addr$0$i$ptr = $__atoms + $__first$addr$0$i$idx | 0;
   if (($__first$addr$0$i$idx | 0) == 32) {
    $__first$addr$0$lcssa$i = $add$ptr;
    break;
   }
   if ((HEAP8[$__first$addr$0$i$ptr >> 0] | 0) == $__ct << 24 >> 24) {
    $__first$addr$0$lcssa$i = $__first$addr$0$i$ptr;
    break;
   } else $__first$addr$0$i$idx = $__first$addr$0$i$idx + 1 | 0;
  }
  $sub$ptr$sub31 = $__first$addr$0$lcssa$i - $__atoms | 0;
  if (($sub$ptr$sub31 | 0) > 31) $retval$2 = -1; else {
   $12 = HEAP8[14672 + $sub$ptr$sub31 >> 0] | 0;
   switch ($sub$ptr$sub31 | 0) {
   case 24:
   case 25:
    {
     $13 = HEAP32[$__a_end >> 2] | 0;
     if (($13 | 0) != ($__a | 0)) if ((HEAP8[$13 + -1 >> 0] & 95) != (HEAP8[$__exp >> 0] & 127)) {
      $retval$2 = -1;
      break L1;
     }
     HEAP32[$__a_end >> 2] = $13 + 1;
     HEAP8[$13 >> 0] = $12;
     $retval$2 = 0;
     break L1;
     break;
    }
   case 23:
   case 22:
    {
     HEAP8[$__exp >> 0] = 80;
     $18 = HEAP32[$__a_end >> 2] | 0;
     HEAP32[$__a_end >> 2] = $18 + 1;
     HEAP8[$18 >> 0] = $12;
     $retval$2 = 0;
     break L1;
     break;
    }
   default:
    {
     $and58 = $12 & 95;
     if (($and58 | 0) == (HEAP8[$__exp >> 0] | 0)) {
      HEAP8[$__exp >> 0] = $and58 | 128;
      if (HEAP8[$__in_units >> 0] | 0) {
       HEAP8[$__in_units >> 0] = 0;
       $22 = HEAP8[$__grouping + 11 >> 0] | 0;
       if (($22 << 24 >> 24 < 0 ? HEAP32[$__grouping + 4 >> 2] | 0 : $22 & 255) | 0) {
        $24 = HEAP32[$__g_end >> 2] | 0;
        if (($24 - $__g | 0) < 160) {
         $25 = HEAP32[$__dc >> 2] | 0;
         HEAP32[$__g_end >> 2] = $24 + 4;
         HEAP32[$24 >> 2] = $25;
        }
       }
      }
     }
     $26 = HEAP32[$__a_end >> 2] | 0;
     HEAP32[$__a_end >> 2] = $26 + 1;
     HEAP8[$26 >> 0] = $12;
     if (($sub$ptr$sub31 | 0) > 21) {
      $retval$2 = 0;
      break L1;
     }
     HEAP32[$__dc >> 2] = (HEAP32[$__dc >> 2] | 0) + 1;
     $retval$2 = 0;
     break L1;
    }
   }
  }
 } while (0);
 return $retval$2 | 0;
}

function _EmscriptenTouchCallback($eventType, $touchEvent, $userData) {
 $eventType = $eventType | 0;
 $touchEvent = $touchEvent | 0;
 $userData = $userData | 0;
 var $$compoundliteral = 0, $$compoundliteral24 = 0, $arrayidx23 = 0, $arrayidx54 = 0, $arrayidx68 = 0, $canvasHeight = 0, $canvasWidth = 0, $conv36 = f0, $conv42 = f0, $conv50 = f0, $conv58 = f0, $div = f0, $div44 = f0, $div52 = f0, $div60 = f0, $eventType$addr = 0, $gestureEvent = 0, $gestureEvent$byval_copy = 0, $position = 0, $position38 = 0, $position65 = 0, $touchEvent$addr = 0, $y47 = 0, $y63 = 0, dest = 0, sp = 0, src = 0, stop = 0, CSE$0 = 0, CSE$1 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(160);
 $gestureEvent$byval_copy = sp + 104 | 0;
 $eventType$addr = sp + 96 | 0;
 $touchEvent$addr = sp + 92 | 0;
 $gestureEvent = sp + 32 | 0;
 $$compoundliteral = sp + 24 | 0;
 $$compoundliteral24 = sp + 16 | 0;
 $canvasWidth = sp + 8 | 0;
 $canvasHeight = sp;
 HEAP32[$eventType$addr >> 2] = $eventType;
 HEAP32[$touchEvent$addr >> 2] = $touchEvent;
 HEAP32[sp + 88 >> 2] = $userData;
 do if ((HEAP32[$eventType$addr >> 2] | 0) == 22) HEAP32[$gestureEvent >> 2] = 1; else {
  if ((HEAP32[$eventType$addr >> 2] | 0) == 23) {
   HEAP32[$gestureEvent >> 2] = 0;
   break;
  }
  if ((HEAP32[$eventType$addr >> 2] | 0) == 24) HEAP32[$gestureEvent >> 2] = 2;
 } while (0);
 HEAP32[$gestureEvent + 4 >> 2] = HEAP32[HEAP32[$touchEvent$addr >> 2] >> 2];
 HEAP32[$gestureEvent + 8 >> 2] = HEAP32[(HEAP32[$touchEvent$addr >> 2] | 0) + 20 >> 2];
 HEAP32[$gestureEvent + 8 + 4 >> 2] = HEAP32[(HEAP32[$touchEvent$addr >> 2] | 0) + 20 + 52 >> 2];
 $position = $gestureEvent + 24 | 0;
 HEAPF32[$$compoundliteral >> 2] = Math_fround(HEAP32[(HEAP32[$touchEvent$addr >> 2] | 0) + 20 + 36 >> 2] | 0);
 HEAPF32[$$compoundliteral + 4 >> 2] = Math_fround(HEAP32[(HEAP32[$touchEvent$addr >> 2] | 0) + 20 + 40 >> 2] | 0);
 HEAP32[$position >> 2] = HEAP32[$$compoundliteral >> 2];
 HEAP32[$position + 4 >> 2] = HEAP32[$$compoundliteral + 4 >> 2];
 CSE$0 = $gestureEvent + 24 + 8 | 0;
 CSE$1 = $gestureEvent + 24 + 8 | 0;
 $arrayidx23 = CSE$0 | 0;
 HEAPF32[$$compoundliteral24 >> 2] = Math_fround(HEAP32[(HEAP32[$touchEvent$addr >> 2] | 0) + 20 + 52 + 36 >> 2] | 0);
 HEAPF32[$$compoundliteral24 + 4 >> 2] = Math_fround(HEAP32[(HEAP32[$touchEvent$addr >> 2] | 0) + 20 + 52 + 40 >> 2] | 0);
 HEAP32[$arrayidx23 >> 2] = HEAP32[$$compoundliteral24 >> 2];
 HEAP32[$arrayidx23 + 4 >> 2] = HEAP32[$$compoundliteral24 + 4 >> 2];
 _emscripten_get_element_css_size(31837, $canvasWidth | 0, $canvasHeight | 0) | 0;
 $conv36 = Math_fround(_GetScreenWidth() | 0);
 $div = Math_fround($conv36 / Math_fround(+HEAPF64[$canvasWidth >> 3]));
 $position38 = $gestureEvent + 24 | 0;
 HEAPF32[$position38 >> 2] = Math_fround(Math_fround(HEAPF32[$position38 >> 2]) * $div);
 $conv42 = Math_fround(_GetScreenHeight() | 0);
 $div44 = Math_fround($conv42 / Math_fround(+HEAPF64[$canvasHeight >> 3]));
 $y47 = $gestureEvent + 24 + 4 | 0;
 HEAPF32[$y47 >> 2] = Math_fround(Math_fround(HEAPF32[$y47 >> 2]) * $div44);
 $conv50 = Math_fround(_GetScreenWidth() | 0);
 $div52 = Math_fround($conv50 / Math_fround(+HEAPF64[$canvasWidth >> 3]));
 $arrayidx54 = CSE$0 | 0;
 HEAPF32[$arrayidx54 >> 2] = Math_fround(Math_fround(HEAPF32[$arrayidx54 >> 2]) * $div52);
 $conv58 = Math_fround(_GetScreenHeight() | 0);
 $div60 = Math_fround($conv58 / Math_fround(+HEAPF64[$canvasHeight >> 3]));
 $y63 = CSE$1 + 4 | 0;
 HEAPF32[$y63 >> 2] = Math_fround(Math_fround(HEAPF32[$y63 >> 2]) * $div60);
 $position65 = $gestureEvent + 24 | 0;
 HEAP32[11864] = HEAP32[$position65 >> 2];
 HEAP32[11865] = HEAP32[$position65 + 4 >> 2];
 $arrayidx68 = CSE$0 | 0;
 HEAP32[11866] = HEAP32[$arrayidx68 >> 2];
 HEAP32[11867] = HEAP32[$arrayidx68 + 4 >> 2];
 dest = $gestureEvent$byval_copy;
 src = $gestureEvent;
 stop = dest + 56 | 0;
 do {
  HEAP32[dest >> 2] = HEAP32[src >> 2];
  dest = dest + 4 | 0;
  src = src + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 _ProcessGestureEvent($gestureEvent$byval_copy);
 STACKTOP = sp;
 return 1;
}

function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_white_spaceERS4_S4_RjRKNS_5ctypeIcEE($this, $__b, $__e, $__err, $__ct) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__err = $__err | 0;
 $__ct = $__ct | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $17 = 0, $18 = 0, $22 = 0, $23 = 0, $27 = 0, $28 = 0, $33 = 0, $34 = 0, $35 = 0, $5 = 0, $6 = 0, $__ninp_$i$i6 = 0, $__tab_$i = 0, $retval$0$i$i = 0, $retval$0$i$i$i$i = 0, $retval$0$i$i$i$i27 = 0, $retval$0$i$i13$i$i = 0, $retval$0$i$i13$i$i48 = 0, label = 0;
 label = 0;
 $__tab_$i = $__ct + 8 | 0;
 L1 : while (1) {
  $0 = HEAP32[$__b >> 2] | 0;
  do if (!$0) $33 = 1; else {
   $1 = HEAP32[$0 + 12 >> 2] | 0;
   if (($1 | 0) == (HEAP32[$0 + 16 >> 2] | 0)) $retval$0$i$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$0 >> 2] | 0) + 36 >> 2] & 127]($0) | 0; else $retval$0$i$i$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$1 >> 0] | 0) | 0;
   if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i$i$i, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
    HEAP32[$__b >> 2] = 0;
    $33 = 1;
    break;
   } else {
    $33 = (HEAP32[$__b >> 2] | 0) == 0;
    break;
   }
  } while (0);
  $5 = HEAP32[$__e >> 2] | 0;
  do if (!$5) label = 15; else {
   $6 = HEAP32[$5 + 12 >> 2] | 0;
   if (($6 | 0) == (HEAP32[$5 + 16 >> 2] | 0)) $retval$0$i$i13$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$5 >> 2] | 0) + 36 >> 2] & 127]($5) | 0; else $retval$0$i$i13$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$6 >> 0] | 0) | 0;
   if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i13$i$i, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
    HEAP32[$__e >> 2] = 0;
    label = 15;
    break;
   } else if ($33) {
    $34 = $5;
    break;
   } else {
    $27 = $5;
    break L1;
   }
  } while (0);
  if ((label | 0) == 15) {
   label = 0;
   if ($33) {
    $27 = 0;
    break;
   } else $34 = 0;
  }
  $10 = HEAP32[$__b >> 2] | 0;
  $11 = HEAP32[$10 + 12 >> 2] | 0;
  if (($11 | 0) == (HEAP32[$10 + 16 >> 2] | 0)) $retval$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$10 >> 2] | 0) + 36 >> 2] & 127]($10) | 0; else $retval$0$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$11 >> 0] | 0) | 0;
  if (($retval$0$i$i & 255) << 24 >> 24 <= -1) {
   $27 = $34;
   break;
  }
  if (!(HEAP16[(HEAP32[$__tab_$i >> 2] | 0) + ($retval$0$i$i << 24 >> 24 << 1) >> 1] & 8192)) {
   $27 = $34;
   break;
  }
  $17 = HEAP32[$__b >> 2] | 0;
  $__ninp_$i$i6 = $17 + 12 | 0;
  $18 = HEAP32[$__ninp_$i$i6 >> 2] | 0;
  if (($18 | 0) == (HEAP32[$17 + 16 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[$17 >> 2] | 0) + 40 >> 2] & 127]($17) | 0; else {
   HEAP32[$__ninp_$i$i6 >> 2] = $18 + 1;
   __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$18 >> 0] | 0) | 0;
  }
 }
 $22 = HEAP32[$__b >> 2] | 0;
 do if (!$22) $35 = 1; else {
  $23 = HEAP32[$22 + 12 >> 2] | 0;
  if (($23 | 0) == (HEAP32[$22 + 16 >> 2] | 0)) $retval$0$i$i$i$i27 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$22 >> 2] | 0) + 36 >> 2] & 127]($22) | 0; else $retval$0$i$i$i$i27 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$23 >> 0] | 0) | 0;
  if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i$i$i27, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
   HEAP32[$__b >> 2] = 0;
   $35 = 1;
   break;
  } else {
   $35 = (HEAP32[$__b >> 2] | 0) == 0;
   break;
  }
 } while (0);
 do if (!$27) label = 39; else {
  $28 = HEAP32[$27 + 12 >> 2] | 0;
  if (($28 | 0) == (HEAP32[$27 + 16 >> 2] | 0)) $retval$0$i$i13$i$i48 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$27 >> 2] | 0) + 36 >> 2] & 127]($27) | 0; else $retval$0$i$i13$i$i48 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$28 >> 0] | 0) | 0;
  if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i13$i$i48, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
   HEAP32[$__e >> 2] = 0;
   label = 39;
   break;
  } else if ($35) break; else {
   label = 41;
   break;
  }
 } while (0);
 if ((label | 0) == 39) if ($35) label = 41;
 if ((label | 0) == 41) HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
 return;
}

function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_percentERS4_S4_RjRKNS_5ctypeIwEE($this, $__b, $__e, $__err, $__ct) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__err = $__err | 0;
 $__ct = $__ct | 0;
 var $0 = 0, $1 = 0, $11 = 0, $12 = 0, $18 = 0, $19 = 0, $23 = 0, $24 = 0, $28 = 0, $29 = 0, $34 = 0, $35 = 0, $5 = 0, $6 = 0, $__ninp_$i$i7 = 0, $retval$0$i$i = 0, $retval$0$i$i$i$i = 0, $retval$0$i$i$i$i28 = 0, $retval$0$i$i13$i$i = 0, $retval$0$i$i13$i$i49 = 0, label = 0;
 label = 0;
 $0 = HEAP32[$__b >> 2] | 0;
 do if (!$0) $34 = 1; else {
  $1 = HEAP32[$0 + 12 >> 2] | 0;
  if (($1 | 0) == (HEAP32[$0 + 16 >> 2] | 0)) $retval$0$i$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$0 >> 2] | 0) + 36 >> 2] & 127]($0) | 0; else $retval$0$i$i$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$1 >> 2] | 0) | 0;
  if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i$i$i, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
   HEAP32[$__b >> 2] = 0;
   $34 = 1;
   break;
  } else {
   $34 = (HEAP32[$__b >> 2] | 0) == 0;
   break;
  }
 } while (0);
 $5 = HEAP32[$__e >> 2] | 0;
 do if (!$5) label = 14; else {
  $6 = HEAP32[$5 + 12 >> 2] | 0;
  if (($6 | 0) == (HEAP32[$5 + 16 >> 2] | 0)) $retval$0$i$i13$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$5 >> 2] | 0) + 36 >> 2] & 127]($5) | 0; else $retval$0$i$i13$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$6 >> 2] | 0) | 0;
  if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i13$i$i, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
   HEAP32[$__e >> 2] = 0;
   label = 14;
   break;
  } else if ($34) {
   $28 = $5;
   label = 17;
   break;
  } else {
   label = 16;
   break;
  }
 } while (0);
 if ((label | 0) == 14) if ($34) label = 16; else {
  $28 = 0;
  label = 17;
 }
 L22 : do if ((label | 0) == 16) HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 6; else if ((label | 0) == 17) {
  $11 = HEAP32[$__b >> 2] | 0;
  $12 = HEAP32[$11 + 12 >> 2] | 0;
  if (($12 | 0) == (HEAP32[$11 + 16 >> 2] | 0)) $retval$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$11 >> 2] | 0) + 36 >> 2] & 127]($11) | 0; else $retval$0$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$12 >> 2] | 0) | 0;
  if ((FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$__ct >> 2] | 0) + 52 >> 2] & 63]($__ct, $retval$0$i$i, 0) | 0) << 24 >> 24 != 37) {
   HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 4;
   break;
  }
  $18 = HEAP32[$__b >> 2] | 0;
  $__ninp_$i$i7 = $18 + 12 | 0;
  $19 = HEAP32[$__ninp_$i$i7 >> 2] | 0;
  if (($19 | 0) == (HEAP32[$18 + 16 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[$18 >> 2] | 0) + 40 >> 2] & 127]($18) | 0; else {
   HEAP32[$__ninp_$i$i7 >> 2] = $19 + 4;
   __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$19 >> 2] | 0) | 0;
  }
  $23 = HEAP32[$__b >> 2] | 0;
  do if (!$23) $35 = 1; else {
   $24 = HEAP32[$23 + 12 >> 2] | 0;
   if (($24 | 0) == (HEAP32[$23 + 16 >> 2] | 0)) $retval$0$i$i$i$i28 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$23 >> 2] | 0) + 36 >> 2] & 127]($23) | 0; else $retval$0$i$i$i$i28 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$24 >> 2] | 0) | 0;
   if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i$i$i28, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
    HEAP32[$__b >> 2] = 0;
    $35 = 1;
    break;
   } else {
    $35 = (HEAP32[$__b >> 2] | 0) == 0;
    break;
   }
  } while (0);
  do if (!$28) label = 38; else {
   $29 = HEAP32[$28 + 12 >> 2] | 0;
   if (($29 | 0) == (HEAP32[$28 + 16 >> 2] | 0)) $retval$0$i$i13$i$i49 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$28 >> 2] | 0) + 36 >> 2] & 127]($28) | 0; else $retval$0$i$i13$i$i49 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$29 >> 2] | 0) | 0;
   if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i13$i$i49, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
    HEAP32[$__e >> 2] = 0;
    label = 38;
    break;
   } else if ($35) break L22; else break;
  } while (0);
  if ((label | 0) == 38) if (!$35) break;
  HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
 } while (0);
 return;
}

function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_percentERS4_S4_RjRKNS_5ctypeIcEE($this, $__b, $__e, $__err, $__ct) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__err = $__err | 0;
 $__ct = $__ct | 0;
 var $0 = 0, $1 = 0, $11 = 0, $12 = 0, $18 = 0, $19 = 0, $23 = 0, $24 = 0, $28 = 0, $29 = 0, $34 = 0, $35 = 0, $5 = 0, $6 = 0, $__ninp_$i$i7 = 0, $retval$0$i$i = 0, $retval$0$i$i$i$i = 0, $retval$0$i$i$i$i28 = 0, $retval$0$i$i13$i$i = 0, $retval$0$i$i13$i$i49 = 0, label = 0;
 label = 0;
 $0 = HEAP32[$__b >> 2] | 0;
 do if (!$0) $34 = 1; else {
  $1 = HEAP32[$0 + 12 >> 2] | 0;
  if (($1 | 0) == (HEAP32[$0 + 16 >> 2] | 0)) $retval$0$i$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$0 >> 2] | 0) + 36 >> 2] & 127]($0) | 0; else $retval$0$i$i$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$1 >> 0] | 0) | 0;
  if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i$i$i, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
   HEAP32[$__b >> 2] = 0;
   $34 = 1;
   break;
  } else {
   $34 = (HEAP32[$__b >> 2] | 0) == 0;
   break;
  }
 } while (0);
 $5 = HEAP32[$__e >> 2] | 0;
 do if (!$5) label = 14; else {
  $6 = HEAP32[$5 + 12 >> 2] | 0;
  if (($6 | 0) == (HEAP32[$5 + 16 >> 2] | 0)) $retval$0$i$i13$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$5 >> 2] | 0) + 36 >> 2] & 127]($5) | 0; else $retval$0$i$i13$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$6 >> 0] | 0) | 0;
  if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i13$i$i, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
   HEAP32[$__e >> 2] = 0;
   label = 14;
   break;
  } else if ($34) {
   $28 = $5;
   label = 17;
   break;
  } else {
   label = 16;
   break;
  }
 } while (0);
 if ((label | 0) == 14) if ($34) label = 16; else {
  $28 = 0;
  label = 17;
 }
 L22 : do if ((label | 0) == 16) HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 6; else if ((label | 0) == 17) {
  $11 = HEAP32[$__b >> 2] | 0;
  $12 = HEAP32[$11 + 12 >> 2] | 0;
  if (($12 | 0) == (HEAP32[$11 + 16 >> 2] | 0)) $retval$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$11 >> 2] | 0) + 36 >> 2] & 127]($11) | 0; else $retval$0$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$12 >> 0] | 0) | 0;
  if ((FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$__ct >> 2] | 0) + 36 >> 2] & 63]($__ct, $retval$0$i$i & 255, 0) | 0) << 24 >> 24 != 37) {
   HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 4;
   break;
  }
  $18 = HEAP32[$__b >> 2] | 0;
  $__ninp_$i$i7 = $18 + 12 | 0;
  $19 = HEAP32[$__ninp_$i$i7 >> 2] | 0;
  if (($19 | 0) == (HEAP32[$18 + 16 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[$18 >> 2] | 0) + 40 >> 2] & 127]($18) | 0; else {
   HEAP32[$__ninp_$i$i7 >> 2] = $19 + 1;
   __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$19 >> 0] | 0) | 0;
  }
  $23 = HEAP32[$__b >> 2] | 0;
  do if (!$23) $35 = 1; else {
   $24 = HEAP32[$23 + 12 >> 2] | 0;
   if (($24 | 0) == (HEAP32[$23 + 16 >> 2] | 0)) $retval$0$i$i$i$i28 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$23 >> 2] | 0) + 36 >> 2] & 127]($23) | 0; else $retval$0$i$i$i$i28 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$24 >> 0] | 0) | 0;
   if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i$i$i28, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
    HEAP32[$__b >> 2] = 0;
    $35 = 1;
    break;
   } else {
    $35 = (HEAP32[$__b >> 2] | 0) == 0;
    break;
   }
  } while (0);
  do if (!$28) label = 38; else {
   $29 = HEAP32[$28 + 12 >> 2] | 0;
   if (($29 | 0) == (HEAP32[$28 + 16 >> 2] | 0)) $retval$0$i$i13$i$i49 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$28 >> 2] | 0) + 36 >> 2] & 127]($28) | 0; else $retval$0$i$i13$i$i49 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$29 >> 0] | 0) | 0;
   if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i13$i$i49, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
    HEAP32[$__e >> 2] = 0;
    label = 38;
    break;
   } else if ($35) break L22; else break;
  } while (0);
  if ((label | 0) == 38) if (!$35) break;
  HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
 } while (0);
 return;
}

function _stbir__empty_ring_buffer($stbir_info, $first_necessary_scanline) {
 $stbir_info = $stbir_info | 0;
 $first_necessary_scanline = $first_necessary_scanline | 0;
 var $50 = 0, $alpha_channel = 0, $channels = 0, $colorspace = 0, $decode = 0, $first_necessary_scanline$addr = 0, $output_data = 0, $output_row_start = 0, $output_stride_bytes = 0, $output_w = 0, $ring_buffer = 0, $ring_buffer_entry = 0, $ring_buffer_first_scanline24 = 0, $ring_buffer_length = 0, $stbir_info$addr = 0, $type = 0, label = 0, sp = 0, CSE$0 = 0, CSE$1 = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64);
 $stbir_info$addr = sp + 52 | 0;
 $first_necessary_scanline$addr = sp + 48 | 0;
 $output_stride_bytes = sp + 44 | 0;
 $channels = sp + 40 | 0;
 $alpha_channel = sp + 36 | 0;
 $type = sp + 32 | 0;
 $colorspace = sp + 28 | 0;
 $output_w = sp + 24 | 0;
 $output_data = sp + 20 | 0;
 $decode = sp + 16 | 0;
 $ring_buffer = sp + 12 | 0;
 $ring_buffer_length = sp + 8 | 0;
 $output_row_start = sp + 4 | 0;
 $ring_buffer_entry = sp;
 HEAP32[$stbir_info$addr >> 2] = $stbir_info;
 HEAP32[$first_necessary_scanline$addr >> 2] = $first_necessary_scanline;
 HEAP32[$output_stride_bytes >> 2] = HEAP32[(HEAP32[$stbir_info$addr >> 2] | 0) + 28 >> 2];
 HEAP32[$channels >> 2] = HEAP32[(HEAP32[$stbir_info$addr >> 2] | 0) + 64 >> 2];
 HEAP32[$alpha_channel >> 2] = HEAP32[(HEAP32[$stbir_info$addr >> 2] | 0) + 68 >> 2];
 HEAP32[$type >> 2] = HEAP32[(HEAP32[$stbir_info$addr >> 2] | 0) + 76 >> 2];
 HEAP32[$colorspace >> 2] = HEAP32[(HEAP32[$stbir_info$addr >> 2] | 0) + 96 >> 2];
 HEAP32[$output_w >> 2] = HEAP32[(HEAP32[$stbir_info$addr >> 2] | 0) + 20 >> 2];
 HEAP32[$output_data >> 2] = HEAP32[(HEAP32[$stbir_info$addr >> 2] | 0) + 16 >> 2];
 HEAP32[$decode >> 2] = (HEAP32[$type >> 2] << 1) + (HEAP32[$colorspace >> 2] | 0);
 HEAP32[$ring_buffer >> 2] = HEAP32[(HEAP32[$stbir_info$addr >> 2] | 0) + 180 >> 2];
 HEAP32[$ring_buffer_length >> 2] = ((HEAP32[(HEAP32[$stbir_info$addr >> 2] | 0) + 160 >> 2] | 0) >>> 0) / 4 | 0;
 if ((HEAP32[(HEAP32[$stbir_info$addr >> 2] | 0) + 176 >> 2] | 0) < 0) {
  STACKTOP = sp;
  return;
 }
 while (1) {
  if ((HEAP32[$first_necessary_scanline$addr >> 2] | 0) <= (HEAP32[(HEAP32[$stbir_info$addr >> 2] | 0) + 168 >> 2] | 0)) {
   label = 10;
   break;
  }
  if ((HEAP32[(HEAP32[$stbir_info$addr >> 2] | 0) + 168 >> 2] | 0) >= 0) if ((HEAP32[(HEAP32[$stbir_info$addr >> 2] | 0) + 168 >> 2] | 0) < (HEAP32[(HEAP32[$stbir_info$addr >> 2] | 0) + 24 >> 2] | 0)) {
   HEAP32[$output_row_start >> 2] = Math_imul(HEAP32[(HEAP32[$stbir_info$addr >> 2] | 0) + 168 >> 2] | 0, HEAP32[$output_stride_bytes >> 2] | 0) | 0;
   HEAP32[$ring_buffer_entry >> 2] = _stbir__get_ring_buffer_entry(HEAP32[$ring_buffer >> 2] | 0, HEAP32[(HEAP32[$stbir_info$addr >> 2] | 0) + 176 >> 2] | 0, HEAP32[$ring_buffer_length >> 2] | 0) | 0;
   _stbir__encode_scanline(HEAP32[$stbir_info$addr >> 2] | 0, HEAP32[$output_w >> 2] | 0, (HEAP32[$output_data >> 2] | 0) + (HEAP32[$output_row_start >> 2] | 0) | 0, HEAP32[$ring_buffer_entry >> 2] | 0, HEAP32[$channels >> 2] | 0, HEAP32[$alpha_channel >> 2] | 0, HEAP32[$decode >> 2] | 0);
  }
  $50 = HEAP32[$stbir_info$addr >> 2] | 0;
  if ((HEAP32[(HEAP32[$stbir_info$addr >> 2] | 0) + 168 >> 2] | 0) == (HEAP32[(HEAP32[$stbir_info$addr >> 2] | 0) + 172 >> 2] | 0)) break;
  $ring_buffer_first_scanline24 = $50 + 168 | 0;
  HEAP32[$ring_buffer_first_scanline24 >> 2] = (HEAP32[$ring_buffer_first_scanline24 >> 2] | 0) + 1;
  CSE$0 = (HEAP32[$stbir_info$addr >> 2] | 0) + 176 | 0;
  CSE$1 = HEAP32[$stbir_info$addr >> 2] | 0;
  HEAP32[CSE$0 >> 2] = ((HEAP32[CSE$0 >> 2] | 0) + 1 | 0) % (HEAP32[CSE$1 + 164 >> 2] | 0) | 0;
 }
 if ((label | 0) == 10) {
  STACKTOP = sp;
  return;
 }
 HEAP32[$50 + 176 >> 2] = -1;
 HEAP32[(HEAP32[$stbir_info$addr >> 2] | 0) + 168 >> 2] = 0;
 HEAP32[(HEAP32[$stbir_info$addr >> 2] | 0) + 172 >> 2] = 0;
 STACKTOP = sp;
 return;
}

function __ZNSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN4tson8PropertyEEENS_19__map_value_compareIS7_SA_NS_4lessIS7_EELb1EEENS5_ISA_EEE12__find_equalIS7_EERPNS_16__tree_node_baseIPvEERPNS_15__tree_end_nodeISL_EERKT_($this, $__parent, $__v) {
 $this = $this | 0;
 $__parent = $__parent | 0;
 $__v = $__v | 0;
 var $0 = 0, $1 = 0, $4 = 0, $5 = 0, $8 = 0, $9 = 0, $__cc$i$i19 = 0, $__nd$0 = 0, $__nd$1$in = 0, $__nd_ptr$0 = 0, $__nd_ptr$1 = 0, $__size$i$i$i$i$i$i = 0, $__size$i$i$i$i$i$i31 = 0, $__size_$i$i$i$i$i$i$i$i = 0, $__size_$i3$i$i$i$i$i$i = 0, $__value_$i$i$i$i = 0, $call$i$i$i = 0, $call$i$i$i20 = 0, $call2 = 0, $cond$i$i$i$i$i$i = 0, $cond$i$i$i$i$i$i29 = 0, $ref$tmp$i$i$i$i18 = 0, $retval$0 = 0, $tobool$i$i$i$i$i$i$i$i = 0, $tobool$i$i$i$i$i$i$i$i23 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $ref$tmp$i$i$i$i18 = sp;
 $__value_$i$i$i$i = $this + 4 | 0;
 $0 = HEAP32[$__value_$i$i$i$i >> 2] | 0;
 $call2 = __ZNKSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN4tson8PropertyEEENS_19__map_value_compareIS7_SA_NS_4lessIS7_EELb1EEENS5_ISA_EEE10__root_ptrEv($this) | 0;
 do if (!$0) {
  HEAP32[$__parent >> 2] = $__value_$i$i$i$i;
  $retval$0 = $__value_$i$i$i$i;
 } else {
  $__size$i$i$i$i$i$i31 = $ref$tmp$i$i$i$i18 + 4 | 0;
  $__size_$i$i$i$i$i$i$i$i = $__v + 11 | 0;
  $__size_$i3$i$i$i$i$i$i = $__v + 4 | 0;
  $__size$i$i$i$i$i$i = $ref$tmp$i$i$i$i18 + 4 | 0;
  $__nd$0 = $0;
  $__nd_ptr$0 = $call2;
  while (1) {
   $__cc$i$i19 = $__nd$0 + 16 | 0;
   $call$i$i$i20 = __ZNSt3__29__launderIKNS_4pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN4tson8PropertyEEEEEPT_SE_($__cc$i$i19) | 0;
   $1 = HEAP8[$call$i$i$i20 + 11 >> 0] | 0;
   $tobool$i$i$i$i$i$i$i$i23 = $1 << 24 >> 24 < 0;
   $cond$i$i$i$i$i$i29 = $tobool$i$i$i$i$i$i$i$i23 ? HEAP32[$call$i$i$i20 + 4 >> 2] | 0 : $1 & 255;
   HEAP32[$ref$tmp$i$i$i$i18 >> 2] = $tobool$i$i$i$i$i$i$i$i23 ? HEAP32[$call$i$i$i20 >> 2] | 0 : $call$i$i$i20;
   HEAP32[$__size$i$i$i$i$i$i31 >> 2] = $cond$i$i$i$i$i$i29;
   if ((__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareINS_17basic_string_viewIcS2_EEEENS_9enable_ifIXsr33__can_be_converted_to_string_viewIcS2_T_EE5valueEiE4typeERKSA_($__v, $ref$tmp$i$i$i$i18) | 0) < 0) {
    $4 = HEAP32[$__nd$0 >> 2] | 0;
    if (!$4) {
     label = 5;
     break;
    } else {
     $__nd$1$in = $4;
     $__nd_ptr$1 = $__nd$0;
    }
   } else {
    $call$i$i$i = __ZNSt3__29__launderIKNS_4pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN4tson8PropertyEEEEEPT_SE_($__cc$i$i19) | 0;
    $5 = HEAP8[$__size_$i$i$i$i$i$i$i$i >> 0] | 0;
    $tobool$i$i$i$i$i$i$i$i = $5 << 24 >> 24 < 0;
    $cond$i$i$i$i$i$i = $tobool$i$i$i$i$i$i$i$i ? HEAP32[$__size_$i3$i$i$i$i$i$i >> 2] | 0 : $5 & 255;
    HEAP32[$ref$tmp$i$i$i$i18 >> 2] = $tobool$i$i$i$i$i$i$i$i ? HEAP32[$__v >> 2] | 0 : $__v;
    HEAP32[$__size$i$i$i$i$i$i >> 2] = $cond$i$i$i$i$i$i;
    if ((__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareINS_17basic_string_viewIcS2_EEEENS_9enable_ifIXsr33__can_be_converted_to_string_viewIcS2_T_EE5valueEiE4typeERKSA_($call$i$i$i, $ref$tmp$i$i$i$i18) | 0) >= 0) {
     label = 9;
     break;
    }
    $8 = $__nd$0 + 4 | 0;
    $9 = HEAP32[$8 >> 2] | 0;
    if (!$9) {
     label = 8;
     break;
    } else {
     $__nd$1$in = $9;
     $__nd_ptr$1 = $8;
    }
   }
   $__nd$0 = $__nd$1$in;
   $__nd_ptr$0 = $__nd_ptr$1;
  }
  if ((label | 0) == 5) {
   HEAP32[$__parent >> 2] = $__nd$0;
   $retval$0 = $__nd$0;
   break;
  } else if ((label | 0) == 8) {
   HEAP32[$__parent >> 2] = $__nd$0;
   $retval$0 = $8;
   break;
  } else if ((label | 0) == 9) {
   HEAP32[$__parent >> 2] = $__nd$0;
   $retval$0 = $__nd_ptr$0;
   break;
  }
 } while (0);
 STACKTOP = sp;
 return $retval$0 | 0;
}

function __ZNSt3__29__num_getIwE19__stage2_float_loopEwRbRcPcRS4_wwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjPw($__ct, $__in_units, $__exp, $__a, $__a_end, $__decimal_point, $__thousands_sep, $__grouping, $__g, $__g_end, $__dc, $__atoms) {
 $__ct = $__ct | 0;
 $__in_units = $__in_units | 0;
 $__exp = $__exp | 0;
 $__a = $__a | 0;
 $__a_end = $__a_end | 0;
 $__decimal_point = $__decimal_point | 0;
 $__thousands_sep = $__thousands_sep | 0;
 $__grouping = $__grouping | 0;
 $__g = $__g | 0;
 $__g_end = $__g_end | 0;
 $__dc = $__dc | 0;
 $__atoms = $__atoms | 0;
 var $1 = 0, $10 = 0, $12 = 0, $13 = 0, $17 = 0, $2 = 0, $25 = 0, $27 = 0, $28 = 0, $29 = 0, $4 = 0, $5 = 0, $6 = 0, $9 = 0, $__first$addr$0$i$idx = 0, $__first$addr$0$i$ptr = 0, $__first$addr$0$lcssa$i = 0, $add$ptr = 0, $and55 = 0, $retval$2 = 0, $sub$ptr$sub28 = 0;
 L1 : do if (($__ct | 0) == ($__decimal_point | 0)) if (!(HEAP8[$__in_units >> 0] | 0)) $retval$2 = -1; else {
  HEAP8[$__in_units >> 0] = 0;
  $1 = HEAP32[$__a_end >> 2] | 0;
  HEAP32[$__a_end >> 2] = $1 + 1;
  HEAP8[$1 >> 0] = 46;
  $2 = HEAP8[$__grouping + 11 >> 0] | 0;
  if (!(($2 << 24 >> 24 < 0 ? HEAP32[$__grouping + 4 >> 2] | 0 : $2 & 255) | 0)) $retval$2 = 0; else {
   $4 = HEAP32[$__g_end >> 2] | 0;
   if (($4 - $__g | 0) < 160) {
    $5 = HEAP32[$__dc >> 2] | 0;
    HEAP32[$__g_end >> 2] = $4 + 4;
    HEAP32[$4 >> 2] = $5;
    $retval$2 = 0;
   } else $retval$2 = 0;
  }
 } else {
  if (($__ct | 0) == ($__thousands_sep | 0)) {
   $6 = HEAP8[$__grouping + 11 >> 0] | 0;
   if (($6 << 24 >> 24 < 0 ? HEAP32[$__grouping + 4 >> 2] | 0 : $6 & 255) | 0) {
    if (!(HEAP8[$__in_units >> 0] | 0)) {
     $retval$2 = -1;
     break;
    }
    $9 = HEAP32[$__g_end >> 2] | 0;
    if (($9 - $__g | 0) >= 160) {
     $retval$2 = 0;
     break;
    }
    $10 = HEAP32[$__dc >> 2] | 0;
    HEAP32[$__g_end >> 2] = $9 + 4;
    HEAP32[$9 >> 2] = $10;
    HEAP32[$__dc >> 2] = 0;
    $retval$2 = 0;
    break;
   }
  }
  $add$ptr = $__atoms + 128 | 0;
  $__first$addr$0$i$idx = 0;
  while (1) {
   $__first$addr$0$i$ptr = $__atoms + ($__first$addr$0$i$idx << 2) | 0;
   if (($__first$addr$0$i$idx | 0) == 32) {
    $__first$addr$0$lcssa$i = $add$ptr;
    break;
   }
   if ((HEAP32[$__first$addr$0$i$ptr >> 2] | 0) == ($__ct | 0)) {
    $__first$addr$0$lcssa$i = $__first$addr$0$i$ptr;
    break;
   } else $__first$addr$0$i$idx = $__first$addr$0$i$idx + 1 | 0;
  }
  $sub$ptr$sub28 = $__first$addr$0$lcssa$i - $__atoms | 0;
  if (($sub$ptr$sub28 | 0) > 124) $retval$2 = -1; else {
   $12 = HEAP8[14672 + ($sub$ptr$sub28 >> 2) >> 0] | 0;
   $13 = $sub$ptr$sub28 + -88 | 0;
   switch ($13 >>> 2 | $13 << 30 | 0) {
   case 2:
   case 3:
    {
     $17 = HEAP32[$__a_end >> 2] | 0;
     if (($17 | 0) != ($__a | 0)) if ((HEAP8[$17 + -1 >> 0] & 95) != (HEAP8[$__exp >> 0] & 127)) {
      $retval$2 = -1;
      break L1;
     }
     HEAP32[$__a_end >> 2] = $17 + 1;
     HEAP8[$17 >> 0] = $12;
     $retval$2 = 0;
     break L1;
     break;
    }
   case 1:
   case 0:
    {
     HEAP8[$__exp >> 0] = 80;
     break;
    }
   default:
    {
     $and55 = $12 & 95;
     if (($and55 | 0) == (HEAP8[$__exp >> 0] | 0)) {
      HEAP8[$__exp >> 0] = $and55 | 128;
      if (HEAP8[$__in_units >> 0] | 0) {
       HEAP8[$__in_units >> 0] = 0;
       $25 = HEAP8[$__grouping + 11 >> 0] | 0;
       if (($25 << 24 >> 24 < 0 ? HEAP32[$__grouping + 4 >> 2] | 0 : $25 & 255) | 0) {
        $27 = HEAP32[$__g_end >> 2] | 0;
        if (($27 - $__g | 0) < 160) {
         $28 = HEAP32[$__dc >> 2] | 0;
         HEAP32[$__g_end >> 2] = $27 + 4;
         HEAP32[$27 >> 2] = $28;
        }
       }
      }
     }
    }
   }
   $29 = HEAP32[$__a_end >> 2] | 0;
   HEAP32[$__a_end >> 2] = $29 + 1;
   HEAP8[$29 >> 0] = $12;
   if (($sub$ptr$sub28 | 0) > 84) $retval$2 = 0; else {
    HEAP32[$__dc >> 2] = (HEAP32[$__dc >> 2] | 0) + 1;
    $retval$2 = 0;
   }
  }
 } while (0);
 return $retval$2 | 0;
}

function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_white_spaceERS4_S4_RjRKNS_5ctypeIwEE($this, $__b, $__e, $__err, $__ct) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__err = $__err | 0;
 $__ct = $__ct | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $16 = 0, $17 = 0, $21 = 0, $22 = 0, $26 = 0, $27 = 0, $32 = 0, $33 = 0, $34 = 0, $5 = 0, $6 = 0, $__ninp_$i$i5 = 0, $retval$0$i$i = 0, $retval$0$i$i$i$i = 0, $retval$0$i$i$i$i26 = 0, $retval$0$i$i13$i$i = 0, $retval$0$i$i13$i$i47 = 0, label = 0;
 label = 0;
 L1 : while (1) {
  $0 = HEAP32[$__b >> 2] | 0;
  do if (!$0) $32 = 1; else {
   $1 = HEAP32[$0 + 12 >> 2] | 0;
   if (($1 | 0) == (HEAP32[$0 + 16 >> 2] | 0)) $retval$0$i$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$0 >> 2] | 0) + 36 >> 2] & 127]($0) | 0; else $retval$0$i$i$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$1 >> 2] | 0) | 0;
   if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i$i$i, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
    HEAP32[$__b >> 2] = 0;
    $32 = 1;
    break;
   } else {
    $32 = (HEAP32[$__b >> 2] | 0) == 0;
    break;
   }
  } while (0);
  $5 = HEAP32[$__e >> 2] | 0;
  do if (!$5) label = 15; else {
   $6 = HEAP32[$5 + 12 >> 2] | 0;
   if (($6 | 0) == (HEAP32[$5 + 16 >> 2] | 0)) $retval$0$i$i13$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$5 >> 2] | 0) + 36 >> 2] & 127]($5) | 0; else $retval$0$i$i13$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$6 >> 2] | 0) | 0;
   if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i13$i$i, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
    HEAP32[$__e >> 2] = 0;
    label = 15;
    break;
   } else if ($32) {
    $33 = $5;
    break;
   } else {
    $26 = $5;
    break L1;
   }
  } while (0);
  if ((label | 0) == 15) {
   label = 0;
   if ($32) {
    $26 = 0;
    break;
   } else $33 = 0;
  }
  $10 = HEAP32[$__b >> 2] | 0;
  $11 = HEAP32[$10 + 12 >> 2] | 0;
  if (($11 | 0) == (HEAP32[$10 + 16 >> 2] | 0)) $retval$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$10 >> 2] | 0) + 36 >> 2] & 127]($10) | 0; else $retval$0$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$11 >> 2] | 0) | 0;
  if (!(FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$__ct >> 2] | 0) + 12 >> 2] & 63]($__ct, 8192, $retval$0$i$i) | 0)) {
   $26 = $33;
   break;
  }
  $16 = HEAP32[$__b >> 2] | 0;
  $__ninp_$i$i5 = $16 + 12 | 0;
  $17 = HEAP32[$__ninp_$i$i5 >> 2] | 0;
  if (($17 | 0) == (HEAP32[$16 + 16 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[$16 >> 2] | 0) + 40 >> 2] & 127]($16) | 0; else {
   HEAP32[$__ninp_$i$i5 >> 2] = $17 + 4;
   __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$17 >> 2] | 0) | 0;
  }
 }
 $21 = HEAP32[$__b >> 2] | 0;
 do if (!$21) $34 = 1; else {
  $22 = HEAP32[$21 + 12 >> 2] | 0;
  if (($22 | 0) == (HEAP32[$21 + 16 >> 2] | 0)) $retval$0$i$i$i$i26 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$21 >> 2] | 0) + 36 >> 2] & 127]($21) | 0; else $retval$0$i$i$i$i26 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$22 >> 2] | 0) | 0;
  if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i$i$i26, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
   HEAP32[$__b >> 2] = 0;
   $34 = 1;
   break;
  } else {
   $34 = (HEAP32[$__b >> 2] | 0) == 0;
   break;
  }
 } while (0);
 do if (!$26) label = 38; else {
  $27 = HEAP32[$26 + 12 >> 2] | 0;
  if (($27 | 0) == (HEAP32[$26 + 16 >> 2] | 0)) $retval$0$i$i13$i$i47 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$26 >> 2] | 0) + 36 >> 2] & 127]($26) | 0; else $retval$0$i$i13$i$i47 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$27 >> 2] | 0) | 0;
  if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i13$i$i47, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
   HEAP32[$__e >> 2] = 0;
   label = 38;
   break;
  } else if ($34) break; else {
   label = 40;
   break;
  }
 } while (0);
 if ((label | 0) == 38) if ($34) label = 40;
 if ((label | 0) == 40) HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
 return;
}

function __ZNSt3__210__stdinbufIcE9__getcharEb($this, $__consume) {
 $this = $this | 0;
 $__consume = $__consume | 0;
 var $$sroa$speculated = 0, $1 = 0, $12 = 0, $13 = 0, $16 = 0, $2 = 0, $6 = 0, $7 = 0, $9 = 0, $__1buf = 0, $__cv_ = 0, $__enxt = 0, $__extbuf = 0, $__file_ = 0, $__i$0 = 0, $__i56$0 = 0, $__inxt = 0, $__last_consumed_ = 0, $__last_consumed_is_next_ = 0, $__nread$0 = 0, $__nread$3 = 0, $__st_ = 0, $add$ptr = 0, $add$ptr20 = 0, $call29 = 0, $call62 = 0, $call8 = 0, $retval$10 = 0, $retval$11 = 0, $retval$9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $__extbuf = sp + 16 | 0;
 $__1buf = sp + 8 | 0;
 $__enxt = sp + 4 | 0;
 $__inxt = sp;
 $__last_consumed_is_next_ = $this + 52 | 0;
 if (!(HEAP8[$__last_consumed_is_next_ >> 0] | 0)) {
  $2 = HEAP32[$this + 44 >> 2] | 0;
  $$sroa$speculated = ($2 | 0) > 1 ? $2 : 1;
  $__file_ = $this + 32 | 0;
  $__i$0 = 0;
  while (1) {
   if ($__i$0 >>> 0 >= $$sroa$speculated >>> 0) {
    label = 9;
    break;
   }
   $call8 = _getc(HEAP32[$__file_ >> 2] | 0) | 0;
   if (($call8 | 0) == -1) {
    label = 8;
    break;
   }
   HEAP8[$__extbuf + $__i$0 >> 0] = $call8;
   $__i$0 = $__i$0 + 1 | 0;
  }
  if ((label | 0) == 8) $retval$10 = __ZNSt3__211char_traitsIcE3eofEv() | 0; else if ((label | 0) == 9) {
   do if (!(HEAP8[$this + 53 >> 0] | 0)) {
    $__st_ = $this + 40 | 0;
    $__cv_ = $this + 36 | 0;
    $add$ptr20 = $__1buf + 1 | 0;
    $__nread$0 = $$sroa$speculated;
    L11 : while (1) {
     $6 = HEAP32[$__st_ >> 2] | 0;
     $7 = $6;
     $9 = HEAP32[$7 >> 2] | 0;
     $12 = HEAP32[$7 + 4 >> 2] | 0;
     $13 = HEAP32[$__cv_ >> 2] | 0;
     $add$ptr = $__extbuf + $__nread$0 | 0;
     switch (FUNCTION_TABLE_iiiiiiiii[HEAP32[(HEAP32[$13 >> 2] | 0) + 16 >> 2] & 15]($13, $6, $__extbuf, $add$ptr, $__enxt, $__1buf, $add$ptr20, $__inxt) | 0) {
     case 3:
      {
       label = 15;
       break L11;
       break;
      }
     case 2:
      {
       label = 17;
       break L11;
       break;
      }
     case 1:
      break;
     default:
      break L11;
     }
     $16 = HEAP32[$__st_ >> 2] | 0;
     HEAP32[$16 >> 2] = $9;
     HEAP32[$16 + 4 >> 2] = $12;
     if (($__nread$0 | 0) == 8) {
      label = 17;
      break;
     }
     $call29 = _getc(HEAP32[$__file_ >> 2] | 0) | 0;
     if (($call29 | 0) == -1) {
      label = 17;
      break;
     }
     HEAP8[$add$ptr >> 0] = $call29;
     $__nread$0 = $__nread$0 + 1 | 0;
    }
    if ((label | 0) == 15) HEAP8[$__1buf >> 0] = HEAP8[$__extbuf >> 0] | 0; else if ((label | 0) == 17) {
     $retval$9 = __ZNSt3__211char_traitsIcE3eofEv() | 0;
     break;
    }
    $__nread$3 = $__nread$0;
    label = 19;
   } else {
    HEAP8[$__1buf >> 0] = HEAP8[$__extbuf >> 0] | 0;
    $__nread$3 = $$sroa$speculated;
    label = 19;
   } while (0);
   L21 : do if ((label | 0) == 19) {
    L23 : do if ($__consume) HEAP32[$this + 48 >> 2] = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$__1buf >> 0] | 0) | 0; else {
     $__i56$0 = $__nread$3;
     do {
      if (($__i56$0 | 0) <= 0) break L23;
      $__i56$0 = $__i56$0 + -1 | 0;
      $call62 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$__extbuf + $__i56$0 >> 0] | 0) | 0;
     } while ((_ungetc($call62, HEAP32[$__file_ >> 2] | 0) | 0) != -1);
     $retval$9 = __ZNSt3__211char_traitsIcE3eofEv() | 0;
     break L21;
    } while (0);
    $retval$9 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$__1buf >> 0] | 0) | 0;
   } while (0);
   $retval$10 = $retval$9;
  }
  $retval$11 = $retval$10;
 } else {
  $__last_consumed_ = $this + 48 | 0;
  $1 = HEAP32[$__last_consumed_ >> 2] | 0;
  if ($__consume) {
   HEAP32[$__last_consumed_ >> 2] = __ZNSt3__211char_traitsIcE3eofEv() | 0;
   HEAP8[$__last_consumed_is_next_ >> 0] = 0;
   $retval$11 = $1;
  } else $retval$11 = $1;
 }
 STACKTOP = sp;
 return $retval$11 | 0;
}

function _LoadASTC($agg$result, $fileName) {
 $agg$result = $agg$result | 0;
 $fileName = $fileName | 0;
 var $astcFile = 0, $astcHeader = 0, $bpp = 0, $conv52 = 0, $dataSize = 0, $fileName$addr = 0, $image = 0, $mul65 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer10 = 0, $vararg_buffer14 = 0, $vararg_buffer4 = 0, $vararg_buffer7 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(96);
 $vararg_buffer14 = sp + 40 | 0;
 $vararg_buffer10 = sp + 32 | 0;
 $vararg_buffer7 = sp + 24 | 0;
 $vararg_buffer4 = sp + 16 | 0;
 $vararg_buffer1 = sp + 8 | 0;
 $vararg_buffer = sp;
 $fileName$addr = sp + 76 | 0;
 $image = sp + 56 | 0;
 $astcFile = sp + 52 | 0;
 $astcHeader = sp + 80 | 0;
 $bpp = sp + 48 | 0;
 $dataSize = sp + 44 | 0;
 HEAP32[$fileName$addr >> 2] = $fileName;
 HEAP32[$image >> 2] = 0;
 HEAP32[$image + 4 >> 2] = 0;
 HEAP32[$image + 8 >> 2] = 0;
 HEAP32[$image + 12 >> 2] = 0;
 HEAP32[$image + 16 >> 2] = 0;
 HEAP32[$astcFile >> 2] = _fopen(HEAP32[$fileName$addr >> 2] | 0, 32752) | 0;
 if (!(HEAP32[$astcFile >> 2] | 0)) {
  HEAP32[$vararg_buffer >> 2] = HEAP32[$fileName$addr >> 2];
  _TraceLog(4, 36940, $vararg_buffer);
  HEAP32[$agg$result >> 2] = HEAP32[$image >> 2];
  HEAP32[$agg$result + 4 >> 2] = HEAP32[$image + 4 >> 2];
  HEAP32[$agg$result + 8 >> 2] = HEAP32[$image + 8 >> 2];
  HEAP32[$agg$result + 12 >> 2] = HEAP32[$image + 12 >> 2];
  HEAP32[$agg$result + 16 >> 2] = HEAP32[$image + 16 >> 2];
  STACKTOP = sp;
  return;
 }
 _fread($astcHeader, 16, 1, HEAP32[$astcFile >> 2] | 0) | 0;
 do if ((HEAPU8[$astcHeader + 3 >> 0] | 0 | 0) != 92) label = 7; else if ((HEAPU8[$astcHeader + 2 >> 0] | 0 | 0) != 161) label = 7; else if ((HEAPU8[$astcHeader + 1 >> 0] | 0 | 0) != 171) label = 7; else if ((HEAPU8[$astcHeader >> 0] | 0 | 0) != 19) label = 7; else {
  HEAP32[$image + 4 >> 2] = (HEAPU8[$astcHeader + 7 + 2 >> 0] | 0) << 16 | (HEAPU8[$astcHeader + 7 + 1 >> 0] | 0) << 8 | (HEAPU8[$astcHeader + 7 >> 0] | 0);
  HEAP32[$image + 8 >> 2] = (HEAPU8[$astcHeader + 10 + 2 >> 0] | 0) << 16 | (HEAPU8[$astcHeader + 10 + 1 >> 0] | 0) << 8 | (HEAPU8[$astcHeader + 10 >> 0] | 0);
  HEAP32[$vararg_buffer4 >> 2] = HEAP32[$image + 4 >> 2];
  _TraceLog(2, 37024, $vararg_buffer4);
  HEAP32[$vararg_buffer7 >> 2] = HEAP32[$image + 8 >> 2];
  _TraceLog(2, 37045, $vararg_buffer7);
  $conv52 = HEAPU8[$astcHeader + 5 >> 0] | 0;
  HEAP32[$vararg_buffer10 >> 2] = HEAPU8[$astcHeader + 4 >> 0];
  HEAP32[$vararg_buffer10 + 4 >> 2] = $conv52;
  _TraceLog(2, 37067, $vararg_buffer10);
  HEAP32[$image + 12 >> 2] = 1;
  HEAP32[$bpp >> 2] = 128 / (Math_imul(HEAPU8[$astcHeader + 4 >> 0] | 0, HEAPU8[$astcHeader + 5 >> 0] | 0) | 0) | 0;
  if (!((HEAP32[$bpp >> 2] | 0) == 8 | (HEAP32[$bpp >> 2] | 0) == 2)) {
   HEAP32[$vararg_buffer14 >> 2] = HEAP32[$fileName$addr >> 2];
   _TraceLog(4, 37092, $vararg_buffer14);
   break;
  }
  $mul65 = Math_imul(HEAP32[$image + 4 >> 2] | 0, HEAP32[$image + 8 >> 2] | 0) | 0;
  HEAP32[$dataSize >> 2] = (Math_imul($mul65, HEAP32[$bpp >> 2] | 0) | 0) / 8 | 0;
  HEAP32[$image >> 2] = _malloc(HEAP32[$dataSize >> 2] | 0) | 0;
  _fread(HEAP32[$image >> 2] | 0, HEAP32[$dataSize >> 2] | 0, 1, HEAP32[$astcFile >> 2] | 0) | 0;
  if ((HEAP32[$bpp >> 2] | 0) == 8) {
   HEAP32[$image + 16 >> 2] = 20;
   break;
  }
  if ((HEAP32[$bpp >> 2] | 0) == 2) HEAP32[$image + 16 >> 2] = 21;
 } while (0);
 if ((label | 0) == 7) {
  HEAP32[$vararg_buffer1 >> 2] = HEAP32[$fileName$addr >> 2];
  _TraceLog(4, 36975, $vararg_buffer1);
 }
 _fclose(HEAP32[$astcFile >> 2] | 0) | 0;
 HEAP32[$agg$result >> 2] = HEAP32[$image >> 2];
 HEAP32[$agg$result + 4 >> 2] = HEAP32[$image + 4 >> 2];
 HEAP32[$agg$result + 8 >> 2] = HEAP32[$image + 8 >> 2];
 HEAP32[$agg$result + 12 >> 2] = HEAP32[$image + 12 >> 2];
 HEAP32[$agg$result + 16 >> 2] = HEAP32[$image + 16 >> 2];
 STACKTOP = sp;
 return;
}

function __ZNSt3__210__stdinbufIwE9__getcharEb($this, $__consume) {
 $this = $this | 0;
 $__consume = $__consume | 0;
 var $$sroa$speculated = 0, $1 = 0, $12 = 0, $13 = 0, $16 = 0, $2 = 0, $6 = 0, $7 = 0, $9 = 0, $__1buf = 0, $__cv_ = 0, $__enxt = 0, $__extbuf = 0, $__file_ = 0, $__i$0 = 0, $__i58$0 = 0, $__inxt = 0, $__last_consumed_ = 0, $__last_consumed_is_next_ = 0, $__nread$0 = 0, $__nread$3 = 0, $__st_ = 0, $add$ptr = 0, $add$ptr21 = 0, $call30 = 0, $call65 = 0, $call8 = 0, $retval$10 = 0, $retval$11 = 0, $retval$9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $__extbuf = sp + 16 | 0;
 $__1buf = sp + 8 | 0;
 $__enxt = sp + 4 | 0;
 $__inxt = sp;
 $__last_consumed_is_next_ = $this + 52 | 0;
 if (!(HEAP8[$__last_consumed_is_next_ >> 0] | 0)) {
  $2 = HEAP32[$this + 44 >> 2] | 0;
  $$sroa$speculated = ($2 | 0) > 1 ? $2 : 1;
  $__file_ = $this + 32 | 0;
  $__i$0 = 0;
  while (1) {
   if ($__i$0 >>> 0 >= $$sroa$speculated >>> 0) {
    label = 9;
    break;
   }
   $call8 = _getc(HEAP32[$__file_ >> 2] | 0) | 0;
   if (($call8 | 0) == -1) {
    label = 8;
    break;
   }
   HEAP8[$__extbuf + $__i$0 >> 0] = $call8;
   $__i$0 = $__i$0 + 1 | 0;
  }
  if ((label | 0) == 8) $retval$10 = __ZNSt3__211char_traitsIwE3eofEv() | 0; else if ((label | 0) == 9) {
   do if (!(HEAP8[$this + 53 >> 0] | 0)) {
    $__st_ = $this + 40 | 0;
    $__cv_ = $this + 36 | 0;
    $add$ptr21 = $__1buf + 4 | 0;
    $__nread$0 = $$sroa$speculated;
    L11 : while (1) {
     $6 = HEAP32[$__st_ >> 2] | 0;
     $7 = $6;
     $9 = HEAP32[$7 >> 2] | 0;
     $12 = HEAP32[$7 + 4 >> 2] | 0;
     $13 = HEAP32[$__cv_ >> 2] | 0;
     $add$ptr = $__extbuf + $__nread$0 | 0;
     switch (FUNCTION_TABLE_iiiiiiiii[HEAP32[(HEAP32[$13 >> 2] | 0) + 16 >> 2] & 15]($13, $6, $__extbuf, $add$ptr, $__enxt, $__1buf, $add$ptr21, $__inxt) | 0) {
     case 3:
      {
       label = 15;
       break L11;
       break;
      }
     case 2:
      {
       label = 17;
       break L11;
       break;
      }
     case 1:
      break;
     default:
      break L11;
     }
     $16 = HEAP32[$__st_ >> 2] | 0;
     HEAP32[$16 >> 2] = $9;
     HEAP32[$16 + 4 >> 2] = $12;
     if (($__nread$0 | 0) == 8) {
      label = 17;
      break;
     }
     $call30 = _getc(HEAP32[$__file_ >> 2] | 0) | 0;
     if (($call30 | 0) == -1) {
      label = 17;
      break;
     }
     HEAP8[$add$ptr >> 0] = $call30;
     $__nread$0 = $__nread$0 + 1 | 0;
    }
    if ((label | 0) == 15) HEAP32[$__1buf >> 2] = HEAP8[$__extbuf >> 0]; else if ((label | 0) == 17) {
     $retval$9 = __ZNSt3__211char_traitsIwE3eofEv() | 0;
     break;
    }
    $__nread$3 = $__nread$0;
    label = 19;
   } else {
    HEAP32[$__1buf >> 2] = HEAP8[$__extbuf >> 0];
    $__nread$3 = $$sroa$speculated;
    label = 19;
   } while (0);
   L21 : do if ((label | 0) == 19) {
    L23 : do if ($__consume) HEAP32[$this + 48 >> 2] = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$__1buf >> 2] | 0) | 0; else {
     $__i58$0 = $__nread$3;
     do {
      if (($__i58$0 | 0) <= 0) break L23;
      $__i58$0 = $__i58$0 + -1 | 0;
      $call65 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP8[$__extbuf + $__i58$0 >> 0] | 0) | 0;
     } while ((_ungetc($call65, HEAP32[$__file_ >> 2] | 0) | 0) != -1);
     $retval$9 = __ZNSt3__211char_traitsIwE3eofEv() | 0;
     break L21;
    } while (0);
    $retval$9 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$__1buf >> 2] | 0) | 0;
   } while (0);
   $retval$10 = $retval$9;
  }
  $retval$11 = $retval$10;
 } else {
  $__last_consumed_ = $this + 48 | 0;
  $1 = HEAP32[$__last_consumed_ >> 2] | 0;
  if ($__consume) {
   HEAP32[$__last_consumed_ >> 2] = __ZNSt3__211char_traitsIwE3eofEv() | 0;
   HEAP8[$__last_consumed_is_next_ >> 0] = 0;
   $retval$11 = $1;
  } else $retval$11 = $1;
 }
 STACKTOP = sp;
 return $retval$11 | 0;
}

function __ZNKSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8nlohmann10basic_jsonINS_3mapENS_6vectorES7_bxydS5_NS8_14adl_serializerEEEEENS_19__map_value_compareIS7_SE_NS_4lessIvEELb1EEENS5_ISE_EEE13__count_multiIA17_cEEmRKT_($this, $__k) {
 $this = $this | 0;
 $__k = $__k | 0;
 var $$in$i$i = 0, $10 = 0, $5 = 0, $6 = 0, $7 = 0, $9 = 0, $__cc$i$i16 = 0, $__parent_$i410$i$i$i$i = 0, $__parent_$i47$i$i$i$i = 0, $__r$04$i$i = 0, $__result$030 = 0, $__result$1 = 0, $__rt$0 = 0, $__rt$028 = 0, $__rt$031 = 0, $__rt$1$in = 0, $__value_$i$i$i = 0, $__x$addr$0$i$i$i$i$i = 0, $call11 = 0, $call14 = 0, $inc$i$i = 0, $retval$0 = 0, $retval$0$i$i$i$i = 0;
 $__value_$i$i$i = $this + 4 | 0;
 $__rt$028 = HEAP32[$__value_$i$i$i >> 2] | 0;
 L1 : do if (!$__rt$028) $retval$0 = 0; else {
  $__result$030 = $__value_$i$i$i;
  $__rt$031 = $__rt$028;
  while (1) {
   $__cc$i$i16 = $__rt$031 + 16 | 0;
   if ((__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc(__ZNSt3__29__launderIKNS_4pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8nlohmann10basic_jsonINS_3mapENS_6vectorES7_bxydS5_NS9_14adl_serializerEEEEEEEPT_SI_($__cc$i$i16) | 0, $__k) | 0) > 0) {
    $__result$1 = $__rt$031;
    $__rt$1$in = $__rt$031;
   } else {
    if ((__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc(__ZNSt3__29__launderIKNS_4pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8nlohmann10basic_jsonINS_3mapENS_6vectorES7_bxydS5_NS9_14adl_serializerEEEEEEEPT_SI_($__cc$i$i16) | 0, $__k) | 0) >= 0) break;
    $__result$1 = $__result$030;
    $__rt$1$in = $__rt$031 + 4 | 0;
   }
   $__rt$0 = HEAP32[$__rt$1$in >> 2] | 0;
   if (!$__rt$0) {
    $retval$0 = 0;
    break L1;
   } else {
    $__result$030 = $__result$1;
    $__rt$031 = $__rt$0;
   }
  }
  $call11 = __ZNKSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8nlohmann10basic_jsonINS_3mapENS_6vectorES7_bxydS5_NS8_14adl_serializerEEEEENS_19__map_value_compareIS7_SE_NS_4lessIvEELb1EEENS5_ISE_EEE13__lower_boundIA17_cEENS_21__tree_const_iteratorISE_PNS_11__tree_nodeISE_PvEElEERKT_SR_PNS_15__tree_end_nodeIPNS_16__tree_node_baseISP_EEEE($this, $__k, HEAP32[$__rt$031 >> 2] | 0, $__rt$031) | 0;
  $call14 = __ZNKSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8nlohmann10basic_jsonINS_3mapENS_6vectorES7_bxydS5_NS8_14adl_serializerEEEEENS_19__map_value_compareIS7_SE_NS_4lessIvEELb1EEENS5_ISE_EEE13__upper_boundIA17_cEENS_21__tree_const_iteratorISE_PNS_11__tree_nodeISE_PvEElEERKT_SR_PNS_15__tree_end_nodeIPNS_16__tree_node_baseISP_EEEE($this, $__k, HEAP32[$__rt$031 + 4 >> 2] | 0, $__result$030) | 0;
  if (($call11 | 0) == ($call14 | 0)) $retval$0 = 0; else {
   $$in$i$i = $call11;
   $__r$04$i$i = 0;
   while (1) {
    $inc$i$i = $__r$04$i$i + 1 | 0;
    $5 = HEAP32[$$in$i$i + 4 >> 2] | 0;
    if (!$5) {
     $__parent_$i47$i$i$i$i = $$in$i$i + 8 | 0;
     $7 = HEAP32[$__parent_$i47$i$i$i$i >> 2] | 0;
     if ((HEAP32[$7 >> 2] | 0) == ($$in$i$i | 0)) $retval$0$i$i$i$i = $7; else {
      $__parent_$i410$i$i$i$i = $__parent_$i47$i$i$i$i;
      do {
       $9 = HEAP32[$__parent_$i410$i$i$i$i >> 2] | 0;
       $__parent_$i410$i$i$i$i = $9 + 8 | 0;
       $10 = HEAP32[$__parent_$i410$i$i$i$i >> 2] | 0;
      } while ((HEAP32[$10 >> 2] | 0) != ($9 | 0));
      $retval$0$i$i$i$i = $10;
     }
    } else {
     $__x$addr$0$i$i$i$i$i = $5;
     while (1) {
      $6 = HEAP32[$__x$addr$0$i$i$i$i$i >> 2] | 0;
      if (!$6) break; else $__x$addr$0$i$i$i$i$i = $6;
     }
     $retval$0$i$i$i$i = $__x$addr$0$i$i$i$i$i;
    }
    if (($retval$0$i$i$i$i | 0) == ($call14 | 0)) {
     $retval$0 = $inc$i$i;
     break;
    } else {
     $$in$i$i = $retval$0$i$i$i$i;
     $__r$04$i$i = $inc$i$i;
    }
   }
  }
 } while (0);
 return $retval$0 | 0;
}

function __ZNKSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8nlohmann10basic_jsonINS_3mapENS_6vectorES7_bxydS5_NS8_14adl_serializerEEEEENS_19__map_value_compareIS7_SE_NS_4lessIvEELb1EEENS5_ISE_EEE13__count_multiIA16_cEEmRKT_($this, $__k) {
 $this = $this | 0;
 $__k = $__k | 0;
 var $$in$i$i = 0, $10 = 0, $5 = 0, $6 = 0, $7 = 0, $9 = 0, $__cc$i$i16 = 0, $__parent_$i410$i$i$i$i = 0, $__parent_$i47$i$i$i$i = 0, $__r$04$i$i = 0, $__result$030 = 0, $__result$1 = 0, $__rt$0 = 0, $__rt$028 = 0, $__rt$031 = 0, $__rt$1$in = 0, $__value_$i$i$i = 0, $__x$addr$0$i$i$i$i$i = 0, $call11 = 0, $call14 = 0, $inc$i$i = 0, $retval$0 = 0, $retval$0$i$i$i$i = 0;
 $__value_$i$i$i = $this + 4 | 0;
 $__rt$028 = HEAP32[$__value_$i$i$i >> 2] | 0;
 L1 : do if (!$__rt$028) $retval$0 = 0; else {
  $__result$030 = $__value_$i$i$i;
  $__rt$031 = $__rt$028;
  while (1) {
   $__cc$i$i16 = $__rt$031 + 16 | 0;
   if ((__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc(__ZNSt3__29__launderIKNS_4pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8nlohmann10basic_jsonINS_3mapENS_6vectorES7_bxydS5_NS9_14adl_serializerEEEEEEEPT_SI_($__cc$i$i16) | 0, $__k) | 0) > 0) {
    $__result$1 = $__rt$031;
    $__rt$1$in = $__rt$031;
   } else {
    if ((__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc(__ZNSt3__29__launderIKNS_4pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8nlohmann10basic_jsonINS_3mapENS_6vectorES7_bxydS5_NS9_14adl_serializerEEEEEEEPT_SI_($__cc$i$i16) | 0, $__k) | 0) >= 0) break;
    $__result$1 = $__result$030;
    $__rt$1$in = $__rt$031 + 4 | 0;
   }
   $__rt$0 = HEAP32[$__rt$1$in >> 2] | 0;
   if (!$__rt$0) {
    $retval$0 = 0;
    break L1;
   } else {
    $__result$030 = $__result$1;
    $__rt$031 = $__rt$0;
   }
  }
  $call11 = __ZNKSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8nlohmann10basic_jsonINS_3mapENS_6vectorES7_bxydS5_NS8_14adl_serializerEEEEENS_19__map_value_compareIS7_SE_NS_4lessIvEELb1EEENS5_ISE_EEE13__lower_boundIA16_cEENS_21__tree_const_iteratorISE_PNS_11__tree_nodeISE_PvEElEERKT_SR_PNS_15__tree_end_nodeIPNS_16__tree_node_baseISP_EEEE($this, $__k, HEAP32[$__rt$031 >> 2] | 0, $__rt$031) | 0;
  $call14 = __ZNKSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8nlohmann10basic_jsonINS_3mapENS_6vectorES7_bxydS5_NS8_14adl_serializerEEEEENS_19__map_value_compareIS7_SE_NS_4lessIvEELb1EEENS5_ISE_EEE13__upper_boundIA16_cEENS_21__tree_const_iteratorISE_PNS_11__tree_nodeISE_PvEElEERKT_SR_PNS_15__tree_end_nodeIPNS_16__tree_node_baseISP_EEEE($this, $__k, HEAP32[$__rt$031 + 4 >> 2] | 0, $__result$030) | 0;
  if (($call11 | 0) == ($call14 | 0)) $retval$0 = 0; else {
   $$in$i$i = $call11;
   $__r$04$i$i = 0;
   while (1) {
    $inc$i$i = $__r$04$i$i + 1 | 0;
    $5 = HEAP32[$$in$i$i + 4 >> 2] | 0;
    if (!$5) {
     $__parent_$i47$i$i$i$i = $$in$i$i + 8 | 0;
     $7 = HEAP32[$__parent_$i47$i$i$i$i >> 2] | 0;
     if ((HEAP32[$7 >> 2] | 0) == ($$in$i$i | 0)) $retval$0$i$i$i$i = $7; else {
      $__parent_$i410$i$i$i$i = $__parent_$i47$i$i$i$i;
      do {
       $9 = HEAP32[$__parent_$i410$i$i$i$i >> 2] | 0;
       $__parent_$i410$i$i$i$i = $9 + 8 | 0;
       $10 = HEAP32[$__parent_$i410$i$i$i$i >> 2] | 0;
      } while ((HEAP32[$10 >> 2] | 0) != ($9 | 0));
      $retval$0$i$i$i$i = $10;
     }
    } else {
     $__x$addr$0$i$i$i$i$i = $5;
     while (1) {
      $6 = HEAP32[$__x$addr$0$i$i$i$i$i >> 2] | 0;
      if (!$6) break; else $__x$addr$0$i$i$i$i$i = $6;
     }
     $retval$0$i$i$i$i = $__x$addr$0$i$i$i$i$i;
    }
    if (($retval$0$i$i$i$i | 0) == ($call14 | 0)) {
     $retval$0 = $inc$i$i;
     break;
    } else {
     $$in$i$i = $retval$0$i$i$i$i;
     $__r$04$i$i = $inc$i$i;
    }
   }
  }
 } while (0);
 return $retval$0 | 0;
}

function __ZNKSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8nlohmann10basic_jsonINS_3mapENS_6vectorES7_bxydS5_NS8_14adl_serializerEEEEENS_19__map_value_compareIS7_SE_NS_4lessIvEELb1EEENS5_ISE_EEE13__count_multiIA14_cEEmRKT_($this, $__k) {
 $this = $this | 0;
 $__k = $__k | 0;
 var $$in$i$i = 0, $10 = 0, $5 = 0, $6 = 0, $7 = 0, $9 = 0, $__cc$i$i16 = 0, $__parent_$i410$i$i$i$i = 0, $__parent_$i47$i$i$i$i = 0, $__r$04$i$i = 0, $__result$030 = 0, $__result$1 = 0, $__rt$0 = 0, $__rt$028 = 0, $__rt$031 = 0, $__rt$1$in = 0, $__value_$i$i$i = 0, $__x$addr$0$i$i$i$i$i = 0, $call11 = 0, $call14 = 0, $inc$i$i = 0, $retval$0 = 0, $retval$0$i$i$i$i = 0;
 $__value_$i$i$i = $this + 4 | 0;
 $__rt$028 = HEAP32[$__value_$i$i$i >> 2] | 0;
 L1 : do if (!$__rt$028) $retval$0 = 0; else {
  $__result$030 = $__value_$i$i$i;
  $__rt$031 = $__rt$028;
  while (1) {
   $__cc$i$i16 = $__rt$031 + 16 | 0;
   if ((__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc(__ZNSt3__29__launderIKNS_4pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8nlohmann10basic_jsonINS_3mapENS_6vectorES7_bxydS5_NS9_14adl_serializerEEEEEEEPT_SI_($__cc$i$i16) | 0, $__k) | 0) > 0) {
    $__result$1 = $__rt$031;
    $__rt$1$in = $__rt$031;
   } else {
    if ((__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc(__ZNSt3__29__launderIKNS_4pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8nlohmann10basic_jsonINS_3mapENS_6vectorES7_bxydS5_NS9_14adl_serializerEEEEEEEPT_SI_($__cc$i$i16) | 0, $__k) | 0) >= 0) break;
    $__result$1 = $__result$030;
    $__rt$1$in = $__rt$031 + 4 | 0;
   }
   $__rt$0 = HEAP32[$__rt$1$in >> 2] | 0;
   if (!$__rt$0) {
    $retval$0 = 0;
    break L1;
   } else {
    $__result$030 = $__result$1;
    $__rt$031 = $__rt$0;
   }
  }
  $call11 = __ZNKSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8nlohmann10basic_jsonINS_3mapENS_6vectorES7_bxydS5_NS8_14adl_serializerEEEEENS_19__map_value_compareIS7_SE_NS_4lessIvEELb1EEENS5_ISE_EEE13__lower_boundIA14_cEENS_21__tree_const_iteratorISE_PNS_11__tree_nodeISE_PvEElEERKT_SR_PNS_15__tree_end_nodeIPNS_16__tree_node_baseISP_EEEE($this, $__k, HEAP32[$__rt$031 >> 2] | 0, $__rt$031) | 0;
  $call14 = __ZNKSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8nlohmann10basic_jsonINS_3mapENS_6vectorES7_bxydS5_NS8_14adl_serializerEEEEENS_19__map_value_compareIS7_SE_NS_4lessIvEELb1EEENS5_ISE_EEE13__upper_boundIA14_cEENS_21__tree_const_iteratorISE_PNS_11__tree_nodeISE_PvEElEERKT_SR_PNS_15__tree_end_nodeIPNS_16__tree_node_baseISP_EEEE($this, $__k, HEAP32[$__rt$031 + 4 >> 2] | 0, $__result$030) | 0;
  if (($call11 | 0) == ($call14 | 0)) $retval$0 = 0; else {
   $$in$i$i = $call11;
   $__r$04$i$i = 0;
   while (1) {
    $inc$i$i = $__r$04$i$i + 1 | 0;
    $5 = HEAP32[$$in$i$i + 4 >> 2] | 0;
    if (!$5) {
     $__parent_$i47$i$i$i$i = $$in$i$i + 8 | 0;
     $7 = HEAP32[$__parent_$i47$i$i$i$i >> 2] | 0;
     if ((HEAP32[$7 >> 2] | 0) == ($$in$i$i | 0)) $retval$0$i$i$i$i = $7; else {
      $__parent_$i410$i$i$i$i = $__parent_$i47$i$i$i$i;
      do {
       $9 = HEAP32[$__parent_$i410$i$i$i$i >> 2] | 0;
       $__parent_$i410$i$i$i$i = $9 + 8 | 0;
       $10 = HEAP32[$__parent_$i410$i$i$i$i >> 2] | 0;
      } while ((HEAP32[$10 >> 2] | 0) != ($9 | 0));
      $retval$0$i$i$i$i = $10;
     }
    } else {
     $__x$addr$0$i$i$i$i$i = $5;
     while (1) {
      $6 = HEAP32[$__x$addr$0$i$i$i$i$i >> 2] | 0;
      if (!$6) break; else $__x$addr$0$i$i$i$i$i = $6;
     }
     $retval$0$i$i$i$i = $__x$addr$0$i$i$i$i$i;
    }
    if (($retval$0$i$i$i$i | 0) == ($call14 | 0)) {
     $retval$0 = $inc$i$i;
     break;
    } else {
     $$in$i$i = $retval$0$i$i$i$i;
     $__r$04$i$i = $inc$i$i;
    }
   }
  }
 } while (0);
 return $retval$0 | 0;
}

function __ZNKSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8nlohmann10basic_jsonINS_3mapENS_6vectorES7_bxydS5_NS8_14adl_serializerEEEEENS_19__map_value_compareIS7_SE_NS_4lessIvEELb1EEENS5_ISE_EEE13__count_multiIA13_cEEmRKT_($this, $__k) {
 $this = $this | 0;
 $__k = $__k | 0;
 var $$in$i$i = 0, $10 = 0, $5 = 0, $6 = 0, $7 = 0, $9 = 0, $__cc$i$i16 = 0, $__parent_$i410$i$i$i$i = 0, $__parent_$i47$i$i$i$i = 0, $__r$04$i$i = 0, $__result$030 = 0, $__result$1 = 0, $__rt$0 = 0, $__rt$028 = 0, $__rt$031 = 0, $__rt$1$in = 0, $__value_$i$i$i = 0, $__x$addr$0$i$i$i$i$i = 0, $call11 = 0, $call14 = 0, $inc$i$i = 0, $retval$0 = 0, $retval$0$i$i$i$i = 0;
 $__value_$i$i$i = $this + 4 | 0;
 $__rt$028 = HEAP32[$__value_$i$i$i >> 2] | 0;
 L1 : do if (!$__rt$028) $retval$0 = 0; else {
  $__result$030 = $__value_$i$i$i;
  $__rt$031 = $__rt$028;
  while (1) {
   $__cc$i$i16 = $__rt$031 + 16 | 0;
   if ((__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc(__ZNSt3__29__launderIKNS_4pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8nlohmann10basic_jsonINS_3mapENS_6vectorES7_bxydS5_NS9_14adl_serializerEEEEEEEPT_SI_($__cc$i$i16) | 0, $__k) | 0) > 0) {
    $__result$1 = $__rt$031;
    $__rt$1$in = $__rt$031;
   } else {
    if ((__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc(__ZNSt3__29__launderIKNS_4pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8nlohmann10basic_jsonINS_3mapENS_6vectorES7_bxydS5_NS9_14adl_serializerEEEEEEEPT_SI_($__cc$i$i16) | 0, $__k) | 0) >= 0) break;
    $__result$1 = $__result$030;
    $__rt$1$in = $__rt$031 + 4 | 0;
   }
   $__rt$0 = HEAP32[$__rt$1$in >> 2] | 0;
   if (!$__rt$0) {
    $retval$0 = 0;
    break L1;
   } else {
    $__result$030 = $__result$1;
    $__rt$031 = $__rt$0;
   }
  }
  $call11 = __ZNKSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8nlohmann10basic_jsonINS_3mapENS_6vectorES7_bxydS5_NS8_14adl_serializerEEEEENS_19__map_value_compareIS7_SE_NS_4lessIvEELb1EEENS5_ISE_EEE13__lower_boundIA13_cEENS_21__tree_const_iteratorISE_PNS_11__tree_nodeISE_PvEElEERKT_SR_PNS_15__tree_end_nodeIPNS_16__tree_node_baseISP_EEEE($this, $__k, HEAP32[$__rt$031 >> 2] | 0, $__rt$031) | 0;
  $call14 = __ZNKSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8nlohmann10basic_jsonINS_3mapENS_6vectorES7_bxydS5_NS8_14adl_serializerEEEEENS_19__map_value_compareIS7_SE_NS_4lessIvEELb1EEENS5_ISE_EEE13__upper_boundIA13_cEENS_21__tree_const_iteratorISE_PNS_11__tree_nodeISE_PvEElEERKT_SR_PNS_15__tree_end_nodeIPNS_16__tree_node_baseISP_EEEE($this, $__k, HEAP32[$__rt$031 + 4 >> 2] | 0, $__result$030) | 0;
  if (($call11 | 0) == ($call14 | 0)) $retval$0 = 0; else {
   $$in$i$i = $call11;
   $__r$04$i$i = 0;
   while (1) {
    $inc$i$i = $__r$04$i$i + 1 | 0;
    $5 = HEAP32[$$in$i$i + 4 >> 2] | 0;
    if (!$5) {
     $__parent_$i47$i$i$i$i = $$in$i$i + 8 | 0;
     $7 = HEAP32[$__parent_$i47$i$i$i$i >> 2] | 0;
     if ((HEAP32[$7 >> 2] | 0) == ($$in$i$i | 0)) $retval$0$i$i$i$i = $7; else {
      $__parent_$i410$i$i$i$i = $__parent_$i47$i$i$i$i;
      do {
       $9 = HEAP32[$__parent_$i410$i$i$i$i >> 2] | 0;
       $__parent_$i410$i$i$i$i = $9 + 8 | 0;
       $10 = HEAP32[$__parent_$i410$i$i$i$i >> 2] | 0;
      } while ((HEAP32[$10 >> 2] | 0) != ($9 | 0));
      $retval$0$i$i$i$i = $10;
     }
    } else {
     $__x$addr$0$i$i$i$i$i = $5;
     while (1) {
      $6 = HEAP32[$__x$addr$0$i$i$i$i$i >> 2] | 0;
      if (!$6) break; else $__x$addr$0$i$i$i$i$i = $6;
     }
     $retval$0$i$i$i$i = $__x$addr$0$i$i$i$i$i;
    }
    if (($retval$0$i$i$i$i | 0) == ($call14 | 0)) {
     $retval$0 = $inc$i$i;
     break;
    } else {
     $$in$i$i = $retval$0$i$i$i$i;
     $__r$04$i$i = $inc$i$i;
    }
   }
  }
 } while (0);
 return $retval$0 | 0;
}

function __ZNKSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8nlohmann10basic_jsonINS_3mapENS_6vectorES7_bxydS5_NS8_14adl_serializerEEEEENS_19__map_value_compareIS7_SE_NS_4lessIvEELb1EEENS5_ISE_EEE13__count_multiIA12_cEEmRKT_($this, $__k) {
 $this = $this | 0;
 $__k = $__k | 0;
 var $$in$i$i = 0, $10 = 0, $5 = 0, $6 = 0, $7 = 0, $9 = 0, $__cc$i$i16 = 0, $__parent_$i410$i$i$i$i = 0, $__parent_$i47$i$i$i$i = 0, $__r$04$i$i = 0, $__result$030 = 0, $__result$1 = 0, $__rt$0 = 0, $__rt$028 = 0, $__rt$031 = 0, $__rt$1$in = 0, $__value_$i$i$i = 0, $__x$addr$0$i$i$i$i$i = 0, $call11 = 0, $call14 = 0, $inc$i$i = 0, $retval$0 = 0, $retval$0$i$i$i$i = 0;
 $__value_$i$i$i = $this + 4 | 0;
 $__rt$028 = HEAP32[$__value_$i$i$i >> 2] | 0;
 L1 : do if (!$__rt$028) $retval$0 = 0; else {
  $__result$030 = $__value_$i$i$i;
  $__rt$031 = $__rt$028;
  while (1) {
   $__cc$i$i16 = $__rt$031 + 16 | 0;
   if ((__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc(__ZNSt3__29__launderIKNS_4pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8nlohmann10basic_jsonINS_3mapENS_6vectorES7_bxydS5_NS9_14adl_serializerEEEEEEEPT_SI_($__cc$i$i16) | 0, $__k) | 0) > 0) {
    $__result$1 = $__rt$031;
    $__rt$1$in = $__rt$031;
   } else {
    if ((__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc(__ZNSt3__29__launderIKNS_4pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8nlohmann10basic_jsonINS_3mapENS_6vectorES7_bxydS5_NS9_14adl_serializerEEEEEEEPT_SI_($__cc$i$i16) | 0, $__k) | 0) >= 0) break;
    $__result$1 = $__result$030;
    $__rt$1$in = $__rt$031 + 4 | 0;
   }
   $__rt$0 = HEAP32[$__rt$1$in >> 2] | 0;
   if (!$__rt$0) {
    $retval$0 = 0;
    break L1;
   } else {
    $__result$030 = $__result$1;
    $__rt$031 = $__rt$0;
   }
  }
  $call11 = __ZNKSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8nlohmann10basic_jsonINS_3mapENS_6vectorES7_bxydS5_NS8_14adl_serializerEEEEENS_19__map_value_compareIS7_SE_NS_4lessIvEELb1EEENS5_ISE_EEE13__lower_boundIA12_cEENS_21__tree_const_iteratorISE_PNS_11__tree_nodeISE_PvEElEERKT_SR_PNS_15__tree_end_nodeIPNS_16__tree_node_baseISP_EEEE($this, $__k, HEAP32[$__rt$031 >> 2] | 0, $__rt$031) | 0;
  $call14 = __ZNKSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8nlohmann10basic_jsonINS_3mapENS_6vectorES7_bxydS5_NS8_14adl_serializerEEEEENS_19__map_value_compareIS7_SE_NS_4lessIvEELb1EEENS5_ISE_EEE13__upper_boundIA12_cEENS_21__tree_const_iteratorISE_PNS_11__tree_nodeISE_PvEElEERKT_SR_PNS_15__tree_end_nodeIPNS_16__tree_node_baseISP_EEEE($this, $__k, HEAP32[$__rt$031 + 4 >> 2] | 0, $__result$030) | 0;
  if (($call11 | 0) == ($call14 | 0)) $retval$0 = 0; else {
   $$in$i$i = $call11;
   $__r$04$i$i = 0;
   while (1) {
    $inc$i$i = $__r$04$i$i + 1 | 0;
    $5 = HEAP32[$$in$i$i + 4 >> 2] | 0;
    if (!$5) {
     $__parent_$i47$i$i$i$i = $$in$i$i + 8 | 0;
     $7 = HEAP32[$__parent_$i47$i$i$i$i >> 2] | 0;
     if ((HEAP32[$7 >> 2] | 0) == ($$in$i$i | 0)) $retval$0$i$i$i$i = $7; else {
      $__parent_$i410$i$i$i$i = $__parent_$i47$i$i$i$i;
      do {
       $9 = HEAP32[$__parent_$i410$i$i$i$i >> 2] | 0;
       $__parent_$i410$i$i$i$i = $9 + 8 | 0;
       $10 = HEAP32[$__parent_$i410$i$i$i$i >> 2] | 0;
      } while ((HEAP32[$10 >> 2] | 0) != ($9 | 0));
      $retval$0$i$i$i$i = $10;
     }
    } else {
     $__x$addr$0$i$i$i$i$i = $5;
     while (1) {
      $6 = HEAP32[$__x$addr$0$i$i$i$i$i >> 2] | 0;
      if (!$6) break; else $__x$addr$0$i$i$i$i$i = $6;
     }
     $retval$0$i$i$i$i = $__x$addr$0$i$i$i$i$i;
    }
    if (($retval$0$i$i$i$i | 0) == ($call14 | 0)) {
     $retval$0 = $inc$i$i;
     break;
    } else {
     $$in$i$i = $retval$0$i$i$i$i;
     $__r$04$i$i = $inc$i$i;
    }
   }
  }
 } while (0);
 return $retval$0 | 0;
}

function __ZNKSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8nlohmann10basic_jsonINS_3mapENS_6vectorES7_bxydS5_NS8_14adl_serializerEEEEENS_19__map_value_compareIS7_SE_NS_4lessIvEELb1EEENS5_ISE_EEE13__count_multiIA11_cEEmRKT_($this, $__k) {
 $this = $this | 0;
 $__k = $__k | 0;
 var $$in$i$i = 0, $10 = 0, $5 = 0, $6 = 0, $7 = 0, $9 = 0, $__cc$i$i16 = 0, $__parent_$i410$i$i$i$i = 0, $__parent_$i47$i$i$i$i = 0, $__r$04$i$i = 0, $__result$030 = 0, $__result$1 = 0, $__rt$0 = 0, $__rt$028 = 0, $__rt$031 = 0, $__rt$1$in = 0, $__value_$i$i$i = 0, $__x$addr$0$i$i$i$i$i = 0, $call11 = 0, $call14 = 0, $inc$i$i = 0, $retval$0 = 0, $retval$0$i$i$i$i = 0;
 $__value_$i$i$i = $this + 4 | 0;
 $__rt$028 = HEAP32[$__value_$i$i$i >> 2] | 0;
 L1 : do if (!$__rt$028) $retval$0 = 0; else {
  $__result$030 = $__value_$i$i$i;
  $__rt$031 = $__rt$028;
  while (1) {
   $__cc$i$i16 = $__rt$031 + 16 | 0;
   if ((__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc(__ZNSt3__29__launderIKNS_4pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8nlohmann10basic_jsonINS_3mapENS_6vectorES7_bxydS5_NS9_14adl_serializerEEEEEEEPT_SI_($__cc$i$i16) | 0, $__k) | 0) > 0) {
    $__result$1 = $__rt$031;
    $__rt$1$in = $__rt$031;
   } else {
    if ((__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc(__ZNSt3__29__launderIKNS_4pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8nlohmann10basic_jsonINS_3mapENS_6vectorES7_bxydS5_NS9_14adl_serializerEEEEEEEPT_SI_($__cc$i$i16) | 0, $__k) | 0) >= 0) break;
    $__result$1 = $__result$030;
    $__rt$1$in = $__rt$031 + 4 | 0;
   }
   $__rt$0 = HEAP32[$__rt$1$in >> 2] | 0;
   if (!$__rt$0) {
    $retval$0 = 0;
    break L1;
   } else {
    $__result$030 = $__result$1;
    $__rt$031 = $__rt$0;
   }
  }
  $call11 = __ZNKSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8nlohmann10basic_jsonINS_3mapENS_6vectorES7_bxydS5_NS8_14adl_serializerEEEEENS_19__map_value_compareIS7_SE_NS_4lessIvEELb1EEENS5_ISE_EEE13__lower_boundIA11_cEENS_21__tree_const_iteratorISE_PNS_11__tree_nodeISE_PvEElEERKT_SR_PNS_15__tree_end_nodeIPNS_16__tree_node_baseISP_EEEE($this, $__k, HEAP32[$__rt$031 >> 2] | 0, $__rt$031) | 0;
  $call14 = __ZNKSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8nlohmann10basic_jsonINS_3mapENS_6vectorES7_bxydS5_NS8_14adl_serializerEEEEENS_19__map_value_compareIS7_SE_NS_4lessIvEELb1EEENS5_ISE_EEE13__upper_boundIA11_cEENS_21__tree_const_iteratorISE_PNS_11__tree_nodeISE_PvEElEERKT_SR_PNS_15__tree_end_nodeIPNS_16__tree_node_baseISP_EEEE($this, $__k, HEAP32[$__rt$031 + 4 >> 2] | 0, $__result$030) | 0;
  if (($call11 | 0) == ($call14 | 0)) $retval$0 = 0; else {
   $$in$i$i = $call11;
   $__r$04$i$i = 0;
   while (1) {
    $inc$i$i = $__r$04$i$i + 1 | 0;
    $5 = HEAP32[$$in$i$i + 4 >> 2] | 0;
    if (!$5) {
     $__parent_$i47$i$i$i$i = $$in$i$i + 8 | 0;
     $7 = HEAP32[$__parent_$i47$i$i$i$i >> 2] | 0;
     if ((HEAP32[$7 >> 2] | 0) == ($$in$i$i | 0)) $retval$0$i$i$i$i = $7; else {
      $__parent_$i410$i$i$i$i = $__parent_$i47$i$i$i$i;
      do {
       $9 = HEAP32[$__parent_$i410$i$i$i$i >> 2] | 0;
       $__parent_$i410$i$i$i$i = $9 + 8 | 0;
       $10 = HEAP32[$__parent_$i410$i$i$i$i >> 2] | 0;
      } while ((HEAP32[$10 >> 2] | 0) != ($9 | 0));
      $retval$0$i$i$i$i = $10;
     }
    } else {
     $__x$addr$0$i$i$i$i$i = $5;
     while (1) {
      $6 = HEAP32[$__x$addr$0$i$i$i$i$i >> 2] | 0;
      if (!$6) break; else $__x$addr$0$i$i$i$i$i = $6;
     }
     $retval$0$i$i$i$i = $__x$addr$0$i$i$i$i$i;
    }
    if (($retval$0$i$i$i$i | 0) == ($call14 | 0)) {
     $retval$0 = $inc$i$i;
     break;
    } else {
     $$in$i$i = $retval$0$i$i$i$i;
     $__r$04$i$i = $inc$i$i;
    }
   }
  }
 } while (0);
 return $retval$0 | 0;
}

function __ZNKSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8nlohmann10basic_jsonINS_3mapENS_6vectorES7_bxydS5_NS8_14adl_serializerEEEEENS_19__map_value_compareIS7_SE_NS_4lessIvEELb1EEENS5_ISE_EEE13__count_multiIA10_cEEmRKT_($this, $__k) {
 $this = $this | 0;
 $__k = $__k | 0;
 var $$in$i$i = 0, $10 = 0, $5 = 0, $6 = 0, $7 = 0, $9 = 0, $__cc$i$i16 = 0, $__parent_$i410$i$i$i$i = 0, $__parent_$i47$i$i$i$i = 0, $__r$04$i$i = 0, $__result$030 = 0, $__result$1 = 0, $__rt$0 = 0, $__rt$028 = 0, $__rt$031 = 0, $__rt$1$in = 0, $__value_$i$i$i = 0, $__x$addr$0$i$i$i$i$i = 0, $call11 = 0, $call14 = 0, $inc$i$i = 0, $retval$0 = 0, $retval$0$i$i$i$i = 0;
 $__value_$i$i$i = $this + 4 | 0;
 $__rt$028 = HEAP32[$__value_$i$i$i >> 2] | 0;
 L1 : do if (!$__rt$028) $retval$0 = 0; else {
  $__result$030 = $__value_$i$i$i;
  $__rt$031 = $__rt$028;
  while (1) {
   $__cc$i$i16 = $__rt$031 + 16 | 0;
   if ((__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc(__ZNSt3__29__launderIKNS_4pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8nlohmann10basic_jsonINS_3mapENS_6vectorES7_bxydS5_NS9_14adl_serializerEEEEEEEPT_SI_($__cc$i$i16) | 0, $__k) | 0) > 0) {
    $__result$1 = $__rt$031;
    $__rt$1$in = $__rt$031;
   } else {
    if ((__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc(__ZNSt3__29__launderIKNS_4pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8nlohmann10basic_jsonINS_3mapENS_6vectorES7_bxydS5_NS9_14adl_serializerEEEEEEEPT_SI_($__cc$i$i16) | 0, $__k) | 0) >= 0) break;
    $__result$1 = $__result$030;
    $__rt$1$in = $__rt$031 + 4 | 0;
   }
   $__rt$0 = HEAP32[$__rt$1$in >> 2] | 0;
   if (!$__rt$0) {
    $retval$0 = 0;
    break L1;
   } else {
    $__result$030 = $__result$1;
    $__rt$031 = $__rt$0;
   }
  }
  $call11 = __ZNKSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8nlohmann10basic_jsonINS_3mapENS_6vectorES7_bxydS5_NS8_14adl_serializerEEEEENS_19__map_value_compareIS7_SE_NS_4lessIvEELb1EEENS5_ISE_EEE13__lower_boundIA10_cEENS_21__tree_const_iteratorISE_PNS_11__tree_nodeISE_PvEElEERKT_SR_PNS_15__tree_end_nodeIPNS_16__tree_node_baseISP_EEEE($this, $__k, HEAP32[$__rt$031 >> 2] | 0, $__rt$031) | 0;
  $call14 = __ZNKSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8nlohmann10basic_jsonINS_3mapENS_6vectorES7_bxydS5_NS8_14adl_serializerEEEEENS_19__map_value_compareIS7_SE_NS_4lessIvEELb1EEENS5_ISE_EEE13__upper_boundIA10_cEENS_21__tree_const_iteratorISE_PNS_11__tree_nodeISE_PvEElEERKT_SR_PNS_15__tree_end_nodeIPNS_16__tree_node_baseISP_EEEE($this, $__k, HEAP32[$__rt$031 + 4 >> 2] | 0, $__result$030) | 0;
  if (($call11 | 0) == ($call14 | 0)) $retval$0 = 0; else {
   $$in$i$i = $call11;
   $__r$04$i$i = 0;
   while (1) {
    $inc$i$i = $__r$04$i$i + 1 | 0;
    $5 = HEAP32[$$in$i$i + 4 >> 2] | 0;
    if (!$5) {
     $__parent_$i47$i$i$i$i = $$in$i$i + 8 | 0;
     $7 = HEAP32[$__parent_$i47$i$i$i$i >> 2] | 0;
     if ((HEAP32[$7 >> 2] | 0) == ($$in$i$i | 0)) $retval$0$i$i$i$i = $7; else {
      $__parent_$i410$i$i$i$i = $__parent_$i47$i$i$i$i;
      do {
       $9 = HEAP32[$__parent_$i410$i$i$i$i >> 2] | 0;
       $__parent_$i410$i$i$i$i = $9 + 8 | 0;
       $10 = HEAP32[$__parent_$i410$i$i$i$i >> 2] | 0;
      } while ((HEAP32[$10 >> 2] | 0) != ($9 | 0));
      $retval$0$i$i$i$i = $10;
     }
    } else {
     $__x$addr$0$i$i$i$i$i = $5;
     while (1) {
      $6 = HEAP32[$__x$addr$0$i$i$i$i$i >> 2] | 0;
      if (!$6) break; else $__x$addr$0$i$i$i$i$i = $6;
     }
     $retval$0$i$i$i$i = $__x$addr$0$i$i$i$i$i;
    }
    if (($retval$0$i$i$i$i | 0) == ($call14 | 0)) {
     $retval$0 = $inc$i$i;
     break;
    } else {
     $$in$i$i = $retval$0$i$i$i$i;
     $__r$04$i$i = $inc$i$i;
    }
   }
  }
 } while (0);
 return $retval$0 | 0;
}

function __ZNKSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8nlohmann10basic_jsonINS_3mapENS_6vectorES7_bxydS5_NS8_14adl_serializerEEEEENS_19__map_value_compareIS7_SE_NS_4lessIvEELb1EEENS5_ISE_EEE13__count_multiIA9_cEEmRKT_($this, $__k) {
 $this = $this | 0;
 $__k = $__k | 0;
 var $$in$i$i = 0, $10 = 0, $5 = 0, $6 = 0, $7 = 0, $9 = 0, $__cc$i$i16 = 0, $__parent_$i410$i$i$i$i = 0, $__parent_$i47$i$i$i$i = 0, $__r$04$i$i = 0, $__result$030 = 0, $__result$1 = 0, $__rt$0 = 0, $__rt$028 = 0, $__rt$031 = 0, $__rt$1$in = 0, $__value_$i$i$i = 0, $__x$addr$0$i$i$i$i$i = 0, $call11 = 0, $call14 = 0, $inc$i$i = 0, $retval$0 = 0, $retval$0$i$i$i$i = 0;
 $__value_$i$i$i = $this + 4 | 0;
 $__rt$028 = HEAP32[$__value_$i$i$i >> 2] | 0;
 L1 : do if (!$__rt$028) $retval$0 = 0; else {
  $__result$030 = $__value_$i$i$i;
  $__rt$031 = $__rt$028;
  while (1) {
   $__cc$i$i16 = $__rt$031 + 16 | 0;
   if ((__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc(__ZNSt3__29__launderIKNS_4pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8nlohmann10basic_jsonINS_3mapENS_6vectorES7_bxydS5_NS9_14adl_serializerEEEEEEEPT_SI_($__cc$i$i16) | 0, $__k) | 0) > 0) {
    $__result$1 = $__rt$031;
    $__rt$1$in = $__rt$031;
   } else {
    if ((__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc(__ZNSt3__29__launderIKNS_4pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8nlohmann10basic_jsonINS_3mapENS_6vectorES7_bxydS5_NS9_14adl_serializerEEEEEEEPT_SI_($__cc$i$i16) | 0, $__k) | 0) >= 0) break;
    $__result$1 = $__result$030;
    $__rt$1$in = $__rt$031 + 4 | 0;
   }
   $__rt$0 = HEAP32[$__rt$1$in >> 2] | 0;
   if (!$__rt$0) {
    $retval$0 = 0;
    break L1;
   } else {
    $__result$030 = $__result$1;
    $__rt$031 = $__rt$0;
   }
  }
  $call11 = __ZNKSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8nlohmann10basic_jsonINS_3mapENS_6vectorES7_bxydS5_NS8_14adl_serializerEEEEENS_19__map_value_compareIS7_SE_NS_4lessIvEELb1EEENS5_ISE_EEE13__lower_boundIA9_cEENS_21__tree_const_iteratorISE_PNS_11__tree_nodeISE_PvEElEERKT_SR_PNS_15__tree_end_nodeIPNS_16__tree_node_baseISP_EEEE($this, $__k, HEAP32[$__rt$031 >> 2] | 0, $__rt$031) | 0;
  $call14 = __ZNKSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8nlohmann10basic_jsonINS_3mapENS_6vectorES7_bxydS5_NS8_14adl_serializerEEEEENS_19__map_value_compareIS7_SE_NS_4lessIvEELb1EEENS5_ISE_EEE13__upper_boundIA9_cEENS_21__tree_const_iteratorISE_PNS_11__tree_nodeISE_PvEElEERKT_SR_PNS_15__tree_end_nodeIPNS_16__tree_node_baseISP_EEEE($this, $__k, HEAP32[$__rt$031 + 4 >> 2] | 0, $__result$030) | 0;
  if (($call11 | 0) == ($call14 | 0)) $retval$0 = 0; else {
   $$in$i$i = $call11;
   $__r$04$i$i = 0;
   while (1) {
    $inc$i$i = $__r$04$i$i + 1 | 0;
    $5 = HEAP32[$$in$i$i + 4 >> 2] | 0;
    if (!$5) {
     $__parent_$i47$i$i$i$i = $$in$i$i + 8 | 0;
     $7 = HEAP32[$__parent_$i47$i$i$i$i >> 2] | 0;
     if ((HEAP32[$7 >> 2] | 0) == ($$in$i$i | 0)) $retval$0$i$i$i$i = $7; else {
      $__parent_$i410$i$i$i$i = $__parent_$i47$i$i$i$i;
      do {
       $9 = HEAP32[$__parent_$i410$i$i$i$i >> 2] | 0;
       $__parent_$i410$i$i$i$i = $9 + 8 | 0;
       $10 = HEAP32[$__parent_$i410$i$i$i$i >> 2] | 0;
      } while ((HEAP32[$10 >> 2] | 0) != ($9 | 0));
      $retval$0$i$i$i$i = $10;
     }
    } else {
     $__x$addr$0$i$i$i$i$i = $5;
     while (1) {
      $6 = HEAP32[$__x$addr$0$i$i$i$i$i >> 2] | 0;
      if (!$6) break; else $__x$addr$0$i$i$i$i$i = $6;
     }
     $retval$0$i$i$i$i = $__x$addr$0$i$i$i$i$i;
    }
    if (($retval$0$i$i$i$i | 0) == ($call14 | 0)) {
     $retval$0 = $inc$i$i;
     break;
    } else {
     $$in$i$i = $retval$0$i$i$i$i;
     $__r$04$i$i = $inc$i$i;
    }
   }
  }
 } while (0);
 return $retval$0 | 0;
}

function __ZNKSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8nlohmann10basic_jsonINS_3mapENS_6vectorES7_bxydS5_NS8_14adl_serializerEEEEENS_19__map_value_compareIS7_SE_NS_4lessIvEELb1EEENS5_ISE_EEE13__count_multiIA8_cEEmRKT_($this, $__k) {
 $this = $this | 0;
 $__k = $__k | 0;
 var $$in$i$i = 0, $10 = 0, $5 = 0, $6 = 0, $7 = 0, $9 = 0, $__cc$i$i16 = 0, $__parent_$i410$i$i$i$i = 0, $__parent_$i47$i$i$i$i = 0, $__r$04$i$i = 0, $__result$030 = 0, $__result$1 = 0, $__rt$0 = 0, $__rt$028 = 0, $__rt$031 = 0, $__rt$1$in = 0, $__value_$i$i$i = 0, $__x$addr$0$i$i$i$i$i = 0, $call11 = 0, $call14 = 0, $inc$i$i = 0, $retval$0 = 0, $retval$0$i$i$i$i = 0;
 $__value_$i$i$i = $this + 4 | 0;
 $__rt$028 = HEAP32[$__value_$i$i$i >> 2] | 0;
 L1 : do if (!$__rt$028) $retval$0 = 0; else {
  $__result$030 = $__value_$i$i$i;
  $__rt$031 = $__rt$028;
  while (1) {
   $__cc$i$i16 = $__rt$031 + 16 | 0;
   if ((__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc(__ZNSt3__29__launderIKNS_4pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8nlohmann10basic_jsonINS_3mapENS_6vectorES7_bxydS5_NS9_14adl_serializerEEEEEEEPT_SI_($__cc$i$i16) | 0, $__k) | 0) > 0) {
    $__result$1 = $__rt$031;
    $__rt$1$in = $__rt$031;
   } else {
    if ((__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc(__ZNSt3__29__launderIKNS_4pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8nlohmann10basic_jsonINS_3mapENS_6vectorES7_bxydS5_NS9_14adl_serializerEEEEEEEPT_SI_($__cc$i$i16) | 0, $__k) | 0) >= 0) break;
    $__result$1 = $__result$030;
    $__rt$1$in = $__rt$031 + 4 | 0;
   }
   $__rt$0 = HEAP32[$__rt$1$in >> 2] | 0;
   if (!$__rt$0) {
    $retval$0 = 0;
    break L1;
   } else {
    $__result$030 = $__result$1;
    $__rt$031 = $__rt$0;
   }
  }
  $call11 = __ZNKSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8nlohmann10basic_jsonINS_3mapENS_6vectorES7_bxydS5_NS8_14adl_serializerEEEEENS_19__map_value_compareIS7_SE_NS_4lessIvEELb1EEENS5_ISE_EEE13__lower_boundIA8_cEENS_21__tree_const_iteratorISE_PNS_11__tree_nodeISE_PvEElEERKT_SR_PNS_15__tree_end_nodeIPNS_16__tree_node_baseISP_EEEE($this, $__k, HEAP32[$__rt$031 >> 2] | 0, $__rt$031) | 0;
  $call14 = __ZNKSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8nlohmann10basic_jsonINS_3mapENS_6vectorES7_bxydS5_NS8_14adl_serializerEEEEENS_19__map_value_compareIS7_SE_NS_4lessIvEELb1EEENS5_ISE_EEE13__upper_boundIA8_cEENS_21__tree_const_iteratorISE_PNS_11__tree_nodeISE_PvEElEERKT_SR_PNS_15__tree_end_nodeIPNS_16__tree_node_baseISP_EEEE($this, $__k, HEAP32[$__rt$031 + 4 >> 2] | 0, $__result$030) | 0;
  if (($call11 | 0) == ($call14 | 0)) $retval$0 = 0; else {
   $$in$i$i = $call11;
   $__r$04$i$i = 0;
   while (1) {
    $inc$i$i = $__r$04$i$i + 1 | 0;
    $5 = HEAP32[$$in$i$i + 4 >> 2] | 0;
    if (!$5) {
     $__parent_$i47$i$i$i$i = $$in$i$i + 8 | 0;
     $7 = HEAP32[$__parent_$i47$i$i$i$i >> 2] | 0;
     if ((HEAP32[$7 >> 2] | 0) == ($$in$i$i | 0)) $retval$0$i$i$i$i = $7; else {
      $__parent_$i410$i$i$i$i = $__parent_$i47$i$i$i$i;
      do {
       $9 = HEAP32[$__parent_$i410$i$i$i$i >> 2] | 0;
       $__parent_$i410$i$i$i$i = $9 + 8 | 0;
       $10 = HEAP32[$__parent_$i410$i$i$i$i >> 2] | 0;
      } while ((HEAP32[$10 >> 2] | 0) != ($9 | 0));
      $retval$0$i$i$i$i = $10;
     }
    } else {
     $__x$addr$0$i$i$i$i$i = $5;
     while (1) {
      $6 = HEAP32[$__x$addr$0$i$i$i$i$i >> 2] | 0;
      if (!$6) break; else $__x$addr$0$i$i$i$i$i = $6;
     }
     $retval$0$i$i$i$i = $__x$addr$0$i$i$i$i$i;
    }
    if (($retval$0$i$i$i$i | 0) == ($call14 | 0)) {
     $retval$0 = $inc$i$i;
     break;
    } else {
     $$in$i$i = $retval$0$i$i$i$i;
     $__r$04$i$i = $inc$i$i;
    }
   }
  }
 } while (0);
 return $retval$0 | 0;
}

function __ZNKSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8nlohmann10basic_jsonINS_3mapENS_6vectorES7_bxydS5_NS8_14adl_serializerEEEEENS_19__map_value_compareIS7_SE_NS_4lessIvEELb1EEENS5_ISE_EEE13__count_multiIA7_cEEmRKT_($this, $__k) {
 $this = $this | 0;
 $__k = $__k | 0;
 var $$in$i$i = 0, $10 = 0, $5 = 0, $6 = 0, $7 = 0, $9 = 0, $__cc$i$i16 = 0, $__parent_$i410$i$i$i$i = 0, $__parent_$i47$i$i$i$i = 0, $__r$04$i$i = 0, $__result$030 = 0, $__result$1 = 0, $__rt$0 = 0, $__rt$028 = 0, $__rt$031 = 0, $__rt$1$in = 0, $__value_$i$i$i = 0, $__x$addr$0$i$i$i$i$i = 0, $call11 = 0, $call14 = 0, $inc$i$i = 0, $retval$0 = 0, $retval$0$i$i$i$i = 0;
 $__value_$i$i$i = $this + 4 | 0;
 $__rt$028 = HEAP32[$__value_$i$i$i >> 2] | 0;
 L1 : do if (!$__rt$028) $retval$0 = 0; else {
  $__result$030 = $__value_$i$i$i;
  $__rt$031 = $__rt$028;
  while (1) {
   $__cc$i$i16 = $__rt$031 + 16 | 0;
   if ((__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc(__ZNSt3__29__launderIKNS_4pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8nlohmann10basic_jsonINS_3mapENS_6vectorES7_bxydS5_NS9_14adl_serializerEEEEEEEPT_SI_($__cc$i$i16) | 0, $__k) | 0) > 0) {
    $__result$1 = $__rt$031;
    $__rt$1$in = $__rt$031;
   } else {
    if ((__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc(__ZNSt3__29__launderIKNS_4pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8nlohmann10basic_jsonINS_3mapENS_6vectorES7_bxydS5_NS9_14adl_serializerEEEEEEEPT_SI_($__cc$i$i16) | 0, $__k) | 0) >= 0) break;
    $__result$1 = $__result$030;
    $__rt$1$in = $__rt$031 + 4 | 0;
   }
   $__rt$0 = HEAP32[$__rt$1$in >> 2] | 0;
   if (!$__rt$0) {
    $retval$0 = 0;
    break L1;
   } else {
    $__result$030 = $__result$1;
    $__rt$031 = $__rt$0;
   }
  }
  $call11 = __ZNKSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8nlohmann10basic_jsonINS_3mapENS_6vectorES7_bxydS5_NS8_14adl_serializerEEEEENS_19__map_value_compareIS7_SE_NS_4lessIvEELb1EEENS5_ISE_EEE13__lower_boundIA7_cEENS_21__tree_const_iteratorISE_PNS_11__tree_nodeISE_PvEElEERKT_SR_PNS_15__tree_end_nodeIPNS_16__tree_node_baseISP_EEEE($this, $__k, HEAP32[$__rt$031 >> 2] | 0, $__rt$031) | 0;
  $call14 = __ZNKSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8nlohmann10basic_jsonINS_3mapENS_6vectorES7_bxydS5_NS8_14adl_serializerEEEEENS_19__map_value_compareIS7_SE_NS_4lessIvEELb1EEENS5_ISE_EEE13__upper_boundIA7_cEENS_21__tree_const_iteratorISE_PNS_11__tree_nodeISE_PvEElEERKT_SR_PNS_15__tree_end_nodeIPNS_16__tree_node_baseISP_EEEE($this, $__k, HEAP32[$__rt$031 + 4 >> 2] | 0, $__result$030) | 0;
  if (($call11 | 0) == ($call14 | 0)) $retval$0 = 0; else {
   $$in$i$i = $call11;
   $__r$04$i$i = 0;
   while (1) {
    $inc$i$i = $__r$04$i$i + 1 | 0;
    $5 = HEAP32[$$in$i$i + 4 >> 2] | 0;
    if (!$5) {
     $__parent_$i47$i$i$i$i = $$in$i$i + 8 | 0;
     $7 = HEAP32[$__parent_$i47$i$i$i$i >> 2] | 0;
     if ((HEAP32[$7 >> 2] | 0) == ($$in$i$i | 0)) $retval$0$i$i$i$i = $7; else {
      $__parent_$i410$i$i$i$i = $__parent_$i47$i$i$i$i;
      do {
       $9 = HEAP32[$__parent_$i410$i$i$i$i >> 2] | 0;
       $__parent_$i410$i$i$i$i = $9 + 8 | 0;
       $10 = HEAP32[$__parent_$i410$i$i$i$i >> 2] | 0;
      } while ((HEAP32[$10 >> 2] | 0) != ($9 | 0));
      $retval$0$i$i$i$i = $10;
     }
    } else {
     $__x$addr$0$i$i$i$i$i = $5;
     while (1) {
      $6 = HEAP32[$__x$addr$0$i$i$i$i$i >> 2] | 0;
      if (!$6) break; else $__x$addr$0$i$i$i$i$i = $6;
     }
     $retval$0$i$i$i$i = $__x$addr$0$i$i$i$i$i;
    }
    if (($retval$0$i$i$i$i | 0) == ($call14 | 0)) {
     $retval$0 = $inc$i$i;
     break;
    } else {
     $$in$i$i = $retval$0$i$i$i$i;
     $__r$04$i$i = $inc$i$i;
    }
   }
  }
 } while (0);
 return $retval$0 | 0;
}

function __ZNKSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8nlohmann10basic_jsonINS_3mapENS_6vectorES7_bxydS5_NS8_14adl_serializerEEEEENS_19__map_value_compareIS7_SE_NS_4lessIvEELb1EEENS5_ISE_EEE13__count_multiIA6_cEEmRKT_($this, $__k) {
 $this = $this | 0;
 $__k = $__k | 0;
 var $$in$i$i = 0, $10 = 0, $5 = 0, $6 = 0, $7 = 0, $9 = 0, $__cc$i$i16 = 0, $__parent_$i410$i$i$i$i = 0, $__parent_$i47$i$i$i$i = 0, $__r$04$i$i = 0, $__result$030 = 0, $__result$1 = 0, $__rt$0 = 0, $__rt$028 = 0, $__rt$031 = 0, $__rt$1$in = 0, $__value_$i$i$i = 0, $__x$addr$0$i$i$i$i$i = 0, $call11 = 0, $call14 = 0, $inc$i$i = 0, $retval$0 = 0, $retval$0$i$i$i$i = 0;
 $__value_$i$i$i = $this + 4 | 0;
 $__rt$028 = HEAP32[$__value_$i$i$i >> 2] | 0;
 L1 : do if (!$__rt$028) $retval$0 = 0; else {
  $__result$030 = $__value_$i$i$i;
  $__rt$031 = $__rt$028;
  while (1) {
   $__cc$i$i16 = $__rt$031 + 16 | 0;
   if ((__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc(__ZNSt3__29__launderIKNS_4pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8nlohmann10basic_jsonINS_3mapENS_6vectorES7_bxydS5_NS9_14adl_serializerEEEEEEEPT_SI_($__cc$i$i16) | 0, $__k) | 0) > 0) {
    $__result$1 = $__rt$031;
    $__rt$1$in = $__rt$031;
   } else {
    if ((__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc(__ZNSt3__29__launderIKNS_4pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8nlohmann10basic_jsonINS_3mapENS_6vectorES7_bxydS5_NS9_14adl_serializerEEEEEEEPT_SI_($__cc$i$i16) | 0, $__k) | 0) >= 0) break;
    $__result$1 = $__result$030;
    $__rt$1$in = $__rt$031 + 4 | 0;
   }
   $__rt$0 = HEAP32[$__rt$1$in >> 2] | 0;
   if (!$__rt$0) {
    $retval$0 = 0;
    break L1;
   } else {
    $__result$030 = $__result$1;
    $__rt$031 = $__rt$0;
   }
  }
  $call11 = __ZNKSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8nlohmann10basic_jsonINS_3mapENS_6vectorES7_bxydS5_NS8_14adl_serializerEEEEENS_19__map_value_compareIS7_SE_NS_4lessIvEELb1EEENS5_ISE_EEE13__lower_boundIA6_cEENS_21__tree_const_iteratorISE_PNS_11__tree_nodeISE_PvEElEERKT_SR_PNS_15__tree_end_nodeIPNS_16__tree_node_baseISP_EEEE($this, $__k, HEAP32[$__rt$031 >> 2] | 0, $__rt$031) | 0;
  $call14 = __ZNKSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8nlohmann10basic_jsonINS_3mapENS_6vectorES7_bxydS5_NS8_14adl_serializerEEEEENS_19__map_value_compareIS7_SE_NS_4lessIvEELb1EEENS5_ISE_EEE13__upper_boundIA6_cEENS_21__tree_const_iteratorISE_PNS_11__tree_nodeISE_PvEElEERKT_SR_PNS_15__tree_end_nodeIPNS_16__tree_node_baseISP_EEEE($this, $__k, HEAP32[$__rt$031 + 4 >> 2] | 0, $__result$030) | 0;
  if (($call11 | 0) == ($call14 | 0)) $retval$0 = 0; else {
   $$in$i$i = $call11;
   $__r$04$i$i = 0;
   while (1) {
    $inc$i$i = $__r$04$i$i + 1 | 0;
    $5 = HEAP32[$$in$i$i + 4 >> 2] | 0;
    if (!$5) {
     $__parent_$i47$i$i$i$i = $$in$i$i + 8 | 0;
     $7 = HEAP32[$__parent_$i47$i$i$i$i >> 2] | 0;
     if ((HEAP32[$7 >> 2] | 0) == ($$in$i$i | 0)) $retval$0$i$i$i$i = $7; else {
      $__parent_$i410$i$i$i$i = $__parent_$i47$i$i$i$i;
      do {
       $9 = HEAP32[$__parent_$i410$i$i$i$i >> 2] | 0;
       $__parent_$i410$i$i$i$i = $9 + 8 | 0;
       $10 = HEAP32[$__parent_$i410$i$i$i$i >> 2] | 0;
      } while ((HEAP32[$10 >> 2] | 0) != ($9 | 0));
      $retval$0$i$i$i$i = $10;
     }
    } else {
     $__x$addr$0$i$i$i$i$i = $5;
     while (1) {
      $6 = HEAP32[$__x$addr$0$i$i$i$i$i >> 2] | 0;
      if (!$6) break; else $__x$addr$0$i$i$i$i$i = $6;
     }
     $retval$0$i$i$i$i = $__x$addr$0$i$i$i$i$i;
    }
    if (($retval$0$i$i$i$i | 0) == ($call14 | 0)) {
     $retval$0 = $inc$i$i;
     break;
    } else {
     $$in$i$i = $retval$0$i$i$i$i;
     $__r$04$i$i = $inc$i$i;
    }
   }
  }
 } while (0);
 return $retval$0 | 0;
}

function __ZNKSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8nlohmann10basic_jsonINS_3mapENS_6vectorES7_bxydS5_NS8_14adl_serializerEEEEENS_19__map_value_compareIS7_SE_NS_4lessIvEELb1EEENS5_ISE_EEE13__count_multiIA5_cEEmRKT_($this, $__k) {
 $this = $this | 0;
 $__k = $__k | 0;
 var $$in$i$i = 0, $10 = 0, $5 = 0, $6 = 0, $7 = 0, $9 = 0, $__cc$i$i16 = 0, $__parent_$i410$i$i$i$i = 0, $__parent_$i47$i$i$i$i = 0, $__r$04$i$i = 0, $__result$030 = 0, $__result$1 = 0, $__rt$0 = 0, $__rt$028 = 0, $__rt$031 = 0, $__rt$1$in = 0, $__value_$i$i$i = 0, $__x$addr$0$i$i$i$i$i = 0, $call11 = 0, $call14 = 0, $inc$i$i = 0, $retval$0 = 0, $retval$0$i$i$i$i = 0;
 $__value_$i$i$i = $this + 4 | 0;
 $__rt$028 = HEAP32[$__value_$i$i$i >> 2] | 0;
 L1 : do if (!$__rt$028) $retval$0 = 0; else {
  $__result$030 = $__value_$i$i$i;
  $__rt$031 = $__rt$028;
  while (1) {
   $__cc$i$i16 = $__rt$031 + 16 | 0;
   if ((__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc(__ZNSt3__29__launderIKNS_4pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8nlohmann10basic_jsonINS_3mapENS_6vectorES7_bxydS5_NS9_14adl_serializerEEEEEEEPT_SI_($__cc$i$i16) | 0, $__k) | 0) > 0) {
    $__result$1 = $__rt$031;
    $__rt$1$in = $__rt$031;
   } else {
    if ((__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc(__ZNSt3__29__launderIKNS_4pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8nlohmann10basic_jsonINS_3mapENS_6vectorES7_bxydS5_NS9_14adl_serializerEEEEEEEPT_SI_($__cc$i$i16) | 0, $__k) | 0) >= 0) break;
    $__result$1 = $__result$030;
    $__rt$1$in = $__rt$031 + 4 | 0;
   }
   $__rt$0 = HEAP32[$__rt$1$in >> 2] | 0;
   if (!$__rt$0) {
    $retval$0 = 0;
    break L1;
   } else {
    $__result$030 = $__result$1;
    $__rt$031 = $__rt$0;
   }
  }
  $call11 = __ZNKSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8nlohmann10basic_jsonINS_3mapENS_6vectorES7_bxydS5_NS8_14adl_serializerEEEEENS_19__map_value_compareIS7_SE_NS_4lessIvEELb1EEENS5_ISE_EEE13__lower_boundIA5_cEENS_21__tree_const_iteratorISE_PNS_11__tree_nodeISE_PvEElEERKT_SR_PNS_15__tree_end_nodeIPNS_16__tree_node_baseISP_EEEE($this, $__k, HEAP32[$__rt$031 >> 2] | 0, $__rt$031) | 0;
  $call14 = __ZNKSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8nlohmann10basic_jsonINS_3mapENS_6vectorES7_bxydS5_NS8_14adl_serializerEEEEENS_19__map_value_compareIS7_SE_NS_4lessIvEELb1EEENS5_ISE_EEE13__upper_boundIA5_cEENS_21__tree_const_iteratorISE_PNS_11__tree_nodeISE_PvEElEERKT_SR_PNS_15__tree_end_nodeIPNS_16__tree_node_baseISP_EEEE($this, $__k, HEAP32[$__rt$031 + 4 >> 2] | 0, $__result$030) | 0;
  if (($call11 | 0) == ($call14 | 0)) $retval$0 = 0; else {
   $$in$i$i = $call11;
   $__r$04$i$i = 0;
   while (1) {
    $inc$i$i = $__r$04$i$i + 1 | 0;
    $5 = HEAP32[$$in$i$i + 4 >> 2] | 0;
    if (!$5) {
     $__parent_$i47$i$i$i$i = $$in$i$i + 8 | 0;
     $7 = HEAP32[$__parent_$i47$i$i$i$i >> 2] | 0;
     if ((HEAP32[$7 >> 2] | 0) == ($$in$i$i | 0)) $retval$0$i$i$i$i = $7; else {
      $__parent_$i410$i$i$i$i = $__parent_$i47$i$i$i$i;
      do {
       $9 = HEAP32[$__parent_$i410$i$i$i$i >> 2] | 0;
       $__parent_$i410$i$i$i$i = $9 + 8 | 0;
       $10 = HEAP32[$__parent_$i410$i$i$i$i >> 2] | 0;
      } while ((HEAP32[$10 >> 2] | 0) != ($9 | 0));
      $retval$0$i$i$i$i = $10;
     }
    } else {
     $__x$addr$0$i$i$i$i$i = $5;
     while (1) {
      $6 = HEAP32[$__x$addr$0$i$i$i$i$i >> 2] | 0;
      if (!$6) break; else $__x$addr$0$i$i$i$i$i = $6;
     }
     $retval$0$i$i$i$i = $__x$addr$0$i$i$i$i$i;
    }
    if (($retval$0$i$i$i$i | 0) == ($call14 | 0)) {
     $retval$0 = $inc$i$i;
     break;
    } else {
     $$in$i$i = $retval$0$i$i$i$i;
     $__r$04$i$i = $inc$i$i;
    }
   }
  }
 } while (0);
 return $retval$0 | 0;
}

function __ZNKSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8nlohmann10basic_jsonINS_3mapENS_6vectorES7_bxydS5_NS8_14adl_serializerEEEEENS_19__map_value_compareIS7_SE_NS_4lessIvEELb1EEENS5_ISE_EEE13__count_multiIA4_cEEmRKT_($this, $__k) {
 $this = $this | 0;
 $__k = $__k | 0;
 var $$in$i$i = 0, $10 = 0, $5 = 0, $6 = 0, $7 = 0, $9 = 0, $__cc$i$i16 = 0, $__parent_$i410$i$i$i$i = 0, $__parent_$i47$i$i$i$i = 0, $__r$04$i$i = 0, $__result$030 = 0, $__result$1 = 0, $__rt$0 = 0, $__rt$028 = 0, $__rt$031 = 0, $__rt$1$in = 0, $__value_$i$i$i = 0, $__x$addr$0$i$i$i$i$i = 0, $call11 = 0, $call14 = 0, $inc$i$i = 0, $retval$0 = 0, $retval$0$i$i$i$i = 0;
 $__value_$i$i$i = $this + 4 | 0;
 $__rt$028 = HEAP32[$__value_$i$i$i >> 2] | 0;
 L1 : do if (!$__rt$028) $retval$0 = 0; else {
  $__result$030 = $__value_$i$i$i;
  $__rt$031 = $__rt$028;
  while (1) {
   $__cc$i$i16 = $__rt$031 + 16 | 0;
   if ((__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc(__ZNSt3__29__launderIKNS_4pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8nlohmann10basic_jsonINS_3mapENS_6vectorES7_bxydS5_NS9_14adl_serializerEEEEEEEPT_SI_($__cc$i$i16) | 0, $__k) | 0) > 0) {
    $__result$1 = $__rt$031;
    $__rt$1$in = $__rt$031;
   } else {
    if ((__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc(__ZNSt3__29__launderIKNS_4pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8nlohmann10basic_jsonINS_3mapENS_6vectorES7_bxydS5_NS9_14adl_serializerEEEEEEEPT_SI_($__cc$i$i16) | 0, $__k) | 0) >= 0) break;
    $__result$1 = $__result$030;
    $__rt$1$in = $__rt$031 + 4 | 0;
   }
   $__rt$0 = HEAP32[$__rt$1$in >> 2] | 0;
   if (!$__rt$0) {
    $retval$0 = 0;
    break L1;
   } else {
    $__result$030 = $__result$1;
    $__rt$031 = $__rt$0;
   }
  }
  $call11 = __ZNKSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8nlohmann10basic_jsonINS_3mapENS_6vectorES7_bxydS5_NS8_14adl_serializerEEEEENS_19__map_value_compareIS7_SE_NS_4lessIvEELb1EEENS5_ISE_EEE13__lower_boundIA4_cEENS_21__tree_const_iteratorISE_PNS_11__tree_nodeISE_PvEElEERKT_SR_PNS_15__tree_end_nodeIPNS_16__tree_node_baseISP_EEEE($this, $__k, HEAP32[$__rt$031 >> 2] | 0, $__rt$031) | 0;
  $call14 = __ZNKSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8nlohmann10basic_jsonINS_3mapENS_6vectorES7_bxydS5_NS8_14adl_serializerEEEEENS_19__map_value_compareIS7_SE_NS_4lessIvEELb1EEENS5_ISE_EEE13__upper_boundIA4_cEENS_21__tree_const_iteratorISE_PNS_11__tree_nodeISE_PvEElEERKT_SR_PNS_15__tree_end_nodeIPNS_16__tree_node_baseISP_EEEE($this, $__k, HEAP32[$__rt$031 + 4 >> 2] | 0, $__result$030) | 0;
  if (($call11 | 0) == ($call14 | 0)) $retval$0 = 0; else {
   $$in$i$i = $call11;
   $__r$04$i$i = 0;
   while (1) {
    $inc$i$i = $__r$04$i$i + 1 | 0;
    $5 = HEAP32[$$in$i$i + 4 >> 2] | 0;
    if (!$5) {
     $__parent_$i47$i$i$i$i = $$in$i$i + 8 | 0;
     $7 = HEAP32[$__parent_$i47$i$i$i$i >> 2] | 0;
     if ((HEAP32[$7 >> 2] | 0) == ($$in$i$i | 0)) $retval$0$i$i$i$i = $7; else {
      $__parent_$i410$i$i$i$i = $__parent_$i47$i$i$i$i;
      do {
       $9 = HEAP32[$__parent_$i410$i$i$i$i >> 2] | 0;
       $__parent_$i410$i$i$i$i = $9 + 8 | 0;
       $10 = HEAP32[$__parent_$i410$i$i$i$i >> 2] | 0;
      } while ((HEAP32[$10 >> 2] | 0) != ($9 | 0));
      $retval$0$i$i$i$i = $10;
     }
    } else {
     $__x$addr$0$i$i$i$i$i = $5;
     while (1) {
      $6 = HEAP32[$__x$addr$0$i$i$i$i$i >> 2] | 0;
      if (!$6) break; else $__x$addr$0$i$i$i$i$i = $6;
     }
     $retval$0$i$i$i$i = $__x$addr$0$i$i$i$i$i;
    }
    if (($retval$0$i$i$i$i | 0) == ($call14 | 0)) {
     $retval$0 = $inc$i$i;
     break;
    } else {
     $$in$i$i = $retval$0$i$i$i$i;
     $__r$04$i$i = $inc$i$i;
    }
   }
  }
 } while (0);
 return $retval$0 | 0;
}

function __ZNKSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8nlohmann10basic_jsonINS_3mapENS_6vectorES7_bxydS5_NS8_14adl_serializerEEEEENS_19__map_value_compareIS7_SE_NS_4lessIvEELb1EEENS5_ISE_EEE13__count_multiIA3_cEEmRKT_($this, $__k) {
 $this = $this | 0;
 $__k = $__k | 0;
 var $$in$i$i = 0, $10 = 0, $5 = 0, $6 = 0, $7 = 0, $9 = 0, $__cc$i$i16 = 0, $__parent_$i410$i$i$i$i = 0, $__parent_$i47$i$i$i$i = 0, $__r$04$i$i = 0, $__result$030 = 0, $__result$1 = 0, $__rt$0 = 0, $__rt$028 = 0, $__rt$031 = 0, $__rt$1$in = 0, $__value_$i$i$i = 0, $__x$addr$0$i$i$i$i$i = 0, $call11 = 0, $call14 = 0, $inc$i$i = 0, $retval$0 = 0, $retval$0$i$i$i$i = 0;
 $__value_$i$i$i = $this + 4 | 0;
 $__rt$028 = HEAP32[$__value_$i$i$i >> 2] | 0;
 L1 : do if (!$__rt$028) $retval$0 = 0; else {
  $__result$030 = $__value_$i$i$i;
  $__rt$031 = $__rt$028;
  while (1) {
   $__cc$i$i16 = $__rt$031 + 16 | 0;
   if ((__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc(__ZNSt3__29__launderIKNS_4pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8nlohmann10basic_jsonINS_3mapENS_6vectorES7_bxydS5_NS9_14adl_serializerEEEEEEEPT_SI_($__cc$i$i16) | 0, $__k) | 0) > 0) {
    $__result$1 = $__rt$031;
    $__rt$1$in = $__rt$031;
   } else {
    if ((__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc(__ZNSt3__29__launderIKNS_4pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8nlohmann10basic_jsonINS_3mapENS_6vectorES7_bxydS5_NS9_14adl_serializerEEEEEEEPT_SI_($__cc$i$i16) | 0, $__k) | 0) >= 0) break;
    $__result$1 = $__result$030;
    $__rt$1$in = $__rt$031 + 4 | 0;
   }
   $__rt$0 = HEAP32[$__rt$1$in >> 2] | 0;
   if (!$__rt$0) {
    $retval$0 = 0;
    break L1;
   } else {
    $__result$030 = $__result$1;
    $__rt$031 = $__rt$0;
   }
  }
  $call11 = __ZNKSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8nlohmann10basic_jsonINS_3mapENS_6vectorES7_bxydS5_NS8_14adl_serializerEEEEENS_19__map_value_compareIS7_SE_NS_4lessIvEELb1EEENS5_ISE_EEE13__lower_boundIA3_cEENS_21__tree_const_iteratorISE_PNS_11__tree_nodeISE_PvEElEERKT_SR_PNS_15__tree_end_nodeIPNS_16__tree_node_baseISP_EEEE($this, $__k, HEAP32[$__rt$031 >> 2] | 0, $__rt$031) | 0;
  $call14 = __ZNKSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8nlohmann10basic_jsonINS_3mapENS_6vectorES7_bxydS5_NS8_14adl_serializerEEEEENS_19__map_value_compareIS7_SE_NS_4lessIvEELb1EEENS5_ISE_EEE13__upper_boundIA3_cEENS_21__tree_const_iteratorISE_PNS_11__tree_nodeISE_PvEElEERKT_SR_PNS_15__tree_end_nodeIPNS_16__tree_node_baseISP_EEEE($this, $__k, HEAP32[$__rt$031 + 4 >> 2] | 0, $__result$030) | 0;
  if (($call11 | 0) == ($call14 | 0)) $retval$0 = 0; else {
   $$in$i$i = $call11;
   $__r$04$i$i = 0;
   while (1) {
    $inc$i$i = $__r$04$i$i + 1 | 0;
    $5 = HEAP32[$$in$i$i + 4 >> 2] | 0;
    if (!$5) {
     $__parent_$i47$i$i$i$i = $$in$i$i + 8 | 0;
     $7 = HEAP32[$__parent_$i47$i$i$i$i >> 2] | 0;
     if ((HEAP32[$7 >> 2] | 0) == ($$in$i$i | 0)) $retval$0$i$i$i$i = $7; else {
      $__parent_$i410$i$i$i$i = $__parent_$i47$i$i$i$i;
      do {
       $9 = HEAP32[$__parent_$i410$i$i$i$i >> 2] | 0;
       $__parent_$i410$i$i$i$i = $9 + 8 | 0;
       $10 = HEAP32[$__parent_$i410$i$i$i$i >> 2] | 0;
      } while ((HEAP32[$10 >> 2] | 0) != ($9 | 0));
      $retval$0$i$i$i$i = $10;
     }
    } else {
     $__x$addr$0$i$i$i$i$i = $5;
     while (1) {
      $6 = HEAP32[$__x$addr$0$i$i$i$i$i >> 2] | 0;
      if (!$6) break; else $__x$addr$0$i$i$i$i$i = $6;
     }
     $retval$0$i$i$i$i = $__x$addr$0$i$i$i$i$i;
    }
    if (($retval$0$i$i$i$i | 0) == ($call14 | 0)) {
     $retval$0 = $inc$i$i;
     break;
    } else {
     $$in$i$i = $retval$0$i$i$i$i;
     $__r$04$i$i = $inc$i$i;
    }
   }
  }
 } while (0);
 return $retval$0 | 0;
}

function __ZNKSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8nlohmann10basic_jsonINS_3mapENS_6vectorES7_bxydS5_NS8_14adl_serializerEEEEENS_19__map_value_compareIS7_SE_NS_4lessIvEELb1EEENS5_ISE_EEE13__count_multiIA2_cEEmRKT_($this, $__k) {
 $this = $this | 0;
 $__k = $__k | 0;
 var $$in$i$i = 0, $10 = 0, $5 = 0, $6 = 0, $7 = 0, $9 = 0, $__cc$i$i16 = 0, $__parent_$i410$i$i$i$i = 0, $__parent_$i47$i$i$i$i = 0, $__r$04$i$i = 0, $__result$030 = 0, $__result$1 = 0, $__rt$0 = 0, $__rt$028 = 0, $__rt$031 = 0, $__rt$1$in = 0, $__value_$i$i$i = 0, $__x$addr$0$i$i$i$i$i = 0, $call11 = 0, $call14 = 0, $inc$i$i = 0, $retval$0 = 0, $retval$0$i$i$i$i = 0;
 $__value_$i$i$i = $this + 4 | 0;
 $__rt$028 = HEAP32[$__value_$i$i$i >> 2] | 0;
 L1 : do if (!$__rt$028) $retval$0 = 0; else {
  $__result$030 = $__value_$i$i$i;
  $__rt$031 = $__rt$028;
  while (1) {
   $__cc$i$i16 = $__rt$031 + 16 | 0;
   if ((__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc(__ZNSt3__29__launderIKNS_4pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8nlohmann10basic_jsonINS_3mapENS_6vectorES7_bxydS5_NS9_14adl_serializerEEEEEEEPT_SI_($__cc$i$i16) | 0, $__k) | 0) > 0) {
    $__result$1 = $__rt$031;
    $__rt$1$in = $__rt$031;
   } else {
    if ((__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc(__ZNSt3__29__launderIKNS_4pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8nlohmann10basic_jsonINS_3mapENS_6vectorES7_bxydS5_NS9_14adl_serializerEEEEEEEPT_SI_($__cc$i$i16) | 0, $__k) | 0) >= 0) break;
    $__result$1 = $__result$030;
    $__rt$1$in = $__rt$031 + 4 | 0;
   }
   $__rt$0 = HEAP32[$__rt$1$in >> 2] | 0;
   if (!$__rt$0) {
    $retval$0 = 0;
    break L1;
   } else {
    $__result$030 = $__result$1;
    $__rt$031 = $__rt$0;
   }
  }
  $call11 = __ZNKSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8nlohmann10basic_jsonINS_3mapENS_6vectorES7_bxydS5_NS8_14adl_serializerEEEEENS_19__map_value_compareIS7_SE_NS_4lessIvEELb1EEENS5_ISE_EEE13__lower_boundIA2_cEENS_21__tree_const_iteratorISE_PNS_11__tree_nodeISE_PvEElEERKT_SR_PNS_15__tree_end_nodeIPNS_16__tree_node_baseISP_EEEE($this, $__k, HEAP32[$__rt$031 >> 2] | 0, $__rt$031) | 0;
  $call14 = __ZNKSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8nlohmann10basic_jsonINS_3mapENS_6vectorES7_bxydS5_NS8_14adl_serializerEEEEENS_19__map_value_compareIS7_SE_NS_4lessIvEELb1EEENS5_ISE_EEE13__upper_boundIA2_cEENS_21__tree_const_iteratorISE_PNS_11__tree_nodeISE_PvEElEERKT_SR_PNS_15__tree_end_nodeIPNS_16__tree_node_baseISP_EEEE($this, $__k, HEAP32[$__rt$031 + 4 >> 2] | 0, $__result$030) | 0;
  if (($call11 | 0) == ($call14 | 0)) $retval$0 = 0; else {
   $$in$i$i = $call11;
   $__r$04$i$i = 0;
   while (1) {
    $inc$i$i = $__r$04$i$i + 1 | 0;
    $5 = HEAP32[$$in$i$i + 4 >> 2] | 0;
    if (!$5) {
     $__parent_$i47$i$i$i$i = $$in$i$i + 8 | 0;
     $7 = HEAP32[$__parent_$i47$i$i$i$i >> 2] | 0;
     if ((HEAP32[$7 >> 2] | 0) == ($$in$i$i | 0)) $retval$0$i$i$i$i = $7; else {
      $__parent_$i410$i$i$i$i = $__parent_$i47$i$i$i$i;
      do {
       $9 = HEAP32[$__parent_$i410$i$i$i$i >> 2] | 0;
       $__parent_$i410$i$i$i$i = $9 + 8 | 0;
       $10 = HEAP32[$__parent_$i410$i$i$i$i >> 2] | 0;
      } while ((HEAP32[$10 >> 2] | 0) != ($9 | 0));
      $retval$0$i$i$i$i = $10;
     }
    } else {
     $__x$addr$0$i$i$i$i$i = $5;
     while (1) {
      $6 = HEAP32[$__x$addr$0$i$i$i$i$i >> 2] | 0;
      if (!$6) break; else $__x$addr$0$i$i$i$i$i = $6;
     }
     $retval$0$i$i$i$i = $__x$addr$0$i$i$i$i$i;
    }
    if (($retval$0$i$i$i$i | 0) == ($call14 | 0)) {
     $retval$0 = $inc$i$i;
     break;
    } else {
     $$in$i$i = $retval$0$i$i$i$i;
     $__r$04$i$i = $inc$i$i;
    }
   }
  }
 } while (0);
 return $retval$0 | 0;
}

function __ZN8nlohmann6detail11parse_error6createEiRKNS0_10position_tERKNSt3__212basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEE($agg$result, $id_, $pos, $what_arg) {
 $agg$result = $agg$result | 0;
 $id_ = $id_ | 0;
 $pos = $pos | 0;
 $what_arg = $what_arg | 0;
 var $0 = 0, $3 = 0, $call$i34 = 0, $call$i67 = 0, $call3$i$i18 = 0, $call3$i$i5 = 0, $ref$tmp = 0, $ref$tmp1 = 0, $ref$tmp2 = 0, $ref$tmp3 = 0, $ref$tmp4 = 0, $ref$tmp7 = 0, $tobool$i$i$i$i$i = 0, $tobool$i$i$i$i$i11 = 0, $w = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(96);
 $w = sp + 72 | 0;
 $ref$tmp = sp + 60 | 0;
 $ref$tmp1 = sp + 48 | 0;
 $ref$tmp2 = sp + 36 | 0;
 $ref$tmp3 = sp + 24 | 0;
 $ref$tmp4 = sp + 12 | 0;
 $ref$tmp7 = sp;
 HEAP32[$ref$tmp4 >> 2] = 0;
 HEAP32[$ref$tmp4 + 4 >> 2] = 0;
 HEAP32[$ref$tmp4 + 8 >> 2] = 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcm($ref$tmp4, 23964, __ZNSt3__211char_traitsIcE6lengthEPKc(23964) | 0);
 __ZN8nlohmann6detail9exception4nameERKNSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEi($ref$tmp3, $ref$tmp4, $id_);
 $call$i34 = __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc($ref$tmp3, 24340) | 0;
 HEAP32[$ref$tmp2 >> 2] = HEAP32[$call$i34 >> 2];
 HEAP32[$ref$tmp2 + 4 >> 2] = HEAP32[$call$i34 + 4 >> 2];
 HEAP32[$ref$tmp2 + 8 >> 2] = HEAP32[$call$i34 + 8 >> 2];
 HEAP32[$call$i34 >> 2] = 0;
 HEAP32[$call$i34 + 4 >> 2] = 0;
 HEAP32[$call$i34 + 8 >> 2] = 0;
 __ZN8nlohmann6detail11parse_error15position_stringERKNS0_10position_tE($ref$tmp7, $pos);
 $0 = HEAP8[$ref$tmp7 + 11 >> 0] | 0;
 $tobool$i$i$i$i$i = $0 << 24 >> 24 < 0;
 $call3$i$i5 = __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcm($ref$tmp2, $tobool$i$i$i$i$i ? HEAP32[$ref$tmp7 >> 2] | 0 : $ref$tmp7, $tobool$i$i$i$i$i ? HEAP32[$ref$tmp7 + 4 >> 2] | 0 : $0 & 255) | 0;
 HEAP32[$ref$tmp1 >> 2] = HEAP32[$call3$i$i5 >> 2];
 HEAP32[$ref$tmp1 + 4 >> 2] = HEAP32[$call3$i$i5 + 4 >> 2];
 HEAP32[$ref$tmp1 + 8 >> 2] = HEAP32[$call3$i$i5 + 8 >> 2];
 HEAP32[$call3$i$i5 >> 2] = 0;
 HEAP32[$call3$i$i5 + 4 >> 2] = 0;
 HEAP32[$call3$i$i5 + 8 >> 2] = 0;
 $call$i67 = __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc($ref$tmp1, 45286) | 0;
 HEAP32[$ref$tmp >> 2] = HEAP32[$call$i67 >> 2];
 HEAP32[$ref$tmp + 4 >> 2] = HEAP32[$call$i67 + 4 >> 2];
 HEAP32[$ref$tmp + 8 >> 2] = HEAP32[$call$i67 + 8 >> 2];
 HEAP32[$call$i67 >> 2] = 0;
 HEAP32[$call$i67 + 4 >> 2] = 0;
 HEAP32[$call$i67 + 8 >> 2] = 0;
 $3 = HEAP8[$what_arg + 11 >> 0] | 0;
 $tobool$i$i$i$i$i11 = $3 << 24 >> 24 < 0;
 $call3$i$i18 = __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcm($ref$tmp, $tobool$i$i$i$i$i11 ? HEAP32[$what_arg >> 2] | 0 : $what_arg, $tobool$i$i$i$i$i11 ? HEAP32[$what_arg + 4 >> 2] | 0 : $3 & 255) | 0;
 HEAP32[$w >> 2] = HEAP32[$call3$i$i18 >> 2];
 HEAP32[$w + 4 >> 2] = HEAP32[$call3$i$i18 + 4 >> 2];
 HEAP32[$w + 8 >> 2] = HEAP32[$call3$i$i18 + 8 >> 2];
 HEAP32[$call3$i$i18 >> 2] = 0;
 HEAP32[$call3$i$i18 + 4 >> 2] = 0;
 HEAP32[$call3$i$i18 + 8 >> 2] = 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp1);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp7);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp2);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp3);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp4);
 __ZN8nlohmann6detail11parse_errorC2EimPKc($agg$result, $id_, HEAP32[$pos >> 2] | 0, (HEAP8[$w + 11 >> 0] | 0) < 0 ? HEAP32[$w >> 2] | 0 : $w);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($w);
 STACKTOP = sp;
 return;
}

function __ZN8nlohmann6detail5lexerINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE4scanEv($this) {
 $this = $this | 0;
 var $current = 0, $retval$0 = 0, label = 0;
 label = 0;
 if (!(HEAP32[$this + 16 >> 2] | 0)) if (__ZN8nlohmann6detail5lexerINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE8skip_bomEv($this) | 0) label = 4; else {
  HEAP32[$this + 52 >> 2] = 24628;
  $retval$0 = 14;
 } else label = 4;
 L4 : do if ((label | 0) == 4) {
  $current = $this + 8 | 0;
  L6 : while (1) {
   __ZN8nlohmann6detail5lexerINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE3getEv($this) | 0;
   switch (HEAP32[$current >> 2] | 0) {
   case 44:
    {
     $retval$0 = 13;
     break L4;
     break;
    }
   case 91:
    {
     label = 14;
     break L6;
     break;
    }
   case 93:
    {
     label = 15;
     break L6;
     break;
    }
   case 123:
    {
     label = 16;
     break L6;
     break;
    }
   case 125:
    {
     label = 17;
     break L6;
     break;
    }
   case 58:
    {
     label = 18;
     break L6;
     break;
    }
   case 116:
    {
     label = 7;
     break L6;
     break;
    }
   case 102:
    {
     label = 8;
     break L6;
     break;
    }
   case 110:
    {
     label = 9;
     break L6;
     break;
    }
   case 34:
    {
     label = 10;
     break L6;
     break;
    }
   case 57:
   case 56:
   case 55:
   case 54:
   case 53:
   case 52:
   case 51:
   case 50:
   case 49:
   case 48:
   case 45:
    {
     label = 11;
     break L6;
     break;
    }
   case -1:
   case 0:
    {
     label = 12;
     break L6;
     break;
    }
   case 13:
   case 10:
   case 9:
   case 32:
    break;
   default:
    {
     label = 13;
     break L6;
    }
   }
  }
  switch (label | 0) {
  case 7:
   {
    $retval$0 = __ZN8nlohmann6detail5lexerINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE12scan_literalEPKcmNSE_10token_typeE($this, 44915, 4, 1) | 0;
    break L4;
    break;
   }
  case 8:
   {
    $retval$0 = __ZN8nlohmann6detail5lexerINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE12scan_literalEPKcmNSE_10token_typeE($this, 44909, 5, 2) | 0;
    break L4;
    break;
   }
  case 9:
   {
    $retval$0 = __ZN8nlohmann6detail5lexerINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE12scan_literalEPKcmNSE_10token_typeE($this, 22873, 4, 3) | 0;
    break L4;
    break;
   }
  case 10:
   {
    $retval$0 = __ZN8nlohmann6detail5lexerINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE11scan_stringEv($this) | 0;
    break L4;
    break;
   }
  case 11:
   {
    $retval$0 = __ZN8nlohmann6detail5lexerINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE11scan_numberEv($this) | 0;
    break L4;
    break;
   }
  case 12:
   {
    $retval$0 = 15;
    break L4;
    break;
   }
  case 13:
   {
    HEAP32[$this + 52 >> 2] = 24673;
    $retval$0 = 14;
    break L4;
    break;
   }
  case 14:
   {
    $retval$0 = 8;
    break L4;
    break;
   }
  case 15:
   {
    $retval$0 = 10;
    break L4;
    break;
   }
  case 16:
   {
    $retval$0 = 9;
    break L4;
    break;
   }
  case 17:
   {
    $retval$0 = 11;
    break L4;
    break;
   }
  case 18:
   {
    $retval$0 = 12;
    break L4;
    break;
   }
  }
 } while (0);
 return $retval$0 | 0;
}

function __ZN8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEC2ERKSB_($this, $other) {
 $this = $this | 0;
 $other = $other | 0;
 var $1 = 0, $13 = 0, $14 = 0, $19 = 0, $2 = 0, $24 = 0, $25 = 0, $30 = 0, $35 = 0, $36 = 0, $41 = 0, $46 = 0, $47 = 0, $51 = 0, $57 = 0, $62 = 0, $63 = 0, $67 = 0, $73 = 0, $78 = 0, $79 = 0, $8 = 0, $84 = 0, $89 = 0, $90 = 0, $ref$tmp = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $ref$tmp = sp;
 HEAP8[$this >> 0] = HEAP8[$other >> 0] | 0;
 $1 = $this + 8 | 0;
 $2 = $1;
 HEAP32[$2 >> 2] = 0;
 HEAP32[$2 + 4 >> 2] = 0;
 __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE16assert_invariantEv($other);
 switch (HEAP8[$this >> 0] | 0) {
 case 1:
  {
   __ZN8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE10json_valueC2ERKNS2_IS9_SB_NS1_4lessIvEENS7_INS1_4pairIKS9_SB_EEEEEE($ref$tmp, HEAP32[$other + 8 >> 2] | 0);
   $8 = $ref$tmp;
   $13 = HEAP32[$8 + 4 >> 2] | 0;
   $14 = $1;
   HEAP32[$14 >> 2] = HEAP32[$8 >> 2];
   HEAP32[$14 + 4 >> 2] = $13;
   break;
  }
 case 2:
  {
   __ZN8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE10json_valueC2ERKNS3_ISB_NS7_ISB_EEEE($ref$tmp, HEAP32[$other + 8 >> 2] | 0);
   $19 = $ref$tmp;
   $24 = HEAP32[$19 + 4 >> 2] | 0;
   $25 = $1;
   HEAP32[$25 >> 2] = HEAP32[$19 >> 2];
   HEAP32[$25 + 4 >> 2] = $24;
   break;
  }
 case 3:
  {
   __ZN8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE10json_valueC2ERKS9_($ref$tmp, HEAP32[$other + 8 >> 2] | 0);
   $30 = $ref$tmp;
   $35 = HEAP32[$30 + 4 >> 2] | 0;
   $36 = $1;
   HEAP32[$36 >> 2] = HEAP32[$30 >> 2];
   HEAP32[$36 + 4 >> 2] = $35;
   break;
  }
 case 4:
  {
   __ZN8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE10json_valueC2Eb($ref$tmp, (HEAP8[$other + 8 >> 0] | 0) != 0);
   $41 = $ref$tmp;
   $46 = HEAP32[$41 + 4 >> 2] | 0;
   $47 = $1;
   HEAP32[$47 >> 2] = HEAP32[$41 >> 2];
   HEAP32[$47 + 4 >> 2] = $46;
   break;
  }
 case 5:
  {
   $51 = $other + 8 | 0;
   __ZN8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE10json_valueC2Ex($ref$tmp, HEAP32[$51 >> 2] | 0, HEAP32[$51 + 4 >> 2] | 0);
   $57 = $ref$tmp;
   $62 = HEAP32[$57 + 4 >> 2] | 0;
   $63 = $1;
   HEAP32[$63 >> 2] = HEAP32[$57 >> 2];
   HEAP32[$63 + 4 >> 2] = $62;
   break;
  }
 case 6:
  {
   $67 = $other + 8 | 0;
   __ZN8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE10json_valueC2Ey($ref$tmp, HEAP32[$67 >> 2] | 0, HEAP32[$67 + 4 >> 2] | 0);
   $73 = $ref$tmp;
   $78 = HEAP32[$73 + 4 >> 2] | 0;
   $79 = $1;
   HEAP32[$79 >> 2] = HEAP32[$73 >> 2];
   HEAP32[$79 + 4 >> 2] = $78;
   break;
  }
 case 7:
  {
   __ZN8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE10json_valueC2Ed($ref$tmp, +HEAPF64[$other + 8 >> 3]);
   $84 = $ref$tmp;
   $89 = HEAP32[$84 + 4 >> 2] | 0;
   $90 = $1;
   HEAP32[$90 >> 2] = HEAP32[$84 >> 2];
   HEAP32[$90 + 4 >> 2] = $89;
   break;
  }
 default:
  {}
 }
 __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE16assert_invariantEv($this);
 STACKTOP = sp;
 return;
}

function __ZN8nlohmann6detail19json_sax_dom_parserINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE12handle_valueINS0_7value_tEEEPSD_OT_($this, $v) {
 $this = $this | 0;
 $v = $v | 0;
 var $1 = 0, $11 = 0, $12 = 0, $13 = 0, $__end_$i = 0, $__end_$i12 = 0, $agg$tmp = 0, $agg$tmp32 = 0, $call13 = 0, $object_element = 0, $retval$0 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $agg$tmp = sp + 16 | 0;
 $agg$tmp32 = sp;
 $__end_$i = $this + 8 | 0;
 $1 = HEAP32[$__end_$i >> 2] | 0;
 do if ((HEAP32[$this + 4 >> 2] | 0) == ($1 | 0)) {
  __ZN8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEC2ENS_6detail7value_tE($agg$tmp, HEAP8[$v >> 0] | 0);
  __ZN8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEaSESB_(HEAP32[$this >> 2] | 0, $agg$tmp) | 0;
  __ZN8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEED2Ev($agg$tmp);
  $retval$0 = HEAP32[$this >> 2] | 0;
 } else {
  if (!(__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE8is_arrayEv(HEAP32[$1 + -4 >> 2] | 0) | 0)) if (!(__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE9is_objectEv(HEAP32[(HEAP32[$__end_$i >> 2] | 0) + -4 >> 2] | 0) | 0)) ___assert_fail(24135, 22221, 4468, 24197);
  $call13 = __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE8is_arrayEv(HEAP32[(HEAP32[$__end_$i >> 2] | 0) + -4 >> 2] | 0) | 0;
  $11 = HEAP32[(HEAP32[$__end_$i >> 2] | 0) + -4 >> 2] | 0;
  if ($call13) {
   $12 = HEAP32[$11 + 8 >> 2] | 0;
   $__end_$i12 = $12 + 4 | 0;
   $13 = HEAP32[$__end_$i12 >> 2] | 0;
   if ($13 >>> 0 < (HEAP32[$12 + 8 >> 2] | 0) >>> 0) {
    __ZN8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEC2ENS_6detail7value_tE($13, HEAP8[$v >> 0] | 0);
    HEAP32[$__end_$i12 >> 2] = (HEAP32[$__end_$i12 >> 2] | 0) + 16;
   } else __ZNSt3__26vectorIN8nlohmann10basic_jsonINS_3mapES0_NS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEbxydS7_NS1_14adl_serializerEEENS7_ISB_EEE24__emplace_back_slow_pathIJNS1_6detail7value_tEEEEvDpOT_($12, $v);
   $retval$0 = (HEAP32[(HEAP32[(HEAP32[(HEAP32[$__end_$i >> 2] | 0) + -4 >> 2] | 0) + 8 >> 2] | 0) + 4 >> 2] | 0) + -16 | 0;
   break;
  }
  if (!(__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE9is_objectEv($11) | 0)) ___assert_fail(24210, 22221, 4476, 24197);
  $object_element = $this + 16 | 0;
  if (!(HEAP32[$object_element >> 2] | 0)) ___assert_fail(24240, 22221, 4477, 24197); else {
   __ZN8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEC2ENS_6detail7value_tE($agg$tmp32, HEAP8[$v >> 0] | 0);
   __ZN8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEaSESB_(HEAP32[$object_element >> 2] | 0, $agg$tmp32) | 0;
   __ZN8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEED2Ev($agg$tmp32);
   $retval$0 = HEAP32[$object_element >> 2] | 0;
   break;
  }
 } while (0);
 STACKTOP = sp;
 return $retval$0 | 0;
}

function __ZN4tson7Tileson5parseERKNSt3__24__fs10filesystem4pathE($agg$result, $this, $path) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $path = $path | 0;
 var $10 = 0, $16 = 0, $__sb_$i = 0, $add$ptr9$i = 0, $agg$tmp$i7 = 0, $agg$tmp52 = 0, $ref$tmp = 0, $tobool$i$i$i$i$i28 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(224);
 $agg$tmp$i7 = sp + 16 | 0;
 $ref$tmp = sp;
 $agg$tmp52 = sp + 204 | 0;
 __ZNSt3__24__fs10filesystem8__statusERKNS1_4pathEPNS_10error_codeE($agg$tmp$i7, $path, 0);
 if (((HEAP32[$agg$tmp$i7 >> 2] & 255) + 1 & 255) > 1) {
  __ZNSt3__24__fs10filesystem8__statusERKNS1_4pathEPNS_10error_codeE($agg$tmp$i7, $path, 0);
  if ((HEAP8[$agg$tmp$i7 >> 0] | 0) == 1) {
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($ref$tmp, $path);
   $10 = $agg$tmp$i7 + 108 | 0;
   $__sb_$i = $agg$tmp$i7 + 8 | 0;
   HEAP32[$agg$tmp$i7 >> 2] = 14940;
   HEAP32[$10 >> 2] = 14960;
   HEAP32[$agg$tmp$i7 + 4 >> 2] = 0;
   __ZNSt3__28ios_base4initEPv($agg$tmp$i7 + 108 | 0, $__sb_$i);
   HEAP32[$agg$tmp$i7 + 180 >> 2] = 0;
   HEAP32[$agg$tmp$i7 + 184 >> 2] = __ZNSt3__211char_traitsIcE3eofEv() | 0;
   HEAP32[$agg$tmp$i7 >> 2] = 17456;
   HEAP32[$10 >> 2] = 17476;
   __ZNSt3__213basic_filebufIcNS_11char_traitsIcEEEC2Ev($__sb_$i);
   if (!(__ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE4openEPKcj($__sb_$i, (HEAP8[$ref$tmp + 11 >> 0] | 0) < 0 ? HEAP32[$ref$tmp >> 2] | 0 : $ref$tmp, 8) | 0)) {
    $add$ptr9$i = $agg$tmp$i7 + (HEAP32[(HEAP32[$agg$tmp$i7 >> 2] | 0) + -12 >> 2] | 0) | 0;
    __ZNSt3__28ios_base5clearEj($add$ptr9$i, HEAP32[$add$ptr9$i + 16 >> 2] | 4);
   }
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp);
   __ZN8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEC2EDn($ref$tmp, 0);
   __ZN8nlohmannrsERNSt3__213basic_istreamIcNS0_11char_traitsIcEEEERNS_10basic_jsonINS0_3mapENS0_6vectorENS0_12basic_stringIcS3_NS0_9allocatorIcEEEEbxydSA_NS_14adl_serializerEEE($agg$tmp$i7, $ref$tmp) | 0;
   __ZN4tson7Tileson9parseJsonERKN8nlohmann10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS1_14adl_serializerEEE($agg$result, $this, $ref$tmp);
   __ZN8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEED2Ev($ref$tmp);
   __ZNSt3__214basic_ifstreamIcNS_11char_traitsIcEEED1Ev($agg$tmp$i7);
  } else label = 6;
 } else label = 6;
 if ((label | 0) == 6) {
  HEAP32[$agg$tmp$i7 >> 2] = 0;
  HEAP32[$agg$tmp$i7 + 4 >> 2] = 0;
  HEAP32[$agg$tmp$i7 + 8 >> 2] = 0;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcm($agg$tmp$i7, 22149, __ZNSt3__211char_traitsIcE6lengthEPKc(22149) | 0);
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($ref$tmp, $path);
  $16 = HEAP8[$ref$tmp + 11 >> 0] | 0;
  $tobool$i$i$i$i$i28 = $16 << 24 >> 24 < 0;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcm($agg$tmp$i7, $tobool$i$i$i$i$i28 ? HEAP32[$ref$tmp >> 2] | 0 : $ref$tmp, $tobool$i$i$i$i$i28 ? HEAP32[$ref$tmp + 4 >> 2] | 0 : $16 & 255) | 0;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp);
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($agg$tmp52, $agg$tmp$i7);
  __ZN4tson3MapC2ENS_11ParseStatusENSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE($agg$result, 1, $agg$tmp52);
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($agg$tmp52);
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($agg$tmp$i7);
 }
 STACKTOP = sp;
 return;
}

function __ZN8nlohmann6detail19json_sax_dom_parserINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE12handle_valueIDnEEPSD_OT_($this, $v) {
 $this = $this | 0;
 $v = $v | 0;
 var $1 = 0, $11 = 0, $12 = 0, $13 = 0, $__end_$i = 0, $__end_$i12 = 0, $agg$tmp = 0, $agg$tmp32 = 0, $call13 = 0, $object_element = 0, $retval$0 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $agg$tmp = sp + 16 | 0;
 $agg$tmp32 = sp;
 $__end_$i = $this + 8 | 0;
 $1 = HEAP32[$__end_$i >> 2] | 0;
 do if ((HEAP32[$this + 4 >> 2] | 0) == ($1 | 0)) {
  __ZN8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEC2EDn($agg$tmp, HEAP32[$v >> 2] | 0);
  __ZN8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEaSESB_(HEAP32[$this >> 2] | 0, $agg$tmp) | 0;
  __ZN8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEED2Ev($agg$tmp);
  $retval$0 = HEAP32[$this >> 2] | 0;
 } else {
  if (!(__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE8is_arrayEv(HEAP32[$1 + -4 >> 2] | 0) | 0)) if (!(__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE9is_objectEv(HEAP32[(HEAP32[$__end_$i >> 2] | 0) + -4 >> 2] | 0) | 0)) ___assert_fail(24135, 22221, 4468, 24197);
  $call13 = __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE8is_arrayEv(HEAP32[(HEAP32[$__end_$i >> 2] | 0) + -4 >> 2] | 0) | 0;
  $11 = HEAP32[(HEAP32[$__end_$i >> 2] | 0) + -4 >> 2] | 0;
  if ($call13) {
   $12 = HEAP32[$11 + 8 >> 2] | 0;
   $__end_$i12 = $12 + 4 | 0;
   $13 = HEAP32[$__end_$i12 >> 2] | 0;
   if ($13 >>> 0 < (HEAP32[$12 + 8 >> 2] | 0) >>> 0) {
    __ZN8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEC2EDn($13, HEAP32[$v >> 2] | 0);
    HEAP32[$__end_$i12 >> 2] = (HEAP32[$__end_$i12 >> 2] | 0) + 16;
   } else __ZNSt3__26vectorIN8nlohmann10basic_jsonINS_3mapES0_NS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEbxydS7_NS1_14adl_serializerEEENS7_ISB_EEE24__emplace_back_slow_pathIJDnEEEvDpOT_($12, $v);
   $retval$0 = (HEAP32[(HEAP32[(HEAP32[(HEAP32[$__end_$i >> 2] | 0) + -4 >> 2] | 0) + 8 >> 2] | 0) + 4 >> 2] | 0) + -16 | 0;
   break;
  }
  if (!(__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE9is_objectEv($11) | 0)) ___assert_fail(24210, 22221, 4476, 24197);
  $object_element = $this + 16 | 0;
  if (!(HEAP32[$object_element >> 2] | 0)) ___assert_fail(24240, 22221, 4477, 24197); else {
   __ZN8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEC2EDn($agg$tmp32, HEAP32[$v >> 2] | 0);
   __ZN8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEaSESB_(HEAP32[$object_element >> 2] | 0, $agg$tmp32) | 0;
   __ZN8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEED2Ev($agg$tmp32);
   $retval$0 = HEAP32[$object_element >> 2] | 0;
   break;
  }
 } while (0);
 STACKTOP = sp;
 return $retval$0 | 0;
}

function __ZN8nlohmann6detail19json_sax_dom_parserINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE12handle_valueIRSB_EEPSD_OT_($this, $v) {
 $this = $this | 0;
 $v = $v | 0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $__end_$i = 0, $__end_$i12 = 0, $agg$tmp = 0, $agg$tmp32 = 0, $call13 = 0, $object_element = 0, $retval$0 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $agg$tmp = sp + 16 | 0;
 $agg$tmp32 = sp;
 $__end_$i = $this + 8 | 0;
 $1 = HEAP32[$__end_$i >> 2] | 0;
 do if ((HEAP32[$this + 4 >> 2] | 0) == ($1 | 0)) {
  __ZN8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEC2IRS9_S9_Li0EEEOT_($agg$tmp, $v);
  __ZN8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEaSESB_(HEAP32[$this >> 2] | 0, $agg$tmp) | 0;
  __ZN8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEED2Ev($agg$tmp);
  $retval$0 = HEAP32[$this >> 2] | 0;
 } else {
  if (!(__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE8is_arrayEv(HEAP32[$1 + -4 >> 2] | 0) | 0)) if (!(__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE9is_objectEv(HEAP32[(HEAP32[$__end_$i >> 2] | 0) + -4 >> 2] | 0) | 0)) ___assert_fail(24135, 22221, 4468, 24197);
  $call13 = __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE8is_arrayEv(HEAP32[(HEAP32[$__end_$i >> 2] | 0) + -4 >> 2] | 0) | 0;
  $10 = HEAP32[(HEAP32[$__end_$i >> 2] | 0) + -4 >> 2] | 0;
  if ($call13) {
   $11 = HEAP32[$10 + 8 >> 2] | 0;
   $__end_$i12 = $11 + 4 | 0;
   $12 = HEAP32[$__end_$i12 >> 2] | 0;
   if ($12 >>> 0 < (HEAP32[$11 + 8 >> 2] | 0) >>> 0) {
    __ZN8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEC2IRS9_S9_Li0EEEOT_($12, $v);
    HEAP32[$__end_$i12 >> 2] = (HEAP32[$__end_$i12 >> 2] | 0) + 16;
   } else __ZNSt3__26vectorIN8nlohmann10basic_jsonINS_3mapES0_NS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEbxydS7_NS1_14adl_serializerEEENS7_ISB_EEE24__emplace_back_slow_pathIJRS9_EEEvDpOT_($11, $v);
   $retval$0 = (HEAP32[(HEAP32[(HEAP32[(HEAP32[$__end_$i >> 2] | 0) + -4 >> 2] | 0) + 8 >> 2] | 0) + 4 >> 2] | 0) + -16 | 0;
   break;
  }
  if (!(__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE9is_objectEv($10) | 0)) ___assert_fail(24210, 22221, 4476, 24197);
  $object_element = $this + 16 | 0;
  if (!(HEAP32[$object_element >> 2] | 0)) ___assert_fail(24240, 22221, 4477, 24197); else {
   __ZN8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEC2IRS9_S9_Li0EEEOT_($agg$tmp32, $v);
   __ZN8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEaSESB_(HEAP32[$object_element >> 2] | 0, $agg$tmp32) | 0;
   __ZN8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEED2Ev($agg$tmp32);
   $retval$0 = HEAP32[$object_element >> 2] | 0;
   break;
  }
 } while (0);
 STACKTOP = sp;
 return $retval$0 | 0;
}

function __ZN8nlohmann6detail19json_sax_dom_parserINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE12handle_valueIRyEEPSD_OT_($this, $v) {
 $this = $this | 0;
 $v = $v | 0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $__end_$i = 0, $__end_$i12 = 0, $agg$tmp = 0, $agg$tmp32 = 0, $call13 = 0, $object_element = 0, $retval$0 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $agg$tmp = sp + 16 | 0;
 $agg$tmp32 = sp;
 $__end_$i = $this + 8 | 0;
 $1 = HEAP32[$__end_$i >> 2] | 0;
 do if ((HEAP32[$this + 4 >> 2] | 0) == ($1 | 0)) {
  __ZN8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEC2IRyyLi0EEEOT_($agg$tmp, $v);
  __ZN8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEaSESB_(HEAP32[$this >> 2] | 0, $agg$tmp) | 0;
  __ZN8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEED2Ev($agg$tmp);
  $retval$0 = HEAP32[$this >> 2] | 0;
 } else {
  if (!(__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE8is_arrayEv(HEAP32[$1 + -4 >> 2] | 0) | 0)) if (!(__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE9is_objectEv(HEAP32[(HEAP32[$__end_$i >> 2] | 0) + -4 >> 2] | 0) | 0)) ___assert_fail(24135, 22221, 4468, 24197);
  $call13 = __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE8is_arrayEv(HEAP32[(HEAP32[$__end_$i >> 2] | 0) + -4 >> 2] | 0) | 0;
  $10 = HEAP32[(HEAP32[$__end_$i >> 2] | 0) + -4 >> 2] | 0;
  if ($call13) {
   $11 = HEAP32[$10 + 8 >> 2] | 0;
   $__end_$i12 = $11 + 4 | 0;
   $12 = HEAP32[$__end_$i12 >> 2] | 0;
   if ($12 >>> 0 < (HEAP32[$11 + 8 >> 2] | 0) >>> 0) {
    __ZN8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEC2IRyyLi0EEEOT_($12, $v);
    HEAP32[$__end_$i12 >> 2] = (HEAP32[$__end_$i12 >> 2] | 0) + 16;
   } else __ZNSt3__26vectorIN8nlohmann10basic_jsonINS_3mapES0_NS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEbxydS7_NS1_14adl_serializerEEENS7_ISB_EEE24__emplace_back_slow_pathIJRyEEEvDpOT_($11, $v);
   $retval$0 = (HEAP32[(HEAP32[(HEAP32[(HEAP32[$__end_$i >> 2] | 0) + -4 >> 2] | 0) + 8 >> 2] | 0) + 4 >> 2] | 0) + -16 | 0;
   break;
  }
  if (!(__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE9is_objectEv($10) | 0)) ___assert_fail(24210, 22221, 4476, 24197);
  $object_element = $this + 16 | 0;
  if (!(HEAP32[$object_element >> 2] | 0)) ___assert_fail(24240, 22221, 4477, 24197); else {
   __ZN8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEC2IRyyLi0EEEOT_($agg$tmp32, $v);
   __ZN8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEaSESB_(HEAP32[$object_element >> 2] | 0, $agg$tmp32) | 0;
   __ZN8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEED2Ev($agg$tmp32);
   $retval$0 = HEAP32[$object_element >> 2] | 0;
   break;
  }
 } while (0);
 STACKTOP = sp;
 return $retval$0 | 0;
}

function __ZN8nlohmann6detail19json_sax_dom_parserINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE12handle_valueIRxEEPSD_OT_($this, $v) {
 $this = $this | 0;
 $v = $v | 0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $__end_$i = 0, $__end_$i12 = 0, $agg$tmp = 0, $agg$tmp32 = 0, $call13 = 0, $object_element = 0, $retval$0 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $agg$tmp = sp + 16 | 0;
 $agg$tmp32 = sp;
 $__end_$i = $this + 8 | 0;
 $1 = HEAP32[$__end_$i >> 2] | 0;
 do if ((HEAP32[$this + 4 >> 2] | 0) == ($1 | 0)) {
  __ZN8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEC2IRxxLi0EEEOT_($agg$tmp, $v);
  __ZN8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEaSESB_(HEAP32[$this >> 2] | 0, $agg$tmp) | 0;
  __ZN8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEED2Ev($agg$tmp);
  $retval$0 = HEAP32[$this >> 2] | 0;
 } else {
  if (!(__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE8is_arrayEv(HEAP32[$1 + -4 >> 2] | 0) | 0)) if (!(__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE9is_objectEv(HEAP32[(HEAP32[$__end_$i >> 2] | 0) + -4 >> 2] | 0) | 0)) ___assert_fail(24135, 22221, 4468, 24197);
  $call13 = __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE8is_arrayEv(HEAP32[(HEAP32[$__end_$i >> 2] | 0) + -4 >> 2] | 0) | 0;
  $10 = HEAP32[(HEAP32[$__end_$i >> 2] | 0) + -4 >> 2] | 0;
  if ($call13) {
   $11 = HEAP32[$10 + 8 >> 2] | 0;
   $__end_$i12 = $11 + 4 | 0;
   $12 = HEAP32[$__end_$i12 >> 2] | 0;
   if ($12 >>> 0 < (HEAP32[$11 + 8 >> 2] | 0) >>> 0) {
    __ZN8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEC2IRxxLi0EEEOT_($12, $v);
    HEAP32[$__end_$i12 >> 2] = (HEAP32[$__end_$i12 >> 2] | 0) + 16;
   } else __ZNSt3__26vectorIN8nlohmann10basic_jsonINS_3mapES0_NS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEbxydS7_NS1_14adl_serializerEEENS7_ISB_EEE24__emplace_back_slow_pathIJRxEEEvDpOT_($11, $v);
   $retval$0 = (HEAP32[(HEAP32[(HEAP32[(HEAP32[$__end_$i >> 2] | 0) + -4 >> 2] | 0) + 8 >> 2] | 0) + 4 >> 2] | 0) + -16 | 0;
   break;
  }
  if (!(__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE9is_objectEv($10) | 0)) ___assert_fail(24210, 22221, 4476, 24197);
  $object_element = $this + 16 | 0;
  if (!(HEAP32[$object_element >> 2] | 0)) ___assert_fail(24240, 22221, 4477, 24197); else {
   __ZN8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEC2IRxxLi0EEEOT_($agg$tmp32, $v);
   __ZN8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEaSESB_(HEAP32[$object_element >> 2] | 0, $agg$tmp32) | 0;
   __ZN8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEED2Ev($agg$tmp32);
   $retval$0 = HEAP32[$object_element >> 2] | 0;
   break;
  }
 } while (0);
 STACKTOP = sp;
 return $retval$0 | 0;
}

function __ZN8nlohmann6detail19json_sax_dom_parserINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE12handle_valueIRdEEPSD_OT_($this, $v) {
 $this = $this | 0;
 $v = $v | 0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $__end_$i = 0, $__end_$i12 = 0, $agg$tmp = 0, $agg$tmp32 = 0, $call13 = 0, $object_element = 0, $retval$0 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $agg$tmp = sp + 16 | 0;
 $agg$tmp32 = sp;
 $__end_$i = $this + 8 | 0;
 $1 = HEAP32[$__end_$i >> 2] | 0;
 do if ((HEAP32[$this + 4 >> 2] | 0) == ($1 | 0)) {
  __ZN8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEC2IRddLi0EEEOT_($agg$tmp, $v);
  __ZN8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEaSESB_(HEAP32[$this >> 2] | 0, $agg$tmp) | 0;
  __ZN8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEED2Ev($agg$tmp);
  $retval$0 = HEAP32[$this >> 2] | 0;
 } else {
  if (!(__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE8is_arrayEv(HEAP32[$1 + -4 >> 2] | 0) | 0)) if (!(__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE9is_objectEv(HEAP32[(HEAP32[$__end_$i >> 2] | 0) + -4 >> 2] | 0) | 0)) ___assert_fail(24135, 22221, 4468, 24197);
  $call13 = __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE8is_arrayEv(HEAP32[(HEAP32[$__end_$i >> 2] | 0) + -4 >> 2] | 0) | 0;
  $10 = HEAP32[(HEAP32[$__end_$i >> 2] | 0) + -4 >> 2] | 0;
  if ($call13) {
   $11 = HEAP32[$10 + 8 >> 2] | 0;
   $__end_$i12 = $11 + 4 | 0;
   $12 = HEAP32[$__end_$i12 >> 2] | 0;
   if ($12 >>> 0 < (HEAP32[$11 + 8 >> 2] | 0) >>> 0) {
    __ZN8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEC2IRddLi0EEEOT_($12, $v);
    HEAP32[$__end_$i12 >> 2] = (HEAP32[$__end_$i12 >> 2] | 0) + 16;
   } else __ZNSt3__26vectorIN8nlohmann10basic_jsonINS_3mapES0_NS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEbxydS7_NS1_14adl_serializerEEENS7_ISB_EEE24__emplace_back_slow_pathIJRdEEEvDpOT_($11, $v);
   $retval$0 = (HEAP32[(HEAP32[(HEAP32[(HEAP32[$__end_$i >> 2] | 0) + -4 >> 2] | 0) + 8 >> 2] | 0) + 4 >> 2] | 0) + -16 | 0;
   break;
  }
  if (!(__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE9is_objectEv($10) | 0)) ___assert_fail(24210, 22221, 4476, 24197);
  $object_element = $this + 16 | 0;
  if (!(HEAP32[$object_element >> 2] | 0)) ___assert_fail(24240, 22221, 4477, 24197); else {
   __ZN8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEC2IRddLi0EEEOT_($agg$tmp32, $v);
   __ZN8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEaSESB_(HEAP32[$object_element >> 2] | 0, $agg$tmp32) | 0;
   __ZN8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEED2Ev($agg$tmp32);
   $retval$0 = HEAP32[$object_element >> 2] | 0;
   break;
  }
 } while (0);
 STACKTOP = sp;
 return $retval$0 | 0;
}

function __ZN8nlohmann6detail19json_sax_dom_parserINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE12handle_valueIRbEEPSD_OT_($this, $v) {
 $this = $this | 0;
 $v = $v | 0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $__end_$i = 0, $__end_$i12 = 0, $agg$tmp = 0, $agg$tmp32 = 0, $call13 = 0, $object_element = 0, $retval$0 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $agg$tmp = sp + 16 | 0;
 $agg$tmp32 = sp;
 $__end_$i = $this + 8 | 0;
 $1 = HEAP32[$__end_$i >> 2] | 0;
 do if ((HEAP32[$this + 4 >> 2] | 0) == ($1 | 0)) {
  __ZN8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEC2IRbbLi0EEEOT_($agg$tmp, $v);
  __ZN8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEaSESB_(HEAP32[$this >> 2] | 0, $agg$tmp) | 0;
  __ZN8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEED2Ev($agg$tmp);
  $retval$0 = HEAP32[$this >> 2] | 0;
 } else {
  if (!(__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE8is_arrayEv(HEAP32[$1 + -4 >> 2] | 0) | 0)) if (!(__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE9is_objectEv(HEAP32[(HEAP32[$__end_$i >> 2] | 0) + -4 >> 2] | 0) | 0)) ___assert_fail(24135, 22221, 4468, 24197);
  $call13 = __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE8is_arrayEv(HEAP32[(HEAP32[$__end_$i >> 2] | 0) + -4 >> 2] | 0) | 0;
  $10 = HEAP32[(HEAP32[$__end_$i >> 2] | 0) + -4 >> 2] | 0;
  if ($call13) {
   $11 = HEAP32[$10 + 8 >> 2] | 0;
   $__end_$i12 = $11 + 4 | 0;
   $12 = HEAP32[$__end_$i12 >> 2] | 0;
   if ($12 >>> 0 < (HEAP32[$11 + 8 >> 2] | 0) >>> 0) {
    __ZN8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEC2IRbbLi0EEEOT_($12, $v);
    HEAP32[$__end_$i12 >> 2] = (HEAP32[$__end_$i12 >> 2] | 0) + 16;
   } else __ZNSt3__26vectorIN8nlohmann10basic_jsonINS_3mapES0_NS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEbxydS7_NS1_14adl_serializerEEENS7_ISB_EEE24__emplace_back_slow_pathIJRbEEEvDpOT_($11, $v);
   $retval$0 = (HEAP32[(HEAP32[(HEAP32[(HEAP32[$__end_$i >> 2] | 0) + -4 >> 2] | 0) + 8 >> 2] | 0) + 4 >> 2] | 0) + -16 | 0;
   break;
  }
  if (!(__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE9is_objectEv($10) | 0)) ___assert_fail(24210, 22221, 4476, 24197);
  $object_element = $this + 16 | 0;
  if (!(HEAP32[$object_element >> 2] | 0)) ___assert_fail(24240, 22221, 4477, 24197); else {
   __ZN8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEC2IRbbLi0EEEOT_($agg$tmp32, $v);
   __ZN8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEaSESB_(HEAP32[$object_element >> 2] | 0, $agg$tmp32) | 0;
   __ZN8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEED2Ev($agg$tmp32);
   $retval$0 = HEAP32[$object_element >> 2] | 0;
   break;
  }
 } while (0);
 STACKTOP = sp;
 return $retval$0 | 0;
}

function _stbir__buffer_loop_upsample($stbir_info) {
 $stbir_info = $stbir_info | 0;
 var $12 = f0, $13 = f0, $29 = 0, $45 = 0, $call = f0, $div = f0, $in_center_of_out = 0, $in_first_scanline = 0, $in_last_scanline = 0, $out_scanlines_radius = 0, $ring_buffer_first_scanline14 = 0, $scale_ratio = 0, $stbir_info$addr = 0, $y = 0, label = 0, sp = 0, CSE$0 = 0, CSE$1 = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $stbir_info$addr = sp + 24 | 0;
 $y = sp + 20 | 0;
 $scale_ratio = sp + 16 | 0;
 $out_scanlines_radius = sp + 12 | 0;
 $in_center_of_out = sp + 8 | 0;
 $in_first_scanline = sp + 4 | 0;
 $in_last_scanline = sp;
 HEAP32[$stbir_info$addr >> 2] = $stbir_info;
 HEAPF32[$scale_ratio >> 2] = Math_fround(HEAPF32[(HEAP32[$stbir_info$addr >> 2] | 0) + 60 >> 2]);
 $div = Math_fround(Math_fround(1.0) / Math_fround(HEAPF32[$scale_ratio >> 2]));
 $call = Math_fround(FUNCTION_TABLE_ff[HEAP32[6304 + (HEAP32[(HEAP32[$stbir_info$addr >> 2] | 0) + 84 >> 2] << 3) + 4 >> 2] & 7]($div));
 HEAPF32[$out_scanlines_radius >> 2] = Math_fround($call * Math_fround(HEAPF32[$scale_ratio >> 2]));
 if (!(_stbir__use_height_upsampling(HEAP32[$stbir_info$addr >> 2] | 0) | 0)) ___assert_fail(35773, 34244, 2069, 35814);
 HEAP32[$y >> 2] = 0;
 while (1) {
  if ((HEAP32[$y >> 2] | 0) >= (HEAP32[(HEAP32[$stbir_info$addr >> 2] | 0) + 24 >> 2] | 0)) {
   label = 19;
   break;
  }
  HEAPF32[$in_center_of_out >> 2] = Math_fround(0.0);
  HEAP32[$in_first_scanline >> 2] = 0;
  HEAP32[$in_last_scanline >> 2] = 0;
  $12 = Math_fround(HEAPF32[$out_scanlines_radius >> 2]);
  $13 = Math_fround(HEAPF32[$scale_ratio >> 2]);
  _stbir__calculate_sample_range_upsample(HEAP32[$y >> 2] | 0, $12, $13, Math_fround(HEAPF32[(HEAP32[$stbir_info$addr >> 2] | 0) + 52 >> 2]), $in_first_scanline, $in_last_scanline, $in_center_of_out);
  if (((HEAP32[$in_last_scanline >> 2] | 0) - (HEAP32[$in_first_scanline >> 2] | 0) + 1 | 0) > (HEAP32[(HEAP32[$stbir_info$addr >> 2] | 0) + 164 >> 2] | 0)) {
   label = 6;
   break;
  }
  L8 : do if ((HEAP32[(HEAP32[$stbir_info$addr >> 2] | 0) + 176 >> 2] | 0) >= 0) {
   while (1) {
    if ((HEAP32[$in_first_scanline >> 2] | 0) <= (HEAP32[(HEAP32[$stbir_info$addr >> 2] | 0) + 168 >> 2] | 0)) break L8;
    $29 = HEAP32[$stbir_info$addr >> 2] | 0;
    if ((HEAP32[(HEAP32[$stbir_info$addr >> 2] | 0) + 168 >> 2] | 0) == (HEAP32[(HEAP32[$stbir_info$addr >> 2] | 0) + 172 >> 2] | 0)) break;
    $ring_buffer_first_scanline14 = $29 + 168 | 0;
    HEAP32[$ring_buffer_first_scanline14 >> 2] = (HEAP32[$ring_buffer_first_scanline14 >> 2] | 0) + 1;
    CSE$0 = (HEAP32[$stbir_info$addr >> 2] | 0) + 176 | 0;
    CSE$1 = HEAP32[$stbir_info$addr >> 2] | 0;
    HEAP32[CSE$0 >> 2] = ((HEAP32[CSE$0 >> 2] | 0) + 1 | 0) % (HEAP32[CSE$1 + 164 >> 2] | 0) | 0;
   }
   HEAP32[$29 + 176 >> 2] = -1;
   HEAP32[(HEAP32[$stbir_info$addr >> 2] | 0) + 168 >> 2] = 0;
   HEAP32[(HEAP32[$stbir_info$addr >> 2] | 0) + 172 >> 2] = 0;
  } while (0);
  if ((HEAP32[(HEAP32[$stbir_info$addr >> 2] | 0) + 176 >> 2] | 0) < 0) _stbir__decode_and_resample_upsample(HEAP32[$stbir_info$addr >> 2] | 0, HEAP32[$in_first_scanline >> 2] | 0);
  while (1) {
   $45 = HEAP32[$stbir_info$addr >> 2] | 0;
   if ((HEAP32[$in_last_scanline >> 2] | 0) <= (HEAP32[(HEAP32[$stbir_info$addr >> 2] | 0) + 172 >> 2] | 0)) break;
   _stbir__decode_and_resample_upsample($45, (HEAP32[(HEAP32[$stbir_info$addr >> 2] | 0) + 172 >> 2] | 0) + 1 | 0);
  }
  _stbir__resample_vertical_upsample($45, HEAP32[$y >> 2] | 0);
  HEAP32[$y >> 2] = (HEAP32[$y >> 2] | 0) + 1;
 }
 if ((label | 0) == 6) ___assert_fail(35842, 34244, 2078, 35814); else if ((label | 0) == 19) {
  STACKTOP = sp;
  return;
 }
}

function _LoadKTX($agg$result, $fileName) {
 $agg$result = $agg$result | 0;
 $fileName = $fileName | 0;
 var $dataSize = 0, $fileName$addr = 0, $i = 0, $image = 0, $ktxFile = 0, $ktxHeader = 0, $unused = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer10 = 0, $vararg_buffer4 = 0, $vararg_buffer7 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(144);
 $vararg_buffer10 = sp + 32 | 0;
 $vararg_buffer7 = sp + 24 | 0;
 $vararg_buffer4 = sp + 16 | 0;
 $vararg_buffer1 = sp + 8 | 0;
 $vararg_buffer = sp;
 $fileName$addr = sp + 136 | 0;
 $image = sp + 116 | 0;
 $ktxFile = sp + 112 | 0;
 $ktxHeader = sp + 48 | 0;
 $unused = sp + 140 | 0;
 $i = sp + 40 | 0;
 $dataSize = sp + 36 | 0;
 HEAP32[$fileName$addr >> 2] = $fileName;
 HEAP32[$image >> 2] = 0;
 HEAP32[$image + 4 >> 2] = 0;
 HEAP32[$image + 8 >> 2] = 0;
 HEAP32[$image + 12 >> 2] = 0;
 HEAP32[$image + 16 >> 2] = 0;
 HEAP32[$ktxFile >> 2] = _fopen(HEAP32[$fileName$addr >> 2] | 0, 32752) | 0;
 if (!(HEAP32[$ktxFile >> 2] | 0)) {
  HEAP32[$vararg_buffer >> 2] = HEAP32[$fileName$addr >> 2];
  _TraceLog(4, 37141, $vararg_buffer);
  HEAP32[$agg$result >> 2] = HEAP32[$image >> 2];
  HEAP32[$agg$result + 4 >> 2] = HEAP32[$image + 4 >> 2];
  HEAP32[$agg$result + 8 >> 2] = HEAP32[$image + 8 >> 2];
  HEAP32[$agg$result + 12 >> 2] = HEAP32[$image + 12 >> 2];
  HEAP32[$agg$result + 16 >> 2] = HEAP32[$image + 16 >> 2];
  STACKTOP = sp;
  return;
 }
 _fread($ktxHeader, 64, 1, HEAP32[$ktxFile >> 2] | 0) | 0;
 do if ((HEAP8[$ktxHeader + 1 >> 0] | 0) != 75) label = 9; else if ((HEAP8[$ktxHeader + 2 >> 0] | 0) != 84) label = 9; else if ((HEAP8[$ktxHeader + 3 >> 0] | 0) != 88) label = 9; else if ((HEAP8[$ktxHeader + 4 >> 0] | 0) != 32) label = 9; else if ((HEAP8[$ktxHeader + 5 >> 0] | 0) != 49) label = 9; else if ((HEAP8[$ktxHeader + 6 >> 0] | 0) != 49) label = 9; else {
  HEAP32[$image + 4 >> 2] = HEAP32[$ktxHeader + 36 >> 2];
  HEAP32[$image + 8 >> 2] = HEAP32[$ktxHeader + 40 >> 2];
  HEAP32[$image + 12 >> 2] = HEAP32[$ktxHeader + 56 >> 2];
  HEAP32[$vararg_buffer4 >> 2] = HEAP32[$ktxHeader + 36 >> 2];
  _TraceLog(2, 37228, $vararg_buffer4);
  HEAP32[$vararg_buffer7 >> 2] = HEAP32[$ktxHeader + 40 >> 2];
  _TraceLog(2, 37254, $vararg_buffer7);
  HEAP32[$vararg_buffer10 >> 2] = HEAP32[$ktxHeader + 28 >> 2];
  _TraceLog(2, 37281, $vararg_buffer10);
  L12 : do if ((HEAP32[$ktxHeader + 60 >> 2] | 0) >>> 0 > 0) {
   HEAP32[$i >> 2] = 0;
   while (1) {
    if ((HEAP32[$i >> 2] | 0) >>> 0 >= (HEAP32[$ktxHeader + 60 >> 2] | 0) >>> 0) break L12;
    _fread($unused, 1, 1, HEAP32[$ktxFile >> 2] | 0) | 0;
    HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
   }
  } while (0);
  _fread($dataSize, 4, 1, HEAP32[$ktxFile >> 2] | 0) | 0;
  HEAP32[$image >> 2] = _malloc(HEAP32[$dataSize >> 2] | 0) | 0;
  _fread(HEAP32[$image >> 2] | 0, HEAP32[$dataSize >> 2] | 0, 1, HEAP32[$ktxFile >> 2] | 0) | 0;
  if ((HEAP32[$ktxHeader + 28 >> 2] | 0) == 36196) {
   HEAP32[$image + 16 >> 2] = 15;
   break;
  }
  if ((HEAP32[$ktxHeader + 28 >> 2] | 0) == 37492) {
   HEAP32[$image + 16 >> 2] = 16;
   break;
  }
  if ((HEAP32[$ktxHeader + 28 >> 2] | 0) == 37496) HEAP32[$image + 16 >> 2] = 17;
 } while (0);
 if ((label | 0) == 9) {
  HEAP32[$vararg_buffer1 >> 2] = HEAP32[$fileName$addr >> 2];
  _TraceLog(4, 37181, $vararg_buffer1);
 }
 _fclose(HEAP32[$ktxFile >> 2] | 0) | 0;
 HEAP32[$agg$result >> 2] = HEAP32[$image >> 2];
 HEAP32[$agg$result + 4 >> 2] = HEAP32[$image + 4 >> 2];
 HEAP32[$agg$result + 8 >> 2] = HEAP32[$image + 8 >> 2];
 HEAP32[$agg$result + 12 >> 2] = HEAP32[$image + 12 >> 2];
 HEAP32[$agg$result + 16 >> 2] = HEAP32[$image + 16 >> 2];
 STACKTOP = sp;
 return;
}

function __ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this, $info, $dst_ptr, $current_ptr, $path_below, $use_strcmp) {
 $this = $this | 0;
 $info = $info | 0;
 $dst_ptr = $dst_ptr | 0;
 $current_ptr = $current_ptr | 0;
 $path_below = $path_below | 0;
 $use_strcmp = $use_strcmp | 0;
 var $1 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $7 = 0, $8 = 0, $9 = 0, $__flags = 0, $add$ptr = 0, $found_any_static_type$0 = 0, $found_any_static_type$1$off0$in = 0, $found_any_static_type5 = 0, $found_our_static_ptr$0 = 0, $found_our_static_ptr$1$off0$in = 0, $found_our_static_ptr2 = 0, $or2438 = 0, $or37 = 0, $or5850 = 0, $or6651 = 0, $p$0 = 0, $path_dst_ptr_to_static_ptr = 0, $search_done = 0;
 if (__ZL8is_equalPKSt9type_infoS1_b($this, HEAP32[$info + 8 >> 2] | 0, $use_strcmp) | 0) __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0, $info, $dst_ptr, $current_ptr, $path_below); else {
  $found_our_static_ptr2 = $info + 52 | 0;
  $1 = HEAP8[$found_our_static_ptr2 >> 0] | 0;
  $found_any_static_type5 = $info + 53 | 0;
  $2 = HEAP8[$found_any_static_type5 >> 0] | 0;
  $3 = HEAP32[$this + 12 >> 2] | 0;
  $add$ptr = $this + 16 + ($3 << 3) | 0;
  HEAP8[$found_our_static_ptr2 >> 0] = 0;
  HEAP8[$found_any_static_type5 >> 0] = 0;
  __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this + 16 | 0, $info, $dst_ptr, $current_ptr, $path_below, $use_strcmp);
  $4 = HEAP8[$found_our_static_ptr2 >> 0] | 0;
  $or37 = $4 | $1;
  $5 = HEAP8[$found_any_static_type5 >> 0] | 0;
  $or2438 = $5 | $2;
  L4 : do if (($3 | 0) > 1) {
   $path_dst_ptr_to_static_ptr = $info + 24 | 0;
   $__flags = $this + 8 | 0;
   $search_done = $info + 54 | 0;
   $12 = $5;
   $9 = $4;
   $found_any_static_type$0 = $or2438;
   $found_our_static_ptr$0 = $or37;
   $p$0 = $this + 24 | 0;
   while (1) {
    $7 = $found_any_static_type$0 & 1;
    $8 = $found_our_static_ptr$0 & 1;
    if (HEAP8[$search_done >> 0] | 0) {
     $found_any_static_type$1$off0$in = $7;
     $found_our_static_ptr$1$off0$in = $8;
     break L4;
    }
    if (!($9 << 24 >> 24)) {
     if ($12 << 24 >> 24) if (!(HEAP32[$__flags >> 2] & 1)) {
      $found_any_static_type$1$off0$in = $7;
      $found_our_static_ptr$1$off0$in = $8;
      break L4;
     }
    } else {
     if ((HEAP32[$path_dst_ptr_to_static_ptr >> 2] | 0) == 1) {
      $found_any_static_type$1$off0$in = $7;
      $found_our_static_ptr$1$off0$in = $8;
      break L4;
     }
     if (!(HEAP32[$__flags >> 2] & 2)) {
      $found_any_static_type$1$off0$in = $7;
      $found_our_static_ptr$1$off0$in = $8;
      break L4;
     }
    }
    HEAP8[$found_our_static_ptr2 >> 0] = 0;
    HEAP8[$found_any_static_type5 >> 0] = 0;
    __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($p$0, $info, $dst_ptr, $current_ptr, $path_below, $use_strcmp);
    $9 = HEAP8[$found_our_static_ptr2 >> 0] | 0;
    $or5850 = $9 | $8;
    $12 = HEAP8[$found_any_static_type5 >> 0] | 0;
    $or6651 = $12 | $7;
    $p$0 = $p$0 + 8 | 0;
    if ($p$0 >>> 0 >= $add$ptr >>> 0) {
     $found_any_static_type$1$off0$in = $or6651;
     $found_our_static_ptr$1$off0$in = $or5850;
     break;
    } else {
     $found_any_static_type$0 = $or6651;
     $found_our_static_ptr$0 = $or5850;
    }
   }
  } else {
   $found_any_static_type$1$off0$in = $or2438;
   $found_our_static_ptr$1$off0$in = $or37;
  } while (0);
  HEAP8[$found_our_static_ptr2 >> 0] = $found_our_static_ptr$1$off0$in << 24 >> 24 != 0 & 1;
  HEAP8[$found_any_static_type5 >> 0] = $found_any_static_type$1$off0$in << 24 >> 24 != 0 & 1;
 }
 return;
}

function __ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwe($this, $__s, $__iob, $__fl, $__v) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__iob = $__iob | 0;
 $__fl = $__fl | 0;
 $__v = +$__v;
 var $0 = 0, $10 = 0, $11 = 0, $12 = 0, $7 = 0, $8 = 0, $__fmt = 0, $__nar = 0, $__nb = 0, $__nbh$sroa$0$0 = 0, $__nc$0 = 0, $__nc$1 = 0, $__nc$2 = 0, $__o = 0, $__ob$0 = 0, $__obh$sroa$0$0 = 0, $__oe = 0, $__op = 0, $add$ptr27 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call14 = 0, $call2 = 0, $call28 = 0, $call35 = 0, $call4 = 0, $call42 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer5 = 0, $vararg_buffer9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 352 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(352);
 $agg$tmp$byval_copy = sp + 344 | 0;
 $vararg_buffer9 = sp + 320 | 0;
 $vararg_buffer5 = sp + 304 | 0;
 $vararg_buffer2 = sp + 296 | 0;
 $vararg_buffer = sp + 280 | 0;
 $__fmt = sp + 272 | 0;
 $__nar = sp + 240 | 0;
 $__nb = sp + 340 | 0;
 $__o = sp;
 $__op = sp + 336 | 0;
 $__oe = sp + 332 | 0;
 $agg$tmp = sp + 328 | 0;
 $0 = $__fmt;
 HEAP32[$0 >> 2] = 37;
 HEAP32[$0 + 4 >> 2] = 0;
 $call2 = __ZNSt3__214__num_put_base14__format_floatEPcPKcj($__fmt + 1 | 0, 43067, HEAP32[$__iob + 4 >> 2] | 0) | 0;
 HEAP32[$__nb >> 2] = $__nar;
 $call4 = __ZNSt3__26__clocEv() | 0;
 if ($call2) {
  HEAP32[$vararg_buffer >> 2] = HEAP32[$__iob + 8 >> 2];
  HEAPF64[$vararg_buffer + 8 >> 3] = $__v;
  $__nc$0 = __ZNSt3__219__libcpp_snprintf_lEPcmP15__locale_structPKcz($__nar, 30, $call4, $__fmt, $vararg_buffer) | 0;
 } else {
  HEAPF64[$vararg_buffer2 >> 3] = $__v;
  $__nc$0 = __ZNSt3__219__libcpp_snprintf_lEPcmP15__locale_structPKcz($__nar, 30, $call4, $__fmt, $vararg_buffer2) | 0;
 }
 if (($__nc$0 | 0) > 29) {
  $call14 = __ZNSt3__26__clocEv() | 0;
  if ($call2) {
   HEAP32[$vararg_buffer5 >> 2] = HEAP32[$__iob + 8 >> 2];
   HEAPF64[$vararg_buffer5 + 8 >> 3] = $__v;
   $__nc$1 = __ZNSt3__219__libcpp_asprintf_lEPPcP15__locale_structPKcz($__nb, $call14, $__fmt, $vararg_buffer5) | 0;
  } else {
   HEAPF64[$vararg_buffer9 >> 3] = $__v;
   $__nc$1 = __ZNSt3__219__libcpp_asprintf_lEPPcP15__locale_structPKcz($__nb, $call14, $__fmt, $vararg_buffer9) | 0;
  }
  $7 = HEAP32[$__nb >> 2] | 0;
  if (!$7) __ZSt17__throw_bad_allocv(); else {
   $8 = $7;
   $__nbh$sroa$0$0 = $7;
   $__nc$2 = $__nc$1;
  }
 } else {
  $8 = HEAP32[$__nb >> 2] | 0;
  $__nbh$sroa$0$0 = 0;
  $__nc$2 = $__nc$0;
 }
 $add$ptr27 = $8 + $__nc$2 | 0;
 $call28 = __ZNSt3__214__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($8, $add$ptr27, $__iob) | 0;
 do if (($8 | 0) == ($__nar | 0)) {
  $12 = 0;
  $__ob$0 = $__o;
  $__obh$sroa$0$0 = 1;
 } else {
  $call35 = _malloc($__nc$2 << 3) | 0;
  if (!$call35) __ZSt17__throw_bad_allocv(); else {
   $12 = $call35;
   $__ob$0 = $call35;
   $__obh$sroa$0$0 = 0;
   break;
  }
 } while (0);
 __ZNKSt3__28ios_base6getlocEv($agg$tmp$byval_copy, $__iob);
 __ZNSt3__29__num_putIwE23__widen_and_group_floatEPcS2_S2_PwRS3_S4_RKNS_6localeE($8, $call28, $add$ptr27, $__ob$0, $__op, $__oe, $agg$tmp$byval_copy);
 __ZNSt3__26localeD2Ev($agg$tmp$byval_copy);
 HEAP32[$agg$tmp >> 2] = HEAP32[$__s >> 2];
 $10 = HEAP32[$__op >> 2] | 0;
 $11 = HEAP32[$__oe >> 2] | 0;
 HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 $call42 = __ZNSt3__216__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$tmp$byval_copy, $__ob$0, $10, $11, $__iob, $__fl) | 0;
 HEAP32[$__s >> 2] = $call42;
 if (!$__obh$sroa$0$0) _free($12);
 _free($__nbh$sroa$0$0);
 STACKTOP = sp;
 return $call42 | 0;
}

function __ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwd($this, $__s, $__iob, $__fl, $__v) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__iob = $__iob | 0;
 $__fl = $__fl | 0;
 $__v = +$__v;
 var $0 = 0, $10 = 0, $11 = 0, $12 = 0, $7 = 0, $8 = 0, $__fmt = 0, $__nar = 0, $__nb = 0, $__nbh$sroa$0$0 = 0, $__nc$0 = 0, $__nc$1 = 0, $__nc$2 = 0, $__o = 0, $__ob$0 = 0, $__obh$sroa$0$0 = 0, $__oe = 0, $__op = 0, $add$ptr27 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call14 = 0, $call2 = 0, $call28 = 0, $call35 = 0, $call4 = 0, $call42 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer5 = 0, $vararg_buffer9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 352 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(352);
 $agg$tmp$byval_copy = sp + 344 | 0;
 $vararg_buffer9 = sp + 320 | 0;
 $vararg_buffer5 = sp + 304 | 0;
 $vararg_buffer2 = sp + 296 | 0;
 $vararg_buffer = sp + 280 | 0;
 $__fmt = sp + 272 | 0;
 $__nar = sp + 240 | 0;
 $__nb = sp + 340 | 0;
 $__o = sp;
 $__op = sp + 336 | 0;
 $__oe = sp + 332 | 0;
 $agg$tmp = sp + 328 | 0;
 $0 = $__fmt;
 HEAP32[$0 >> 2] = 37;
 HEAP32[$0 + 4 >> 2] = 0;
 $call2 = __ZNSt3__214__num_put_base14__format_floatEPcPKcj($__fmt + 1 | 0, 62173, HEAP32[$__iob + 4 >> 2] | 0) | 0;
 HEAP32[$__nb >> 2] = $__nar;
 $call4 = __ZNSt3__26__clocEv() | 0;
 if ($call2) {
  HEAP32[$vararg_buffer >> 2] = HEAP32[$__iob + 8 >> 2];
  HEAPF64[$vararg_buffer + 8 >> 3] = $__v;
  $__nc$0 = __ZNSt3__219__libcpp_snprintf_lEPcmP15__locale_structPKcz($__nar, 30, $call4, $__fmt, $vararg_buffer) | 0;
 } else {
  HEAPF64[$vararg_buffer2 >> 3] = $__v;
  $__nc$0 = __ZNSt3__219__libcpp_snprintf_lEPcmP15__locale_structPKcz($__nar, 30, $call4, $__fmt, $vararg_buffer2) | 0;
 }
 if (($__nc$0 | 0) > 29) {
  $call14 = __ZNSt3__26__clocEv() | 0;
  if ($call2) {
   HEAP32[$vararg_buffer5 >> 2] = HEAP32[$__iob + 8 >> 2];
   HEAPF64[$vararg_buffer5 + 8 >> 3] = $__v;
   $__nc$1 = __ZNSt3__219__libcpp_asprintf_lEPPcP15__locale_structPKcz($__nb, $call14, $__fmt, $vararg_buffer5) | 0;
  } else {
   HEAPF64[$vararg_buffer9 >> 3] = $__v;
   $__nc$1 = __ZNSt3__219__libcpp_asprintf_lEPPcP15__locale_structPKcz($__nb, $call14, $__fmt, $vararg_buffer9) | 0;
  }
  $7 = HEAP32[$__nb >> 2] | 0;
  if (!$7) __ZSt17__throw_bad_allocv(); else {
   $8 = $7;
   $__nbh$sroa$0$0 = $7;
   $__nc$2 = $__nc$1;
  }
 } else {
  $8 = HEAP32[$__nb >> 2] | 0;
  $__nbh$sroa$0$0 = 0;
  $__nc$2 = $__nc$0;
 }
 $add$ptr27 = $8 + $__nc$2 | 0;
 $call28 = __ZNSt3__214__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($8, $add$ptr27, $__iob) | 0;
 do if (($8 | 0) == ($__nar | 0)) {
  $12 = 0;
  $__ob$0 = $__o;
  $__obh$sroa$0$0 = 1;
 } else {
  $call35 = _malloc($__nc$2 << 3) | 0;
  if (!$call35) __ZSt17__throw_bad_allocv(); else {
   $12 = $call35;
   $__ob$0 = $call35;
   $__obh$sroa$0$0 = 0;
   break;
  }
 } while (0);
 __ZNKSt3__28ios_base6getlocEv($agg$tmp$byval_copy, $__iob);
 __ZNSt3__29__num_putIwE23__widen_and_group_floatEPcS2_S2_PwRS3_S4_RKNS_6localeE($8, $call28, $add$ptr27, $__ob$0, $__op, $__oe, $agg$tmp$byval_copy);
 __ZNSt3__26localeD2Ev($agg$tmp$byval_copy);
 HEAP32[$agg$tmp >> 2] = HEAP32[$__s >> 2];
 $10 = HEAP32[$__op >> 2] | 0;
 $11 = HEAP32[$__oe >> 2] | 0;
 HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 $call42 = __ZNSt3__216__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$tmp$byval_copy, $__ob$0, $10, $11, $__iob, $__fl) | 0;
 HEAP32[$__s >> 2] = $call42;
 if (!$__obh$sroa$0$0) _free($12);
 _free($__nbh$sroa$0$0);
 STACKTOP = sp;
 return $call42 | 0;
}

function ___stpncpy($d, $s, $n) {
 $d = $d | 0;
 $s = $s | 0;
 $n = $n | 0;
 var $0 = 0, $4 = 0, $6 = 0, $7 = 0, $d$addr$0$lcssa = 0, $d$addr$051 = 0, $d$addr$1 = 0, $d$addr$231 = 0, $d$addr$3 = 0, $dec = 0, $incdec$ptr = 0, $incdec$ptr20 = 0, $incdec$ptr21 = 0, $incdec$ptr34 = 0, $incdec$ptr5 = 0, $n$addr$0$lcssa = 0, $n$addr$053 = 0, $n$addr$1$lcssa = 0, $n$addr$138 = 0, $n$addr$2 = 0, $n$addr$333 = 0, $n$addr$4 = 0, $s$addr$0$lcssa = 0, $s$addr$052 = 0, $s$addr$1 = 0, $s$addr$232 = 0, $sub19 = 0, $tobool3 = 0, $tobool3$lcssa = 0, $tobool349 = 0, $wd$0$lcssa = 0, $wd$039 = 0, $ws$0$lcssa = 0, $ws$040 = 0, label = 0;
 label = 0;
 $0 = $s;
 L1 : do if (!(($0 ^ $d) & 3)) {
  $tobool349 = ($n | 0) != 0;
  if ($tobool349 & ($0 & 3 | 0) != 0) {
   $d$addr$051 = $d;
   $n$addr$053 = $n;
   $s$addr$052 = $s;
   while (1) {
    $4 = HEAP8[$s$addr$052 >> 0] | 0;
    HEAP8[$d$addr$051 >> 0] = $4;
    if (!($4 << 24 >> 24)) {
     $d$addr$3 = $d$addr$051;
     $n$addr$4 = $n$addr$053;
     break L1;
    }
    $dec = $n$addr$053 + -1 | 0;
    $incdec$ptr = $s$addr$052 + 1 | 0;
    $incdec$ptr5 = $d$addr$051 + 1 | 0;
    $tobool3 = ($dec | 0) != 0;
    if ($tobool3 & ($incdec$ptr & 3 | 0) != 0) {
     $d$addr$051 = $incdec$ptr5;
     $n$addr$053 = $dec;
     $s$addr$052 = $incdec$ptr;
    } else {
     $d$addr$0$lcssa = $incdec$ptr5;
     $n$addr$0$lcssa = $dec;
     $s$addr$0$lcssa = $incdec$ptr;
     $tobool3$lcssa = $tobool3;
     break;
    }
   }
  } else {
   $d$addr$0$lcssa = $d;
   $n$addr$0$lcssa = $n;
   $s$addr$0$lcssa = $s;
   $tobool3$lcssa = $tobool349;
  }
  if ($tobool3$lcssa) if (!(HEAP8[$s$addr$0$lcssa >> 0] | 0)) {
   $d$addr$3 = $d$addr$0$lcssa;
   $n$addr$4 = $n$addr$0$lcssa;
  } else {
   L11 : do if ($n$addr$0$lcssa >>> 0 > 3) {
    $n$addr$138 = $n$addr$0$lcssa;
    $wd$039 = $d$addr$0$lcssa;
    $ws$040 = $s$addr$0$lcssa;
    while (1) {
     $6 = HEAP32[$ws$040 >> 2] | 0;
     if (($6 & -2139062144 ^ -2139062144) & $6 + -16843009 | 0) {
      $n$addr$1$lcssa = $n$addr$138;
      $wd$0$lcssa = $wd$039;
      $ws$0$lcssa = $ws$040;
      break L11;
     }
     HEAP32[$wd$039 >> 2] = $6;
     $sub19 = $n$addr$138 + -4 | 0;
     $incdec$ptr20 = $ws$040 + 4 | 0;
     $incdec$ptr21 = $wd$039 + 4 | 0;
     if ($sub19 >>> 0 > 3) {
      $n$addr$138 = $sub19;
      $wd$039 = $incdec$ptr21;
      $ws$040 = $incdec$ptr20;
     } else {
      $n$addr$1$lcssa = $sub19;
      $wd$0$lcssa = $incdec$ptr21;
      $ws$0$lcssa = $incdec$ptr20;
      break;
     }
    }
   } else {
    $n$addr$1$lcssa = $n$addr$0$lcssa;
    $wd$0$lcssa = $d$addr$0$lcssa;
    $ws$0$lcssa = $s$addr$0$lcssa;
   } while (0);
   $d$addr$1 = $wd$0$lcssa;
   $n$addr$2 = $n$addr$1$lcssa;
   $s$addr$1 = $ws$0$lcssa;
   label = 13;
  } else {
   $d$addr$3 = $d$addr$0$lcssa;
   $n$addr$4 = 0;
  }
 } else {
  $d$addr$1 = $d;
  $n$addr$2 = $n;
  $s$addr$1 = $s;
  label = 13;
 } while (0);
 L17 : do if ((label | 0) == 13) if (!$n$addr$2) {
  $d$addr$3 = $d$addr$1;
  $n$addr$4 = 0;
 } else {
  $d$addr$231 = $d$addr$1;
  $n$addr$333 = $n$addr$2;
  $s$addr$232 = $s$addr$1;
  while (1) {
   $7 = HEAP8[$s$addr$232 >> 0] | 0;
   HEAP8[$d$addr$231 >> 0] = $7;
   if (!($7 << 24 >> 24)) {
    $d$addr$3 = $d$addr$231;
    $n$addr$4 = $n$addr$333;
    break L17;
   }
   $n$addr$333 = $n$addr$333 + -1 | 0;
   $incdec$ptr34 = $d$addr$231 + 1 | 0;
   if (!$n$addr$333) {
    $d$addr$3 = $incdec$ptr34;
    $n$addr$4 = 0;
    break;
   } else {
    $d$addr$231 = $incdec$ptr34;
    $s$addr$232 = $s$addr$232 + 1 | 0;
   }
  }
 } while (0);
 _memset($d$addr$3 | 0, 0, $n$addr$4 | 0) | 0;
 return $d$addr$3 | 0;
}

function _scanexp($f, $pok) {
 $f = $f | 0;
 $pok = $pok | 0;
 var $0 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $21 = 0, $25 = 0, $3 = 0, $34 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $45 = 0, $46 = 0, $9 = 0, $c$0 = 0, $c$146 = 0, $c$241 = 0, $cond = 0, $cond106 = 0, $cond19 = 0, $cond60 = 0, $cond87 = 0, $conv7 = 0, $neg$0 = 0, $rpos = 0, $shend = 0, $sub = 0, $sub31$pre$phiZ2D = 0, $sub43 = 0, $sub63 = 0, $tobool115 = 0, $x$047 = 0, label = 0;
 label = 0;
 $rpos = $f + 4 | 0;
 $0 = HEAP32[$rpos >> 2] | 0;
 $shend = $f + 104 | 0;
 if ($0 >>> 0 < (HEAP32[$shend >> 2] | 0) >>> 0) {
  HEAP32[$rpos >> 2] = $0 + 1;
  $cond = HEAPU8[$0 >> 0] | 0;
 } else $cond = ___shgetc($f) | 0;
 switch ($cond | 0) {
 case 43:
 case 45:
  {
   $conv7 = ($cond | 0) == 45 & 1;
   $3 = HEAP32[$rpos >> 2] | 0;
   if ($3 >>> 0 < (HEAP32[$shend >> 2] | 0) >>> 0) {
    HEAP32[$rpos >> 2] = $3 + 1;
    $cond19 = HEAPU8[$3 >> 0] | 0;
   } else $cond19 = ___shgetc($f) | 0;
   $sub = $cond19 + -48 | 0;
   if (($pok | 0) != 0 & $sub >>> 0 > 9) if (!(HEAP32[$shend >> 2] | 0)) {
    $45 = -2147483648;
    $46 = 0;
   } else {
    HEAP32[$rpos >> 2] = (HEAP32[$rpos >> 2] | 0) + -1;
    label = 14;
   } else {
    $c$0 = $cond19;
    $neg$0 = $conv7;
    $sub31$pre$phiZ2D = $sub;
    label = 12;
   }
   break;
  }
 default:
  {
   $c$0 = $cond;
   $neg$0 = 0;
   $sub31$pre$phiZ2D = $cond + -48 | 0;
   label = 12;
  }
 }
 if ((label | 0) == 12) if ($sub31$pre$phiZ2D >>> 0 > 9) label = 14; else {
  $c$146 = $c$0;
  $x$047 = 0;
  while (1) {
   $x$047 = $c$146 + -48 + ($x$047 * 10 | 0) | 0;
   $9 = HEAP32[$rpos >> 2] | 0;
   if ($9 >>> 0 < (HEAP32[$shend >> 2] | 0) >>> 0) {
    HEAP32[$rpos >> 2] = $9 + 1;
    $cond60 = HEAPU8[$9 >> 0] | 0;
   } else $cond60 = ___shgetc($f) | 0;
   $sub43 = $cond60 + -48 | 0;
   if (!($sub43 >>> 0 < 10 & ($x$047 | 0) < 214748364)) break; else $c$146 = $cond60;
  }
  $14 = (($x$047 | 0) < 0) << 31 >> 31;
  if ($sub43 >>> 0 < 10) {
   $15 = $x$047;
   $16 = $14;
   $c$241 = $cond60;
   while (1) {
    $17 = ___muldi3($15 | 0, $16 | 0, 10, 0) | 0;
    $18 = getTempRet0() | 0;
    $21 = _i64Add($c$241 | 0, (($c$241 | 0) < 0) << 31 >> 31 | 0, -48, -1) | 0;
    $15 = _i64Add($21 | 0, getTempRet0() | 0, $17 | 0, $18 | 0) | 0;
    $16 = getTempRet0() | 0;
    $25 = HEAP32[$rpos >> 2] | 0;
    if ($25 >>> 0 < (HEAP32[$shend >> 2] | 0) >>> 0) {
     HEAP32[$rpos >> 2] = $25 + 1;
     $cond87 = HEAPU8[$25 >> 0] | 0;
    } else $cond87 = ___shgetc($f) | 0;
    $sub63 = $cond87 + -48 | 0;
    if (!($sub63 >>> 0 < 10 & (($16 | 0) < 21474836 | ($16 | 0) == 21474836 & $15 >>> 0 < 2061584302))) break; else $c$241 = $cond87;
   }
   if ($sub63 >>> 0 < 10) {
    do {
     $34 = HEAP32[$rpos >> 2] | 0;
     if ($34 >>> 0 < (HEAP32[$shend >> 2] | 0) >>> 0) {
      HEAP32[$rpos >> 2] = $34 + 1;
      $cond106 = HEAPU8[$34 >> 0] | 0;
     } else $cond106 = ___shgetc($f) | 0;
    } while (($cond106 + -48 | 0) >>> 0 < 10);
    $39 = $15;
    $40 = $16;
   } else {
    $39 = $15;
    $40 = $16;
   }
  } else {
   $39 = $x$047;
   $40 = $14;
  }
  if (HEAP32[$shend >> 2] | 0) HEAP32[$rpos >> 2] = (HEAP32[$rpos >> 2] | 0) + -1;
  $tobool115 = ($neg$0 | 0) == 0;
  $41 = _i64Subtract(0, 0, $39 | 0, $40 | 0) | 0;
  $42 = getTempRet0() | 0;
  $45 = $tobool115 ? $40 : $42;
  $46 = $tobool115 ? $39 : $41;
 }
 if ((label | 0) == 14) if (!(HEAP32[$shend >> 2] | 0)) {
  $45 = -2147483648;
  $46 = 0;
 } else {
  HEAP32[$rpos >> 2] = (HEAP32[$rpos >> 2] | 0) + -1;
  $45 = -2147483648;
  $46 = 0;
 }
 setTempRet0($45 | 0);
 return $46 | 0;
}

function _rlEnd() {
 var $addColors = 0, $addTexCoords = 0, $cCounter60 = 0, $i = 0, $i100 = 0, $i72 = 0, $tcCounter89 = 0, sp = 0, CSE$0 = 0, CSE$1 = 0, CSE$2 = 0, CSE$3 = 0, CSE$4 = 0, CSE$5 = 0, CSE$6 = 0, CSE$7 = 0, CSE$8 = 0, CSE$9 = 0, CSE$10 = 0, CSE$11 = 0, CSE$12 = 0, CSE$13 = 0, CSE$14 = 0, CSE$15 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $addColors = sp + 16 | 0;
 $i = sp + 12 | 0;
 $addTexCoords = sp + 8 | 0;
 $i72 = sp + 4 | 0;
 $i100 = sp;
 L1 : do if ((HEAP32[47408 + ((HEAP32[14847] | 0) * 48 | 0) >> 2] | 0) != (HEAP32[47408 + ((HEAP32[14847] | 0) * 48 | 0) + 8 >> 2] | 0)) {
  CSE$0 = 47408 + ((HEAP32[14847] | 0) * 48 | 0) | 0;
  HEAP32[$addColors >> 2] = (HEAP32[CSE$0 >> 2] | 0) - (HEAP32[CSE$0 + 8 >> 2] | 0);
  HEAP32[$i >> 2] = 0;
  while (1) {
   if ((HEAP32[$i >> 2] | 0) >= (HEAP32[$addColors >> 2] | 0)) break L1;
   CSE$1 = 47408 + ((HEAP32[14847] | 0) * 48 | 0) | 0;
   CSE$2 = HEAP32[47408 + ((HEAP32[14847] | 0) * 48 | 0) + 20 >> 2] | 0;
   CSE$3 = HEAP32[47408 + ((HEAP32[14847] | 0) * 48 | 0) + 8 >> 2] << 2 | 0;
   HEAP8[CSE$2 + CSE$3 >> 0] = HEAP8[CSE$2 + (CSE$3 - 4) >> 0] | 0;
   CSE$4 = 47408 + ((HEAP32[14847] | 0) * 48 | 0) | 0;
   CSE$5 = HEAP32[47408 + ((HEAP32[14847] | 0) * 48 | 0) + 20 >> 2] | 0;
   CSE$6 = HEAP32[47408 + ((HEAP32[14847] | 0) * 48 | 0) + 8 >> 2] << 2 | 0;
   HEAP8[CSE$5 + (CSE$6 + 1) >> 0] = HEAP8[CSE$5 + (CSE$6 - 3) >> 0] | 0;
   CSE$7 = 47408 + ((HEAP32[14847] | 0) * 48 | 0) | 0;
   CSE$8 = HEAP32[47408 + ((HEAP32[14847] | 0) * 48 | 0) + 20 >> 2] | 0;
   CSE$9 = HEAP32[47408 + ((HEAP32[14847] | 0) * 48 | 0) + 8 >> 2] << 2 | 0;
   HEAP8[CSE$8 + (CSE$9 + 2) >> 0] = HEAP8[CSE$8 + (CSE$9 - 2) >> 0] | 0;
   CSE$10 = 47408 + ((HEAP32[14847] | 0) * 48 | 0) | 0;
   CSE$11 = HEAP32[47408 + ((HEAP32[14847] | 0) * 48 | 0) + 20 >> 2] | 0;
   CSE$12 = HEAP32[47408 + ((HEAP32[14847] | 0) * 48 | 0) + 8 >> 2] << 2 | 0;
   HEAP8[CSE$11 + (CSE$12 + 3) >> 0] = HEAP8[CSE$11 + (CSE$12 - 1) >> 0] | 0;
   $cCounter60 = 47408 + ((HEAP32[14847] | 0) * 48 | 0) + 8 | 0;
   HEAP32[$cCounter60 >> 2] = (HEAP32[$cCounter60 >> 2] | 0) + 1;
   HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
  }
 } while (0);
 L7 : do if ((HEAP32[47408 + ((HEAP32[14847] | 0) * 48 | 0) >> 2] | 0) != (HEAP32[47408 + ((HEAP32[14847] | 0) * 48 | 0) + 4 >> 2] | 0)) {
  CSE$13 = 47408 + ((HEAP32[14847] | 0) * 48 | 0) | 0;
  HEAP32[$addTexCoords >> 2] = (HEAP32[CSE$13 >> 2] | 0) - (HEAP32[CSE$13 + 4 >> 2] | 0);
  HEAP32[$i72 >> 2] = 0;
  while (1) {
   if ((HEAP32[$i72 >> 2] | 0) >= (HEAP32[$addTexCoords >> 2] | 0)) break L7;
   CSE$14 = 47408 + ((HEAP32[14847] | 0) * 48 | 0) | 0;
   HEAPF32[(HEAP32[CSE$14 + 16 >> 2] | 0) + (HEAP32[CSE$14 + 4 >> 2] << 1 << 2) >> 2] = Math_fround(0.0);
   CSE$15 = 47408 + ((HEAP32[14847] | 0) * 48 | 0) | 0;
   HEAPF32[(HEAP32[CSE$15 + 16 >> 2] | 0) + ((HEAP32[CSE$15 + 4 >> 2] << 1) + 1 << 2) >> 2] = Math_fround(0.0);
   $tcCounter89 = 47408 + ((HEAP32[14847] | 0) * 48 | 0) + 4 | 0;
   HEAP32[$tcCounter89 >> 2] = (HEAP32[$tcCounter89 >> 2] | 0) + 1;
   HEAP32[$i72 >> 2] = (HEAP32[$i72 >> 2] | 0) + 1;
  }
 } while (0);
 HEAPF32[4479] = Math_fround(Math_fround(HEAPF32[4479]) + Math_fround(.0000499999987));
 if ((HEAP32[47408 + ((HEAP32[14847] | 0) * 48 | 0) >> 2] | 0) < 8188) {
  STACKTOP = sp;
  return;
 }
 HEAP32[$i100 >> 2] = HEAP32[14828];
 while (1) {
  if ((HEAP32[$i100 >> 2] | 0) < 0) break;
  _rlPopMatrix();
  HEAP32[$i100 >> 2] = (HEAP32[$i100 >> 2] | 0) + -1;
 }
 _rlglDraw();
 STACKTOP = sp;
 return;
}

function _CheckCollisionCircleRec($center, $radius, $rec) {
 $center = $center | 0;
 $radius = Math_fround($radius);
 $rec = $rec | 0;
 var $$pre_trunc = 0, $0 = f0, $10 = f0, $13 = f0, $16 = f0, $18 = f0, $2 = f0, $20 = f0, $22 = f0, $24 = f0, $26 = f0, $28 = f0, $29 = f0, $31 = 0, $4 = f0, $7 = f0, $cornerDistanceSq = 0, $div14 = f0, $div18 = f0, $dx = 0, $dy = 0, $mul = f0, $radius$addr = 0, $recCenterX = 0, $recCenterY = 0, $retval = 0, $sub38 = f0, $sub44 = f0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $retval = sp + 24 | 0;
 $radius$addr = sp + 20 | 0;
 $recCenterX = sp + 16 | 0;
 $recCenterY = sp + 12 | 0;
 $dx = sp + 8 | 0;
 $dy = sp + 4 | 0;
 $cornerDistanceSq = sp;
 HEAPF32[$radius$addr >> 2] = $radius;
 $0 = Math_fround(HEAPF32[$rec >> 2]);
 HEAP32[$recCenterX >> 2] = ~~Math_fround($0 + Math_fround(Math_fround(HEAPF32[$rec + 8 >> 2]) / Math_fround(2.0)));
 $2 = Math_fround(HEAPF32[$rec + 4 >> 2]);
 HEAP32[$recCenterY >> 2] = ~~Math_fround($2 + Math_fround(Math_fround(HEAPF32[$rec + 12 >> 2]) / Math_fround(2.0)));
 $4 = Math_fround(HEAPF32[$center >> 2]);
 HEAPF32[$dx >> 2] = Math_fround(+Math_abs(+(+Math_fround($4 - Math_fround(HEAP32[$recCenterX >> 2] | 0)))));
 $7 = Math_fround(HEAPF32[$center + 4 >> 2]);
 HEAPF32[$dy >> 2] = Math_fround(+Math_abs(+(+Math_fround($7 - Math_fround(HEAP32[$recCenterY >> 2] | 0)))));
 $10 = Math_fround(HEAPF32[$dx >> 2]);
 $div14 = Math_fround(Math_fround(HEAPF32[$rec + 8 >> 2]) / Math_fround(2.0));
 if ($10 > Math_fround($div14 + Math_fround(HEAPF32[$radius$addr >> 2]))) {
  HEAP8[$retval >> 0] = 0;
  $$pre_trunc = HEAP8[$retval >> 0] | 0;
  $31 = $$pre_trunc & 1;
  STACKTOP = sp;
  return $31 | 0;
 }
 $13 = Math_fround(HEAPF32[$dy >> 2]);
 $div18 = Math_fround(Math_fround(HEAPF32[$rec + 12 >> 2]) / Math_fround(2.0));
 if ($13 > Math_fround($div18 + Math_fround(HEAPF32[$radius$addr >> 2]))) {
  HEAP8[$retval >> 0] = 0;
  $$pre_trunc = HEAP8[$retval >> 0] | 0;
  $31 = $$pre_trunc & 1;
  STACKTOP = sp;
  return $31 | 0;
 }
 $16 = Math_fround(HEAPF32[$dx >> 2]);
 if ($16 <= Math_fround(Math_fround(HEAPF32[$rec + 8 >> 2]) / Math_fround(2.0))) {
  HEAP8[$retval >> 0] = 1;
  $$pre_trunc = HEAP8[$retval >> 0] | 0;
  $31 = $$pre_trunc & 1;
  STACKTOP = sp;
  return $31 | 0;
 }
 $18 = Math_fround(HEAPF32[$dy >> 2]);
 if ($18 <= Math_fround(Math_fround(HEAPF32[$rec + 12 >> 2]) / Math_fround(2.0))) {
  HEAP8[$retval >> 0] = 1;
  $$pre_trunc = HEAP8[$retval >> 0] | 0;
  $31 = $$pre_trunc & 1;
  STACKTOP = sp;
  return $31 | 0;
 } else {
  $20 = Math_fround(HEAPF32[$dx >> 2]);
  $sub38 = Math_fround($20 - Math_fround(Math_fround(HEAPF32[$rec + 8 >> 2]) / Math_fround(2.0)));
  $22 = Math_fround(HEAPF32[$dx >> 2]);
  $mul = Math_fround($sub38 * Math_fround($22 - Math_fround(Math_fround(HEAPF32[$rec + 8 >> 2]) / Math_fround(2.0))));
  $24 = Math_fround(HEAPF32[$dy >> 2]);
  $sub44 = Math_fround($24 - Math_fround(Math_fround(HEAPF32[$rec + 12 >> 2]) / Math_fround(2.0)));
  $26 = Math_fround(HEAPF32[$dy >> 2]);
  HEAPF32[$cornerDistanceSq >> 2] = Math_fround($mul + Math_fround($sub44 * Math_fround($26 - Math_fround(Math_fround(HEAPF32[$rec + 12 >> 2]) / Math_fround(2.0)))));
  $28 = Math_fround(HEAPF32[$cornerDistanceSq >> 2]);
  $29 = Math_fround(HEAPF32[$radius$addr >> 2]);
  HEAP8[$retval >> 0] = $28 <= Math_fround($29 * Math_fround(HEAPF32[$radius$addr >> 2])) & 1;
  $$pre_trunc = HEAP8[$retval >> 0] | 0;
  $31 = $$pre_trunc & 1;
  STACKTOP = sp;
  return $31 | 0;
 }
 return 0;
}

function __ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEce($this, $__s, $__iob, $__fl, $__v) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__iob = $__iob | 0;
 $__fl = $__fl | 0;
 $__v = +$__v;
 var $0 = 0, $10 = 0, $11 = 0, $7 = 0, $8 = 0, $__fmt = 0, $__nar = 0, $__nb = 0, $__nbh$sroa$0$0 = 0, $__nc$0 = 0, $__nc$1 = 0, $__nc$2 = 0, $__o = 0, $__ob$0 = 0, $__obh$sroa$0$0 = 0, $__oe = 0, $__op = 0, $add$ptr27 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call14 = 0, $call2 = 0, $call28 = 0, $call35 = 0, $call4 = 0, $call42 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer5 = 0, $vararg_buffer9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(176);
 $agg$tmp$byval_copy = sp + 168 | 0;
 $vararg_buffer9 = sp + 144 | 0;
 $vararg_buffer5 = sp + 128 | 0;
 $vararg_buffer2 = sp + 120 | 0;
 $vararg_buffer = sp + 104 | 0;
 $__fmt = sp + 96 | 0;
 $__nar = sp + 64 | 0;
 $__nb = sp + 164 | 0;
 $__o = sp;
 $__op = sp + 160 | 0;
 $__oe = sp + 156 | 0;
 $agg$tmp = sp + 152 | 0;
 $0 = $__fmt;
 HEAP32[$0 >> 2] = 37;
 HEAP32[$0 + 4 >> 2] = 0;
 $call2 = __ZNSt3__214__num_put_base14__format_floatEPcPKcj($__fmt + 1 | 0, 43067, HEAP32[$__iob + 4 >> 2] | 0) | 0;
 HEAP32[$__nb >> 2] = $__nar;
 $call4 = __ZNSt3__26__clocEv() | 0;
 if ($call2) {
  HEAP32[$vararg_buffer >> 2] = HEAP32[$__iob + 8 >> 2];
  HEAPF64[$vararg_buffer + 8 >> 3] = $__v;
  $__nc$0 = __ZNSt3__219__libcpp_snprintf_lEPcmP15__locale_structPKcz($__nar, 30, $call4, $__fmt, $vararg_buffer) | 0;
 } else {
  HEAPF64[$vararg_buffer2 >> 3] = $__v;
  $__nc$0 = __ZNSt3__219__libcpp_snprintf_lEPcmP15__locale_structPKcz($__nar, 30, $call4, $__fmt, $vararg_buffer2) | 0;
 }
 if (($__nc$0 | 0) > 29) {
  $call14 = __ZNSt3__26__clocEv() | 0;
  if ($call2) {
   HEAP32[$vararg_buffer5 >> 2] = HEAP32[$__iob + 8 >> 2];
   HEAPF64[$vararg_buffer5 + 8 >> 3] = $__v;
   $__nc$1 = __ZNSt3__219__libcpp_asprintf_lEPPcP15__locale_structPKcz($__nb, $call14, $__fmt, $vararg_buffer5) | 0;
  } else {
   HEAPF64[$vararg_buffer9 >> 3] = $__v;
   $__nc$1 = __ZNSt3__219__libcpp_asprintf_lEPPcP15__locale_structPKcz($__nb, $call14, $__fmt, $vararg_buffer9) | 0;
  }
  $7 = HEAP32[$__nb >> 2] | 0;
  if (!$7) __ZSt17__throw_bad_allocv(); else {
   $8 = $7;
   $__nbh$sroa$0$0 = $7;
   $__nc$2 = $__nc$1;
  }
 } else {
  $8 = HEAP32[$__nb >> 2] | 0;
  $__nbh$sroa$0$0 = 0;
  $__nc$2 = $__nc$0;
 }
 $add$ptr27 = $8 + $__nc$2 | 0;
 $call28 = __ZNSt3__214__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($8, $add$ptr27, $__iob) | 0;
 if (($8 | 0) == ($__nar | 0)) {
  $__ob$0 = $__o;
  $__obh$sroa$0$0 = 0;
 } else {
  $call35 = _malloc($__nc$2 << 1) | 0;
  if (!$call35) __ZSt17__throw_bad_allocv(); else {
   $__ob$0 = $call35;
   $__obh$sroa$0$0 = $call35;
  }
 }
 __ZNKSt3__28ios_base6getlocEv($agg$tmp$byval_copy, $__iob);
 __ZNSt3__29__num_putIcE23__widen_and_group_floatEPcS2_S2_S2_RS2_S3_RKNS_6localeE($8, $call28, $add$ptr27, $__ob$0, $__op, $__oe, $agg$tmp$byval_copy);
 __ZNSt3__26localeD2Ev($agg$tmp$byval_copy);
 HEAP32[$agg$tmp >> 2] = HEAP32[$__s >> 2];
 $10 = HEAP32[$__op >> 2] | 0;
 $11 = HEAP32[$__oe >> 2] | 0;
 HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 $call42 = __ZNSt3__216__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$tmp$byval_copy, $__ob$0, $10, $11, $__iob, $__fl) | 0;
 _free($__obh$sroa$0$0);
 _free($__nbh$sroa$0$0);
 STACKTOP = sp;
 return $call42 | 0;
}

function __ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcd($this, $__s, $__iob, $__fl, $__v) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__iob = $__iob | 0;
 $__fl = $__fl | 0;
 $__v = +$__v;
 var $0 = 0, $10 = 0, $11 = 0, $7 = 0, $8 = 0, $__fmt = 0, $__nar = 0, $__nb = 0, $__nbh$sroa$0$0 = 0, $__nc$0 = 0, $__nc$1 = 0, $__nc$2 = 0, $__o = 0, $__ob$0 = 0, $__obh$sroa$0$0 = 0, $__oe = 0, $__op = 0, $add$ptr27 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call14 = 0, $call2 = 0, $call28 = 0, $call35 = 0, $call4 = 0, $call42 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer5 = 0, $vararg_buffer9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(176);
 $agg$tmp$byval_copy = sp + 168 | 0;
 $vararg_buffer9 = sp + 144 | 0;
 $vararg_buffer5 = sp + 128 | 0;
 $vararg_buffer2 = sp + 120 | 0;
 $vararg_buffer = sp + 104 | 0;
 $__fmt = sp + 96 | 0;
 $__nar = sp + 64 | 0;
 $__nb = sp + 164 | 0;
 $__o = sp;
 $__op = sp + 160 | 0;
 $__oe = sp + 156 | 0;
 $agg$tmp = sp + 152 | 0;
 $0 = $__fmt;
 HEAP32[$0 >> 2] = 37;
 HEAP32[$0 + 4 >> 2] = 0;
 $call2 = __ZNSt3__214__num_put_base14__format_floatEPcPKcj($__fmt + 1 | 0, 62173, HEAP32[$__iob + 4 >> 2] | 0) | 0;
 HEAP32[$__nb >> 2] = $__nar;
 $call4 = __ZNSt3__26__clocEv() | 0;
 if ($call2) {
  HEAP32[$vararg_buffer >> 2] = HEAP32[$__iob + 8 >> 2];
  HEAPF64[$vararg_buffer + 8 >> 3] = $__v;
  $__nc$0 = __ZNSt3__219__libcpp_snprintf_lEPcmP15__locale_structPKcz($__nar, 30, $call4, $__fmt, $vararg_buffer) | 0;
 } else {
  HEAPF64[$vararg_buffer2 >> 3] = $__v;
  $__nc$0 = __ZNSt3__219__libcpp_snprintf_lEPcmP15__locale_structPKcz($__nar, 30, $call4, $__fmt, $vararg_buffer2) | 0;
 }
 if (($__nc$0 | 0) > 29) {
  $call14 = __ZNSt3__26__clocEv() | 0;
  if ($call2) {
   HEAP32[$vararg_buffer5 >> 2] = HEAP32[$__iob + 8 >> 2];
   HEAPF64[$vararg_buffer5 + 8 >> 3] = $__v;
   $__nc$1 = __ZNSt3__219__libcpp_asprintf_lEPPcP15__locale_structPKcz($__nb, $call14, $__fmt, $vararg_buffer5) | 0;
  } else {
   HEAPF64[$vararg_buffer9 >> 3] = $__v;
   $__nc$1 = __ZNSt3__219__libcpp_asprintf_lEPPcP15__locale_structPKcz($__nb, $call14, $__fmt, $vararg_buffer9) | 0;
  }
  $7 = HEAP32[$__nb >> 2] | 0;
  if (!$7) __ZSt17__throw_bad_allocv(); else {
   $8 = $7;
   $__nbh$sroa$0$0 = $7;
   $__nc$2 = $__nc$1;
  }
 } else {
  $8 = HEAP32[$__nb >> 2] | 0;
  $__nbh$sroa$0$0 = 0;
  $__nc$2 = $__nc$0;
 }
 $add$ptr27 = $8 + $__nc$2 | 0;
 $call28 = __ZNSt3__214__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($8, $add$ptr27, $__iob) | 0;
 if (($8 | 0) == ($__nar | 0)) {
  $__ob$0 = $__o;
  $__obh$sroa$0$0 = 0;
 } else {
  $call35 = _malloc($__nc$2 << 1) | 0;
  if (!$call35) __ZSt17__throw_bad_allocv(); else {
   $__ob$0 = $call35;
   $__obh$sroa$0$0 = $call35;
  }
 }
 __ZNKSt3__28ios_base6getlocEv($agg$tmp$byval_copy, $__iob);
 __ZNSt3__29__num_putIcE23__widen_and_group_floatEPcS2_S2_S2_RS2_S3_RKNS_6localeE($8, $call28, $add$ptr27, $__ob$0, $__op, $__oe, $agg$tmp$byval_copy);
 __ZNSt3__26localeD2Ev($agg$tmp$byval_copy);
 HEAP32[$agg$tmp >> 2] = HEAP32[$__s >> 2];
 $10 = HEAP32[$__op >> 2] | 0;
 $11 = HEAP32[$__oe >> 2] | 0;
 HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 $call42 = __ZNSt3__216__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$tmp$byval_copy, $__ob$0, $10, $11, $__iob, $__fl) | 0;
 _free($__obh$sroa$0$0);
 _free($__nbh$sroa$0$0);
 STACKTOP = sp;
 return $call42 | 0;
}

function _wcsrtombs($s, $ws, $n, $st) {
 $s = $s | 0;
 $ws = $ws | 0;
 $n = $n | 0;
 $st = $st | 0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $buf = 0, $call = 0, $call$pn = 0, $call15 = 0, $call37 = 0, $n$addr$061 = 0, $n$addr$1 = 0, $n$addr$2$lcssa = 0, $n$addr$270 = 0, $n$addr$3 = 0, $n$addr$465 = 0, $n$addr$5 = 0, $retval$0 = 0, $s$addr$0$lcssa = 0, $s$addr$071 = 0, $s$addr$1 = 0, $s$addr$266 = 0, $s$addr$3 = 0, $ws2$062 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $buf = sp;
 L1 : do if (!$s) {
  $0 = HEAP32[$ws >> 2] | 0;
  $1 = HEAP32[$0 >> 2] | 0;
  if (!$1) $retval$0 = 0; else {
   $2 = $1;
   $n$addr$061 = 0;
   $ws2$062 = $0;
   while (1) {
    if ($2 >>> 0 > 127) {
     $call = _wcrtomb($buf, $2, 0) | 0;
     if (($call | 0) == -1) {
      $retval$0 = -1;
      break L1;
     } else $call$pn = $call;
    } else $call$pn = 1;
    $n$addr$1 = $call$pn + $n$addr$061 | 0;
    $ws2$062 = $ws2$062 + 4 | 0;
    $2 = HEAP32[$ws2$062 >> 2] | 0;
    if (!$2) {
     $retval$0 = $n$addr$1;
     break;
    } else $n$addr$061 = $n$addr$1;
   }
  }
 } else {
  L10 : do if ($n >>> 0 > 3) {
   $5 = HEAP32[$ws >> 2] | 0;
   $n$addr$270 = $n;
   $s$addr$071 = $s;
   while (1) {
    $4 = HEAP32[$5 >> 2] | 0;
    if (($4 + -1 | 0) >>> 0 > 126) {
     if (!$4) break;
     $call15 = _wcrtomb($s$addr$071, $4, 0) | 0;
     if (($call15 | 0) == -1) {
      $retval$0 = -1;
      break L1;
     }
     $6 = $5;
     $n$addr$3 = $n$addr$270 - $call15 | 0;
     $s$addr$1 = $s$addr$071 + $call15 | 0;
    } else {
     HEAP8[$s$addr$071 >> 0] = $4;
     $6 = HEAP32[$ws >> 2] | 0;
     $n$addr$3 = $n$addr$270 + -1 | 0;
     $s$addr$1 = $s$addr$071 + 1 | 0;
    }
    $5 = $6 + 4 | 0;
    HEAP32[$ws >> 2] = $5;
    if ($n$addr$3 >>> 0 <= 3) {
     $n$addr$2$lcssa = $n$addr$3;
     $s$addr$0$lcssa = $s$addr$1;
     break L10;
    } else {
     $n$addr$270 = $n$addr$3;
     $s$addr$071 = $s$addr$1;
    }
   }
   HEAP8[$s$addr$071 >> 0] = 0;
   HEAP32[$ws >> 2] = 0;
   $retval$0 = $n - $n$addr$270 | 0;
   break L1;
  } else {
   $n$addr$2$lcssa = $n;
   $s$addr$0$lcssa = $s;
  } while (0);
  if (!$n$addr$2$lcssa) $retval$0 = $n; else {
   $8 = HEAP32[$ws >> 2] | 0;
   $n$addr$465 = $n$addr$2$lcssa;
   $s$addr$266 = $s$addr$0$lcssa;
   while (1) {
    $7 = HEAP32[$8 >> 2] | 0;
    if (($7 + -1 | 0) >>> 0 > 126) {
     if (!$7) {
      label = 20;
      break;
     }
     $call37 = _wcrtomb($buf, $7, 0) | 0;
     if (($call37 | 0) == -1) {
      $retval$0 = -1;
      break L1;
     }
     if ($n$addr$465 >>> 0 < $call37 >>> 0) {
      label = 23;
      break;
     }
     _wcrtomb($s$addr$266, HEAP32[$8 >> 2] | 0, 0) | 0;
     $10 = $8;
     $n$addr$5 = $n$addr$465 - $call37 | 0;
     $s$addr$3 = $s$addr$266 + $call37 | 0;
    } else {
     HEAP8[$s$addr$266 >> 0] = $7;
     $10 = HEAP32[$ws >> 2] | 0;
     $n$addr$5 = $n$addr$465 + -1 | 0;
     $s$addr$3 = $s$addr$266 + 1 | 0;
    }
    $8 = $10 + 4 | 0;
    HEAP32[$ws >> 2] = $8;
    if (!$n$addr$5) {
     $retval$0 = $n;
     break L1;
    } else {
     $n$addr$465 = $n$addr$5;
     $s$addr$266 = $s$addr$3;
    }
   }
   if ((label | 0) == 20) {
    HEAP8[$s$addr$266 >> 0] = 0;
    HEAP32[$ws >> 2] = 0;
    $retval$0 = $n - $n$addr$465 | 0;
    break;
   } else if ((label | 0) == 23) {
    $retval$0 = $n - $n$addr$465 | 0;
    break;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $retval$0 | 0;
}

function __ZN4tson4Grid5parseERKN8nlohmann10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS1_14adl_serializerEEE($this, $json) {
 $this = $this | 0;
 $json = $json | 0;
 var $1 = 0, $10 = 0, $4 = 0, $9 = 0, $__cap_$i$i$i$i$i = 0, $__size_$i1$i$i$i$i = 0, $allFound$0$off0 = 0, $call11 = 0, $ref$tmp = 0, $ref$tmp$i$i$i$i = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $ref$tmp$i$i$i$i = sp;
 $ref$tmp = sp + 8 | 0;
 if (__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE5countIRA12_KcEEmOT_($json, 22473) | 0) {
  __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE3getIS9_S9_Li0EEET0_v($ref$tmp, __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEixIKcEERKSB_PT_($json, 22473) | 0);
  $__size_$i1$i$i$i$i = $this + 11 | 0;
  if ((HEAP8[$__size_$i1$i$i$i$i >> 0] | 0) < 0) {
   $1 = HEAP32[$this >> 2] | 0;
   HEAP8[$ref$tmp$i$i$i$i >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($1, $ref$tmp$i$i$i$i);
   HEAP32[$this + 4 >> 2] = 0;
   if ((HEAP8[$__size_$i1$i$i$i$i >> 0] | 0) < 0) {
    $__cap_$i$i$i$i$i = $this + 8 | 0;
    __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm(HEAP32[$this >> 2] | 0, HEAP32[$__cap_$i$i$i$i$i >> 2] & 2147483647);
    HEAP32[$__cap_$i$i$i$i$i >> 2] = 0;
   }
  } else {
   HEAP8[$ref$tmp$i$i$i$i >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($this, $ref$tmp$i$i$i$i);
   HEAP8[$__size_$i1$i$i$i$i >> 0] = 0;
  };
  HEAP32[$this >> 2] = HEAP32[$ref$tmp >> 2];
  HEAP32[$this + 4 >> 2] = HEAP32[$ref$tmp + 4 >> 2];
  HEAP32[$this + 8 >> 2] = HEAP32[$ref$tmp + 8 >> 2];
  HEAP32[$ref$tmp >> 2] = 0;
  HEAP32[$ref$tmp + 4 >> 2] = 0;
  HEAP32[$ref$tmp + 8 >> 2] = 0;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp);
 }
 if (!(__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE5countIRA6_KcEEmOT_($json, 22412) | 0)) $allFound$0$off0 = 0; else if (!(__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE5countIRA7_KcEEmOT_($json, 22418) | 0)) $allFound$0$off0 = 0; else {
  $call11 = __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE3getIiiLi0EEET0_v(__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEixIKcEERKSB_PT_($json, 22412) | 0) | 0;
  __ZN4tson7Vector2IiEC2Eii($ref$tmp$i$i$i$i, $call11, __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE3getIiiLi0EEET0_v(__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEixIKcEERKSB_PT_($json, 22418) | 0) | 0);
  $4 = $ref$tmp$i$i$i$i;
  $9 = HEAP32[$4 + 4 >> 2] | 0;
  $10 = $this + 12 | 0;
  HEAP32[$10 >> 2] = HEAP32[$4 >> 2];
  HEAP32[$10 + 4 >> 2] = $9;
  $allFound$0$off0 = 1;
 }
 STACKTOP = sp;
 return $allFound$0$off0 | 0;
}

function _stbir__calculate_transform($info, $s0, $t0, $s1, $t1, $transform) {
 $info = $info | 0;
 $s0 = Math_fround($s0);
 $t0 = Math_fround($t0);
 $s1 = Math_fround($s1);
 $t1 = Math_fround($t1);
 $transform = $transform | 0;
 var $0 = f0, $10 = f0, $13 = f0, $16 = f0, $19 = f0, $2 = f0, $25 = f0, $32 = f0, $35 = f0, $38 = f0, $4 = f0, $41 = f0, $44 = f0, $6 = f0, $conv = f0, $conv11 = f0, $div = f0, $div13 = f0, $div15 = f0, $div20 = f0, $div26 = f0, $div9 = f0, $info$addr = 0, $mul = f0, $mul24 = f0, $s0$addr = 0, $s1$addr = 0, $t0$addr = 0, $t1$addr = 0, $transform$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $info$addr = sp + 20 | 0;
 $s0$addr = sp + 16 | 0;
 $t0$addr = sp + 12 | 0;
 $s1$addr = sp + 8 | 0;
 $t1$addr = sp + 4 | 0;
 $transform$addr = sp;
 HEAP32[$info$addr >> 2] = $info;
 HEAPF32[$s0$addr >> 2] = $s0;
 HEAPF32[$t0$addr >> 2] = $t0;
 HEAPF32[$s1$addr >> 2] = $s1;
 HEAPF32[$t1$addr >> 2] = $t1;
 HEAP32[$transform$addr >> 2] = $transform;
 $0 = Math_fround(HEAPF32[$s0$addr >> 2]);
 HEAPF32[(HEAP32[$info$addr >> 2] | 0) + 32 >> 2] = $0;
 $2 = Math_fround(HEAPF32[$t0$addr >> 2]);
 HEAPF32[(HEAP32[$info$addr >> 2] | 0) + 36 >> 2] = $2;
 $4 = Math_fround(HEAPF32[$s1$addr >> 2]);
 HEAPF32[(HEAP32[$info$addr >> 2] | 0) + 40 >> 2] = $4;
 $6 = Math_fround(HEAPF32[$t1$addr >> 2]);
 HEAPF32[(HEAP32[$info$addr >> 2] | 0) + 44 >> 2] = $6;
 if (HEAP32[$transform$addr >> 2] | 0) {
  $10 = Math_fround(HEAPF32[HEAP32[$transform$addr >> 2] >> 2]);
  HEAPF32[(HEAP32[$info$addr >> 2] | 0) + 56 >> 2] = $10;
  $13 = Math_fround(HEAPF32[(HEAP32[$transform$addr >> 2] | 0) + 4 >> 2]);
  HEAPF32[(HEAP32[$info$addr >> 2] | 0) + 60 >> 2] = $13;
  $16 = Math_fround(HEAPF32[(HEAP32[$transform$addr >> 2] | 0) + 8 >> 2]);
  HEAPF32[(HEAP32[$info$addr >> 2] | 0) + 48 >> 2] = $16;
  $19 = Math_fround(HEAPF32[(HEAP32[$transform$addr >> 2] | 0) + 12 >> 2]);
  HEAPF32[(HEAP32[$info$addr >> 2] | 0) + 52 >> 2] = $19;
  STACKTOP = sp;
  return;
 } else {
  $conv = Math_fround(HEAP32[(HEAP32[$info$addr >> 2] | 0) + 20 >> 2] | 0);
  $div = Math_fround($conv / Math_fround(HEAP32[(HEAP32[$info$addr >> 2] | 0) + 4 >> 2] | 0));
  $25 = Math_fround(HEAPF32[$s1$addr >> 2]);
  $div9 = Math_fround($div / Math_fround($25 - Math_fround(HEAPF32[$s0$addr >> 2])));
  HEAPF32[(HEAP32[$info$addr >> 2] | 0) + 56 >> 2] = $div9;
  $conv11 = Math_fround(HEAP32[(HEAP32[$info$addr >> 2] | 0) + 24 >> 2] | 0);
  $div13 = Math_fround($conv11 / Math_fround(HEAP32[(HEAP32[$info$addr >> 2] | 0) + 8 >> 2] | 0));
  $32 = Math_fround(HEAPF32[$t1$addr >> 2]);
  $div15 = Math_fround($div13 / Math_fround($32 - Math_fround(HEAPF32[$t0$addr >> 2])));
  HEAPF32[(HEAP32[$info$addr >> 2] | 0) + 60 >> 2] = $div15;
  $35 = Math_fround(HEAPF32[$s0$addr >> 2]);
  $mul = Math_fround($35 * Math_fround(HEAP32[(HEAP32[$info$addr >> 2] | 0) + 20 >> 2] | 0));
  $38 = Math_fround(HEAPF32[$s1$addr >> 2]);
  $div20 = Math_fround($mul / Math_fround($38 - Math_fround(HEAPF32[$s0$addr >> 2])));
  HEAPF32[(HEAP32[$info$addr >> 2] | 0) + 48 >> 2] = $div20;
  $41 = Math_fround(HEAPF32[$t0$addr >> 2]);
  $mul24 = Math_fround($41 * Math_fround(HEAP32[(HEAP32[$info$addr >> 2] | 0) + 24 >> 2] | 0));
  $44 = Math_fround(HEAPF32[$t1$addr >> 2]);
  $div26 = Math_fround($mul24 / Math_fround($44 - Math_fround(HEAPF32[$t0$addr >> 2])));
  HEAPF32[(HEAP32[$info$addr >> 2] | 0) + 52 >> 2] = $div26;
  STACKTOP = sp;
  return;
 }
}

function __ZN8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE6createINS2_IS9_SB_NS1_4lessIvEENS7_INS1_4pairIKS9_SB_EEEEEEJRKSJ_EEEPT_DpOT0_($args) {
 $args = $args | 0;
 var $10 = 0, $11 = 0, $13 = 0, $3 = 0, $4 = 0, $6 = 0, $7 = 0, $8 = 0, $__parent_$i410$i$i$i$i$i$i$i$i = 0, $__parent_$i47$i$i$i$i$i$i$i$i = 0, $__value_$i$i$i$i$i$i$i$i$i = 0, $__x$addr$0$i$i$i$i$i$i$i$i$i = 0, $agg$tmp$i$i = 0, $agg$tmp$i$i$byval_copy = 0, $agg$tmp3$i$i$i$i$sroa$0$032 = 0, $call$i$i$i$i$i$i$i$i = 0, $call2$i$i$i = 0, $object = 0, $retval$0$i$i$i$i$i$i$i$i = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $agg$tmp$i$i$byval_copy = sp + 12 | 0;
 $agg$tmp$i$i = sp + 8 | 0;
 $object = sp;
 $call2$i$i$i = __Znwm(12) | 0;
 HEAP32[$object >> 2] = $call2$i$i$i;
 HEAP32[$object + 4 >> 2] = sp + 16;
 __ZNSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8nlohmann10basic_jsonINS_3mapENS_6vectorES7_bxydS5_NS8_14adl_serializerEEEEENS_19__map_value_compareIS7_SE_NS_4lessIvEELb1EEENS5_ISE_EEEC2ERKSK_($call2$i$i$i, $args);
 $3 = HEAP32[$args >> 2] | 0;
 $__value_$i$i$i$i$i$i$i$i$i = $args + 4 | 0;
 if (($3 | 0) != ($__value_$i$i$i$i$i$i$i$i$i | 0)) {
  $4 = $call2$i$i$i + 4 | 0;
  $agg$tmp3$i$i$i$i$sroa$0$032 = $3;
  while (1) {
   $call$i$i$i$i$i$i$i$i = __ZNSt3__29__launderIKNS_4pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8nlohmann10basic_jsonINS_3mapENS_6vectorES7_bxydS5_NS9_14adl_serializerEEEEEEEPT_SI_($agg$tmp3$i$i$i$i$sroa$0$032 + 16 | 0) | 0;
   HEAP32[$agg$tmp$i$i >> 2] = $4;
   HEAP32[$agg$tmp$i$i$byval_copy >> 2] = HEAP32[$agg$tmp$i$i >> 2];
   __ZNSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8nlohmann10basic_jsonINS_3mapENS_6vectorES7_bxydS5_NS8_14adl_serializerEEEEENS_19__map_value_compareIS7_SE_NS_4lessIvEELb1EEENS5_ISE_EEE30__emplace_hint_unique_key_argsIS7_JRKNS_4pairIKS7_SD_EEEEENS_15__tree_iteratorISE_PNS_11__tree_nodeISE_PvEElEENS_21__tree_const_iteratorISE_SV_lEERKT_DpOT0_($call2$i$i$i, $agg$tmp$i$i$byval_copy, $call$i$i$i$i$i$i$i$i, $call$i$i$i$i$i$i$i$i) | 0;
   $6 = HEAP32[$agg$tmp3$i$i$i$i$sroa$0$032 + 4 >> 2] | 0;
   if (!$6) {
    $__parent_$i47$i$i$i$i$i$i$i$i = $agg$tmp3$i$i$i$i$sroa$0$032 + 8 | 0;
    $8 = HEAP32[$__parent_$i47$i$i$i$i$i$i$i$i >> 2] | 0;
    if ((HEAP32[$8 >> 2] | 0) == ($agg$tmp3$i$i$i$i$sroa$0$032 | 0)) $retval$0$i$i$i$i$i$i$i$i = $8; else {
     $__parent_$i410$i$i$i$i$i$i$i$i = $__parent_$i47$i$i$i$i$i$i$i$i;
     do {
      $10 = HEAP32[$__parent_$i410$i$i$i$i$i$i$i$i >> 2] | 0;
      $__parent_$i410$i$i$i$i$i$i$i$i = $10 + 8 | 0;
      $11 = HEAP32[$__parent_$i410$i$i$i$i$i$i$i$i >> 2] | 0;
     } while ((HEAP32[$11 >> 2] | 0) != ($10 | 0));
     $retval$0$i$i$i$i$i$i$i$i = $11;
    }
   } else {
    $__x$addr$0$i$i$i$i$i$i$i$i$i = $6;
    while (1) {
     $7 = HEAP32[$__x$addr$0$i$i$i$i$i$i$i$i$i >> 2] | 0;
     if (!$7) break; else $__x$addr$0$i$i$i$i$i$i$i$i$i = $7;
    }
    $retval$0$i$i$i$i$i$i$i$i = $__x$addr$0$i$i$i$i$i$i$i$i$i;
   }
   if (($retval$0$i$i$i$i$i$i$i$i | 0) == ($__value_$i$i$i$i$i$i$i$i$i | 0)) break; else $agg$tmp3$i$i$i$i$sroa$0$032 = $retval$0$i$i$i$i$i$i$i$i;
  }
 }
 $13 = HEAP32[$object >> 2] | 0;
 if (!$13) ___assert_fail(24255, 22221, 15187, 24273); else {
  STACKTOP = sp;
  return $13 | 0;
 }
 return 0;
}

function _stbi__hdr_to_ldr($data, $x, $y, $comp) {
 $data = $data | 0;
 $x = $x | 0;
 $y = $y | 0;
 $comp = $comp | 0;
 var $46 = 0, $9 = 0, $comp$addr = 0, $conv27 = 0, $conv49 = 0, $data$addr = 0, $i = 0, $k = 0, $mul12 = 0, $mul28 = 0, $mul35 = 0, $mul50 = 0, $n = 0, $output = 0, $retval = 0, $tobool3 = 0, $x$addr = 0, $y$addr = 0, $z = 0, $z34 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 $retval = sp + 40 | 0;
 $data$addr = sp + 36 | 0;
 $x$addr = sp + 32 | 0;
 $y$addr = sp + 28 | 0;
 $comp$addr = sp + 24 | 0;
 $i = sp + 20 | 0;
 $k = sp + 16 | 0;
 $n = sp + 12 | 0;
 $output = sp + 8 | 0;
 $z = sp + 4 | 0;
 $z34 = sp;
 HEAP32[$data$addr >> 2] = $data;
 HEAP32[$x$addr >> 2] = $x;
 HEAP32[$y$addr >> 2] = $y;
 HEAP32[$comp$addr >> 2] = $comp;
 if (!(HEAP32[$data$addr >> 2] | 0)) {
  HEAP32[$retval >> 2] = 0;
  $46 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $46 | 0;
 }
 HEAP32[$output >> 2] = _stbi__malloc_mad3(HEAP32[$x$addr >> 2] | 0, HEAP32[$y$addr >> 2] | 0, HEAP32[$comp$addr >> 2] | 0, 0) | 0;
 if (!(HEAP32[$output >> 2] | 0)) {
  _free(HEAP32[$data$addr >> 2] | 0);
  $tobool3 = (_stbi__err(32857) | 0) != 0;
  HEAP32[$retval >> 2] = $tobool3 ? 0 : 0;
  $46 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $46 | 0;
 }
 $9 = HEAP32[$comp$addr >> 2] | 0;
 if (HEAP32[$comp$addr >> 2] & 1 | 0) HEAP32[$n >> 2] = $9; else HEAP32[$n >> 2] = $9 - 1;
 HEAP32[$i >> 2] = 0;
 while (1) {
  if ((HEAP32[$i >> 2] | 0) >= (Math_imul(HEAP32[$x$addr >> 2] | 0, HEAP32[$y$addr >> 2] | 0) | 0)) break;
  HEAP32[$k >> 2] = 0;
  while (1) {
   if ((HEAP32[$k >> 2] | 0) >= (HEAP32[$n >> 2] | 0)) break;
   $mul12 = Math_imul(HEAP32[$i >> 2] | 0, HEAP32[$comp$addr >> 2] | 0) | 0;
   HEAPF32[$z >> 2] = Math_fround(Math_fround(Math_fround(+Math_pow(+(+Math_fround(Math_fround(HEAPF32[(HEAP32[$data$addr >> 2] | 0) + ($mul12 + (HEAP32[$k >> 2] | 0) << 2) >> 2]) * Math_fround(1.0))), +(+Math_fround(.454545438)))) * Math_fround(255.0)) + Math_fround(.5));
   if (Math_fround(HEAPF32[$z >> 2]) < Math_fround(0.0)) HEAPF32[$z >> 2] = Math_fround(0.0);
   if (Math_fround(HEAPF32[$z >> 2]) > Math_fround(255.0)) HEAPF32[$z >> 2] = Math_fround(255.0);
   $conv27 = ~~Math_fround(HEAPF32[$z >> 2]) & 255;
   $mul28 = Math_imul(HEAP32[$i >> 2] | 0, HEAP32[$comp$addr >> 2] | 0) | 0;
   HEAP8[(HEAP32[$output >> 2] | 0) + ($mul28 + (HEAP32[$k >> 2] | 0)) >> 0] = $conv27;
   HEAP32[$k >> 2] = (HEAP32[$k >> 2] | 0) + 1;
  }
  if ((HEAP32[$k >> 2] | 0) < (HEAP32[$comp$addr >> 2] | 0)) {
   $mul35 = Math_imul(HEAP32[$i >> 2] | 0, HEAP32[$comp$addr >> 2] | 0) | 0;
   HEAPF32[$z34 >> 2] = Math_fround(Math_fround(Math_fround(HEAPF32[(HEAP32[$data$addr >> 2] | 0) + ($mul35 + (HEAP32[$k >> 2] | 0) << 2) >> 2]) * Math_fround(255.0)) + Math_fround(.5));
   if (Math_fround(HEAPF32[$z34 >> 2]) < Math_fround(0.0)) HEAPF32[$z34 >> 2] = Math_fround(0.0);
   if (Math_fround(HEAPF32[$z34 >> 2]) > Math_fround(255.0)) HEAPF32[$z34 >> 2] = Math_fround(255.0);
   $conv49 = ~~Math_fround(HEAPF32[$z34 >> 2]) & 255;
   $mul50 = Math_imul(HEAP32[$i >> 2] | 0, HEAP32[$comp$addr >> 2] | 0) | 0;
   HEAP8[(HEAP32[$output >> 2] | 0) + ($mul50 + (HEAP32[$k >> 2] | 0)) >> 0] = $conv49;
  }
  HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
 }
 _free(HEAP32[$data$addr >> 2] | 0);
 HEAP32[$retval >> 2] = HEAP32[$output >> 2];
 $46 = HEAP32[$retval >> 2] | 0;
 STACKTOP = sp;
 return $46 | 0;
}

function _stbir__buffer_loop_downsample($stbir_info) {
 $stbir_info = $stbir_info | 0;
 var $19 = f0, $20 = f0, $41 = 0, $7 = f0, $call = f0, $in_pixels_radius = 0, $max_y = 0, $out_center_of_in = 0, $out_first_scanline = 0, $out_last_scanline = 0, $output_h = 0, $pixel_margin = 0, $scale_ratio = 0, $stbir_info$addr = 0, $y = 0, label = 0, sp = 0, CSE$0 = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 $stbir_info$addr = sp + 36 | 0;
 $y = sp + 32 | 0;
 $scale_ratio = sp + 28 | 0;
 $output_h = sp + 24 | 0;
 $in_pixels_radius = sp + 20 | 0;
 $pixel_margin = sp + 16 | 0;
 $max_y = sp + 12 | 0;
 $out_center_of_in = sp + 8 | 0;
 $out_first_scanline = sp + 4 | 0;
 $out_last_scanline = sp;
 HEAP32[$stbir_info$addr >> 2] = $stbir_info;
 HEAPF32[$scale_ratio >> 2] = Math_fround(HEAPF32[(HEAP32[$stbir_info$addr >> 2] | 0) + 60 >> 2]);
 HEAP32[$output_h >> 2] = HEAP32[(HEAP32[$stbir_info$addr >> 2] | 0) + 24 >> 2];
 $7 = Math_fround(HEAPF32[$scale_ratio >> 2]);
 $call = Math_fround(FUNCTION_TABLE_ff[HEAP32[6304 + (HEAP32[(HEAP32[$stbir_info$addr >> 2] | 0) + 84 >> 2] << 3) + 4 >> 2] & 7]($7));
 HEAPF32[$in_pixels_radius >> 2] = Math_fround($call / Math_fround(HEAPF32[$scale_ratio >> 2]));
 HEAP32[$pixel_margin >> 2] = HEAP32[(HEAP32[$stbir_info$addr >> 2] | 0) + 148 >> 2];
 HEAP32[$max_y >> 2] = (HEAP32[(HEAP32[$stbir_info$addr >> 2] | 0) + 8 >> 2] | 0) + (HEAP32[$pixel_margin >> 2] | 0);
 if (_stbir__use_height_upsampling(HEAP32[$stbir_info$addr >> 2] | 0) | 0) ___assert_fail(34906, 34244, 2170, 34948);
 HEAP32[$y >> 2] = 0 - (HEAP32[$pixel_margin >> 2] | 0);
 while (1) {
  if ((HEAP32[$y >> 2] | 0) >= (HEAP32[$max_y >> 2] | 0)) {
   label = 16;
   break;
  }
  $19 = Math_fround(HEAPF32[$in_pixels_radius >> 2]);
  $20 = Math_fround(HEAPF32[$scale_ratio >> 2]);
  _stbir__calculate_sample_range_downsample(HEAP32[$y >> 2] | 0, $19, $20, Math_fround(HEAPF32[(HEAP32[$stbir_info$addr >> 2] | 0) + 52 >> 2]), $out_first_scanline, $out_last_scanline, $out_center_of_in);
  if (((HEAP32[$out_last_scanline >> 2] | 0) - (HEAP32[$out_first_scanline >> 2] | 0) + 1 | 0) > (HEAP32[(HEAP32[$stbir_info$addr >> 2] | 0) + 164 >> 2] | 0)) {
   label = 6;
   break;
  }
  if ((HEAP32[$out_last_scanline >> 2] | 0) >= 0) if ((HEAP32[$out_first_scanline >> 2] | 0) < (HEAP32[$output_h >> 2] | 0)) {
   _stbir__empty_ring_buffer(HEAP32[$stbir_info$addr >> 2] | 0, HEAP32[$out_first_scanline >> 2] | 0);
   _stbir__decode_and_resample_downsample(HEAP32[$stbir_info$addr >> 2] | 0, HEAP32[$y >> 2] | 0);
   if ((HEAP32[(HEAP32[$stbir_info$addr >> 2] | 0) + 176 >> 2] | 0) < 0) _stbir__add_empty_ring_buffer_entry(HEAP32[$stbir_info$addr >> 2] | 0, HEAP32[$out_first_scanline >> 2] | 0) | 0;
   while (1) {
    $41 = HEAP32[$stbir_info$addr >> 2] | 0;
    if ((HEAP32[$out_last_scanline >> 2] | 0) <= (HEAP32[(HEAP32[$stbir_info$addr >> 2] | 0) + 172 >> 2] | 0)) break;
    _stbir__add_empty_ring_buffer_entry($41, (HEAP32[(HEAP32[$stbir_info$addr >> 2] | 0) + 172 >> 2] | 0) + 1 | 0) | 0;
   }
   _stbir__resample_vertical_downsample($41, HEAP32[$y >> 2] | 0);
  }
  HEAP32[$y >> 2] = (HEAP32[$y >> 2] | 0) + 1;
 }
 if ((label | 0) == 6) ___assert_fail(34978, 34244, 2179, 34948); else if ((label | 0) == 16) {
  CSE$0 = HEAP32[$stbir_info$addr >> 2] | 0;
  _stbir__empty_ring_buffer(CSE$0 | 0, HEAP32[CSE$0 + 24 >> 2] | 0);
  STACKTOP = sp;
  return;
 }
}

function __ZN8nlohmann6detail9from_jsonINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEfLi0EEEvRKT_RT0_($j, $val) {
 $j = $j | 0;
 $val = $val | 0;
 var $0 = 0, $7 = 0, $call$i910 = 0, $call12 = 0, $conv10$sink = f0, $exception = 0, $ref$tmp = 0, $ref$tmp11 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $ref$tmp = sp + 12 | 0;
 $ref$tmp11 = sp;
 switch ((__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEcvNS_6detail7value_tEEv($j) | 0) << 24 >> 24) {
 case 6:
  {
   $0 = __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE7get_ptrIPKyLi0EEEDTcldtclL_ZNS1_7declvalIRKSB_EEDTclsr3std3__2E9__declvalIT_ELi0EEEvEE12get_impl_ptrclsr3stdE7declvalISI_EEEEv($j) | 0;
   $conv10$sink = Math_fround(+((HEAP32[$0 >> 2] | 0) >>> 0) + 4294967296.0 * +((HEAP32[$0 + 4 >> 2] | 0) >>> 0));
   break;
  }
 case 5:
  {
   $7 = __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE7get_ptrIPKxLi0EEEDTcldtclL_ZNS1_7declvalIRKSB_EEDTclsr3std3__2E9__declvalIT_ELi0EEEvEE12get_impl_ptrclsr3stdE7declvalISI_EEEEv($j) | 0;
   $conv10$sink = Math_fround(+((HEAP32[$7 >> 2] | 0) >>> 0) + 4294967296.0 * +(HEAP32[$7 + 4 >> 2] | 0));
   break;
  }
 case 7:
  {
   $conv10$sink = Math_fround(+HEAPF64[(__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE7get_ptrIPKdLi0EEEDTcldtclL_ZNS1_7declvalIRKSB_EEDTclsr3std3__2E9__declvalIT_ELi0EEEvEE12get_impl_ptrclsr3stdE7declvalISI_EEEEv($j) | 0) >> 3]);
   break;
  }
 case 4:
  {
   $conv10$sink = Math_fround((HEAP8[(__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE7get_ptrIPKbLi0EEEDTcldtclL_ZNS1_7declvalIRKSB_EEDTclsr3std3__2E9__declvalIT_ELi0EEEvEE12get_impl_ptrclsr3stdE7declvalISI_EEEEv($j) | 0) >> 0] | 0) != 0 & 1);
   break;
  }
 default:
  {
   $exception = ___cxa_allocate_exception(16) | 0;
   $call12 = __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE9type_nameEv($j) | 0;
   HEAP32[$ref$tmp11 >> 2] = 0;
   HEAP32[$ref$tmp11 + 4 >> 2] = 0;
   HEAP32[$ref$tmp11 + 8 >> 2] = 0;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcm($ref$tmp11, $call12, __ZNSt3__211char_traitsIcE6lengthEPKc($call12) | 0);
   $call$i910 = __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6insertEmPKc($ref$tmp11, 0, 22708) | 0;
   HEAP32[$ref$tmp >> 2] = HEAP32[$call$i910 >> 2];
   HEAP32[$ref$tmp + 4 >> 2] = HEAP32[$call$i910 + 4 >> 2];
   HEAP32[$ref$tmp + 8 >> 2] = HEAP32[$call$i910 + 8 >> 2];
   HEAP32[$call$i910 >> 2] = 0;
   HEAP32[$call$i910 + 4 >> 2] = 0;
   HEAP32[$call$i910 + 8 >> 2] = 0;
   __ZN8nlohmann6detail10type_error6createEiRKNSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE($exception, 302, $ref$tmp);
   ___cxa_throw($exception | 0, 15016, 9);
  }
 }
 HEAPF32[$val >> 2] = $conv10$sink;
 STACKTOP = sp;
 return;
}

function _stbir__calculate_sample_range_upsample($n, $out_filter_radius, $scale_ratio, $out_shift, $in_first_pixel, $in_last_pixel, $in_center_of_out) {
 $n = $n | 0;
 $out_filter_radius = Math_fround($out_filter_radius);
 $scale_ratio = Math_fround($scale_ratio);
 $out_shift = Math_fround($out_shift);
 $in_first_pixel = $in_first_pixel | 0;
 $in_last_pixel = $in_last_pixel | 0;
 $in_center_of_out = $in_center_of_out | 0;
 var $1 = f0, $11 = f0, $3 = f0, $5 = f0, $8 = f0, $add2 = f0, $add3 = f0, $add5 = f0, $conv12 = 0, $conv9 = 0, $div6 = f0, $in_center_of_out$addr = 0, $in_first_pixel$addr = 0, $in_last_pixel$addr = 0, $in_pixel_influence_lowerbound = 0, $in_pixel_influence_upperbound = 0, $n$addr = 0, $out_filter_radius$addr = 0, $out_pixel_center = 0, $out_pixel_influence_lowerbound = 0, $out_pixel_influence_upperbound = 0, $out_shift$addr = 0, $scale_ratio$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 $n$addr = sp + 44 | 0;
 $out_filter_radius$addr = sp + 40 | 0;
 $scale_ratio$addr = sp + 36 | 0;
 $out_shift$addr = sp + 32 | 0;
 $in_first_pixel$addr = sp + 28 | 0;
 $in_last_pixel$addr = sp + 24 | 0;
 $in_center_of_out$addr = sp + 20 | 0;
 $out_pixel_center = sp + 16 | 0;
 $out_pixel_influence_lowerbound = sp + 12 | 0;
 $out_pixel_influence_upperbound = sp + 8 | 0;
 $in_pixel_influence_lowerbound = sp + 4 | 0;
 $in_pixel_influence_upperbound = sp;
 HEAP32[$n$addr >> 2] = $n;
 HEAPF32[$out_filter_radius$addr >> 2] = $out_filter_radius;
 HEAPF32[$scale_ratio$addr >> 2] = $scale_ratio;
 HEAPF32[$out_shift$addr >> 2] = $out_shift;
 HEAP32[$in_first_pixel$addr >> 2] = $in_first_pixel;
 HEAP32[$in_last_pixel$addr >> 2] = $in_last_pixel;
 HEAP32[$in_center_of_out$addr >> 2] = $in_center_of_out;
 HEAPF32[$out_pixel_center >> 2] = Math_fround(Math_fround(HEAP32[$n$addr >> 2] | 0) + Math_fround(.5));
 $1 = Math_fround(HEAPF32[$out_pixel_center >> 2]);
 HEAPF32[$out_pixel_influence_lowerbound >> 2] = Math_fround($1 - Math_fround(HEAPF32[$out_filter_radius$addr >> 2]));
 $3 = Math_fround(HEAPF32[$out_pixel_center >> 2]);
 HEAPF32[$out_pixel_influence_upperbound >> 2] = Math_fround($3 + Math_fround(HEAPF32[$out_filter_radius$addr >> 2]));
 $5 = Math_fround(HEAPF32[$out_pixel_influence_lowerbound >> 2]);
 $add2 = Math_fround($5 + Math_fround(HEAPF32[$out_shift$addr >> 2]));
 HEAPF32[$in_pixel_influence_lowerbound >> 2] = Math_fround($add2 / Math_fround(HEAPF32[$scale_ratio$addr >> 2]));
 $8 = Math_fround(HEAPF32[$out_pixel_influence_upperbound >> 2]);
 $add3 = Math_fround($8 + Math_fround(HEAPF32[$out_shift$addr >> 2]));
 HEAPF32[$in_pixel_influence_upperbound >> 2] = Math_fround($add3 / Math_fround(HEAPF32[$scale_ratio$addr >> 2]));
 $11 = Math_fround(HEAPF32[$out_pixel_center >> 2]);
 $add5 = Math_fround($11 + Math_fround(HEAPF32[$out_shift$addr >> 2]));
 $div6 = Math_fround($add5 / Math_fround(HEAPF32[$scale_ratio$addr >> 2]));
 HEAPF32[HEAP32[$in_center_of_out$addr >> 2] >> 2] = $div6;
 $conv9 = ~~+Math_floor(+(+Math_fround(HEAPF32[$in_pixel_influence_lowerbound >> 2]) + .5));
 HEAP32[HEAP32[$in_first_pixel$addr >> 2] >> 2] = $conv9;
 $conv12 = ~~+Math_floor(+(+Math_fround(HEAPF32[$in_pixel_influence_upperbound >> 2]) - .5));
 HEAP32[HEAP32[$in_last_pixel$addr >> 2] >> 2] = $conv12;
 STACKTOP = sp;
 return;
}

function _stbir__calculate_sample_range_downsample($n, $in_pixels_radius, $scale_ratio, $out_shift, $out_first_pixel, $out_last_pixel, $out_center_of_in) {
 $n = $n | 0;
 $in_pixels_radius = Math_fround($in_pixels_radius);
 $scale_ratio = Math_fround($scale_ratio);
 $out_shift = Math_fround($out_shift);
 $out_first_pixel = $out_first_pixel | 0;
 $out_last_pixel = $out_last_pixel | 0;
 $out_center_of_in = $out_center_of_in | 0;
 var $1 = f0, $11 = f0, $3 = f0, $5 = f0, $8 = f0, $conv12 = 0, $conv9 = 0, $in_pixel_center = 0, $in_pixel_influence_lowerbound = 0, $in_pixel_influence_upperbound = 0, $in_pixels_radius$addr = 0, $mul = f0, $mul3 = f0, $mul5 = f0, $n$addr = 0, $out_center_of_in$addr = 0, $out_first_pixel$addr = 0, $out_last_pixel$addr = 0, $out_pixel_influence_lowerbound = 0, $out_pixel_influence_upperbound = 0, $out_shift$addr = 0, $scale_ratio$addr = 0, $sub6 = f0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 $n$addr = sp + 44 | 0;
 $in_pixels_radius$addr = sp + 40 | 0;
 $scale_ratio$addr = sp + 36 | 0;
 $out_shift$addr = sp + 32 | 0;
 $out_first_pixel$addr = sp + 28 | 0;
 $out_last_pixel$addr = sp + 24 | 0;
 $out_center_of_in$addr = sp + 20 | 0;
 $in_pixel_center = sp + 16 | 0;
 $in_pixel_influence_lowerbound = sp + 12 | 0;
 $in_pixel_influence_upperbound = sp + 8 | 0;
 $out_pixel_influence_lowerbound = sp + 4 | 0;
 $out_pixel_influence_upperbound = sp;
 HEAP32[$n$addr >> 2] = $n;
 HEAPF32[$in_pixels_radius$addr >> 2] = $in_pixels_radius;
 HEAPF32[$scale_ratio$addr >> 2] = $scale_ratio;
 HEAPF32[$out_shift$addr >> 2] = $out_shift;
 HEAP32[$out_first_pixel$addr >> 2] = $out_first_pixel;
 HEAP32[$out_last_pixel$addr >> 2] = $out_last_pixel;
 HEAP32[$out_center_of_in$addr >> 2] = $out_center_of_in;
 HEAPF32[$in_pixel_center >> 2] = Math_fround(Math_fround(HEAP32[$n$addr >> 2] | 0) + Math_fround(.5));
 $1 = Math_fround(HEAPF32[$in_pixel_center >> 2]);
 HEAPF32[$in_pixel_influence_lowerbound >> 2] = Math_fround($1 - Math_fround(HEAPF32[$in_pixels_radius$addr >> 2]));
 $3 = Math_fround(HEAPF32[$in_pixel_center >> 2]);
 HEAPF32[$in_pixel_influence_upperbound >> 2] = Math_fround($3 + Math_fround(HEAPF32[$in_pixels_radius$addr >> 2]));
 $5 = Math_fround(HEAPF32[$in_pixel_influence_lowerbound >> 2]);
 $mul = Math_fround($5 * Math_fround(HEAPF32[$scale_ratio$addr >> 2]));
 HEAPF32[$out_pixel_influence_lowerbound >> 2] = Math_fround($mul - Math_fround(HEAPF32[$out_shift$addr >> 2]));
 $8 = Math_fround(HEAPF32[$in_pixel_influence_upperbound >> 2]);
 $mul3 = Math_fround($8 * Math_fround(HEAPF32[$scale_ratio$addr >> 2]));
 HEAPF32[$out_pixel_influence_upperbound >> 2] = Math_fround($mul3 - Math_fround(HEAPF32[$out_shift$addr >> 2]));
 $11 = Math_fround(HEAPF32[$in_pixel_center >> 2]);
 $mul5 = Math_fround($11 * Math_fround(HEAPF32[$scale_ratio$addr >> 2]));
 $sub6 = Math_fround($mul5 - Math_fround(HEAPF32[$out_shift$addr >> 2]));
 HEAPF32[HEAP32[$out_center_of_in$addr >> 2] >> 2] = $sub6;
 $conv9 = ~~+Math_floor(+(+Math_fround(HEAPF32[$out_pixel_influence_lowerbound >> 2]) + .5));
 HEAP32[HEAP32[$out_first_pixel$addr >> 2] >> 2] = $conv9;
 $conv12 = ~~+Math_floor(+(+Math_fround(HEAPF32[$out_pixel_influence_upperbound >> 2]) - .5));
 HEAP32[HEAP32[$out_last_pixel$addr >> 2] >> 2] = $conv12;
 STACKTOP = sp;
 return;
}

function _atan2f($y, $x) {
 $y = Math_fround($y);
 $x = Math_fround($x);
 var $0 = 0, $and = 0, $and13 = 0, $or = 0, $retval$0 = f0, $shr = 0, $trunc35 = 0, $trunc41 = 0, $trunc41$clear = 0, $z$0 = f0, label = 0;
 label = 0;
 $trunc41 = (HEAPF32[tempDoublePtr >> 2] = $x, HEAP32[tempDoublePtr >> 2] | 0);
 $and = $trunc41 & 2147483647;
 L1 : do if ($and >>> 0 > 2139095040) label = 3; else {
  $0 = (HEAPF32[tempDoublePtr >> 2] = $y, HEAP32[tempDoublePtr >> 2] | 0);
  $and13 = $0 & 2147483647;
  if ($and13 >>> 0 > 2139095040) label = 3; else {
   if (($trunc41 | 0) == 1065353216) {
    $retval$0 = Math_fround(_atanf($y));
    break;
   }
   $shr = $0 >>> 31;
   $or = $trunc41 >>> 30 & 2 | $shr;
   if (!$and13) switch ($or & 3) {
   case 1:
   case 0:
    {
     $retval$0 = $y;
     break L1;
     break;
    }
   case 2:
    {
     $retval$0 = Math_fround(3.14159274);
     break L1;
     break;
    }
   case 3:
    {
     $retval$0 = Math_fround(-3.14159274);
     break L1;
     break;
    }
   default:
    {}
   }
   $trunc41$clear = $trunc41 & 2147483647;
   L14 : do if (($trunc41$clear | 0) < 2139095040) {
    switch ($trunc41$clear | 0) {
    case 0:
     break;
    default:
     break L14;
    }
    $retval$0 = ($shr | 0) == 0 ? Math_fround(1.57079637) : Math_fround(-1.57079637);
    break L1;
   } else {
    switch ($trunc41$clear | 0) {
    case 2139095040:
     break;
    default:
     break L14;
    }
    $trunc35 = $or & 255;
    if (($and13 | 0) == 2139095040) switch ($trunc35 & 3) {
    case 0:
     {
      $retval$0 = Math_fround(.785398185);
      break L1;
      break;
     }
    case 1:
     {
      $retval$0 = Math_fround(-.785398185);
      break L1;
      break;
     }
    case 2:
     {
      $retval$0 = Math_fround(2.3561945);
      break L1;
      break;
     }
    case 3:
     {
      $retval$0 = Math_fround(-2.3561945);
      break L1;
      break;
     }
    default:
     {}
    } else switch ($trunc35 & 3) {
    case 0:
     {
      $retval$0 = Math_fround(0.0);
      break L1;
      break;
     }
    case 1:
     {
      $retval$0 = Math_fround(-0.0);
      break L1;
      break;
     }
    case 2:
     {
      $retval$0 = Math_fround(3.14159274);
      break L1;
      break;
     }
    case 3:
     {
      $retval$0 = Math_fround(-3.14159274);
      break L1;
      break;
     }
    default:
     {}
    }
   } while (0);
   if (($and13 | 0) == 2139095040 | ($and + 218103808 | 0) >>> 0 < $and13 >>> 0) {
    $retval$0 = ($shr | 0) == 0 ? Math_fround(1.57079637) : Math_fround(-1.57079637);
    break;
   }
   if (($trunc41 | 0) < 0 & ($and13 + 218103808 | 0) >>> 0 < $and >>> 0) $z$0 = Math_fround(0.0); else $z$0 = Math_fround(_atanf(Math_fround(Math_abs(Math_fround($y / $x)))));
   switch ($or & 3) {
   case 0:
    {
     $retval$0 = $z$0;
     break L1;
     break;
    }
   case 1:
    {
     $retval$0 = Math_fround(-$z$0);
     break L1;
     break;
    }
   case 2:
    {
     $retval$0 = Math_fround(Math_fround(3.14159274) - Math_fround($z$0 + Math_fround(8.74227765e-08)));
     break L1;
     break;
    }
   default:
    {
     $retval$0 = Math_fround(Math_fround($z$0 + Math_fround(8.74227765e-08)) + Math_fround(-3.14159274));
     break L1;
    }
   }
  }
 } while (0);
 if ((label | 0) == 3) $retval$0 = Math_fround($y + $x);
 return Math_fround($retval$0);
}

function _mbsnrtowcs($wcs, $src, $n, $wn, $st) {
 $wcs = $wcs | 0;
 $src = $src | 0;
 $n = $n | 0;
 $wn = $wn | 0;
 $st = $st | 0;
 var $$cast = 0, $0 = 0, $2 = 0, $3 = 0, $5 = 0, $9 = 0, $add15 = 0, $call = 0, $call24 = 0, $cmp = 0, $cmp11 = 0, $cnt$055 = 0, $cnt$1 = 0, $cnt$248 = 0, $cnt$3 = 0, $div = 0, $inc = 0, $n$addr$054 = 0, $n$addr$1 = 0, $n$addr$247 = 0, $s = 0, $spec$select = 0, $sub = 0, $tobool = 0, $wbuf = 0, $wn$addr$0 = 0, $wn$addr$153 = 0, $wn$addr$2 = 0, $wn$addr$3 = 0, $wn$addr$446 = 0, $ws$0 = 0, $ws$140 = 0, $ws$156 = 0, $ws$2 = 0, $ws$349 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1040 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(1040);
 $wbuf = sp;
 $s = sp + 1024 | 0;
 $0 = HEAP32[$src >> 2] | 0;
 HEAP32[$s >> 2] = $0;
 $tobool = ($wcs | 0) != 0;
 $wn$addr$0 = $tobool ? $wn : 256;
 $ws$0 = $tobool ? $wcs : $wbuf;
 $$cast = $0;
 L1 : do if (($wn$addr$0 | 0) != 0 & ($0 | 0) != 0) {
  $9 = $$cast;
  $cnt$055 = 0;
  $n$addr$054 = $n;
  $wn$addr$153 = $wn$addr$0;
  $ws$156 = $ws$0;
  while (1) {
   $div = $n$addr$054 >>> 2;
   $cmp = $div >>> 0 >= $wn$addr$153 >>> 0;
   if (!($n$addr$054 >>> 0 > 131 | $cmp)) {
    $3 = $9;
    $cnt$1 = $cnt$055;
    $n$addr$1 = $n$addr$054;
    $wn$addr$3 = $wn$addr$153;
    $ws$140 = $ws$156;
    break L1;
   }
   $spec$select = $cmp ? $wn$addr$153 : $div;
   $sub = $n$addr$054 - $spec$select | 0;
   $call = _mbsrtowcs($ws$156, $s, $spec$select, $st) | 0;
   if (($call | 0) == -1) break;
   $cmp11 = ($ws$156 | 0) == ($wbuf | 0);
   $wn$addr$2 = $wn$addr$153 - ($cmp11 ? 0 : $call) | 0;
   $ws$2 = $cmp11 ? $ws$156 : $ws$156 + ($call << 2) | 0;
   $add15 = $call + $cnt$055 | 0;
   $2 = HEAP32[$s >> 2] | 0;
   if (($wn$addr$2 | 0) != 0 & ($2 | 0) != 0) {
    $9 = $2;
    $cnt$055 = $add15;
    $n$addr$054 = $sub;
    $wn$addr$153 = $wn$addr$2;
    $ws$156 = $ws$2;
   } else {
    $3 = $2;
    $cnt$1 = $add15;
    $n$addr$1 = $sub;
    $wn$addr$3 = $wn$addr$2;
    $ws$140 = $ws$2;
    break L1;
   }
  }
  $3 = HEAP32[$s >> 2] | 0;
  $cnt$1 = -1;
  $n$addr$1 = $sub;
  $wn$addr$3 = 0;
  $ws$140 = $ws$156;
 } else {
  $3 = $$cast;
  $cnt$1 = 0;
  $n$addr$1 = $n;
  $wn$addr$3 = $wn$addr$0;
  $ws$140 = $ws$0;
 } while (0);
 L9 : do if (!$3) $cnt$3 = $cnt$1; else if (($wn$addr$3 | 0) != 0 & ($n$addr$1 | 0) != 0) {
  $5 = $3;
  $cnt$248 = $cnt$1;
  $n$addr$247 = $n$addr$1;
  $wn$addr$446 = $wn$addr$3;
  $ws$349 = $ws$140;
  while (1) {
   $call24 = _mbrtowc($ws$349, $5, $n$addr$247, $st) | 0;
   if (($call24 + 2 | 0) >>> 0 < 3) break;
   $5 = (HEAP32[$s >> 2] | 0) + $call24 | 0;
   HEAP32[$s >> 2] = $5;
   $n$addr$247 = $n$addr$247 - $call24 | 0;
   $wn$addr$446 = $wn$addr$446 + -1 | 0;
   $inc = $cnt$248 + 1 | 0;
   if (!(($wn$addr$446 | 0) != 0 & ($n$addr$247 | 0) != 0)) {
    $cnt$3 = $inc;
    break L9;
   } else {
    $cnt$248 = $inc;
    $ws$349 = $ws$349 + 4 | 0;
   }
  }
  switch ($call24 | 0) {
  case -1:
   {
    $cnt$3 = $call24;
    break L9;
    break;
   }
  case 0:
   {
    HEAP32[$s >> 2] = 0;
    $cnt$3 = $cnt$248;
    break L9;
    break;
   }
  default:
   {
    HEAP32[$st >> 2] = 0;
    $cnt$3 = $cnt$248;
    break L9;
   }
  }
 } else $cnt$3 = $cnt$1; while (0);
 if ($tobool) HEAP32[$src >> 2] = HEAP32[$s >> 2];
 STACKTOP = sp;
 return $cnt$3 | 0;
}

function _GifThresholdImage($lastFrame, $nextFrame, $outFrame, $width, $height, $pPal) {
 $lastFrame = $lastFrame | 0;
 $nextFrame = $nextFrame | 0;
 $outFrame = $outFrame | 0;
 $width = $width | 0;
 $height = $height | 0;
 $pPal = $pPal | 0;
 var $bestDiff = 0, $bestInd = 0, $height$addr = 0, $ii = 0, $lastFrame$addr = 0, $nextFrame$addr = 0, $numPixels = 0, $outFrame$addr = 0, $pPal$addr = 0, $width$addr = 0, label = 0, sp = 0, CSE$0 = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 $lastFrame$addr = sp + 36 | 0;
 $nextFrame$addr = sp + 32 | 0;
 $outFrame$addr = sp + 28 | 0;
 $width$addr = sp + 24 | 0;
 $height$addr = sp + 20 | 0;
 $pPal$addr = sp + 16 | 0;
 $numPixels = sp + 12 | 0;
 $ii = sp + 8 | 0;
 $bestDiff = sp + 4 | 0;
 $bestInd = sp;
 HEAP32[$lastFrame$addr >> 2] = $lastFrame;
 HEAP32[$nextFrame$addr >> 2] = $nextFrame;
 HEAP32[$outFrame$addr >> 2] = $outFrame;
 HEAP32[$width$addr >> 2] = $width;
 HEAP32[$height$addr >> 2] = $height;
 HEAP32[$pPal$addr >> 2] = $pPal;
 HEAP32[$numPixels >> 2] = Math_imul(HEAP32[$width$addr >> 2] | 0, HEAP32[$height$addr >> 2] | 0) | 0;
 HEAP32[$ii >> 2] = 0;
 while (1) {
  if ((HEAP32[$ii >> 2] | 0) >>> 0 >= (HEAP32[$numPixels >> 2] | 0) >>> 0) break;
  if (HEAP32[$lastFrame$addr >> 2] | 0) if ((HEAPU8[HEAP32[$lastFrame$addr >> 2] >> 0] | 0) == (HEAPU8[HEAP32[$nextFrame$addr >> 2] >> 0] | 0)) if ((HEAPU8[(HEAP32[$lastFrame$addr >> 2] | 0) + 1 >> 0] | 0) == (HEAPU8[(HEAP32[$nextFrame$addr >> 2] | 0) + 1 >> 0] | 0)) if ((HEAPU8[(HEAP32[$lastFrame$addr >> 2] | 0) + 2 >> 0] | 0) == (HEAPU8[(HEAP32[$nextFrame$addr >> 2] | 0) + 2 >> 0] | 0)) {
   HEAP8[HEAP32[$outFrame$addr >> 2] >> 0] = HEAP8[HEAP32[$lastFrame$addr >> 2] >> 0] | 0;
   HEAP8[(HEAP32[$outFrame$addr >> 2] | 0) + 1 >> 0] = HEAP8[(HEAP32[$lastFrame$addr >> 2] | 0) + 1 >> 0] | 0;
   HEAP8[(HEAP32[$outFrame$addr >> 2] | 0) + 2 >> 0] = HEAP8[(HEAP32[$lastFrame$addr >> 2] | 0) + 2 >> 0] | 0;
   HEAP8[(HEAP32[$outFrame$addr >> 2] | 0) + 3 >> 0] = 0;
  } else label = 8; else label = 8; else label = 8; else label = 8;
  if ((label | 0) == 8) {
   label = 0;
   HEAP32[$bestDiff >> 2] = 1e6;
   HEAP32[$bestInd >> 2] = 1;
   CSE$0 = HEAP32[$nextFrame$addr >> 2] | 0;
   _GifGetClosestPaletteColor(HEAP32[$pPal$addr >> 2] | 0, HEAPU8[HEAP32[$nextFrame$addr >> 2] >> 0] | 0, HEAPU8[CSE$0 + 1 >> 0] | 0, HEAPU8[CSE$0 + 2 >> 0] | 0, $bestInd, $bestDiff, 1);
   HEAP8[HEAP32[$outFrame$addr >> 2] >> 0] = HEAP8[(HEAP32[$pPal$addr >> 2] | 0) + 4 + (HEAP32[$bestInd >> 2] | 0) >> 0] | 0;
   HEAP8[(HEAP32[$outFrame$addr >> 2] | 0) + 1 >> 0] = HEAP8[(HEAP32[$pPal$addr >> 2] | 0) + 260 + (HEAP32[$bestInd >> 2] | 0) >> 0] | 0;
   HEAP8[(HEAP32[$outFrame$addr >> 2] | 0) + 2 >> 0] = HEAP8[(HEAP32[$pPal$addr >> 2] | 0) + 516 + (HEAP32[$bestInd >> 2] | 0) >> 0] | 0;
   HEAP8[(HEAP32[$outFrame$addr >> 2] | 0) + 3 >> 0] = HEAP32[$bestInd >> 2];
  }
  if (HEAP32[$lastFrame$addr >> 2] | 0) HEAP32[$lastFrame$addr >> 2] = (HEAP32[$lastFrame$addr >> 2] | 0) + 4;
  HEAP32[$outFrame$addr >> 2] = (HEAP32[$outFrame$addr >> 2] | 0) + 4;
  HEAP32[$nextFrame$addr >> 2] = (HEAP32[$nextFrame$addr >> 2] | 0) + 4;
  HEAP32[$ii >> 2] = (HEAP32[$ii >> 2] | 0) + 1;
 }
 STACKTOP = sp;
 return;
}

function _stbi__do_png($p, $x, $y, $n, $req_comp, $ri) {
 $p = $p | 0;
 $x = $x | 0;
 $y = $y | 0;
 $n = $n | 0;
 $req_comp = $req_comp | 0;
 $ri = $ri | 0;
 var $22 = 0, $71 = 0, $n$addr = 0, $p$addr = 0, $req_comp$addr = 0, $result = 0, $retval = 0, $ri$addr = 0, $tobool = 0, $x$addr = 0, $y$addr = 0, sp = 0, CSE$0 = 0, CSE$1 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $retval = sp + 28 | 0;
 $p$addr = sp + 24 | 0;
 $x$addr = sp + 20 | 0;
 $y$addr = sp + 16 | 0;
 $n$addr = sp + 12 | 0;
 $req_comp$addr = sp + 8 | 0;
 $ri$addr = sp + 4 | 0;
 $result = sp;
 HEAP32[$p$addr >> 2] = $p;
 HEAP32[$x$addr >> 2] = $x;
 HEAP32[$y$addr >> 2] = $y;
 HEAP32[$n$addr >> 2] = $n;
 HEAP32[$req_comp$addr >> 2] = $req_comp;
 HEAP32[$ri$addr >> 2] = $ri;
 HEAP32[$result >> 2] = 0;
 if ((HEAP32[$req_comp$addr >> 2] | 0) < 0 | (HEAP32[$req_comp$addr >> 2] | 0) > 4) {
  $tobool = (_stbi__err(33055) | 0) != 0;
  HEAP32[$retval >> 2] = $tobool ? 0 : 0;
  $71 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $71 | 0;
 }
 if (_stbi__parse_png_file(HEAP32[$p$addr >> 2] | 0, 0, HEAP32[$req_comp$addr >> 2] | 0) | 0) {
  if ((HEAP32[(HEAP32[$p$addr >> 2] | 0) + 16 >> 2] | 0) < 8) HEAP32[HEAP32[$ri$addr >> 2] >> 2] = 8; else HEAP32[HEAP32[$ri$addr >> 2] >> 2] = HEAP32[(HEAP32[$p$addr >> 2] | 0) + 16 >> 2];
  HEAP32[$result >> 2] = HEAP32[(HEAP32[$p$addr >> 2] | 0) + 12 >> 2];
  HEAP32[(HEAP32[$p$addr >> 2] | 0) + 12 >> 2] = 0;
  if (HEAP32[$req_comp$addr >> 2] | 0) if ((HEAP32[$req_comp$addr >> 2] | 0) != (HEAP32[(HEAP32[HEAP32[$p$addr >> 2] >> 2] | 0) + 12 >> 2] | 0)) {
   $22 = HEAP32[$result >> 2] | 0;
   if ((HEAP32[HEAP32[$ri$addr >> 2] >> 2] | 0) == 8) {
    CSE$0 = HEAP32[HEAP32[$p$addr >> 2] >> 2] | 0;
    HEAP32[$result >> 2] = _stbi__convert_format($22, HEAP32[CSE$0 + 12 >> 2] | 0, HEAP32[$req_comp$addr >> 2] | 0, HEAP32[HEAP32[HEAP32[$p$addr >> 2] >> 2] >> 2] | 0, HEAP32[CSE$0 + 4 >> 2] | 0) | 0;
   } else {
    CSE$1 = HEAP32[HEAP32[$p$addr >> 2] >> 2] | 0;
    HEAP32[$result >> 2] = _stbi__convert_format16($22, HEAP32[CSE$1 + 12 >> 2] | 0, HEAP32[$req_comp$addr >> 2] | 0, HEAP32[HEAP32[HEAP32[$p$addr >> 2] >> 2] >> 2] | 0, HEAP32[CSE$1 + 4 >> 2] | 0) | 0;
   }
   HEAP32[(HEAP32[HEAP32[$p$addr >> 2] >> 2] | 0) + 12 >> 2] = HEAP32[$req_comp$addr >> 2];
   if (!(HEAP32[$result >> 2] | 0)) {
    HEAP32[$retval >> 2] = HEAP32[$result >> 2];
    $71 = HEAP32[$retval >> 2] | 0;
    STACKTOP = sp;
    return $71 | 0;
   }
  }
  HEAP32[HEAP32[$x$addr >> 2] >> 2] = HEAP32[HEAP32[HEAP32[$p$addr >> 2] >> 2] >> 2];
  HEAP32[HEAP32[$y$addr >> 2] >> 2] = HEAP32[(HEAP32[HEAP32[$p$addr >> 2] >> 2] | 0) + 4 >> 2];
  if (HEAP32[$n$addr >> 2] | 0) HEAP32[HEAP32[$n$addr >> 2] >> 2] = HEAP32[(HEAP32[HEAP32[$p$addr >> 2] >> 2] | 0) + 8 >> 2];
 }
 _free(HEAP32[(HEAP32[$p$addr >> 2] | 0) + 12 >> 2] | 0);
 HEAP32[(HEAP32[$p$addr >> 2] | 0) + 12 >> 2] = 0;
 _free(HEAP32[(HEAP32[$p$addr >> 2] | 0) + 8 >> 2] | 0);
 HEAP32[(HEAP32[$p$addr >> 2] | 0) + 8 >> 2] = 0;
 _free(HEAP32[(HEAP32[$p$addr >> 2] | 0) + 4 >> 2] | 0);
 HEAP32[(HEAP32[$p$addr >> 2] | 0) + 4 >> 2] = 0;
 HEAP32[$retval >> 2] = HEAP32[$result >> 2];
 $71 = HEAP32[$retval >> 2] | 0;
 STACKTOP = sp;
 return $71 | 0;
}

function __ZN4tson6ObjectC2EOS0_($this, $0) {
 $this = $this | 0;
 $0 = $0 | 0;
 var $__end_$i = 0, $__end_$i$i = 0, $__end_$i$i12 = 0, $__end_$i15 = 0, $__value_$i$i$i8$i = 0, $__value_$i$i$i8$i16 = 0, $__value_$i$i$i9$i = 0, $__value_$i$i$i9$i13 = 0, $m_name = 0, $m_name3 = 0, $m_polygon = 0, $m_polygon5 = 0, $m_polyline = 0, $m_polyline6 = 0, $m_template = 0, $m_template9 = 0, $m_type = 0, $m_type11 = 0, $m_visible = 0, $m_visible12 = 0;
 HEAP32[$this >> 2] = HEAP32[$0 >> 2];
 HEAP32[$this + 4 >> 2] = HEAP32[$0 + 4 >> 2];
 HEAP32[$this + 8 >> 2] = HEAP32[$0 + 8 >> 2];
 HEAP32[$this + 12 >> 2] = HEAP32[$0 + 12 >> 2];
 HEAP32[$this + 16 >> 2] = HEAP32[$0 + 16 >> 2];
 $m_name = $this + 20 | 0;
 $m_name3 = $0 + 20 | 0;
 HEAP32[$m_name >> 2] = HEAP32[$m_name3 >> 2];
 HEAP32[$m_name + 4 >> 2] = HEAP32[$m_name3 + 4 >> 2];
 HEAP32[$m_name + 8 >> 2] = HEAP32[$m_name3 + 8 >> 2];
 HEAP32[$m_name3 >> 2] = 0;
 HEAP32[$m_name3 + 4 >> 2] = 0;
 HEAP32[$m_name3 + 8 >> 2] = 0;
 HEAP8[$this + 32 >> 0] = HEAP8[$0 + 32 >> 0] | 0;
 $m_polygon = $this + 36 | 0;
 $m_polygon5 = $0 + 36 | 0;
 HEAP32[$m_polygon >> 2] = 0;
 $__end_$i$i = $this + 40 | 0;
 HEAP32[$__end_$i$i >> 2] = 0;
 $__value_$i$i$i9$i = $this + 44 | 0;
 HEAP32[$__value_$i$i$i9$i >> 2] = 0;
 HEAP32[$m_polygon >> 2] = HEAP32[$m_polygon5 >> 2];
 $__end_$i = $0 + 40 | 0;
 HEAP32[$__end_$i$i >> 2] = HEAP32[$__end_$i >> 2];
 $__value_$i$i$i8$i = $0 + 44 | 0;
 HEAP32[$__value_$i$i$i9$i >> 2] = HEAP32[$__value_$i$i$i8$i >> 2];
 HEAP32[$__value_$i$i$i8$i >> 2] = 0;
 HEAP32[$__end_$i >> 2] = 0;
 HEAP32[$m_polygon5 >> 2] = 0;
 $m_polyline = $this + 48 | 0;
 $m_polyline6 = $0 + 48 | 0;
 HEAP32[$m_polyline >> 2] = 0;
 $__end_$i$i12 = $this + 52 | 0;
 HEAP32[$__end_$i$i12 >> 2] = 0;
 $__value_$i$i$i9$i13 = $this + 56 | 0;
 HEAP32[$__value_$i$i$i9$i13 >> 2] = 0;
 HEAP32[$m_polyline >> 2] = HEAP32[$m_polyline6 >> 2];
 $__end_$i15 = $0 + 52 | 0;
 HEAP32[$__end_$i$i12 >> 2] = HEAP32[$__end_$i15 >> 2];
 $__value_$i$i$i8$i16 = $0 + 56 | 0;
 HEAP32[$__value_$i$i$i9$i13 >> 2] = HEAP32[$__value_$i$i$i8$i16 >> 2];
 HEAP32[$__value_$i$i$i8$i16 >> 2] = 0;
 HEAP32[$__end_$i15 >> 2] = 0;
 HEAP32[$m_polyline6 >> 2] = 0;
 __ZN4tson18PropertyCollectionC2EOS0_($this + 60 | 0, $0 + 60 | 0);
 HEAP32[$this + 84 >> 2] = HEAP32[$0 + 84 >> 2];
 $m_template = $this + 88 | 0;
 $m_template9 = $0 + 88 | 0;
 HEAP32[$m_template >> 2] = HEAP32[$m_template9 >> 2];
 HEAP32[$m_template + 4 >> 2] = HEAP32[$m_template9 + 4 >> 2];
 HEAP32[$m_template + 8 >> 2] = HEAP32[$m_template9 + 8 >> 2];
 HEAP32[$m_template9 >> 2] = 0;
 HEAP32[$m_template9 + 4 >> 2] = 0;
 HEAP32[$m_template9 + 8 >> 2] = 0;
 __ZN4tson4TextC2EOS0_($this + 100 | 0, $0 + 100 | 0);
 $m_type = $this + 116 | 0;
 $m_type11 = $0 + 116 | 0;
 HEAP32[$m_type >> 2] = HEAP32[$m_type11 >> 2];
 HEAP32[$m_type + 4 >> 2] = HEAP32[$m_type11 + 4 >> 2];
 HEAP32[$m_type + 8 >> 2] = HEAP32[$m_type11 + 8 >> 2];
 HEAP32[$m_type11 >> 2] = 0;
 HEAP32[$m_type11 + 4 >> 2] = 0;
 HEAP32[$m_type11 + 8 >> 2] = 0;
 $m_visible = $this + 128 | 0;
 $m_visible12 = $0 + 128 | 0;
 HEAP32[$m_visible >> 2] = HEAP32[$m_visible12 >> 2];
 HEAP32[$m_visible + 4 >> 2] = HEAP32[$m_visible12 + 4 >> 2];
 HEAP32[$m_visible + 8 >> 2] = HEAP32[$m_visible12 + 8 >> 2];
 return;
}

function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE23__append_forward_unsafeIPKcEERS5_T_SA_($this, $__first, $__last) {
 $this = $this | 0;
 $__first = $__first | 0;
 $__last = $__last | 0;
 var $0 = 0, $5 = 0, $__first$addr$089 = 0, $__p$0$lcssa = 0, $__p$090 = 0, $__size_$i$i = 0, $__temp = 0, $add$ptr17 = 0, $add20 = 0, $cond$i$i6784 = 0, $cond$i36 = 0, $cond$i42 = 0, $cond$i76 = 0, $cond$i78 = 0, $scevgep91 = 0, $sub$ptr$rhs$cast$i$i = 0, $sub$ptr$sub$i$i = 0, $tobool$i$i = 0, $tobool$i$i$i54 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $sub$ptr$rhs$cast$i$i = $__first;
 $__temp = sp;
 $__size_$i$i = $this + 11 | 0;
 $0 = HEAP8[$__size_$i$i >> 0] | 0;
 $tobool$i$i = $0 << 24 >> 24 < 0;
 if ($tobool$i$i) {
  $cond$i36 = (HEAP32[$this + 8 >> 2] & 2147483647) + -1 | 0;
  $cond$i78 = HEAP32[$this + 4 >> 2] | 0;
 } else {
  $cond$i36 = 10;
  $cond$i78 = $0 & 255;
 }
 $sub$ptr$sub$i$i = $__last - $sub$ptr$rhs$cast$i$i | 0;
 do if ($sub$ptr$sub$i$i | 0) {
  if ($tobool$i$i) {
   $cond$i$i6784 = HEAP32[$this >> 2] | 0;
   $cond$i76 = HEAP32[$this + 4 >> 2] | 0;
  } else {
   $cond$i$i6784 = $this;
   $cond$i76 = $0 & 255;
  }
  if (__ZNSt3__214__ptr_in_rangeIcEEbPKT_S3_S3_($__first, $cond$i$i6784, $cond$i$i6784 + $cond$i76 | 0) | 0) {
   HEAP32[$__temp >> 2] = 0;
   HEAP32[$__temp + 4 >> 2] = 0;
   HEAP32[$__temp + 8 >> 2] = 0;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initIPKcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESA_SA_($__temp, $__first, $__last);
   $5 = HEAP8[$__temp + 11 >> 0] | 0;
   $tobool$i$i$i54 = $5 << 24 >> 24 < 0;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcm($this, $tobool$i$i$i54 ? HEAP32[$__temp >> 2] | 0 : $__temp, $tobool$i$i$i54 ? HEAP32[$__temp + 4 >> 2] | 0 : $5 & 255) | 0;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__temp);
   break;
  }
  if (($cond$i36 - $cond$i78 | 0) >>> 0 < $sub$ptr$sub$i$i >>> 0) __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEmmmmmm($this, $cond$i36, $cond$i78 + $sub$ptr$sub$i$i - $cond$i36 | 0, $cond$i78, $cond$i78, 0, 0);
  if ((HEAP8[$__size_$i$i >> 0] | 0) < 0) $cond$i42 = HEAP32[$this >> 2] | 0; else $cond$i42 = $this;
  $add$ptr17 = $cond$i42 + $cond$i78 | 0;
  if (($__first | 0) == ($__last | 0)) $__p$0$lcssa = $add$ptr17; else {
   $scevgep91 = $__last + ($cond$i78 - $sub$ptr$rhs$cast$i$i) | 0;
   $__first$addr$089 = $__first;
   $__p$090 = $add$ptr17;
   while (1) {
    __ZNSt3__211char_traitsIcE6assignERcRKc($__p$090, $__first$addr$089);
    $__first$addr$089 = $__first$addr$089 + 1 | 0;
    if (($__first$addr$089 | 0) == ($__last | 0)) break; else $__p$090 = $__p$090 + 1 | 0;
   }
   $__p$0$lcssa = $cond$i42 + $scevgep91 | 0;
  }
  HEAP8[$__temp >> 0] = 0;
  __ZNSt3__211char_traitsIcE6assignERcRKc($__p$0$lcssa, $__temp);
  $add20 = $cond$i78 + $sub$ptr$sub$i$i | 0;
  if ((HEAP8[$__size_$i$i >> 0] | 0) < 0) {
   HEAP32[$this + 4 >> 2] = $add20;
   break;
  } else {
   HEAP8[$__size_$i$i >> 0] = $add20;
   break;
  }
 } while (0);
 STACKTOP = sp;
 return $this | 0;
}

function __ZNSt3__2L20utf8_to_utf16_lengthEPKhS1_mmNS_12codecvt_modeE($frm, $frm_end, $mx, $Maxcode, $mode) {
 $frm = $frm | 0;
 $frm_end = $frm_end | 0;
 $mx = $mx | 0;
 $Maxcode = $Maxcode | 0;
 $mode = $mode | 0;
 var $$pre = 0, $11 = 0, $12 = 0, $13 = 0, $3 = 0, $5 = 0, $6 = 0, $conv14 = 0, $conv158 = 0, $conv162 = 0, $conv33 = 0, $conv87 = 0, $frm_nxt$1 = 0, $frm_nxt$1$ph = 0, $frm_nxt$5 = 0, $nchar16_t$0 = 0, $nchar16_t$2 = 0;
 $$pre = $frm_end;
 if (!($mode & 4)) $frm_nxt$1$ph = $frm; else if (($$pre - $frm | 0) > 2) if ((HEAP8[$frm >> 0] | 0) == -17) if ((HEAP8[$frm + 1 >> 0] | 0) == -69) $frm_nxt$1$ph = (HEAP8[$frm + 2 >> 0] | 0) == -65 ? $frm + 3 | 0 : $frm; else $frm_nxt$1$ph = $frm; else $frm_nxt$1$ph = $frm; else $frm_nxt$1$ph = $frm;
 $frm_nxt$1 = $frm_nxt$1$ph;
 $nchar16_t$0 = 0;
 L7 : while (1) {
  if (!($nchar16_t$0 >>> 0 < $mx >>> 0 & $frm_nxt$1 >>> 0 < $frm_end >>> 0)) break;
  $3 = HEAP8[$frm_nxt$1 >> 0] | 0;
  $conv14 = $3 & 255;
  if ($conv14 >>> 0 > $Maxcode >>> 0) break;
  do if ($3 << 24 >> 24 > -1) {
   $frm_nxt$5 = $frm_nxt$1 + 1 | 0;
   $nchar16_t$2 = $nchar16_t$0;
  } else {
   if (($3 & 255) < 194) break L7;
   if (($3 & 255) < 224) {
    if (($$pre - $frm_nxt$1 | 0) < 2) break L7;
    $conv33 = HEAPU8[$frm_nxt$1 + 1 >> 0] | 0;
    if (($conv33 & 192 | 0) != 128) break L7;
    if (($conv33 & 63 | $conv14 << 6 & 1984) >>> 0 > $Maxcode >>> 0) break L7; else {
     $frm_nxt$5 = $frm_nxt$1 + 2 | 0;
     $nchar16_t$2 = $nchar16_t$0;
     break;
    }
   }
   if (($3 & 255) < 240) {
    if (($$pre - $frm_nxt$1 | 0) < 3) break L7;
    $5 = HEAP8[$frm_nxt$1 + 1 >> 0] | 0;
    $6 = HEAP8[$frm_nxt$1 + 2 >> 0] | 0;
    switch ($3 << 24 >> 24) {
    case -32:
     {
      if (($5 & -32) << 24 >> 24 != -96) break L7;
      break;
     }
    case -19:
     {
      if (($5 & -32) << 24 >> 24 != -128) break L7;
      break;
     }
    default:
     if (($5 & -64) << 24 >> 24 != -128) break L7;
    }
    $conv87 = $6 & 255;
    if (($conv87 & 192 | 0) != 128) break L7;
    if ((($5 & 63) << 6 | $conv14 << 12 & 61440 | $conv87 & 63) >>> 0 > $Maxcode >>> 0) break L7; else {
     $frm_nxt$5 = $frm_nxt$1 + 3 | 0;
     $nchar16_t$2 = $nchar16_t$0;
     break;
    }
   }
   if (($3 & 255) >= 245) break L7;
   if (($mx - $nchar16_t$0 | 0) >>> 0 < 2 | ($$pre - $frm_nxt$1 | 0) < 4) break L7;
   $11 = HEAP8[$frm_nxt$1 + 1 >> 0] | 0;
   $12 = HEAP8[$frm_nxt$1 + 2 >> 0] | 0;
   $13 = HEAP8[$frm_nxt$1 + 3 >> 0] | 0;
   switch ($3 << 24 >> 24) {
   case -16:
    {
     if (($11 + 112 & 255) >= 48) break L7;
     break;
    }
   case -12:
    {
     if (($11 & -16) << 24 >> 24 != -128) break L7;
     break;
    }
   default:
    if (($11 & -64) << 24 >> 24 != -128) break L7;
   }
   $conv158 = $12 & 255;
   if (($conv158 & 192 | 0) != 128) break L7;
   $conv162 = $13 & 255;
   if (($conv162 & 192 | 0) != 128) break L7;
   if ((($11 & 63) << 12 | $conv14 << 18 & 1835008 | $conv158 << 6 & 4032 | $conv162 & 63) >>> 0 > $Maxcode >>> 0) break L7; else {
    $frm_nxt$5 = $frm_nxt$1 + 4 | 0;
    $nchar16_t$2 = $nchar16_t$0 + 1 | 0;
   }
  } while (0);
  $frm_nxt$1 = $frm_nxt$5;
  $nchar16_t$0 = $nchar16_t$2 + 1 | 0;
 }
 return $frm_nxt$1 - $frm | 0;
}

function __ZN8nlohmann6detail9from_jsonINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEiLi0EEEvRKT_RT0_($j, $val) {
 $j = $j | 0;
 $val = $val | 0;
 var $$sink = 0, $call$i910 = 0, $call12 = 0, $exception = 0, $ref$tmp = 0, $ref$tmp11 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $ref$tmp = sp + 12 | 0;
 $ref$tmp11 = sp;
 switch ((__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEcvNS_6detail7value_tEEv($j) | 0) << 24 >> 24) {
 case 6:
  {
   $$sink = HEAP32[(__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE7get_ptrIPKyLi0EEEDTcldtclL_ZNS1_7declvalIRKSB_EEDTclsr3std3__2E9__declvalIT_ELi0EEEvEE12get_impl_ptrclsr3stdE7declvalISI_EEEEv($j) | 0) >> 2] | 0;
   break;
  }
 case 5:
  {
   $$sink = HEAP32[(__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE7get_ptrIPKxLi0EEEDTcldtclL_ZNS1_7declvalIRKSB_EEDTclsr3std3__2E9__declvalIT_ELi0EEEvEE12get_impl_ptrclsr3stdE7declvalISI_EEEEv($j) | 0) >> 2] | 0;
   break;
  }
 case 7:
  {
   $$sink = ~~+HEAPF64[(__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE7get_ptrIPKdLi0EEEDTcldtclL_ZNS1_7declvalIRKSB_EEDTclsr3std3__2E9__declvalIT_ELi0EEEvEE12get_impl_ptrclsr3stdE7declvalISI_EEEEv($j) | 0) >> 3];
   break;
  }
 case 4:
  {
   $$sink = HEAPU8[(__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE7get_ptrIPKbLi0EEEDTcldtclL_ZNS1_7declvalIRKSB_EEDTclsr3std3__2E9__declvalIT_ELi0EEEvEE12get_impl_ptrclsr3stdE7declvalISI_EEEEv($j) | 0) >> 0] | 0;
   break;
  }
 default:
  {
   $exception = ___cxa_allocate_exception(16) | 0;
   $call12 = __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE9type_nameEv($j) | 0;
   HEAP32[$ref$tmp11 >> 2] = 0;
   HEAP32[$ref$tmp11 + 4 >> 2] = 0;
   HEAP32[$ref$tmp11 + 8 >> 2] = 0;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcm($ref$tmp11, $call12, __ZNSt3__211char_traitsIcE6lengthEPKc($call12) | 0);
   $call$i910 = __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6insertEmPKc($ref$tmp11, 0, 22708) | 0;
   HEAP32[$ref$tmp >> 2] = HEAP32[$call$i910 >> 2];
   HEAP32[$ref$tmp + 4 >> 2] = HEAP32[$call$i910 + 4 >> 2];
   HEAP32[$ref$tmp + 8 >> 2] = HEAP32[$call$i910 + 8 >> 2];
   HEAP32[$call$i910 >> 2] = 0;
   HEAP32[$call$i910 + 4 >> 2] = 0;
   HEAP32[$call$i910 + 8 >> 2] = 0;
   __ZN8nlohmann6detail10type_error6createEiRKNSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE($exception, 302, $ref$tmp);
   ___cxa_throw($exception | 0, 15016, 9);
  }
 }
 HEAP32[$val >> 2] = $$sink;
 STACKTOP = sp;
 return;
}

function __ZNKSt3__24__fs10filesystem6detail12_GLOBAL__N_112ErrorHandlerIvE6reportIJEEEvRKNS_10error_codeEPKcDpRKT_($this, $m_ec) {
 $this = $this | 0;
 $m_ec = $m_ec | 0;
 var $0 = 0, $1 = 0, $12 = 0, $6 = 0, $7 = 0, $__i$0$i$i$i = 0, $__i$0$i$i$i12 = 0, $__i$0$i$i$i4 = 0, $call$i1 = 0, $call$i2 = 0, $call3$i$i = 0, $ref$tmp = 0, $ref$tmp3 = 0, $ref$tmp4 = 0, $ref$tmp5 = 0, $tobool$i$i$i$i$i = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 $ref$tmp = sp + 36 | 0;
 $ref$tmp3 = sp + 24 | 0;
 $ref$tmp4 = sp + 12 | 0;
 $ref$tmp5 = sp;
 $0 = HEAP32[$this + 4 >> 2] | 0;
 if ($0 | 0) {
  $1 = $m_ec;
  $6 = HEAP32[$1 + 4 >> 2] | 0;
  $7 = $0;
  HEAP32[$7 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$7 + 4 >> 2] = $6;
  STACKTOP = sp;
  return;
 };
 HEAP32[$ref$tmp4 >> 2] = 0;
 HEAP32[$ref$tmp4 + 4 >> 2] = 0;
 HEAP32[$ref$tmp4 + 8 >> 2] = 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcm($ref$tmp4, 45282, __ZNSt3__211char_traitsIcE6lengthEPKc(45282) | 0);
 $call$i1 = __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc($ref$tmp4, HEAP32[$this >> 2] | 0) | 0;
 HEAP32[$ref$tmp3 >> 2] = HEAP32[$call$i1 >> 2];
 HEAP32[$ref$tmp3 + 4 >> 2] = HEAP32[$call$i1 + 4 >> 2];
 HEAP32[$ref$tmp3 + 8 >> 2] = HEAP32[$call$i1 + 8 >> 2];
 $__i$0$i$i$i = 0;
 while (1) {
  if (($__i$0$i$i$i | 0) == 3) break;
  HEAP32[$call$i1 + ($__i$0$i$i$i << 2) >> 2] = 0;
  $__i$0$i$i$i = $__i$0$i$i$i + 1 | 0;
 }
 $call$i2 = __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc($ref$tmp3, 45286) | 0;
 HEAP32[$ref$tmp >> 2] = HEAP32[$call$i2 >> 2];
 HEAP32[$ref$tmp + 4 >> 2] = HEAP32[$call$i2 + 4 >> 2];
 HEAP32[$ref$tmp + 8 >> 2] = HEAP32[$call$i2 + 8 >> 2];
 $__i$0$i$i$i4 = 0;
 while (1) {
  if (($__i$0$i$i$i4 | 0) == 3) break;
  HEAP32[$call$i2 + ($__i$0$i$i$i4 << 2) >> 2] = 0;
  $__i$0$i$i$i4 = $__i$0$i$i$i4 + 1 | 0;
 }
 __ZNSt3__24__fs10filesystem6detail12_GLOBAL__N_113format_stringIJEEENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPKcDpRKT_($ref$tmp5, 45300);
 $12 = HEAP8[$ref$tmp5 + 11 >> 0] | 0;
 $tobool$i$i$i$i$i = $12 << 24 >> 24 < 0;
 $call3$i$i = __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcm($ref$tmp, $tobool$i$i$i$i$i ? HEAP32[$ref$tmp5 >> 2] | 0 : $ref$tmp5, $tobool$i$i$i$i$i ? HEAP32[$ref$tmp5 + 4 >> 2] | 0 : $12 & 255) | 0;
 $__i$0$i$i$i12 = 0;
 while (1) {
  if (($__i$0$i$i$i12 | 0) == 3) break;
  HEAP32[$call3$i$i + ($__i$0$i$i$i12 << 2) >> 2] = 0;
  $__i$0$i$i$i12 = $__i$0$i$i$i12 + 1 | 0;
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp5);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp3);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp4);
 switch (((HEAP32[$this + 12 >> 2] | 0) != 0 & 1) + ((HEAP32[$this + 8 >> 2] | 0) != 0 & 1) & 3) {
 case 0:
  {
   _abort();
   break;
  }
 case 1:
  {
   _abort();
   break;
  }
 case 2:
  {
   _abort();
   break;
  }
 default:
  {}
 }
}

function _DrawTextureEx($texture, $position, $rotation, $scale, $tint) {
 $texture = $texture | 0;
 $position = $position | 0;
 $rotation = Math_fround($rotation);
 $scale = Math_fround($scale);
 $tint = $tint | 0;
 var $8 = f0, $conv10 = f0, $conv13 = f0, $destRec = 0, $destRec$byval_copy = 0, $origin = 0, $origin$byval_copy = 0, $rotation$addr = 0, $scale$addr = 0, $sourceRec = 0, $sourceRec$byval_copy = 0, $texture$byval_copy = 0, $tint$byval_copy = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(128);
 $tint$byval_copy = sp + 112 | 0;
 $origin$byval_copy = sp + 104 | 0;
 $destRec$byval_copy = sp + 88 | 0;
 $sourceRec$byval_copy = sp + 72 | 0;
 $texture$byval_copy = sp + 48 | 0;
 $rotation$addr = sp + 44 | 0;
 $scale$addr = sp + 40 | 0;
 $sourceRec = sp + 24 | 0;
 $destRec = sp + 8 | 0;
 $origin = sp;
 HEAPF32[$rotation$addr >> 2] = $rotation;
 HEAPF32[$scale$addr >> 2] = $scale;
 HEAPF32[$sourceRec >> 2] = Math_fround(0.0);
 HEAPF32[$sourceRec + 4 >> 2] = Math_fround(0.0);
 HEAPF32[$sourceRec + 8 >> 2] = Math_fround(HEAP32[$texture + 4 >> 2] | 0);
 HEAPF32[$sourceRec + 12 >> 2] = Math_fround(HEAP32[$texture + 8 >> 2] | 0);
 HEAPF32[$destRec >> 2] = Math_fround(HEAPF32[$position >> 2]);
 HEAPF32[$destRec + 4 >> 2] = Math_fround(HEAPF32[$position + 4 >> 2]);
 $conv10 = Math_fround(HEAP32[$texture + 4 >> 2] | 0);
 HEAPF32[$destRec + 8 >> 2] = Math_fround($conv10 * Math_fround(HEAPF32[$scale$addr >> 2]));
 $conv13 = Math_fround(HEAP32[$texture + 8 >> 2] | 0);
 HEAPF32[$destRec + 12 >> 2] = Math_fround($conv13 * Math_fround(HEAPF32[$scale$addr >> 2]));
 HEAP32[$origin >> 2] = 0;
 HEAP32[$origin + 4 >> 2] = 0;
 $8 = Math_fround(HEAPF32[$rotation$addr >> 2]);
 HEAP32[$texture$byval_copy >> 2] = HEAP32[$texture >> 2];
 HEAP32[$texture$byval_copy + 4 >> 2] = HEAP32[$texture + 4 >> 2];
 HEAP32[$texture$byval_copy + 8 >> 2] = HEAP32[$texture + 8 >> 2];
 HEAP32[$texture$byval_copy + 12 >> 2] = HEAP32[$texture + 12 >> 2];
 HEAP32[$texture$byval_copy + 16 >> 2] = HEAP32[$texture + 16 >> 2];
 HEAP32[$sourceRec$byval_copy >> 2] = HEAP32[$sourceRec >> 2];
 HEAP32[$sourceRec$byval_copy + 4 >> 2] = HEAP32[$sourceRec + 4 >> 2];
 HEAP32[$sourceRec$byval_copy + 8 >> 2] = HEAP32[$sourceRec + 8 >> 2];
 HEAP32[$sourceRec$byval_copy + 12 >> 2] = HEAP32[$sourceRec + 12 >> 2];
 HEAP32[$destRec$byval_copy >> 2] = HEAP32[$destRec >> 2];
 HEAP32[$destRec$byval_copy + 4 >> 2] = HEAP32[$destRec + 4 >> 2];
 HEAP32[$destRec$byval_copy + 8 >> 2] = HEAP32[$destRec + 8 >> 2];
 HEAP32[$destRec$byval_copy + 12 >> 2] = HEAP32[$destRec + 12 >> 2];
 HEAP32[$origin$byval_copy >> 2] = HEAP32[$origin >> 2];
 HEAP32[$origin$byval_copy + 4 >> 2] = HEAP32[$origin + 4 >> 2];
 HEAP8[$tint$byval_copy >> 0] = HEAP8[$tint >> 0] | 0;
 HEAP8[$tint$byval_copy + 1 >> 0] = HEAP8[$tint + 1 >> 0] | 0;
 HEAP8[$tint$byval_copy + 2 >> 0] = HEAP8[$tint + 2 >> 0] | 0;
 HEAP8[$tint$byval_copy + 3 >> 0] = HEAP8[$tint + 3 >> 0] | 0;
 _DrawTexturePro($texture$byval_copy, $sourceRec$byval_copy, $destRec$byval_copy, $origin$byval_copy, $8, $tint$byval_copy);
 STACKTOP = sp;
 return;
}

function _stbi__expand_png_palette($a, $palette, $len, $pal_img_n) {
 $a = $a | 0;
 $palette = $palette | 0;
 $len = $len | 0;
 $pal_img_n = $pal_img_n | 0;
 var $59 = 0, $a$addr = 0, $cmp3 = 0, $i = 0, $n = 0, $n18 = 0, $orig = 0, $p = 0, $pal_img_n$addr = 0, $palette$addr = 0, $pixel_count = 0, $retval = 0, $temp_out = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 $retval = sp + 44 | 0;
 $a$addr = sp + 40 | 0;
 $palette$addr = sp + 36 | 0;
 $pal_img_n$addr = sp + 28 | 0;
 $i = sp + 24 | 0;
 $pixel_count = sp + 20 | 0;
 $p = sp + 16 | 0;
 $temp_out = sp + 12 | 0;
 $orig = sp + 8 | 0;
 $n = sp + 4 | 0;
 $n18 = sp;
 HEAP32[$a$addr >> 2] = $a;
 HEAP32[$palette$addr >> 2] = $palette;
 HEAP32[sp + 32 >> 2] = $len;
 HEAP32[$pal_img_n$addr >> 2] = $pal_img_n;
 HEAP32[$pixel_count >> 2] = Math_imul(HEAP32[HEAP32[HEAP32[$a$addr >> 2] >> 2] >> 2] | 0, HEAP32[(HEAP32[HEAP32[$a$addr >> 2] >> 2] | 0) + 4 >> 2] | 0) | 0;
 HEAP32[$orig >> 2] = HEAP32[(HEAP32[$a$addr >> 2] | 0) + 12 >> 2];
 HEAP32[$p >> 2] = _stbi__malloc_mad2(HEAP32[$pixel_count >> 2] | 0, HEAP32[$pal_img_n$addr >> 2] | 0, 0) | 0;
 if (!(HEAP32[$p >> 2] | 0)) {
  HEAP32[$retval >> 2] = _stbi__err(32857) | 0;
  $59 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $59 | 0;
 }
 HEAP32[$temp_out >> 2] = HEAP32[$p >> 2];
 $cmp3 = (HEAP32[$pal_img_n$addr >> 2] | 0) == 3;
 HEAP32[$i >> 2] = 0;
 L5 : do if ($cmp3) while (1) {
  if ((HEAP32[$i >> 2] | 0) >>> 0 >= (HEAP32[$pixel_count >> 2] | 0) >>> 0) break L5;
  HEAP32[$n >> 2] = (HEAPU8[(HEAP32[$orig >> 2] | 0) + (HEAP32[$i >> 2] | 0) >> 0] | 0) << 2;
  HEAP8[HEAP32[$p >> 2] >> 0] = HEAP8[(HEAP32[$palette$addr >> 2] | 0) + (HEAP32[$n >> 2] | 0) >> 0] | 0;
  HEAP8[(HEAP32[$p >> 2] | 0) + 1 >> 0] = HEAP8[(HEAP32[$palette$addr >> 2] | 0) + ((HEAP32[$n >> 2] | 0) + 1) >> 0] | 0;
  HEAP8[(HEAP32[$p >> 2] | 0) + 2 >> 0] = HEAP8[(HEAP32[$palette$addr >> 2] | 0) + ((HEAP32[$n >> 2] | 0) + 2) >> 0] | 0;
  HEAP32[$p >> 2] = (HEAP32[$p >> 2] | 0) + 3;
  HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
 } else while (1) {
  if ((HEAP32[$i >> 2] | 0) >>> 0 >= (HEAP32[$pixel_count >> 2] | 0) >>> 0) break L5;
  HEAP32[$n18 >> 2] = (HEAPU8[(HEAP32[$orig >> 2] | 0) + (HEAP32[$i >> 2] | 0) >> 0] | 0) << 2;
  HEAP8[HEAP32[$p >> 2] >> 0] = HEAP8[(HEAP32[$palette$addr >> 2] | 0) + (HEAP32[$n18 >> 2] | 0) >> 0] | 0;
  HEAP8[(HEAP32[$p >> 2] | 0) + 1 >> 0] = HEAP8[(HEAP32[$palette$addr >> 2] | 0) + ((HEAP32[$n18 >> 2] | 0) + 1) >> 0] | 0;
  HEAP8[(HEAP32[$p >> 2] | 0) + 2 >> 0] = HEAP8[(HEAP32[$palette$addr >> 2] | 0) + ((HEAP32[$n18 >> 2] | 0) + 2) >> 0] | 0;
  HEAP8[(HEAP32[$p >> 2] | 0) + 3 >> 0] = HEAP8[(HEAP32[$palette$addr >> 2] | 0) + ((HEAP32[$n18 >> 2] | 0) + 3) >> 0] | 0;
  HEAP32[$p >> 2] = (HEAP32[$p >> 2] | 0) + 4;
  HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
 } while (0);
 _free(HEAP32[(HEAP32[$a$addr >> 2] | 0) + 12 >> 2] | 0);
 HEAP32[(HEAP32[$a$addr >> 2] | 0) + 12 >> 2] = HEAP32[$temp_out >> 2];
 HEAP32[$retval >> 2] = 1;
 $59 = HEAP32[$retval >> 2] | 0;
 STACKTOP = sp;
 return $59 | 0;
}

function __ZNSt3__29__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_PKw($__ct, $__base, $__a, $__a_end, $__dc, $__thousands_sep, $__grouping, $__g, $__g_end, $__atoms) {
 $__ct = $__ct | 0;
 $__base = $__base | 0;
 $__a = $__a | 0;
 $__a_end = $__a_end | 0;
 $__dc = $__dc | 0;
 $__thousands_sep = $__thousands_sep | 0;
 $__grouping = $__grouping | 0;
 $__g = $__g | 0;
 $__g_end = $__g_end | 0;
 $__atoms = $__atoms | 0;
 var $0 = 0, $10 = 0, $3 = 0, $5 = 0, $6 = 0, $9 = 0, $__first$addr$0$i$idx = 0, $__first$addr$0$i$ptr = 0, $__first$addr$0$lcssa$i = 0, $add$ptr = 0, $cmp = 0, $cmp1 = 0, $retval$1 = 0, $sub$ptr$div19 = 0, $sub$ptr$sub18 = 0, label = 0;
 label = 0;
 $0 = HEAP32[$__a_end >> 2] | 0;
 $cmp = ($0 | 0) == ($__a | 0);
 do if ($cmp) {
  $cmp1 = (HEAP32[$__atoms + 96 >> 2] | 0) == ($__ct | 0);
  if (!$cmp1) if ((HEAP32[$__atoms + 100 >> 2] | 0) != ($__ct | 0)) {
   label = 5;
   break;
  }
  HEAP32[$__a_end >> 2] = $__a + 1;
  HEAP8[$__a >> 0] = $cmp1 ? 43 : 45;
  HEAP32[$__dc >> 2] = 0;
  $retval$1 = 0;
 } else label = 5; while (0);
 L6 : do if ((label | 0) == 5) {
  $3 = HEAP8[$__grouping + 11 >> 0] | 0;
  if (($__ct | 0) == ($__thousands_sep | 0) ? (($3 << 24 >> 24 < 0 ? HEAP32[$__grouping + 4 >> 2] | 0 : $3 & 255) | 0) != 0 : 0) {
   $5 = HEAP32[$__g_end >> 2] | 0;
   if (($5 - $__g | 0) >= 160) {
    $retval$1 = 0;
    break;
   }
   $6 = HEAP32[$__dc >> 2] | 0;
   HEAP32[$__g_end >> 2] = $5 + 4;
   HEAP32[$5 >> 2] = $6;
   HEAP32[$__dc >> 2] = 0;
   $retval$1 = 0;
   break;
  }
  $add$ptr = $__atoms + 104 | 0;
  $__first$addr$0$i$idx = 0;
  while (1) {
   $__first$addr$0$i$ptr = $__atoms + ($__first$addr$0$i$idx << 2) | 0;
   if (($__first$addr$0$i$idx | 0) == 26) {
    $__first$addr$0$lcssa$i = $add$ptr;
    break;
   }
   if ((HEAP32[$__first$addr$0$i$ptr >> 2] | 0) == ($__ct | 0)) {
    $__first$addr$0$lcssa$i = $__first$addr$0$i$ptr;
    break;
   } else $__first$addr$0$i$idx = $__first$addr$0$i$idx + 1 | 0;
  }
  $sub$ptr$sub18 = $__first$addr$0$lcssa$i - $__atoms | 0;
  $sub$ptr$div19 = $sub$ptr$sub18 >> 2;
  if (($sub$ptr$sub18 | 0) > 92) $retval$1 = -1; else {
   switch ($__base | 0) {
   case 10:
   case 8:
    {
     if (($sub$ptr$div19 | 0) >= ($__base | 0)) {
      $retval$1 = -1;
      break L6;
     }
     break;
    }
   case 16:
    {
     if (($sub$ptr$sub18 | 0) >= 88) {
      if ($cmp) {
       $retval$1 = -1;
       break L6;
      }
      if (($0 - $__a | 0) >= 3) {
       $retval$1 = -1;
       break L6;
      }
      if ((HEAP8[$0 + -1 >> 0] | 0) != 48) {
       $retval$1 = -1;
       break L6;
      }
      HEAP32[$__dc >> 2] = 0;
      $9 = HEAP8[14672 + $sub$ptr$div19 >> 0] | 0;
      HEAP32[$__a_end >> 2] = $0 + 1;
      HEAP8[$0 >> 0] = $9;
      $retval$1 = 0;
      break L6;
     }
     break;
    }
   default:
    {}
   }
   $10 = HEAP8[14672 + $sub$ptr$div19 >> 0] | 0;
   HEAP32[$__a_end >> 2] = $0 + 1;
   HEAP8[$0 >> 0] = $10;
   HEAP32[$__dc >> 2] = (HEAP32[$__dc >> 2] | 0) + 1;
   $retval$1 = 0;
  }
 } while (0);
 return $retval$1 | 0;
}

function _MatrixOrtho($agg$result, $left, $right, $bottom, $top, $near, $far) {
 $agg$result = $agg$result | 0;
 $left = +$left;
 $right = +$right;
 $bottom = +$bottom;
 $top = +$top;
 $near = +$near;
 $far = +$far;
 var $bottom$addr = 0, $conv11 = f0, $conv16 = f0, $conv7 = f0, $far$addr = 0, $fn = 0, $left$addr = 0, $near$addr = 0, $result = 0, $right$addr = 0, $rl = 0, $sub14 = f0, $sub19 = f0, $sub9 = f0, $tb = 0, $top$addr = 0, dest = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(128);
 $left$addr = sp + 40 | 0;
 $right$addr = sp + 32 | 0;
 $bottom$addr = sp + 24 | 0;
 $top$addr = sp + 16 | 0;
 $near$addr = sp + 8 | 0;
 $far$addr = sp;
 $result = sp + 64 | 0;
 $rl = sp + 56 | 0;
 $tb = sp + 52 | 0;
 $fn = sp + 48 | 0;
 HEAPF64[$left$addr >> 3] = $left;
 HEAPF64[$right$addr >> 3] = $right;
 HEAPF64[$bottom$addr >> 3] = $bottom;
 HEAPF64[$top$addr >> 3] = $top;
 HEAPF64[$near$addr >> 3] = $near;
 HEAPF64[$far$addr >> 3] = $far;
 dest = $result;
 stop = dest + 64 | 0;
 do {
  HEAP32[dest >> 2] = 0;
  dest = dest + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAPF32[$rl >> 2] = Math_fround(+HEAPF64[$right$addr >> 3] - +HEAPF64[$left$addr >> 3]);
 HEAPF32[$tb >> 2] = Math_fround(+HEAPF64[$top$addr >> 3] - +HEAPF64[$bottom$addr >> 3]);
 HEAPF32[$fn >> 2] = Math_fround(+HEAPF64[$far$addr >> 3] - +HEAPF64[$near$addr >> 3]);
 HEAPF32[$result >> 2] = Math_fround(Math_fround(2.0) / Math_fround(HEAPF32[$rl >> 2]));
 HEAPF32[$result + 16 >> 2] = Math_fround(0.0);
 HEAPF32[$result + 32 >> 2] = Math_fround(0.0);
 HEAPF32[$result + 48 >> 2] = Math_fround(0.0);
 HEAPF32[$result + 4 >> 2] = Math_fround(0.0);
 HEAPF32[$result + 20 >> 2] = Math_fround(Math_fround(2.0) / Math_fround(HEAPF32[$tb >> 2]));
 HEAPF32[$result + 36 >> 2] = Math_fround(0.0);
 HEAPF32[$result + 52 >> 2] = Math_fround(0.0);
 HEAPF32[$result + 8 >> 2] = Math_fround(0.0);
 HEAPF32[$result + 24 >> 2] = Math_fround(0.0);
 HEAPF32[$result + 40 >> 2] = Math_fround(Math_fround(-2.0) / Math_fround(HEAPF32[$fn >> 2]));
 HEAPF32[$result + 56 >> 2] = Math_fround(0.0);
 $conv7 = Math_fround(+HEAPF64[$left$addr >> 3]);
 $sub9 = Math_fround(-Math_fround($conv7 + Math_fround(+HEAPF64[$right$addr >> 3])));
 HEAPF32[$result + 12 >> 2] = Math_fround($sub9 / Math_fround(HEAPF32[$rl >> 2]));
 $conv11 = Math_fround(+HEAPF64[$top$addr >> 3]);
 $sub14 = Math_fround(-Math_fround($conv11 + Math_fround(+HEAPF64[$bottom$addr >> 3])));
 HEAPF32[$result + 28 >> 2] = Math_fround($sub14 / Math_fround(HEAPF32[$tb >> 2]));
 $conv16 = Math_fround(+HEAPF64[$far$addr >> 3]);
 $sub19 = Math_fround(-Math_fround($conv16 + Math_fround(+HEAPF64[$near$addr >> 3])));
 HEAPF32[$result + 44 >> 2] = Math_fround($sub19 / Math_fround(HEAPF32[$fn >> 2]));
 HEAPF32[$result + 60 >> 2] = Math_fround(1.0);
 dest = $agg$result;
 src = $result;
 stop = dest + 64 | 0;
 do {
  HEAP32[dest >> 2] = HEAP32[src >> 2];
  dest = dest + 4 | 0;
  src = src + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 STACKTOP = sp;
 return;
}

function __ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwb($this, $__s, $__iob, $__fl, $__v) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__iob = $__iob | 0;
 $__fl = $__fl | 0;
 $__v = $__v | 0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $15 = 0, $6 = 0, $7 = 0, $8 = 0, $__i$sroa$0$0 = 0, $__nout_$i$i = 0, $__size_$i$i$i = 0, $__size_$i2$i$i = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call$i = 0, $call$i$i = 0, $retval$0$i$i = 0, $retval$sroa$0$0 = 0, $retval$sroa$0$0$copyload = 0, $tobool$i$i$i8 = 0, $vtable$i = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $agg$tmp$byval_copy = sp + 4 | 0;
 $agg$tmp = sp;
 if (!(HEAP32[$__iob + 4 >> 2] & 1)) {
  $1 = HEAP32[(HEAP32[$this >> 2] | 0) + 24 >> 2] | 0;
  HEAP32[$agg$tmp >> 2] = HEAP32[$__s >> 2];
  HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
  $retval$sroa$0$0 = FUNCTION_TABLE_iiiiii[$1 & 31]($this, $agg$tmp$byval_copy, $__iob, $__fl, $__v & 1) | 0;
 } else {
  __ZNKSt3__28ios_base6getlocEv($agg$tmp$byval_copy, $__iob);
  $call$i = __ZNKSt3__26locale9use_facetERNS0_2idE($agg$tmp$byval_copy, 61256) | 0;
  __ZNSt3__26localeD2Ev($agg$tmp$byval_copy);
  $vtable$i = HEAP32[$call$i >> 2] | 0;
  if ($__v) FUNCTION_TABLE_vii[HEAP32[$vtable$i + 24 >> 2] & 127]($agg$tmp$byval_copy, $call$i); else FUNCTION_TABLE_vii[HEAP32[$vtable$i + 28 >> 2] & 127]($agg$tmp$byval_copy, $call$i);
  $__size_$i$i$i = $agg$tmp$byval_copy + 8 + 3 | 0;
  $6 = HEAP8[$__size_$i$i$i >> 0] | 0;
  $7 = HEAP32[$agg$tmp$byval_copy >> 2] | 0;
  $__size_$i2$i$i = $agg$tmp$byval_copy + 4 | 0;
  $10 = $7;
  $8 = $6;
  $__i$sroa$0$0 = $6 << 24 >> 24 < 0 ? $7 : $agg$tmp$byval_copy;
  while (1) {
   $tobool$i$i$i8 = $8 << 24 >> 24 < 0;
   if (($__i$sroa$0$0 | 0) == (($tobool$i$i$i8 ? $10 : $agg$tmp$byval_copy) + (($tobool$i$i$i8 ? HEAP32[$__size_$i2$i$i >> 2] | 0 : $8 & 255) << 2) | 0)) break;
   $11 = HEAP32[$__i$sroa$0$0 >> 2] | 0;
   $12 = HEAP32[$__s >> 2] | 0;
   if ($12 | 0) {
    $__nout_$i$i = $12 + 24 | 0;
    $13 = HEAP32[$__nout_$i$i >> 2] | 0;
    if (($13 | 0) == (HEAP32[$12 + 28 >> 2] | 0)) {
     $15 = HEAP32[(HEAP32[$12 >> 2] | 0) + 52 >> 2] | 0;
     $call$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw($11) | 0;
     $retval$0$i$i = FUNCTION_TABLE_iii[$15 & 31]($12, $call$i$i) | 0;
    } else {
     HEAP32[$__nout_$i$i >> 2] = $13 + 4;
     HEAP32[$13 >> 2] = $11;
     $retval$0$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw($11) | 0;
    }
    if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) HEAP32[$__s >> 2] = 0;
   }
   $10 = HEAP32[$agg$tmp$byval_copy >> 2] | 0;
   $8 = HEAP8[$__size_$i$i$i >> 0] | 0;
   $__i$sroa$0$0 = $__i$sroa$0$0 + 4 | 0;
  }
  $retval$sroa$0$0$copyload = HEAP32[$__s >> 2] | 0;
  __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($agg$tmp$byval_copy);
  $retval$sroa$0$0 = $retval$sroa$0$0$copyload;
 }
 STACKTOP = sp;
 return $retval$sroa$0$0 | 0;
}

function _wcsnrtombs($dst, $wcs, $wn, $n, $st) {
 $dst = $dst | 0;
 $wcs = $wcs | 0;
 $wn = $wn | 0;
 $n = $n | 0;
 $st = $st | 0;
 var $$cast = 0, $0 = 0, $10 = 0, $2 = 0, $3 = 0, $6 = 0, $add15 = 0, $add35 = 0, $buf = 0, $call = 0, $call24 = 0, $cmp = 0, $cmp11 = 0, $cnt$054 = 0, $cnt$1 = 0, $cnt$247 = 0, $cnt$3 = 0, $n$addr$0 = 0, $n$addr$152 = 0, $n$addr$2 = 0, $n$addr$3 = 0, $n$addr$445 = 0, $s$0 = 0, $s$139 = 0, $s$155 = 0, $s$2 = 0, $s$348 = 0, $spec$select = 0, $sub = 0, $tobool = 0, $wn$addr$053 = 0, $wn$addr$1 = 0, $wn$addr$246 = 0, $ws = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 272 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(272);
 $buf = sp;
 $ws = sp + 256 | 0;
 $0 = HEAP32[$wcs >> 2] | 0;
 HEAP32[$ws >> 2] = $0;
 $tobool = ($dst | 0) != 0;
 $n$addr$0 = $tobool ? $n : 256;
 $s$0 = $tobool ? $dst : $buf;
 $$cast = $0;
 L1 : do if (($n$addr$0 | 0) != 0 & ($0 | 0) != 0) {
  $10 = $$cast;
  $cnt$054 = 0;
  $n$addr$152 = $n$addr$0;
  $s$155 = $s$0;
  $wn$addr$053 = $wn;
  while (1) {
   $cmp = $wn$addr$053 >>> 0 >= $n$addr$152 >>> 0;
   if (!($cmp | $wn$addr$053 >>> 0 > 32)) {
    $3 = $10;
    $cnt$1 = $cnt$054;
    $n$addr$3 = $n$addr$152;
    $s$139 = $s$155;
    $wn$addr$1 = $wn$addr$053;
    break L1;
   }
   $spec$select = $cmp ? $n$addr$152 : $wn$addr$053;
   $sub = $wn$addr$053 - $spec$select | 0;
   $call = _wcsrtombs($s$155, $ws, $spec$select, 0) | 0;
   if (($call | 0) == -1) break;
   $cmp11 = ($s$155 | 0) == ($buf | 0);
   $n$addr$2 = $n$addr$152 - ($cmp11 ? 0 : $call) | 0;
   $s$2 = $cmp11 ? $s$155 : $s$155 + $call | 0;
   $add15 = $call + $cnt$054 | 0;
   $2 = HEAP32[$ws >> 2] | 0;
   if (($n$addr$2 | 0) != 0 & ($2 | 0) != 0) {
    $10 = $2;
    $cnt$054 = $add15;
    $n$addr$152 = $n$addr$2;
    $s$155 = $s$2;
    $wn$addr$053 = $sub;
   } else {
    $3 = $2;
    $cnt$1 = $add15;
    $n$addr$3 = $n$addr$2;
    $s$139 = $s$2;
    $wn$addr$1 = $sub;
    break L1;
   }
  }
  $3 = HEAP32[$ws >> 2] | 0;
  $cnt$1 = -1;
  $n$addr$3 = 0;
  $s$139 = $s$155;
  $wn$addr$1 = $sub;
 } else {
  $3 = $$cast;
  $cnt$1 = 0;
  $n$addr$3 = $n$addr$0;
  $s$139 = $s$0;
  $wn$addr$1 = $wn;
 } while (0);
 L9 : do if (!$3) $cnt$3 = $cnt$1; else if (($n$addr$3 | 0) != 0 & ($wn$addr$1 | 0) != 0) {
  $6 = $3;
  $cnt$247 = $cnt$1;
  $n$addr$445 = $n$addr$3;
  $s$348 = $s$139;
  $wn$addr$246 = $wn$addr$1;
  while (1) {
   $call24 = _wcrtomb($s$348, HEAP32[$6 >> 2] | 0, 0) | 0;
   if (($call24 + 1 | 0) >>> 0 < 2) break;
   $6 = (HEAP32[$ws >> 2] | 0) + 4 | 0;
   HEAP32[$ws >> 2] = $6;
   $wn$addr$246 = $wn$addr$246 + -1 | 0;
   $n$addr$445 = $n$addr$445 - $call24 | 0;
   $add35 = $call24 + $cnt$247 | 0;
   if (!(($n$addr$445 | 0) != 0 & ($wn$addr$246 | 0) != 0)) {
    $cnt$3 = $add35;
    break L9;
   } else {
    $cnt$247 = $add35;
    $s$348 = $s$348 + $call24 | 0;
   }
  }
  if (!$call24) {
   HEAP32[$ws >> 2] = 0;
   $cnt$3 = $cnt$247;
  } else $cnt$3 = -1;
 } else $cnt$3 = $cnt$1; while (0);
 if ($tobool) HEAP32[$wcs >> 2] = HEAP32[$ws >> 2];
 STACKTOP = sp;
 return $cnt$3 | 0;
}

function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRb($this, $__b, $__e, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $1 = 0, $__lv = 0, $add$ptr = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $agg$tmp2 = 0, $agg$tmp9 = 0, $agg$tmp9$byval_copy = 0, $arraydestroy$elementPast = 0, $call$i = 0, $call$i16 = 0, $retval$sroa$0$0 = 0, $retval$sroa$0$0$copyload15 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 $agg$tmp9$byval_copy = sp + 40 | 0;
 $agg$tmp$byval_copy = sp;
 $__lv = sp + 32 | 0;
 $agg$tmp = sp + 36 | 0;
 $agg$tmp2 = sp + 28 | 0;
 $agg$tmp9 = sp + 24 | 0;
 if (!(HEAP32[$__iob + 4 >> 2] & 1)) {
  HEAP32[$__lv >> 2] = -1;
  $1 = HEAP32[(HEAP32[$this >> 2] | 0) + 16 >> 2] | 0;
  HEAP32[$agg$tmp >> 2] = HEAP32[$__b >> 2];
  HEAP32[$agg$tmp2 >> 2] = HEAP32[$__e >> 2];
  HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
  HEAP32[$agg$tmp9$byval_copy >> 2] = HEAP32[$agg$tmp2 >> 2];
  HEAP32[$__b >> 2] = FUNCTION_TABLE_iiiiiii[$1 & 63]($this, $agg$tmp$byval_copy, $agg$tmp9$byval_copy, $__iob, $__err, $__lv) | 0;
  switch (HEAP32[$__lv >> 2] | 0) {
  case 0:
   {
    HEAP8[$__v >> 0] = 0;
    break;
   }
  case 1:
   {
    HEAP8[$__v >> 0] = 1;
    break;
   }
  default:
   {
    HEAP8[$__v >> 0] = 1;
    HEAP32[$__err >> 2] = 4;
   }
  }
  $retval$sroa$0$0 = HEAP32[$__b >> 2] | 0;
 } else {
  __ZNKSt3__28ios_base6getlocEv($agg$tmp9$byval_copy, $__iob);
  $call$i = __ZNKSt3__26locale9use_facetERNS0_2idE($agg$tmp9$byval_copy, 61248) | 0;
  __ZNSt3__26localeD2Ev($agg$tmp9$byval_copy);
  __ZNKSt3__28ios_base6getlocEv($agg$tmp9$byval_copy, $__iob);
  $call$i16 = __ZNKSt3__26locale9use_facetERNS0_2idE($agg$tmp9$byval_copy, 61256) | 0;
  __ZNSt3__26localeD2Ev($agg$tmp9$byval_copy);
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$call$i16 >> 2] | 0) + 24 >> 2] & 127]($agg$tmp$byval_copy, $call$i16);
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$call$i16 >> 2] | 0) + 28 >> 2] & 127]($agg$tmp$byval_copy + 12 | 0, $call$i16);
  HEAP32[$agg$tmp9 >> 2] = HEAP32[$__e >> 2];
  $add$ptr = $agg$tmp$byval_copy + 24 | 0;
  HEAP32[$agg$tmp9$byval_copy >> 2] = HEAP32[$agg$tmp9 >> 2];
  HEAP8[$__v >> 0] = (__ZNSt3__214__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b, $agg$tmp9$byval_copy, $agg$tmp$byval_copy, $add$ptr, $call$i, $__err, 1) | 0) == ($agg$tmp$byval_copy | 0) & 1;
  $retval$sroa$0$0$copyload15 = HEAP32[$__b >> 2] | 0;
  $arraydestroy$elementPast = $add$ptr;
  do {
   $arraydestroy$elementPast = $arraydestroy$elementPast + -12 | 0;
   __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($arraydestroy$elementPast);
  } while (($arraydestroy$elementPast | 0) != ($agg$tmp$byval_copy | 0));
  $retval$sroa$0$0 = $retval$sroa$0$0$copyload15;
 }
 STACKTOP = sp;
 return $retval$sroa$0$0 | 0;
}

function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRb($this, $__b, $__e, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $1 = 0, $__lv = 0, $add$ptr = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $agg$tmp2 = 0, $agg$tmp9 = 0, $agg$tmp9$byval_copy = 0, $arraydestroy$elementPast = 0, $call$i = 0, $call$i16 = 0, $retval$sroa$0$0 = 0, $retval$sroa$0$0$copyload15 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 $agg$tmp9$byval_copy = sp + 40 | 0;
 $agg$tmp$byval_copy = sp;
 $__lv = sp + 32 | 0;
 $agg$tmp = sp + 36 | 0;
 $agg$tmp2 = sp + 28 | 0;
 $agg$tmp9 = sp + 24 | 0;
 if (!(HEAP32[$__iob + 4 >> 2] & 1)) {
  HEAP32[$__lv >> 2] = -1;
  $1 = HEAP32[(HEAP32[$this >> 2] | 0) + 16 >> 2] | 0;
  HEAP32[$agg$tmp >> 2] = HEAP32[$__b >> 2];
  HEAP32[$agg$tmp2 >> 2] = HEAP32[$__e >> 2];
  HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
  HEAP32[$agg$tmp9$byval_copy >> 2] = HEAP32[$agg$tmp2 >> 2];
  HEAP32[$__b >> 2] = FUNCTION_TABLE_iiiiiii[$1 & 63]($this, $agg$tmp$byval_copy, $agg$tmp9$byval_copy, $__iob, $__err, $__lv) | 0;
  switch (HEAP32[$__lv >> 2] | 0) {
  case 0:
   {
    HEAP8[$__v >> 0] = 0;
    break;
   }
  case 1:
   {
    HEAP8[$__v >> 0] = 1;
    break;
   }
  default:
   {
    HEAP8[$__v >> 0] = 1;
    HEAP32[$__err >> 2] = 4;
   }
  }
  $retval$sroa$0$0 = HEAP32[$__b >> 2] | 0;
 } else {
  __ZNKSt3__28ios_base6getlocEv($agg$tmp9$byval_copy, $__iob);
  $call$i = __ZNKSt3__26locale9use_facetERNS0_2idE($agg$tmp9$byval_copy, 61216) | 0;
  __ZNSt3__26localeD2Ev($agg$tmp9$byval_copy);
  __ZNKSt3__28ios_base6getlocEv($agg$tmp9$byval_copy, $__iob);
  $call$i16 = __ZNKSt3__26locale9use_facetERNS0_2idE($agg$tmp9$byval_copy, 61232) | 0;
  __ZNSt3__26localeD2Ev($agg$tmp9$byval_copy);
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$call$i16 >> 2] | 0) + 24 >> 2] & 127]($agg$tmp$byval_copy, $call$i16);
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$call$i16 >> 2] | 0) + 28 >> 2] & 127]($agg$tmp$byval_copy + 12 | 0, $call$i16);
  HEAP32[$agg$tmp9 >> 2] = HEAP32[$__e >> 2];
  $add$ptr = $agg$tmp$byval_copy + 24 | 0;
  HEAP32[$agg$tmp9$byval_copy >> 2] = HEAP32[$agg$tmp9 >> 2];
  HEAP8[$__v >> 0] = (__ZNSt3__214__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b, $agg$tmp9$byval_copy, $agg$tmp$byval_copy, $add$ptr, $call$i, $__err, 1) | 0) == ($agg$tmp$byval_copy | 0) & 1;
  $retval$sroa$0$0$copyload15 = HEAP32[$__b >> 2] | 0;
  $arraydestroy$elementPast = $add$ptr;
  do {
   $arraydestroy$elementPast = $arraydestroy$elementPast + -12 | 0;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($arraydestroy$elementPast);
  } while (($arraydestroy$elementPast | 0) != ($agg$tmp$byval_copy | 0));
  $retval$sroa$0$0 = $retval$sroa$0$0$copyload15;
 }
 STACKTOP = sp;
 return $retval$sroa$0$0 | 0;
}

function __ZNSt3__29__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_PKc($__ct, $__base, $__a, $__a_end, $__dc, $__thousands_sep, $__grouping, $__g, $__g_end, $__atoms) {
 $__ct = $__ct | 0;
 $__base = $__base | 0;
 $__a = $__a | 0;
 $__a_end = $__a_end | 0;
 $__dc = $__dc | 0;
 $__thousands_sep = $__thousands_sep | 0;
 $__grouping = $__grouping | 0;
 $__g = $__g | 0;
 $__g_end = $__g_end | 0;
 $__atoms = $__atoms | 0;
 var $0 = 0, $10 = 0, $3 = 0, $5 = 0, $6 = 0, $9 = 0, $__first$addr$0$i$idx = 0, $__first$addr$0$i$ptr = 0, $__first$addr$0$lcssa$i = 0, $add$ptr = 0, $cmp = 0, $cmp2 = 0, $retval$1 = 0, $sub$ptr$sub25 = 0, label = 0;
 label = 0;
 $0 = HEAP32[$__a_end >> 2] | 0;
 $cmp = ($0 | 0) == ($__a | 0);
 do if ($cmp) {
  $cmp2 = (HEAP8[$__atoms + 24 >> 0] | 0) == $__ct << 24 >> 24;
  if (!$cmp2) if ((HEAP8[$__atoms + 25 >> 0] | 0) != $__ct << 24 >> 24) {
   label = 5;
   break;
  }
  HEAP32[$__a_end >> 2] = $__a + 1;
  HEAP8[$__a >> 0] = $cmp2 ? 43 : 45;
  HEAP32[$__dc >> 2] = 0;
  $retval$1 = 0;
 } else label = 5; while (0);
 L6 : do if ((label | 0) == 5) {
  $3 = HEAP8[$__grouping + 11 >> 0] | 0;
  if ($__ct << 24 >> 24 == $__thousands_sep << 24 >> 24 ? (($3 << 24 >> 24 < 0 ? HEAP32[$__grouping + 4 >> 2] | 0 : $3 & 255) | 0) != 0 : 0) {
   $5 = HEAP32[$__g_end >> 2] | 0;
   if (($5 - $__g | 0) >= 160) {
    $retval$1 = 0;
    break;
   }
   $6 = HEAP32[$__dc >> 2] | 0;
   HEAP32[$__g_end >> 2] = $5 + 4;
   HEAP32[$5 >> 2] = $6;
   HEAP32[$__dc >> 2] = 0;
   $retval$1 = 0;
   break;
  }
  $add$ptr = $__atoms + 26 | 0;
  $__first$addr$0$i$idx = 0;
  while (1) {
   $__first$addr$0$i$ptr = $__atoms + $__first$addr$0$i$idx | 0;
   if (($__first$addr$0$i$idx | 0) == 26) {
    $__first$addr$0$lcssa$i = $add$ptr;
    break;
   }
   if ((HEAP8[$__first$addr$0$i$ptr >> 0] | 0) == $__ct << 24 >> 24) {
    $__first$addr$0$lcssa$i = $__first$addr$0$i$ptr;
    break;
   } else $__first$addr$0$i$idx = $__first$addr$0$i$idx + 1 | 0;
  }
  $sub$ptr$sub25 = $__first$addr$0$lcssa$i - $__atoms | 0;
  if (($sub$ptr$sub25 | 0) > 23) $retval$1 = -1; else {
   switch ($__base | 0) {
   case 10:
   case 8:
    {
     if (($sub$ptr$sub25 | 0) >= ($__base | 0)) {
      $retval$1 = -1;
      break L6;
     }
     break;
    }
   case 16:
    {
     if (($sub$ptr$sub25 | 0) >= 22) {
      if ($cmp) {
       $retval$1 = -1;
       break L6;
      }
      if (($0 - $__a | 0) >= 3) {
       $retval$1 = -1;
       break L6;
      }
      if ((HEAP8[$0 + -1 >> 0] | 0) != 48) {
       $retval$1 = -1;
       break L6;
      }
      HEAP32[$__dc >> 2] = 0;
      $9 = HEAP8[14672 + $sub$ptr$sub25 >> 0] | 0;
      HEAP32[$__a_end >> 2] = $0 + 1;
      HEAP8[$0 >> 0] = $9;
      $retval$1 = 0;
      break L6;
     }
     break;
    }
   default:
    {}
   }
   $10 = HEAP8[14672 + $sub$ptr$sub25 >> 0] | 0;
   HEAP32[$__a_end >> 2] = $0 + 1;
   HEAP8[$0 >> 0] = $10;
   HEAP32[$__dc >> 2] = (HEAP32[$__dc >> 2] | 0) + 1;
   $retval$1 = 0;
  }
 } while (0);
 return $retval$1 | 0;
}

function __ZN4tson8PropertyC2ERKN8nlohmann10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS1_14adl_serializerEEE($this, $json) {
 $this = $this | 0;
 $json = $json | 0;
 var $1 = 0, $__cap_$i$i$i$i$i = 0, $__size_$i1$i$i$i$i = 0, $m_name = 0, $ref$tmp$i$i$i$i = 0, $ref$tmp9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $ref$tmp$i$i$i$i = sp + 12 | 0;
 $ref$tmp9 = sp;
 HEAP8[$this >> 0] = 0;
 $m_name = $this + 4 | 0;
 HEAP32[$m_name >> 2] = 0;
 HEAP32[$m_name + 4 >> 2] = 0;
 HEAP32[$m_name + 8 >> 2] = 0;
 HEAP32[$m_name + 12 >> 2] = 0;
 __ZNSt3__23any8_StorageC2Ev($this + 20 | 0);
 __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE3getIS9_S9_Li0EEET0_v($ref$tmp$i$i$i$i, __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEixIKcEERKSB_PT_($json, 22556) | 0);
 __ZN4tson8Property15setTypeByStringERKNSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE($this, $ref$tmp$i$i$i$i);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp$i$i$i$i);
 __ZN4tson8Property14setValueByTypeERKN8nlohmann10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS1_14adl_serializerEEE($this, __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEixIKcEERKSB_PT_($json, 22596) | 0);
 __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE3getIS9_S9_Li0EEET0_v($ref$tmp9, __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEixIKcEERKSB_PT_($json, 22602) | 0);
 $__size_$i1$i$i$i$i = $m_name + 11 | 0;
 if ((HEAP8[$__size_$i1$i$i$i$i >> 0] | 0) < 0) {
  $1 = HEAP32[$m_name >> 2] | 0;
  HEAP8[$ref$tmp$i$i$i$i >> 0] = 0;
  __ZNSt3__211char_traitsIcE6assignERcRKc($1, $ref$tmp$i$i$i$i);
  HEAP32[$this + 8 >> 2] = 0;
  if ((HEAP8[$__size_$i1$i$i$i$i >> 0] | 0) < 0) {
   $__cap_$i$i$i$i$i = $this + 12 | 0;
   __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm(HEAP32[$m_name >> 2] | 0, HEAP32[$__cap_$i$i$i$i$i >> 2] & 2147483647);
   HEAP32[$__cap_$i$i$i$i$i >> 2] = 0;
  }
 } else {
  HEAP8[$ref$tmp$i$i$i$i >> 0] = 0;
  __ZNSt3__211char_traitsIcE6assignERcRKc($m_name, $ref$tmp$i$i$i$i);
  HEAP8[$__size_$i1$i$i$i$i >> 0] = 0;
 };
 HEAP32[$m_name >> 2] = HEAP32[$ref$tmp9 >> 2];
 HEAP32[$m_name + 4 >> 2] = HEAP32[$ref$tmp9 + 4 >> 2];
 HEAP32[$m_name + 8 >> 2] = HEAP32[$ref$tmp9 + 8 >> 2];
 HEAP32[$ref$tmp9 >> 2] = 0;
 HEAP32[$ref$tmp9 + 4 >> 2] = 0;
 HEAP32[$ref$tmp9 + 8 >> 2] = 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp9);
 STACKTOP = sp;
 return;
}

function _stbi__ldr_to_hdr($data, $x, $y, $comp) {
 $data = $data | 0;
 $x = $x | 0;
 $y = $y | 0;
 $comp = $comp | 0;
 var $44 = 0, $9 = 0, $comp$addr = 0, $conv18 = f0, $data$addr = 0, $div38 = f0, $i = 0, $k = 0, $mul12 = 0, $mul19 = 0, $mul33 = 0, $mul39 = 0, $n = 0, $output = 0, $retval = 0, $tobool3 = 0, $x$addr = 0, $y$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 $retval = sp + 32 | 0;
 $data$addr = sp + 28 | 0;
 $x$addr = sp + 24 | 0;
 $y$addr = sp + 20 | 0;
 $comp$addr = sp + 16 | 0;
 $i = sp + 12 | 0;
 $k = sp + 8 | 0;
 $n = sp + 4 | 0;
 $output = sp;
 HEAP32[$data$addr >> 2] = $data;
 HEAP32[$x$addr >> 2] = $x;
 HEAP32[$y$addr >> 2] = $y;
 HEAP32[$comp$addr >> 2] = $comp;
 if (!(HEAP32[$data$addr >> 2] | 0)) {
  HEAP32[$retval >> 2] = 0;
  $44 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $44 | 0;
 }
 HEAP32[$output >> 2] = _stbi__malloc_mad4(HEAP32[$x$addr >> 2] | 0, HEAP32[$y$addr >> 2] | 0, HEAP32[$comp$addr >> 2] | 0, 4, 0) | 0;
 if (!(HEAP32[$output >> 2] | 0)) {
  _free(HEAP32[$data$addr >> 2] | 0);
  $tobool3 = (_stbi__err(32857) | 0) != 0;
  HEAP32[$retval >> 2] = $tobool3 ? 0 : 0;
  $44 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $44 | 0;
 }
 $9 = HEAP32[$comp$addr >> 2] | 0;
 if (HEAP32[$comp$addr >> 2] & 1 | 0) HEAP32[$n >> 2] = $9; else HEAP32[$n >> 2] = $9 - 1;
 HEAP32[$i >> 2] = 0;
 while (1) {
  if ((HEAP32[$i >> 2] | 0) >= (Math_imul(HEAP32[$x$addr >> 2] | 0, HEAP32[$y$addr >> 2] | 0) | 0)) break;
  HEAP32[$k >> 2] = 0;
  while (1) {
   if ((HEAP32[$k >> 2] | 0) >= (HEAP32[$n >> 2] | 0)) break;
   $mul12 = Math_imul(HEAP32[$i >> 2] | 0, HEAP32[$comp$addr >> 2] | 0) | 0;
   $conv18 = Math_fround(+Math_pow(+(+Math_fround(Math_fround(HEAPU8[(HEAP32[$data$addr >> 2] | 0) + ($mul12 + (HEAP32[$k >> 2] | 0)) >> 0] | 0 | 0) / Math_fround(255.0))), +(+Math_fround(2.20000005))) * +Math_fround(1.0));
   $mul19 = Math_imul(HEAP32[$i >> 2] | 0, HEAP32[$comp$addr >> 2] | 0) | 0;
   HEAPF32[(HEAP32[$output >> 2] | 0) + ($mul19 + (HEAP32[$k >> 2] | 0) << 2) >> 2] = $conv18;
   HEAP32[$k >> 2] = (HEAP32[$k >> 2] | 0) + 1;
  }
  HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
 }
 L21 : do if ((HEAP32[$n >> 2] | 0) < (HEAP32[$comp$addr >> 2] | 0)) {
  HEAP32[$i >> 2] = 0;
  while (1) {
   if ((HEAP32[$i >> 2] | 0) >= (Math_imul(HEAP32[$x$addr >> 2] | 0, HEAP32[$y$addr >> 2] | 0) | 0)) break L21;
   $mul33 = Math_imul(HEAP32[$i >> 2] | 0, HEAP32[$comp$addr >> 2] | 0) | 0;
   $div38 = Math_fround(Math_fround(HEAPU8[(HEAP32[$data$addr >> 2] | 0) + ($mul33 + (HEAP32[$n >> 2] | 0)) >> 0] | 0 | 0) / Math_fround(255.0));
   $mul39 = Math_imul(HEAP32[$i >> 2] | 0, HEAP32[$comp$addr >> 2] | 0) | 0;
   HEAPF32[(HEAP32[$output >> 2] | 0) + ($mul39 + (HEAP32[$n >> 2] | 0) << 2) >> 2] = $div38;
   HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
  }
 } while (0);
 _free(HEAP32[$data$addr >> 2] | 0);
 HEAP32[$retval >> 2] = HEAP32[$output >> 2];
 $44 = HEAP32[$retval >> 2] | 0;
 STACKTOP = sp;
 return $44 | 0;
}

function __ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcb($this, $__s, $__iob, $__fl, $__v) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__iob = $__iob | 0;
 $__fl = $__fl | 0;
 $__v = $__v | 0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $14 = 0, $5 = 0, $6 = 0, $7 = 0, $9 = 0, $__i$sroa$0$0 = 0, $__nout_$i$i = 0, $__size_$i$i$i = 0, $__size_$i3$i$i = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call$i = 0, $call$i$i = 0, $retval$0$i$i = 0, $retval$sroa$0$0 = 0, $retval$sroa$0$0$copyload = 0, $tobool$i$i$i9 = 0, $vtable$i = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $agg$tmp$byval_copy = sp + 4 | 0;
 $agg$tmp = sp;
 if (!(HEAP32[$__iob + 4 >> 2] & 1)) {
  $1 = HEAP32[(HEAP32[$this >> 2] | 0) + 24 >> 2] | 0;
  HEAP32[$agg$tmp >> 2] = HEAP32[$__s >> 2];
  HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
  $retval$sroa$0$0 = FUNCTION_TABLE_iiiiii[$1 & 31]($this, $agg$tmp$byval_copy, $__iob, $__fl, $__v & 1) | 0;
 } else {
  __ZNKSt3__28ios_base6getlocEv($agg$tmp$byval_copy, $__iob);
  $call$i = __ZNKSt3__26locale9use_facetERNS0_2idE($agg$tmp$byval_copy, 61232) | 0;
  __ZNSt3__26localeD2Ev($agg$tmp$byval_copy);
  $vtable$i = HEAP32[$call$i >> 2] | 0;
  if ($__v) FUNCTION_TABLE_vii[HEAP32[$vtable$i + 24 >> 2] & 127]($agg$tmp$byval_copy, $call$i); else FUNCTION_TABLE_vii[HEAP32[$vtable$i + 28 >> 2] & 127]($agg$tmp$byval_copy, $call$i);
  $__size_$i$i$i = $agg$tmp$byval_copy + 11 | 0;
  $5 = HEAP8[$__size_$i$i$i >> 0] | 0;
  $6 = HEAP32[$agg$tmp$byval_copy >> 2] | 0;
  $__size_$i3$i$i = $agg$tmp$byval_copy + 4 | 0;
  $7 = $5;
  $9 = $6;
  $__i$sroa$0$0 = $5 << 24 >> 24 < 0 ? $6 : $agg$tmp$byval_copy;
  while (1) {
   $tobool$i$i$i9 = $7 << 24 >> 24 < 0;
   if (($__i$sroa$0$0 | 0) == (($tobool$i$i$i9 ? $9 : $agg$tmp$byval_copy) + ($tobool$i$i$i9 ? HEAP32[$__size_$i3$i$i >> 2] | 0 : $7 & 255) | 0)) break;
   $10 = HEAP8[$__i$sroa$0$0 >> 0] | 0;
   $11 = HEAP32[$__s >> 2] | 0;
   if ($11 | 0) {
    $__nout_$i$i = $11 + 24 | 0;
    $12 = HEAP32[$__nout_$i$i >> 2] | 0;
    if (($12 | 0) == (HEAP32[$11 + 28 >> 2] | 0)) {
     $14 = HEAP32[(HEAP32[$11 >> 2] | 0) + 52 >> 2] | 0;
     $call$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc($10) | 0;
     $retval$0$i$i = FUNCTION_TABLE_iii[$14 & 31]($11, $call$i$i) | 0;
    } else {
     HEAP32[$__nout_$i$i >> 2] = $12 + 1;
     HEAP8[$12 >> 0] = $10;
     $retval$0$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc($10) | 0;
    }
    if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) HEAP32[$__s >> 2] = 0;
   }
   $7 = HEAP8[$__size_$i$i$i >> 0] | 0;
   $9 = HEAP32[$agg$tmp$byval_copy >> 2] | 0;
   $__i$sroa$0$0 = $__i$sroa$0$0 + 1 | 0;
  }
  $retval$sroa$0$0$copyload = HEAP32[$__s >> 2] | 0;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($agg$tmp$byval_copy);
  $retval$sroa$0$0 = $retval$sroa$0$0$copyload;
 }
 STACKTOP = sp;
 return $retval$sroa$0$0 | 0;
}

function _mbrtowc($wc, $src, $n, $st) {
 $wc = $wc | 0;
 $src = $src | 0;
 $n = $n | 0;
 $st = $st | 0;
 var $0 = 0, $1 = 0, $4 = 0, $5 = 0, $7 = 0, $8 = 0, $c$036 = 0, $c$2 = 0, $conv42 = 0, $dec = 0, $dec55 = 0, $dec55$lcssa = 0, $dec5547 = 0, $dec5551 = 0, $dummy = 0, $n$addr$035 = 0, $or54 = 0, $or54$lcssa = 0, $or5446 = 0, $or5450 = 0, $retval$0 = 0, $s$037 = 0, $s$037$pn = 0, $spec$select = 0, $spec$select32 = 0, $sub = 0, $tobool21 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $dummy = sp;
 $spec$select = ($st | 0) == 0 ? 60128 : $st;
 $0 = HEAP32[$spec$select >> 2] | 0;
 L1 : do if (!$src) if (!$0) $retval$0 = 0; else label = 19; else {
  $spec$select32 = ($wc | 0) == 0 ? $dummy : $wc;
  if (!$n) $retval$0 = -2; else {
   if (!$0) {
    $1 = HEAP8[$src >> 0] | 0;
    if ($1 << 24 >> 24 > -1) {
     HEAP32[$spec$select32 >> 2] = $1 & 255;
     $retval$0 = $1 << 24 >> 24 != 0 & 1;
     break;
    }
    $tobool21 = (HEAP32[HEAP32[(___pthread_self_414() | 0) + 188 >> 2] >> 2] | 0) == 0;
    $4 = HEAP8[$src >> 0] | 0;
    if ($tobool21) {
     HEAP32[$spec$select32 >> 2] = $4 << 24 >> 24 & 57343;
     $retval$0 = 1;
     break;
    }
    $sub = ($4 & 255) + -194 | 0;
    if ($sub >>> 0 > 50) {
     label = 19;
     break;
    }
    $5 = HEAP32[7824 + ($sub << 2) >> 2] | 0;
    $dec = $n + -1 | 0;
    if (!$dec) $c$2 = $5; else {
     $c$036 = $5;
     $n$addr$035 = $dec;
     $s$037 = $src + 1 | 0;
     label = 11;
    }
   } else {
    $c$036 = $0;
    $n$addr$035 = $n;
    $s$037 = $src;
    label = 11;
   }
   L14 : do if ((label | 0) == 11) {
    $conv42 = HEAPU8[$s$037 >> 0] | 0;
    $7 = $conv42 >>> 3;
    if (($7 + -16 | $7 + ($c$036 >> 26)) >>> 0 > 7) {
     label = 19;
     break L1;
    }
    $or5446 = $conv42 + -128 | $c$036 << 6;
    $dec5547 = $n$addr$035 + -1 | 0;
    if (($or5446 | 0) < 0) {
     $dec5551 = $dec5547;
     $or5450 = $or5446;
     $s$037$pn = $s$037;
     while (1) {
      $s$037$pn = $s$037$pn + 1 | 0;
      if (!$dec5551) {
       $c$2 = $or5450;
       break L14;
      }
      $8 = HEAP8[$s$037$pn >> 0] | 0;
      if (($8 & -64) << 24 >> 24 != -128) {
       label = 19;
       break L1;
      }
      $or54 = ($8 & 255) + -128 | $or5450 << 6;
      $dec55 = $dec5551 + -1 | 0;
      if (($or54 | 0) >= 0) {
       $dec55$lcssa = $dec55;
       $or54$lcssa = $or54;
       break;
      } else {
       $dec5551 = $dec55;
       $or5450 = $or54;
      }
     }
    } else {
     $dec55$lcssa = $dec5547;
     $or54$lcssa = $or5446;
    }
    HEAP32[$spec$select >> 2] = 0;
    HEAP32[$spec$select32 >> 2] = $or54$lcssa;
    $retval$0 = $n - $dec55$lcssa | 0;
    break L1;
   } while (0);
   HEAP32[$spec$select >> 2] = $c$2;
   $retval$0 = -2;
  }
 } while (0);
 if ((label | 0) == 19) {
  HEAP32[$spec$select >> 2] = 0;
  HEAP32[(___errno_location() | 0) >> 2] = 25;
  $retval$0 = -1;
 }
 STACKTOP = sp;
 return $retval$0 | 0;
}

function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE23__append_forward_unsafeIPcEERS5_T_S9_($this, $__first, $__last) {
 $this = $this | 0;
 $__first = $__first | 0;
 $__last = $__last | 0;
 var $0 = 0, $5 = 0, $__first$addr$0 = 0, $__p$0 = 0, $__size_$i$i = 0, $__temp = 0, $add20 = 0, $cond$i$i6380 = 0, $cond$i32 = 0, $cond$i38 = 0, $cond$i72 = 0, $cond$i74 = 0, $scevgep84 = 0, $sub$ptr$rhs$cast$i$i = 0, $sub$ptr$sub$i$i = 0, $tobool$i$i = 0, $tobool$i$i$i = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $sub$ptr$rhs$cast$i$i = $__first;
 $__temp = sp;
 $__size_$i$i = $this + 11 | 0;
 $0 = HEAP8[$__size_$i$i >> 0] | 0;
 $tobool$i$i = $0 << 24 >> 24 < 0;
 if ($tobool$i$i) {
  $cond$i32 = (HEAP32[$this + 8 >> 2] & 2147483647) + -1 | 0;
  $cond$i74 = HEAP32[$this + 4 >> 2] | 0;
 } else {
  $cond$i32 = 10;
  $cond$i74 = $0 & 255;
 }
 $sub$ptr$sub$i$i = $__last - $sub$ptr$rhs$cast$i$i | 0;
 do if ($sub$ptr$sub$i$i | 0) {
  if ($tobool$i$i) {
   $cond$i$i6380 = HEAP32[$this >> 2] | 0;
   $cond$i72 = HEAP32[$this + 4 >> 2] | 0;
  } else {
   $cond$i$i6380 = $this;
   $cond$i72 = $0 & 255;
  }
  if (__ZNSt3__214__ptr_in_rangeIcEEbPKT_S3_S3_($__first, $cond$i$i6380, $cond$i$i6380 + $cond$i72 | 0) | 0) {
   HEAP32[$__temp >> 2] = 0;
   HEAP32[$__temp + 4 >> 2] = 0;
   HEAP32[$__temp + 8 >> 2] = 0;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initIPcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES9_S9_($__temp, $__first, $__last);
   $5 = HEAP8[$__temp + 11 >> 0] | 0;
   $tobool$i$i$i = $5 << 24 >> 24 < 0;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcm($this, $tobool$i$i$i ? HEAP32[$__temp >> 2] | 0 : $__temp, $tobool$i$i$i ? HEAP32[$__temp + 4 >> 2] | 0 : $5 & 255) | 0;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__temp);
   break;
  }
  if (($cond$i32 - $cond$i74 | 0) >>> 0 < $sub$ptr$sub$i$i >>> 0) __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEmmmmmm($this, $cond$i32, $cond$i74 + $sub$ptr$sub$i$i - $cond$i32 | 0, $cond$i74, $cond$i74, 0, 0);
  if ((HEAP8[$__size_$i$i >> 0] | 0) < 0) $cond$i38 = HEAP32[$this >> 2] | 0; else $cond$i38 = $this;
  $scevgep84 = $__last + ($cond$i74 - $sub$ptr$rhs$cast$i$i) | 0;
  $__first$addr$0 = $__first;
  $__p$0 = $cond$i38 + $cond$i74 | 0;
  while (1) {
   if (($__first$addr$0 | 0) == ($__last | 0)) break;
   __ZNSt3__211char_traitsIcE6assignERcRKc($__p$0, $__first$addr$0);
   $__first$addr$0 = $__first$addr$0 + 1 | 0;
   $__p$0 = $__p$0 + 1 | 0;
  }
  HEAP8[$__temp >> 0] = 0;
  __ZNSt3__211char_traitsIcE6assignERcRKc($cond$i38 + $scevgep84 | 0, $__temp);
  $add20 = $cond$i74 + $sub$ptr$sub$i$i | 0;
  if ((HEAP8[$__size_$i$i >> 0] | 0) < 0) {
   HEAP32[$this + 4 >> 2] = $add20;
   break;
  } else {
   HEAP8[$__size_$i$i >> 0] = $add20;
   break;
  }
 } while (0);
 STACKTOP = sp;
 return $this | 0;
}

function __ZNSt3__28ios_base4InitC2Ev($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $__fmtflags_$i$i = 0, $__fmtflags_$i$i22 = 0, $vbase$offset$ptr18 = 0, $vbase$offset$ptr23 = 0;
 $0 = HEAP32[4502] | 0;
 __ZNSt3__210__stdinbufIcEC2EP8_IO_FILEP11__mbstate_t(60848, $0, 60904);
 HEAP32[15042] = 18784;
 HEAP32[15044] = 18804;
 HEAP32[15043] = 0;
 __ZNSt3__28ios_base4initEPv(60176, 60848);
 HEAP32[15062] = 0;
 HEAP32[15063] = __ZNSt3__211char_traitsIcE3eofEv() | 0;
 __ZNSt3__210__stdinbufIwEC2EP8_IO_FILEP11__mbstate_t(60912, $0, 60968);
 HEAP32[15064] = 18832;
 HEAP32[15066] = 18852;
 HEAP32[15065] = 0;
 __ZNSt3__28ios_base4initEPv(60264, 60912);
 HEAP32[15084] = 0;
 HEAP32[15085] = __ZNSt3__211char_traitsIwE3eofEv() | 0;
 $1 = HEAP32[4503] | 0;
 __ZNSt3__211__stdoutbufIcEC2EP8_IO_FILEP11__mbstate_t(60976, $1, 61024);
 HEAP32[15086] = 18880;
 HEAP32[15087] = 18900;
 __ZNSt3__28ios_base4initEPv(60348, 60976);
 HEAP32[15105] = 0;
 HEAP32[15106] = __ZNSt3__211char_traitsIcE3eofEv() | 0;
 __ZNSt3__211__stdoutbufIwEC2EP8_IO_FILEP11__mbstate_t(61032, $1, 61080);
 HEAP32[15107] = 18928;
 HEAP32[15108] = 18948;
 __ZNSt3__28ios_base4initEPv(60432, 61032);
 HEAP32[15126] = 0;
 HEAP32[15127] = __ZNSt3__211char_traitsIwE3eofEv() | 0;
 $2 = HEAP32[4501] | 0;
 __ZNSt3__211__stdoutbufIcEC2EP8_IO_FILEP11__mbstate_t(61088, $2, 61136);
 HEAP32[15128] = 18880;
 HEAP32[15129] = 18900;
 __ZNSt3__28ios_base4initEPv(60516, 61088);
 HEAP32[15147] = 0;
 HEAP32[15148] = __ZNSt3__211char_traitsIcE3eofEv() | 0;
 $3 = HEAP32[60512 + (HEAP32[(HEAP32[15128] | 0) + -12 >> 2] | 0) + 24 >> 2] | 0;
 HEAP32[15170] = 18880;
 HEAP32[15171] = 18900;
 __ZNSt3__28ios_base4initEPv(60684, $3);
 HEAP32[15189] = 0;
 HEAP32[15190] = __ZNSt3__211char_traitsIcE3eofEv() | 0;
 __ZNSt3__211__stdoutbufIwEC2EP8_IO_FILEP11__mbstate_t(61144, $2, 61192);
 HEAP32[15149] = 18928;
 HEAP32[15150] = 18948;
 __ZNSt3__28ios_base4initEPv(60600, 61144);
 HEAP32[15168] = 0;
 HEAP32[15169] = __ZNSt3__211char_traitsIwE3eofEv() | 0;
 $4 = HEAP32[60596 + (HEAP32[(HEAP32[15149] | 0) + -12 >> 2] | 0) + 24 >> 2] | 0;
 HEAP32[15191] = 18928;
 HEAP32[15192] = 18948;
 __ZNSt3__28ios_base4initEPv(60768, $4);
 HEAP32[15210] = 0;
 HEAP32[15211] = __ZNSt3__211char_traitsIwE3eofEv() | 0;
 HEAP32[60168 + (HEAP32[(HEAP32[15042] | 0) + -12 >> 2] | 0) + 72 >> 2] = 60344;
 HEAP32[60256 + (HEAP32[(HEAP32[15064] | 0) + -12 >> 2] | 0) + 72 >> 2] = 60428;
 $vbase$offset$ptr18 = (HEAP32[15128] | 0) + -12 | 0;
 $__fmtflags_$i$i = 60512 + (HEAP32[$vbase$offset$ptr18 >> 2] | 0) + 4 | 0;
 HEAP32[$__fmtflags_$i$i >> 2] = HEAP32[$__fmtflags_$i$i >> 2] | 8192;
 $vbase$offset$ptr23 = (HEAP32[15149] | 0) + -12 | 0;
 $__fmtflags_$i$i22 = 60596 + (HEAP32[$vbase$offset$ptr23 >> 2] | 0) + 4 | 0;
 HEAP32[$__fmtflags_$i$i22 >> 2] = HEAP32[$__fmtflags_$i$i22 >> 2] | 8192;
 HEAP32[60512 + (HEAP32[$vbase$offset$ptr18 >> 2] | 0) + 72 >> 2] = 60344;
 HEAP32[60596 + (HEAP32[$vbase$offset$ptr23 >> 2] | 0) + 72 >> 2] = 60428;
 return;
}

function __ZNSt3__2L12ucs4_to_utf8EPKjS1_RS1_PhS3_RS3_mNS_12codecvt_modeE($frm, $frm_end, $frm_nxt, $to, $to_end, $to_nxt, $Maxcode, $mode) {
 $frm = $frm | 0;
 $frm_end = $frm_end | 0;
 $frm_nxt = $frm_nxt | 0;
 $to = $to | 0;
 $to_end = $to_end | 0;
 $to_nxt = $to_nxt | 0;
 $Maxcode = $Maxcode | 0;
 $mode = $mode | 0;
 var $$pre39 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $incdec$ptr84 = 0, $retval$2 = 0, $sub$ptr$sub39 = 0, label = 0;
 label = 0;
 HEAP32[$frm_nxt >> 2] = $frm;
 HEAP32[$to_nxt >> 2] = $to;
 $$pre39 = $to_end;
 if (!($mode & 2)) label = 4; else if (($$pre39 - $to | 0) < 3) $retval$2 = 1; else {
  HEAP32[$to_nxt >> 2] = $to + 1;
  HEAP8[$to >> 0] = -17;
  $0 = HEAP32[$to_nxt >> 2] | 0;
  HEAP32[$to_nxt >> 2] = $0 + 1;
  HEAP8[$0 >> 0] = -69;
  $1 = HEAP32[$to_nxt >> 2] | 0;
  HEAP32[$to_nxt >> 2] = $1 + 1;
  HEAP8[$1 >> 0] = -65;
  label = 4;
 }
 L4 : do if ((label | 0) == 4) {
  $2 = HEAP32[$frm_nxt >> 2] | 0;
  while (1) {
   if ($2 >>> 0 >= $frm_end >>> 0) {
    $retval$2 = 0;
    break L4;
   }
   $3 = HEAP32[$2 >> 2] | 0;
   if ($3 >>> 0 > $Maxcode >>> 0 | ($3 & -2048 | 0) == 55296) {
    $retval$2 = 2;
    break L4;
   }
   do if ($3 >>> 0 < 128) {
    $4 = HEAP32[$to_nxt >> 2] | 0;
    if (($$pre39 - $4 | 0) < 1) {
     $retval$2 = 1;
     break L4;
    }
    HEAP32[$to_nxt >> 2] = $4 + 1;
    HEAP8[$4 >> 0] = $3;
   } else {
    if ($3 >>> 0 < 2048) {
     $5 = HEAP32[$to_nxt >> 2] | 0;
     if (($$pre39 - $5 | 0) < 2) {
      $retval$2 = 1;
      break L4;
     }
     HEAP32[$to_nxt >> 2] = $5 + 1;
     HEAP8[$5 >> 0] = $3 >>> 6 | 192;
     $6 = HEAP32[$to_nxt >> 2] | 0;
     HEAP32[$to_nxt >> 2] = $6 + 1;
     HEAP8[$6 >> 0] = $3 & 63 | 128;
     break;
    }
    $7 = HEAP32[$to_nxt >> 2] | 0;
    $sub$ptr$sub39 = $$pre39 - $7 | 0;
    if ($3 >>> 0 < 65536) {
     if (($sub$ptr$sub39 | 0) < 3) {
      $retval$2 = 1;
      break L4;
     }
     HEAP32[$to_nxt >> 2] = $7 + 1;
     HEAP8[$7 >> 0] = $3 >>> 12 | 224;
     $8 = HEAP32[$to_nxt >> 2] | 0;
     HEAP32[$to_nxt >> 2] = $8 + 1;
     HEAP8[$8 >> 0] = $3 >>> 6 & 63 | 128;
     $9 = HEAP32[$to_nxt >> 2] | 0;
     HEAP32[$to_nxt >> 2] = $9 + 1;
     HEAP8[$9 >> 0] = $3 & 63 | 128;
     break;
    } else {
     if (($sub$ptr$sub39 | 0) < 4) {
      $retval$2 = 1;
      break L4;
     }
     HEAP32[$to_nxt >> 2] = $7 + 1;
     HEAP8[$7 >> 0] = $3 >>> 18 | 240;
     $10 = HEAP32[$to_nxt >> 2] | 0;
     HEAP32[$to_nxt >> 2] = $10 + 1;
     HEAP8[$10 >> 0] = $3 >>> 12 & 63 | 128;
     $11 = HEAP32[$to_nxt >> 2] | 0;
     HEAP32[$to_nxt >> 2] = $11 + 1;
     HEAP8[$11 >> 0] = $3 >>> 6 & 63 | 128;
     $12 = HEAP32[$to_nxt >> 2] | 0;
     HEAP32[$to_nxt >> 2] = $12 + 1;
     HEAP8[$12 >> 0] = $3 & 63 | 128;
     break;
    }
   } while (0);
   $incdec$ptr84 = (HEAP32[$frm_nxt >> 2] | 0) + 4 | 0;
   HEAP32[$frm_nxt >> 2] = $incdec$ptr84;
   $2 = $incdec$ptr84;
  }
 } while (0);
 return $retval$2 | 0;
}

function __ZNSt3__2L19utf8_to_ucs4_lengthEPKhS1_mmNS_12codecvt_modeE($frm, $frm_end, $mx, $Maxcode, $mode) {
 $frm = $frm | 0;
 $frm_end = $frm_end | 0;
 $mx = $mx | 0;
 $Maxcode = $Maxcode | 0;
 $mode = $mode | 0;
 var $$pre = 0, $11 = 0, $12 = 0, $13 = 0, $3 = 0, $5 = 0, $6 = 0, $conv14 = 0, $conv151 = 0, $conv155 = 0, $conv33 = 0, $conv85 = 0, $frm_nxt$1 = 0, $frm_nxt$1$ph = 0, $frm_nxt$5 = 0, $nchar32_t$0 = 0;
 $$pre = $frm_end;
 if (!($mode & 4)) $frm_nxt$1$ph = $frm; else if (($$pre - $frm | 0) > 2) if ((HEAP8[$frm >> 0] | 0) == -17) if ((HEAP8[$frm + 1 >> 0] | 0) == -69) $frm_nxt$1$ph = (HEAP8[$frm + 2 >> 0] | 0) == -65 ? $frm + 3 | 0 : $frm; else $frm_nxt$1$ph = $frm; else $frm_nxt$1$ph = $frm; else $frm_nxt$1$ph = $frm;
 $frm_nxt$1 = $frm_nxt$1$ph;
 $nchar32_t$0 = 0;
 L7 : while (1) {
  if (!($nchar32_t$0 >>> 0 < $mx >>> 0 & $frm_nxt$1 >>> 0 < $frm_end >>> 0)) break;
  $3 = HEAP8[$frm_nxt$1 >> 0] | 0;
  $conv14 = $3 & 255;
  do if ($3 << 24 >> 24 > -1) {
   if ($conv14 >>> 0 > $Maxcode >>> 0) break L7;
   $frm_nxt$5 = $frm_nxt$1 + 1 | 0;
  } else {
   if (($3 & 255) < 194) break L7;
   if (($3 & 255) < 224) {
    if (($$pre - $frm_nxt$1 | 0) < 2) break L7;
    $conv33 = HEAPU8[$frm_nxt$1 + 1 >> 0] | 0;
    if (($conv33 & 192 | 0) != 128) break L7;
    if (($conv33 & 63 | $conv14 << 6 & 1984) >>> 0 > $Maxcode >>> 0) break L7;
    $frm_nxt$5 = $frm_nxt$1 + 2 | 0;
    break;
   }
   if (($3 & 255) < 240) {
    if (($$pre - $frm_nxt$1 | 0) < 3) break L7;
    $5 = HEAP8[$frm_nxt$1 + 1 >> 0] | 0;
    $6 = HEAP8[$frm_nxt$1 + 2 >> 0] | 0;
    switch ($3 << 24 >> 24) {
    case -32:
     {
      if (($5 & -32) << 24 >> 24 != -96) break L7;
      break;
     }
    case -19:
     {
      if (($5 & -32) << 24 >> 24 != -128) break L7;
      break;
     }
    default:
     if (($5 & -64) << 24 >> 24 != -128) break L7;
    }
    $conv85 = $6 & 255;
    if (($conv85 & 192 | 0) != 128) break L7;
    if ((($5 & 63) << 6 | $conv14 << 12 & 61440 | $conv85 & 63) >>> 0 > $Maxcode >>> 0) break L7; else {
     $frm_nxt$5 = $frm_nxt$1 + 3 | 0;
     break;
    }
   }
   if (($3 & 255) >= 245) break L7;
   if (($$pre - $frm_nxt$1 | 0) < 4) break L7;
   $11 = HEAP8[$frm_nxt$1 + 1 >> 0] | 0;
   $12 = HEAP8[$frm_nxt$1 + 2 >> 0] | 0;
   $13 = HEAP8[$frm_nxt$1 + 3 >> 0] | 0;
   switch ($3 << 24 >> 24) {
   case -16:
    {
     if (($11 + 112 & 255) >= 48) break L7;
     break;
    }
   case -12:
    {
     if (($11 & -16) << 24 >> 24 != -128) break L7;
     break;
    }
   default:
    if (($11 & -64) << 24 >> 24 != -128) break L7;
   }
   $conv151 = $12 & 255;
   if (($conv151 & 192 | 0) != 128) break L7;
   $conv155 = $13 & 255;
   if (($conv155 & 192 | 0) != 128) break L7;
   if ((($11 & 63) << 12 | $conv14 << 18 & 1835008 | $conv151 << 6 & 4032 | $conv155 & 63) >>> 0 > $Maxcode >>> 0) break L7; else $frm_nxt$5 = $frm_nxt$1 + 4 | 0;
  } while (0);
  $frm_nxt$1 = $frm_nxt$5;
  $nchar32_t$0 = $nchar32_t$0 + 1 | 0;
 }
 return $frm_nxt$1 - $frm | 0;
}

function _stbi__hdr_convert($output, $input, $req_comp) {
 $output = $output | 0;
 $input = $input | 0;
 $req_comp = $req_comp | 0;
 var $conv15 = f0, $conv19 = f0, $conv24 = f0, $conv29 = f0, $conv9 = 0, $div = f0, $f1 = 0, $input$addr = 0, $mul20 = f0, $mul25 = f0, $mul30 = f0, $output$addr = 0, $req_comp$addr = 0, label = 0, sp = 0, CSE$0 = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $output$addr = sp + 12 | 0;
 $input$addr = sp + 8 | 0;
 $req_comp$addr = sp + 4 | 0;
 $f1 = sp;
 HEAP32[$output$addr >> 2] = $output;
 HEAP32[$input$addr >> 2] = $input;
 HEAP32[$req_comp$addr >> 2] = $req_comp;
 if (!(HEAPU8[(HEAP32[$input$addr >> 2] | 0) + 3 >> 0] | 0)) {
  switch (HEAP32[$req_comp$addr >> 2] | 0) {
  case 4:
   {
    HEAPF32[(HEAP32[$output$addr >> 2] | 0) + 12 >> 2] = Math_fround(1.0);
    label = 11;
    break;
   }
  case 3:
   {
    label = 11;
    break;
   }
  case 2:
   {
    HEAPF32[(HEAP32[$output$addr >> 2] | 0) + 4 >> 2] = Math_fround(1.0);
    label = 13;
    break;
   }
  case 1:
   {
    label = 13;
    break;
   }
  default:
   {
    STACKTOP = sp;
    return;
   }
  }
  if ((label | 0) == 11) {
   HEAPF32[(HEAP32[$output$addr >> 2] | 0) + 8 >> 2] = Math_fround(0.0);
   HEAPF32[(HEAP32[$output$addr >> 2] | 0) + 4 >> 2] = Math_fround(0.0);
   HEAPF32[HEAP32[$output$addr >> 2] >> 2] = Math_fround(0.0);
   STACKTOP = sp;
   return;
  } else if ((label | 0) == 13) {
   HEAPF32[HEAP32[$output$addr >> 2] >> 2] = Math_fround(0.0);
   STACKTOP = sp;
   return;
  }
 }
 HEAPF32[$f1 >> 2] = Math_fround(+_ldexp(1.0, (HEAPU8[(HEAP32[$input$addr >> 2] | 0) + 3 >> 0] | 0) - 136 | 0));
 $conv9 = HEAPU8[HEAP32[$input$addr >> 2] >> 0] | 0;
 if ((HEAP32[$req_comp$addr >> 2] | 0) <= 2) {
  CSE$0 = HEAP32[$input$addr >> 2] | 0;
  $conv15 = Math_fround($conv9 + (HEAPU8[CSE$0 + 1 >> 0] | 0) + (HEAPU8[CSE$0 + 2 >> 0] | 0) | 0);
  $div = Math_fround(Math_fround($conv15 * Math_fround(HEAPF32[$f1 >> 2])) / Math_fround(3.0));
  HEAPF32[HEAP32[$output$addr >> 2] >> 2] = $div;
 } else {
  $conv19 = Math_fround($conv9 | 0);
  $mul20 = Math_fround($conv19 * Math_fround(HEAPF32[$f1 >> 2]));
  HEAPF32[HEAP32[$output$addr >> 2] >> 2] = $mul20;
  $conv24 = Math_fround(HEAPU8[(HEAP32[$input$addr >> 2] | 0) + 1 >> 0] | 0);
  $mul25 = Math_fround($conv24 * Math_fround(HEAPF32[$f1 >> 2]));
  HEAPF32[(HEAP32[$output$addr >> 2] | 0) + 4 >> 2] = $mul25;
  $conv29 = Math_fround(HEAPU8[(HEAP32[$input$addr >> 2] | 0) + 2 >> 0] | 0);
  $mul30 = Math_fround($conv29 * Math_fround(HEAPF32[$f1 >> 2]));
  HEAPF32[(HEAP32[$output$addr >> 2] | 0) + 8 >> 2] = $mul30;
 }
 if ((HEAP32[$req_comp$addr >> 2] | 0) == 2) HEAPF32[(HEAP32[$output$addr >> 2] | 0) + 4 >> 2] = Math_fround(1.0);
 if ((HEAP32[$req_comp$addr >> 2] | 0) != 4) {
  STACKTOP = sp;
  return;
 }
 HEAPF32[(HEAP32[$output$addr >> 2] | 0) + 12 >> 2] = Math_fround(1.0);
 STACKTOP = sp;
 return;
}

function _stbi__parse_uncompressed_block($a) {
 $a = $a | 0;
 var $17 = 0, $44 = 0, $49 = 0, $7 = 0, $9 = 0, $a$addr = 0, $call14 = 0, $code_buffer5 = 0, $conv = 0, $header = 0, $k = 0, $len = 0, $nlen = 0, $num_bits6 = 0, $retval = 0, $zout52 = 0, sp = 0, CSE$0 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $retval = sp + 16 | 0;
 $a$addr = sp + 12 | 0;
 $header = sp + 20 | 0;
 $len = sp + 8 | 0;
 $nlen = sp + 4 | 0;
 $k = sp;
 HEAP32[$a$addr >> 2] = $a;
 if (HEAP32[(HEAP32[$a$addr >> 2] | 0) + 8 >> 2] & 7 | 0) {
  CSE$0 = HEAP32[$a$addr >> 2] | 0;
  _stbi__zreceive(CSE$0 | 0, HEAP32[CSE$0 + 8 >> 2] & 7) | 0;
 }
 HEAP32[$k >> 2] = 0;
 while (1) {
  $7 = HEAP32[$a$addr >> 2] | 0;
  if ((HEAP32[(HEAP32[$a$addr >> 2] | 0) + 8 >> 2] | 0) <= 0) break;
  $conv = HEAP32[$7 + 12 >> 2] & 255;
  $9 = HEAP32[$k >> 2] | 0;
  HEAP32[$k >> 2] = $9 + 1;
  HEAP8[$header + $9 >> 0] = $conv;
  $code_buffer5 = (HEAP32[$a$addr >> 2] | 0) + 12 | 0;
  HEAP32[$code_buffer5 >> 2] = (HEAP32[$code_buffer5 >> 2] | 0) >>> 8;
  $num_bits6 = (HEAP32[$a$addr >> 2] | 0) + 8 | 0;
  HEAP32[$num_bits6 >> 2] = (HEAP32[$num_bits6 >> 2] | 0) - 8;
 }
 if (HEAP32[$7 + 8 >> 2] | 0) ___assert_fail(33903, 32781, 4149, 33920);
 while (1) {
  if ((HEAP32[$k >> 2] | 0) >= 4) break;
  $call14 = _stbi__zget8(HEAP32[$a$addr >> 2] | 0) | 0;
  $17 = HEAP32[$k >> 2] | 0;
  HEAP32[$k >> 2] = $17 + 1;
  HEAP8[$header + $17 >> 0] = $call14;
 }
 HEAP32[$len >> 2] = (HEAPU8[$header + 1 >> 0] << 8) + (HEAPU8[$header >> 0] | 0);
 HEAP32[$nlen >> 2] = (HEAPU8[$header + 3 >> 0] << 8) + (HEAPU8[$header + 2 >> 0] | 0);
 if ((HEAP32[$nlen >> 2] | 0) != (HEAP32[$len >> 2] ^ 65535 | 0)) {
  HEAP32[$retval >> 2] = _stbi__err(33951) | 0;
  $49 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $49 | 0;
 }
 if (((HEAP32[HEAP32[$a$addr >> 2] >> 2] | 0) + (HEAP32[$len >> 2] | 0) | 0) >>> 0 > (HEAP32[(HEAP32[$a$addr >> 2] | 0) + 4 >> 2] | 0) >>> 0) {
  HEAP32[$retval >> 2] = _stbi__err(33964) | 0;
  $49 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $49 | 0;
 }
 if (((HEAP32[(HEAP32[$a$addr >> 2] | 0) + 16 >> 2] | 0) + (HEAP32[$len >> 2] | 0) | 0) >>> 0 > (HEAP32[(HEAP32[$a$addr >> 2] | 0) + 24 >> 2] | 0) >>> 0) if (!(_stbi__zexpand(HEAP32[$a$addr >> 2] | 0, HEAP32[(HEAP32[$a$addr >> 2] | 0) + 16 >> 2] | 0, HEAP32[$len >> 2] | 0) | 0)) {
  HEAP32[$retval >> 2] = 0;
  $49 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $49 | 0;
 }
 _memcpy(HEAP32[(HEAP32[$a$addr >> 2] | 0) + 16 >> 2] | 0, HEAP32[HEAP32[$a$addr >> 2] >> 2] | 0, HEAP32[$len >> 2] | 0) | 0;
 $44 = HEAP32[$a$addr >> 2] | 0;
 HEAP32[$44 >> 2] = (HEAP32[$44 >> 2] | 0) + (HEAP32[$len >> 2] | 0);
 $zout52 = (HEAP32[$a$addr >> 2] | 0) + 16 | 0;
 HEAP32[$zout52 >> 2] = (HEAP32[$zout52 >> 2] | 0) + (HEAP32[$len >> 2] | 0);
 HEAP32[$retval >> 2] = 1;
 $49 = HEAP32[$retval >> 2] | 0;
 STACKTOP = sp;
 return $49 | 0;
}

function _SaveKTX($image, $fileName) {
 $image = $image | 0;
 $fileName = $fileName | 0;
 var $28 = 0, $dataOffset = 0, $dataSize = 0, $fileName$addr = 0, $height16 = 0, $i = 0, $ktxFile = 0, $ktxHeader = 0, $success = 0, $vararg_buffer = 0, $width14 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(112);
 $vararg_buffer = sp;
 $fileName$addr = sp + 104 | 0;
 $success = sp + 100 | 0;
 $ktxFile = sp + 96 | 0;
 $ktxHeader = sp + 32 | 0;
 $width14 = sp + 28 | 0;
 $height16 = sp + 24 | 0;
 $dataOffset = sp + 20 | 0;
 $i = sp + 16 | 0;
 $dataSize = sp + 12 | 0;
 HEAP32[$fileName$addr >> 2] = $fileName;
 HEAP32[$success >> 2] = 0;
 HEAP32[$ktxFile >> 2] = _fopen(HEAP32[$fileName$addr >> 2] | 0, 34090) | 0;
 if (!(HEAP32[$ktxFile >> 2] | 0)) {
  HEAP32[$vararg_buffer >> 2] = HEAP32[$fileName$addr >> 2];
  _TraceLog(4, 37826, $vararg_buffer);
  $28 = HEAP32[$success >> 2] | 0;
  STACKTOP = sp;
  return $28 | 0;
 }
 _strncpy($ktxHeader, 37867, 12) | 0;
 HEAP32[$ktxHeader + 12 >> 2] = 0;
 HEAP32[$ktxHeader + 16 >> 2] = 0;
 HEAP32[$ktxHeader + 20 >> 2] = 1;
 HEAP32[$ktxHeader + 24 >> 2] = 0;
 HEAP32[$ktxHeader + 28 >> 2] = 0;
 HEAP32[$ktxHeader + 32 >> 2] = 0;
 HEAP32[$ktxHeader + 36 >> 2] = HEAP32[$image + 4 >> 2];
 HEAP32[$ktxHeader + 40 >> 2] = HEAP32[$image + 8 >> 2];
 HEAP32[$ktxHeader + 44 >> 2] = 0;
 HEAP32[$ktxHeader + 48 >> 2] = 0;
 HEAP32[$ktxHeader + 52 >> 2] = 1;
 HEAP32[$ktxHeader + 56 >> 2] = HEAP32[$image + 12 >> 2];
 HEAP32[$ktxHeader + 60 >> 2] = 0;
 _rlGetGlTextureFormats(HEAP32[$image + 16 >> 2] | 0, $ktxHeader + 28 | 0, $ktxHeader + 24 | 0, $ktxHeader + 16 | 0);
 HEAP32[$ktxHeader + 32 >> 2] = HEAP32[$ktxHeader + 24 >> 2];
 L5 : do if ((HEAP32[$ktxHeader + 24 >> 2] | 0) == -1) _TraceLog(4, 37879, sp + 8 | 0); else {
  HEAP32[$success >> 2] = _fwrite($ktxHeader, 64, 1, HEAP32[$ktxFile >> 2] | 0) | 0;
  HEAP32[$width14 >> 2] = HEAP32[$image + 4 >> 2];
  HEAP32[$height16 >> 2] = HEAP32[$image + 8 >> 2];
  HEAP32[$dataOffset >> 2] = 0;
  HEAP32[$i >> 2] = 0;
  while (1) {
   if ((HEAP32[$i >> 2] | 0) >= (HEAP32[$image + 12 >> 2] | 0)) break L5;
   HEAP32[$dataSize >> 2] = _GetPixelDataSize(HEAP32[$width14 >> 2] | 0, HEAP32[$height16 >> 2] | 0, HEAP32[$image + 16 >> 2] | 0) | 0;
   HEAP32[$success >> 2] = _fwrite($dataSize, 4, 1, HEAP32[$ktxFile >> 2] | 0) | 0;
   HEAP32[$success >> 2] = _fwrite((HEAP32[$image >> 2] | 0) + (HEAP32[$dataOffset >> 2] | 0) | 0, HEAP32[$dataSize >> 2] | 0, 1, HEAP32[$ktxFile >> 2] | 0) | 0;
   HEAP32[$width14 >> 2] = (HEAP32[$width14 >> 2] | 0) / 2 | 0;
   HEAP32[$height16 >> 2] = (HEAP32[$height16 >> 2] | 0) / 2 | 0;
   HEAP32[$dataOffset >> 2] = (HEAP32[$dataOffset >> 2] | 0) + (HEAP32[$dataSize >> 2] | 0);
   HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
  }
 } while (0);
 _fclose(HEAP32[$ktxFile >> 2] | 0) | 0;
 $28 = HEAP32[$success >> 2] | 0;
 STACKTOP = sp;
 return $28 | 0;
}

function __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE23__append_forward_unsafeIPwEERS5_T_S9_($this, $__first, $__last) {
 $this = $this | 0;
 $__first = $__first | 0;
 $__last = $__last | 0;
 var $0 = 0, $1 = 0, $7 = 0, $__first$addr$0 = 0, $__p$0 = 0, $__size_$i$i = 0, $__temp = 0, $add20 = 0, $cond$i$i5874 = 0, $cond$i31 = 0, $cond$i36 = 0, $cond$i66 = 0, $cond$i68 = 0, $sub$ptr$div$i$i = 0, $sub$ptr$sub$i$i = 0, $tobool$i$i = 0, $tobool$i$i$i = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $__temp = sp;
 $0 = $this + 8 | 0;
 $__size_$i$i = $0 + 3 | 0;
 $1 = HEAP8[$__size_$i$i >> 0] | 0;
 $tobool$i$i = $1 << 24 >> 24 < 0;
 if ($tobool$i$i) {
  $cond$i31 = (HEAP32[$0 >> 2] & 2147483647) + -1 | 0;
  $cond$i68 = HEAP32[$this + 4 >> 2] | 0;
 } else {
  $cond$i31 = 1;
  $cond$i68 = $1 & 255;
 }
 $sub$ptr$sub$i$i = $__last - $__first | 0;
 $sub$ptr$div$i$i = $sub$ptr$sub$i$i >> 2;
 do if ($sub$ptr$sub$i$i | 0) {
  if ($tobool$i$i) {
   $cond$i$i5874 = HEAP32[$this >> 2] | 0;
   $cond$i66 = HEAP32[$this + 4 >> 2] | 0;
  } else {
   $cond$i$i5874 = $this;
   $cond$i66 = $1 & 255;
  }
  if (__ZNSt3__214__ptr_in_rangeIwEEbPKT_S3_S3_($__first, $cond$i$i5874, $cond$i$i5874 + ($cond$i66 << 2) | 0) | 0) {
   HEAP32[$__temp >> 2] = 0;
   HEAP32[$__temp + 4 >> 2] = 0;
   HEAP32[$__temp + 8 >> 2] = 0;
   __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initIPwEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES9_S9_($__temp, $__first, $__last);
   $7 = HEAP8[$__temp + 8 + 3 >> 0] | 0;
   $tobool$i$i$i = $7 << 24 >> 24 < 0;
   __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6appendEPKwm($this, $tobool$i$i$i ? HEAP32[$__temp >> 2] | 0 : $__temp, $tobool$i$i$i ? HEAP32[$__temp + 4 >> 2] | 0 : $7 & 255) | 0;
   __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($__temp);
   break;
  }
  if (($cond$i31 - $cond$i68 | 0) >>> 0 < $sub$ptr$div$i$i >>> 0) __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9__grow_byEmmmmmm($this, $cond$i31, $cond$i68 + $sub$ptr$div$i$i - $cond$i31 | 0, $cond$i68, $cond$i68, 0, 0);
  if ((HEAP8[$__size_$i$i >> 0] | 0) < 0) $cond$i36 = HEAP32[$this >> 2] | 0; else $cond$i36 = $this;
  $__first$addr$0 = $__first;
  $__p$0 = $cond$i36 + ($cond$i68 << 2) | 0;
  while (1) {
   if (($__first$addr$0 | 0) == ($__last | 0)) break;
   __ZNSt3__211char_traitsIwE6assignERwRKw($__p$0, $__first$addr$0);
   $__first$addr$0 = $__first$addr$0 + 4 | 0;
   $__p$0 = $__p$0 + 4 | 0;
  }
  HEAP32[$__temp >> 2] = 0;
  __ZNSt3__211char_traitsIwE6assignERwRKw($__p$0, $__temp);
  $add20 = $cond$i68 + $sub$ptr$div$i$i | 0;
  if ((HEAP8[$__size_$i$i >> 0] | 0) < 0) {
   HEAP32[$this + 4 >> 2] = $add20;
   break;
  } else {
   HEAP8[$__size_$i$i >> 0] = $add20;
   break;
  }
 } while (0);
 STACKTOP = sp;
 return $this | 0;
}

function __ZNSt3__2L12init_wmonthsEv() {
 var $__i$0$i$i = 0, $arrayctor$cur = 0;
 if (!(HEAP8[58624] | 0)) if (___cxa_guard_acquire(58624) | 0) {
  $arrayctor$cur = 57952;
  do {
   HEAP32[$arrayctor$cur >> 2] = 0;
   HEAP32[$arrayctor$cur + 4 >> 2] = 0;
   HEAP32[$arrayctor$cur + 8 >> 2] = 0;
   $__i$0$i$i = 0;
   while (1) {
    if (($__i$0$i$i | 0) == 3) break;
    HEAP32[$arrayctor$cur + ($__i$0$i$i << 2) >> 2] = 0;
    $__i$0$i$i = $__i$0$i$i + 1 | 0;
   }
   $arrayctor$cur = $arrayctor$cur + 12 | 0;
  } while (($arrayctor$cur | 0) != 58240);
  ___cxa_guard_release(58624);
 }
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(57952, 19912) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(57964, 19944) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(57976, 19980) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(57988, 20004) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(58e3, 20028) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(58012, 20044) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(58024, 20064) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(58036, 20084) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(58048, 20112) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(58060, 20152) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(58072, 20184) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(58084, 20220) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(58096, 20256) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(58108, 20272) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(58120, 20288) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(58132, 20304) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(58144, 20028) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(58156, 20320) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(58168, 20336) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(58180, 20352) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(58192, 20368) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(58204, 20384) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(58216, 20400) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(58228, 20416) | 0;
 return;
}

function __ZNSt3__2L11init_monthsEv() {
 var $__i$0$i$i = 0, $arrayctor$cur = 0;
 if (!(HEAP8[58544] | 0)) if (___cxa_guard_acquire(58544) | 0) {
  $arrayctor$cur = 57456;
  do {
   HEAP32[$arrayctor$cur >> 2] = 0;
   HEAP32[$arrayctor$cur + 4 >> 2] = 0;
   HEAP32[$arrayctor$cur + 8 >> 2] = 0;
   $__i$0$i$i = 0;
   while (1) {
    if (($__i$0$i$i | 0) == 3) break;
    HEAP32[$arrayctor$cur + ($__i$0$i$i << 2) >> 2] = 0;
    $__i$0$i$i = $__i$0$i$i + 1 | 0;
   }
   $arrayctor$cur = $arrayctor$cur + 12 | 0;
  } while (($arrayctor$cur | 0) != 57744);
  ___cxa_guard_release(58544);
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(57456, 43342) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(57468, 43350) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(57480, 43359) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(57492, 43365) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(57504, 43371) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(57516, 43375) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(57528, 43380) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(57540, 43385) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(57552, 43392) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(57564, 43402) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(57576, 43410) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(57588, 43419) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(57600, 43428) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(57612, 43432) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(57624, 43436) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(57636, 43440) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(57648, 43371) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(57660, 43444) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(57672, 43448) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(57684, 43452) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(57696, 43456) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(57708, 43460) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(57720, 43464) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(57732, 43468) | 0;
 return;
}

function __ZNKSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN4tson8PropertyEEENS_19__map_value_compareIS7_SA_NS_4lessIS7_EELb1EEENS5_ISA_EEE14__count_uniqueIS7_EEmRKT_($this, $__k) {
 $this = $this | 0;
 $__k = $__k | 0;
 var $0 = 0, $3 = 0, $__cc$i$i8 = 0, $__rt$027 = 0, $__rt$029 = 0, $__rt$1$in = 0, $__size$i$i$i$i$i$i = 0, $__size$i$i$i$i$i$i20 = 0, $__size_$i$i$i$i$i$i$i$i = 0, $__size_$i3$i$i$i$i$i$i = 0, $call$i$i$i = 0, $call$i$i$i9 = 0, $cond$i$i$i$i$i$i = 0, $cond$i$i$i$i$i$i18 = 0, $ref$tmp$i$i$i$i7 = 0, $retval$0 = 0, $tobool$i$i$i$i$i$i$i$i = 0, $tobool$i$i$i$i$i$i$i$i12 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $ref$tmp$i$i$i$i7 = sp;
 $__rt$027 = HEAP32[$this + 4 >> 2] | 0;
 L1 : do if (!$__rt$027) $retval$0 = 0; else {
  $__size$i$i$i$i$i$i20 = $ref$tmp$i$i$i$i7 + 4 | 0;
  $__size_$i$i$i$i$i$i$i$i = $__k + 11 | 0;
  $__size_$i3$i$i$i$i$i$i = $__k + 4 | 0;
  $__size$i$i$i$i$i$i = $ref$tmp$i$i$i$i7 + 4 | 0;
  $__rt$029 = $__rt$027;
  while (1) {
   $__cc$i$i8 = $__rt$029 + 16 | 0;
   $call$i$i$i9 = __ZNSt3__29__launderIKNS_4pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN4tson8PropertyEEEEEPT_SE_($__cc$i$i8) | 0;
   $0 = HEAP8[$call$i$i$i9 + 11 >> 0] | 0;
   $tobool$i$i$i$i$i$i$i$i12 = $0 << 24 >> 24 < 0;
   $cond$i$i$i$i$i$i18 = $tobool$i$i$i$i$i$i$i$i12 ? HEAP32[$call$i$i$i9 + 4 >> 2] | 0 : $0 & 255;
   HEAP32[$ref$tmp$i$i$i$i7 >> 2] = $tobool$i$i$i$i$i$i$i$i12 ? HEAP32[$call$i$i$i9 >> 2] | 0 : $call$i$i$i9;
   HEAP32[$__size$i$i$i$i$i$i20 >> 2] = $cond$i$i$i$i$i$i18;
   if ((__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareINS_17basic_string_viewIcS2_EEEENS_9enable_ifIXsr33__can_be_converted_to_string_viewIcS2_T_EE5valueEiE4typeERKSA_($__k, $ref$tmp$i$i$i$i7) | 0) < 0) $__rt$1$in = $__rt$029; else {
    $call$i$i$i = __ZNSt3__29__launderIKNS_4pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN4tson8PropertyEEEEEPT_SE_($__cc$i$i8) | 0;
    $3 = HEAP8[$__size_$i$i$i$i$i$i$i$i >> 0] | 0;
    $tobool$i$i$i$i$i$i$i$i = $3 << 24 >> 24 < 0;
    $cond$i$i$i$i$i$i = $tobool$i$i$i$i$i$i$i$i ? HEAP32[$__size_$i3$i$i$i$i$i$i >> 2] | 0 : $3 & 255;
    HEAP32[$ref$tmp$i$i$i$i7 >> 2] = $tobool$i$i$i$i$i$i$i$i ? HEAP32[$__k >> 2] | 0 : $__k;
    HEAP32[$__size$i$i$i$i$i$i >> 2] = $cond$i$i$i$i$i$i;
    if ((__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareINS_17basic_string_viewIcS2_EEEENS_9enable_ifIXsr33__can_be_converted_to_string_viewIcS2_T_EE5valueEiE4typeERKSA_($call$i$i$i, $ref$tmp$i$i$i$i7) | 0) >= 0) {
     $retval$0 = 1;
     break L1;
    }
    $__rt$1$in = $__rt$029 + 4 | 0;
   }
   $__rt$029 = HEAP32[$__rt$1$in >> 2] | 0;
   if (!$__rt$029) {
    $retval$0 = 0;
    break;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $retval$0 | 0;
}

function __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEixIKcEERKSB_PT_($this, $key) {
 $this = $this | 0;
 $key = $key | 0;
 var $1 = 0, $call$i = 0, $call$i45 = 0, $call20 = 0, $exception = 0, $key$addr = 0, $m_value = 0, $ref$tmp18 = 0, $ref$tmp19 = 0, $second = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $key$addr = sp + 12 | 0;
 $ref$tmp18 = sp + 16 | 0;
 $ref$tmp19 = sp;
 HEAP32[$key$addr >> 2] = $key;
 if (!(__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE9is_objectEv($this) | 0)) {
  $exception = ___cxa_allocate_exception(16) | 0;
  $call20 = __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE9type_nameEv($this) | 0;
  HEAP32[$ref$tmp19 >> 2] = 0;
  HEAP32[$ref$tmp19 + 4 >> 2] = 0;
  HEAP32[$ref$tmp19 + 8 >> 2] = 0;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcm($ref$tmp19, $call20, __ZNSt3__211char_traitsIcE6lengthEPKc($call20) | 0);
  $call$i45 = __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6insertEmPKc($ref$tmp19, 0, 23881) | 0;
  HEAP32[$ref$tmp18 >> 2] = HEAP32[$call$i45 >> 2];
  HEAP32[$ref$tmp18 + 4 >> 2] = HEAP32[$call$i45 + 4 >> 2];
  HEAP32[$ref$tmp18 + 8 >> 2] = HEAP32[$call$i45 + 8 >> 2];
  HEAP32[$call$i45 >> 2] = 0;
  HEAP32[$call$i45 + 4 >> 2] = 0;
  HEAP32[$call$i45 + 8 >> 2] = 0;
  __ZN8nlohmann6detail10type_error6createEiRKNSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE($exception, 305, $ref$tmp18);
  ___cxa_throw($exception | 0, 15016, 9);
 }
 $m_value = $this + 8 | 0;
 $call$i = __ZNSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8nlohmann10basic_jsonINS_3mapENS_6vectorES7_bxydS5_NS8_14adl_serializerEEEEENS_19__map_value_compareIS7_SE_NS_4lessIvEELb1EEENS5_ISE_EEE4findIPKcEENS_15__tree_iteratorISE_PNS_11__tree_nodeISE_PvEElEERKT_(HEAP32[$m_value >> 2] | 0, $key$addr) | 0;
 $1 = HEAP32[$m_value >> 2] | 0;
 if (($call$i | 0) == ($1 + 4 | 0)) ___assert_fail(23819, 22221, 17699, 23870); else {
  $second = (__ZNSt3__29__launderINS_4pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8nlohmann10basic_jsonINS_3mapENS_6vectorES7_bxydS5_NS9_14adl_serializerEEEEEEEPT_SH_((__ZNSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8nlohmann10basic_jsonINS_3mapENS_6vectorES7_bxydS5_NS8_14adl_serializerEEEEENS_19__map_value_compareIS7_SE_NS_4lessIvEELb1EEENS5_ISE_EEE4findIPKcEENS_15__tree_iteratorISE_PNS_11__tree_nodeISE_PvEElEERKT_($1, $key$addr) | 0) + 16 | 0) | 0) + 16 | 0;
  STACKTOP = sp;
  return $second | 0;
 }
 return 0;
}

function __ZN8nlohmann6detail28json_sax_dom_callback_parserINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE12start_objectEm($this, $len) {
 $this = $this | 0;
 $len = $len | 0;
 var $2 = 0, $6 = 0, $7 = 0, $__end_$i = 0, $call$i8 = 0, $exception = 0, $incdec$ptr$i = 0, $keep = 0, $ref$tmp = 0, $ref$tmp13 = 0, $ref_stack = 0, $second = 0, $val = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 $keep = sp + 32 | 0;
 $val = sp + 24 | 0;
 $ref$tmp = sp + 12 | 0;
 $ref$tmp13 = sp;
 $ref_stack = $this + 4 | 0;
 $__end_$i = $this + 8 | 0;
 HEAP8[$keep >> 0] = (__ZNKSt3__28functionIFbiN8nlohmann6detail6parserINS1_10basic_jsonINS_3mapENS_6vectorENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEbxydSA_NS1_14adl_serializerEEEE13parse_event_tERSE_EEclEiSG_SH_($this + 48 | 0, (HEAP32[$__end_$i >> 2] | 0) - (HEAP32[$ref_stack >> 2] | 0) >> 2, 0, $this + 72 | 0) | 0) & 1;
 __ZNSt3__26vectorIbNS_9allocatorIbEEE9push_backERKb($this + 16 | 0, $keep);
 HEAP8[$ref$tmp >> 0] = 1;
 __ZN8nlohmann6detail28json_sax_dom_callback_parserINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE12handle_valueINS0_7value_tEEENS3_4pairIbPSD_EEOT_b($val, $this, $ref$tmp, 1);
 $second = $val + 4 | 0;
 $2 = HEAP32[$__end_$i >> 2] | 0;
 if (($2 | 0) == (HEAP32[$this + 12 >> 2] | 0)) {
  __ZNSt3__26vectorIPN8nlohmann10basic_jsonINS_3mapES0_NS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEbxydS7_NS1_14adl_serializerEEENS7_ISC_EEE21__push_back_slow_pathIRKSC_EEvOT_($ref_stack, $second);
  $6 = HEAP32[$__end_$i >> 2] | 0;
 } else {
  HEAP32[$2 >> 2] = HEAP32[$second >> 2];
  $incdec$ptr$i = (HEAP32[$__end_$i >> 2] | 0) + 4 | 0;
  HEAP32[$__end_$i >> 2] = $incdec$ptr$i;
  $6 = $incdec$ptr$i;
 }
 $7 = HEAP32[$6 + -4 >> 2] | 0;
 if (!(($len | 0) == -1 | ($7 | 0) == 0)) if ((__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE8max_sizeEv($7) | 0) >>> 0 < $len >>> 0) {
  $exception = ___cxa_allocate_exception(16) | 0;
  __ZNSt3__29to_stringEm($ref$tmp13, $len);
  $call$i8 = __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6insertEmPKc($ref$tmp13, 0, 24316) | 0;
  HEAP32[$ref$tmp >> 2] = HEAP32[$call$i8 >> 2];
  HEAP32[$ref$tmp + 4 >> 2] = HEAP32[$call$i8 + 4 >> 2];
  HEAP32[$ref$tmp + 8 >> 2] = HEAP32[$call$i8 + 8 >> 2];
  HEAP32[$call$i8 >> 2] = 0;
  HEAP32[$call$i8 + 4 >> 2] = 0;
  HEAP32[$call$i8 + 8 >> 2] = 0;
  __ZN8nlohmann6detail12out_of_range6createEiRKNSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE($exception, 408, $ref$tmp);
  ___cxa_throw($exception | 0, 15080, 9);
 }
 STACKTOP = sp;
 return 1;
}

function __ZN8nlohmann6detail28json_sax_dom_callback_parserINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE11start_arrayEm($this, $len) {
 $this = $this | 0;
 $len = $len | 0;
 var $2 = 0, $6 = 0, $7 = 0, $__end_$i = 0, $call$i8 = 0, $exception = 0, $incdec$ptr$i = 0, $keep = 0, $ref$tmp = 0, $ref$tmp13 = 0, $ref_stack = 0, $second = 0, $val = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 $keep = sp + 32 | 0;
 $val = sp + 24 | 0;
 $ref$tmp = sp + 12 | 0;
 $ref$tmp13 = sp;
 $ref_stack = $this + 4 | 0;
 $__end_$i = $this + 8 | 0;
 HEAP8[$keep >> 0] = (__ZNKSt3__28functionIFbiN8nlohmann6detail6parserINS1_10basic_jsonINS_3mapENS_6vectorENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEbxydSA_NS1_14adl_serializerEEEE13parse_event_tERSE_EEclEiSG_SH_($this + 48 | 0, (HEAP32[$__end_$i >> 2] | 0) - (HEAP32[$ref_stack >> 2] | 0) >> 2, 2, $this + 72 | 0) | 0) & 1;
 __ZNSt3__26vectorIbNS_9allocatorIbEEE9push_backERKb($this + 16 | 0, $keep);
 HEAP8[$ref$tmp >> 0] = 2;
 __ZN8nlohmann6detail28json_sax_dom_callback_parserINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE12handle_valueINS0_7value_tEEENS3_4pairIbPSD_EEOT_b($val, $this, $ref$tmp, 1);
 $second = $val + 4 | 0;
 $2 = HEAP32[$__end_$i >> 2] | 0;
 if (($2 | 0) == (HEAP32[$this + 12 >> 2] | 0)) {
  __ZNSt3__26vectorIPN8nlohmann10basic_jsonINS_3mapES0_NS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEbxydS7_NS1_14adl_serializerEEENS7_ISC_EEE21__push_back_slow_pathIRKSC_EEvOT_($ref_stack, $second);
  $6 = HEAP32[$__end_$i >> 2] | 0;
 } else {
  HEAP32[$2 >> 2] = HEAP32[$second >> 2];
  $incdec$ptr$i = (HEAP32[$__end_$i >> 2] | 0) + 4 | 0;
  HEAP32[$__end_$i >> 2] = $incdec$ptr$i;
  $6 = $incdec$ptr$i;
 }
 $7 = HEAP32[$6 + -4 >> 2] | 0;
 if (!(($len | 0) == -1 | ($7 | 0) == 0)) if ((__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE8max_sizeEv($7) | 0) >>> 0 < $len >>> 0) {
  $exception = ___cxa_allocate_exception(16) | 0;
  __ZNSt3__29to_stringEm($ref$tmp13, $len);
  $call$i8 = __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6insertEmPKc($ref$tmp13, 0, 24293) | 0;
  HEAP32[$ref$tmp >> 2] = HEAP32[$call$i8 >> 2];
  HEAP32[$ref$tmp + 4 >> 2] = HEAP32[$call$i8 + 4 >> 2];
  HEAP32[$ref$tmp + 8 >> 2] = HEAP32[$call$i8 + 8 >> 2];
  HEAP32[$call$i8 >> 2] = 0;
  HEAP32[$call$i8 + 4 >> 2] = 0;
  HEAP32[$call$i8 + 8 >> 2] = 0;
  __ZN8nlohmann6detail12out_of_range6createEiRKNSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE($exception, 408, $ref$tmp);
  ___cxa_throw($exception | 0, 15080, 9);
 }
 STACKTOP = sp;
 return 1;
}

function __ZN4tson7Tileset20generateMissingTilesEv($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $10 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $6 = 0, $7 = 0, $9 = 0, $__begin$sroa$0$042 = 0, $__end_$i = 0, $__end_$i$i = 0, $__r$05$i = 0, $__value_$i$i$i$i = 0, $__value_$i$i$i$i7 = 0, $call6 = 0, $m_firstgid = 0, $m_tileCount = 0, $m_tiles = 0, $ref$tmp = 0, $storemerge39 = 0, $tileIds = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 320 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(320);
 $tileIds = sp + 304 | 0;
 $ref$tmp = sp;
 HEAP32[$tileIds >> 2] = 0;
 $__end_$i$i = $tileIds + 4 | 0;
 HEAP32[$__end_$i$i >> 2] = 0;
 $__value_$i$i$i$i = $tileIds + 8 | 0;
 HEAP32[$__value_$i$i$i$i >> 2] = 0;
 $m_tiles = $this + 76 | 0;
 $0 = HEAP32[$m_tiles >> 2] | 0;
 $__end_$i = $this + 80 | 0;
 $1 = HEAP32[$__end_$i >> 2] | 0;
 if (($0 | 0) != ($1 | 0)) {
  $__begin$sroa$0$042 = $0;
  do {
   $call6 = __ZNK4tson4Tile5getIdEv($__begin$sroa$0$042) | 0;
   HEAP32[$ref$tmp >> 2] = $call6;
   $4 = HEAP32[$__end_$i$i >> 2] | 0;
   if ($4 >>> 0 < (HEAP32[$__value_$i$i$i$i >> 2] | 0) >>> 0) {
    HEAP32[$4 >> 2] = $call6;
    HEAP32[$__end_$i$i >> 2] = $4 + 4;
   } else __ZNSt3__26vectorIiNS_9allocatorIiEEE21__push_back_slow_pathIiEEvOT_($tileIds, $ref$tmp);
   $__begin$sroa$0$042 = $__begin$sroa$0$042 + 304 | 0;
  } while (($__begin$sroa$0$042 | 0) != ($1 | 0));
 }
 $m_firstgid = $this + 4 | 0;
 $m_tileCount = $this + 48 | 0;
 $2 = HEAP32[$m_tileCount >> 2] | 0;
 if (($2 | 0) > 0) {
  $3 = HEAP32[$m_firstgid >> 2] | 0;
  $__value_$i$i$i$i7 = $this + 84 | 0;
  $15 = $2;
  $16 = $3;
  $storemerge39 = $3;
  while (1) {
   $6 = HEAP32[$tileIds >> 2] | 0;
   $7 = HEAP32[$__end_$i$i >> 2] | 0;
   if (($6 | 0) == ($7 | 0)) label = 14; else {
    $9 = $6;
    $__r$05$i = 0;
    do {
     $__r$05$i = $__r$05$i + ((HEAP32[$9 >> 2] | 0) == ($storemerge39 | 0) & 1) | 0;
     $9 = $9 + 4 | 0;
    } while (($9 | 0) != ($7 | 0));
    if (!$__r$05$i) label = 14; else {
     $13 = $16;
     $14 = $15;
    }
   }
   if ((label | 0) == 14) {
    label = 0;
    __ZN4tson4TileC2Ei($ref$tmp, $storemerge39);
    $10 = HEAP32[$__end_$i >> 2] | 0;
    if ($10 >>> 0 < (HEAP32[$__value_$i$i$i$i7 >> 2] | 0) >>> 0) {
     __ZN4tson4TileC2EOS0_($10, $ref$tmp);
     HEAP32[$__end_$i >> 2] = (HEAP32[$__end_$i >> 2] | 0) + 304;
    } else __ZNSt3__26vectorIN4tson4TileENS_9allocatorIS2_EEE24__emplace_back_slow_pathIJS2_EEEvDpOT_($m_tiles, $ref$tmp);
    __ZN4tson4TileD2Ev($ref$tmp);
    $13 = HEAP32[$m_firstgid >> 2] | 0;
    $14 = HEAP32[$m_tileCount >> 2] | 0;
   }
   $storemerge39 = $storemerge39 + 1 | 0;
   if (($storemerge39 | 0) >= ($14 + $13 | 0)) break; else {
    $15 = $14;
    $16 = $13;
   }
  }
 }
 __ZNSt3__213__vector_baseIiNS_9allocatorIiEEED2Ev($tileIds);
 STACKTOP = sp;
 return;
}

function __ZN4tson5ColorIhE14parseHexStringERKNSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE($this, $color) {
 $this = $this | 0;
 $color = $color | 0;
 var $0 = 0, $ref$tmp = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $ref$tmp = sp;
 $0 = HEAP8[$color + 11 >> 0] | 0;
 switch (($0 << 24 >> 24 < 0 ? HEAP32[$color + 4 >> 2] | 0 : $0 & 255) | 0) {
 case 9:
  {
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_mmRKS4_($ref$tmp, $color, 1, 2, $color);
   HEAP8[$this + 3 >> 0] = __ZNSt3__24stoiERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPmi($ref$tmp, 0, 16) | 0;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp);
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_mmRKS4_($ref$tmp, $color, 3, 2, $color);
   HEAP8[$this >> 0] = __ZNSt3__24stoiERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPmi($ref$tmp, 0, 16) | 0;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp);
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_mmRKS4_($ref$tmp, $color, 5, 2, $color);
   HEAP8[$this + 1 >> 0] = __ZNSt3__24stoiERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPmi($ref$tmp, 0, 16) | 0;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp);
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_mmRKS4_($ref$tmp, $color, 7, 2, $color);
   HEAP8[$this + 2 >> 0] = __ZNSt3__24stoiERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPmi($ref$tmp, 0, 16) | 0;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp);
   break;
  }
 case 7:
  {
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_mmRKS4_($ref$tmp, $color, 1, 2, $color);
   HEAP8[$this >> 0] = __ZNSt3__24stoiERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPmi($ref$tmp, 0, 16) | 0;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp);
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_mmRKS4_($ref$tmp, $color, 3, 2, $color);
   HEAP8[$this + 1 >> 0] = __ZNSt3__24stoiERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPmi($ref$tmp, 0, 16) | 0;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp);
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_mmRKS4_($ref$tmp, $color, 5, 2, $color);
   HEAP8[$this + 2 >> 0] = __ZNSt3__24stoiERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPmi($ref$tmp, 0, 16) | 0;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp);
   HEAP8[$this + 3 >> 0] = -1;
   break;
  }
 default:
  {}
 }
 STACKTOP = sp;
 return;
}

function _memchr($src, $c, $n) {
 $src = $src | 0;
 $c = $c | 0;
 $n = $n | 0;
 var $$in = 0, $1 = 0, $5 = 0, $8 = 0, $conv1 = 0, $dec = 0, $incdec$ptr = 0, $incdec$ptr21 = 0, $mul = 0, $n$addr$0$lcssa = 0, $n$addr$0$lcssa52 = 0, $n$addr$043 = 0, $n$addr$1$lcssa = 0, $n$addr$1$lcssa55 = 0, $n$addr$133 = 0, $n$addr$227 = 0, $s$0$lcssa = 0, $s$0$lcssa53 = 0, $s$044 = 0, $s$128 = 0, $sub22 = 0, $tobool2 = 0, $tobool2$lcssa = 0, $tobool241 = 0, $w$0$lcssa = 0, $w$034 = 0, $xor = 0, label = 0;
 label = 0;
 $conv1 = $c & 255;
 $tobool241 = ($n | 0) != 0;
 L1 : do if ($tobool241 & ($src & 3 | 0) != 0) {
  $1 = $c & 255;
  $n$addr$043 = $n;
  $s$044 = $src;
  while (1) {
   if ((HEAP8[$s$044 >> 0] | 0) == $1 << 24 >> 24) {
    $n$addr$0$lcssa52 = $n$addr$043;
    $s$0$lcssa53 = $s$044;
    label = 6;
    break L1;
   }
   $incdec$ptr = $s$044 + 1 | 0;
   $dec = $n$addr$043 + -1 | 0;
   $tobool2 = ($dec | 0) != 0;
   if ($tobool2 & ($incdec$ptr & 3 | 0) != 0) {
    $n$addr$043 = $dec;
    $s$044 = $incdec$ptr;
   } else {
    $n$addr$0$lcssa = $dec;
    $s$0$lcssa = $incdec$ptr;
    $tobool2$lcssa = $tobool2;
    label = 5;
    break;
   }
  }
 } else {
  $n$addr$0$lcssa = $n;
  $s$0$lcssa = $src;
  $tobool2$lcssa = $tobool241;
  label = 5;
 } while (0);
 if ((label | 0) == 5) if ($tobool2$lcssa) {
  $n$addr$0$lcssa52 = $n$addr$0$lcssa;
  $s$0$lcssa53 = $s$0$lcssa;
  label = 6;
 } else label = 16;
 L8 : do if ((label | 0) == 6) {
  $5 = $c & 255;
  if ((HEAP8[$s$0$lcssa53 >> 0] | 0) == $5 << 24 >> 24) if (!$n$addr$0$lcssa52) {
   label = 16;
   break;
  } else {
   $8 = $s$0$lcssa53;
   break;
  }
  $mul = Math_imul($conv1, 16843009) | 0;
  L13 : do if ($n$addr$0$lcssa52 >>> 0 > 3) {
   $n$addr$133 = $n$addr$0$lcssa52;
   $w$034 = $s$0$lcssa53;
   while (1) {
    $xor = HEAP32[$w$034 >> 2] ^ $mul;
    if (($xor & -2139062144 ^ -2139062144) & $xor + -16843009 | 0) {
     $$in = $w$034;
     $n$addr$1$lcssa55 = $n$addr$133;
     break L13;
    }
    $incdec$ptr21 = $w$034 + 4 | 0;
    $sub22 = $n$addr$133 + -4 | 0;
    if ($sub22 >>> 0 > 3) {
     $n$addr$133 = $sub22;
     $w$034 = $incdec$ptr21;
    } else {
     $n$addr$1$lcssa = $sub22;
     $w$0$lcssa = $incdec$ptr21;
     label = 11;
     break;
    }
   }
  } else {
   $n$addr$1$lcssa = $n$addr$0$lcssa52;
   $w$0$lcssa = $s$0$lcssa53;
   label = 11;
  } while (0);
  if ((label | 0) == 11) if (!$n$addr$1$lcssa) {
   label = 16;
   break;
  } else {
   $$in = $w$0$lcssa;
   $n$addr$1$lcssa55 = $n$addr$1$lcssa;
  }
  $n$addr$227 = $n$addr$1$lcssa55;
  $s$128 = $$in;
  while (1) {
   if ((HEAP8[$s$128 >> 0] | 0) == $5 << 24 >> 24) {
    $8 = $s$128;
    break L8;
   }
   $n$addr$227 = $n$addr$227 + -1 | 0;
   if (!$n$addr$227) {
    label = 16;
    break;
   } else $s$128 = $s$128 + 1 | 0;
  }
 } while (0);
 if ((label | 0) == 16) $8 = 0;
 return $8 | 0;
}

function _GifMakePalette($lastFrame, $nextFrame, $width, $height, $bitDepth, $buildForDither, $pPal) {
 $lastFrame = $lastFrame | 0;
 $nextFrame = $nextFrame | 0;
 $width = $width | 0;
 $height = $height | 0;
 $bitDepth = $bitDepth | 0;
 $buildForDither = $buildForDither | 0;
 $pPal = $pPal | 0;
 var $bitDepth$addr = 0, $buildForDither$addr = 0, $destroyableImage = 0, $height$addr = 0, $imageSize = 0, $lastElt = 0, $lastFrame$addr = 0, $nextFrame$addr = 0, $numPixels = 0, $pPal$addr = 0, $splitDist = 0, $splitElt = 0, $width$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64);
 $lastFrame$addr = sp + 44 | 0;
 $nextFrame$addr = sp + 40 | 0;
 $width$addr = sp + 36 | 0;
 $height$addr = sp + 32 | 0;
 $bitDepth$addr = sp + 28 | 0;
 $buildForDither$addr = sp + 48 | 0;
 $pPal$addr = sp + 24 | 0;
 $imageSize = sp + 20 | 0;
 $destroyableImage = sp + 16 | 0;
 $numPixels = sp + 12 | 0;
 $lastElt = sp + 8 | 0;
 $splitElt = sp + 4 | 0;
 $splitDist = sp;
 HEAP32[$lastFrame$addr >> 2] = $lastFrame;
 HEAP32[$nextFrame$addr >> 2] = $nextFrame;
 HEAP32[$width$addr >> 2] = $width;
 HEAP32[$height$addr >> 2] = $height;
 HEAP32[$bitDepth$addr >> 2] = $bitDepth;
 HEAP8[$buildForDither$addr >> 0] = $buildForDither & 1;
 HEAP32[$pPal$addr >> 2] = $pPal;
 HEAP32[HEAP32[$pPal$addr >> 2] >> 2] = HEAP32[$bitDepth$addr >> 2];
 HEAP32[$imageSize >> 2] = (Math_imul(HEAP32[$width$addr >> 2] | 0, HEAP32[$height$addr >> 2] | 0) | 0) << 2;
 HEAP32[$destroyableImage >> 2] = _malloc(HEAP32[$imageSize >> 2] | 0) | 0;
 _memcpy(HEAP32[$destroyableImage >> 2] | 0, HEAP32[$nextFrame$addr >> 2] | 0, HEAP32[$imageSize >> 2] | 0) | 0;
 HEAP32[$numPixels >> 2] = Math_imul(HEAP32[$width$addr >> 2] | 0, HEAP32[$height$addr >> 2] | 0) | 0;
 if (HEAP32[$lastFrame$addr >> 2] | 0) HEAP32[$numPixels >> 2] = _GifPickChangedPixels(HEAP32[$lastFrame$addr >> 2] | 0, HEAP32[$destroyableImage >> 2] | 0, HEAP32[$numPixels >> 2] | 0) | 0;
 HEAP32[$lastElt >> 2] = 1 << HEAP32[$bitDepth$addr >> 2];
 HEAP32[$splitElt >> 2] = (HEAP32[$lastElt >> 2] | 0) / 2 | 0;
 HEAP32[$splitDist >> 2] = (HEAP32[$splitElt >> 2] | 0) / 2 | 0;
 _GifSplitPalette(HEAP32[$destroyableImage >> 2] | 0, HEAP32[$numPixels >> 2] | 0, 1, HEAP32[$lastElt >> 2] | 0, HEAP32[$splitElt >> 2] | 0, HEAP32[$splitDist >> 2] | 0, 1, HEAP8[$buildForDither$addr >> 0] & 1, HEAP32[$pPal$addr >> 2] | 0);
 _free(HEAP32[$destroyableImage >> 2] | 0);
 HEAP8[(HEAP32[$pPal$addr >> 2] | 0) + 1027 + (1 << (HEAP32[$bitDepth$addr >> 2] | 0) - 1) >> 0] = 0;
 HEAP8[(HEAP32[$pPal$addr >> 2] | 0) + 772 + (1 << (HEAP32[$bitDepth$addr >> 2] | 0) - 1) >> 0] = 0;
 HEAP8[(HEAP32[$pPal$addr >> 2] | 0) + 516 >> 0] = 0;
 HEAP8[(HEAP32[$pPal$addr >> 2] | 0) + 260 >> 0] = 0;
 HEAP8[(HEAP32[$pPal$addr >> 2] | 0) + 4 >> 0] = 0;
 STACKTOP = sp;
 return;
}

function _stbi__de_iphone($z) {
 $z = $z | 0;
 var $a = 0, $half = 0, $i = 0, $p = 0, $pixel_count = 0, $s = 0, $t = 0, $t13 = 0, $t56 = 0, $z$addr = 0, sp = 0, CSE$0 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $z$addr = sp + 16 | 0;
 $s = sp + 12 | 0;
 $i = sp + 8 | 0;
 $pixel_count = sp + 4 | 0;
 $p = sp;
 $t = sp + 24 | 0;
 $a = sp + 23 | 0;
 $t13 = sp + 22 | 0;
 $half = sp + 21 | 0;
 $t56 = sp + 20 | 0;
 HEAP32[$z$addr >> 2] = $z;
 HEAP32[$s >> 2] = HEAP32[HEAP32[$z$addr >> 2] >> 2];
 HEAP32[$pixel_count >> 2] = Math_imul(HEAP32[HEAP32[$s >> 2] >> 2] | 0, HEAP32[(HEAP32[$s >> 2] | 0) + 4 >> 2] | 0) | 0;
 HEAP32[$p >> 2] = HEAP32[(HEAP32[$z$addr >> 2] | 0) + 12 >> 2];
 if ((HEAP32[(HEAP32[$s >> 2] | 0) + 12 >> 2] | 0) == 3) {
  HEAP32[$i >> 2] = 0;
  while (1) {
   if ((HEAP32[$i >> 2] | 0) >>> 0 >= (HEAP32[$pixel_count >> 2] | 0) >>> 0) break;
   HEAP8[$t >> 0] = HEAP8[HEAP32[$p >> 2] >> 0] | 0;
   HEAP8[HEAP32[$p >> 2] >> 0] = HEAP8[(HEAP32[$p >> 2] | 0) + 2 >> 0] | 0;
   HEAP8[(HEAP32[$p >> 2] | 0) + 2 >> 0] = HEAP8[$t >> 0] | 0;
   HEAP32[$p >> 2] = (HEAP32[$p >> 2] | 0) + 3;
   HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
  }
  STACKTOP = sp;
  return;
 }
 if ((HEAP32[(HEAP32[$s >> 2] | 0) + 12 >> 2] | 0) != 4) ___assert_fail(33396, 32781, 4767, 33414);
 HEAP32[$i >> 2] = 0;
 if (!0) {
  while (1) {
   if ((HEAP32[$i >> 2] | 0) >>> 0 >= (HEAP32[$pixel_count >> 2] | 0) >>> 0) break;
   HEAP8[$t56 >> 0] = HEAP8[HEAP32[$p >> 2] >> 0] | 0;
   HEAP8[HEAP32[$p >> 2] >> 0] = HEAP8[(HEAP32[$p >> 2] | 0) + 2 >> 0] | 0;
   HEAP8[(HEAP32[$p >> 2] | 0) + 2 >> 0] = HEAP8[$t56 >> 0] | 0;
   HEAP32[$p >> 2] = (HEAP32[$p >> 2] | 0) + 4;
   HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
  }
  STACKTOP = sp;
  return;
 }
 while (1) {
  if ((HEAP32[$i >> 2] | 0) >>> 0 >= (HEAP32[$pixel_count >> 2] | 0) >>> 0) break;
  HEAP8[$a >> 0] = HEAP8[(HEAP32[$p >> 2] | 0) + 3 >> 0] | 0;
  HEAP8[$t13 >> 0] = HEAP8[HEAP32[$p >> 2] >> 0] | 0;
  if (HEAP8[$a >> 0] | 0) {
   HEAP8[$half >> 0] = (HEAPU8[$a >> 0] | 0) / 2 | 0;
   HEAP8[HEAP32[$p >> 2] >> 0] = (((HEAPU8[(HEAP32[$p >> 2] | 0) + 2 >> 0] | 0) * 255 | 0) + (HEAPU8[$half >> 0] | 0) | 0) / (HEAPU8[$a >> 0] | 0) | 0;
   CSE$0 = (HEAP32[$p >> 2] | 0) + 1 | 0;
   HEAP8[CSE$0 >> 0] = (((HEAPU8[CSE$0 >> 0] | 0) * 255 | 0) + (HEAPU8[$half >> 0] | 0) | 0) / (HEAPU8[$a >> 0] | 0) | 0;
   HEAP8[(HEAP32[$p >> 2] | 0) + 2 >> 0] = (((HEAPU8[$t13 >> 0] | 0) * 255 | 0) + (HEAPU8[$half >> 0] | 0) | 0) / (HEAPU8[$a >> 0] | 0) | 0;
  } else {
   HEAP8[HEAP32[$p >> 2] >> 0] = HEAP8[(HEAP32[$p >> 2] | 0) + 2 >> 0] | 0;
   HEAP8[(HEAP32[$p >> 2] | 0) + 2 >> 0] = HEAP8[$t13 >> 0] | 0;
  }
  HEAP32[$p >> 2] = (HEAP32[$p >> 2] | 0) + 4;
  HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
 }
 STACKTOP = sp;
 return;
}

function _pop_arg($arg, $type, $ap, $pop_arg_long_double) {
 $arg = $arg | 0;
 $type = $type | 0;
 $ap = $ap | 0;
 $pop_arg_long_double = $pop_arg_long_double | 0;
 var $102 = 0, $103 = 0.0, $12 = 0, $13 = 0, $16 = 0, $25 = 0, $26 = 0, $27 = 0, $36 = 0, $37 = 0, $39 = 0, $42 = 0, $43 = 0, $5 = 0, $52 = 0, $53 = 0, $54 = 0, $57 = 0, $6 = 0, $66 = 0, $67 = 0, $68 = 0, $77 = 0, $78 = 0, $79 = 0, $82 = 0, $91 = 0, $92 = 0, $93 = 0;
 L1 : do if ($type >>> 0 <= 20) do switch ($type | 0) {
 case 9:
  {
   $5 = (HEAP32[$ap >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $6 = HEAP32[$5 >> 2] | 0;
   HEAP32[$ap >> 2] = $5 + 4;
   HEAP32[$arg >> 2] = $6;
   break L1;
   break;
  }
 case 10:
  {
   $12 = (HEAP32[$ap >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $13 = HEAP32[$12 >> 2] | 0;
   HEAP32[$ap >> 2] = $12 + 4;
   $16 = $arg;
   HEAP32[$16 >> 2] = $13;
   HEAP32[$16 + 4 >> 2] = (($13 | 0) < 0) << 31 >> 31;
   break L1;
   break;
  }
 case 11:
  {
   $25 = (HEAP32[$ap >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $26 = HEAP32[$25 >> 2] | 0;
   HEAP32[$ap >> 2] = $25 + 4;
   $27 = $arg;
   HEAP32[$27 >> 2] = $26;
   HEAP32[$27 + 4 >> 2] = 0;
   break L1;
   break;
  }
 case 12:
  {
   $36 = (HEAP32[$ap >> 2] | 0) + (8 - 1) & ~(8 - 1);
   $37 = $36;
   $39 = HEAP32[$37 >> 2] | 0;
   $42 = HEAP32[$37 + 4 >> 2] | 0;
   HEAP32[$ap >> 2] = $36 + 8;
   $43 = $arg;
   HEAP32[$43 >> 2] = $39;
   HEAP32[$43 + 4 >> 2] = $42;
   break L1;
   break;
  }
 case 13:
  {
   $52 = (HEAP32[$ap >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $53 = HEAP32[$52 >> 2] | 0;
   HEAP32[$ap >> 2] = $52 + 4;
   $54 = ($53 & 65535) << 16 >> 16;
   $57 = $arg;
   HEAP32[$57 >> 2] = $54;
   HEAP32[$57 + 4 >> 2] = (($54 | 0) < 0) << 31 >> 31;
   break L1;
   break;
  }
 case 14:
  {
   $66 = (HEAP32[$ap >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $67 = HEAP32[$66 >> 2] | 0;
   HEAP32[$ap >> 2] = $66 + 4;
   $68 = $arg;
   HEAP32[$68 >> 2] = $67 & 65535;
   HEAP32[$68 + 4 >> 2] = 0;
   break L1;
   break;
  }
 case 15:
  {
   $77 = (HEAP32[$ap >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $78 = HEAP32[$77 >> 2] | 0;
   HEAP32[$ap >> 2] = $77 + 4;
   $79 = ($78 & 255) << 24 >> 24;
   $82 = $arg;
   HEAP32[$82 >> 2] = $79;
   HEAP32[$82 + 4 >> 2] = (($79 | 0) < 0) << 31 >> 31;
   break L1;
   break;
  }
 case 16:
  {
   $91 = (HEAP32[$ap >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $92 = HEAP32[$91 >> 2] | 0;
   HEAP32[$ap >> 2] = $91 + 4;
   $93 = $arg;
   HEAP32[$93 >> 2] = $92 & 255;
   HEAP32[$93 + 4 >> 2] = 0;
   break L1;
   break;
  }
 case 17:
  {
   $102 = (HEAP32[$ap >> 2] | 0) + (8 - 1) & ~(8 - 1);
   $103 = +HEAPF64[$102 >> 3];
   HEAP32[$ap >> 2] = $102 + 8;
   HEAPF64[$arg >> 3] = $103;
   break L1;
   break;
  }
 case 18:
  {
   FUNCTION_TABLE_vii[$pop_arg_long_double & 127]($arg, $ap);
   break L1;
   break;
  }
 default:
  break L1;
 } while (0); while (0);
 return;
}

function _KeyCallback($window, $key, $scancode, $action, $mods) {
 $window = $window | 0;
 $key = $key | 0;
 $scancode = $scancode | 0;
 $action = $action | 0;
 $mods = $mods | 0;
 var $10 = 0, $11 = 0, $action$addr = 0, $call11 = 0, $call9 = 0, $key$addr = 0, $mods$addr = 0, $path = 0, $vararg_buffer = 0, $vararg_buffer11 = 0, $vararg_buffer14 = 0, $vararg_buffer17 = 0, $vararg_buffer2 = 0, $vararg_buffer20 = 0, $vararg_buffer5 = 0, $window$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 592 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(592);
 $vararg_buffer20 = sp + 568 | 0;
 $vararg_buffer17 = sp + 560 | 0;
 $vararg_buffer14 = sp + 552 | 0;
 $vararg_buffer11 = sp + 544 | 0;
 $vararg_buffer5 = sp + 528 | 0;
 $vararg_buffer2 = sp + 520 | 0;
 $vararg_buffer = sp + 512 | 0;
 $window$addr = sp + 588 | 0;
 $key$addr = sp + 584 | 0;
 $action$addr = sp + 576 | 0;
 $mods$addr = sp + 572 | 0;
 $path = sp;
 HEAP32[$window$addr >> 2] = $window;
 HEAP32[$key$addr >> 2] = $key;
 HEAP32[sp + 580 >> 2] = $scancode;
 HEAP32[$action$addr >> 2] = $action;
 HEAP32[$mods$addr >> 2] = $mods;
 if ((HEAP32[$key$addr >> 2] | 0) == 256 & (HEAP32[$action$addr >> 2] | 0) == 1) {
  _glfwSetWindowShouldClose(HEAP32[$window$addr >> 2] | 0, 1);
  STACKTOP = sp;
  return;
 }
 if (!((HEAP32[$key$addr >> 2] | 0) == 301 & (HEAP32[$action$addr >> 2] | 0) == 1)) {
  HEAP8[47536 + (HEAP32[$key$addr >> 2] | 0) >> 0] = HEAP32[$action$addr >> 2];
  STACKTOP = sp;
  return;
 }
 if ((HEAP32[$mods$addr >> 2] | 0) != 2) {
  HEAP32[$vararg_buffer20 >> 2] = HEAP32[14987];
  _TakeScreenshot(_TextFormat(32363, $vararg_buffer20) | 0);
  HEAP32[14987] = (HEAP32[14987] | 0) + 1;
  STACKTOP = sp;
  return;
 }
 if (HEAP8[62164] & 1) {
  _GifEnd() | 0;
  HEAP8[62164] = 0;
  HEAP32[$vararg_buffer >> 2] = (HEAP32[14987] | 0) - 1;
  $call9 = _TextFormat(32230, $vararg_buffer) | 0;
  HEAP32[$vararg_buffer2 >> 2] = (HEAP32[14987] | 0) - 1;
  $call11 = _TextFormat(32230, $vararg_buffer2) | 0;
  HEAP32[$vararg_buffer5 >> 2] = $call9;
  HEAP32[$vararg_buffer5 + 4 >> 2] = $call11;
  _emscripten_run_script(_TextFormat(32248, $vararg_buffer5) | 0);
  _TraceLog(3, 32283, sp + 536 | 0);
  STACKTOP = sp;
  return;
 } else {
  HEAP8[62164] = 1;
  HEAP32[14988] = 0;
  _memset($path | 0, 0, 512) | 0;
  HEAP32[$vararg_buffer11 >> 2] = HEAP32[14987];
  _strcpy($path, _TextFormat(32310, $vararg_buffer11) | 0) | 0;
  $10 = HEAP32[14957] | 0;
  $11 = HEAP32[14958] | 0;
  _GifBegin($path, $10, $11, ~~Math_fround(Math_fround(_GetFrameTime()) * Math_fround(10.0)), 8, 0) | 0;
  HEAP32[14987] = (HEAP32[14987] | 0) + 1;
  HEAP32[$vararg_buffer14 >> 2] = HEAP32[14987];
  HEAP32[$vararg_buffer17 >> 2] = _TextFormat(32230, $vararg_buffer14) | 0;
  _TraceLog(3, 32330, $vararg_buffer17);
  STACKTOP = sp;
  return;
 }
}

function __ZN4tson8Property15setTypeByStringERKNSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE($this, $str) {
 $this = $this | 0;
 $str = $str | 0;
 var $0 = 0, $10 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $__size_$i$i$i = 0, $__size_$i3$i$i = 0, $call$i = 0, $call$i21 = 0, $call$i36 = 0, $call$i51 = 0, $call$i6 = 0, $call$i66 = 0, $m_type2082 = 0, label = 0;
 label = 0;
 $call$i = __ZNSt3__211char_traitsIcE6lengthEPKc(22926) | 0;
 $__size_$i$i$i = $str + 11 | 0;
 $0 = HEAP8[$__size_$i$i$i >> 0] | 0;
 $__size_$i3$i$i = $str + 4 | 0;
 if (($call$i | 0) == (($0 << 24 >> 24 < 0 ? HEAP32[$__size_$i3$i$i >> 2] | 0 : $0 & 255) | 0)) if (!(__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEmmPKcm($str, 0, -1, 22926, $call$i) | 0)) HEAP8[$this >> 0] = 1; else label = 4; else label = 4;
 do if ((label | 0) == 4) {
  $call$i6 = __ZNSt3__211char_traitsIcE6lengthEPKc(22932) | 0;
  $2 = HEAP8[$__size_$i$i$i >> 0] | 0;
  if (($call$i6 | 0) == (($2 << 24 >> 24 < 0 ? HEAP32[$__size_$i3$i$i >> 2] | 0 : $2 & 255) | 0)) if (!(__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEmmPKcm($str, 0, -1, 22932, $call$i6) | 0)) {
   HEAP8[$this >> 0] = 2;
   break;
  }
  $call$i21 = __ZNSt3__211char_traitsIcE6lengthEPKc(22937) | 0;
  $4 = HEAP8[$__size_$i$i$i >> 0] | 0;
  if (($call$i21 | 0) == (($4 << 24 >> 24 < 0 ? HEAP32[$__size_$i3$i$i >> 2] | 0 : $4 & 255) | 0)) if (!(__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEmmPKcm($str, 0, -1, 22937, $call$i21) | 0)) {
   HEAP8[$this >> 0] = 3;
   break;
  }
  $call$i36 = __ZNSt3__211char_traitsIcE6lengthEPKc(22941) | 0;
  $6 = HEAP8[$__size_$i$i$i >> 0] | 0;
  if (($call$i36 | 0) == (($6 << 24 >> 24 < 0 ? HEAP32[$__size_$i3$i$i >> 2] | 0 : $6 & 255) | 0)) if (!(__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEmmPKcm($str, 0, -1, 22941, $call$i36) | 0)) {
   HEAP8[$this >> 0] = 4;
   break;
  }
  $call$i51 = __ZNSt3__211char_traitsIcE6lengthEPKc(22946) | 0;
  $8 = HEAP8[$__size_$i$i$i >> 0] | 0;
  if (($call$i51 | 0) == (($8 << 24 >> 24 < 0 ? HEAP32[$__size_$i3$i$i >> 2] | 0 : $8 & 255) | 0)) if (!(__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEmmPKcm($str, 0, -1, 22946, $call$i51) | 0)) {
   HEAP8[$this >> 0] = 5;
   break;
  }
  $call$i66 = __ZNSt3__211char_traitsIcE6lengthEPKc(22853) | 0;
  $10 = HEAP8[$__size_$i$i$i >> 0] | 0;
  if (($call$i66 | 0) == (($10 << 24 >> 24 < 0 ? HEAP32[$__size_$i3$i$i >> 2] | 0 : $10 & 255) | 0)) if (!(__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEmmPKcm($str, 0, -1, 22853, $call$i66) | 0)) {
   HEAP8[$this >> 0] = 6;
   break;
  } else $m_type2082 = $this; else $m_type2082 = $this;
  HEAP8[$m_type2082 >> 0] = 0;
 } while (0);
 return;
}

function _EndDrawing() {
 var $$compoundliteral = 0, $$compoundliteral7 = 0, $$compoundliteral7$byval_copy = 0, $screenData = 0, $sub = 0, $sub6 = 0, $waitTime = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $$compoundliteral7$byval_copy = sp + 20 | 0;
 $screenData = sp + 8 | 0;
 $$compoundliteral = sp + 16 | 0;
 $$compoundliteral7 = sp + 12 | 0;
 $waitTime = sp;
 _rlglDraw();
 if (HEAP8[62164] & 1) {
  HEAP32[14988] = (HEAP32[14988] | 0) + 1;
  if (!((HEAP32[14988] | 0) % 10 | 0)) {
   HEAP32[$screenData >> 2] = _rlReadScreenPixels(HEAP32[14957] | 0, HEAP32[14958] | 0) | 0;
   _GifWriteFrame(HEAP32[$screenData >> 2] | 0, HEAP32[14957] | 0, HEAP32[14958] | 0, 10, 8, 0) | 0;
   _free(HEAP32[$screenData >> 2] | 0);
  }
  if ((((HEAP32[14988] | 0) / 15 | 0 | 0) % 2 | 0 | 0) == 1) {
   $sub = (HEAP32[14958] | 0) - 20 | 0;
   HEAP8[$$compoundliteral >> 0] = -26;
   HEAP8[$$compoundliteral + 1 >> 0] = 41;
   HEAP8[$$compoundliteral + 2 >> 0] = 55;
   HEAP8[$$compoundliteral + 3 >> 0] = -1;
   HEAP8[$$compoundliteral7$byval_copy >> 0] = HEAP8[$$compoundliteral >> 0] | 0;
   HEAP8[$$compoundliteral7$byval_copy + 1 >> 0] = HEAP8[$$compoundliteral + 1 >> 0] | 0;
   HEAP8[$$compoundliteral7$byval_copy + 2 >> 0] = HEAP8[$$compoundliteral + 2 >> 0] | 0;
   HEAP8[$$compoundliteral7$byval_copy + 3 >> 0] = HEAP8[$$compoundliteral + 3 >> 0] | 0;
   _DrawCircle(30, $sub, Math_fround(10.0), $$compoundliteral7$byval_copy);
   $sub6 = (HEAP32[14958] | 0) - 25 | 0;
   HEAP8[$$compoundliteral7 >> 0] = -66;
   HEAP8[$$compoundliteral7 + 1 >> 0] = 33;
   HEAP8[$$compoundliteral7 + 2 >> 0] = 55;
   HEAP8[$$compoundliteral7 + 3 >> 0] = -1;
   HEAP8[$$compoundliteral7$byval_copy >> 0] = HEAP8[$$compoundliteral7 >> 0] | 0;
   HEAP8[$$compoundliteral7$byval_copy + 1 >> 0] = HEAP8[$$compoundliteral7 + 1 >> 0] | 0;
   HEAP8[$$compoundliteral7$byval_copy + 2 >> 0] = HEAP8[$$compoundliteral7 + 2 >> 0] | 0;
   HEAP8[$$compoundliteral7$byval_copy + 3 >> 0] = HEAP8[$$compoundliteral7 + 3 >> 0] | 0;
   _DrawText(32653, 50, $sub6, 10, $$compoundliteral7$byval_copy);
  }
  _rlglDraw();
 }
 _SwapBuffers();
 _PollInputEvents();
 HEAPF64[7306] = +_GetTime();
 HEAPF64[7308] = +HEAPF64[7306] - +HEAPF64[7304];
 HEAPF64[7304] = +HEAPF64[7306];
 HEAPF64[7305] = +HEAPF64[7307] + +HEAPF64[7308];
 if (!(+HEAPF64[7305] < +HEAPF64[7309])) {
  STACKTOP = sp;
  return;
 }
 _Wait(Math_fround(Math_fround(+HEAPF64[7309] - +HEAPF64[7305]) * Math_fround(1.0e3)));
 HEAPF64[7306] = +_GetTime();
 HEAPF64[$waitTime >> 3] = +HEAPF64[7306] - +HEAPF64[7304];
 HEAPF64[7304] = +HEAPF64[7306];
 HEAPF64[7305] = +HEAPF64[7305] + +HEAPF64[$waitTime >> 3];
 STACKTOP = sp;
 return;
}

function _ImageResize($image, $newWidth, $newHeight) {
 $image = $image | 0;
 $newWidth = $newWidth | 0;
 $newHeight = $newHeight | 0;
 var $$byval_copy1 = 0, $19 = 0, $20 = 0, $6 = 0, $format = 0, $image$addr = 0, $newHeight$addr = 0, $newWidth$addr = 0, $output = 0, $pixels = 0, $tmp = 0, sp = 0, CSE$0 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64);
 $$byval_copy1 = sp + 44 | 0;
 $image$addr = sp + 40 | 0;
 $newWidth$addr = sp + 36 | 0;
 $newHeight$addr = sp + 32 | 0;
 $pixels = sp + 28 | 0;
 $output = sp + 24 | 0;
 $format = sp + 20 | 0;
 $tmp = sp;
 HEAP32[$image$addr >> 2] = $image;
 HEAP32[$newWidth$addr >> 2] = $newWidth;
 HEAP32[$newHeight$addr >> 2] = $newHeight;
 if (!(HEAP32[HEAP32[$image$addr >> 2] >> 2] | 0)) {
  STACKTOP = sp;
  return;
 }
 if (!(HEAP32[(HEAP32[$image$addr >> 2] | 0) + 4 >> 2] | 0)) {
  STACKTOP = sp;
  return;
 }
 if (!(HEAP32[(HEAP32[$image$addr >> 2] | 0) + 8 >> 2] | 0)) {
  STACKTOP = sp;
  return;
 }
 $6 = HEAP32[$image$addr >> 2] | 0;
 HEAP32[$$byval_copy1 >> 2] = HEAP32[$6 >> 2];
 HEAP32[$$byval_copy1 + 4 >> 2] = HEAP32[$6 + 4 >> 2];
 HEAP32[$$byval_copy1 + 8 >> 2] = HEAP32[$6 + 8 >> 2];
 HEAP32[$$byval_copy1 + 12 >> 2] = HEAP32[$6 + 12 >> 2];
 HEAP32[$$byval_copy1 + 16 >> 2] = HEAP32[$6 + 16 >> 2];
 HEAP32[$pixels >> 2] = _GetImageData($$byval_copy1) | 0;
 HEAP32[$output >> 2] = _malloc((Math_imul(HEAP32[$newWidth$addr >> 2] | 0, HEAP32[$newHeight$addr >> 2] | 0) | 0) << 2) | 0;
 CSE$0 = HEAP32[$image$addr >> 2] | 0;
 _stbir_resize_uint8(HEAP32[$pixels >> 2] | 0, HEAP32[CSE$0 + 4 >> 2] | 0, HEAP32[CSE$0 + 8 >> 2] | 0, 0, HEAP32[$output >> 2] | 0, HEAP32[$newWidth$addr >> 2] | 0, HEAP32[$newHeight$addr >> 2] | 0, 0, 4) | 0;
 HEAP32[$format >> 2] = HEAP32[(HEAP32[$image$addr >> 2] | 0) + 16 >> 2];
 $19 = HEAP32[$image$addr >> 2] | 0;
 HEAP32[$$byval_copy1 >> 2] = HEAP32[$19 >> 2];
 HEAP32[$$byval_copy1 + 4 >> 2] = HEAP32[$19 + 4 >> 2];
 HEAP32[$$byval_copy1 + 8 >> 2] = HEAP32[$19 + 8 >> 2];
 HEAP32[$$byval_copy1 + 12 >> 2] = HEAP32[$19 + 12 >> 2];
 HEAP32[$$byval_copy1 + 16 >> 2] = HEAP32[$19 + 16 >> 2];
 _UnloadImage($$byval_copy1);
 $20 = HEAP32[$image$addr >> 2] | 0;
 _LoadImageEx($tmp, HEAP32[$output >> 2] | 0, HEAP32[$newWidth$addr >> 2] | 0, HEAP32[$newHeight$addr >> 2] | 0);
 HEAP32[$20 >> 2] = HEAP32[$tmp >> 2];
 HEAP32[$20 + 4 >> 2] = HEAP32[$tmp + 4 >> 2];
 HEAP32[$20 + 8 >> 2] = HEAP32[$tmp + 8 >> 2];
 HEAP32[$20 + 12 >> 2] = HEAP32[$tmp + 12 >> 2];
 HEAP32[$20 + 16 >> 2] = HEAP32[$tmp + 16 >> 2];
 _ImageFormat(HEAP32[$image$addr >> 2] | 0, HEAP32[$format >> 2] | 0);
 _free(HEAP32[$output >> 2] | 0);
 _free(HEAP32[$pixels >> 2] | 0);
 STACKTOP = sp;
 return;
}

function __ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwl($this, $__s, $__iob, $__fl, $__v) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__iob = $__iob | 0;
 $__fl = $__fl | 0;
 $__v = $__v | 0;
 var $2 = 0, $4 = 0, $5 = 0, $__fmt = 0, $__fmtflags_$i = 0, $__oe = 0, $__op = 0, $add$ptr7 = 0, $add3 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $and$lobit = 0, $call11 = 0, $call4 = 0, $call8 = 0, $vla = 0, $vla$alloca_mul = 0, $vla10 = 0, $vla10$alloca_mul = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $agg$tmp$byval_copy = sp;
 $__fmt = sp + 16 | 0;
 $__op = sp + 12 | 0;
 $__oe = sp + 4 | 0;
 $agg$tmp = sp + 8 | 0;
 HEAP8[$__fmt >> 0] = HEAP8[43072] | 0;
 HEAP8[$__fmt + 1 >> 0] = HEAP8[43073] | 0;
 HEAP8[$__fmt + 2 >> 0] = HEAP8[43074] | 0;
 HEAP8[$__fmt + 3 >> 0] = HEAP8[43075] | 0;
 HEAP8[$__fmt + 4 >> 0] = HEAP8[43076] | 0;
 HEAP8[$__fmt + 5 >> 0] = HEAP8[43077] | 0;
 $__fmtflags_$i = $__iob + 4 | 0;
 __ZNSt3__214__num_put_base12__format_intEPcPKcbj($__fmt + 1 | 0, 43078, 1, HEAP32[$__fmtflags_$i >> 2] | 0);
 $and$lobit = (HEAP32[$__fmtflags_$i >> 2] | 0) >>> 9 & 1;
 $add3 = $and$lobit + 13 | 0;
 $2 = _llvm_stacksave() | 0;
 $vla$alloca_mul = $add3;
 $vla = STACKTOP;
 STACKTOP = STACKTOP + ((1 * $vla$alloca_mul | 0) + 15 & -16) | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow((1 * $vla$alloca_mul | 0) + 15 & -16 | 0);
 $call4 = __ZNSt3__26__clocEv() | 0;
 HEAP32[$agg$tmp$byval_copy >> 2] = $__v;
 $add$ptr7 = $vla + (__ZNSt3__219__libcpp_snprintf_lEPcmP15__locale_structPKcz($vla, $add3, $call4, $__fmt, $agg$tmp$byval_copy) | 0) | 0;
 $call8 = __ZNSt3__214__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($vla, $add$ptr7, $__iob) | 0;
 $vla10$alloca_mul = ($and$lobit << 1 | 24) + -1 << 2;
 $vla10 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * $vla10$alloca_mul | 0) + 15 & -16) | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow((1 * $vla10$alloca_mul | 0) + 15 & -16 | 0);
 __ZNKSt3__28ios_base6getlocEv($agg$tmp$byval_copy, $__iob);
 __ZNSt3__29__num_putIwE21__widen_and_group_intEPcS2_S2_PwRS3_S4_RKNS_6localeE($vla, $call8, $add$ptr7, $vla10, $__op, $__oe, $agg$tmp$byval_copy);
 __ZNSt3__26localeD2Ev($agg$tmp$byval_copy);
 HEAP32[$agg$tmp >> 2] = HEAP32[$__s >> 2];
 $4 = HEAP32[$__op >> 2] | 0;
 $5 = HEAP32[$__oe >> 2] | 0;
 HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 $call11 = __ZNSt3__216__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$tmp$byval_copy, $vla10, $4, $5, $__iob, $__fl) | 0;
 _llvm_stackrestore($2 | 0);
 STACKTOP = sp;
 return $call11 | 0;
}

function __ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcl($this, $__s, $__iob, $__fl, $__v) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__iob = $__iob | 0;
 $__fl = $__fl | 0;
 $__v = $__v | 0;
 var $2 = 0, $4 = 0, $5 = 0, $__fmt = 0, $__fmtflags_$i = 0, $__oe = 0, $__op = 0, $add$ptr7 = 0, $add3 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $and$lobit = 0, $call11 = 0, $call4 = 0, $call8 = 0, $vla = 0, $vla$alloca_mul = 0, $vla10 = 0, $vla10$alloca_mul = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $agg$tmp$byval_copy = sp;
 $__fmt = sp + 16 | 0;
 $__op = sp + 12 | 0;
 $__oe = sp + 4 | 0;
 $agg$tmp = sp + 8 | 0;
 HEAP8[$__fmt >> 0] = HEAP8[43072] | 0;
 HEAP8[$__fmt + 1 >> 0] = HEAP8[43073] | 0;
 HEAP8[$__fmt + 2 >> 0] = HEAP8[43074] | 0;
 HEAP8[$__fmt + 3 >> 0] = HEAP8[43075] | 0;
 HEAP8[$__fmt + 4 >> 0] = HEAP8[43076] | 0;
 HEAP8[$__fmt + 5 >> 0] = HEAP8[43077] | 0;
 $__fmtflags_$i = $__iob + 4 | 0;
 __ZNSt3__214__num_put_base12__format_intEPcPKcbj($__fmt + 1 | 0, 43078, 1, HEAP32[$__fmtflags_$i >> 2] | 0);
 $and$lobit = (HEAP32[$__fmtflags_$i >> 2] | 0) >>> 9 & 1;
 $add3 = $and$lobit + 13 | 0;
 $2 = _llvm_stacksave() | 0;
 $vla$alloca_mul = $add3;
 $vla = STACKTOP;
 STACKTOP = STACKTOP + ((1 * $vla$alloca_mul | 0) + 15 & -16) | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow((1 * $vla$alloca_mul | 0) + 15 & -16 | 0);
 $call4 = __ZNSt3__26__clocEv() | 0;
 HEAP32[$agg$tmp$byval_copy >> 2] = $__v;
 $add$ptr7 = $vla + (__ZNSt3__219__libcpp_snprintf_lEPcmP15__locale_structPKcz($vla, $add3, $call4, $__fmt, $agg$tmp$byval_copy) | 0) | 0;
 $call8 = __ZNSt3__214__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($vla, $add$ptr7, $__iob) | 0;
 $vla10$alloca_mul = ($and$lobit << 1 | 24) + -1 | 0;
 $vla10 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * $vla10$alloca_mul | 0) + 15 & -16) | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow((1 * $vla10$alloca_mul | 0) + 15 & -16 | 0);
 __ZNKSt3__28ios_base6getlocEv($agg$tmp$byval_copy, $__iob);
 __ZNSt3__29__num_putIcE21__widen_and_group_intEPcS2_S2_S2_RS2_S3_RKNS_6localeE($vla, $call8, $add$ptr7, $vla10, $__op, $__oe, $agg$tmp$byval_copy);
 __ZNSt3__26localeD2Ev($agg$tmp$byval_copy);
 HEAP32[$agg$tmp >> 2] = HEAP32[$__s >> 2];
 $4 = HEAP32[$__op >> 2] | 0;
 $5 = HEAP32[$__oe >> 2] | 0;
 HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 $call11 = __ZNSt3__216__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$tmp$byval_copy, $vla10, $4, $5, $__iob, $__fl) | 0;
 _llvm_stackrestore($2 | 0);
 STACKTOP = sp;
 return $call11 | 0;
}

function __ZN4tson8PropertyaSEOS0_($this, $0) {
 $this = $this | 0;
 $0 = $0 | 0;
 var $12 = 0, $13 = 0, $3 = 0, $6 = 0, $7 = 0, $8 = 0, $__cap_$i$i$i$i$i = 0, $__size_$i1$i$i$i$i = 0, $__tmp$i$i = 0, $m_name = 0, $m_name3 = 0, $m_value = 0, $m_value4 = 0, $ref$tmp$i = 0, $tobool16$i$i = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $__tmp$i$i = sp + 16 | 0;
 $ref$tmp$i = sp;
 HEAP8[$this >> 0] = HEAP8[$0 >> 0] | 0;
 $m_name = $this + 4 | 0;
 $m_name3 = $0 + 4 | 0;
 $__size_$i1$i$i$i$i = $m_name + 11 | 0;
 if ((HEAP8[$__size_$i1$i$i$i$i >> 0] | 0) < 0) {
  $3 = HEAP32[$m_name >> 2] | 0;
  HEAP8[$__tmp$i$i >> 0] = 0;
  __ZNSt3__211char_traitsIcE6assignERcRKc($3, $__tmp$i$i);
  HEAP32[$this + 8 >> 2] = 0;
  if ((HEAP8[$__size_$i1$i$i$i$i >> 0] | 0) < 0) {
   $__cap_$i$i$i$i$i = $this + 12 | 0;
   __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm(HEAP32[$m_name >> 2] | 0, HEAP32[$__cap_$i$i$i$i$i >> 2] & 2147483647);
   HEAP32[$__cap_$i$i$i$i$i >> 2] = 0;
  }
 } else {
  HEAP8[$__tmp$i$i >> 0] = 0;
  __ZNSt3__211char_traitsIcE6assignERcRKc($m_name, $__tmp$i$i);
  HEAP8[$__size_$i1$i$i$i$i >> 0] = 0;
 };
 HEAP32[$m_name >> 2] = HEAP32[$m_name3 >> 2];
 HEAP32[$m_name + 4 >> 2] = HEAP32[$m_name3 + 4 >> 2];
 HEAP32[$m_name + 8 >> 2] = HEAP32[$m_name3 + 8 >> 2];
 HEAP32[$m_name3 >> 2] = 0;
 HEAP32[$m_name3 + 4 >> 2] = 0;
 HEAP32[$m_name3 + 8 >> 2] = 0;
 $m_value = $this + 16 | 0;
 $m_value4 = $0 + 16 | 0;
 HEAP32[$ref$tmp$i >> 2] = 0;
 __ZNSt3__23any8_StorageC2Ev($ref$tmp$i + 4 | 0);
 $6 = HEAP32[$m_value4 >> 2] | 0;
 if ($6 | 0) FUNCTION_TABLE_iiiiii[$6 & 31](2, $m_value4, $ref$tmp$i, 0, 0) | 0;
 do if (($ref$tmp$i | 0) != ($m_value | 0)) {
  $7 = HEAP32[$ref$tmp$i >> 2] | 0;
  $8 = HEAP32[$m_value >> 2] | 0;
  $tobool16$i$i = ($8 | 0) == 0;
  if (!$7) {
   if ($tobool16$i$i) break;
   FUNCTION_TABLE_iiiiii[$8 & 31](2, $m_value, $ref$tmp$i, 0, 0) | 0;
   break;
  }
  if ($tobool16$i$i) {
   FUNCTION_TABLE_iiiiii[$7 & 31](2, $ref$tmp$i, $m_value, 0, 0) | 0;
   break;
  }
  HEAP32[$__tmp$i$i >> 2] = 0;
  __ZNSt3__23any8_StorageC2Ev($__tmp$i$i + 4 | 0);
  FUNCTION_TABLE_iiiiii[HEAP32[$m_value >> 2] & 31](2, $m_value, $__tmp$i$i, 0, 0) | 0;
  FUNCTION_TABLE_iiiiii[HEAP32[$ref$tmp$i >> 2] & 31](2, $ref$tmp$i, $m_value, 0, 0) | 0;
  FUNCTION_TABLE_iiiiii[HEAP32[$__tmp$i$i >> 2] & 31](2, $__tmp$i$i, $ref$tmp$i, 0, 0) | 0;
  $12 = HEAP32[$__tmp$i$i >> 2] | 0;
  if ($12 | 0) FUNCTION_TABLE_iiiiii[$12 & 31](0, $__tmp$i$i, 0, 0, 0) | 0;
 } while (0);
 $13 = HEAP32[$ref$tmp$i >> 2] | 0;
 if ($13 | 0) FUNCTION_TABLE_iiiiii[$13 & 31](0, $ref$tmp$i, 0, 0, 0) | 0;
 STACKTOP = sp;
 return $this | 0;
}

function __ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwm($this, $__s, $__iob, $__fl, $__v) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__iob = $__iob | 0;
 $__fl = $__fl | 0;
 $__v = $__v | 0;
 var $2 = 0, $4 = 0, $5 = 0, $__fmt = 0, $__fmtflags_$i = 0, $__oe = 0, $__op = 0, $add$ptr7 = 0, $add3 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $and$lobit = 0, $call11 = 0, $call4 = 0, $call8 = 0, $vla = 0, $vla$alloca_mul = 0, $vla10 = 0, $vla10$alloca_mul = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $agg$tmp$byval_copy = sp;
 $__fmt = sp + 16 | 0;
 $__op = sp + 12 | 0;
 $__oe = sp + 4 | 0;
 $agg$tmp = sp + 8 | 0;
 HEAP8[$__fmt >> 0] = HEAP8[43072] | 0;
 HEAP8[$__fmt + 1 >> 0] = HEAP8[43073] | 0;
 HEAP8[$__fmt + 2 >> 0] = HEAP8[43074] | 0;
 HEAP8[$__fmt + 3 >> 0] = HEAP8[43075] | 0;
 HEAP8[$__fmt + 4 >> 0] = HEAP8[43076] | 0;
 HEAP8[$__fmt + 5 >> 0] = HEAP8[43077] | 0;
 $__fmtflags_$i = $__iob + 4 | 0;
 __ZNSt3__214__num_put_base12__format_intEPcPKcbj($__fmt + 1 | 0, 43078, 0, HEAP32[$__fmtflags_$i >> 2] | 0);
 $and$lobit = (HEAP32[$__fmtflags_$i >> 2] | 0) >>> 9 & 1;
 $add3 = $and$lobit | 12;
 $2 = _llvm_stacksave() | 0;
 $vla$alloca_mul = $add3;
 $vla = STACKTOP;
 STACKTOP = STACKTOP + ((1 * $vla$alloca_mul | 0) + 15 & -16) | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow((1 * $vla$alloca_mul | 0) + 15 & -16 | 0);
 $call4 = __ZNSt3__26__clocEv() | 0;
 HEAP32[$agg$tmp$byval_copy >> 2] = $__v;
 $add$ptr7 = $vla + (__ZNSt3__219__libcpp_snprintf_lEPcmP15__locale_structPKcz($vla, $add3, $call4, $__fmt, $agg$tmp$byval_copy) | 0) | 0;
 $call8 = __ZNSt3__214__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($vla, $add$ptr7, $__iob) | 0;
 $vla10$alloca_mul = ($and$lobit << 1 | 21) << 2;
 $vla10 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * $vla10$alloca_mul | 0) + 15 & -16) | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow((1 * $vla10$alloca_mul | 0) + 15 & -16 | 0);
 __ZNKSt3__28ios_base6getlocEv($agg$tmp$byval_copy, $__iob);
 __ZNSt3__29__num_putIwE21__widen_and_group_intEPcS2_S2_PwRS3_S4_RKNS_6localeE($vla, $call8, $add$ptr7, $vla10, $__op, $__oe, $agg$tmp$byval_copy);
 __ZNSt3__26localeD2Ev($agg$tmp$byval_copy);
 HEAP32[$agg$tmp >> 2] = HEAP32[$__s >> 2];
 $4 = HEAP32[$__op >> 2] | 0;
 $5 = HEAP32[$__oe >> 2] | 0;
 HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 $call11 = __ZNSt3__216__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$tmp$byval_copy, $vla10, $4, $5, $__iob, $__fl) | 0;
 _llvm_stackrestore($2 | 0);
 STACKTOP = sp;
 return $call11 | 0;
}

function __ZNSt3__26__treeINS_12__value_typeINS_5tupleIJiiEEEPN4tson4TileEEENS_19__map_value_compareIS3_S7_NS_4lessIS3_EELb1EEENS_9allocatorIS7_EEE12__find_equalIS3_EERPNS_16__tree_node_baseIPvEERPNS_15__tree_end_nodeISJ_EERKT_($this, $__parent, $__v) {
 $this = $this | 0;
 $__parent = $__parent | 0;
 $__v = $__v | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $5 = 0, $6 = 0, $7 = 0, $__cc$i$i19 = 0, $__nd$0 = 0, $__nd$1$in = 0, $__nd_ptr$0 = 0, $__nd_ptr$1 = 0, $__value_$i$i$i$i = 0, $__value_$i$i$i$i$i$i$i26 = 0, $call$i$i$i = 0, $call$i$i$i20 = 0, $call2 = 0, $retval$0 = 0, label = 0;
 label = 0;
 $__value_$i$i$i$i = $this + 4 | 0;
 $0 = HEAP32[$__value_$i$i$i$i >> 2] | 0;
 $call2 = __ZNKSt3__26__treeINS_12__value_typeINS_5tupleIJiiEEEPN4tson4TileEEENS_19__map_value_compareIS3_S7_NS_4lessIS3_EELb1EEENS_9allocatorIS7_EEE10__root_ptrEv($this) | 0;
 do if (!$0) {
  HEAP32[$__parent >> 2] = $__value_$i$i$i$i;
  $retval$0 = $__value_$i$i$i$i;
 } else {
  $__value_$i$i$i$i$i$i$i26 = $__v + 4 | 0;
  $__nd$0 = $0;
  $__nd_ptr$0 = $call2;
  L4 : while (1) {
   $__cc$i$i19 = $__nd$0 + 16 | 0;
   $call$i$i$i20 = __ZNSt3__29__launderIKNS_4pairIKNS_5tupleIJiiEEEPN4tson4TileEEEEEPT_SB_($__cc$i$i19) | 0;
   $1 = HEAP32[$__v >> 2] | 0;
   $2 = HEAP32[$call$i$i$i20 >> 2] | 0;
   do if (($1 | 0) < ($2 | 0)) label = 6; else {
    if (($2 | 0) >= ($1 | 0)) if ((HEAP32[$__value_$i$i$i$i$i$i$i26 >> 2] | 0) < (HEAP32[$call$i$i$i20 + 4 >> 2] | 0)) {
     label = 6;
     break;
    }
    $call$i$i$i = __ZNSt3__29__launderIKNS_4pairIKNS_5tupleIJiiEEEPN4tson4TileEEEEEPT_SB_($__cc$i$i19) | 0;
    $6 = HEAP32[$call$i$i$i >> 2] | 0;
    $7 = HEAP32[$__v >> 2] | 0;
    if (($6 | 0) >= ($7 | 0)) {
     if (($7 | 0) < ($6 | 0)) {
      label = 13;
      break L4;
     }
     if ((HEAP32[$call$i$i$i + 4 >> 2] | 0) >= (HEAP32[$__value_$i$i$i$i$i$i$i26 >> 2] | 0)) {
      label = 13;
      break L4;
     }
    }
    $10 = $__nd$0 + 4 | 0;
    $11 = HEAP32[$10 >> 2] | 0;
    if (!$11) {
     label = 12;
     break L4;
    } else {
     $__nd$1$in = $11;
     $__nd_ptr$1 = $10;
    }
   } while (0);
   if ((label | 0) == 6) {
    label = 0;
    $5 = HEAP32[$__nd$0 >> 2] | 0;
    if (!$5) {
     label = 7;
     break;
    } else {
     $__nd$1$in = $5;
     $__nd_ptr$1 = $__nd$0;
    }
   }
   $__nd$0 = $__nd$1$in;
   $__nd_ptr$0 = $__nd_ptr$1;
  }
  if ((label | 0) == 7) {
   HEAP32[$__parent >> 2] = $__nd$0;
   $retval$0 = $__nd$0;
   break;
  } else if ((label | 0) == 12) {
   HEAP32[$__parent >> 2] = $__nd$0;
   $retval$0 = $10;
   break;
  } else if ((label | 0) == 13) {
   HEAP32[$__parent >> 2] = $__nd$0;
   $retval$0 = $__nd_ptr$0;
   break;
  }
 } while (0);
 return $retval$0 | 0;
}

function __ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcm($this, $__s, $__iob, $__fl, $__v) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__iob = $__iob | 0;
 $__fl = $__fl | 0;
 $__v = $__v | 0;
 var $2 = 0, $4 = 0, $5 = 0, $__fmt = 0, $__fmtflags_$i = 0, $__oe = 0, $__op = 0, $add$ptr7 = 0, $add3 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $and$lobit = 0, $call11 = 0, $call4 = 0, $call8 = 0, $vla = 0, $vla$alloca_mul = 0, $vla10 = 0, $vla10$alloca_mul = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $agg$tmp$byval_copy = sp;
 $__fmt = sp + 16 | 0;
 $__op = sp + 12 | 0;
 $__oe = sp + 4 | 0;
 $agg$tmp = sp + 8 | 0;
 HEAP8[$__fmt >> 0] = HEAP8[43072] | 0;
 HEAP8[$__fmt + 1 >> 0] = HEAP8[43073] | 0;
 HEAP8[$__fmt + 2 >> 0] = HEAP8[43074] | 0;
 HEAP8[$__fmt + 3 >> 0] = HEAP8[43075] | 0;
 HEAP8[$__fmt + 4 >> 0] = HEAP8[43076] | 0;
 HEAP8[$__fmt + 5 >> 0] = HEAP8[43077] | 0;
 $__fmtflags_$i = $__iob + 4 | 0;
 __ZNSt3__214__num_put_base12__format_intEPcPKcbj($__fmt + 1 | 0, 43078, 0, HEAP32[$__fmtflags_$i >> 2] | 0);
 $and$lobit = (HEAP32[$__fmtflags_$i >> 2] | 0) >>> 9 & 1;
 $add3 = $and$lobit | 12;
 $2 = _llvm_stacksave() | 0;
 $vla$alloca_mul = $add3;
 $vla = STACKTOP;
 STACKTOP = STACKTOP + ((1 * $vla$alloca_mul | 0) + 15 & -16) | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow((1 * $vla$alloca_mul | 0) + 15 & -16 | 0);
 $call4 = __ZNSt3__26__clocEv() | 0;
 HEAP32[$agg$tmp$byval_copy >> 2] = $__v;
 $add$ptr7 = $vla + (__ZNSt3__219__libcpp_snprintf_lEPcmP15__locale_structPKcz($vla, $add3, $call4, $__fmt, $agg$tmp$byval_copy) | 0) | 0;
 $call8 = __ZNSt3__214__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($vla, $add$ptr7, $__iob) | 0;
 $vla10$alloca_mul = $and$lobit << 1 | 21;
 $vla10 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * $vla10$alloca_mul | 0) + 15 & -16) | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow((1 * $vla10$alloca_mul | 0) + 15 & -16 | 0);
 __ZNKSt3__28ios_base6getlocEv($agg$tmp$byval_copy, $__iob);
 __ZNSt3__29__num_putIcE21__widen_and_group_intEPcS2_S2_S2_RS2_S3_RKNS_6localeE($vla, $call8, $add$ptr7, $vla10, $__op, $__oe, $agg$tmp$byval_copy);
 __ZNSt3__26localeD2Ev($agg$tmp$byval_copy);
 HEAP32[$agg$tmp >> 2] = HEAP32[$__s >> 2];
 $4 = HEAP32[$__op >> 2] | 0;
 $5 = HEAP32[$__oe >> 2] | 0;
 HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 $call11 = __ZNSt3__216__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$tmp$byval_copy, $vla10, $4, $5, $__iob, $__fl) | 0;
 _llvm_stackrestore($2 | 0);
 STACKTOP = sp;
 return $call11 | 0;
}

function _SetStereoView($eye, $matProjection, $matModelView) {
 $eye = $eye | 0;
 $matProjection = $matProjection | 0;
 $matModelView = $matModelView | 0;
 var $arrayidx = 0, $div = 0, $eye$addr = 0, $eyeModelView = 0, $eyeProjection = 0, $eyeProjection$byval_copy = 0, $matModelView$byval_copy = 0, $tmp = 0, dest = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 336 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(336);
 $eyeProjection$byval_copy = sp + 264 | 0;
 $matModelView$byval_copy = sp + 128 | 0;
 $eye$addr = sp + 256 | 0;
 $eyeProjection = sp + 192 | 0;
 $eyeModelView = sp + 64 | 0;
 $tmp = sp;
 HEAP32[$eye$addr >> 2] = $eye;
 dest = $eyeProjection;
 src = $matProjection;
 stop = dest + 64 | 0;
 do {
  HEAP32[dest >> 2] = HEAP32[src >> 2];
  dest = dest + 4 | 0;
  src = src + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $eyeModelView;
 src = $matModelView;
 stop = dest + 64 | 0;
 do {
  HEAP32[dest >> 2] = HEAP32[src >> 2];
  dest = dest + 4 | 0;
  src = src + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 $div = (Math_imul(HEAP32[$eye$addr >> 2] | 0, HEAP32[14852] | 0) | 0) / 2 | 0;
 _rlViewport($div, 0, (HEAP32[14852] | 0) / 2 | 0, HEAP32[14853] | 0);
 $arrayidx = 59552 + (HEAP32[$eye$addr >> 2] << 6) | 0;
 dest = $matModelView$byval_copy;
 src = $matModelView;
 stop = dest + 64 | 0;
 do {
  HEAP32[dest >> 2] = HEAP32[src >> 2];
  dest = dest + 4 | 0;
  src = src + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $eyeProjection$byval_copy;
 src = $arrayidx;
 stop = dest + 64 | 0;
 do {
  HEAP32[dest >> 2] = HEAP32[src >> 2];
  dest = dest + 4 | 0;
  src = src + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 _MatrixMultiply($tmp, $matModelView$byval_copy, $eyeProjection$byval_copy);
 dest = $eyeModelView;
 src = $tmp;
 stop = dest + 64 | 0;
 do {
  HEAP32[dest >> 2] = HEAP32[src >> 2];
  dest = dest + 4 | 0;
  src = src + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $eyeProjection;
 src = 59424 + (HEAP32[$eye$addr >> 2] << 6) | 0;
 stop = dest + 64 | 0;
 do {
  HEAP32[dest >> 2] = HEAP32[src >> 2];
  dest = dest + 4 | 0;
  src = src + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $eyeProjection$byval_copy;
 src = $eyeModelView;
 stop = dest + 64 | 0;
 do {
  HEAP32[dest >> 2] = HEAP32[src >> 2];
  dest = dest + 4 | 0;
  src = src + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 _SetMatrixModelview($eyeProjection$byval_copy);
 dest = $eyeProjection$byval_copy;
 src = $eyeProjection;
 stop = dest + 64 | 0;
 do {
  HEAP32[dest >> 2] = HEAP32[src >> 2];
  dest = dest + 4 | 0;
  src = src + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 _SetMatrixProjection($eyeProjection$byval_copy);
 STACKTOP = sp;
 return;
}

function _LoadShaderProgram($vShaderId, $fShaderId) {
 $vShaderId = $vShaderId | 0;
 $fShaderId = $fShaderId | 0;
 var $13 = 0, $15 = 0, $21 = 0, $fShaderId$addr = 0, $length = 0, $maxLength = 0, $program = 0, $saved_stack = 0, $success = 0, $vShaderId$addr = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer4 = 0, $vla = 0, $vla$alloca_mul = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 $vararg_buffer4 = sp + 16 | 0;
 $vararg_buffer1 = sp + 8 | 0;
 $vararg_buffer = sp;
 $vShaderId$addr = sp + 44 | 0;
 $fShaderId$addr = sp + 40 | 0;
 $program = sp + 36 | 0;
 $success = sp + 32 | 0;
 $maxLength = sp + 28 | 0;
 $length = sp + 24 | 0;
 $saved_stack = sp + 20 | 0;
 HEAP32[$vShaderId$addr >> 2] = $vShaderId;
 HEAP32[$fShaderId$addr >> 2] = $fShaderId;
 HEAP32[$program >> 2] = 0;
 HEAP32[$success >> 2] = 0;
 HEAP32[$program >> 2] = _glCreateProgram() | 0;
 _glAttachShader(HEAP32[$program >> 2] | 0, HEAP32[$vShaderId$addr >> 2] | 0);
 _glAttachShader(HEAP32[$program >> 2] | 0, HEAP32[$fShaderId$addr >> 2] | 0);
 _glBindAttribLocation(HEAP32[$program >> 2] | 0, 0, 30981);
 _glBindAttribLocation(HEAP32[$program >> 2] | 0, 1, 30996);
 _glBindAttribLocation(HEAP32[$program >> 2] | 0, 2, 31095);
 _glBindAttribLocation(HEAP32[$program >> 2] | 0, 3, 31011);
 _glBindAttribLocation(HEAP32[$program >> 2] | 0, 4, 31108);
 _glBindAttribLocation(HEAP32[$program >> 2] | 0, 5, 31122);
 _glLinkProgram(HEAP32[$program >> 2] | 0);
 _glGetProgramiv(HEAP32[$program >> 2] | 0, 35714, $success | 0);
 $13 = HEAP32[$program >> 2] | 0;
 if (!(HEAP32[$success >> 2] | 0)) {
  HEAP32[$vararg_buffer >> 2] = $13;
  _TraceLog(4, 31138, $vararg_buffer);
  HEAP32[$maxLength >> 2] = 0;
  _glGetProgramiv(HEAP32[$program >> 2] | 0, 35716, $maxLength | 0);
  $15 = HEAP32[$maxLength >> 2] | 0;
  HEAP32[$saved_stack >> 2] = _llvm_stacksave() | 0;
  $vla$alloca_mul = $15;
  $vla = STACKTOP;
  STACKTOP = STACKTOP + ((1 * $vla$alloca_mul | 0) + 15 & -16) | 0;
  if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow((1 * $vla$alloca_mul | 0) + 15 & -16 | 0);
  _glGetProgramInfoLog(HEAP32[$program >> 2] | 0, HEAP32[$maxLength >> 2] | 0, $length | 0, $vla | 0);
  HEAP32[$vararg_buffer1 >> 2] = $vla;
  _TraceLog(3, 31184, $vararg_buffer1);
  _glDeleteProgram(HEAP32[$program >> 2] | 0);
  HEAP32[$program >> 2] = 0;
  _llvm_stackrestore(HEAP32[$saved_stack >> 2] | 0);
  $21 = HEAP32[$program >> 2] | 0;
  STACKTOP = sp;
  return $21 | 0;
 } else {
  HEAP32[$vararg_buffer4 >> 2] = $13;
  _TraceLog(3, 31187, $vararg_buffer4);
  $21 = HEAP32[$program >> 2] | 0;
  STACKTOP = sp;
  return $21 | 0;
 }
 return 0;
}

function __ZNSt3__210__stdinbufIwE9pbackfailEj($this, $__c) {
 $this = $this | 0;
 $__c = $__c | 0;
 var $1 = 0, $3 = 0, $7 = 0, $__ci = 0, $__enxt = 0, $__extbuf = 0, $__file_ = 0, $__inxt = 0, $__last_consumed_12 = 0, $__last_consumed_33$pre$phiZ2D = 0, $__last_consumed_is_next_ = 0, $call2 = 0, $cleanup$dest$slot$0 = 0, $incdec$ptr = 0, $retval$0 = 0, $retval$1 = 0, $tobool = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $__extbuf = sp + 16 | 0;
 $__enxt = sp + 8 | 0;
 $__ci = sp + 4 | 0;
 $__inxt = sp;
 $call2 = __ZNSt3__211char_traitsIwE11eq_int_typeEjj($__c, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0;
 $__last_consumed_is_next_ = $this + 52 | 0;
 $tobool = (HEAP8[$__last_consumed_is_next_ >> 0] | 0) != 0;
 do if ($call2) if ($tobool) $retval$1 = $__c; else {
  $1 = HEAP32[$this + 48 >> 2] | 0;
  HEAP8[$__last_consumed_is_next_ >> 0] = ((__ZNSt3__211char_traitsIwE11eq_int_typeEjj($1, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) ^ 1) & 1;
  $retval$1 = $1;
 } else {
  if ($tobool) {
   $__last_consumed_12 = $this + 48 | 0;
   HEAP32[$__ci >> 2] = __ZNSt3__211char_traitsIwE12to_char_typeEj(HEAP32[$__last_consumed_12 >> 2] | 0) | 0;
   $3 = HEAP32[$this + 36 >> 2] | 0;
   switch (FUNCTION_TABLE_iiiiiiiii[HEAP32[(HEAP32[$3 >> 2] | 0) + 12 >> 2] & 15]($3, HEAP32[$this + 40 >> 2] | 0, $__ci, $__ci + 4 | 0, $__inxt, $__extbuf, $__extbuf + 8 | 0, $__enxt) | 0) {
   case 1:
   case 2:
    {
     label = 11;
     break;
    }
   case 3:
    {
     HEAP8[$__extbuf >> 0] = HEAP32[$__last_consumed_12 >> 2];
     HEAP32[$__enxt >> 2] = $__extbuf + 1;
     label = 8;
     break;
    }
   default:
    label = 8;
   }
   L9 : do if ((label | 0) == 8) {
    $__file_ = $this + 32 | 0;
    while (1) {
     $7 = HEAP32[$__enxt >> 2] | 0;
     if ($7 >>> 0 <= $__extbuf >>> 0) {
      $cleanup$dest$slot$0 = 1;
      $retval$0 = 0;
      break L9;
     }
     $incdec$ptr = $7 + -1 | 0;
     HEAP32[$__enxt >> 2] = $incdec$ptr;
     if ((_ungetc(HEAP8[$incdec$ptr >> 0] | 0, HEAP32[$__file_ >> 2] | 0) | 0) == -1) {
      label = 11;
      break;
     }
    }
   } while (0);
   if ((label | 0) == 11) {
    $cleanup$dest$slot$0 = 0;
    $retval$0 = __ZNSt3__211char_traitsIwE3eofEv() | 0;
   }
   if ($cleanup$dest$slot$0) $__last_consumed_33$pre$phiZ2D = $__last_consumed_12; else {
    $retval$1 = $retval$0;
    break;
   }
  } else $__last_consumed_33$pre$phiZ2D = $this + 48 | 0;
  HEAP32[$__last_consumed_33$pre$phiZ2D >> 2] = $__c;
  HEAP8[$__last_consumed_is_next_ >> 0] = 1;
  $retval$1 = $__c;
 } while (0);
 STACKTOP = sp;
 return $retval$1 | 0;
}

function __ZNSt3__210__stdinbufIcE9pbackfailEi($this, $__c) {
 $this = $this | 0;
 $__c = $__c | 0;
 var $1 = 0, $3 = 0, $7 = 0, $__ci = 0, $__enxt = 0, $__extbuf = 0, $__file_ = 0, $__inxt = 0, $__last_consumed_12 = 0, $__last_consumed_33$pre$phiZ2D = 0, $__last_consumed_is_next_ = 0, $call2 = 0, $cleanup$dest$slot$0 = 0, $incdec$ptr = 0, $retval$0 = 0, $retval$1 = 0, $tobool = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $__extbuf = sp + 16 | 0;
 $__enxt = sp + 4 | 0;
 $__ci = sp + 8 | 0;
 $__inxt = sp;
 $call2 = __ZNSt3__211char_traitsIcE11eq_int_typeEii($__c, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0;
 $__last_consumed_is_next_ = $this + 52 | 0;
 $tobool = (HEAP8[$__last_consumed_is_next_ >> 0] | 0) != 0;
 do if ($call2) if ($tobool) $retval$1 = $__c; else {
  $1 = HEAP32[$this + 48 >> 2] | 0;
  HEAP8[$__last_consumed_is_next_ >> 0] = ((__ZNSt3__211char_traitsIcE11eq_int_typeEii($1, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) ^ 1) & 1;
  $retval$1 = $1;
 } else {
  if ($tobool) {
   $__last_consumed_12 = $this + 48 | 0;
   HEAP8[$__ci >> 0] = __ZNSt3__211char_traitsIcE12to_char_typeEi(HEAP32[$__last_consumed_12 >> 2] | 0) | 0;
   $3 = HEAP32[$this + 36 >> 2] | 0;
   switch (FUNCTION_TABLE_iiiiiiiii[HEAP32[(HEAP32[$3 >> 2] | 0) + 12 >> 2] & 15]($3, HEAP32[$this + 40 >> 2] | 0, $__ci, $__ci + 1 | 0, $__inxt, $__extbuf, $__extbuf + 8 | 0, $__enxt) | 0) {
   case 1:
   case 2:
    {
     label = 11;
     break;
    }
   case 3:
    {
     HEAP8[$__extbuf >> 0] = HEAP32[$__last_consumed_12 >> 2];
     HEAP32[$__enxt >> 2] = $__extbuf + 1;
     label = 8;
     break;
    }
   default:
    label = 8;
   }
   L9 : do if ((label | 0) == 8) {
    $__file_ = $this + 32 | 0;
    while (1) {
     $7 = HEAP32[$__enxt >> 2] | 0;
     if ($7 >>> 0 <= $__extbuf >>> 0) {
      $cleanup$dest$slot$0 = 1;
      $retval$0 = 0;
      break L9;
     }
     $incdec$ptr = $7 + -1 | 0;
     HEAP32[$__enxt >> 2] = $incdec$ptr;
     if ((_ungetc(HEAP8[$incdec$ptr >> 0] | 0, HEAP32[$__file_ >> 2] | 0) | 0) == -1) {
      label = 11;
      break;
     }
    }
   } while (0);
   if ((label | 0) == 11) {
    $cleanup$dest$slot$0 = 0;
    $retval$0 = __ZNSt3__211char_traitsIcE3eofEv() | 0;
   }
   if ($cleanup$dest$slot$0) $__last_consumed_33$pre$phiZ2D = $__last_consumed_12; else {
    $retval$1 = $retval$0;
    break;
   }
  } else $__last_consumed_33$pre$phiZ2D = $this + 48 | 0;
  HEAP32[$__last_consumed_33$pre$phiZ2D >> 2] = $__c;
  HEAP8[$__last_consumed_is_next_ >> 0] = 1;
  $retval$1 = $__c;
 } while (0);
 STACKTOP = sp;
 return $retval$1 | 0;
}

function ___dynamic_cast($static_ptr, $static_type, $dst_type, $src2dst_offset) {
 $static_ptr = $static_ptr | 0;
 $static_type = $static_type | 0;
 $dst_type = $dst_type | 0;
 $src2dst_offset = $src2dst_offset | 0;
 var $0 = 0, $2 = 0, $add$ptr = 0, $dst_ptr$0 = 0, $dst_ptr_leading_to_static_ptr = 0, $dst_ptr_not_leading_to_static_ptr = 0, $info = 0, $number_to_dst_ptr = 0, $path_dst_ptr_to_static_ptr = 0, $path_dynamic_ptr_to_dst_ptr = 0, $path_dynamic_ptr_to_static_ptr = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64);
 $info = sp;
 $0 = HEAP32[$static_ptr >> 2] | 0;
 $add$ptr = $static_ptr + (HEAP32[$0 + -8 >> 2] | 0) | 0;
 $2 = HEAP32[$0 + -4 >> 2] | 0;
 HEAP32[$info >> 2] = $dst_type;
 HEAP32[$info + 4 >> 2] = $static_ptr;
 HEAP32[$info + 8 >> 2] = $static_type;
 HEAP32[$info + 12 >> 2] = $src2dst_offset;
 $dst_ptr_leading_to_static_ptr = $info + 16 | 0;
 $dst_ptr_not_leading_to_static_ptr = $info + 20 | 0;
 $path_dst_ptr_to_static_ptr = $info + 24 | 0;
 $path_dynamic_ptr_to_static_ptr = $info + 28 | 0;
 $path_dynamic_ptr_to_dst_ptr = $info + 32 | 0;
 $number_to_dst_ptr = $info + 40 | 0;
 dest = $dst_ptr_leading_to_static_ptr;
 stop = dest + 36 | 0;
 do {
  HEAP32[dest >> 2] = 0;
  dest = dest + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$dst_ptr_leading_to_static_ptr + 36 >> 1] = 0;
 HEAP8[$dst_ptr_leading_to_static_ptr + 38 >> 0] = 0;
 L1 : do if (__ZL8is_equalPKSt9type_infoS1_b($2, $dst_type, 0) | 0) {
  HEAP32[$info + 48 >> 2] = 1;
  FUNCTION_TABLE_viiiiii[HEAP32[(HEAP32[$2 >> 2] | 0) + 20 >> 2] & 15]($2, $info, $add$ptr, $add$ptr, 1, 0);
  $dst_ptr$0 = (HEAP32[$path_dst_ptr_to_static_ptr >> 2] | 0) == 1 ? $add$ptr : 0;
 } else {
  FUNCTION_TABLE_viiiii[HEAP32[(HEAP32[$2 >> 2] | 0) + 24 >> 2] & 15]($2, $info, $add$ptr, 1, 0);
  switch (HEAP32[$info + 36 >> 2] | 0) {
  case 0:
   {
    $dst_ptr$0 = (HEAP32[$number_to_dst_ptr >> 2] | 0) == 1 & (HEAP32[$path_dynamic_ptr_to_static_ptr >> 2] | 0) == 1 & (HEAP32[$path_dynamic_ptr_to_dst_ptr >> 2] | 0) == 1 ? HEAP32[$dst_ptr_not_leading_to_static_ptr >> 2] | 0 : 0;
    break L1;
    break;
   }
  case 1:
   break;
  default:
   {
    $dst_ptr$0 = 0;
    break L1;
   }
  }
  if ((HEAP32[$path_dst_ptr_to_static_ptr >> 2] | 0) != 1) if (!((HEAP32[$number_to_dst_ptr >> 2] | 0) == 0 & (HEAP32[$path_dynamic_ptr_to_static_ptr >> 2] | 0) == 1 & (HEAP32[$path_dynamic_ptr_to_dst_ptr >> 2] | 0) == 1)) {
   $dst_ptr$0 = 0;
   break;
  }
  $dst_ptr$0 = HEAP32[$dst_ptr_leading_to_static_ptr >> 2] | 0;
 } while (0);
 STACKTOP = sp;
 return $dst_ptr$0 | 0;
}

function _rlVertex3f($x, $y, $z) {
 $x = Math_fround($x);
 $y = Math_fround($y);
 $z = Math_fround($z);
 var $11 = f0, $16 = f0, $6 = f0, $arrayidx25 = 0, $tmp = 0, $transformMatrix$byval_copy = 0, $vararg_buffer = 0, $vec = 0, $vec$byval_copy = 0, $vertexCount = 0, $x$addr = 0, $y$addr = 0, $z$addr = 0, dest = 0, sp = 0, src = 0, stop = 0, CSE$0 = 0, CSE$1 = 0, CSE$2 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(128);
 $transformMatrix$byval_copy = sp + 56 | 0;
 $vec$byval_copy = sp + 40 | 0;
 $vararg_buffer = sp;
 $x$addr = sp + 36 | 0;
 $y$addr = sp + 32 | 0;
 $z$addr = sp + 28 | 0;
 $vec = sp + 16 | 0;
 $tmp = sp + 4 | 0;
 HEAPF32[$x$addr >> 2] = $x;
 HEAPF32[$y$addr >> 2] = $y;
 HEAPF32[$z$addr >> 2] = $z;
 HEAPF32[$vec >> 2] = Math_fround(HEAPF32[$x$addr >> 2]);
 HEAPF32[$vec + 4 >> 2] = Math_fround(HEAPF32[$y$addr >> 2]);
 HEAPF32[$vec + 8 >> 2] = Math_fround(HEAPF32[$z$addr >> 2]);
 if (HEAP8[62143] & 1) {
  HEAP32[$vec$byval_copy >> 2] = HEAP32[$vec >> 2];
  HEAP32[$vec$byval_copy + 4 >> 2] = HEAP32[$vec + 4 >> 2];
  HEAP32[$vec$byval_copy + 8 >> 2] = HEAP32[$vec + 8 >> 2];
  dest = $transformMatrix$byval_copy;
  src = 59316;
  stop = dest + 64 | 0;
  do {
   HEAP32[dest >> 2] = HEAP32[src >> 2];
   dest = dest + 4 | 0;
   src = src + 4 | 0;
  } while ((dest | 0) < (stop | 0));
  _Vector3Transform($tmp, $vec$byval_copy, $transformMatrix$byval_copy);
  HEAP32[$vec >> 2] = HEAP32[$tmp >> 2];
  HEAP32[$vec + 4 >> 2] = HEAP32[$tmp + 4 >> 2];
  HEAP32[$vec + 8 >> 2] = HEAP32[$tmp + 8 >> 2];
 }
 if ((HEAP32[47408 + ((HEAP32[14847] | 0) * 48 | 0) >> 2] | 0) < 8192) {
  $6 = Math_fround(HEAPF32[$vec >> 2]);
  CSE$0 = 47408 + ((HEAP32[14847] | 0) * 48 | 0) | 0;
  HEAPF32[(HEAP32[CSE$0 + 12 >> 2] | 0) + ((HEAP32[CSE$0 >> 2] | 0) * 3 << 2) >> 2] = $6;
  $11 = Math_fround(HEAPF32[$vec + 4 >> 2]);
  CSE$1 = 47408 + ((HEAP32[14847] | 0) * 48 | 0) | 0;
  HEAPF32[(HEAP32[CSE$1 + 12 >> 2] | 0) + (((HEAP32[CSE$1 >> 2] | 0) * 3 | 0) + 1 << 2) >> 2] = $11;
  $16 = Math_fround(HEAPF32[$vec + 8 >> 2]);
  CSE$2 = 47408 + ((HEAP32[14847] | 0) * 48 | 0) | 0;
  HEAPF32[(HEAP32[CSE$2 + 12 >> 2] | 0) + (((HEAP32[CSE$2 >> 2] | 0) * 3 | 0) + 2 << 2) >> 2] = $16;
  $arrayidx25 = 47408 + ((HEAP32[14847] | 0) * 48 | 0) | 0;
  HEAP32[$arrayidx25 >> 2] = (HEAP32[$arrayidx25 >> 2] | 0) + 1;
  $vertexCount = (HEAP32[14845] | 0) + ((HEAP32[14846] | 0) - 1 << 4) + 4 | 0;
  HEAP32[$vertexCount >> 2] = (HEAP32[$vertexCount >> 2] | 0) + 1;
  STACKTOP = sp;
  return;
 } else {
  _TraceLog(5, 28476, $vararg_buffer);
  STACKTOP = sp;
  return;
 }
}

function _PollInputEvents() {
 var $16 = 0, $arrayidx53 = 0, $axis = 0, $button = 0, $gamepadState = 0, $i = 0, $i17 = 0, $i4 = 0, $j = 0, $j60 = 0, $k = 0, $numGamepads = 0, $result = 0, sp = 0, CSE$0 = 0, CSE$1 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1488 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(1488);
 $i = sp + 1484 | 0;
 $i4 = sp + 1480 | 0;
 $numGamepads = sp + 1476 | 0;
 $i17 = sp + 1472 | 0;
 $k = sp + 1468 | 0;
 $gamepadState = sp;
 $result = sp + 1464 | 0;
 $j = sp + 1460 | 0;
 $button = sp + 1456 | 0;
 $j60 = sp + 1452 | 0;
 $axis = sp + 1448 | 0;
 _UpdateGestures();
 HEAP32[14986] = 0;
 _glfwGetCursorPos(HEAP32[14954] | 0, sp + 1440 | 0, sp + 1432 | 0);
 HEAP32[$i >> 2] = 0;
 while (1) {
  if ((HEAP32[$i >> 2] | 0) >= 512) break;
  CSE$0 = HEAP32[$i >> 2] | 0;
  HEAP8[48048 + CSE$0 >> 0] = HEAP8[47536 + CSE$0 >> 0] | 0;
  HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
 }
 HEAP32[$i4 >> 2] = 0;
 while (1) {
  if ((HEAP32[$i4 >> 2] | 0) >= 3) break;
  CSE$1 = HEAP32[$i4 >> 2] | 0;
  HEAP8[62161 + CSE$1 >> 0] = HEAP8[62158 + CSE$1 >> 0] | 0;
  HEAP32[$i4 >> 2] = (HEAP32[$i4 >> 2] | 0) + 1;
 }
 HEAP32[14985] = 0;
 HEAP32[$numGamepads >> 2] = 0;
 if (!(_emscripten_sample_gamepad_data() | 0)) HEAP32[$numGamepads >> 2] = _emscripten_get_num_gamepads() | 0;
 HEAP32[$i17 >> 2] = 0;
 while (1) {
  if (!((HEAP32[$i17 >> 2] | 0) < (HEAP32[$numGamepads >> 2] | 0) ? (HEAP32[$i17 >> 2] | 0) < 4 : 0)) break;
  HEAP32[$k >> 2] = 0;
  while (1) {
   $16 = HEAP32[$i17 >> 2] | 0;
   if ((HEAP32[$k >> 2] | 0) >= 32) break;
   HEAP32[$k >> 2] = (HEAP32[$k >> 2] | 0) + 1;
  }
  HEAP32[$result >> 2] = _emscripten_get_gamepad_status($16 | 0, $gamepadState | 0) | 0;
  if (!(HEAP32[$result >> 2] | 0)) {
   HEAP32[$j >> 2] = 0;
   while (1) {
    if (!((HEAP32[$j >> 2] | 0) < (HEAP32[$gamepadState + 12 >> 2] | 0) ? (HEAP32[$j >> 2] | 0) < 32 : 0)) break;
    HEAP32[$button >> 2] = _GetGamepadButton(HEAP32[$j >> 2] | 0) | 0;
    $arrayidx53 = 48560 + (HEAP32[$i17 >> 2] << 5) + (HEAP32[$button >> 2] | 0) | 0;
    if ((HEAP32[$gamepadState + 1040 + (HEAP32[$j >> 2] << 2) >> 2] | 0) == 1) HEAP8[$arrayidx53 >> 0] = 1; else HEAP8[$arrayidx53 >> 0] = 0;
    HEAP32[$j >> 2] = (HEAP32[$j >> 2] | 0) + 1;
   }
   HEAP32[$j60 >> 2] = 0;
   while (1) {
    if (!((HEAP32[$j60 >> 2] | 0) < (HEAP32[$gamepadState + 8 >> 2] | 0) ? (HEAP32[$j60 >> 2] | 0) < 8 : 0)) break;
    HEAP32[$axis >> 2] = _GetGamepadAxis(HEAP32[$j60 >> 2] | 0) | 0;
    HEAP32[$j60 >> 2] = (HEAP32[$j60 >> 2] | 0) + 1;
   }
  }
  HEAP32[$i17 >> 2] = (HEAP32[$i17 >> 2] | 0) + 1;
 }
 STACKTOP = sp;
 return;
}

function __ZN8nlohmann6detail28json_sax_dom_callback_parserINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE9end_arrayEv($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $6 = 0, $7 = 0, $8 = 0, $__end_$i = 0, $__end_$i3 = 0, $__size_$i14 = 0, $add$ptr$i13 = 0, $agg$tmp = 0, $incdec$ptr$i$i$i = 0, $keep$0$off0 = 0, $ref_stack = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $agg$tmp = sp;
 $ref_stack = $this + 4 | 0;
 $__end_$i = $this + 8 | 0;
 $0 = HEAP32[$__end_$i >> 2] | 0;
 $1 = HEAP32[$0 + -4 >> 2] | 0;
 if (!$1) $keep$0$off0 = 1; else if (__ZNKSt3__28functionIFbiN8nlohmann6detail6parserINS1_10basic_jsonINS_3mapENS_6vectorENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEbxydSA_NS1_14adl_serializerEEEE13parse_event_tERSE_EEclEiSG_SH_($this + 48 | 0, ($0 - (HEAP32[$ref_stack >> 2] | 0) >> 2) + -1 | 0, 3, $1) | 0) $keep$0$off0 = 1; else {
  __ZN8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEC2ERKSB_($agg$tmp, $this + 72 | 0);
  __ZN8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEaSESB_(HEAP32[(HEAP32[$__end_$i >> 2] | 0) + -4 >> 2] | 0, $agg$tmp) | 0;
  __ZN8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEED2Ev($agg$tmp);
  $keep$0$off0 = 0;
 }
 $6 = HEAP32[$ref_stack >> 2] | 0;
 $7 = HEAP32[$__end_$i >> 2] | 0;
 if (($6 | 0) == ($7 | 0)) ___assert_fail(27972, 22221, 4651, 27994);
 $__size_$i14 = $this + 20 | 0;
 $8 = HEAP32[$__size_$i14 >> 2] | 0;
 if (!$8) ___assert_fail(27922, 22221, 4652, 27994);
 $add$ptr$i13 = $7 + -4 | 0;
 HEAP32[$__end_$i >> 2] = $add$ptr$i13;
 HEAP32[$__size_$i14 >> 2] = $8 + -1;
 if (!($keep$0$off0 | ($6 | 0) == ($add$ptr$i13 | 0))) if (__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE8is_arrayEv(HEAP32[$7 + -8 >> 2] | 0) | 0) {
  $__end_$i3 = (HEAP32[(HEAP32[(HEAP32[$__end_$i >> 2] | 0) + -4 >> 2] | 0) + 8 >> 2] | 0) + 4 | 0;
  $incdec$ptr$i$i$i = (HEAP32[$__end_$i3 >> 2] | 0) + -16 | 0;
  __ZN8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEED2Ev($incdec$ptr$i$i$i);
  HEAP32[$__end_$i3 >> 2] = $incdec$ptr$i$i$i;
 }
 STACKTOP = sp;
 return 1;
}

function __ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwx($this, $__s, $__iob, $__fl, $0, $1) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__iob = $__iob | 0;
 $__fl = $__fl | 0;
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $14 = 0, $15 = 0, $2 = 0, $8 = 0, $9 = 0, $__fmt = 0, $__fmtflags_$i = 0, $__oe = 0, $__op = 0, $add$ptr7 = 0, $add3 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $and$lobit = 0, $call11 = 0, $call4 = 0, $call8 = 0, $vla = 0, $vla$alloca_mul = 0, $vla10 = 0, $vla10$alloca_mul = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $agg$tmp$byval_copy = sp + 8 | 0;
 $__fmt = sp;
 $__op = sp + 24 | 0;
 $__oe = sp + 16 | 0;
 $agg$tmp = sp + 20 | 0;
 $2 = $__fmt;
 HEAP32[$2 >> 2] = 37;
 HEAP32[$2 + 4 >> 2] = 0;
 $__fmtflags_$i = $__iob + 4 | 0;
 __ZNSt3__214__num_put_base12__format_intEPcPKcbj($__fmt + 1 | 0, 43069, 1, HEAP32[$__fmtflags_$i >> 2] | 0);
 $and$lobit = (HEAP32[$__fmtflags_$i >> 2] | 0) >>> 9 & 1;
 $add3 = $and$lobit + 23 | 0;
 $8 = _llvm_stacksave() | 0;
 $vla$alloca_mul = $add3;
 $vla = STACKTOP;
 STACKTOP = STACKTOP + ((1 * $vla$alloca_mul | 0) + 15 & -16) | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow((1 * $vla$alloca_mul | 0) + 15 & -16 | 0);
 $call4 = __ZNSt3__26__clocEv() | 0;
 $9 = $agg$tmp$byval_copy;
 HEAP32[$9 >> 2] = $0;
 HEAP32[$9 + 4 >> 2] = $1;
 $add$ptr7 = $vla + (__ZNSt3__219__libcpp_snprintf_lEPcmP15__locale_structPKcz($vla, $add3, $call4, $__fmt, $agg$tmp$byval_copy) | 0) | 0;
 $call8 = __ZNSt3__214__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($vla, $add$ptr7, $__iob) | 0;
 $vla10$alloca_mul = ($and$lobit << 1 | 44) + -1 << 2;
 $vla10 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * $vla10$alloca_mul | 0) + 15 & -16) | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow((1 * $vla10$alloca_mul | 0) + 15 & -16 | 0);
 __ZNKSt3__28ios_base6getlocEv($agg$tmp$byval_copy, $__iob);
 __ZNSt3__29__num_putIwE21__widen_and_group_intEPcS2_S2_PwRS3_S4_RKNS_6localeE($vla, $call8, $add$ptr7, $vla10, $__op, $__oe, $agg$tmp$byval_copy);
 __ZNSt3__26localeD2Ev($agg$tmp$byval_copy);
 HEAP32[$agg$tmp >> 2] = HEAP32[$__s >> 2];
 $14 = HEAP32[$__op >> 2] | 0;
 $15 = HEAP32[$__oe >> 2] | 0;
 HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 $call11 = __ZNSt3__216__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$tmp$byval_copy, $vla10, $14, $15, $__iob, $__fl) | 0;
 _llvm_stackrestore($8 | 0);
 STACKTOP = sp;
 return $call11 | 0;
}

function __ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcx($this, $__s, $__iob, $__fl, $0, $1) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__iob = $__iob | 0;
 $__fl = $__fl | 0;
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $14 = 0, $15 = 0, $2 = 0, $8 = 0, $9 = 0, $__fmt = 0, $__fmtflags_$i = 0, $__oe = 0, $__op = 0, $add$ptr7 = 0, $add3 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $and$lobit = 0, $call11 = 0, $call4 = 0, $call8 = 0, $vla = 0, $vla$alloca_mul = 0, $vla10 = 0, $vla10$alloca_mul = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $agg$tmp$byval_copy = sp + 8 | 0;
 $__fmt = sp;
 $__op = sp + 24 | 0;
 $__oe = sp + 16 | 0;
 $agg$tmp = sp + 20 | 0;
 $2 = $__fmt;
 HEAP32[$2 >> 2] = 37;
 HEAP32[$2 + 4 >> 2] = 0;
 $__fmtflags_$i = $__iob + 4 | 0;
 __ZNSt3__214__num_put_base12__format_intEPcPKcbj($__fmt + 1 | 0, 43069, 1, HEAP32[$__fmtflags_$i >> 2] | 0);
 $and$lobit = (HEAP32[$__fmtflags_$i >> 2] | 0) >>> 9 & 1;
 $add3 = $and$lobit + 23 | 0;
 $8 = _llvm_stacksave() | 0;
 $vla$alloca_mul = $add3;
 $vla = STACKTOP;
 STACKTOP = STACKTOP + ((1 * $vla$alloca_mul | 0) + 15 & -16) | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow((1 * $vla$alloca_mul | 0) + 15 & -16 | 0);
 $call4 = __ZNSt3__26__clocEv() | 0;
 $9 = $agg$tmp$byval_copy;
 HEAP32[$9 >> 2] = $0;
 HEAP32[$9 + 4 >> 2] = $1;
 $add$ptr7 = $vla + (__ZNSt3__219__libcpp_snprintf_lEPcmP15__locale_structPKcz($vla, $add3, $call4, $__fmt, $agg$tmp$byval_copy) | 0) | 0;
 $call8 = __ZNSt3__214__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($vla, $add$ptr7, $__iob) | 0;
 $vla10$alloca_mul = ($and$lobit << 1 | 44) + -1 | 0;
 $vla10 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * $vla10$alloca_mul | 0) + 15 & -16) | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow((1 * $vla10$alloca_mul | 0) + 15 & -16 | 0);
 __ZNKSt3__28ios_base6getlocEv($agg$tmp$byval_copy, $__iob);
 __ZNSt3__29__num_putIcE21__widen_and_group_intEPcS2_S2_S2_RS2_S3_RKNS_6localeE($vla, $call8, $add$ptr7, $vla10, $__op, $__oe, $agg$tmp$byval_copy);
 __ZNSt3__26localeD2Ev($agg$tmp$byval_copy);
 HEAP32[$agg$tmp >> 2] = HEAP32[$__s >> 2];
 $14 = HEAP32[$__op >> 2] | 0;
 $15 = HEAP32[$__oe >> 2] | 0;
 HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 $call11 = __ZNSt3__216__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$tmp$byval_copy, $vla10, $14, $15, $__iob, $__fl) | 0;
 _llvm_stackrestore($8 | 0);
 STACKTOP = sp;
 return $call11 | 0;
}

function _acosf($x) {
 $x = Math_fround($x);
 var $0 = 0, $2 = f0, $and = 0, $call20 = f0, $call30 = f0, $mul = f0, $mul19 = f0, $mul29 = f0, $retval$0 = f0;
 $0 = (HEAPF32[tempDoublePtr >> 2] = $x, HEAP32[tempDoublePtr >> 2] | 0);
 $and = $0 & 2147483647;
 if ($and >>> 0 > 1065353215) if (($and | 0) == 1065353216) {
  $retval$0 = ($0 | 0) < 0 ? Math_fround(3.1415925) : Math_fround(0.0);
  return Math_fround($retval$0);
 } else {
  $retval$0 = Math_fround(Math_fround(0.0) / Math_fround($x - $x));
  return Math_fround($retval$0);
 }
 if ($and >>> 0 < 1056964608) {
  if ($and >>> 0 < 847249409) {
   $retval$0 = Math_fround(1.57079625);
   return Math_fround($retval$0);
  }
  $mul = Math_fround($x * $x);
  $retval$0 = Math_fround(Math_fround(1.57079625) - Math_fround($x - Math_fround(Math_fround(7.54978942e-08) - Math_fround(Math_fround(Math_fround($mul * Math_fround(Math_fround($mul * Math_fround(Math_fround(-.0427434221) - Math_fround($mul * Math_fround(.008656363)))) + Math_fround(.166665867))) / Math_fround(Math_fround(1.0) - Math_fround($mul * Math_fround(.706629634)))) * $x))));
  return Math_fround($retval$0);
 }
 if (($0 | 0) < 0) {
  $mul19 = Math_fround(Math_fround($x + Math_fround(1.0)) * Math_fround(.5));
  $call20 = Math_fround(Math_sqrt(Math_fround($mul19)));
  $retval$0 = Math_fround(Math_fround(Math_fround(1.57079625) - Math_fround($call20 + Math_fround(Math_fround(Math_fround(Math_fround($mul19 * Math_fround(Math_fround($mul19 * Math_fround(Math_fround(-.0427434221) - Math_fround($mul19 * Math_fround(.008656363)))) + Math_fround(.166665867))) / Math_fround(Math_fround(1.0) - Math_fround($mul19 * Math_fround(.706629634)))) * $call20) + Math_fround(-7.54978942e-08)))) * Math_fround(2.0));
  return Math_fround($retval$0);
 } else {
  $mul29 = Math_fround(Math_fround(Math_fround(1.0) - $x) * Math_fround(.5));
  $call30 = Math_fround(Math_sqrt(Math_fround($mul29)));
  $2 = (HEAP32[tempDoublePtr >> 2] = (HEAPF32[tempDoublePtr >> 2] = $call30, HEAP32[tempDoublePtr >> 2] | 0) & -4096, Math_fround(HEAPF32[tempDoublePtr >> 2]));
  $retval$0 = Math_fround(Math_fround(Math_fround(Math_fround(Math_fround(Math_fround($mul29 * Math_fround(Math_fround($mul29 * Math_fround(Math_fround(-.0427434221) - Math_fround($mul29 * Math_fround(.008656363)))) + Math_fround(.166665867))) / Math_fround(Math_fround(1.0) - Math_fround($mul29 * Math_fround(.706629634)))) * $call30) + Math_fround(Math_fround($mul29 - Math_fround($2 * $2)) / Math_fround($call30 + $2))) + $2) * Math_fround(2.0));
  return Math_fround($retval$0);
 }
 return Math_fround(0.0);
}

function _rlBegin($mode) {
 $mode = $mode | 0;
 var $15 = 0, $arrayidx12 = 0, $arrayidx29 = 0, $arrayidx57 = 0, $cCounter = 0, $cond40 = 0, $mode$addr = 0, $tcCounter = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $mode$addr = sp;
 HEAP32[$mode$addr >> 2] = $mode;
 if ((HEAP32[(HEAP32[14845] | 0) + ((HEAP32[14846] | 0) - 1 << 4) >> 2] | 0) == (HEAP32[$mode$addr >> 2] | 0)) {
  STACKTOP = sp;
  return;
 }
 do if ((HEAP32[(HEAP32[14845] | 0) + ((HEAP32[14846] | 0) - 1 << 4) + 4 >> 2] | 0) > 0) {
  $arrayidx12 = (HEAP32[14845] | 0) + ((HEAP32[14846] | 0) - 1 << 4) | 0;
  do if ((HEAP32[(HEAP32[14845] | 0) + ((HEAP32[14846] | 0) - 1 << 4) >> 2] | 0) == 1) {
   $15 = HEAP32[(HEAP32[14845] | 0) + ((HEAP32[14846] | 0) - 1 << 4) + 4 >> 2] | 0;
   HEAP32[(HEAP32[14845] | 0) + ((HEAP32[14846] | 0) - 1 << 4) + 8 >> 2] = (HEAP32[$arrayidx12 + 4 >> 2] | 0) < 4 ? $15 : ($15 | 0) % 4 | 0;
  } else {
   $arrayidx29 = (HEAP32[14845] | 0) + ((HEAP32[14846] | 0) - 1 << 4) | 0;
   if ((HEAP32[$arrayidx12 >> 2] | 0) != 4) {
    HEAP32[$arrayidx29 + 8 >> 2] = 0;
    break;
   }
   if ((HEAP32[$arrayidx29 + 4 >> 2] | 0) < 4) $cond40 = 1; else $cond40 = 4 - ((HEAP32[(HEAP32[14845] | 0) + ((HEAP32[14846] | 0) - 1 << 4) + 4 >> 2] | 0) % 4 | 0) | 0;
   HEAP32[(HEAP32[14845] | 0) + ((HEAP32[14846] | 0) - 1 << 4) + 8 >> 2] = $cond40;
  } while (0);
  if (_rlCheckBufferLimit(HEAP32[(HEAP32[14845] | 0) + ((HEAP32[14846] | 0) - 1 << 4) + 8 >> 2] | 0) | 0) {
   _rlglDraw();
   break;
  } else {
   $arrayidx57 = 47408 + ((HEAP32[14847] | 0) * 48 | 0) | 0;
   HEAP32[$arrayidx57 >> 2] = (HEAP32[$arrayidx57 >> 2] | 0) + (HEAP32[(HEAP32[14845] | 0) + ((HEAP32[14846] | 0) - 1 << 4) + 8 >> 2] | 0);
   $cCounter = 47408 + ((HEAP32[14847] | 0) * 48 | 0) + 8 | 0;
   HEAP32[$cCounter >> 2] = (HEAP32[$cCounter >> 2] | 0) + (HEAP32[(HEAP32[14845] | 0) + ((HEAP32[14846] | 0) - 1 << 4) + 8 >> 2] | 0);
   $tcCounter = 47408 + ((HEAP32[14847] | 0) * 48 | 0) + 4 | 0;
   HEAP32[$tcCounter >> 2] = (HEAP32[$tcCounter >> 2] | 0) + (HEAP32[(HEAP32[14845] | 0) + ((HEAP32[14846] | 0) - 1 << 4) + 8 >> 2] | 0);
   HEAP32[14846] = (HEAP32[14846] | 0) + 1;
   break;
  }
 } while (0);
 if ((HEAP32[14846] | 0) >= 256) _rlglDraw();
 HEAP32[(HEAP32[14845] | 0) + ((HEAP32[14846] | 0) - 1 << 4) >> 2] = HEAP32[$mode$addr >> 2];
 HEAP32[(HEAP32[14845] | 0) + ((HEAP32[14846] | 0) - 1 << 4) + 4 >> 2] = 0;
 HEAP32[(HEAP32[14845] | 0) + ((HEAP32[14846] | 0) - 1 << 4) + 12 >> 2] = HEAP32[14848];
 STACKTOP = sp;
 return;
}

function __ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwy($this, $__s, $__iob, $__fl, $0, $1) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__iob = $__iob | 0;
 $__fl = $__fl | 0;
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $14 = 0, $15 = 0, $2 = 0, $8 = 0, $9 = 0, $__fmt = 0, $__fmtflags_$i = 0, $__oe = 0, $__op = 0, $add = 0, $add$ptr7 = 0, $add3 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call11 = 0, $call4 = 0, $call8 = 0, $vla = 0, $vla$alloca_mul = 0, $vla10 = 0, $vla10$alloca_mul = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $agg$tmp$byval_copy = sp + 8 | 0;
 $__fmt = sp;
 $__op = sp + 24 | 0;
 $__oe = sp + 16 | 0;
 $agg$tmp = sp + 20 | 0;
 $2 = $__fmt;
 HEAP32[$2 >> 2] = 37;
 HEAP32[$2 + 4 >> 2] = 0;
 $__fmtflags_$i = $__iob + 4 | 0;
 __ZNSt3__214__num_put_base12__format_intEPcPKcbj($__fmt + 1 | 0, 43069, 0, HEAP32[$__fmtflags_$i >> 2] | 0);
 $add = (HEAP32[$__fmtflags_$i >> 2] | 0) >>> 9 & 1 | 22;
 $add3 = $add + 1 | 0;
 $8 = _llvm_stacksave() | 0;
 $vla$alloca_mul = $add3;
 $vla = STACKTOP;
 STACKTOP = STACKTOP + ((1 * $vla$alloca_mul | 0) + 15 & -16) | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow((1 * $vla$alloca_mul | 0) + 15 & -16 | 0);
 $call4 = __ZNSt3__26__clocEv() | 0;
 $9 = $agg$tmp$byval_copy;
 HEAP32[$9 >> 2] = $0;
 HEAP32[$9 + 4 >> 2] = $1;
 $add$ptr7 = $vla + (__ZNSt3__219__libcpp_snprintf_lEPcmP15__locale_structPKcz($vla, $add3, $call4, $__fmt, $agg$tmp$byval_copy) | 0) | 0;
 $call8 = __ZNSt3__214__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($vla, $add$ptr7, $__iob) | 0;
 $vla10$alloca_mul = ($add << 1) + -1 << 2;
 $vla10 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * $vla10$alloca_mul | 0) + 15 & -16) | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow((1 * $vla10$alloca_mul | 0) + 15 & -16 | 0);
 __ZNKSt3__28ios_base6getlocEv($agg$tmp$byval_copy, $__iob);
 __ZNSt3__29__num_putIwE21__widen_and_group_intEPcS2_S2_PwRS3_S4_RKNS_6localeE($vla, $call8, $add$ptr7, $vla10, $__op, $__oe, $agg$tmp$byval_copy);
 __ZNSt3__26localeD2Ev($agg$tmp$byval_copy);
 HEAP32[$agg$tmp >> 2] = HEAP32[$__s >> 2];
 $14 = HEAP32[$__op >> 2] | 0;
 $15 = HEAP32[$__oe >> 2] | 0;
 HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 $call11 = __ZNSt3__216__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$tmp$byval_copy, $vla10, $14, $15, $__iob, $__fl) | 0;
 _llvm_stackrestore($8 | 0);
 STACKTOP = sp;
 return $call11 | 0;
}

function __ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcy($this, $__s, $__iob, $__fl, $0, $1) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__iob = $__iob | 0;
 $__fl = $__fl | 0;
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $14 = 0, $15 = 0, $2 = 0, $8 = 0, $9 = 0, $__fmt = 0, $__fmtflags_$i = 0, $__oe = 0, $__op = 0, $add = 0, $add$ptr7 = 0, $add3 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call11 = 0, $call4 = 0, $call8 = 0, $vla = 0, $vla$alloca_mul = 0, $vla10 = 0, $vla10$alloca_mul = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $agg$tmp$byval_copy = sp + 8 | 0;
 $__fmt = sp;
 $__op = sp + 24 | 0;
 $__oe = sp + 16 | 0;
 $agg$tmp = sp + 20 | 0;
 $2 = $__fmt;
 HEAP32[$2 >> 2] = 37;
 HEAP32[$2 + 4 >> 2] = 0;
 $__fmtflags_$i = $__iob + 4 | 0;
 __ZNSt3__214__num_put_base12__format_intEPcPKcbj($__fmt + 1 | 0, 43069, 0, HEAP32[$__fmtflags_$i >> 2] | 0);
 $add = (HEAP32[$__fmtflags_$i >> 2] | 0) >>> 9 & 1 | 22;
 $add3 = $add + 1 | 0;
 $8 = _llvm_stacksave() | 0;
 $vla$alloca_mul = $add3;
 $vla = STACKTOP;
 STACKTOP = STACKTOP + ((1 * $vla$alloca_mul | 0) + 15 & -16) | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow((1 * $vla$alloca_mul | 0) + 15 & -16 | 0);
 $call4 = __ZNSt3__26__clocEv() | 0;
 $9 = $agg$tmp$byval_copy;
 HEAP32[$9 >> 2] = $0;
 HEAP32[$9 + 4 >> 2] = $1;
 $add$ptr7 = $vla + (__ZNSt3__219__libcpp_snprintf_lEPcmP15__locale_structPKcz($vla, $add3, $call4, $__fmt, $agg$tmp$byval_copy) | 0) | 0;
 $call8 = __ZNSt3__214__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($vla, $add$ptr7, $__iob) | 0;
 $vla10$alloca_mul = ($add << 1) + -1 | 0;
 $vla10 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * $vla10$alloca_mul | 0) + 15 & -16) | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow((1 * $vla10$alloca_mul | 0) + 15 & -16 | 0);
 __ZNKSt3__28ios_base6getlocEv($agg$tmp$byval_copy, $__iob);
 __ZNSt3__29__num_putIcE21__widen_and_group_intEPcS2_S2_S2_RS2_S3_RKNS_6localeE($vla, $call8, $add$ptr7, $vla10, $__op, $__oe, $agg$tmp$byval_copy);
 __ZNSt3__26localeD2Ev($agg$tmp$byval_copy);
 HEAP32[$agg$tmp >> 2] = HEAP32[$__s >> 2];
 $14 = HEAP32[$__op >> 2] | 0;
 $15 = HEAP32[$__oe >> 2] | 0;
 HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 $call11 = __ZNSt3__216__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$tmp$byval_copy, $vla10, $14, $15, $__iob, $__fl) | 0;
 _llvm_stackrestore($8 | 0);
 STACKTOP = sp;
 return $call11 | 0;
}

function __ZN4tson7WangSetC2EOS0_($this, $0) {
 $this = $this | 0;
 $0 = $0 | 0;
 var $__end_$i = 0, $__end_$i$i = 0, $__end_$i$i13 = 0, $__end_$i$i7 = 0, $__end_$i10 = 0, $__end_$i16 = 0, $__value_$i$i$i8$i = 0, $__value_$i$i$i8$i11 = 0, $__value_$i$i$i8$i17 = 0, $__value_$i$i$i9$i = 0, $__value_$i$i$i9$i14 = 0, $__value_$i$i$i9$i8 = 0, $m_cornerColors = 0, $m_cornerColors5 = 0, $m_edgeColors = 0, $m_edgeColors6 = 0, $m_wangTiles = 0, $m_wangTiles4 = 0;
 HEAP32[$this >> 2] = HEAP32[$0 >> 2];
 HEAP32[$this + 4 >> 2] = HEAP32[$0 + 4 >> 2];
 HEAP32[$this + 8 >> 2] = HEAP32[$0 + 8 >> 2];
 HEAP32[$0 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 0;
 HEAP32[$this + 12 >> 2] = HEAP32[$0 + 12 >> 2];
 $m_wangTiles = $this + 16 | 0;
 $m_wangTiles4 = $0 + 16 | 0;
 HEAP32[$m_wangTiles >> 2] = 0;
 $__end_$i$i = $this + 20 | 0;
 HEAP32[$__end_$i$i >> 2] = 0;
 $__value_$i$i$i9$i = $this + 24 | 0;
 HEAP32[$__value_$i$i$i9$i >> 2] = 0;
 HEAP32[$m_wangTiles >> 2] = HEAP32[$m_wangTiles4 >> 2];
 $__end_$i = $0 + 20 | 0;
 HEAP32[$__end_$i$i >> 2] = HEAP32[$__end_$i >> 2];
 $__value_$i$i$i8$i = $0 + 24 | 0;
 HEAP32[$__value_$i$i$i9$i >> 2] = HEAP32[$__value_$i$i$i8$i >> 2];
 HEAP32[$__value_$i$i$i8$i >> 2] = 0;
 HEAP32[$__end_$i >> 2] = 0;
 HEAP32[$m_wangTiles4 >> 2] = 0;
 $m_cornerColors = $this + 28 | 0;
 $m_cornerColors5 = $0 + 28 | 0;
 HEAP32[$m_cornerColors >> 2] = 0;
 $__end_$i$i13 = $this + 32 | 0;
 HEAP32[$__end_$i$i13 >> 2] = 0;
 $__value_$i$i$i9$i14 = $this + 36 | 0;
 HEAP32[$__value_$i$i$i9$i14 >> 2] = 0;
 HEAP32[$m_cornerColors >> 2] = HEAP32[$m_cornerColors5 >> 2];
 $__end_$i16 = $0 + 32 | 0;
 HEAP32[$__end_$i$i13 >> 2] = HEAP32[$__end_$i16 >> 2];
 $__value_$i$i$i8$i17 = $0 + 36 | 0;
 HEAP32[$__value_$i$i$i9$i14 >> 2] = HEAP32[$__value_$i$i$i8$i17 >> 2];
 HEAP32[$__value_$i$i$i8$i17 >> 2] = 0;
 HEAP32[$__end_$i16 >> 2] = 0;
 HEAP32[$m_cornerColors5 >> 2] = 0;
 $m_edgeColors = $this + 40 | 0;
 $m_edgeColors6 = $0 + 40 | 0;
 HEAP32[$m_edgeColors >> 2] = 0;
 $__end_$i$i7 = $this + 44 | 0;
 HEAP32[$__end_$i$i7 >> 2] = 0;
 $__value_$i$i$i9$i8 = $this + 48 | 0;
 HEAP32[$__value_$i$i$i9$i8 >> 2] = 0;
 HEAP32[$m_edgeColors >> 2] = HEAP32[$m_edgeColors6 >> 2];
 $__end_$i10 = $0 + 44 | 0;
 HEAP32[$__end_$i$i7 >> 2] = HEAP32[$__end_$i10 >> 2];
 $__value_$i$i$i8$i11 = $0 + 48 | 0;
 HEAP32[$__value_$i$i$i9$i8 >> 2] = HEAP32[$__value_$i$i$i8$i11 >> 2];
 HEAP32[$__value_$i$i$i8$i11 >> 2] = 0;
 HEAP32[$__end_$i10 >> 2] = 0;
 HEAP32[$m_edgeColors6 >> 2] = 0;
 __ZN4tson18PropertyCollectionC2EOS0_($this + 52 | 0, $0 + 52 | 0);
 return;
}

function _rlRotatef($angleDeg, $x, $y, $z) {
 $angleDeg = Math_fround($angleDeg);
 $x = Math_fround($x);
 $y = Math_fround($y);
 $z = Math_fround($z);
 var $$byval_copy = 0, $4 = 0, $5 = 0, $agg$tmp = 0, $angleDeg$addr = 0, $axis = 0, $matRotation = 0, $matRotation$byval_copy = 0, $mul = f0, $tmp = 0, $tmp4 = 0, $x$addr = 0, $y$addr = 0, $z$addr = 0, dest = 0, sp = 0, src = 0, stop = 0, CSE$0 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 368 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(368);
 $$byval_copy = sp + 296 | 0;
 $matRotation$byval_copy = sp + 232 | 0;
 $angleDeg$addr = sp + 228 | 0;
 $x$addr = sp + 224 | 0;
 $y$addr = sp + 220 | 0;
 $z$addr = sp + 216 | 0;
 $matRotation = sp + 152 | 0;
 $axis = sp + 140 | 0;
 $agg$tmp = sp + 128 | 0;
 $tmp = sp + 64 | 0;
 $tmp4 = sp;
 HEAPF32[$angleDeg$addr >> 2] = $angleDeg;
 HEAPF32[$x$addr >> 2] = $x;
 HEAPF32[$y$addr >> 2] = $y;
 HEAPF32[$z$addr >> 2] = $z;
 _MatrixIdentity($matRotation);
 HEAPF32[$axis >> 2] = Math_fround(HEAPF32[$x$addr >> 2]);
 HEAPF32[$axis + 4 >> 2] = Math_fround(HEAPF32[$y$addr >> 2]);
 HEAPF32[$axis + 8 >> 2] = Math_fround(HEAPF32[$z$addr >> 2]);
 HEAP32[$$byval_copy >> 2] = HEAP32[$axis >> 2];
 HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$axis + 4 >> 2];
 HEAP32[$$byval_copy + 8 >> 2] = HEAP32[$axis + 8 >> 2];
 _Vector3Normalize($agg$tmp, $$byval_copy);
 $mul = Math_fround(Math_fround(HEAPF32[$angleDeg$addr >> 2]) * Math_fround(.0174532924));
 HEAP32[$$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
 HEAP32[$$byval_copy + 8 >> 2] = HEAP32[$agg$tmp + 8 >> 2];
 _MatrixRotate($tmp, $$byval_copy, $mul);
 dest = $matRotation;
 src = $tmp;
 stop = dest + 64 | 0;
 do {
  HEAP32[dest >> 2] = HEAP32[src >> 2];
  dest = dest + 4 | 0;
  src = src + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 CSE$0 = HEAP32[14811] | 0;
 $4 = CSE$0 | 0;
 $5 = CSE$0 | 0;
 dest = $matRotation$byval_copy;
 src = $matRotation;
 stop = dest + 64 | 0;
 do {
  HEAP32[dest >> 2] = HEAP32[src >> 2];
  dest = dest + 4 | 0;
  src = src + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$byval_copy;
 src = $5;
 stop = dest + 64 | 0;
 do {
  HEAP32[dest >> 2] = HEAP32[src >> 2];
  dest = dest + 4 | 0;
  src = src + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 _MatrixMultiply($tmp4, $matRotation$byval_copy, $$byval_copy);
 dest = $4;
 src = $tmp4;
 stop = dest + 64 | 0;
 do {
  HEAP32[dest >> 2] = HEAP32[src >> 2];
  dest = dest + 4 | 0;
  src = src + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 STACKTOP = sp;
 return;
}

function _rlMultMatrixf($matf) {
 $matf = $matf | 0;
 var $$byval_copy = 0, $32 = 0, $mat = 0, $mat$byval_copy = 0, $matf$addr = 0, $tmp = 0, dest = 0, sp = 0, src = 0, stop = 0, CSE$0 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 272 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(272);
 $mat$byval_copy = sp + 200 | 0;
 $$byval_copy = sp + 136 | 0;
 $matf$addr = sp + 128 | 0;
 $mat = sp + 64 | 0;
 $tmp = sp;
 HEAP32[$matf$addr >> 2] = $matf;
 HEAPF32[$mat >> 2] = Math_fround(HEAPF32[HEAP32[$matf$addr >> 2] >> 2]);
 HEAPF32[$mat + 4 >> 2] = Math_fround(HEAPF32[(HEAP32[$matf$addr >> 2] | 0) + 16 >> 2]);
 HEAPF32[$mat + 8 >> 2] = Math_fround(HEAPF32[(HEAP32[$matf$addr >> 2] | 0) + 32 >> 2]);
 HEAPF32[$mat + 12 >> 2] = Math_fround(HEAPF32[(HEAP32[$matf$addr >> 2] | 0) + 48 >> 2]);
 HEAPF32[$mat + 16 >> 2] = Math_fround(HEAPF32[(HEAP32[$matf$addr >> 2] | 0) + 4 >> 2]);
 HEAPF32[$mat + 20 >> 2] = Math_fround(HEAPF32[(HEAP32[$matf$addr >> 2] | 0) + 20 >> 2]);
 HEAPF32[$mat + 24 >> 2] = Math_fround(HEAPF32[(HEAP32[$matf$addr >> 2] | 0) + 36 >> 2]);
 HEAPF32[$mat + 28 >> 2] = Math_fround(HEAPF32[(HEAP32[$matf$addr >> 2] | 0) + 52 >> 2]);
 HEAPF32[$mat + 32 >> 2] = Math_fround(HEAPF32[(HEAP32[$matf$addr >> 2] | 0) + 8 >> 2]);
 HEAPF32[$mat + 36 >> 2] = Math_fround(HEAPF32[(HEAP32[$matf$addr >> 2] | 0) + 24 >> 2]);
 HEAPF32[$mat + 40 >> 2] = Math_fround(HEAPF32[(HEAP32[$matf$addr >> 2] | 0) + 40 >> 2]);
 HEAPF32[$mat + 44 >> 2] = Math_fround(HEAPF32[(HEAP32[$matf$addr >> 2] | 0) + 56 >> 2]);
 HEAPF32[$mat + 48 >> 2] = Math_fround(HEAPF32[(HEAP32[$matf$addr >> 2] | 0) + 12 >> 2]);
 HEAPF32[$mat + 52 >> 2] = Math_fround(HEAPF32[(HEAP32[$matf$addr >> 2] | 0) + 28 >> 2]);
 HEAPF32[$mat + 56 >> 2] = Math_fround(HEAPF32[(HEAP32[$matf$addr >> 2] | 0) + 44 >> 2]);
 HEAPF32[$mat + 60 >> 2] = Math_fround(HEAPF32[(HEAP32[$matf$addr >> 2] | 0) + 60 >> 2]);
 CSE$0 = HEAP32[14811] | 0;
 $32 = CSE$0 | 0;
 dest = $$byval_copy;
 src = CSE$0 | 0;
 stop = dest + 64 | 0;
 do {
  HEAP32[dest >> 2] = HEAP32[src >> 2];
  dest = dest + 4 | 0;
  src = src + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $mat$byval_copy;
 src = $mat;
 stop = dest + 64 | 0;
 do {
  HEAP32[dest >> 2] = HEAP32[src >> 2];
  dest = dest + 4 | 0;
  src = src + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 _MatrixMultiply($tmp, $$byval_copy, $mat$byval_copy);
 dest = $32;
 src = $tmp;
 stop = dest + 64 | 0;
 do {
  HEAP32[dest >> 2] = HEAP32[src >> 2];
  dest = dest + 4 | 0;
  src = src + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 STACKTOP = sp;
 return;
}

function _ExportImage($image, $fileName) {
 $image = $image | 0;
 $fileName = $fileName | 0;
 var $1 = 0, $6 = 0, $8 = 0, $call1 = 0, $call13 = 0, $call4 = 0, $fileName$addr = 0, $image$byval_copy3 = 0, $imgData = 0, $rawFile = 0, $success = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 $image$byval_copy3 = sp + 28 | 0;
 $vararg_buffer1 = sp + 8 | 0;
 $vararg_buffer = sp;
 $fileName$addr = sp + 24 | 0;
 $success = sp + 20 | 0;
 $imgData = sp + 16 | 0;
 $rawFile = sp + 12 | 0;
 HEAP32[$fileName$addr >> 2] = $fileName;
 HEAP32[$success >> 2] = 0;
 HEAP32[$image$byval_copy3 >> 2] = HEAP32[$image >> 2];
 HEAP32[$image$byval_copy3 + 4 >> 2] = HEAP32[$image + 4 >> 2];
 HEAP32[$image$byval_copy3 + 8 >> 2] = HEAP32[$image + 8 >> 2];
 HEAP32[$image$byval_copy3 + 12 >> 2] = HEAP32[$image + 12 >> 2];
 HEAP32[$image$byval_copy3 + 16 >> 2] = HEAP32[$image + 16 >> 2];
 HEAP32[$imgData >> 2] = _GetImageData($image$byval_copy3) | 0;
 $call1 = _IsFileExtension(HEAP32[$fileName$addr >> 2] | 0, 36808) | 0;
 $1 = HEAP32[$fileName$addr >> 2] | 0;
 do if ($call1) HEAP32[$success >> 2] = _stbi_write_png($1, HEAP32[$image + 4 >> 2] | 0, HEAP32[$image + 8 >> 2] | 0, 4, HEAP32[$imgData >> 2] | 0, HEAP32[$image + 4 >> 2] << 2) | 0; else {
  $call4 = _IsFileExtension($1, 36859) | 0;
  $6 = HEAP32[$fileName$addr >> 2] | 0;
  if ($call4) {
   HEAP32[$image$byval_copy3 >> 2] = HEAP32[$image >> 2];
   HEAP32[$image$byval_copy3 + 4 >> 2] = HEAP32[$image + 4 >> 2];
   HEAP32[$image$byval_copy3 + 8 >> 2] = HEAP32[$image + 8 >> 2];
   HEAP32[$image$byval_copy3 + 12 >> 2] = HEAP32[$image + 12 >> 2];
   HEAP32[$image$byval_copy3 + 16 >> 2] = HEAP32[$image + 16 >> 2];
   HEAP32[$success >> 2] = _SaveKTX($image$byval_copy3, $6) | 0;
   break;
  }
  if (_IsFileExtension($6, 37760) | 0) {
   HEAP32[$rawFile >> 2] = _fopen(HEAP32[$fileName$addr >> 2] | 0, 34090) | 0;
   $8 = HEAP32[$image >> 2] | 0;
   $call13 = _GetPixelDataSize(HEAP32[$image + 4 >> 2] | 0, HEAP32[$image + 8 >> 2] | 0, HEAP32[$image + 16 >> 2] | 0) | 0;
   HEAP32[$success >> 2] = _fwrite($8, $call13, 1, HEAP32[$rawFile >> 2] | 0) | 0;
   _fclose(HEAP32[$rawFile >> 2] | 0) | 0;
  }
 } while (0);
 _free(HEAP32[$imgData >> 2] | 0);
 if (HEAP32[$success >> 2] | 0) {
  HEAP32[$vararg_buffer >> 2] = HEAP32[$fileName$addr >> 2];
  _TraceLog(3, 37765, $vararg_buffer);
  STACKTOP = sp;
  return;
 } else {
  _TraceLog(4, 37797, $vararg_buffer1);
  STACKTOP = sp;
  return;
 }
}

function _LoadShaderDefault($agg$result) {
 $agg$result = $agg$result | 0;
 var $9 = 0, $call13 = 0, $call17 = 0, $call21 = 0, $call25 = 0, $call29 = 0, $call9 = 0, $defaultFShaderStr = 0, $defaultVShaderStr = 0, $i = 0, $shader = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $vararg_buffer1 = sp + 8 | 0;
 $vararg_buffer = sp;
 $shader = sp + 24 | 0;
 $i = sp + 20 | 0;
 $defaultVShaderStr = sp + 16 | 0;
 $defaultFShaderStr = sp + 12 | 0;
 HEAP32[$shader >> 2] = 0;
 HEAP32[$shader + 4 >> 2] = 0;
 HEAP32[$shader + 4 >> 2] = _calloc(32, 4) | 0;
 HEAP32[$i >> 2] = 0;
 while (1) {
  if ((HEAP32[$i >> 2] | 0) >= 32) break;
  HEAP32[(HEAP32[$shader + 4 >> 2] | 0) + (HEAP32[$i >> 2] << 2) >> 2] = -1;
  HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
 }
 HEAP32[$defaultVShaderStr >> 2] = 30009;
 HEAP32[$defaultFShaderStr >> 2] = 30492;
 HEAP32[14933] = _CompileShader(HEAP32[$defaultVShaderStr >> 2] | 0, 35633) | 0;
 HEAP32[14934] = _CompileShader(HEAP32[$defaultFShaderStr >> 2] | 0, 35632) | 0;
 HEAP32[$shader >> 2] = _LoadShaderProgram(HEAP32[14933] | 0, HEAP32[14934] | 0) | 0;
 $9 = HEAP32[$shader >> 2] | 0;
 if ((HEAP32[$shader >> 2] | 0) >>> 0 > 0) {
  HEAP32[$vararg_buffer >> 2] = $9;
  _TraceLog(3, 30933, $vararg_buffer);
  $call9 = _glGetAttribLocation(HEAP32[$shader >> 2] | 0, 30981) | 0;
  HEAP32[HEAP32[$shader + 4 >> 2] >> 2] = $call9;
  $call13 = _glGetAttribLocation(HEAP32[$shader >> 2] | 0, 30996) | 0;
  HEAP32[(HEAP32[$shader + 4 >> 2] | 0) + 4 >> 2] = $call13;
  $call17 = _glGetAttribLocation(HEAP32[$shader >> 2] | 0, 31011) | 0;
  HEAP32[(HEAP32[$shader + 4 >> 2] | 0) + 20 >> 2] = $call17;
  $call21 = _glGetUniformLocation(HEAP32[$shader >> 2] | 0, 31023) | 0;
  HEAP32[(HEAP32[$shader + 4 >> 2] | 0) + 24 >> 2] = $call21;
  $call25 = _glGetUniformLocation(HEAP32[$shader >> 2] | 0, 31027) | 0;
  HEAP32[(HEAP32[$shader + 4 >> 2] | 0) + 44 >> 2] = $call25;
  $call29 = _glGetUniformLocation(HEAP32[$shader >> 2] | 0, 31038) | 0;
  HEAP32[(HEAP32[$shader + 4 >> 2] | 0) + 56 >> 2] = $call29;
  HEAP32[$agg$result >> 2] = HEAP32[$shader >> 2];
  HEAP32[$agg$result + 4 >> 2] = HEAP32[$shader + 4 >> 2];
  STACKTOP = sp;
  return;
 } else {
  HEAP32[$vararg_buffer1 >> 2] = $9;
  _TraceLog(4, 31047, $vararg_buffer1);
  HEAP32[$agg$result >> 2] = HEAP32[$shader >> 2];
  HEAP32[$agg$result + 4 >> 2] = HEAP32[$shader + 4 >> 2];
  STACKTOP = sp;
  return;
 }
}

function __ZNSt3__227__tree_balance_after_insertIPNS_16__tree_node_baseIPvEEEEvT_S5_($__root, $__x) {
 $__root = $__root | 0;
 $__x = $__x | 0;
 var $$pre = 0, $$pre78 = 0, $0 = 0, $11 = 0, $2 = 0, $3 = 0, $5 = 0, $8 = 0, $__is_black_11 = 0, $__is_black_2 = 0, $__is_black_29$pre$phiZ2D = 0, $__is_black_41 = 0, $__is_black_41$sink = 0, $__is_black_61$pre$phiZ2D = 0, $__x$addr$069 = 0, $cmp = 0, label = 0;
 label = 0;
 $cmp = ($__x | 0) == ($__root | 0);
 HEAP8[$__x + 12 >> 0] = $cmp & 1;
 L1 : do if (!$cmp) {
  $__x$addr$069 = $__x;
  while (1) {
   $0 = HEAP32[$__x$addr$069 + 8 >> 2] | 0;
   $__is_black_2 = $0 + 12 | 0;
   if (HEAP8[$__is_black_2 >> 0] | 0) break L1;
   $2 = HEAP32[$0 + 8 >> 2] | 0;
   $3 = HEAP32[$2 >> 2] | 0;
   if (($3 | 0) == ($0 | 0)) {
    $5 = HEAP32[$2 + 4 >> 2] | 0;
    if (!$5) {
     label = 7;
     break;
    }
    $__is_black_11 = $5 + 12 | 0;
    if (!(HEAP8[$__is_black_11 >> 0] | 0)) $__is_black_41$sink = $__is_black_11; else {
     label = 7;
     break;
    }
   } else {
    if (!$3) {
     label = 12;
     break;
    }
    $__is_black_41 = $3 + 12 | 0;
    if (!(HEAP8[$__is_black_41 >> 0] | 0)) $__is_black_41$sink = $__is_black_41; else {
     label = 12;
     break;
    }
   }
   HEAP8[$__is_black_2 >> 0] = 1;
   HEAP8[$2 + 12 >> 0] = ($2 | 0) == ($__root | 0) & 1;
   HEAP8[$__is_black_41$sink >> 0] = 1;
   if (($2 | 0) == ($__root | 0)) break L1; else $__x$addr$069 = $2;
  }
  if ((label | 0) == 7) {
   if ((HEAP32[$0 >> 2] | 0) == ($__x$addr$069 | 0)) {
    $8 = $2;
    $__is_black_29$pre$phiZ2D = $__is_black_2;
   } else {
    __ZNSt3__218__tree_left_rotateIPNS_16__tree_node_baseIPvEEEEvT_($0);
    $$pre78 = HEAP32[$0 + 8 >> 2] | 0;
    $8 = HEAP32[$$pre78 + 8 >> 2] | 0;
    $__is_black_29$pre$phiZ2D = $$pre78 + 12 | 0;
   }
   HEAP8[$__is_black_29$pre$phiZ2D >> 0] = 1;
   HEAP8[$8 + 12 >> 0] = 0;
   __ZNSt3__219__tree_right_rotateIPNS_16__tree_node_baseIPvEEEEvT_($8);
   break;
  } else if ((label | 0) == 12) {
   if ((HEAP32[$0 >> 2] | 0) == ($__x$addr$069 | 0)) {
    __ZNSt3__219__tree_right_rotateIPNS_16__tree_node_baseIPvEEEEvT_($0);
    $$pre = HEAP32[$0 + 8 >> 2] | 0;
    $11 = HEAP32[$$pre + 8 >> 2] | 0;
    $__is_black_61$pre$phiZ2D = $$pre + 12 | 0;
   } else {
    $11 = $2;
    $__is_black_61$pre$phiZ2D = $__is_black_2;
   }
   HEAP8[$__is_black_61$pre$phiZ2D >> 0] = 1;
   HEAP8[$11 + 12 >> 0] = 0;
   __ZNSt3__218__tree_left_rotateIPNS_16__tree_node_baseIPvEEEEvT_($11);
   break;
  }
 } while (0);
 return;
}

function __ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this, $info, $current_ptr, $path_below, $use_strcmp) {
 $this = $this | 0;
 $info = $info | 0;
 $current_ptr = $current_ptr | 0;
 $path_below = $path_below | 0;
 $use_strcmp = $use_strcmp | 0;
 var $12 = 0, $5 = 0, $dst_ptr_not_leading_to_static_ptr = 0, $found_any_static_type = 0, $found_our_static_ptr = 0, $is_dst_type_derived_from_static_type = 0, $number_to_dst_ptr = 0, $tobool19 = 0;
 L1 : do if (__ZL8is_equalPKSt9type_infoS1_b($this, HEAP32[$info + 8 >> 2] | 0, $use_strcmp) | 0) __ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi(0, $info, $current_ptr, $path_below); else {
  if (!(__ZL8is_equalPKSt9type_infoS1_b($this, HEAP32[$info >> 2] | 0, $use_strcmp) | 0)) {
   $12 = HEAP32[$this + 8 >> 2] | 0;
   FUNCTION_TABLE_viiiii[HEAP32[(HEAP32[$12 >> 2] | 0) + 24 >> 2] & 15]($12, $info, $current_ptr, $path_below, $use_strcmp);
   break;
  }
  if ((HEAP32[$info + 16 >> 2] | 0) != ($current_ptr | 0)) {
   $dst_ptr_not_leading_to_static_ptr = $info + 20 | 0;
   if ((HEAP32[$dst_ptr_not_leading_to_static_ptr >> 2] | 0) != ($current_ptr | 0)) {
    HEAP32[$info + 32 >> 2] = $path_below;
    $is_dst_type_derived_from_static_type = $info + 44 | 0;
    do if ((HEAP32[$is_dst_type_derived_from_static_type >> 2] | 0) != 4) {
     $found_our_static_ptr = $info + 52 | 0;
     HEAP8[$found_our_static_ptr >> 0] = 0;
     $found_any_static_type = $info + 53 | 0;
     HEAP8[$found_any_static_type >> 0] = 0;
     $5 = HEAP32[$this + 8 >> 2] | 0;
     FUNCTION_TABLE_viiiiii[HEAP32[(HEAP32[$5 >> 2] | 0) + 20 >> 2] & 15]($5, $info, $current_ptr, $current_ptr, 1, $use_strcmp);
     if (!(HEAP8[$found_any_static_type >> 0] | 0)) {
      HEAP32[$is_dst_type_derived_from_static_type >> 2] = 4;
      break;
     } else {
      $tobool19 = (HEAP8[$found_our_static_ptr >> 0] | 0) == 0;
      HEAP32[$is_dst_type_derived_from_static_type >> 2] = 3;
      if ($tobool19) break; else break L1;
     }
    } while (0);
    HEAP32[$dst_ptr_not_leading_to_static_ptr >> 2] = $current_ptr;
    $number_to_dst_ptr = $info + 40 | 0;
    HEAP32[$number_to_dst_ptr >> 2] = (HEAP32[$number_to_dst_ptr >> 2] | 0) + 1;
    if ((HEAP32[$info + 36 >> 2] | 0) != 1) break;
    if ((HEAP32[$info + 24 >> 2] | 0) != 2) break;
    HEAP8[$info + 54 >> 0] = 1;
    break;
   }
  }
  if (($path_below | 0) == 1) HEAP32[$info + 32 >> 2] = 1;
 } while (0);
 return;
}

function __ZNSt3__216__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($__s, $__ob, $__op, $__oe, $__iob, $__fl) {
 $__s = $__s | 0;
 $__ob = $__ob | 0;
 $__op = $__op | 0;
 $__oe = $__oe | 0;
 $__iob = $__iob | 0;
 $__fl = $__fl | 0;
 var $0 = 0, $1 = 0, $__ns$0 = 0, $__sp = 0, $__width_$i = 0, $retval$sroa$0$2 = 0, $sub$ptr$div = 0, $sub$ptr$div31 = 0, $sub$ptr$div7 = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$lhs$cast4 = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$sub30 = 0, $sub$ptr$sub6 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $__sp = sp;
 $0 = HEAP32[$__s >> 2] | 0;
 L1 : do if (!$0) $retval$sroa$0$2 = 0; else {
  $sub$ptr$lhs$cast = $__oe;
  $sub$ptr$rhs$cast = $__ob;
  $sub$ptr$div = $sub$ptr$lhs$cast - $sub$ptr$rhs$cast >> 2;
  $__width_$i = $__iob + 12 | 0;
  $1 = HEAP32[$__width_$i >> 2] | 0;
  $__ns$0 = ($1 | 0) > ($sub$ptr$div | 0) ? $1 - $sub$ptr$div | 0 : 0;
  $sub$ptr$lhs$cast4 = $__op;
  $sub$ptr$sub6 = $sub$ptr$lhs$cast4 - $sub$ptr$rhs$cast | 0;
  $sub$ptr$div7 = $sub$ptr$sub6 >> 2;
  if (($sub$ptr$sub6 | 0) > 0) if ((FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$0 >> 2] | 0) + 48 >> 2] & 63]($0, $__ob, $sub$ptr$div7) | 0) != ($sub$ptr$div7 | 0)) {
   HEAP32[$__s >> 2] = 0;
   $retval$sroa$0$2 = 0;
   break;
  }
  do if (($__ns$0 | 0) > 0) {
   HEAP32[$__sp >> 2] = 0;
   HEAP32[$__sp + 4 >> 2] = 0;
   HEAP32[$__sp + 8 >> 2] = 0;
   __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEmw($__sp, $__ns$0, $__fl);
   if ((FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$0 >> 2] | 0) + 48 >> 2] & 63]($0, (HEAP8[$__sp + 8 + 3 >> 0] | 0) < 0 ? HEAP32[$__sp >> 2] | 0 : $__sp, $__ns$0) | 0) == ($__ns$0 | 0)) {
    __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($__sp);
    break;
   } else {
    HEAP32[$__s >> 2] = 0;
    __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($__sp);
    $retval$sroa$0$2 = 0;
    break L1;
   }
  } while (0);
  $sub$ptr$sub30 = $sub$ptr$lhs$cast - $sub$ptr$lhs$cast4 | 0;
  $sub$ptr$div31 = $sub$ptr$sub30 >> 2;
  if (($sub$ptr$sub30 | 0) > 0) if ((FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$0 >> 2] | 0) + 48 >> 2] & 63]($0, $__op, $sub$ptr$div31) | 0) != ($sub$ptr$div31 | 0)) {
   HEAP32[$__s >> 2] = 0;
   $retval$sroa$0$2 = 0;
   break;
  }
  HEAP32[$__width_$i >> 2] = 0;
  $retval$sroa$0$2 = $0;
 } while (0);
 STACKTOP = sp;
 return $retval$sroa$0$2 | 0;
}

function _rlEnableTexture($id) {
 $id = $id | 0;
 var $15 = 0, $arrayidx10 = 0, $arrayidx27 = 0, $arrayidx55 = 0, $cCounter = 0, $cond38 = 0, $id$addr = 0, $tcCounter = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $id$addr = sp;
 HEAP32[$id$addr >> 2] = $id;
 if ((HEAP32[(HEAP32[14845] | 0) + ((HEAP32[14846] | 0) - 1 << 4) + 12 >> 2] | 0) == (HEAP32[$id$addr >> 2] | 0)) {
  STACKTOP = sp;
  return;
 }
 do if ((HEAP32[(HEAP32[14845] | 0) + ((HEAP32[14846] | 0) - 1 << 4) + 4 >> 2] | 0) > 0) {
  $arrayidx10 = (HEAP32[14845] | 0) + ((HEAP32[14846] | 0) - 1 << 4) | 0;
  do if ((HEAP32[(HEAP32[14845] | 0) + ((HEAP32[14846] | 0) - 1 << 4) >> 2] | 0) == 1) {
   $15 = HEAP32[(HEAP32[14845] | 0) + ((HEAP32[14846] | 0) - 1 << 4) + 4 >> 2] | 0;
   HEAP32[(HEAP32[14845] | 0) + ((HEAP32[14846] | 0) - 1 << 4) + 8 >> 2] = (HEAP32[$arrayidx10 + 4 >> 2] | 0) < 4 ? $15 : ($15 | 0) % 4 | 0;
  } else {
   $arrayidx27 = (HEAP32[14845] | 0) + ((HEAP32[14846] | 0) - 1 << 4) | 0;
   if ((HEAP32[$arrayidx10 >> 2] | 0) != 4) {
    HEAP32[$arrayidx27 + 8 >> 2] = 0;
    break;
   }
   if ((HEAP32[$arrayidx27 + 4 >> 2] | 0) < 4) $cond38 = 1; else $cond38 = 4 - ((HEAP32[(HEAP32[14845] | 0) + ((HEAP32[14846] | 0) - 1 << 4) + 4 >> 2] | 0) % 4 | 0) | 0;
   HEAP32[(HEAP32[14845] | 0) + ((HEAP32[14846] | 0) - 1 << 4) + 8 >> 2] = $cond38;
  } while (0);
  if (_rlCheckBufferLimit(HEAP32[(HEAP32[14845] | 0) + ((HEAP32[14846] | 0) - 1 << 4) + 8 >> 2] | 0) | 0) {
   _rlglDraw();
   break;
  } else {
   $arrayidx55 = 47408 + ((HEAP32[14847] | 0) * 48 | 0) | 0;
   HEAP32[$arrayidx55 >> 2] = (HEAP32[$arrayidx55 >> 2] | 0) + (HEAP32[(HEAP32[14845] | 0) + ((HEAP32[14846] | 0) - 1 << 4) + 8 >> 2] | 0);
   $cCounter = 47408 + ((HEAP32[14847] | 0) * 48 | 0) + 8 | 0;
   HEAP32[$cCounter >> 2] = (HEAP32[$cCounter >> 2] | 0) + (HEAP32[(HEAP32[14845] | 0) + ((HEAP32[14846] | 0) - 1 << 4) + 8 >> 2] | 0);
   $tcCounter = 47408 + ((HEAP32[14847] | 0) * 48 | 0) + 4 | 0;
   HEAP32[$tcCounter >> 2] = (HEAP32[$tcCounter >> 2] | 0) + (HEAP32[(HEAP32[14845] | 0) + ((HEAP32[14846] | 0) - 1 << 4) + 8 >> 2] | 0);
   HEAP32[14846] = (HEAP32[14846] | 0) + 1;
   break;
  }
 } while (0);
 if ((HEAP32[14846] | 0) >= 256) _rlglDraw();
 HEAP32[(HEAP32[14845] | 0) + ((HEAP32[14846] | 0) - 1 << 4) + 12 >> 2] = HEAP32[$id$addr >> 2];
 HEAP32[(HEAP32[14845] | 0) + ((HEAP32[14846] | 0) - 1 << 4) + 4 >> 2] = 0;
 STACKTOP = sp;
 return;
}

function _DrawTextureRec($texture, $sourceRec, $position, $tint) {
 $texture = $texture | 0;
 $sourceRec = $sourceRec | 0;
 $position = $position | 0;
 $tint = $tint | 0;
 var $destRec = 0, $destRec$byval_copy = 0, $origin = 0, $origin$byval_copy = 0, $sourceRec$byval_copy = 0, $texture$byval_copy = 0, $tint$byval_copy = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(96);
 $tint$byval_copy = sp + 88 | 0;
 $origin$byval_copy = sp + 80 | 0;
 $destRec$byval_copy = sp + 64 | 0;
 $sourceRec$byval_copy = sp + 48 | 0;
 $texture$byval_copy = sp + 24 | 0;
 $destRec = sp + 8 | 0;
 $origin = sp;
 HEAPF32[$destRec >> 2] = Math_fround(HEAPF32[$position >> 2]);
 HEAPF32[$destRec + 4 >> 2] = Math_fround(HEAPF32[$position + 4 >> 2]);
 HEAPF32[$destRec + 8 >> 2] = Math_fround(+Math_abs(+(+Math_fround(HEAPF32[$sourceRec + 8 >> 2]))));
 HEAPF32[$destRec + 12 >> 2] = Math_fround(+Math_abs(+(+Math_fround(HEAPF32[$sourceRec + 12 >> 2]))));
 HEAP32[$origin >> 2] = 0;
 HEAP32[$origin + 4 >> 2] = 0;
 HEAP32[$texture$byval_copy >> 2] = HEAP32[$texture >> 2];
 HEAP32[$texture$byval_copy + 4 >> 2] = HEAP32[$texture + 4 >> 2];
 HEAP32[$texture$byval_copy + 8 >> 2] = HEAP32[$texture + 8 >> 2];
 HEAP32[$texture$byval_copy + 12 >> 2] = HEAP32[$texture + 12 >> 2];
 HEAP32[$texture$byval_copy + 16 >> 2] = HEAP32[$texture + 16 >> 2];
 HEAP32[$sourceRec$byval_copy >> 2] = HEAP32[$sourceRec >> 2];
 HEAP32[$sourceRec$byval_copy + 4 >> 2] = HEAP32[$sourceRec + 4 >> 2];
 HEAP32[$sourceRec$byval_copy + 8 >> 2] = HEAP32[$sourceRec + 8 >> 2];
 HEAP32[$sourceRec$byval_copy + 12 >> 2] = HEAP32[$sourceRec + 12 >> 2];
 HEAP32[$destRec$byval_copy >> 2] = HEAP32[$destRec >> 2];
 HEAP32[$destRec$byval_copy + 4 >> 2] = HEAP32[$destRec + 4 >> 2];
 HEAP32[$destRec$byval_copy + 8 >> 2] = HEAP32[$destRec + 8 >> 2];
 HEAP32[$destRec$byval_copy + 12 >> 2] = HEAP32[$destRec + 12 >> 2];
 HEAP32[$origin$byval_copy >> 2] = HEAP32[$origin >> 2];
 HEAP32[$origin$byval_copy + 4 >> 2] = HEAP32[$origin + 4 >> 2];
 HEAP8[$tint$byval_copy >> 0] = HEAP8[$tint >> 0] | 0;
 HEAP8[$tint$byval_copy + 1 >> 0] = HEAP8[$tint + 1 >> 0] | 0;
 HEAP8[$tint$byval_copy + 2 >> 0] = HEAP8[$tint + 2 >> 0] | 0;
 HEAP8[$tint$byval_copy + 3 >> 0] = HEAP8[$tint + 3 >> 0] | 0;
 _DrawTexturePro($texture$byval_copy, $sourceRec$byval_copy, $destRec$byval_copy, $origin$byval_copy, Math_fround(0.0), $tint$byval_copy);
 STACKTOP = sp;
 return;
}

function _DrawText($text, $posX, $posY, $fontSize, $color) {
 $text = $text | 0;
 $posX = $posX | 0;
 $posY = $posY | 0;
 $fontSize = $fontSize | 0;
 $color = $color | 0;
 var $8 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $color$byval_copy = 0, $conv5 = f0, $conv6 = f0, $defaultFontSize = 0, $fontSize$addr = 0, $posX$addr = 0, $posY$addr = 0, $position = 0, $position$byval_copy = 0, $spacing = 0, $text$addr = 0, $tmp = 0, dest = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(160);
 $color$byval_copy = sp + 152 | 0;
 $position$byval_copy = sp + 144 | 0;
 $agg$tmp$byval_copy = sp + 108 | 0;
 $text$addr = sp + 104 | 0;
 $posX$addr = sp + 100 | 0;
 $posY$addr = sp + 96 | 0;
 $fontSize$addr = sp + 92 | 0;
 $tmp = sp + 56 | 0;
 $position = sp + 48 | 0;
 $defaultFontSize = sp + 40 | 0;
 $spacing = sp + 36 | 0;
 $agg$tmp = sp;
 HEAP32[$text$addr >> 2] = $text;
 HEAP32[$posX$addr >> 2] = $posX;
 HEAP32[$posY$addr >> 2] = $posY;
 HEAP32[$fontSize$addr >> 2] = $fontSize;
 _GetFontDefault($tmp);
 if (!(HEAP32[$tmp + 8 >> 2] | 0)) {
  STACKTOP = sp;
  return;
 }
 HEAPF32[$position >> 2] = Math_fround(HEAP32[$posX$addr >> 2] | 0);
 HEAPF32[$position + 4 >> 2] = Math_fround(HEAP32[$posY$addr >> 2] | 0);
 HEAP32[$defaultFontSize >> 2] = 10;
 if ((HEAP32[$fontSize$addr >> 2] | 0) < (HEAP32[$defaultFontSize >> 2] | 0)) HEAP32[$fontSize$addr >> 2] = HEAP32[$defaultFontSize >> 2];
 HEAP32[$spacing >> 2] = (HEAP32[$fontSize$addr >> 2] | 0) / (HEAP32[$defaultFontSize >> 2] | 0) | 0;
 _GetFontDefault($agg$tmp);
 $8 = HEAP32[$text$addr >> 2] | 0;
 $conv5 = Math_fround(HEAP32[$fontSize$addr >> 2] | 0);
 $conv6 = Math_fround(HEAP32[$spacing >> 2] | 0);
 dest = $agg$tmp$byval_copy;
 src = $agg$tmp;
 stop = dest + 36 | 0;
 do {
  HEAP32[dest >> 2] = HEAP32[src >> 2];
  dest = dest + 4 | 0;
  src = src + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP32[$position$byval_copy >> 2] = HEAP32[$position >> 2];
 HEAP32[$position$byval_copy + 4 >> 2] = HEAP32[$position + 4 >> 2];
 HEAP8[$color$byval_copy >> 0] = HEAP8[$color >> 0] | 0;
 HEAP8[$color$byval_copy + 1 >> 0] = HEAP8[$color + 1 >> 0] | 0;
 HEAP8[$color$byval_copy + 2 >> 0] = HEAP8[$color + 2 >> 0] | 0;
 HEAP8[$color$byval_copy + 3 >> 0] = HEAP8[$color + 3 >> 0] | 0;
 _DrawTextEx($agg$tmp$byval_copy, $8, $position$byval_copy, $conv5, $conv6, $color$byval_copy);
 STACKTOP = sp;
 return;
}

function __ZNSt3__216__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping, $__g, $__g_end, $__err) {
 $__grouping = $__grouping | 0;
 $__g = $__g | 0;
 $__g_end = $__g_end | 0;
 $__err = $__err | 0;
 var $$pre = 0, $0 = 0, $1 = 0, $2 = 0, $4 = 0, $6 = 0, $7 = 0, $__first$addr$0$i$i = 0, $__ig$0 = 0, $__last$addr$0$i$i = 0, $__r$0 = 0, $__size_$i$i = 0, $__size_$i3$i = 0, $add$ptr3 = 0, $cond$i$i30 = 0, $conv$i$i = 0, $conv$i$i26$pre$phiZZZ2D = 0, $incdec$ptr$i$i = 0, $or$cond32 = 0, $sub$ptr$lhs$cast = 0, $tobool$i$i$i = 0, label = 0, CSE$0 = 0;
 label = 0;
 $__size_$i$i = $__grouping + 11 | 0;
 $0 = HEAP8[$__size_$i$i >> 0] | 0;
 $__size_$i3$i = $__grouping + 4 | 0;
 $1 = HEAP32[$__size_$i3$i >> 2] | 0;
 $conv$i$i = $0 & 255;
 do if (($0 << 24 >> 24 < 0 ? $1 : $conv$i$i) | 0) {
  if (($__g | 0) == ($__g_end | 0)) {
   $4 = $0;
   $6 = $1;
   $conv$i$i26$pre$phiZZZ2D = $conv$i$i;
  } else {
   $__first$addr$0$i$i = $__g;
   $__last$addr$0$i$i = $__g_end;
   while (1) {
    $incdec$ptr$i$i = $__last$addr$0$i$i + -4 | 0;
    if ($__first$addr$0$i$i >>> 0 >= $incdec$ptr$i$i >>> 0) break;
    $2 = HEAP32[$__first$addr$0$i$i >> 2] | 0;
    HEAP32[$__first$addr$0$i$i >> 2] = HEAP32[$incdec$ptr$i$i >> 2];
    HEAP32[$incdec$ptr$i$i >> 2] = $2;
    $__first$addr$0$i$i = $__first$addr$0$i$i + 4 | 0;
    $__last$addr$0$i$i = $incdec$ptr$i$i;
   }
   $$pre = HEAP8[$__size_$i$i >> 0] | 0;
   $4 = $$pre;
   $6 = HEAP32[$__size_$i3$i >> 2] | 0;
   $conv$i$i26$pre$phiZZZ2D = $$pre & 255;
  }
  $tobool$i$i$i = $4 << 24 >> 24 < 0;
  $cond$i$i30 = $tobool$i$i$i ? HEAP32[$__grouping >> 2] | 0 : $__grouping;
  $add$ptr3 = $__g_end + -4 | 0;
  $sub$ptr$lhs$cast = $cond$i$i30 + ($tobool$i$i$i ? $6 : $conv$i$i26$pre$phiZZZ2D) | 0;
  $__ig$0 = $cond$i$i30;
  $__r$0 = $__g;
  while (1) {
   $7 = HEAP8[$__ig$0 >> 0] | 0;
   CSE$0 = $7 << 24 >> 24 | 0;
   $or$cond32 = (CSE$0 | 0) > 0 & (CSE$0 | 0) != 127;
   if ($__r$0 >>> 0 >= $add$ptr3 >>> 0) break;
   if ($or$cond32) if ((HEAP32[$__r$0 >> 2] | 0) != ($7 << 24 >> 24 | 0)) {
    label = 11;
    break;
   }
   $__ig$0 = ($sub$ptr$lhs$cast - $__ig$0 | 0) > 1 ? $__ig$0 + 1 | 0 : $__ig$0;
   $__r$0 = $__r$0 + 4 | 0;
  }
  if ((label | 0) == 11) {
   HEAP32[$__err >> 2] = 4;
   break;
  }
  if ($or$cond32) if (((HEAP32[$add$ptr3 >> 2] | 0) + -1 | 0) >>> 0 >= $7 << 24 >> 24 >>> 0) HEAP32[$__err >> 2] = 4;
 } while (0);
 return;
}

function __ZNSt3__214__copy_alignedINS_6vectorIbNS_9allocatorIbEEEELb0EEENS_14__bit_iteratorIT_Lb0EXLi0EEEENS5_IS6_XT0_EXLi0EEEES8_S7_($agg$result, $__first, $__last, $__result) {
 $agg$result = $agg$result | 0;
 $__first = $__first | 0;
 $__last = $__last | 0;
 $__result = $__result | 0;
 var $$sroa$speculated = 0, $1 = 0, $12 = 0, $17 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $7 = 0, $__ctz_12 = 0, $__n$0 = 0, $__seg_19$pre$phiZ2D = 0, $__seg_21$pre$phiZ2D = 0, $add = 0, $add$ptr26 = 0, $add$ptr30 = 0, $and = 0, $div18 = 0, $incdec$ptr = 0, $shr33 = 0, $sub = 0, $sub$i = 0, $sub24 = 0;
 $1 = HEAP32[$__first >> 2] | 0;
 $3 = HEAP32[$__first + 4 >> 2] | 0;
 $sub$i = ((HEAP32[$__last >> 2] | 0) - $1 << 3) + (HEAP32[$__last + 4 >> 2] | 0) - $3 | 0;
 $4 = $1;
 $5 = $1;
 if (($sub$i | 0) > 0) {
  if (!$3) {
   $12 = $5;
   $__n$0 = $sub$i;
   $__seg_19$pre$phiZ2D = $__result;
   $__seg_21$pre$phiZ2D = $__first;
  } else {
   $sub = 32 - $3 | 0;
   $$sroa$speculated = ($sub$i | 0) < ($sub | 0) ? $sub$i : $sub;
   $and = -1 >>> ($sub - $$sroa$speculated | 0) & -1 << $3;
   $7 = HEAP32[$__result >> 2] | 0;
   HEAP32[$7 >> 2] = HEAP32[$7 >> 2] & ~$and | HEAP32[$4 >> 2] & $and;
   $__ctz_12 = $__result + 4 | 0;
   $add = (HEAP32[$__ctz_12 >> 2] | 0) + $$sroa$speculated | 0;
   HEAP32[$__result >> 2] = $7 + ($add >>> 5 << 2);
   HEAP32[$__ctz_12 >> 2] = $add & 31;
   $incdec$ptr = (HEAP32[$__first >> 2] | 0) + 4 | 0;
   HEAP32[$__first >> 2] = $incdec$ptr;
   $12 = $incdec$ptr;
   $__n$0 = $sub$i - $$sroa$speculated | 0;
   $__seg_19$pre$phiZ2D = $__result;
   $__seg_21$pre$phiZ2D = $__first;
  }
  $div18 = ($__n$0 | 0) / 32 | 0;
  _memmove(HEAP32[$__result >> 2] | 0, $12 | 0, $div18 << 2 | 0) | 0;
  $sub24 = $__n$0 - ($div18 << 5) | 0;
  $add$ptr26 = (HEAP32[$__seg_19$pre$phiZ2D >> 2] | 0) + ($div18 << 2) | 0;
  HEAP32[$__seg_19$pre$phiZ2D >> 2] = $add$ptr26;
  if (($sub24 | 0) > 0) {
   $add$ptr30 = (HEAP32[$__seg_21$pre$phiZ2D >> 2] | 0) + ($div18 << 2) | 0;
   HEAP32[$__seg_21$pre$phiZ2D >> 2] = $add$ptr30;
   $shr33 = -1 >>> (32 - $sub24 | 0);
   $17 = HEAP32[$__seg_19$pre$phiZ2D >> 2] | 0;
   HEAP32[$17 >> 2] = HEAP32[$17 >> 2] & ~$shr33 | HEAP32[$add$ptr30 >> 2] & $shr33;
   HEAP32[$__result + 4 >> 2] = $sub24;
   $20 = $17;
  } else $20 = $add$ptr26;
 } else $20 = HEAP32[$__result >> 2] | 0;
 HEAP32[$agg$result >> 2] = $20;
 HEAP32[$agg$result + 4 >> 2] = HEAP32[$__result + 4 >> 2];
 return;
}

function _LoadTexture($agg$result, $fileName) {
 $agg$result = $agg$result | 0;
 $fileName = $fileName | 0;
 var $fileName$addr = 0, $image = 0, $image$byval_copy1 = 0, $texture = 0, $tmp = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(96);
 $image$byval_copy1 = sp + 68 | 0;
 $fileName$addr = sp + 64 | 0;
 $texture = sp + 44 | 0;
 $image = sp + 24 | 0;
 $tmp = sp + 4 | 0;
 HEAP32[$fileName$addr >> 2] = $fileName;
 HEAP32[$texture >> 2] = 0;
 HEAP32[$texture + 4 >> 2] = 0;
 HEAP32[$texture + 8 >> 2] = 0;
 HEAP32[$texture + 12 >> 2] = 0;
 HEAP32[$texture + 16 >> 2] = 0;
 _LoadImage($image, HEAP32[$fileName$addr >> 2] | 0);
 if (HEAP32[$image >> 2] | 0) {
  HEAP32[$image$byval_copy1 >> 2] = HEAP32[$image >> 2];
  HEAP32[$image$byval_copy1 + 4 >> 2] = HEAP32[$image + 4 >> 2];
  HEAP32[$image$byval_copy1 + 8 >> 2] = HEAP32[$image + 8 >> 2];
  HEAP32[$image$byval_copy1 + 12 >> 2] = HEAP32[$image + 12 >> 2];
  HEAP32[$image$byval_copy1 + 16 >> 2] = HEAP32[$image + 16 >> 2];
  _LoadTextureFromImage($tmp, $image$byval_copy1);
  HEAP32[$texture >> 2] = HEAP32[$tmp >> 2];
  HEAP32[$texture + 4 >> 2] = HEAP32[$tmp + 4 >> 2];
  HEAP32[$texture + 8 >> 2] = HEAP32[$tmp + 8 >> 2];
  HEAP32[$texture + 12 >> 2] = HEAP32[$tmp + 12 >> 2];
  HEAP32[$texture + 16 >> 2] = HEAP32[$tmp + 16 >> 2];
  HEAP32[$image$byval_copy1 >> 2] = HEAP32[$image >> 2];
  HEAP32[$image$byval_copy1 + 4 >> 2] = HEAP32[$image + 4 >> 2];
  HEAP32[$image$byval_copy1 + 8 >> 2] = HEAP32[$image + 8 >> 2];
  HEAP32[$image$byval_copy1 + 12 >> 2] = HEAP32[$image + 12 >> 2];
  HEAP32[$image$byval_copy1 + 16 >> 2] = HEAP32[$image + 16 >> 2];
  _UnloadImage($image$byval_copy1);
  HEAP32[$agg$result >> 2] = HEAP32[$texture >> 2];
  HEAP32[$agg$result + 4 >> 2] = HEAP32[$texture + 4 >> 2];
  HEAP32[$agg$result + 8 >> 2] = HEAP32[$texture + 8 >> 2];
  HEAP32[$agg$result + 12 >> 2] = HEAP32[$texture + 12 >> 2];
  HEAP32[$agg$result + 16 >> 2] = HEAP32[$texture + 16 >> 2];
  STACKTOP = sp;
  return;
 } else {
  _TraceLog(4, 37579, sp);
  HEAP32[$agg$result >> 2] = HEAP32[$texture >> 2];
  HEAP32[$agg$result + 4 >> 2] = HEAP32[$texture + 4 >> 2];
  HEAP32[$agg$result + 8 >> 2] = HEAP32[$texture + 8 >> 2];
  HEAP32[$agg$result + 12 >> 2] = HEAP32[$texture + 12 >> 2];
  HEAP32[$agg$result + 16 >> 2] = HEAP32[$texture + 16 >> 2];
  STACKTOP = sp;
  return;
 }
}

function __ZNK8nlohmann6detail9iter_implIKNS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEEdeEv($this) {
 $this = $this | 0;
 var $0 = 0, $3 = 0, $6 = 0, $exception = 0, $exception33 = 0, $ref$tmp25 = 0, $retval$0 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $ref$tmp25 = sp;
 $0 = HEAP32[$this >> 2] | 0;
 if (!$0) ___assert_fail(23450, 22221, 9395, 23481);
 L4 : do switch (HEAP8[$0 >> 0] | 0) {
 case 1:
  {
   $3 = HEAP32[$this + 4 >> 2] | 0;
   if (($3 | 0) == ((HEAP32[$0 + 8 >> 2] | 0) + 4 | 0)) ___assert_fail(23491, 22221, 9401, 23481); else {
    $retval$0 = (__ZNSt3__29__launderINS_4pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8nlohmann10basic_jsonINS_3mapENS_6vectorES7_bxydS5_NS9_14adl_serializerEEEEEEEPT_SH_($3 + 16 | 0) | 0) + 16 | 0;
    break L4;
   }
   break;
  }
 case 2:
  {
   $6 = HEAP32[$this + 8 >> 2] | 0;
   if (($6 | 0) == (HEAP32[(HEAP32[$0 + 8 >> 2] | 0) + 4 >> 2] | 0)) ___assert_fail(23547, 22221, 9407, 23481); else $retval$0 = $6;
   break;
  }
 case 0:
  {
   $exception = ___cxa_allocate_exception(16) | 0;
   HEAP32[$ref$tmp25 >> 2] = 0;
   HEAP32[$ref$tmp25 + 4 >> 2] = 0;
   HEAP32[$ref$tmp25 + 8 >> 2] = 0;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcm($ref$tmp25, 23601, __ZNSt3__211char_traitsIcE6lengthEPKc(23601) | 0);
   __ZN8nlohmann6detail16invalid_iterator6createEiRKNSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE($exception, 214, $ref$tmp25);
   ___cxa_throw($exception | 0, 15064, 9);
   break;
  }
 default:
  if (__ZNK8nlohmann6detail20primitive_iterator_t8is_beginEv($this + 12 | 0) | 0) {
   $retval$0 = HEAP32[$this >> 2] | 0;
   break L4;
  } else {
   $exception33 = ___cxa_allocate_exception(16) | 0;
   HEAP32[$ref$tmp25 >> 2] = 0;
   HEAP32[$ref$tmp25 + 4 >> 2] = 0;
   HEAP32[$ref$tmp25 + 8 >> 2] = 0;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcm($ref$tmp25, 23601, __ZNSt3__211char_traitsIcE6lengthEPKc(23601) | 0);
   __ZN8nlohmann6detail16invalid_iterator6createEiRKNSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE($exception33, 214, $ref$tmp25);
   ___cxa_throw($exception33 | 0, 15064, 9);
  }
 } while (0);
 STACKTOP = sp;
 return $retval$0 | 0;
}

function __ZN8nlohmann6detail9exception4nameERKNSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEi($agg$result, $ename, $id_) {
 $agg$result = $agg$result | 0;
 $ename = $ename | 0;
 $id_ = $id_ | 0;
 var $0 = 0, $call$i1 = 0, $call$i3 = 0, $call3$i$i2 = 0, $ref$tmp = 0, $ref$tmp1 = 0, $ref$tmp2 = 0, $ref$tmp3 = 0, $tobool$i$i$i$i$i = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 $ref$tmp = sp + 36 | 0;
 $ref$tmp1 = sp + 24 | 0;
 $ref$tmp2 = sp + 12 | 0;
 $ref$tmp3 = sp;
 __ZNSt3__2plIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_12basic_stringIT_T0_T1_EEPKS6_RKS9_($ref$tmp2, 22808, $ename);
 $call$i1 = __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc($ref$tmp2, 38529) | 0;
 HEAP32[$ref$tmp1 >> 2] = HEAP32[$call$i1 >> 2];
 HEAP32[$ref$tmp1 + 4 >> 2] = HEAP32[$call$i1 + 4 >> 2];
 HEAP32[$ref$tmp1 + 8 >> 2] = HEAP32[$call$i1 + 8 >> 2];
 HEAP32[$call$i1 >> 2] = 0;
 HEAP32[$call$i1 + 4 >> 2] = 0;
 HEAP32[$call$i1 + 8 >> 2] = 0;
 __ZNSt3__29to_stringEi($ref$tmp3, $id_);
 $0 = HEAP8[$ref$tmp3 + 11 >> 0] | 0;
 $tobool$i$i$i$i$i = $0 << 24 >> 24 < 0;
 $call3$i$i2 = __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcm($ref$tmp1, $tobool$i$i$i$i$i ? HEAP32[$ref$tmp3 >> 2] | 0 : $ref$tmp3, $tobool$i$i$i$i$i ? HEAP32[$ref$tmp3 + 4 >> 2] | 0 : $0 & 255) | 0;
 HEAP32[$ref$tmp >> 2] = HEAP32[$call3$i$i2 >> 2];
 HEAP32[$ref$tmp + 4 >> 2] = HEAP32[$call3$i$i2 + 4 >> 2];
 HEAP32[$ref$tmp + 8 >> 2] = HEAP32[$call3$i$i2 + 8 >> 2];
 HEAP32[$call3$i$i2 >> 2] = 0;
 HEAP32[$call3$i$i2 + 4 >> 2] = 0;
 HEAP32[$call3$i$i2 + 8 >> 2] = 0;
 $call$i3 = __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc($ref$tmp, 22825) | 0;
 HEAP32[$agg$result >> 2] = HEAP32[$call$i3 >> 2];
 HEAP32[$agg$result + 4 >> 2] = HEAP32[$call$i3 + 4 >> 2];
 HEAP32[$agg$result + 8 >> 2] = HEAP32[$call$i3 + 8 >> 2];
 HEAP32[$call$i3 >> 2] = 0;
 HEAP32[$call$i3 + 4 >> 2] = 0;
 HEAP32[$call$i3 + 8 >> 2] = 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp3);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp1);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp2);
 STACKTOP = sp;
 return;
}

function _atanf($x) {
 $x = Math_fround($x);
 var $0 = 0, $1 = f0, $and = 0, $call28 = f0, $cond = f0, $id$0 = 0, $mul55 = f0, $mul56 = f0, $mul61 = f0, $mul64 = f0, $mul73 = f0, $retval$0 = f0, $shr = 0, $sub77 = f0, $sub80 = f0, $x$addr$0 = f0;
 $0 = (HEAPF32[tempDoublePtr >> 2] = $x, HEAP32[tempDoublePtr >> 2] | 0);
 $shr = $0 >>> 31;
 $and = $0 & 2147483647;
 if ($and >>> 0 > 1283457023) {
  $cond = ($shr | 0) == 0 ? Math_fround(1.57079625) : Math_fround(-1.57079625);
  return Math_fround($and >>> 0 > 2139095040 ? $x : $cond);
 }
 do if ($and >>> 0 < 1054867456) if ($and >>> 0 < 964689920) {
  $retval$0 = $x;
  return Math_fround($retval$0);
 } else {
  $id$0 = -1;
  $x$addr$0 = $x;
 } else {
  $call28 = Math_fround(Math_abs(Math_fround($x)));
  if ($and >>> 0 < 1066926080) if ($and >>> 0 < 1060110336) {
   $id$0 = 0;
   $x$addr$0 = Math_fround(Math_fround(Math_fround($call28 * Math_fround(2.0)) + Math_fround(-1.0)) / Math_fround($call28 + Math_fround(2.0)));
   break;
  } else {
   $id$0 = 1;
   $x$addr$0 = Math_fround(Math_fround($call28 + Math_fround(-1.0)) / Math_fround($call28 + Math_fround(1.0)));
   break;
  } else if ($and >>> 0 < 1075576832) {
   $id$0 = 2;
   $x$addr$0 = Math_fround(Math_fround($call28 + Math_fround(-1.5)) / Math_fround(Math_fround($call28 * Math_fround(1.5)) + Math_fround(1.0)));
   break;
  } else {
   $id$0 = 3;
   $x$addr$0 = Math_fround(Math_fround(-1.0) / $call28);
   break;
  }
 } while (0);
 $mul55 = Math_fround($x$addr$0 * $x$addr$0);
 $mul56 = Math_fround($mul55 * $mul55);
 $mul61 = Math_fround($mul55 * Math_fround(Math_fround($mul56 * Math_fround(Math_fround($mul56 * Math_fround(.0616876073)) + Math_fround(.142536357))) + Math_fround(.333333284)));
 $mul64 = Math_fround($mul56 * Math_fround(Math_fround(-.199991584) - Math_fround($mul56 * Math_fround(.106480174))));
 if (($id$0 | 0) < 0) {
  $retval$0 = Math_fround($x$addr$0 - Math_fround($x$addr$0 * Math_fround($mul64 + $mul61)));
  return Math_fround($retval$0);
 } else {
  $1 = Math_fround(HEAPF32[14640 + ($id$0 << 2) >> 2]);
  $mul73 = Math_fround($x$addr$0 * Math_fround($mul64 + $mul61));
  $sub77 = Math_fround($1 - Math_fround(Math_fround($mul73 - Math_fround(HEAPF32[14656 + ($id$0 << 2) >> 2])) - $x$addr$0));
  $sub80 = Math_fround(-$sub77);
  $retval$0 = ($shr | 0) == 0 ? $sub77 : $sub80;
  return Math_fround($retval$0);
 }
 return Math_fround(0.0);
}

function _GifSwapPixels($image, $pixA, $pixB) {
 $image = $image | 0;
 $pixA = $pixA | 0;
 $pixB = $pixB | 0;
 var $aA = 0, $aB = 0, $bA = 0, $bB = 0, $gA = 0, $gB = 0, $image$addr = 0, $pixA$addr = 0, $pixB$addr = 0, $rA = 0, $rB = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $image$addr = sp + 8 | 0;
 $pixA$addr = sp + 4 | 0;
 $pixB$addr = sp;
 $rA = sp + 19 | 0;
 $gA = sp + 18 | 0;
 $bA = sp + 17 | 0;
 $aA = sp + 16 | 0;
 $rB = sp + 15 | 0;
 $gB = sp + 14 | 0;
 $bB = sp + 13 | 0;
 $aB = sp + 12 | 0;
 HEAP32[$image$addr >> 2] = $image;
 HEAP32[$pixA$addr >> 2] = $pixA;
 HEAP32[$pixB$addr >> 2] = $pixB;
 HEAP8[$rA >> 0] = HEAP8[(HEAP32[$image$addr >> 2] | 0) + (HEAP32[$pixA$addr >> 2] << 2) >> 0] | 0;
 HEAP8[$gA >> 0] = HEAP8[(HEAP32[$image$addr >> 2] | 0) + ((HEAP32[$pixA$addr >> 2] << 2) + 1) >> 0] | 0;
 HEAP8[$bA >> 0] = HEAP8[(HEAP32[$image$addr >> 2] | 0) + ((HEAP32[$pixA$addr >> 2] << 2) + 2) >> 0] | 0;
 HEAP8[$aA >> 0] = HEAP8[(HEAP32[$image$addr >> 2] | 0) + ((HEAP32[$pixA$addr >> 2] << 2) + 3) >> 0] | 0;
 HEAP8[$rB >> 0] = HEAP8[(HEAP32[$image$addr >> 2] | 0) + (HEAP32[$pixB$addr >> 2] << 2) >> 0] | 0;
 HEAP8[$gB >> 0] = HEAP8[(HEAP32[$image$addr >> 2] | 0) + ((HEAP32[$pixB$addr >> 2] << 2) + 1) >> 0] | 0;
 HEAP8[$bB >> 0] = HEAP8[(HEAP32[$image$addr >> 2] | 0) + ((HEAP32[$pixB$addr >> 2] << 2) + 2) >> 0] | 0;
 HEAP8[$aB >> 0] = HEAP8[(HEAP32[$image$addr >> 2] | 0) + ((HEAP32[$pixA$addr >> 2] << 2) + 3) >> 0] | 0;
 HEAP8[(HEAP32[$image$addr >> 2] | 0) + (HEAP32[$pixA$addr >> 2] << 2) >> 0] = HEAP8[$rB >> 0] | 0;
 HEAP8[(HEAP32[$image$addr >> 2] | 0) + ((HEAP32[$pixA$addr >> 2] << 2) + 1) >> 0] = HEAP8[$gB >> 0] | 0;
 HEAP8[(HEAP32[$image$addr >> 2] | 0) + ((HEAP32[$pixA$addr >> 2] << 2) + 2) >> 0] = HEAP8[$bB >> 0] | 0;
 HEAP8[(HEAP32[$image$addr >> 2] | 0) + ((HEAP32[$pixA$addr >> 2] << 2) + 3) >> 0] = HEAP8[$aB >> 0] | 0;
 HEAP8[(HEAP32[$image$addr >> 2] | 0) + (HEAP32[$pixB$addr >> 2] << 2) >> 0] = HEAP8[$rA >> 0] | 0;
 HEAP8[(HEAP32[$image$addr >> 2] | 0) + ((HEAP32[$pixB$addr >> 2] << 2) + 1) >> 0] = HEAP8[$gA >> 0] | 0;
 HEAP8[(HEAP32[$image$addr >> 2] | 0) + ((HEAP32[$pixB$addr >> 2] << 2) + 2) >> 0] = HEAP8[$bA >> 0] | 0;
 HEAP8[(HEAP32[$image$addr >> 2] | 0) + ((HEAP32[$pixB$addr >> 2] << 2) + 3) >> 0] = HEAP8[$aA >> 0] | 0;
 STACKTOP = sp;
 return;
}

function _stbi__parse_zlib($a, $parse_header) {
 $a = $a | 0;
 $parse_header = $parse_header | 0;
 var $10 = 0, $a$addr = 0, $final = 0, $parse_header$addr = 0, $retval = 0, $type = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $retval = sp + 16 | 0;
 $a$addr = sp + 12 | 0;
 $parse_header$addr = sp + 8 | 0;
 $final = sp + 4 | 0;
 $type = sp;
 HEAP32[$a$addr >> 2] = $a;
 HEAP32[$parse_header$addr >> 2] = $parse_header;
 if (HEAP32[$parse_header$addr >> 2] | 0) if (_stbi__parse_zlib_header(HEAP32[$a$addr >> 2] | 0) | 0) label = 4; else HEAP32[$retval >> 2] = 0; else label = 4;
 do if ((label | 0) == 4) {
  HEAP32[(HEAP32[$a$addr >> 2] | 0) + 8 >> 2] = 0;
  HEAP32[(HEAP32[$a$addr >> 2] | 0) + 12 >> 2] = 0;
  while (1) {
   HEAP32[$final >> 2] = _stbi__zreceive(HEAP32[$a$addr >> 2] | 0, 1) | 0;
   HEAP32[$type >> 2] = _stbi__zreceive(HEAP32[$a$addr >> 2] | 0, 2) | 0;
   if (!(HEAP32[$type >> 2] | 0)) {
    if (!(_stbi__parse_uncompressed_block(HEAP32[$a$addr >> 2] | 0) | 0)) {
     label = 7;
     break;
    }
   } else {
    if ((HEAP32[$type >> 2] | 0) == 3) {
     label = 9;
     break;
    }
    $10 = HEAP32[$a$addr >> 2] | 0;
    if ((HEAP32[$type >> 2] | 0) == 1) {
     if (!(_stbi__zbuild_huffman($10 + 32 | 0, 4128, 288) | 0)) {
      label = 12;
      break;
     }
     if (!(_stbi__zbuild_huffman((HEAP32[$a$addr >> 2] | 0) + 2052 | 0, 4416, 32) | 0)) {
      label = 14;
      break;
     }
    } else if (!(_stbi__compute_huffman_codes($10) | 0)) {
     label = 16;
     break;
    }
    if (!(_stbi__parse_huffman_block(HEAP32[$a$addr >> 2] | 0) | 0)) {
     label = 18;
     break;
    }
   }
   if (!((HEAP32[$final >> 2] | 0) != 0 ^ 1)) {
    label = 20;
    break;
   }
  }
  if ((label | 0) == 7) {
   HEAP32[$retval >> 2] = 0;
   break;
  } else if ((label | 0) == 9) {
   HEAP32[$retval >> 2] = 0;
   break;
  } else if ((label | 0) == 12) {
   HEAP32[$retval >> 2] = 0;
   break;
  } else if ((label | 0) == 14) {
   HEAP32[$retval >> 2] = 0;
   break;
  } else if ((label | 0) == 16) {
   HEAP32[$retval >> 2] = 0;
   break;
  } else if ((label | 0) == 18) {
   HEAP32[$retval >> 2] = 0;
   break;
  } else if ((label | 0) == 20) {
   HEAP32[$retval >> 2] = 1;
   break;
  }
 } while (0);
 STACKTOP = sp;
 return HEAP32[$retval >> 2] | 0;
}

function ___stpcpy($d, $s) {
 $d = $d | 0;
 $s = $s | 0;
 var $0 = 0, $10 = 0, $4 = 0, $6 = 0, $7 = 0, $9 = 0, $d$addr$0$lcssa = 0, $d$addr$037 = 0, $d$addr$1 = 0, $d$addr$224 = 0, $incdec$ptr = 0, $incdec$ptr11 = 0, $incdec$ptr12 = 0, $incdec$ptr20 = 0, $incdec$ptr5 = 0, $retval$0 = 0, $s$addr$0$lcssa = 0, $s$addr$038 = 0, $s$addr$1 = 0, $s$addr$225 = 0, $wd$0$lcssa = 0, $wd$031 = 0, $ws$0$lcssa = 0, $ws$032 = 0, label = 0;
 label = 0;
 $0 = $s;
 L1 : do if (!(($0 ^ $d) & 3)) {
  if (!($0 & 3)) {
   $d$addr$0$lcssa = $d;
   $s$addr$0$lcssa = $s;
  } else {
   $d$addr$037 = $d;
   $s$addr$038 = $s;
   while (1) {
    $4 = HEAP8[$s$addr$038 >> 0] | 0;
    HEAP8[$d$addr$037 >> 0] = $4;
    if (!($4 << 24 >> 24)) {
     $retval$0 = $d$addr$037;
     break L1;
    }
    $incdec$ptr = $s$addr$038 + 1 | 0;
    $incdec$ptr5 = $d$addr$037 + 1 | 0;
    if (!($incdec$ptr & 3)) {
     $d$addr$0$lcssa = $incdec$ptr5;
     $s$addr$0$lcssa = $incdec$ptr;
     break;
    } else {
     $d$addr$037 = $incdec$ptr5;
     $s$addr$038 = $incdec$ptr;
    }
   }
  }
  $6 = HEAP32[$s$addr$0$lcssa >> 2] | 0;
  if (!(($6 & -2139062144 ^ -2139062144) & $6 + -16843009)) {
   $7 = $6;
   $wd$031 = $d$addr$0$lcssa;
   $ws$032 = $s$addr$0$lcssa;
   while (1) {
    $incdec$ptr11 = $ws$032 + 4 | 0;
    $incdec$ptr12 = $wd$031 + 4 | 0;
    HEAP32[$wd$031 >> 2] = $7;
    $7 = HEAP32[$incdec$ptr11 >> 2] | 0;
    if (($7 & -2139062144 ^ -2139062144) & $7 + -16843009 | 0) {
     $wd$0$lcssa = $incdec$ptr12;
     $ws$0$lcssa = $incdec$ptr11;
     break;
    } else {
     $wd$031 = $incdec$ptr12;
     $ws$032 = $incdec$ptr11;
    }
   }
  } else {
   $wd$0$lcssa = $d$addr$0$lcssa;
   $ws$0$lcssa = $s$addr$0$lcssa;
  }
  $d$addr$1 = $wd$0$lcssa;
  $s$addr$1 = $ws$0$lcssa;
  label = 10;
 } else {
  $d$addr$1 = $d;
  $s$addr$1 = $s;
  label = 10;
 } while (0);
 if ((label | 0) == 10) {
  $9 = HEAP8[$s$addr$1 >> 0] | 0;
  HEAP8[$d$addr$1 >> 0] = $9;
  if (!($9 << 24 >> 24)) $retval$0 = $d$addr$1; else {
   $d$addr$224 = $d$addr$1;
   $s$addr$225 = $s$addr$1;
   while (1) {
    $s$addr$225 = $s$addr$225 + 1 | 0;
    $incdec$ptr20 = $d$addr$224 + 1 | 0;
    $10 = HEAP8[$s$addr$225 >> 0] | 0;
    HEAP8[$incdec$ptr20 >> 0] = $10;
    if (!($10 << 24 >> 24)) {
     $retval$0 = $incdec$ptr20;
     break;
    } else $d$addr$224 = $incdec$ptr20;
   }
  }
 }
 return $retval$0 | 0;
}

function ___shgetc($f) {
 $f = $f | 0;
 var $$pre = 0, $0 = 0, $14 = 0, $2 = 0, $20 = 0, $22 = 0, $25 = 0, $30 = 0, $32 = 0, $33 = 0, $39 = 0, $40 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $51 = 0, $57 = 0, $58 = 0, $59 = 0, $64 = 0, $66 = 0, $9 = 0, $add = 0, $arrayidx = 0, $call = 0, $retval$0 = 0, $rpos33$phi$trans$insert = 0, $shcnt30 = 0, $shlim = 0, $sub$ptr$sub = 0, label = 0;
 label = 0;
 $shlim = $f + 112 | 0;
 $0 = $shlim;
 $2 = HEAP32[$0 >> 2] | 0;
 $5 = HEAP32[$0 + 4 >> 2] | 0;
 if (($2 | 0) == 0 & ($5 | 0) == 0) label = 3; else {
  $9 = $f + 120 | 0;
  $14 = HEAP32[$9 + 4 >> 2] | 0;
  if (($14 | 0) < ($5 | 0) | (($14 | 0) == ($5 | 0) ? (HEAP32[$9 >> 2] | 0) >>> 0 < $2 >>> 0 : 0)) label = 3; else label = 4;
 }
 if ((label | 0) == 3) {
  $call = ___uflow($f) | 0;
  if (($call | 0) < 0) label = 4; else {
   $20 = $shlim;
   $22 = HEAP32[$20 >> 2] | 0;
   $25 = HEAP32[$20 + 4 >> 2] | 0;
   $$pre = HEAP32[$f + 8 >> 2] | 0;
   if (($22 | 0) == 0 & ($25 | 0) == 0) {
    $66 = $$pre;
    label = 9;
   } else {
    $30 = HEAP32[$f + 4 >> 2] | 0;
    $sub$ptr$sub = $$pre - $30 | 0;
    $32 = (($sub$ptr$sub | 0) < 0) << 31 >> 31;
    $33 = $f + 120 | 0;
    $39 = _i64Subtract($22 | 0, $25 | 0, HEAP32[$33 >> 2] | 0, HEAP32[$33 + 4 >> 2] | 0) | 0;
    $40 = getTempRet0() | 0;
    $46 = $$pre;
    if (($40 | 0) > ($32 | 0) | ($40 | 0) == ($32 | 0) & $39 >>> 0 > $sub$ptr$sub >>> 0) {
     $66 = $46;
     label = 9;
    } else {
     HEAP32[$f + 104 >> 2] = $30 + ($39 + -1);
     $47 = $46;
    }
   }
   if ((label | 0) == 9) {
    HEAP32[$f + 104 >> 2] = $$pre;
    $47 = $66;
   }
   $rpos33$phi$trans$insert = $f + 4 | 0;
   if (!$47) $64 = HEAP32[$rpos33$phi$trans$insert >> 2] | 0; else {
    $48 = HEAP32[$rpos33$phi$trans$insert >> 2] | 0;
    $add = $47 + 1 - $48 | 0;
    $shcnt30 = $f + 120 | 0;
    $51 = $shcnt30;
    $57 = _i64Add(HEAP32[$51 >> 2] | 0, HEAP32[$51 + 4 >> 2] | 0, $add | 0, (($add | 0) < 0) << 31 >> 31 | 0) | 0;
    $58 = getTempRet0() | 0;
    $59 = $shcnt30;
    HEAP32[$59 >> 2] = $57;
    HEAP32[$59 + 4 >> 2] = $58;
    $64 = $48;
   }
   $arrayidx = $64 + -1 | 0;
   if (($call | 0) == (HEAPU8[$arrayidx >> 0] | 0 | 0)) $retval$0 = $call; else {
    HEAP8[$arrayidx >> 0] = $call;
    $retval$0 = $call;
   }
  }
 }
 if ((label | 0) == 4) {
  HEAP32[$f + 104 >> 2] = 0;
  $retval$0 = -1;
 }
 return $retval$0 | 0;
}

function __ZNSt3__216__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($__s, $__ob, $__op, $__oe, $__iob, $__fl) {
 $__s = $__s | 0;
 $__ob = $__ob | 0;
 $__op = $__op | 0;
 $__oe = $__oe | 0;
 $__iob = $__iob | 0;
 $__fl = $__fl | 0;
 var $0 = 0, $1 = 0, $__ns$0 = 0, $__sp = 0, $__width_$i = 0, $retval$sroa$0$2 = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$lhs$cast4 = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$sub = 0, $sub$ptr$sub29 = 0, $sub$ptr$sub6 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $__sp = sp;
 $0 = HEAP32[$__s >> 2] | 0;
 L1 : do if (!$0) $retval$sroa$0$2 = 0; else {
  $sub$ptr$lhs$cast = $__oe;
  $sub$ptr$rhs$cast = $__ob;
  $sub$ptr$sub = $sub$ptr$lhs$cast - $sub$ptr$rhs$cast | 0;
  $__width_$i = $__iob + 12 | 0;
  $1 = HEAP32[$__width_$i >> 2] | 0;
  $__ns$0 = ($1 | 0) > ($sub$ptr$sub | 0) ? $1 - $sub$ptr$sub | 0 : 0;
  $sub$ptr$lhs$cast4 = $__op;
  $sub$ptr$sub6 = $sub$ptr$lhs$cast4 - $sub$ptr$rhs$cast | 0;
  if (($sub$ptr$sub6 | 0) > 0) if ((FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$0 >> 2] | 0) + 48 >> 2] & 63]($0, $__ob, $sub$ptr$sub6) | 0) != ($sub$ptr$sub6 | 0)) {
   HEAP32[$__s >> 2] = 0;
   $retval$sroa$0$2 = 0;
   break;
  }
  do if (($__ns$0 | 0) > 0) {
   HEAP32[$__sp >> 2] = 0;
   HEAP32[$__sp + 4 >> 2] = 0;
   HEAP32[$__sp + 8 >> 2] = 0;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEmc($__sp, $__ns$0, $__fl);
   if ((FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$0 >> 2] | 0) + 48 >> 2] & 63]($0, (HEAP8[$__sp + 11 >> 0] | 0) < 0 ? HEAP32[$__sp >> 2] | 0 : $__sp, $__ns$0) | 0) == ($__ns$0 | 0)) {
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__sp);
    break;
   } else {
    HEAP32[$__s >> 2] = 0;
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__sp);
    $retval$sroa$0$2 = 0;
    break L1;
   }
  } while (0);
  $sub$ptr$sub29 = $sub$ptr$lhs$cast - $sub$ptr$lhs$cast4 | 0;
  if (($sub$ptr$sub29 | 0) > 0) if ((FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$0 >> 2] | 0) + 48 >> 2] & 63]($0, $__op, $sub$ptr$sub29) | 0) != ($sub$ptr$sub29 | 0)) {
   HEAP32[$__s >> 2] = 0;
   $retval$sroa$0$2 = 0;
   break;
  }
  HEAP32[$__width_$i >> 2] = 0;
  $retval$sroa$0$2 = $0;
 } while (0);
 STACKTOP = sp;
 return $retval$sroa$0$2 | 0;
}

function __ZN4tson4TileC2EOS0_($this, $0) {
 $this = $this | 0;
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $5 = 0, $__end_$i = 0, $__end_$i$i = 0, $__end_$i$i9 = 0, $__end_$i12 = 0, $__value_$i$i$i8$i = 0, $__value_$i$i$i8$i13 = 0, $__value_$i$i$i9$i = 0, $__value_$i$i$i9$i10 = 0, $m_image = 0, $m_image4 = 0, $m_terrain = 0, $m_terrain8 = 0, $m_type = 0, $m_type9 = 0;
 HEAP32[$this >> 2] = 0;
 $__end_$i$i = $this + 4 | 0;
 HEAP32[$__end_$i$i >> 2] = 0;
 $__value_$i$i$i9$i = $this + 8 | 0;
 HEAP32[$__value_$i$i$i9$i >> 2] = 0;
 HEAP32[$this >> 2] = HEAP32[$0 >> 2];
 $__end_$i = $0 + 4 | 0;
 HEAP32[$__end_$i$i >> 2] = HEAP32[$__end_$i >> 2];
 $__value_$i$i$i8$i = $0 + 8 | 0;
 HEAP32[$__value_$i$i$i9$i >> 2] = HEAP32[$__value_$i$i$i8$i >> 2];
 HEAP32[$__value_$i$i$i8$i >> 2] = 0;
 HEAP32[$__end_$i >> 2] = 0;
 HEAP32[$0 >> 2] = 0;
 HEAP32[$this + 12 >> 2] = HEAP32[$0 + 12 >> 2];
 $m_image = $this + 16 | 0;
 $m_image4 = $0 + 16 | 0;
 HEAP32[$m_image >> 2] = HEAP32[$m_image4 >> 2];
 HEAP32[$m_image + 4 >> 2] = HEAP32[$m_image4 + 4 >> 2];
 HEAP32[$m_image + 8 >> 2] = HEAP32[$m_image4 + 8 >> 2];
 HEAP32[$m_image4 >> 2] = 0;
 HEAP32[$m_image4 + 4 >> 2] = 0;
 HEAP32[$m_image4 + 8 >> 2] = 0;
 $5 = $0 + 28 | 0;
 $10 = HEAP32[$5 + 4 >> 2] | 0;
 $11 = $this + 28 | 0;
 HEAP32[$11 >> 2] = HEAP32[$5 >> 2];
 HEAP32[$11 + 4 >> 2] = $10;
 __ZN4tson5LayerC2EOS0_($this + 36 | 0, $0 + 36 | 0);
 __ZN4tson18PropertyCollectionC2EOS0_($this + 256 | 0, $0 + 256 | 0);
 $m_terrain = $this + 280 | 0;
 $m_terrain8 = $0 + 280 | 0;
 HEAP32[$m_terrain >> 2] = 0;
 $__end_$i$i9 = $this + 284 | 0;
 HEAP32[$__end_$i$i9 >> 2] = 0;
 $__value_$i$i$i9$i10 = $this + 288 | 0;
 HEAP32[$__value_$i$i$i9$i10 >> 2] = 0;
 HEAP32[$m_terrain >> 2] = HEAP32[$m_terrain8 >> 2];
 $__end_$i12 = $0 + 284 | 0;
 HEAP32[$__end_$i$i9 >> 2] = HEAP32[$__end_$i12 >> 2];
 $__value_$i$i$i8$i13 = $0 + 288 | 0;
 HEAP32[$__value_$i$i$i9$i10 >> 2] = HEAP32[$__value_$i$i$i8$i13 >> 2];
 HEAP32[$__value_$i$i$i8$i13 >> 2] = 0;
 HEAP32[$__end_$i12 >> 2] = 0;
 HEAP32[$m_terrain8 >> 2] = 0;
 $m_type = $this + 292 | 0;
 $m_type9 = $0 + 292 | 0;
 HEAP32[$m_type >> 2] = HEAP32[$m_type9 >> 2];
 HEAP32[$m_type + 4 >> 2] = HEAP32[$m_type9 + 4 >> 2];
 HEAP32[$m_type + 8 >> 2] = HEAP32[$m_type9 + 8 >> 2];
 HEAP32[$m_type9 >> 2] = 0;
 HEAP32[$m_type9 + 4 >> 2] = 0;
 HEAP32[$m_type9 + 8 >> 2] = 0;
 return;
}

function __ZNSt3__211__stdoutbufIwE8overflowEj($this, $__c) {
 $this = $this | 0;
 $__c = $__c | 0;
 var $2 = 0, $__1buf = 0, $__cv_ = 0, $__e = 0, $__extbe = 0, $__extbuf = 0, $__file_30 = 0, $__st_ = 0, $add$ptr = 0, $add$ptr10 = 0, $call$i = 0, $pbase$0 = 0, $retval$4 = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$sub = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $__extbuf = sp + 16 | 0;
 $__1buf = sp + 8 | 0;
 $__extbe = sp + 4 | 0;
 $__e = sp;
 do if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($__c, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) label = 15; else {
  HEAP32[$__1buf >> 2] = __ZNSt3__211char_traitsIwE12to_char_typeEj($__c) | 0;
  if (HEAP8[$this + 44 >> 0] | 0) {
   if ((_fwrite($__1buf, 4, 1, HEAP32[$this + 32 >> 2] | 0) | 0) == 1) {
    label = 15;
    break;
   }
   $retval$4 = __ZNSt3__211char_traitsIwE3eofEv() | 0;
   break;
  }
  HEAP32[$__extbe >> 2] = $__extbuf;
  $add$ptr = $__1buf + 4 | 0;
  $__cv_ = $this + 36 | 0;
  $__st_ = $this + 40 | 0;
  $add$ptr10 = $__extbuf + 8 | 0;
  $sub$ptr$rhs$cast = $__extbuf;
  $__file_30 = $this + 32 | 0;
  $pbase$0 = $__1buf;
  while (1) {
   $2 = HEAP32[$__cv_ >> 2] | 0;
   $call$i = FUNCTION_TABLE_iiiiiiiii[HEAP32[(HEAP32[$2 >> 2] | 0) + 12 >> 2] & 15]($2, HEAP32[$__st_ >> 2] | 0, $pbase$0, $add$ptr, $__e, $__extbuf, $add$ptr10, $__extbe) | 0;
   if ((HEAP32[$__e >> 2] | 0) == ($pbase$0 | 0)) {
    label = 14;
    break;
   }
   if (($call$i | 0) == 3) {
    label = 8;
    break;
   }
   if ($call$i >>> 0 >= 2) {
    label = 14;
    break;
   }
   $sub$ptr$sub = (HEAP32[$__extbe >> 2] | 0) - $sub$ptr$rhs$cast | 0;
   if ((_fwrite($__extbuf, 1, $sub$ptr$sub, HEAP32[$__file_30 >> 2] | 0) | 0) != ($sub$ptr$sub | 0)) {
    label = 14;
    break;
   }
   if (($call$i | 0) == 1) $pbase$0 = HEAP32[$__e >> 2] | 0; else {
    label = 13;
    break;
   }
  }
  if ((label | 0) == 8) if ((_fwrite($pbase$0, 1, 1, HEAP32[$__file_30 >> 2] | 0) | 0) == 1) label = 13; else label = 14;
  if ((label | 0) == 13) {
   label = 15;
   break;
  } else if ((label | 0) == 14) {
   $retval$4 = __ZNSt3__211char_traitsIwE3eofEv() | 0;
   break;
  }
 } while (0);
 if ((label | 0) == 15) $retval$4 = __ZNSt3__211char_traitsIwE7not_eofEj($__c) | 0;
 STACKTOP = sp;
 return $retval$4 | 0;
}

function __ZNSt3__211__stdoutbufIcE8overflowEi($this, $__c) {
 $this = $this | 0;
 $__c = $__c | 0;
 var $2 = 0, $__1buf = 0, $__cv_ = 0, $__e = 0, $__extbe = 0, $__extbuf = 0, $__file_30 = 0, $__st_ = 0, $add$ptr = 0, $add$ptr10 = 0, $call$i = 0, $pbase$0 = 0, $retval$4 = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$sub = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $__extbuf = sp + 16 | 0;
 $__1buf = sp + 8 | 0;
 $__extbe = sp + 4 | 0;
 $__e = sp;
 do if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($__c, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) label = 15; else {
  HEAP8[$__1buf >> 0] = __ZNSt3__211char_traitsIcE12to_char_typeEi($__c) | 0;
  if (HEAP8[$this + 44 >> 0] | 0) {
   if ((_fwrite($__1buf, 1, 1, HEAP32[$this + 32 >> 2] | 0) | 0) == 1) {
    label = 15;
    break;
   }
   $retval$4 = __ZNSt3__211char_traitsIcE3eofEv() | 0;
   break;
  }
  HEAP32[$__extbe >> 2] = $__extbuf;
  $add$ptr = $__1buf + 1 | 0;
  $__cv_ = $this + 36 | 0;
  $__st_ = $this + 40 | 0;
  $add$ptr10 = $__extbuf + 8 | 0;
  $sub$ptr$rhs$cast = $__extbuf;
  $__file_30 = $this + 32 | 0;
  $pbase$0 = $__1buf;
  while (1) {
   $2 = HEAP32[$__cv_ >> 2] | 0;
   $call$i = FUNCTION_TABLE_iiiiiiiii[HEAP32[(HEAP32[$2 >> 2] | 0) + 12 >> 2] & 15]($2, HEAP32[$__st_ >> 2] | 0, $pbase$0, $add$ptr, $__e, $__extbuf, $add$ptr10, $__extbe) | 0;
   if ((HEAP32[$__e >> 2] | 0) == ($pbase$0 | 0)) {
    label = 14;
    break;
   }
   if (($call$i | 0) == 3) {
    label = 8;
    break;
   }
   if ($call$i >>> 0 >= 2) {
    label = 14;
    break;
   }
   $sub$ptr$sub = (HEAP32[$__extbe >> 2] | 0) - $sub$ptr$rhs$cast | 0;
   if ((_fwrite($__extbuf, 1, $sub$ptr$sub, HEAP32[$__file_30 >> 2] | 0) | 0) != ($sub$ptr$sub | 0)) {
    label = 14;
    break;
   }
   if (($call$i | 0) == 1) $pbase$0 = HEAP32[$__e >> 2] | 0; else {
    label = 13;
    break;
   }
  }
  if ((label | 0) == 8) if ((_fwrite($pbase$0, 1, 1, HEAP32[$__file_30 >> 2] | 0) | 0) == 1) label = 13; else label = 14;
  if ((label | 0) == 13) {
   label = 15;
   break;
  } else if ((label | 0) == 14) {
   $retval$4 = __ZNSt3__211char_traitsIcE3eofEv() | 0;
   break;
  }
 } while (0);
 if ((label | 0) == 15) $retval$4 = __ZNSt3__211char_traitsIcE7not_eofEi($__c) | 0;
 STACKTOP = sp;
 return $retval$4 | 0;
}

function _stbi__vertical_flip($image, $w, $h, $bytes_per_pixel) {
 $image = $image | 0;
 $w = $w | 0;
 $h = $h | 0;
 $bytes_per_pixel = $bytes_per_pixel | 0;
 var $bytes = 0, $bytes_copy = 0, $bytes_left = 0, $bytes_per_pixel$addr = 0, $bytes_per_row = 0, $h$addr = 0, $image$addr = 0, $row = 0, $row0 = 0, $row1 = 0, $temp = 0, $w$addr = 0, sp = 0, CSE$0 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 2096 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(2096);
 $image$addr = sp + 2088 | 0;
 $w$addr = sp + 2084 | 0;
 $h$addr = sp + 2080 | 0;
 $bytes_per_pixel$addr = sp + 2076 | 0;
 $row = sp + 2072 | 0;
 $bytes_per_row = sp + 2068 | 0;
 $temp = sp;
 $bytes = sp + 2064 | 0;
 $row0 = sp + 2060 | 0;
 $row1 = sp + 2056 | 0;
 $bytes_left = sp + 2052 | 0;
 $bytes_copy = sp + 2048 | 0;
 HEAP32[$image$addr >> 2] = $image;
 HEAP32[$w$addr >> 2] = $w;
 HEAP32[$h$addr >> 2] = $h;
 HEAP32[$bytes_per_pixel$addr >> 2] = $bytes_per_pixel;
 HEAP32[$bytes_per_row >> 2] = Math_imul(HEAP32[$w$addr >> 2] | 0, HEAP32[$bytes_per_pixel$addr >> 2] | 0) | 0;
 HEAP32[$bytes >> 2] = HEAP32[$image$addr >> 2];
 HEAP32[$row >> 2] = 0;
 while (1) {
  if ((HEAP32[$row >> 2] | 0) >= (HEAP32[$h$addr >> 2] >> 1 | 0)) break;
  HEAP32[$row0 >> 2] = (HEAP32[$bytes >> 2] | 0) + (Math_imul(HEAP32[$row >> 2] | 0, HEAP32[$bytes_per_row >> 2] | 0) | 0);
  HEAP32[$row1 >> 2] = (HEAP32[$bytes >> 2] | 0) + (Math_imul((HEAP32[$h$addr >> 2] | 0) - (HEAP32[$row >> 2] | 0) - 1 | 0, HEAP32[$bytes_per_row >> 2] | 0) | 0);
  HEAP32[$bytes_left >> 2] = HEAP32[$bytes_per_row >> 2];
  while (1) {
   if (!(HEAP32[$bytes_left >> 2] | 0)) break;
   CSE$0 = HEAP32[$bytes_left >> 2] | 0;
   HEAP32[$bytes_copy >> 2] = (CSE$0 | 0) >>> 0 < 2048 ? CSE$0 | 0 : 2048;
   _memcpy($temp | 0, HEAP32[$row0 >> 2] | 0, HEAP32[$bytes_copy >> 2] | 0) | 0;
   _memcpy(HEAP32[$row0 >> 2] | 0, HEAP32[$row1 >> 2] | 0, HEAP32[$bytes_copy >> 2] | 0) | 0;
   _memcpy(HEAP32[$row1 >> 2] | 0, $temp | 0, HEAP32[$bytes_copy >> 2] | 0) | 0;
   HEAP32[$row0 >> 2] = (HEAP32[$row0 >> 2] | 0) + (HEAP32[$bytes_copy >> 2] | 0);
   HEAP32[$row1 >> 2] = (HEAP32[$row1 >> 2] | 0) + (HEAP32[$bytes_copy >> 2] | 0);
   HEAP32[$bytes_left >> 2] = (HEAP32[$bytes_left >> 2] | 0) - (HEAP32[$bytes_copy >> 2] | 0);
  }
  HEAP32[$row >> 2] = (HEAP32[$row >> 2] | 0) + 1;
 }
 STACKTOP = sp;
 return;
}

function _GifPartition($image, $left, $right, $elt, $pivotIndex) {
 $image = $image | 0;
 $left = $left | 0;
 $right = $right | 0;
 $elt = $elt | 0;
 $pivotIndex = $pivotIndex | 0;
 var $11 = 0, $arrayVal = 0, $elt$addr = 0, $ii = 0, $image$addr = 0, $left$addr = 0, $pivotIndex$addr = 0, $pivotValue = 0, $right$addr = 0, $split = 0, $storeIndex = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 $image$addr = sp + 32 | 0;
 $left$addr = sp + 28 | 0;
 $right$addr = sp + 24 | 0;
 $elt$addr = sp + 20 | 0;
 $pivotIndex$addr = sp + 16 | 0;
 $pivotValue = sp + 12 | 0;
 $storeIndex = sp + 8 | 0;
 $split = sp + 36 | 0;
 $ii = sp + 4 | 0;
 $arrayVal = sp;
 HEAP32[$image$addr >> 2] = $image;
 HEAP32[$left$addr >> 2] = $left;
 HEAP32[$right$addr >> 2] = $right;
 HEAP32[$elt$addr >> 2] = $elt;
 HEAP32[$pivotIndex$addr >> 2] = $pivotIndex;
 HEAP32[$pivotValue >> 2] = HEAPU8[(HEAP32[$image$addr >> 2] | 0) + ((HEAP32[$pivotIndex$addr >> 2] << 2) + (HEAP32[$elt$addr >> 2] | 0)) >> 0];
 _GifSwapPixels(HEAP32[$image$addr >> 2] | 0, HEAP32[$pivotIndex$addr >> 2] | 0, (HEAP32[$right$addr >> 2] | 0) - 1 | 0);
 HEAP32[$storeIndex >> 2] = HEAP32[$left$addr >> 2];
 HEAP8[$split >> 0] = 0;
 HEAP32[$ii >> 2] = HEAP32[$left$addr >> 2];
 while (1) {
  $11 = HEAP32[$image$addr >> 2] | 0;
  if ((HEAP32[$ii >> 2] | 0) >= ((HEAP32[$right$addr >> 2] | 0) - 1 | 0)) break;
  HEAP32[$arrayVal >> 2] = HEAPU8[$11 + ((HEAP32[$ii >> 2] << 2) + (HEAP32[$elt$addr >> 2] | 0)) >> 0];
  if ((HEAP32[$arrayVal >> 2] | 0) < (HEAP32[$pivotValue >> 2] | 0)) {
   _GifSwapPixels(HEAP32[$image$addr >> 2] | 0, HEAP32[$ii >> 2] | 0, HEAP32[$storeIndex >> 2] | 0);
   HEAP32[$storeIndex >> 2] = (HEAP32[$storeIndex >> 2] | 0) + 1;
  } else if ((HEAP32[$arrayVal >> 2] | 0) == (HEAP32[$pivotValue >> 2] | 0)) {
   if (HEAP8[$split >> 0] & 1) {
    _GifSwapPixels(HEAP32[$image$addr >> 2] | 0, HEAP32[$ii >> 2] | 0, HEAP32[$storeIndex >> 2] | 0);
    HEAP32[$storeIndex >> 2] = (HEAP32[$storeIndex >> 2] | 0) + 1;
   }
   HEAP8[$split >> 0] = (HEAP8[$split >> 0] & 1 ^ 1) & 1;
  }
  HEAP32[$ii >> 2] = (HEAP32[$ii >> 2] | 0) + 1;
 }
 _GifSwapPixels($11, HEAP32[$storeIndex >> 2] | 0, (HEAP32[$right$addr >> 2] | 0) - 1 | 0);
 STACKTOP = sp;
 return HEAP32[$storeIndex >> 2] | 0;
}

function _ImageCopy($agg$result, $image) {
 $agg$result = $agg$result | 0;
 $image = $image | 0;
 var $call = 0, $height = 0, $i = 0, $newImage = 0, $size = 0, $width = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 $newImage = sp + 16 | 0;
 $width = sp + 12 | 0;
 $height = sp + 8 | 0;
 $size = sp + 4 | 0;
 $i = sp;
 HEAP32[$newImage >> 2] = 0;
 HEAP32[$newImage + 4 >> 2] = 0;
 HEAP32[$newImage + 8 >> 2] = 0;
 HEAP32[$newImage + 12 >> 2] = 0;
 HEAP32[$newImage + 16 >> 2] = 0;
 HEAP32[$width >> 2] = HEAP32[$image + 4 >> 2];
 HEAP32[$height >> 2] = HEAP32[$image + 8 >> 2];
 HEAP32[$size >> 2] = 0;
 HEAP32[$i >> 2] = 0;
 while (1) {
  if ((HEAP32[$i >> 2] | 0) >= (HEAP32[$image + 12 >> 2] | 0)) break;
  $call = _GetPixelDataSize(HEAP32[$width >> 2] | 0, HEAP32[$height >> 2] | 0, HEAP32[$image + 16 >> 2] | 0) | 0;
  HEAP32[$size >> 2] = (HEAP32[$size >> 2] | 0) + $call;
  HEAP32[$width >> 2] = (HEAP32[$width >> 2] | 0) / 2 | 0;
  HEAP32[$height >> 2] = (HEAP32[$height >> 2] | 0) / 2 | 0;
  if ((HEAP32[$width >> 2] | 0) < 1) HEAP32[$width >> 2] = 1;
  if ((HEAP32[$height >> 2] | 0) < 1) HEAP32[$height >> 2] = 1;
  HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
 }
 HEAP32[$newImage >> 2] = _malloc(HEAP32[$size >> 2] | 0) | 0;
 if (!(HEAP32[$newImage >> 2] | 0)) {
  HEAP32[$agg$result >> 2] = HEAP32[$newImage >> 2];
  HEAP32[$agg$result + 4 >> 2] = HEAP32[$newImage + 4 >> 2];
  HEAP32[$agg$result + 8 >> 2] = HEAP32[$newImage + 8 >> 2];
  HEAP32[$agg$result + 12 >> 2] = HEAP32[$newImage + 12 >> 2];
  HEAP32[$agg$result + 16 >> 2] = HEAP32[$newImage + 16 >> 2];
  STACKTOP = sp;
  return;
 }
 _memcpy(HEAP32[$newImage >> 2] | 0, HEAP32[$image >> 2] | 0, HEAP32[$size >> 2] | 0) | 0;
 HEAP32[$newImage + 4 >> 2] = HEAP32[$image + 4 >> 2];
 HEAP32[$newImage + 8 >> 2] = HEAP32[$image + 8 >> 2];
 HEAP32[$newImage + 12 >> 2] = HEAP32[$image + 12 >> 2];
 HEAP32[$newImage + 16 >> 2] = HEAP32[$image + 16 >> 2];
 HEAP32[$agg$result >> 2] = HEAP32[$newImage >> 2];
 HEAP32[$agg$result + 4 >> 2] = HEAP32[$newImage + 4 >> 2];
 HEAP32[$agg$result + 8 >> 2] = HEAP32[$newImage + 8 >> 2];
 HEAP32[$agg$result + 12 >> 2] = HEAP32[$newImage + 12 >> 2];
 HEAP32[$agg$result + 16 >> 2] = HEAP32[$newImage + 16 >> 2];
 STACKTOP = sp;
 return;
}

function __ZN8nlohmann6detail11parse_error15position_stringERKNS0_10position_tE($agg$result, $pos) {
 $agg$result = $agg$result | 0;
 $pos = $pos | 0;
 var $2 = 0, $call$i2 = 0, $call$i3 = 0, $call3$i$i4 = 0, $ref$tmp = 0, $ref$tmp1 = 0, $ref$tmp2 = 0, $ref$tmp5 = 0, $tobool$i$i$i$i$i = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 $ref$tmp = sp + 36 | 0;
 $ref$tmp1 = sp + 24 | 0;
 $ref$tmp2 = sp + 12 | 0;
 $ref$tmp5 = sp;
 __ZNSt3__29to_stringEm($ref$tmp2, (HEAP32[$pos + 8 >> 2] | 0) + 1 | 0);
 $call$i2 = __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6insertEmPKc($ref$tmp2, 0, 24352) | 0;
 HEAP32[$ref$tmp1 >> 2] = HEAP32[$call$i2 >> 2];
 HEAP32[$ref$tmp1 + 4 >> 2] = HEAP32[$call$i2 + 4 >> 2];
 HEAP32[$ref$tmp1 + 8 >> 2] = HEAP32[$call$i2 + 8 >> 2];
 HEAP32[$call$i2 >> 2] = 0;
 HEAP32[$call$i2 + 4 >> 2] = 0;
 HEAP32[$call$i2 + 8 >> 2] = 0;
 $call$i3 = __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc($ref$tmp1, 24362) | 0;
 HEAP32[$ref$tmp >> 2] = HEAP32[$call$i3 >> 2];
 HEAP32[$ref$tmp + 4 >> 2] = HEAP32[$call$i3 + 4 >> 2];
 HEAP32[$ref$tmp + 8 >> 2] = HEAP32[$call$i3 + 8 >> 2];
 HEAP32[$call$i3 >> 2] = 0;
 HEAP32[$call$i3 + 4 >> 2] = 0;
 HEAP32[$call$i3 + 8 >> 2] = 0;
 __ZNSt3__29to_stringEm($ref$tmp5, HEAP32[$pos + 4 >> 2] | 0);
 $2 = HEAP8[$ref$tmp5 + 11 >> 0] | 0;
 $tobool$i$i$i$i$i = $2 << 24 >> 24 < 0;
 $call3$i$i4 = __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcm($ref$tmp, $tobool$i$i$i$i$i ? HEAP32[$ref$tmp5 >> 2] | 0 : $ref$tmp5, $tobool$i$i$i$i$i ? HEAP32[$ref$tmp5 + 4 >> 2] | 0 : $2 & 255) | 0;
 HEAP32[$agg$result >> 2] = HEAP32[$call3$i$i4 >> 2];
 HEAP32[$agg$result + 4 >> 2] = HEAP32[$call3$i$i4 + 4 >> 2];
 HEAP32[$agg$result + 8 >> 2] = HEAP32[$call3$i$i4 + 8 >> 2];
 HEAP32[$call3$i$i4 >> 2] = 0;
 HEAP32[$call3$i$i4 + 4 >> 2] = 0;
 HEAP32[$call3$i$i4 + 8 >> 2] = 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp5);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp1);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp2);
 STACKTOP = sp;
 return;
}
function __ZNSt3__26vectorIbNS_9allocatorIbEEE18__construct_at_endINS_14__bit_iteratorIS3_Lb0ELm0EEEEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES8_S8_($this, $__first, $__last) {
 $this = $this | 0;
 $__first = $__first | 0;
 $__last = $__last | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $__size_ = 0, $add = 0, $agg$tmp$i = 0, $agg$tmp2$i = 0, $agg$tmp3$i = 0, $agg$tmp4$i = 0, $agg$tmp5$i = 0, $agg$tmp6$i = 0, $rem$i = 0, $tmp = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64);
 $agg$tmp$i = sp + 48 | 0;
 $agg$tmp2$i = sp + 40 | 0;
 $agg$tmp3$i = sp + 32 | 0;
 $agg$tmp4$i = sp + 24 | 0;
 $agg$tmp5$i = sp + 16 | 0;
 $agg$tmp6$i = sp + 8 | 0;
 $tmp = sp;
 $__size_ = $this + 4 | 0;
 $0 = HEAP32[$__size_ >> 2] | 0;
 $1 = HEAP32[$__first >> 2] | 0;
 $2 = HEAP32[$__first + 4 >> 2] | 0;
 $3 = HEAP32[$__last >> 2] | 0;
 $4 = HEAP32[$__last + 4 >> 2] | 0;
 $add = $0 - $2 + $4 + ($3 - $1 << 3) | 0;
 HEAP32[$__size_ >> 2] = $add;
 if (!$0) label = 4; else if (($add + -1 ^ $0 + -1) >>> 0 > 31) label = 4; else $6 = HEAP32[$this >> 2] | 0;
 do if ((label | 0) == 4) {
  $5 = HEAP32[$this >> 2] | 0;
  if ($add >>> 0 < 33) {
   HEAP32[$5 >> 2] = 0;
   $6 = $5;
   break;
  } else {
   HEAP32[$5 + (($add + -1 | 0) >>> 5 << 2) >> 2] = 0;
   $6 = $5;
   break;
  }
 } while (0);
 $rem$i = $0 & 31;
 $7 = $6 + ($0 >>> 5 << 2) | 0;
 if (($2 | 0) == ($rem$i | 0)) {
  HEAP32[$agg$tmp$i >> 2] = $1;
  HEAP32[$agg$tmp$i + 4 >> 2] = $2;
  HEAP32[$agg$tmp2$i >> 2] = $3;
  HEAP32[$agg$tmp2$i + 4 >> 2] = $4;
  HEAP32[$agg$tmp3$i >> 2] = $7;
  HEAP32[$agg$tmp3$i + 4 >> 2] = $2;
  __ZNSt3__214__copy_alignedINS_6vectorIbNS_9allocatorIbEEEELb0EEENS_14__bit_iteratorIT_Lb0EXLi0EEEENS5_IS6_XT0_EXLi0EEEES8_S7_($tmp, $agg$tmp$i, $agg$tmp2$i, $agg$tmp3$i);
 } else {
  HEAP32[$agg$tmp4$i >> 2] = $1;
  HEAP32[$agg$tmp4$i + 4 >> 2] = $2;
  HEAP32[$agg$tmp5$i >> 2] = $3;
  HEAP32[$agg$tmp5$i + 4 >> 2] = $4;
  HEAP32[$agg$tmp6$i >> 2] = $7;
  HEAP32[$agg$tmp6$i + 4 >> 2] = $rem$i;
  __ZNSt3__216__copy_unalignedINS_6vectorIbNS_9allocatorIbEEEELb0EEENS_14__bit_iteratorIT_Lb0EXLi0EEEENS5_IS6_XT0_EXLi0EEEES8_S7_($tmp, $agg$tmp4$i, $agg$tmp5$i, $agg$tmp6$i);
 }
 STACKTOP = sp;
 return;
}

function _Vector3Transform($agg$result, $v, $mat) {
 $agg$result = $agg$result | 0;
 $v = $v | 0;
 $mat = $mat | 0;
 var $10 = f0, $12 = f0, $14 = f0, $17 = f0, $19 = f0, $21 = f0, $3 = f0, $5 = f0, $7 = f0, $add = f0, $add11 = f0, $add13 = f0, $add18 = f0, $add20 = f0, $add6 = f0, $mul = f0, $mul16 = f0, $mul9 = f0, $result = 0, $x = 0, $y = 0, $z = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $result = sp + 12 | 0;
 $x = sp + 8 | 0;
 $y = sp + 4 | 0;
 $z = sp;
 HEAP32[$result >> 2] = 0;
 HEAP32[$result + 4 >> 2] = 0;
 HEAP32[$result + 8 >> 2] = 0;
 HEAPF32[$x >> 2] = Math_fround(HEAPF32[$v >> 2]);
 HEAPF32[$y >> 2] = Math_fround(HEAPF32[$v + 4 >> 2]);
 HEAPF32[$z >> 2] = Math_fround(HEAPF32[$v + 8 >> 2]);
 $3 = Math_fround(HEAPF32[$mat >> 2]);
 $mul = Math_fround($3 * Math_fround(HEAPF32[$x >> 2]));
 $5 = Math_fround(HEAPF32[$mat + 4 >> 2]);
 $add = Math_fround($mul + Math_fround($5 * Math_fround(HEAPF32[$y >> 2])));
 $7 = Math_fround(HEAPF32[$mat + 8 >> 2]);
 $add6 = Math_fround($add + Math_fround($7 * Math_fround(HEAPF32[$z >> 2])));
 HEAPF32[$result >> 2] = Math_fround($add6 + Math_fround(HEAPF32[$mat + 12 >> 2]));
 $10 = Math_fround(HEAPF32[$mat + 16 >> 2]);
 $mul9 = Math_fround($10 * Math_fround(HEAPF32[$x >> 2]));
 $12 = Math_fround(HEAPF32[$mat + 20 >> 2]);
 $add11 = Math_fround($mul9 + Math_fround($12 * Math_fround(HEAPF32[$y >> 2])));
 $14 = Math_fround(HEAPF32[$mat + 24 >> 2]);
 $add13 = Math_fround($add11 + Math_fround($14 * Math_fround(HEAPF32[$z >> 2])));
 HEAPF32[$result + 4 >> 2] = Math_fround($add13 + Math_fround(HEAPF32[$mat + 28 >> 2]));
 $17 = Math_fround(HEAPF32[$mat + 32 >> 2]);
 $mul16 = Math_fround($17 * Math_fround(HEAPF32[$x >> 2]));
 $19 = Math_fround(HEAPF32[$mat + 36 >> 2]);
 $add18 = Math_fround($mul16 + Math_fround($19 * Math_fround(HEAPF32[$y >> 2])));
 $21 = Math_fround(HEAPF32[$mat + 40 >> 2]);
 $add20 = Math_fround($add18 + Math_fround($21 * Math_fround(HEAPF32[$z >> 2])));
 HEAPF32[$result + 8 >> 2] = Math_fround($add20 + Math_fround(HEAPF32[$mat + 44 >> 2]));
 HEAP32[$agg$result >> 2] = HEAP32[$result >> 2];
 HEAP32[$agg$result + 4 >> 2] = HEAP32[$result + 4 >> 2];
 HEAP32[$agg$result + 8 >> 2] = HEAP32[$result + 8 >> 2];
 STACKTOP = sp;
 return;
}

function _GifBegin($filename, $width, $height, $delay, $bitDepth, $dither) {
 $filename = $filename | 0;
 $width = $width | 0;
 $height = $height | 0;
 $delay = $delay | 0;
 $bitDepth = $bitDepth | 0;
 $dither = $dither | 0;
 var $$pre_trunc = 0, $32 = 0, $delay$addr = 0, $filename$addr = 0, $height$addr = 0, $retval = 0, $width$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $retval = sp + 21 | 0;
 $filename$addr = sp + 16 | 0;
 $width$addr = sp + 12 | 0;
 $height$addr = sp + 8 | 0;
 $delay$addr = sp + 4 | 0;
 HEAP32[$filename$addr >> 2] = $filename;
 HEAP32[$width$addr >> 2] = $width;
 HEAP32[$height$addr >> 2] = $height;
 HEAP32[$delay$addr >> 2] = $delay;
 HEAP32[sp >> 2] = $bitDepth;
 HEAP8[sp + 20 >> 0] = $dither & 1;
 HEAP32[14955] = _fopen(HEAP32[$filename$addr >> 2] | 0, 34090) | 0;
 if (!(HEAP32[14955] | 0)) {
  HEAP8[$retval >> 0] = 0;
  $$pre_trunc = HEAP8[$retval >> 0] | 0;
  $32 = $$pre_trunc & 1;
  STACKTOP = sp;
  return $32 | 0;
 }
 HEAP32[14794] = _malloc((Math_imul(HEAP32[$width$addr >> 2] | 0, HEAP32[$height$addr >> 2] | 0) | 0) << 2) | 0;
 _fputs(31787, HEAP32[14955] | 0) | 0;
 _fputc(HEAP32[$width$addr >> 2] & 255, HEAP32[14955] | 0) | 0;
 _fputc((HEAP32[$width$addr >> 2] | 0) >>> 8 & 255, HEAP32[14955] | 0) | 0;
 _fputc(HEAP32[$height$addr >> 2] & 255, HEAP32[14955] | 0) | 0;
 _fputc((HEAP32[$height$addr >> 2] | 0) >>> 8 & 255, HEAP32[14955] | 0) | 0;
 _fputc(240, HEAP32[14955] | 0) | 0;
 _fputc(0, HEAP32[14955] | 0) | 0;
 _fputc(0, HEAP32[14955] | 0) | 0;
 _fputc(0, HEAP32[14955] | 0) | 0;
 _fputc(0, HEAP32[14955] | 0) | 0;
 _fputc(0, HEAP32[14955] | 0) | 0;
 _fputc(0, HEAP32[14955] | 0) | 0;
 _fputc(0, HEAP32[14955] | 0) | 0;
 _fputc(0, HEAP32[14955] | 0) | 0;
 if (HEAP32[$delay$addr >> 2] | 0) {
  _fputc(33, HEAP32[14955] | 0) | 0;
  _fputc(255, HEAP32[14955] | 0) | 0;
  _fputc(11, HEAP32[14955] | 0) | 0;
  _fputs(31794, HEAP32[14955] | 0) | 0;
  _fputc(3, HEAP32[14955] | 0) | 0;
  _fputc(1, HEAP32[14955] | 0) | 0;
  _fputc(0, HEAP32[14955] | 0) | 0;
  _fputc(0, HEAP32[14955] | 0) | 0;
  _fputc(0, HEAP32[14955] | 0) | 0;
 }
 HEAP8[$retval >> 0] = 1;
 $$pre_trunc = HEAP8[$retval >> 0] | 0;
 $32 = $$pre_trunc & 1;
 STACKTOP = sp;
 return $32 | 0;
}

function _stbi__load_main($s, $x, $y, $comp, $req_comp, $ri, $bpc) {
 $s = $s | 0;
 $x = $x | 0;
 $y = $y | 0;
 $comp = $comp | 0;
 $req_comp = $req_comp | 0;
 $ri = $ri | 0;
 $bpc = $bpc | 0;
 var $0 = 0, $28 = 0, $5 = 0, $comp$addr = 0, $cond = 0, $hdr = 0, $req_comp$addr = 0, $retval = 0, $ri$addr = 0, $s$addr = 0, $tobool = 0, $tobool10 = 0, $x$addr = 0, $y$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 $retval = sp + 32 | 0;
 $s$addr = sp + 28 | 0;
 $x$addr = sp + 24 | 0;
 $y$addr = sp + 20 | 0;
 $comp$addr = sp + 16 | 0;
 $req_comp$addr = sp + 12 | 0;
 $ri$addr = sp + 8 | 0;
 $hdr = sp;
 HEAP32[$s$addr >> 2] = $s;
 HEAP32[$x$addr >> 2] = $x;
 HEAP32[$y$addr >> 2] = $y;
 HEAP32[$comp$addr >> 2] = $comp;
 HEAP32[$req_comp$addr >> 2] = $req_comp;
 HEAP32[$ri$addr >> 2] = $ri;
 HEAP32[sp + 4 >> 2] = $bpc;
 $0 = HEAP32[$ri$addr >> 2] | 0;
 HEAP32[$0 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 0;
 HEAP32[HEAP32[$ri$addr >> 2] >> 2] = 8;
 HEAP32[(HEAP32[$ri$addr >> 2] | 0) + 8 >> 2] = 0;
 HEAP32[(HEAP32[$ri$addr >> 2] | 0) + 4 >> 2] = 0;
 $tobool = (_stbi__png_test(HEAP32[$s$addr >> 2] | 0) | 0) != 0;
 $5 = HEAP32[$s$addr >> 2] | 0;
 if ($tobool) {
  HEAP32[$retval >> 2] = _stbi__png_load($5, HEAP32[$x$addr >> 2] | 0, HEAP32[$y$addr >> 2] | 0, HEAP32[$comp$addr >> 2] | 0, HEAP32[$req_comp$addr >> 2] | 0, HEAP32[$ri$addr >> 2] | 0) | 0;
  $28 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $28 | 0;
 }
 if (!(_stbi__hdr_test($5) | 0)) {
  $tobool10 = (_stbi__err(32866) | 0) != 0;
  HEAP32[$retval >> 2] = $tobool10 ? 0 : 0;
  $28 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $28 | 0;
 }
 HEAP32[$hdr >> 2] = _stbi__hdr_load(HEAP32[$s$addr >> 2] | 0, HEAP32[$x$addr >> 2] | 0, HEAP32[$y$addr >> 2] | 0, HEAP32[$comp$addr >> 2] | 0, HEAP32[$req_comp$addr >> 2] | 0, HEAP32[$ri$addr >> 2] | 0) | 0;
 if (HEAP32[$req_comp$addr >> 2] | 0) $cond = HEAP32[$req_comp$addr >> 2] | 0; else $cond = HEAP32[HEAP32[$comp$addr >> 2] >> 2] | 0;
 HEAP32[$retval >> 2] = _stbi__hdr_to_ldr(HEAP32[$hdr >> 2] | 0, HEAP32[HEAP32[$x$addr >> 2] >> 2] | 0, HEAP32[HEAP32[$y$addr >> 2] >> 2] | 0, $cond) | 0;
 $28 = HEAP32[$retval >> 2] | 0;
 STACKTOP = sp;
 return $28 | 0;
}

function __ZNSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8nlohmann10basic_jsonINS_3mapENS_6vectorES7_bxydS5_NS8_14adl_serializerEEEEENS_19__map_value_compareIS7_SE_NS_4lessIvEELb1EEENS5_ISE_EEE30__emplace_hint_unique_key_argsIS7_JRKNS_4pairIKS7_SD_EEEEENS_15__tree_iteratorISE_PNS_11__tree_nodeISE_PvEElEENS_21__tree_const_iteratorISE_SV_lEERKT_DpOT0_($this, $__p, $__k, $__args) {
 $this = $this | 0;
 $__p = $__p | 0;
 $__k = $__k | 0;
 $__args = $__args | 0;
 var $1 = 0, $__parent = 0, $__r$0 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $agg$tmp$byval_copy = sp + 12 | 0;
 $__parent = sp + 8 | 0;
 $agg$tmp = sp;
 HEAP32[$agg$tmp >> 2] = HEAP32[$__p >> 2];
 HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 $call = __ZNSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8nlohmann10basic_jsonINS_3mapENS_6vectorES7_bxydS5_NS8_14adl_serializerEEEEENS_19__map_value_compareIS7_SE_NS_4lessIvEELb1EEENS5_ISE_EEE12__find_equalIS7_EERPNS_16__tree_node_baseIPvEENS_21__tree_const_iteratorISE_PNS_11__tree_nodeISE_SN_EElEERPNS_15__tree_end_nodeISP_EESQ_RKT_($this, $agg$tmp$byval_copy, $__parent, sp + 4 | 0, $__k) | 0;
 $1 = HEAP32[$call >> 2] | 0;
 if (!$1) {
  __ZNSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8nlohmann10basic_jsonINS_3mapENS_6vectorES7_bxydS5_NS8_14adl_serializerEEEEENS_19__map_value_compareIS7_SE_NS_4lessIvEELb1EEENS5_ISE_EEE16__construct_nodeIJRKNS_4pairIKS7_SD_EEEEENS_10unique_ptrINS_11__tree_nodeISE_PvEENS_22__tree_node_destructorINS5_ISU_EEEEEEDpOT_($agg$tmp$byval_copy, $this, $__args);
  __ZNSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8nlohmann10basic_jsonINS_3mapENS_6vectorES7_bxydS5_NS8_14adl_serializerEEEEENS_19__map_value_compareIS7_SE_NS_4lessIvEELb1EEENS5_ISE_EEE16__insert_node_atEPNS_15__tree_end_nodeIPNS_16__tree_node_baseIPvEEEERSP_SP_($this, HEAP32[$__parent >> 2] | 0, $call, HEAP32[$agg$tmp$byval_copy >> 2] | 0);
  $__r$0 = HEAP32[$agg$tmp$byval_copy >> 2] | 0;
 } else $__r$0 = $1;
 STACKTOP = sp;
 return $__r$0 | 0;
}

function __ZNKSt3__28messagesIcE6do_getEliiRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE($agg$result, $this, $__c, $__set, $__msgid, $__dflt) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__c = $__c | 0;
 $__set = $__set | 0;
 $__msgid = $__msgid | 0;
 $__dflt = $__dflt | 0;
 var $0 = 0, $__i$0$i$i = 0, $__i$0$i$i11 = 0, $__nb$addr$0$i = 0, $__ndflt = 0, $__wb$addr$0$i = 0, $add$ptr = 0, $add$ptr14 = 0, $call8 = 0, $cond$i$i$i25 = 0, $cond$i$i$i4149 = 0, $tobool$i$i$i$i = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $__ndflt = sp;
 HEAP32[$__ndflt >> 2] = 0;
 HEAP32[$__ndflt + 4 >> 2] = 0;
 HEAP32[$__ndflt + 8 >> 2] = 0;
 $__i$0$i$i = 0;
 while (1) {
  if (($__i$0$i$i | 0) == 3) break;
  HEAP32[$__ndflt + ($__i$0$i$i << 2) >> 2] = 0;
  $__i$0$i$i = $__i$0$i$i + 1 | 0;
 }
 $0 = HEAP8[$__dflt + 11 >> 0] | 0;
 $tobool$i$i$i$i = $0 << 24 >> 24 < 0;
 $cond$i$i$i4149 = $tobool$i$i$i$i ? HEAP32[$__dflt >> 2] | 0 : $__dflt;
 $add$ptr = $cond$i$i$i4149 + ($tobool$i$i$i$i ? HEAP32[$__dflt + 4 >> 2] | 0 : $0 & 255) | 0;
 $__wb$addr$0$i = $cond$i$i$i4149;
 while (1) {
  if ($__wb$addr$0$i >>> 0 >= $add$ptr >>> 0) break;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($__ndflt, HEAP8[$__wb$addr$0$i >> 0] | 0);
  $__wb$addr$0$i = $__wb$addr$0$i + 1 | 0;
 }
 $cond$i$i$i25 = (HEAP8[$__ndflt + 11 >> 0] | 0) < 0 ? HEAP32[$__ndflt >> 2] | 0 : $__ndflt;
 $call8 = _catgets(($__c | 0) == -1 ? -1 : $__c << 1, $__set, $__msgid, $cond$i$i$i25) | 0;
 HEAP32[$agg$result >> 2] = 0;
 HEAP32[$agg$result + 4 >> 2] = 0;
 HEAP32[$agg$result + 8 >> 2] = 0;
 $__i$0$i$i11 = 0;
 while (1) {
  if (($__i$0$i$i11 | 0) == 3) break;
  HEAP32[$agg$result + ($__i$0$i$i11 << 2) >> 2] = 0;
  $__i$0$i$i11 = $__i$0$i$i11 + 1 | 0;
 }
 $add$ptr14 = $cond$i$i$i25 + (_strlen($call8) | 0) | 0;
 $__nb$addr$0$i = $cond$i$i$i25;
 while (1) {
  if ($__nb$addr$0$i >>> 0 >= $add$ptr14 >>> 0) break;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($agg$result, HEAP8[$__nb$addr$0$i >> 0] | 0);
  $__nb$addr$0$i = $__nb$addr$0$i + 1 | 0;
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__ndflt);
 STACKTOP = sp;
 return;
}

function __ZNSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8nlohmann10basic_jsonINS_3mapENS_6vectorES7_bxydS5_NS8_14adl_serializerEEEEENS_19__map_value_compareIS7_SE_NS_4lessIvEELb1EEENS5_ISE_EEE25__emplace_unique_key_argsIS7_JRKNS_21piecewise_construct_tENS_5tupleIJRKS7_EEENSP_IJEEEEEENS_4pairINS_15__tree_iteratorISE_PNS_11__tree_nodeISE_PvEElEEbEERKT_DpOT0_($agg$result, $this, $__k, $__args, $__args1, $__args3) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__k = $__k | 0;
 $__args = $__args | 0;
 $__args1 = $__args1 | 0;
 $__args3 = $__args3 | 0;
 var $0 = 0, $__h = 0, $__inserted$0 = 0, $__parent = 0, $__r$0 = 0, $call = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $__parent = sp + 12 | 0;
 $__h = sp;
 $call = __ZNSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8nlohmann10basic_jsonINS_3mapENS_6vectorES7_bxydS5_NS8_14adl_serializerEEEEENS_19__map_value_compareIS7_SE_NS_4lessIvEELb1EEENS5_ISE_EEE12__find_equalIS7_EERPNS_16__tree_node_baseIPvEERPNS_15__tree_end_nodeISP_EERKT_($this, $__parent, $__k) | 0;
 $0 = HEAP32[$call >> 2] | 0;
 if (!$0) {
  __ZNSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8nlohmann10basic_jsonINS_3mapENS_6vectorES7_bxydS5_NS8_14adl_serializerEEEEENS_19__map_value_compareIS7_SE_NS_4lessIvEELb1EEENS5_ISE_EEE16__construct_nodeIJRKNS_21piecewise_construct_tENS_5tupleIJRKS7_EEENSP_IJEEEEEENS_10unique_ptrINS_11__tree_nodeISE_PvEENS_22__tree_node_destructorINS5_ISX_EEEEEEDpOT_($__h, $this, $__args, $__args1, $__args3);
  __ZNSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8nlohmann10basic_jsonINS_3mapENS_6vectorES7_bxydS5_NS8_14adl_serializerEEEEENS_19__map_value_compareIS7_SE_NS_4lessIvEELb1EEENS5_ISE_EEE16__insert_node_atEPNS_15__tree_end_nodeIPNS_16__tree_node_baseIPvEEEERSP_SP_($this, HEAP32[$__parent >> 2] | 0, $call, HEAP32[$__h >> 2] | 0);
  $__inserted$0 = 1;
  $__r$0 = HEAP32[$__h >> 2] | 0;
 } else {
  $__inserted$0 = 0;
  $__r$0 = $0;
 }
 HEAP32[$agg$result >> 2] = $__r$0;
 HEAP8[$agg$result + 4 >> 0] = $__inserted$0;
 STACKTOP = sp;
 return;
}

function __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE21__grow_by_and_replaceEmmmmmmPKw($this, $__old_cap, $__delta_cap, $__old_sz, $__n_copy, $__n_del, $__n_add, $__p_new_stuff) {
 $this = $this | 0;
 $__old_cap = $__old_cap | 0;
 $__delta_cap = $__delta_cap | 0;
 $__old_sz = $__old_sz | 0;
 $__n_copy = $__n_copy | 0;
 $__n_del = $__n_del | 0;
 $__n_add = $__n_add | 0;
 $__p_new_stuff = $__p_new_stuff | 0;
 var $$sroa$speculated = 0, $0 = 0, $add = 0, $add15 = 0, $add1545 = 0, $add40 = 0, $add48 = 0, $call$i$i$i = 0, $cond$i = 0, $mul = 0, $ref$tmp49 = 0, $sub28 = 0, $sub29 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $ref$tmp49 = sp;
 if ((1073741806 - $__old_cap | 0) >>> 0 < $__delta_cap >>> 0) __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($this);
 $0 = $this + 8 | 0;
 if ((HEAP8[$0 + 3 >> 0] | 0) < 0) $cond$i = HEAP32[$this >> 2] | 0; else $cond$i = $this;
 if ($__old_cap >>> 0 < 536870887) {
  $add = $__delta_cap + $__old_cap | 0;
  $mul = $__old_cap << 1;
  $$sroa$speculated = $add >>> 0 < $mul >>> 0 ? $mul : $add;
  $add15 = $$sroa$speculated >>> 0 < 2 ? 2 : $$sroa$speculated + 4 & -4;
  if ($add15 >>> 0 > 1073741823) _abort(); else $add1545 = $add15;
 } else $add1545 = 1073741807;
 $call$i$i$i = __Znwm($add1545 << 2) | 0;
 if ($__n_copy | 0) __ZNSt3__211char_traitsIwE4copyEPwPKwm($call$i$i$i, $cond$i, $__n_copy) | 0;
 if ($__n_add | 0) __ZNSt3__211char_traitsIwE4copyEPwPKwm($call$i$i$i + ($__n_copy << 2) | 0, $__p_new_stuff, $__n_add) | 0;
 $sub28 = $__old_sz - $__n_del | 0;
 $sub29 = $sub28 - $__n_copy | 0;
 if ($sub29 | 0) __ZNSt3__211char_traitsIwE4copyEPwPKwm($call$i$i$i + ($__n_copy << 2) + ($__n_add << 2) | 0, $cond$i + ($__n_copy << 2) + ($__n_del << 2) | 0, $sub29) | 0;
 $add40 = $__old_cap + 1 | 0;
 if (($add40 | 0) != 2) __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm($cond$i, $add40 << 2);
 HEAP32[$this >> 2] = $call$i$i$i;
 HEAP32[$0 >> 2] = $add1545 | -2147483648;
 $add48 = $sub28 + $__n_add | 0;
 HEAP32[$this + 4 >> 2] = $add48;
 HEAP32[$ref$tmp49 >> 2] = 0;
 __ZNSt3__211char_traitsIwE6assignERwRKw($call$i$i$i + ($add48 << 2) | 0, $ref$tmp49);
 STACKTOP = sp;
 return;
}

function ___vfprintf_internal($f, $fmt, $ap, $fmt_fp, $pop_arg_long_double) {
 $f = $f | 0;
 $fmt = $fmt | 0;
 $ap = $ap | 0;
 $fmt_fp = $fmt_fp | 0;
 $pop_arg_long_double = $pop_arg_long_double | 0;
 var $1 = 0, $4 = 0, $7 = 0, $and = 0, $ap2 = 0, $buf = 0, $buf_size = 0, $call21 = 0, $cond = 0, $internal_buf = 0, $nl_arg = 0, $nl_type = 0, $ret$1 = 0, $retval$0 = 0, $spec$select = 0, $wbase = 0, $wend = 0, $wpos = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(224);
 $ap2 = sp + 208 | 0;
 $nl_type = sp + 160 | 0;
 $nl_arg = sp + 80 | 0;
 $internal_buf = sp;
 dest = $nl_type;
 stop = dest + 40 | 0;
 do {
  HEAP32[dest >> 2] = 0;
  dest = dest + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP32[$ap2 >> 2] = HEAP32[$ap >> 2];
 if ((_printf_core(0, $fmt, $ap2, $nl_arg, $nl_type, $fmt_fp, $pop_arg_long_double) | 0) < 0) $retval$0 = -1; else {
  if ((HEAP32[$f + 76 >> 2] | 0) > -1) $cond = ___lockfile($f) | 0; else $cond = 0;
  $1 = HEAP32[$f >> 2] | 0;
  $and = $1 & 32;
  if ((HEAP8[$f + 74 >> 0] | 0) < 1) HEAP32[$f >> 2] = $1 & -33;
  $buf_size = $f + 48 | 0;
  if (!(HEAP32[$buf_size >> 2] | 0)) {
   $buf = $f + 44 | 0;
   $4 = HEAP32[$buf >> 2] | 0;
   HEAP32[$buf >> 2] = $internal_buf;
   $wbase = $f + 28 | 0;
   HEAP32[$wbase >> 2] = $internal_buf;
   $wpos = $f + 20 | 0;
   HEAP32[$wpos >> 2] = $internal_buf;
   HEAP32[$buf_size >> 2] = 80;
   $wend = $f + 16 | 0;
   HEAP32[$wend >> 2] = $internal_buf + 80;
   $call21 = _printf_core($f, $fmt, $ap2, $nl_arg, $nl_type, $fmt_fp, $pop_arg_long_double) | 0;
   if (!$4) $ret$1 = $call21; else {
    FUNCTION_TABLE_iiii[HEAP32[$f + 36 >> 2] & 63]($f, 0, 0) | 0;
    $spec$select = (HEAP32[$wpos >> 2] | 0) == 0 ? -1 : $call21;
    HEAP32[$buf >> 2] = $4;
    HEAP32[$buf_size >> 2] = 0;
    HEAP32[$wend >> 2] = 0;
    HEAP32[$wbase >> 2] = 0;
    HEAP32[$wpos >> 2] = 0;
    $ret$1 = $spec$select;
   }
  } else $ret$1 = _printf_core($f, $fmt, $ap2, $nl_arg, $nl_type, $fmt_fp, $pop_arg_long_double) | 0;
  $7 = HEAP32[$f >> 2] | 0;
  HEAP32[$f >> 2] = $7 | $and;
  if ($cond | 0) ___unlockfile($f);
  $retval$0 = ($7 & 32 | 0) == 0 ? $ret$1 : -1;
 }
 STACKTOP = sp;
 return $retval$0 | 0;
}

function _LoadImageEx($agg$result, $pixels, $width, $height) {
 $agg$result = $agg$result | 0;
 $pixels = $pixels | 0;
 $width = $width | 0;
 $height = $height | 0;
 var $height$addr = 0, $i = 0, $image = 0, $k = 0, $pixels$addr = 0, $width$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 $pixels$addr = sp + 36 | 0;
 $width$addr = sp + 32 | 0;
 $height$addr = sp + 28 | 0;
 $image = sp + 8 | 0;
 $k = sp + 4 | 0;
 $i = sp;
 HEAP32[$pixels$addr >> 2] = $pixels;
 HEAP32[$width$addr >> 2] = $width;
 HEAP32[$height$addr >> 2] = $height;
 HEAP32[$image >> 2] = 0;
 HEAP32[$image + 4 >> 2] = 0;
 HEAP32[$image + 8 >> 2] = 0;
 HEAP32[$image + 12 >> 2] = 0;
 HEAP32[$image + 16 >> 2] = 0;
 HEAP32[$image >> 2] = 0;
 HEAP32[$image + 4 >> 2] = HEAP32[$width$addr >> 2];
 HEAP32[$image + 8 >> 2] = HEAP32[$height$addr >> 2];
 HEAP32[$image + 12 >> 2] = 1;
 HEAP32[$image + 16 >> 2] = 7;
 HEAP32[$k >> 2] = 0;
 HEAP32[$image >> 2] = _malloc((Math_imul(HEAP32[$image + 4 >> 2] | 0, HEAP32[$image + 8 >> 2] | 0) | 0) << 2) | 0;
 HEAP32[$i >> 2] = 0;
 while (1) {
  if ((HEAP32[$i >> 2] | 0) >= ((Math_imul(HEAP32[$image + 4 >> 2] | 0, HEAP32[$image + 8 >> 2] | 0) | 0) << 2 | 0)) break;
  HEAP8[(HEAP32[$image >> 2] | 0) + (HEAP32[$i >> 2] | 0) >> 0] = HEAP8[(HEAP32[$pixels$addr >> 2] | 0) + (HEAP32[$k >> 2] << 2) >> 0] | 0;
  HEAP8[(HEAP32[$image >> 2] | 0) + ((HEAP32[$i >> 2] | 0) + 1) >> 0] = HEAP8[(HEAP32[$pixels$addr >> 2] | 0) + (HEAP32[$k >> 2] << 2) + 1 >> 0] | 0;
  HEAP8[(HEAP32[$image >> 2] | 0) + ((HEAP32[$i >> 2] | 0) + 2) >> 0] = HEAP8[(HEAP32[$pixels$addr >> 2] | 0) + (HEAP32[$k >> 2] << 2) + 2 >> 0] | 0;
  HEAP8[(HEAP32[$image >> 2] | 0) + ((HEAP32[$i >> 2] | 0) + 3) >> 0] = HEAP8[(HEAP32[$pixels$addr >> 2] | 0) + (HEAP32[$k >> 2] << 2) + 3 >> 0] | 0;
  HEAP32[$k >> 2] = (HEAP32[$k >> 2] | 0) + 1;
  HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 4;
 }
 HEAP32[$agg$result >> 2] = HEAP32[$image >> 2];
 HEAP32[$agg$result + 4 >> 2] = HEAP32[$image + 4 >> 2];
 HEAP32[$agg$result + 8 >> 2] = HEAP32[$image + 8 >> 2];
 HEAP32[$agg$result + 12 >> 2] = HEAP32[$image + 12 >> 2];
 HEAP32[$agg$result + 16 >> 2] = HEAP32[$image + 16 >> 2];
 STACKTOP = sp;
 return;
}

function _stbi__getn($s, $buffer, $n) {
 $s = $s | 0;
 $buffer = $buffer | 0;
 $n = $n | 0;
 var $39 = 0, $blen = 0, $buffer$addr = 0, $count = 0, $img_buffer17 = 0, $n$addr = 0, $res = 0, $retval = 0, $s$addr = 0, sp = 0, CSE$0 = 0, CSE$1 = 0, CSE$2 = 0, CSE$3 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $retval = sp + 24 | 0;
 $s$addr = sp + 20 | 0;
 $buffer$addr = sp + 16 | 0;
 $n$addr = sp + 12 | 0;
 $blen = sp + 8 | 0;
 $res = sp + 4 | 0;
 $count = sp;
 HEAP32[$s$addr >> 2] = $s;
 HEAP32[$buffer$addr >> 2] = $buffer;
 HEAP32[$n$addr >> 2] = $n;
 if (HEAP32[(HEAP32[$s$addr >> 2] | 0) + 16 >> 2] | 0) {
  CSE$0 = HEAP32[$s$addr >> 2] | 0;
  HEAP32[$blen >> 2] = (HEAP32[CSE$0 + 172 >> 2] | 0) - (HEAP32[CSE$0 + 168 >> 2] | 0);
  if ((HEAP32[$blen >> 2] | 0) < (HEAP32[$n$addr >> 2] | 0)) {
   _memcpy(HEAP32[$buffer$addr >> 2] | 0, HEAP32[(HEAP32[$s$addr >> 2] | 0) + 168 >> 2] | 0, HEAP32[$blen >> 2] | 0) | 0;
   CSE$1 = HEAP32[$s$addr >> 2] | 0;
   CSE$2 = HEAP32[$blen >> 2] | 0;
   HEAP32[$count >> 2] = FUNCTION_TABLE_iiii[HEAP32[CSE$1 + 16 >> 2] & 63](HEAP32[CSE$1 + 28 >> 2] | 0, (HEAP32[$buffer$addr >> 2] | 0) + CSE$2 | 0, (HEAP32[$n$addr >> 2] | 0) - CSE$2 | 0) | 0;
   HEAP32[$res >> 2] = (HEAP32[$count >> 2] | 0) == ((HEAP32[$n$addr >> 2] | 0) - (HEAP32[$blen >> 2] | 0) | 0) & 1;
   CSE$3 = HEAP32[$s$addr >> 2] | 0;
   HEAP32[CSE$3 + 168 >> 2] = HEAP32[CSE$3 + 172 >> 2];
   HEAP32[$retval >> 2] = HEAP32[$res >> 2];
   $39 = HEAP32[$retval >> 2] | 0;
   STACKTOP = sp;
   return $39 | 0;
  }
 }
 if (((HEAP32[(HEAP32[$s$addr >> 2] | 0) + 168 >> 2] | 0) + (HEAP32[$n$addr >> 2] | 0) | 0) >>> 0 <= (HEAP32[(HEAP32[$s$addr >> 2] | 0) + 172 >> 2] | 0) >>> 0) {
  _memcpy(HEAP32[$buffer$addr >> 2] | 0, HEAP32[(HEAP32[$s$addr >> 2] | 0) + 168 >> 2] | 0, HEAP32[$n$addr >> 2] | 0) | 0;
  $img_buffer17 = (HEAP32[$s$addr >> 2] | 0) + 168 | 0;
  HEAP32[$img_buffer17 >> 2] = (HEAP32[$img_buffer17 >> 2] | 0) + (HEAP32[$n$addr >> 2] | 0);
  HEAP32[$retval >> 2] = 1;
  $39 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $39 | 0;
 } else {
  HEAP32[$retval >> 2] = 0;
  $39 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $39 | 0;
 }
 return 0;
}

function _stbir__edge_wrap_slow($edge, $n, $max) {
 $edge = $edge | 0;
 $n = $n | 0;
 $max = $max | 0;
 var $18 = 0, $7 = 0, $8 = 0, $edge$addr = 0, $m = 0, $max$addr = 0, $max2 = 0, $n$addr = 0, $retval = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $retval = sp + 20 | 0;
 $edge$addr = sp + 16 | 0;
 $n$addr = sp + 12 | 0;
 $max$addr = sp + 8 | 0;
 $max2 = sp + 4 | 0;
 $m = sp;
 HEAP32[$edge$addr >> 2] = $edge;
 HEAP32[$n$addr >> 2] = $n;
 HEAP32[$max$addr >> 2] = $max;
 L1 : do switch (HEAP32[$edge$addr >> 2] | 0) {
 case 4:
  {
   HEAP32[$retval >> 2] = 0;
   break;
  }
 case 1:
  {
   if ((HEAP32[$n$addr >> 2] | 0) < 0) {
    HEAP32[$retval >> 2] = 0;
    break L1;
   }
   if ((HEAP32[$n$addr >> 2] | 0) >= (HEAP32[$max$addr >> 2] | 0)) {
    HEAP32[$retval >> 2] = (HEAP32[$max$addr >> 2] | 0) - 1;
    break L1;
   } else {
    HEAP32[$retval >> 2] = HEAP32[$n$addr >> 2];
    break L1;
   }
   break;
  }
 case 2:
  {
   $7 = HEAP32[$n$addr >> 2] | 0;
   $8 = HEAP32[$max$addr >> 2] | 0;
   if ((HEAP32[$n$addr >> 2] | 0) < 0) if (($7 | 0) < ($8 | 0)) {
    HEAP32[$retval >> 2] = 0 - (HEAP32[$n$addr >> 2] | 0);
    break L1;
   } else {
    HEAP32[$retval >> 2] = (HEAP32[$max$addr >> 2] | 0) - 1;
    break L1;
   }
   if (($7 | 0) < ($8 | 0)) {
    HEAP32[$retval >> 2] = HEAP32[$n$addr >> 2];
    break L1;
   }
   HEAP32[$max2 >> 2] = HEAP32[$max$addr >> 2] << 1;
   if ((HEAP32[$n$addr >> 2] | 0) >= (HEAP32[$max2 >> 2] | 0)) {
    HEAP32[$retval >> 2] = 0;
    break L1;
   } else {
    HEAP32[$retval >> 2] = (HEAP32[$max2 >> 2] | 0) - (HEAP32[$n$addr >> 2] | 0) - 1;
    break L1;
   }
   break;
  }
 case 3:
  {
   $18 = HEAP32[$n$addr >> 2] | 0;
   if ((HEAP32[$n$addr >> 2] | 0) >= 0) {
    HEAP32[$retval >> 2] = ($18 | 0) % (HEAP32[$max$addr >> 2] | 0) | 0;
    break L1;
   }
   HEAP32[$m >> 2] = (0 - $18 | 0) % (HEAP32[$max$addr >> 2] | 0) | 0;
   if (HEAP32[$m >> 2] | 0) HEAP32[$m >> 2] = (HEAP32[$max$addr >> 2] | 0) - (HEAP32[$m >> 2] | 0);
   HEAP32[$retval >> 2] = HEAP32[$m >> 2];
   break;
  }
 default:
  ___assert_fail(35641, 34244, 994, 35668);
 } while (0);
 STACKTOP = sp;
 return HEAP32[$retval >> 2] | 0;
}

function __ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE5imbueERKNS_6localeE($this, $__loc) {
 $this = $this | 0;
 $__loc = $__loc | 0;
 var $1 = 0, $11 = 0, $12 = 0, $5 = 0, $9 = 0, $__always_noconv_ = 0, $__binp_$i = 0, $__extbuf_ = 0, $__extbuf_25 = 0, $__ibs_ = 0, $__intbuf_ = 0, $__owns_eb_ = 0, $__owns_ib_ = 0, $call$i = 0, $call$i1 = 0, $tobool14 = 0;
 FUNCTION_TABLE_ii[HEAP32[(HEAP32[$this >> 2] | 0) + 24 >> 2] & 127]($this) | 0;
 $call$i = __ZNKSt3__26locale9use_facetERNS0_2idE($__loc, 61520) | 0;
 HEAP32[$this + 68 >> 2] = $call$i;
 $__always_noconv_ = $this + 98 | 0;
 $1 = HEAP8[$__always_noconv_ >> 0] | 0;
 $call$i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$call$i >> 2] | 0) + 28 >> 2] & 127]($call$i) | 0;
 HEAP8[$__always_noconv_ >> 0] = $call$i1 & 1;
 do if (($1 & 255 | 0) != ($call$i1 & 1 | 0)) {
  $__binp_$i = $this + 8 | 0;
  $__owns_eb_ = $this + 96 | 0;
  HEAP32[$__binp_$i >> 2] = 0;
  HEAP32[$__binp_$i + 4 >> 2] = 0;
  HEAP32[$__binp_$i + 8 >> 2] = 0;
  HEAP32[$__binp_$i + 12 >> 2] = 0;
  HEAP32[$__binp_$i + 16 >> 2] = 0;
  HEAP32[$__binp_$i + 20 >> 2] = 0;
  $tobool14 = (HEAP8[$__owns_eb_ >> 0] | 0) != 0;
  if ($call$i1) {
   $__extbuf_ = $this + 32 | 0;
   if ($tobool14) {
    $5 = HEAP32[$__extbuf_ >> 2] | 0;
    if ($5 | 0) __ZdaPv($5);
   }
   $__owns_ib_ = $this + 97 | 0;
   HEAP8[$__owns_eb_ >> 0] = HEAP8[$__owns_ib_ >> 0] | 0;
   $__ibs_ = $this + 60 | 0;
   HEAP32[$this + 52 >> 2] = HEAP32[$__ibs_ >> 2];
   $__intbuf_ = $this + 56 | 0;
   HEAP32[$__extbuf_ >> 2] = HEAP32[$__intbuf_ >> 2];
   HEAP32[$__ibs_ >> 2] = 0;
   HEAP32[$__intbuf_ >> 2] = 0;
   HEAP8[$__owns_ib_ >> 0] = 0;
   break;
  } else {
   if (!$tobool14) {
    $__extbuf_25 = $this + 32 | 0;
    $9 = HEAP32[$__extbuf_25 >> 2] | 0;
    if (($9 | 0) != ($this + 44 | 0)) {
     $11 = HEAP32[$this + 52 >> 2] | 0;
     HEAP32[$this + 60 >> 2] = $11;
     HEAP32[$this + 56 >> 2] = $9;
     HEAP8[$this + 97 >> 0] = 0;
     HEAP32[$__extbuf_25 >> 2] = __Znam($11) | 0;
     HEAP8[$__owns_eb_ >> 0] = 1;
     break;
    }
   }
   $12 = HEAP32[$this + 52 >> 2] | 0;
   HEAP32[$this + 60 >> 2] = $12;
   HEAP32[$this + 56 >> 2] = __Znam($12) | 0;
   HEAP8[$this + 97 >> 0] = 1;
   break;
  }
 } while (0);
 return;
}

function __ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m($__os, $__str, $__len) {
 $__os = $__os | 0;
 $__str = $__str | 0;
 $__len = $__len | 0;
 var $2 = 0, $5 = 0, $__fill_$i = 0, $__s = 0, $add$ptr = 0, $add$ptr25 = 0, $add$ptr6 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call$i = 0, $call$i1$i$i = 0, $call$i2$i$i = 0, $conv$i = 0, $vbase$offset$ptr$i = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $agg$tmp$byval_copy = sp + 12 | 0;
 $__s = sp;
 $agg$tmp = sp + 8 | 0;
 __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE6sentryC2ERS3_($__s, $__os);
 if (HEAP8[$__s >> 0] | 0) {
  $vbase$offset$ptr$i = (HEAP32[$__os >> 2] | 0) + -12 | 0;
  HEAP32[$agg$tmp >> 2] = HEAP32[$__os + (HEAP32[$vbase$offset$ptr$i >> 2] | 0) + 24 >> 2];
  $add$ptr = $__os + (HEAP32[$vbase$offset$ptr$i >> 2] | 0) | 0;
  $2 = HEAP32[$add$ptr + 4 >> 2] | 0;
  $add$ptr6 = $__str + $__len | 0;
  $call$i = __ZNSt3__211char_traitsIcE3eofEv() | 0;
  $__fill_$i = $add$ptr + 76 | 0;
  if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($call$i, HEAP32[$__fill_$i >> 2] | 0) | 0) {
   __ZNKSt3__28ios_base6getlocEv($agg$tmp$byval_copy, $add$ptr);
   $call$i1$i$i = __ZNKSt3__26locale9use_facetERNS0_2idE($agg$tmp$byval_copy, 61216) | 0;
   $call$i2$i$i = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$call$i1$i$i >> 2] | 0) + 28 >> 2] & 31]($call$i1$i$i, 32) | 0;
   __ZNSt3__26localeD2Ev($agg$tmp$byval_copy);
   $conv$i = $call$i2$i$i << 24 >> 24;
   HEAP32[$__fill_$i >> 2] = $conv$i;
   $5 = $conv$i;
  } else $5 = HEAP32[$__fill_$i >> 2] | 0;
  HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
  if (!(__ZNSt3__216__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$tmp$byval_copy, $__str, ($2 & 176 | 0) == 32 ? $add$ptr6 : $__str, $add$ptr6, $add$ptr, $5 & 255) | 0)) {
   $add$ptr25 = $__os + (HEAP32[(HEAP32[$__os >> 2] | 0) + -12 >> 2] | 0) | 0;
   __ZNSt3__28ios_base5clearEj($add$ptr25, HEAP32[$add$ptr25 + 16 >> 2] | 5);
  }
 }
 __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($__s);
 STACKTOP = sp;
 return $__os | 0;
}

function __ZN8nlohmann6detail19json_sax_dom_parserINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE12start_objectEm($this, $len) {
 $this = $this | 0;
 $len = $len | 0;
 var $0 = 0, $__end_$i = 0, $call = 0, $call$i5 = 0, $exception = 0, $ref$tmp = 0, $ref$tmp2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $ref$tmp = sp + 12 | 0;
 $ref$tmp2 = sp;
 HEAP8[$ref$tmp2 >> 0] = 1;
 $call = __ZN8nlohmann6detail19json_sax_dom_parserINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE12handle_valueINS0_7value_tEEEPSD_OT_($this, $ref$tmp2) | 0;
 HEAP32[$ref$tmp >> 2] = $call;
 $__end_$i = $this + 8 | 0;
 $0 = HEAP32[$__end_$i >> 2] | 0;
 if ($0 >>> 0 < (HEAP32[$this + 12 >> 2] | 0) >>> 0) {
  HEAP32[$0 >> 2] = $call;
  HEAP32[$__end_$i >> 2] = (HEAP32[$__end_$i >> 2] | 0) + 4;
 } else __ZNSt3__26vectorIPN8nlohmann10basic_jsonINS_3mapES0_NS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEbxydS7_NS1_14adl_serializerEEENS7_ISC_EEE21__push_back_slow_pathISC_EEvOT_($this + 4 | 0, $ref$tmp);
 if (($len | 0) != -1) if ((__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE8max_sizeEv(HEAP32[(HEAP32[$__end_$i >> 2] | 0) + -4 >> 2] | 0) | 0) >>> 0 < $len >>> 0) {
  $exception = ___cxa_allocate_exception(16) | 0;
  __ZNSt3__29to_stringEm($ref$tmp2, $len);
  $call$i5 = __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6insertEmPKc($ref$tmp2, 0, 24316) | 0;
  HEAP32[$ref$tmp >> 2] = HEAP32[$call$i5 >> 2];
  HEAP32[$ref$tmp + 4 >> 2] = HEAP32[$call$i5 + 4 >> 2];
  HEAP32[$ref$tmp + 8 >> 2] = HEAP32[$call$i5 + 8 >> 2];
  HEAP32[$call$i5 >> 2] = 0;
  HEAP32[$call$i5 + 4 >> 2] = 0;
  HEAP32[$call$i5 + 8 >> 2] = 0;
  __ZN8nlohmann6detail12out_of_range6createEiRKNSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE($exception, 408, $ref$tmp);
  ___cxa_throw($exception | 0, 15080, 9);
 }
 STACKTOP = sp;
 return 1;
}

function __ZN8nlohmann6detail19json_sax_dom_parserINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE11start_arrayEm($this, $len) {
 $this = $this | 0;
 $len = $len | 0;
 var $0 = 0, $__end_$i = 0, $call = 0, $call$i5 = 0, $exception = 0, $ref$tmp = 0, $ref$tmp2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $ref$tmp = sp + 12 | 0;
 $ref$tmp2 = sp;
 HEAP8[$ref$tmp2 >> 0] = 2;
 $call = __ZN8nlohmann6detail19json_sax_dom_parserINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE12handle_valueINS0_7value_tEEEPSD_OT_($this, $ref$tmp2) | 0;
 HEAP32[$ref$tmp >> 2] = $call;
 $__end_$i = $this + 8 | 0;
 $0 = HEAP32[$__end_$i >> 2] | 0;
 if ($0 >>> 0 < (HEAP32[$this + 12 >> 2] | 0) >>> 0) {
  HEAP32[$0 >> 2] = $call;
  HEAP32[$__end_$i >> 2] = (HEAP32[$__end_$i >> 2] | 0) + 4;
 } else __ZNSt3__26vectorIPN8nlohmann10basic_jsonINS_3mapES0_NS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEbxydS7_NS1_14adl_serializerEEENS7_ISC_EEE21__push_back_slow_pathISC_EEvOT_($this + 4 | 0, $ref$tmp);
 if (($len | 0) != -1) if ((__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE8max_sizeEv(HEAP32[(HEAP32[$__end_$i >> 2] | 0) + -4 >> 2] | 0) | 0) >>> 0 < $len >>> 0) {
  $exception = ___cxa_allocate_exception(16) | 0;
  __ZNSt3__29to_stringEm($ref$tmp2, $len);
  $call$i5 = __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6insertEmPKc($ref$tmp2, 0, 24293) | 0;
  HEAP32[$ref$tmp >> 2] = HEAP32[$call$i5 >> 2];
  HEAP32[$ref$tmp + 4 >> 2] = HEAP32[$call$i5 + 4 >> 2];
  HEAP32[$ref$tmp + 8 >> 2] = HEAP32[$call$i5 + 8 >> 2];
  HEAP32[$call$i5 >> 2] = 0;
  HEAP32[$call$i5 + 4 >> 2] = 0;
  HEAP32[$call$i5 + 8 >> 2] = 0;
  __ZN8nlohmann6detail12out_of_range6createEiRKNSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE($exception, 408, $ref$tmp);
  ___cxa_throw($exception | 0, 15080, 9);
 }
 STACKTOP = sp;
 return 1;
}

function __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEElsEi($this, $__n) {
 $this = $this | 0;
 $__n = $__n | 0;
 var $1 = 0, $4 = 0, $5 = 0, $__fill_$i = 0, $__s = 0, $add$ptr$i = 0, $add$ptr25 = 0, $agg$tmp$i = 0, $agg$tmp$i$byval_copy = 0, $call$i = 0, $call$i$i$i = 0, $call$i1$i$i = 0, $call$i8 = 0, $conv$i = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $agg$tmp$i$byval_copy = sp + 12 | 0;
 $agg$tmp$i = sp + 8 | 0;
 $__s = sp;
 __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE6sentryC2ERS3_($__s, $this);
 if (HEAP8[$__s >> 0] | 0) {
  __ZNKSt3__28ios_base6getlocEv($agg$tmp$i$byval_copy, $this + (HEAP32[(HEAP32[$this >> 2] | 0) + -12 >> 2] | 0) | 0);
  $call$i = __ZNKSt3__26locale9use_facetERNS0_2idE($agg$tmp$i$byval_copy, 61272) | 0;
  __ZNSt3__26localeD2Ev($agg$tmp$i$byval_copy);
  $add$ptr$i = $this + (HEAP32[(HEAP32[$this >> 2] | 0) + -12 >> 2] | 0) | 0;
  $1 = HEAP32[$add$ptr$i + 24 >> 2] | 0;
  $call$i8 = __ZNSt3__211char_traitsIcE3eofEv() | 0;
  $__fill_$i = $add$ptr$i + 76 | 0;
  if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($call$i8, HEAP32[$__fill_$i >> 2] | 0) | 0) {
   __ZNKSt3__28ios_base6getlocEv($agg$tmp$i$byval_copy, $add$ptr$i);
   $call$i$i$i = __ZNKSt3__26locale9use_facetERNS0_2idE($agg$tmp$i$byval_copy, 61216) | 0;
   $call$i1$i$i = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$call$i$i$i >> 2] | 0) + 28 >> 2] & 31]($call$i$i$i, 32) | 0;
   __ZNSt3__26localeD2Ev($agg$tmp$i$byval_copy);
   $conv$i = $call$i1$i$i << 24 >> 24;
   HEAP32[$__fill_$i >> 2] = $conv$i;
   $4 = $conv$i;
  } else $4 = HEAP32[$__fill_$i >> 2] | 0;
  $5 = HEAP32[(HEAP32[$call$i >> 2] | 0) + 16 >> 2] | 0;
  HEAP32[$agg$tmp$i >> 2] = $1;
  HEAP32[$agg$tmp$i$byval_copy >> 2] = HEAP32[$agg$tmp$i >> 2];
  if (!(FUNCTION_TABLE_iiiiii[$5 & 31]($call$i, $agg$tmp$i$byval_copy, $add$ptr$i, $4 & 255, $__n) | 0)) {
   $add$ptr25 = $this + (HEAP32[(HEAP32[$this >> 2] | 0) + -12 >> 2] | 0) | 0;
   __ZNSt3__28ios_base5clearEj($add$ptr25, HEAP32[$add$ptr25 + 16 >> 2] | 5);
  }
 }
 __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($__s);
 STACKTOP = sp;
 return $this | 0;
}

function __ZN8nlohmann6detail28json_sax_dom_callback_parserINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE3keyERSB_($this, $val) {
 $this = $this | 0;
 $val = $val | 0;
 var $__end_$i = 0, $agg$tmp = 0, $k = 0, $keep = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 $k = sp + 16 | 0;
 $keep = sp + 32 | 0;
 $agg$tmp = sp;
 __ZN8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEC2IRS9_S9_Li0EEEOT_($k, $val);
 $__end_$i = $this + 8 | 0;
 HEAP8[$keep >> 0] = (__ZNKSt3__28functionIFbiN8nlohmann6detail6parserINS1_10basic_jsonINS_3mapENS_6vectorENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEbxydSA_NS1_14adl_serializerEEEE13parse_event_tERSE_EEclEiSG_SH_($this + 48 | 0, (HEAP32[$__end_$i >> 2] | 0) - (HEAP32[$this + 4 >> 2] | 0) >> 2, 4, $k) | 0) & 1;
 __ZNSt3__26vectorIbNS_9allocatorIbEEE9push_backERKb($this + 28 | 0, $keep);
 if (HEAP8[$keep >> 0] | 0) if (HEAP32[(HEAP32[$__end_$i >> 2] | 0) + -4 >> 2] | 0) {
  __ZN8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEC2ERKSB_($agg$tmp, $this + 72 | 0);
  HEAP32[$this + 40 >> 2] = __ZN8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEaSESB_(__ZNSt3__23mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8nlohmann10basic_jsonIS0_NS_6vectorES6_bxydS4_NS7_14adl_serializerEEENS_4lessIvEENS4_INS_4pairIKS6_SB_EEEEEixERSF_(HEAP32[(HEAP32[(HEAP32[$__end_$i >> 2] | 0) + -4 >> 2] | 0) + 8 >> 2] | 0, $val) | 0, $agg$tmp) | 0;
  __ZN8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEED2Ev($agg$tmp);
 }
 __ZN8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEED2Ev($k);
 STACKTOP = sp;
 return 1;
}

function __ZNSt3__26vectorIN8nlohmann10basic_jsonINS_3mapES0_NS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEbxydS7_NS1_14adl_serializerEEENS7_ISB_EEE24__emplace_back_slow_pathIJNS1_6detail7value_tEEEEvDpOT_($this, $__args) {
 $this = $this | 0;
 $__args = $__args | 0;
 var $3 = 0, $__end_ = 0, $__end_$i = 0, $__v = 0, $add = 0, $call$i = 0, $mul$i = 0, $sub$ptr$sub$i$i$i = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $__v = sp;
 $__end_$i = $this + 4 | 0;
 $add = ((HEAP32[$__end_$i >> 2] | 0) - (HEAP32[$this >> 2] | 0) >> 4) + 1 | 0;
 $call$i = __ZNKSt3__26vectorIN8nlohmann10basic_jsonINS_3mapES0_NS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEbxydS7_NS1_14adl_serializerEEENS7_ISB_EEE8max_sizeEv($this) | 0;
 if ($call$i >>> 0 < $add >>> 0) __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($this); else {
  $3 = HEAP32[$this >> 2] | 0;
  $sub$ptr$sub$i$i$i = (HEAP32[$this + 8 >> 2] | 0) - $3 | 0;
  $mul$i = $sub$ptr$sub$i$i$i >> 3;
  __ZNSt3__214__split_bufferIN8nlohmann10basic_jsonINS_3mapENS_6vectorENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEbxydS8_NS1_14adl_serializerEEERNS8_ISC_EEEC2EmmSE_($__v, $sub$ptr$sub$i$i$i >> 4 >>> 0 < $call$i >>> 1 >>> 0 ? ($mul$i >>> 0 < $add >>> 0 ? $add : $mul$i) : $call$i, (HEAP32[$__end_$i >> 2] | 0) - $3 >> 4, $this + 8 | 0);
  $__end_ = $__v + 8 | 0;
  __ZN8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEC2ENS_6detail7value_tE(HEAP32[$__end_ >> 2] | 0, HEAP8[$__args >> 0] | 0);
  HEAP32[$__end_ >> 2] = (HEAP32[$__end_ >> 2] | 0) + 16;
  __ZNSt3__26vectorIN8nlohmann10basic_jsonINS_3mapES0_NS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEbxydS7_NS1_14adl_serializerEEENS7_ISB_EEE26__swap_out_circular_bufferERNS_14__split_bufferISB_RSC_EE($this, $__v);
  __ZNSt3__214__split_bufferIN8nlohmann10basic_jsonINS_3mapENS_6vectorENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEbxydS8_NS1_14adl_serializerEEERNS8_ISC_EEED2Ev($__v);
  STACKTOP = sp;
  return;
 }
}

function _memcpy(dest, src, num) {
 dest = dest | 0;
 src = src | 0;
 num = num | 0;
 var ret = 0, aligned_dest_end = 0, block_aligned_dest_end = 0, dest_end = 0;
 if ((num | 0) >= 8192) {
  _emscripten_memcpy_big(dest | 0, src | 0, num | 0) | 0;
  return dest | 0;
 }
 ret = dest | 0;
 dest_end = dest + num | 0;
 if ((dest & 3) == (src & 3)) {
  while (dest & 3) {
   if (!num) return ret | 0;
   HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
   dest = dest + 1 | 0;
   src = src + 1 | 0;
   num = num - 1 | 0;
  }
  aligned_dest_end = dest_end & -4 | 0;
  block_aligned_dest_end = aligned_dest_end - 64 | 0;
  while ((dest | 0) <= (block_aligned_dest_end | 0)) {
   HEAP32[dest >> 2] = HEAP32[src >> 2];
   HEAP32[dest + 4 >> 2] = HEAP32[src + 4 >> 2];
   HEAP32[dest + 8 >> 2] = HEAP32[src + 8 >> 2];
   HEAP32[dest + 12 >> 2] = HEAP32[src + 12 >> 2];
   HEAP32[dest + 16 >> 2] = HEAP32[src + 16 >> 2];
   HEAP32[dest + 20 >> 2] = HEAP32[src + 20 >> 2];
   HEAP32[dest + 24 >> 2] = HEAP32[src + 24 >> 2];
   HEAP32[dest + 28 >> 2] = HEAP32[src + 28 >> 2];
   HEAP32[dest + 32 >> 2] = HEAP32[src + 32 >> 2];
   HEAP32[dest + 36 >> 2] = HEAP32[src + 36 >> 2];
   HEAP32[dest + 40 >> 2] = HEAP32[src + 40 >> 2];
   HEAP32[dest + 44 >> 2] = HEAP32[src + 44 >> 2];
   HEAP32[dest + 48 >> 2] = HEAP32[src + 48 >> 2];
   HEAP32[dest + 52 >> 2] = HEAP32[src + 52 >> 2];
   HEAP32[dest + 56 >> 2] = HEAP32[src + 56 >> 2];
   HEAP32[dest + 60 >> 2] = HEAP32[src + 60 >> 2];
   dest = dest + 64 | 0;
   src = src + 64 | 0;
  }
  while ((dest | 0) < (aligned_dest_end | 0)) {
   HEAP32[dest >> 2] = HEAP32[src >> 2];
   dest = dest + 4 | 0;
   src = src + 4 | 0;
  }
 } else {
  aligned_dest_end = dest_end - 4 | 0;
  while ((dest | 0) < (aligned_dest_end | 0)) {
   HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
   HEAP8[dest + 1 >> 0] = HEAP8[src + 1 >> 0] | 0;
   HEAP8[dest + 2 >> 0] = HEAP8[src + 2 >> 0] | 0;
   HEAP8[dest + 3 >> 0] = HEAP8[src + 3 >> 0] | 0;
   dest = dest + 4 | 0;
   src = src + 4 | 0;
  }
 }
 while ((dest | 0) < (dest_end | 0)) {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 }
 return ret | 0;
}

function _stbir_resize_uint8($input_pixels, $input_w, $input_h, $input_stride_in_bytes, $output_pixels, $output_w, $output_h, $output_stride_in_bytes, $num_channels) {
 $input_pixels = $input_pixels | 0;
 $input_w = $input_w | 0;
 $input_h = $input_h | 0;
 $input_stride_in_bytes = $input_stride_in_bytes | 0;
 $output_pixels = $output_pixels | 0;
 $output_w = $output_w | 0;
 $output_h = $output_h | 0;
 $output_stride_in_bytes = $output_stride_in_bytes | 0;
 $num_channels = $num_channels | 0;
 var $call = 0, $input_h$addr = 0, $input_pixels$addr = 0, $input_stride_in_bytes$addr = 0, $input_w$addr = 0, $num_channels$addr = 0, $output_h$addr = 0, $output_pixels$addr = 0, $output_stride_in_bytes$addr = 0, $output_w$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 $input_pixels$addr = sp + 32 | 0;
 $input_w$addr = sp + 28 | 0;
 $input_h$addr = sp + 24 | 0;
 $input_stride_in_bytes$addr = sp + 20 | 0;
 $output_pixels$addr = sp + 16 | 0;
 $output_w$addr = sp + 12 | 0;
 $output_h$addr = sp + 8 | 0;
 $output_stride_in_bytes$addr = sp + 4 | 0;
 $num_channels$addr = sp;
 HEAP32[$input_pixels$addr >> 2] = $input_pixels;
 HEAP32[$input_w$addr >> 2] = $input_w;
 HEAP32[$input_h$addr >> 2] = $input_h;
 HEAP32[$input_stride_in_bytes$addr >> 2] = $input_stride_in_bytes;
 HEAP32[$output_pixels$addr >> 2] = $output_pixels;
 HEAP32[$output_w$addr >> 2] = $output_w;
 HEAP32[$output_h$addr >> 2] = $output_h;
 HEAP32[$output_stride_in_bytes$addr >> 2] = $output_stride_in_bytes;
 HEAP32[$num_channels$addr >> 2] = $num_channels;
 $call = _stbir__resize_arbitrary(0, HEAP32[$input_pixels$addr >> 2] | 0, HEAP32[$input_w$addr >> 2] | 0, HEAP32[$input_h$addr >> 2] | 0, HEAP32[$input_stride_in_bytes$addr >> 2] | 0, HEAP32[$output_pixels$addr >> 2] | 0, HEAP32[$output_w$addr >> 2] | 0, HEAP32[$output_h$addr >> 2] | 0, HEAP32[$output_stride_in_bytes$addr >> 2] | 0, Math_fround(0.0), Math_fround(0.0), Math_fround(1.0), Math_fround(1.0), 0, HEAP32[$num_channels$addr >> 2] | 0, -1, 0, 0, 0, 0, 1, 1, 0) | 0;
 STACKTOP = sp;
 return $call | 0;
}

function __ZNSt3__26vectorIN8nlohmann10basic_jsonINS_3mapES0_NS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEbxydS7_NS1_14adl_serializerEEENS7_ISB_EEE24__emplace_back_slow_pathIJDnEEEvDpOT_($this, $__args) {
 $this = $this | 0;
 $__args = $__args | 0;
 var $3 = 0, $__end_ = 0, $__end_$i = 0, $__v = 0, $add = 0, $call$i = 0, $mul$i = 0, $sub$ptr$sub$i$i$i = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $__v = sp;
 $__end_$i = $this + 4 | 0;
 $add = ((HEAP32[$__end_$i >> 2] | 0) - (HEAP32[$this >> 2] | 0) >> 4) + 1 | 0;
 $call$i = __ZNKSt3__26vectorIN8nlohmann10basic_jsonINS_3mapES0_NS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEbxydS7_NS1_14adl_serializerEEENS7_ISB_EEE8max_sizeEv($this) | 0;
 if ($call$i >>> 0 < $add >>> 0) __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($this); else {
  $3 = HEAP32[$this >> 2] | 0;
  $sub$ptr$sub$i$i$i = (HEAP32[$this + 8 >> 2] | 0) - $3 | 0;
  $mul$i = $sub$ptr$sub$i$i$i >> 3;
  __ZNSt3__214__split_bufferIN8nlohmann10basic_jsonINS_3mapENS_6vectorENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEbxydS8_NS1_14adl_serializerEEERNS8_ISC_EEEC2EmmSE_($__v, $sub$ptr$sub$i$i$i >> 4 >>> 0 < $call$i >>> 1 >>> 0 ? ($mul$i >>> 0 < $add >>> 0 ? $add : $mul$i) : $call$i, (HEAP32[$__end_$i >> 2] | 0) - $3 >> 4, $this + 8 | 0);
  $__end_ = $__v + 8 | 0;
  __ZN8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEC2EDn(HEAP32[$__end_ >> 2] | 0, HEAP32[$__args >> 2] | 0);
  HEAP32[$__end_ >> 2] = (HEAP32[$__end_ >> 2] | 0) + 16;
  __ZNSt3__26vectorIN8nlohmann10basic_jsonINS_3mapES0_NS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEbxydS7_NS1_14adl_serializerEEENS7_ISB_EEE26__swap_out_circular_bufferERNS_14__split_bufferISB_RSC_EE($this, $__v);
  __ZNSt3__214__split_bufferIN8nlohmann10basic_jsonINS_3mapENS_6vectorENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEbxydS8_NS1_14adl_serializerEEERNS8_ISC_EEED2Ev($__v);
  STACKTOP = sp;
  return;
 }
}

function __ZNSt3__26vectorIN8nlohmann10basic_jsonINS_3mapES0_NS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEbxydS7_NS1_14adl_serializerEEENS7_ISB_EEE24__emplace_back_slow_pathIJRS9_EEEvDpOT_($this, $__args) {
 $this = $this | 0;
 $__args = $__args | 0;
 var $3 = 0, $__end_ = 0, $__end_$i = 0, $__v = 0, $add = 0, $call$i = 0, $mul$i = 0, $sub$ptr$sub$i$i$i = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $__v = sp;
 $__end_$i = $this + 4 | 0;
 $add = ((HEAP32[$__end_$i >> 2] | 0) - (HEAP32[$this >> 2] | 0) >> 4) + 1 | 0;
 $call$i = __ZNKSt3__26vectorIN8nlohmann10basic_jsonINS_3mapES0_NS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEbxydS7_NS1_14adl_serializerEEENS7_ISB_EEE8max_sizeEv($this) | 0;
 if ($call$i >>> 0 < $add >>> 0) __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($this); else {
  $3 = HEAP32[$this >> 2] | 0;
  $sub$ptr$sub$i$i$i = (HEAP32[$this + 8 >> 2] | 0) - $3 | 0;
  $mul$i = $sub$ptr$sub$i$i$i >> 3;
  __ZNSt3__214__split_bufferIN8nlohmann10basic_jsonINS_3mapENS_6vectorENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEbxydS8_NS1_14adl_serializerEEERNS8_ISC_EEEC2EmmSE_($__v, $sub$ptr$sub$i$i$i >> 4 >>> 0 < $call$i >>> 1 >>> 0 ? ($mul$i >>> 0 < $add >>> 0 ? $add : $mul$i) : $call$i, (HEAP32[$__end_$i >> 2] | 0) - $3 >> 4, $this + 8 | 0);
  $__end_ = $__v + 8 | 0;
  __ZN8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEC2IRS9_S9_Li0EEEOT_(HEAP32[$__end_ >> 2] | 0, $__args);
  HEAP32[$__end_ >> 2] = (HEAP32[$__end_ >> 2] | 0) + 16;
  __ZNSt3__26vectorIN8nlohmann10basic_jsonINS_3mapES0_NS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEbxydS7_NS1_14adl_serializerEEENS7_ISB_EEE26__swap_out_circular_bufferERNS_14__split_bufferISB_RSC_EE($this, $__v);
  __ZNSt3__214__split_bufferIN8nlohmann10basic_jsonINS_3mapENS_6vectorENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEbxydS8_NS1_14adl_serializerEEERNS8_ISC_EEED2Ev($__v);
  STACKTOP = sp;
  return;
 }
}

function _GetShapesTexture($agg$result) {
 $agg$result = $agg$result | 0;
 var $$compoundliteral = 0, $arrayidx = 0, $rec = 0, $texture = 0, $tmp = 0, $tmp1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(112);
 $tmp = sp + 72 | 0;
 $rec = sp + 56 | 0;
 $tmp1 = sp + 16 | 0;
 $$compoundliteral = sp;
 if (HEAP32[14993] | 0) {
  HEAP32[$agg$result >> 2] = HEAP32[14993];
  HEAP32[$agg$result + 4 >> 2] = HEAP32[14994];
  HEAP32[$agg$result + 8 >> 2] = HEAP32[14995];
  HEAP32[$agg$result + 12 >> 2] = HEAP32[14996];
  HEAP32[$agg$result + 16 >> 2] = HEAP32[14997];
  STACKTOP = sp;
  return;
 }
 _GetFontDefault($tmp);
 $texture = $tmp + 8 | 0;
 HEAP32[14993] = HEAP32[$texture >> 2];
 HEAP32[14994] = HEAP32[$texture + 4 >> 2];
 HEAP32[14995] = HEAP32[$texture + 8 >> 2];
 HEAP32[14996] = HEAP32[$texture + 12 >> 2];
 HEAP32[14997] = HEAP32[$texture + 16 >> 2];
 _GetFontDefault($tmp1);
 $arrayidx = (HEAP32[$tmp1 + 28 >> 2] | 0) + 1520 | 0;
 HEAP32[$rec >> 2] = HEAP32[$arrayidx >> 2];
 HEAP32[$rec + 4 >> 2] = HEAP32[$arrayidx + 4 >> 2];
 HEAP32[$rec + 8 >> 2] = HEAP32[$arrayidx + 8 >> 2];
 HEAP32[$rec + 12 >> 2] = HEAP32[$arrayidx + 12 >> 2];
 HEAPF32[$$compoundliteral >> 2] = Math_fround(Math_fround(HEAPF32[$rec >> 2]) + Math_fround(1.0));
 HEAPF32[$$compoundliteral + 4 >> 2] = Math_fround(Math_fround(HEAPF32[$rec + 4 >> 2]) + Math_fround(1.0));
 HEAPF32[$$compoundliteral + 8 >> 2] = Math_fround(Math_fround(HEAPF32[$rec + 8 >> 2]) - Math_fround(2.0));
 HEAPF32[$$compoundliteral + 12 >> 2] = Math_fround(Math_fround(HEAPF32[$rec + 12 >> 2]) - Math_fround(2.0));
 HEAP32[14989] = HEAP32[$$compoundliteral >> 2];
 HEAP32[14990] = HEAP32[$$compoundliteral + 4 >> 2];
 HEAP32[14991] = HEAP32[$$compoundliteral + 8 >> 2];
 HEAP32[14992] = HEAP32[$$compoundliteral + 12 >> 2];
 HEAP32[$agg$result >> 2] = HEAP32[14993];
 HEAP32[$agg$result + 4 >> 2] = HEAP32[14994];
 HEAP32[$agg$result + 8 >> 2] = HEAP32[14995];
 HEAP32[$agg$result + 12 >> 2] = HEAP32[14996];
 HEAP32[$agg$result + 16 >> 2] = HEAP32[14997];
 STACKTOP = sp;
 return;
}

function _stbi__loadf_main($s, $x, $y, $comp, $req_comp) {
 $s = $s | 0;
 $x = $x | 0;
 $y = $y | 0;
 $comp = $comp | 0;
 $req_comp = $req_comp | 0;
 var $1 = 0, $2 = 0, $25 = 0, $3 = 0, $4 = 0, $5 = 0, $comp$addr = 0, $cond = 0, $data = 0, $hdr_data = 0, $req_comp$addr = 0, $retval = 0, $s$addr = 0, $tobool = 0, $tobool12 = 0, $x$addr = 0, $y$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 $retval = sp + 40 | 0;
 $s$addr = sp + 36 | 0;
 $x$addr = sp + 32 | 0;
 $y$addr = sp + 28 | 0;
 $comp$addr = sp + 24 | 0;
 $req_comp$addr = sp + 20 | 0;
 $data = sp + 16 | 0;
 $hdr_data = sp;
 HEAP32[$s$addr >> 2] = $s;
 HEAP32[$x$addr >> 2] = $x;
 HEAP32[$y$addr >> 2] = $y;
 HEAP32[$comp$addr >> 2] = $comp;
 HEAP32[$req_comp$addr >> 2] = $req_comp;
 $tobool = (_stbi__hdr_test(HEAP32[$s$addr >> 2] | 0) | 0) != 0;
 $1 = HEAP32[$s$addr >> 2] | 0;
 $2 = HEAP32[$x$addr >> 2] | 0;
 $3 = HEAP32[$y$addr >> 2] | 0;
 $4 = HEAP32[$comp$addr >> 2] | 0;
 $5 = HEAP32[$req_comp$addr >> 2] | 0;
 if ($tobool) {
  HEAP32[$hdr_data >> 2] = _stbi__hdr_load($1, $2, $3, $4, $5, sp + 4 | 0) | 0;
  if (HEAP32[$hdr_data >> 2] | 0) _stbi__float_postprocess(HEAP32[$hdr_data >> 2] | 0, HEAP32[$x$addr >> 2] | 0, HEAP32[$y$addr >> 2] | 0, HEAP32[$comp$addr >> 2] | 0, HEAP32[$req_comp$addr >> 2] | 0);
  HEAP32[$retval >> 2] = HEAP32[$hdr_data >> 2];
  $25 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $25 | 0;
 }
 HEAP32[$data >> 2] = _stbi__load_and_postprocess_8bit($1, $2, $3, $4, $5) | 0;
 if (!(HEAP32[$data >> 2] | 0)) {
  $tobool12 = (_stbi__err(32866) | 0) != 0;
  HEAP32[$retval >> 2] = $tobool12 ? 0 : 0;
  $25 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $25 | 0;
 }
 if (HEAP32[$req_comp$addr >> 2] | 0) $cond = HEAP32[$req_comp$addr >> 2] | 0; else $cond = HEAP32[HEAP32[$comp$addr >> 2] >> 2] | 0;
 HEAP32[$retval >> 2] = _stbi__ldr_to_hdr(HEAP32[$data >> 2] | 0, HEAP32[HEAP32[$x$addr >> 2] >> 2] | 0, HEAP32[HEAP32[$y$addr >> 2] >> 2] | 0, $cond) | 0;
 $25 = HEAP32[$retval >> 2] | 0;
 STACKTOP = sp;
 return $25 | 0;
}

function __ZNSt3__26vectorIN8nlohmann10basic_jsonINS_3mapES0_NS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEbxydS7_NS1_14adl_serializerEEENS7_ISB_EEE24__emplace_back_slow_pathIJRyEEEvDpOT_($this, $__args) {
 $this = $this | 0;
 $__args = $__args | 0;
 var $3 = 0, $__end_ = 0, $__end_$i = 0, $__v = 0, $add = 0, $call$i = 0, $mul$i = 0, $sub$ptr$sub$i$i$i = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $__v = sp;
 $__end_$i = $this + 4 | 0;
 $add = ((HEAP32[$__end_$i >> 2] | 0) - (HEAP32[$this >> 2] | 0) >> 4) + 1 | 0;
 $call$i = __ZNKSt3__26vectorIN8nlohmann10basic_jsonINS_3mapES0_NS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEbxydS7_NS1_14adl_serializerEEENS7_ISB_EEE8max_sizeEv($this) | 0;
 if ($call$i >>> 0 < $add >>> 0) __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($this); else {
  $3 = HEAP32[$this >> 2] | 0;
  $sub$ptr$sub$i$i$i = (HEAP32[$this + 8 >> 2] | 0) - $3 | 0;
  $mul$i = $sub$ptr$sub$i$i$i >> 3;
  __ZNSt3__214__split_bufferIN8nlohmann10basic_jsonINS_3mapENS_6vectorENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEbxydS8_NS1_14adl_serializerEEERNS8_ISC_EEEC2EmmSE_($__v, $sub$ptr$sub$i$i$i >> 4 >>> 0 < $call$i >>> 1 >>> 0 ? ($mul$i >>> 0 < $add >>> 0 ? $add : $mul$i) : $call$i, (HEAP32[$__end_$i >> 2] | 0) - $3 >> 4, $this + 8 | 0);
  $__end_ = $__v + 8 | 0;
  __ZN8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEC2IRyyLi0EEEOT_(HEAP32[$__end_ >> 2] | 0, $__args);
  HEAP32[$__end_ >> 2] = (HEAP32[$__end_ >> 2] | 0) + 16;
  __ZNSt3__26vectorIN8nlohmann10basic_jsonINS_3mapES0_NS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEbxydS7_NS1_14adl_serializerEEENS7_ISB_EEE26__swap_out_circular_bufferERNS_14__split_bufferISB_RSC_EE($this, $__v);
  __ZNSt3__214__split_bufferIN8nlohmann10basic_jsonINS_3mapENS_6vectorENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEbxydS8_NS1_14adl_serializerEEERNS8_ISC_EEED2Ev($__v);
  STACKTOP = sp;
  return;
 }
}

function __ZNSt3__26vectorIN8nlohmann10basic_jsonINS_3mapES0_NS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEbxydS7_NS1_14adl_serializerEEENS7_ISB_EEE24__emplace_back_slow_pathIJRxEEEvDpOT_($this, $__args) {
 $this = $this | 0;
 $__args = $__args | 0;
 var $3 = 0, $__end_ = 0, $__end_$i = 0, $__v = 0, $add = 0, $call$i = 0, $mul$i = 0, $sub$ptr$sub$i$i$i = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $__v = sp;
 $__end_$i = $this + 4 | 0;
 $add = ((HEAP32[$__end_$i >> 2] | 0) - (HEAP32[$this >> 2] | 0) >> 4) + 1 | 0;
 $call$i = __ZNKSt3__26vectorIN8nlohmann10basic_jsonINS_3mapES0_NS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEbxydS7_NS1_14adl_serializerEEENS7_ISB_EEE8max_sizeEv($this) | 0;
 if ($call$i >>> 0 < $add >>> 0) __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($this); else {
  $3 = HEAP32[$this >> 2] | 0;
  $sub$ptr$sub$i$i$i = (HEAP32[$this + 8 >> 2] | 0) - $3 | 0;
  $mul$i = $sub$ptr$sub$i$i$i >> 3;
  __ZNSt3__214__split_bufferIN8nlohmann10basic_jsonINS_3mapENS_6vectorENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEbxydS8_NS1_14adl_serializerEEERNS8_ISC_EEEC2EmmSE_($__v, $sub$ptr$sub$i$i$i >> 4 >>> 0 < $call$i >>> 1 >>> 0 ? ($mul$i >>> 0 < $add >>> 0 ? $add : $mul$i) : $call$i, (HEAP32[$__end_$i >> 2] | 0) - $3 >> 4, $this + 8 | 0);
  $__end_ = $__v + 8 | 0;
  __ZN8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEC2IRxxLi0EEEOT_(HEAP32[$__end_ >> 2] | 0, $__args);
  HEAP32[$__end_ >> 2] = (HEAP32[$__end_ >> 2] | 0) + 16;
  __ZNSt3__26vectorIN8nlohmann10basic_jsonINS_3mapES0_NS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEbxydS7_NS1_14adl_serializerEEENS7_ISB_EEE26__swap_out_circular_bufferERNS_14__split_bufferISB_RSC_EE($this, $__v);
  __ZNSt3__214__split_bufferIN8nlohmann10basic_jsonINS_3mapENS_6vectorENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEbxydS8_NS1_14adl_serializerEEERNS8_ISC_EEED2Ev($__v);
  STACKTOP = sp;
  return;
 }
}

function __ZNSt3__26vectorIN8nlohmann10basic_jsonINS_3mapES0_NS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEbxydS7_NS1_14adl_serializerEEENS7_ISB_EEE24__emplace_back_slow_pathIJRdEEEvDpOT_($this, $__args) {
 $this = $this | 0;
 $__args = $__args | 0;
 var $3 = 0, $__end_ = 0, $__end_$i = 0, $__v = 0, $add = 0, $call$i = 0, $mul$i = 0, $sub$ptr$sub$i$i$i = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $__v = sp;
 $__end_$i = $this + 4 | 0;
 $add = ((HEAP32[$__end_$i >> 2] | 0) - (HEAP32[$this >> 2] | 0) >> 4) + 1 | 0;
 $call$i = __ZNKSt3__26vectorIN8nlohmann10basic_jsonINS_3mapES0_NS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEbxydS7_NS1_14adl_serializerEEENS7_ISB_EEE8max_sizeEv($this) | 0;
 if ($call$i >>> 0 < $add >>> 0) __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($this); else {
  $3 = HEAP32[$this >> 2] | 0;
  $sub$ptr$sub$i$i$i = (HEAP32[$this + 8 >> 2] | 0) - $3 | 0;
  $mul$i = $sub$ptr$sub$i$i$i >> 3;
  __ZNSt3__214__split_bufferIN8nlohmann10basic_jsonINS_3mapENS_6vectorENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEbxydS8_NS1_14adl_serializerEEERNS8_ISC_EEEC2EmmSE_($__v, $sub$ptr$sub$i$i$i >> 4 >>> 0 < $call$i >>> 1 >>> 0 ? ($mul$i >>> 0 < $add >>> 0 ? $add : $mul$i) : $call$i, (HEAP32[$__end_$i >> 2] | 0) - $3 >> 4, $this + 8 | 0);
  $__end_ = $__v + 8 | 0;
  __ZN8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEC2IRddLi0EEEOT_(HEAP32[$__end_ >> 2] | 0, $__args);
  HEAP32[$__end_ >> 2] = (HEAP32[$__end_ >> 2] | 0) + 16;
  __ZNSt3__26vectorIN8nlohmann10basic_jsonINS_3mapES0_NS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEbxydS7_NS1_14adl_serializerEEENS7_ISB_EEE26__swap_out_circular_bufferERNS_14__split_bufferISB_RSC_EE($this, $__v);
  __ZNSt3__214__split_bufferIN8nlohmann10basic_jsonINS_3mapENS_6vectorENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEbxydS8_NS1_14adl_serializerEEERNS8_ISC_EEED2Ev($__v);
  STACKTOP = sp;
  return;
 }
}

function __ZNSt3__26vectorIN8nlohmann10basic_jsonINS_3mapES0_NS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEbxydS7_NS1_14adl_serializerEEENS7_ISB_EEE24__emplace_back_slow_pathIJRbEEEvDpOT_($this, $__args) {
 $this = $this | 0;
 $__args = $__args | 0;
 var $3 = 0, $__end_ = 0, $__end_$i = 0, $__v = 0, $add = 0, $call$i = 0, $mul$i = 0, $sub$ptr$sub$i$i$i = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $__v = sp;
 $__end_$i = $this + 4 | 0;
 $add = ((HEAP32[$__end_$i >> 2] | 0) - (HEAP32[$this >> 2] | 0) >> 4) + 1 | 0;
 $call$i = __ZNKSt3__26vectorIN8nlohmann10basic_jsonINS_3mapES0_NS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEbxydS7_NS1_14adl_serializerEEENS7_ISB_EEE8max_sizeEv($this) | 0;
 if ($call$i >>> 0 < $add >>> 0) __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($this); else {
  $3 = HEAP32[$this >> 2] | 0;
  $sub$ptr$sub$i$i$i = (HEAP32[$this + 8 >> 2] | 0) - $3 | 0;
  $mul$i = $sub$ptr$sub$i$i$i >> 3;
  __ZNSt3__214__split_bufferIN8nlohmann10basic_jsonINS_3mapENS_6vectorENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEbxydS8_NS1_14adl_serializerEEERNS8_ISC_EEEC2EmmSE_($__v, $sub$ptr$sub$i$i$i >> 4 >>> 0 < $call$i >>> 1 >>> 0 ? ($mul$i >>> 0 < $add >>> 0 ? $add : $mul$i) : $call$i, (HEAP32[$__end_$i >> 2] | 0) - $3 >> 4, $this + 8 | 0);
  $__end_ = $__v + 8 | 0;
  __ZN8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEC2IRbbLi0EEEOT_(HEAP32[$__end_ >> 2] | 0, $__args);
  HEAP32[$__end_ >> 2] = (HEAP32[$__end_ >> 2] | 0) + 16;
  __ZNSt3__26vectorIN8nlohmann10basic_jsonINS_3mapES0_NS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEbxydS7_NS1_14adl_serializerEEENS7_ISB_EEE26__swap_out_circular_bufferERNS_14__split_bufferISB_RSC_EE($this, $__v);
  __ZNSt3__214__split_bufferIN8nlohmann10basic_jsonINS_3mapENS_6vectorENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEbxydS8_NS1_14adl_serializerEEERNS8_ISC_EEED2Ev($__v);
  STACKTOP = sp;
  return;
 }
}

function _CompileShader($shaderStr, $type) {
 $shaderStr = $shaderStr | 0;
 $type = $type | 0;
 var $12 = 0, $5 = 0, $7 = 0, $length = 0, $maxLength = 0, $saved_stack = 0, $shader = 0, $shaderStr$addr = 0, $success = 0, $type$addr = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer4 = 0, $vla = 0, $vla$alloca_mul = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 $vararg_buffer4 = sp + 16 | 0;
 $vararg_buffer1 = sp + 8 | 0;
 $vararg_buffer = sp;
 $shaderStr$addr = sp + 44 | 0;
 $type$addr = sp + 40 | 0;
 $shader = sp + 36 | 0;
 $success = sp + 32 | 0;
 $maxLength = sp + 28 | 0;
 $length = sp + 24 | 0;
 $saved_stack = sp + 20 | 0;
 HEAP32[$shaderStr$addr >> 2] = $shaderStr;
 HEAP32[$type$addr >> 2] = $type;
 HEAP32[$shader >> 2] = _glCreateShader(HEAP32[$type$addr >> 2] | 0) | 0;
 _glShaderSource(HEAP32[$shader >> 2] | 0, 1, $shaderStr$addr | 0, 0);
 HEAP32[$success >> 2] = 0;
 _glCompileShader(HEAP32[$shader >> 2] | 0);
 _glGetShaderiv(HEAP32[$shader >> 2] | 0, 35713, $success | 0);
 $5 = HEAP32[$shader >> 2] | 0;
 if ((HEAP32[$success >> 2] | 0) != 1) {
  HEAP32[$vararg_buffer >> 2] = $5;
  _TraceLog(4, 31235, $vararg_buffer);
  HEAP32[$maxLength >> 2] = 0;
  _glGetShaderiv(HEAP32[$shader >> 2] | 0, 35716, $maxLength | 0);
  $7 = HEAP32[$maxLength >> 2] | 0;
  HEAP32[$saved_stack >> 2] = _llvm_stacksave() | 0;
  $vla$alloca_mul = $7;
  $vla = STACKTOP;
  STACKTOP = STACKTOP + ((1 * $vla$alloca_mul | 0) + 15 & -16) | 0;
  if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow((1 * $vla$alloca_mul | 0) + 15 & -16 | 0);
  _glGetShaderInfoLog(HEAP32[$shader >> 2] | 0, HEAP32[$maxLength >> 2] | 0, $length | 0, $vla | 0);
  HEAP32[$vararg_buffer1 >> 2] = $vla;
  _TraceLog(3, 31184, $vararg_buffer1);
  _llvm_stackrestore(HEAP32[$saved_stack >> 2] | 0);
  $12 = HEAP32[$shader >> 2] | 0;
  STACKTOP = sp;
  return $12 | 0;
 } else {
  HEAP32[$vararg_buffer4 >> 2] = $5;
  _TraceLog(3, 31276, $vararg_buffer4);
  $12 = HEAP32[$shader >> 2] | 0;
  STACKTOP = sp;
  return $12 | 0;
 }
 return 0;
}

function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEmmmmmmPKc($this, $__old_cap, $__delta_cap, $__old_sz, $__n_copy, $__n_del, $__n_add, $__p_new_stuff) {
 $this = $this | 0;
 $__old_cap = $__old_cap | 0;
 $__delta_cap = $__delta_cap | 0;
 $__old_sz = $__old_sz | 0;
 $__n_copy = $__n_copy | 0;
 $__n_del = $__n_del | 0;
 $__n_add = $__n_add | 0;
 $__p_new_stuff = $__p_new_stuff | 0;
 var $$sroa$speculated = 0, $add = 0, $add40 = 0, $add48 = 0, $call$i$i$i = 0, $cond$i = 0, $cond40 = 0, $mul = 0, $ref$tmp49 = 0, $sub28 = 0, $sub29 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $ref$tmp49 = sp;
 if ((-18 - $__old_cap | 0) >>> 0 < $__delta_cap >>> 0) __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($this);
 if ((HEAP8[$this + 11 >> 0] | 0) < 0) $cond$i = HEAP32[$this >> 2] | 0; else $cond$i = $this;
 if ($__old_cap >>> 0 < 2147483623) {
  $add = $__delta_cap + $__old_cap | 0;
  $mul = $__old_cap << 1;
  $$sroa$speculated = $add >>> 0 < $mul >>> 0 ? $mul : $add;
  $cond40 = $$sroa$speculated >>> 0 < 11 ? 11 : $$sroa$speculated + 16 & -16;
 } else $cond40 = -17;
 $call$i$i$i = __Znwm($cond40) | 0;
 if ($__n_copy | 0) __ZNSt3__211char_traitsIcE4copyEPcPKcm($call$i$i$i, $cond$i, $__n_copy) | 0;
 if ($__n_add | 0) __ZNSt3__211char_traitsIcE4copyEPcPKcm($call$i$i$i + $__n_copy | 0, $__p_new_stuff, $__n_add) | 0;
 $sub28 = $__old_sz - $__n_del | 0;
 $sub29 = $sub28 - $__n_copy | 0;
 if ($sub29 | 0) __ZNSt3__211char_traitsIcE4copyEPcPKcm($call$i$i$i + $__n_copy + $__n_add | 0, $cond$i + $__n_copy + $__n_del | 0, $sub29) | 0;
 $add40 = $__old_cap + 1 | 0;
 if (($add40 | 0) != 11) __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm($cond$i, $add40);
 HEAP32[$this >> 2] = $call$i$i$i;
 HEAP32[$this + 8 >> 2] = $cond40 | -2147483648;
 $add48 = $sub28 + $__n_add | 0;
 HEAP32[$this + 4 >> 2] = $add48;
 HEAP8[$ref$tmp49 >> 0] = 0;
 __ZNSt3__211char_traitsIcE6assignERcRKc($call$i$i$i + $add48 | 0, $ref$tmp49);
 STACKTOP = sp;
 return;
}

function _GifWriteFrame($image, $width, $height, $delay, $bitDepth, $dither) {
 $image = $image | 0;
 $width = $width | 0;
 $height = $height | 0;
 $delay = $delay | 0;
 $bitDepth = $bitDepth | 0;
 $dither = $dither | 0;
 var $$pre_trunc = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $20 = 0, $bitDepth$addr = 0, $delay$addr = 0, $dither$addr = 0, $height$addr = 0, $image$addr = 0, $oldImage = 0, $pal = 0, $retval = 0, $width$addr = 0, sp = 0, CSE$0 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1312 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(1312);
 $retval = sp + 1309 | 0;
 $image$addr = sp + 1304 | 0;
 $width$addr = sp + 1300 | 0;
 $height$addr = sp + 1296 | 0;
 $delay$addr = sp + 1292 | 0;
 $bitDepth$addr = sp + 1288 | 0;
 $dither$addr = sp + 1308 | 0;
 $oldImage = sp + 1284 | 0;
 $pal = sp;
 HEAP32[$image$addr >> 2] = $image;
 HEAP32[$width$addr >> 2] = $width;
 HEAP32[$height$addr >> 2] = $height;
 HEAP32[$delay$addr >> 2] = $delay;
 HEAP32[$bitDepth$addr >> 2] = $bitDepth;
 HEAP8[$dither$addr >> 0] = $dither & 1;
 if (!(HEAP32[14955] | 0)) {
  HEAP8[$retval >> 0] = 0;
  $$pre_trunc = HEAP8[$retval >> 0] | 0;
  $20 = $$pre_trunc & 1;
  STACKTOP = sp;
  return $20 | 0;
 }
 HEAP32[$oldImage >> 2] = HEAP32[14794];
 CSE$0 = HEAP8[$dither$addr >> 0] & 1 | 0;
 _GifMakePalette(CSE$0 | 0 ? 0 : HEAP32[$oldImage >> 2] | 0, HEAP32[$image$addr >> 2] | 0, HEAP32[$width$addr >> 2] | 0, HEAP32[$height$addr >> 2] | 0, HEAP32[$bitDepth$addr >> 2] | 0, CSE$0 | 0, $pal);
 $10 = HEAP32[$oldImage >> 2] | 0;
 $11 = HEAP32[$image$addr >> 2] | 0;
 $12 = HEAP32[14794] | 0;
 $13 = HEAP32[$width$addr >> 2] | 0;
 $14 = HEAP32[$height$addr >> 2] | 0;
 if (HEAP8[$dither$addr >> 0] & 1) _GifDitherImage($10, $11, $12, $13, $14, $pal); else _GifThresholdImage($10, $11, $12, $13, $14, $pal);
 _GifWriteLzwImage(HEAP32[14955] | 0, HEAP32[14794] | 0, 0, 0, HEAP32[$width$addr >> 2] | 0, HEAP32[$height$addr >> 2] | 0, HEAP32[$delay$addr >> 2] | 0, $pal);
 HEAP8[$retval >> 0] = 1;
 $$pre_trunc = HEAP8[$retval >> 0] | 0;
 $20 = $$pre_trunc & 1;
 STACKTOP = sp;
 return $20 | 0;
}

function __ZN4tson5Layer15setTypeByStringEv($this) {
 $this = $this | 0;
 var $0 = 0, $2 = 0, $4 = 0, $6 = 0, $__size_$i$i$i = 0, $__size_$i3$i$i = 0, $call$i = 0, $call$i1 = 0, $call$i16 = 0, $call$i31 = 0, $m_type15 = 0, $m_type1547 = 0, $m_typeStr = 0, label = 0;
 label = 0;
 $m_typeStr = $this + 172 | 0;
 $call$i = __ZNSt3__211char_traitsIcE6lengthEPKc(23289) | 0;
 $__size_$i$i$i = $m_typeStr + 11 | 0;
 $0 = HEAP8[$__size_$i$i$i >> 0] | 0;
 $__size_$i3$i$i = $this + 176 | 0;
 if (($call$i | 0) == (($0 << 24 >> 24 < 0 ? HEAP32[$__size_$i3$i$i >> 2] | 0 : $0 & 255) | 0)) if (!(__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEmmPKcm($m_typeStr, 0, -1, 23289, $call$i) | 0)) HEAP8[$this + 184 >> 0] = 1; else label = 4; else label = 4;
 do if ((label | 0) == 4) {
  $call$i1 = __ZNSt3__211char_traitsIcE6lengthEPKc(23160) | 0;
  $2 = HEAP8[$__size_$i$i$i >> 0] | 0;
  if (($call$i1 | 0) == (($2 << 24 >> 24 < 0 ? HEAP32[$__size_$i3$i$i >> 2] | 0 : $2 & 255) | 0)) if (!(__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEmmPKcm($m_typeStr, 0, -1, 23160, $call$i1) | 0)) {
   HEAP8[$this + 184 >> 0] = 2;
   break;
  }
  $call$i16 = __ZNSt3__211char_traitsIcE6lengthEPKc(23299) | 0;
  $4 = HEAP8[$__size_$i$i$i >> 0] | 0;
  if (($call$i16 | 0) == (($4 << 24 >> 24 < 0 ? HEAP32[$__size_$i3$i$i >> 2] | 0 : $4 & 255) | 0)) if (!(__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEmmPKcm($m_typeStr, 0, -1, 23299, $call$i16) | 0)) {
   HEAP8[$this + 184 >> 0] = 3;
   break;
  }
  $call$i31 = __ZNSt3__211char_traitsIcE6lengthEPKc(23310) | 0;
  $6 = HEAP8[$__size_$i$i$i >> 0] | 0;
  if (($call$i31 | 0) == (($6 << 24 >> 24 < 0 ? HEAP32[$__size_$i3$i$i >> 2] | 0 : $6 & 255) | 0)) {
   $m_type15 = $this + 184 | 0;
   if (!(__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEmmPKcm($m_typeStr, 0, -1, 23310, $call$i31) | 0)) {
    HEAP8[$m_type15 >> 0] = 4;
    break;
   } else $m_type1547 = $m_type15;
  } else $m_type1547 = $this + 184 | 0;
  HEAP8[$m_type1547 >> 0] = 0;
 } while (0);
 return;
}

function ___stdio_write($f, $buf, $len) {
 $f = $f | 0;
 $buf = $buf | 0;
 $len = $len | 0;
 var $0 = 0, $3 = 0, $4 = 0, $6 = 0, $9 = 0, $cmp26 = 0, $cnt$0 = 0, $fd = 0, $iov$0 = 0, $iov$1 = 0, $iov_len38 = 0, $iovcnt$0 = 0, $iovs = 0, $num = 0, $rem$0 = 0, $retval$1$ph = 0, $sub$ptr$sub = 0, $wbase = 0, $wpos = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $iovs = sp;
 $num = sp + 16 | 0;
 $wbase = $f + 28 | 0;
 $0 = HEAP32[$wbase >> 2] | 0;
 HEAP32[$iovs >> 2] = $0;
 $wpos = $f + 20 | 0;
 $sub$ptr$sub = (HEAP32[$wpos >> 2] | 0) - $0 | 0;
 HEAP32[$iovs + 4 >> 2] = $sub$ptr$sub;
 HEAP32[$iovs + 8 >> 2] = $buf;
 HEAP32[$iovs + 12 >> 2] = $len;
 $fd = $f + 60 | 0;
 $iov$0 = $iovs;
 $iovcnt$0 = 2;
 $rem$0 = $sub$ptr$sub + $len | 0;
 while (1) {
  if (!(___wasi_syscall_ret(___wasi_fd_write(HEAP32[$fd >> 2] | 0, $iov$0 | 0, $iovcnt$0 | 0, $num | 0) | 0) | 0)) $3 = HEAP32[$num >> 2] | 0; else {
   HEAP32[$num >> 2] = -1;
   $3 = -1;
  }
  if (($rem$0 | 0) == ($3 | 0)) {
   label = 6;
   break;
  }
  if (($3 | 0) < 0) {
   label = 8;
   break;
  }
  $9 = HEAP32[$iov$0 + 4 >> 2] | 0;
  $cmp26 = $3 >>> 0 > $9 >>> 0;
  $iov$1 = $cmp26 ? $iov$0 + 8 | 0 : $iov$0;
  $cnt$0 = $3 - ($cmp26 ? $9 : 0) | 0;
  HEAP32[$iov$1 >> 2] = (HEAP32[$iov$1 >> 2] | 0) + $cnt$0;
  $iov_len38 = $iov$1 + 4 | 0;
  HEAP32[$iov_len38 >> 2] = (HEAP32[$iov_len38 >> 2] | 0) - $cnt$0;
  $iov$0 = $iov$1;
  $iovcnt$0 = $iovcnt$0 + ($cmp26 << 31 >> 31) | 0;
  $rem$0 = $rem$0 - $3 | 0;
 }
 if ((label | 0) == 6) {
  $4 = HEAP32[$f + 44 >> 2] | 0;
  HEAP32[$f + 16 >> 2] = $4 + (HEAP32[$f + 48 >> 2] | 0);
  $6 = $4;
  HEAP32[$wbase >> 2] = $6;
  HEAP32[$wpos >> 2] = $6;
  $retval$1$ph = $len;
 } else if ((label | 0) == 8) {
  HEAP32[$f + 16 >> 2] = 0;
  HEAP32[$wbase >> 2] = 0;
  HEAP32[$wpos >> 2] = 0;
  HEAP32[$f >> 2] = HEAP32[$f >> 2] | 32;
  if (($iovcnt$0 | 0) == 2) $retval$1$ph = 0; else $retval$1$ph = $len - (HEAP32[$iov$0 + 4 >> 2] | 0) | 0;
 }
 STACKTOP = sp;
 return $retval$1$ph | 0;
}

function __ZNSt3__26vectorIN8nlohmann10basic_jsonINS_3mapES0_NS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEbxydS7_NS1_14adl_serializerEEENS7_ISB_EEE21__push_back_slow_pathISB_EEvOT_($this, $__x) {
 $this = $this | 0;
 $__x = $__x | 0;
 var $3 = 0, $__end_ = 0, $__end_$i = 0, $__v = 0, $add = 0, $call$i = 0, $mul$i = 0, $sub$ptr$sub$i$i$i = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $__v = sp;
 $__end_$i = $this + 4 | 0;
 $add = ((HEAP32[$__end_$i >> 2] | 0) - (HEAP32[$this >> 2] | 0) >> 4) + 1 | 0;
 $call$i = __ZNKSt3__26vectorIN8nlohmann10basic_jsonINS_3mapES0_NS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEbxydS7_NS1_14adl_serializerEEENS7_ISB_EEE8max_sizeEv($this) | 0;
 if ($call$i >>> 0 < $add >>> 0) __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($this); else {
  $3 = HEAP32[$this >> 2] | 0;
  $sub$ptr$sub$i$i$i = (HEAP32[$this + 8 >> 2] | 0) - $3 | 0;
  $mul$i = $sub$ptr$sub$i$i$i >> 3;
  __ZNSt3__214__split_bufferIN8nlohmann10basic_jsonINS_3mapENS_6vectorENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEbxydS8_NS1_14adl_serializerEEERNS8_ISC_EEEC2EmmSE_($__v, $sub$ptr$sub$i$i$i >> 4 >>> 0 < $call$i >>> 1 >>> 0 ? ($mul$i >>> 0 < $add >>> 0 ? $add : $mul$i) : $call$i, (HEAP32[$__end_$i >> 2] | 0) - $3 >> 4, $this + 8 | 0);
  $__end_ = $__v + 8 | 0;
  __ZN8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEC2EOSB_(HEAP32[$__end_ >> 2] | 0, $__x);
  HEAP32[$__end_ >> 2] = (HEAP32[$__end_ >> 2] | 0) + 16;
  __ZNSt3__26vectorIN8nlohmann10basic_jsonINS_3mapES0_NS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEbxydS7_NS1_14adl_serializerEEENS7_ISB_EEE26__swap_out_circular_bufferERNS_14__split_bufferISB_RSC_EE($this, $__v);
  __ZNSt3__214__split_bufferIN8nlohmann10basic_jsonINS_3mapENS_6vectorENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEbxydS8_NS1_14adl_serializerEEERNS8_ISC_EEED2Ev($__v);
  STACKTOP = sp;
  return;
 }
}

function __ZN8nlohmann6detail5lexerINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE3getEv($this) {
 $this = $this | 0;
 var $10 = 0, $3 = 0, $5 = 0, $7 = 0, $__end_$i = 0, $call12 = 0, $call5 = 0, $chars_read_current_line = 0, $chars_read_total = 0, $current = 0, $current6$phi$trans$insert = 0, $current6$pre$phiZ2D = 0, $lines_read = 0, $next_unget = 0, $ref$tmp = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $ref$tmp = sp;
 $chars_read_total = $this + 16 | 0;
 HEAP32[$chars_read_total >> 2] = (HEAP32[$chars_read_total >> 2] | 0) + 1;
 $chars_read_current_line = $this + 20 | 0;
 HEAP32[$chars_read_current_line >> 2] = (HEAP32[$chars_read_current_line >> 2] | 0) + 1;
 $next_unget = $this + 12 | 0;
 if (!(HEAP8[$next_unget >> 0] | 0)) {
  $3 = HEAP32[$this >> 2] | 0;
  $call5 = FUNCTION_TABLE_ii[HEAP32[HEAP32[$3 >> 2] >> 2] & 127]($3) | 0;
  $current = $this + 8 | 0;
  HEAP32[$current >> 2] = $call5;
  $5 = $call5;
  $current6$pre$phiZ2D = $current;
 } else {
  HEAP8[$next_unget >> 0] = 0;
  $current6$phi$trans$insert = $this + 8 | 0;
  $5 = HEAP32[$current6$phi$trans$insert >> 2] | 0;
  $current6$pre$phiZ2D = $current6$phi$trans$insert;
 }
 if (($5 | 0) != (__ZNSt3__211char_traitsIcE3eofEv() | 0)) {
  $call12 = __ZNSt3__211char_traitsIcE12to_char_typeEi(HEAP32[$current6$pre$phiZ2D >> 2] | 0) | 0;
  HEAP8[$ref$tmp >> 0] = $call12;
  $__end_$i = $this + 32 | 0;
  $7 = HEAP32[$__end_$i >> 2] | 0;
  if ($7 >>> 0 < (HEAP32[$this + 36 >> 2] | 0) >>> 0) {
   HEAP8[$7 >> 0] = $call12;
   HEAP32[$__end_$i >> 2] = (HEAP32[$__end_$i >> 2] | 0) + 1;
  } else __ZNSt3__26vectorIcNS_9allocatorIcEEE21__push_back_slow_pathIcEEvOT_($this + 28 | 0, $ref$tmp);
 }
 $10 = HEAP32[$current6$pre$phiZ2D >> 2] | 0;
 if (($10 | 0) == 10) {
  $lines_read = $this + 24 | 0;
  HEAP32[$lines_read >> 2] = (HEAP32[$lines_read >> 2] | 0) + 1;
  HEAP32[$chars_read_current_line >> 2] = 0;
 }
 STACKTOP = sp;
 return $10 | 0;
}

function __ZN8nlohmann6detail9from_jsonINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEEEvRKT_RNSE_8string_tE($j, $s) {
 $j = $j | 0;
 $s = $s | 0;
 var $call$i34 = 0, $call4 = 0, $exception = 0, $ref$tmp = 0, $ref$tmp3 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $ref$tmp = sp + 12 | 0;
 $ref$tmp3 = sp;
 if (__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE9is_stringEv($j) | 0) {
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEaSERKS5_($s, __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE7get_ptrIPKS9_Li0EEEDTcldtclL_ZNS1_7declvalIRKSB_EEDTclsr3std3__2E9__declvalIT_ELi0EEEvEE12get_impl_ptrclsr3stdE7declvalISI_EEEEv($j) | 0) | 0;
  STACKTOP = sp;
  return;
 } else {
  $exception = ___cxa_allocate_exception(16) | 0;
  $call4 = __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE9type_nameEv($j) | 0;
  HEAP32[$ref$tmp3 >> 2] = 0;
  HEAP32[$ref$tmp3 + 4 >> 2] = 0;
  HEAP32[$ref$tmp3 + 8 >> 2] = 0;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcm($ref$tmp3, $call4, __ZNSt3__211char_traitsIcE6lengthEPKc($call4) | 0);
  $call$i34 = __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6insertEmPKc($ref$tmp3, 0, 23790) | 0;
  HEAP32[$ref$tmp >> 2] = HEAP32[$call$i34 >> 2];
  HEAP32[$ref$tmp + 4 >> 2] = HEAP32[$call$i34 + 4 >> 2];
  HEAP32[$ref$tmp + 8 >> 2] = HEAP32[$call$i34 + 8 >> 2];
  HEAP32[$call$i34 >> 2] = 0;
  HEAP32[$call$i34 + 4 >> 2] = 0;
  HEAP32[$call$i34 + 8 >> 2] = 0;
  __ZN8nlohmann6detail10type_error6createEiRKNSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE($exception, 302, $ref$tmp);
  ___cxa_throw($exception | 0, 15016, 9);
 }
}

function __ZN4tson3MapC2ENS_11ParseStatusENSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE($this, $status, $description) {
 $this = $this | 0;
 $status = $status | 0;
 $description = $description | 0;
 var $__begin_$i$i = 0, $__begin_$i$i1 = 0, $m_statusMessage = 0, $m_tileSize = 0, $ref$tmp$i = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $ref$tmp$i = sp;
 __ZN4tson5ColorIhEC2Ev($this);
 __ZN4tson7Vector2IiEC2Ev($this + 4 | 0);
 HEAP32[$this + 12 >> 2] = 0;
 HEAP8[$this + 16 >> 0] = 0;
 $__begin_$i$i = $this + 20 | 0;
 HEAP32[$__begin_$i$i >> 2] = 0;
 HEAP32[$__begin_$i$i + 4 >> 2] = 0;
 HEAP32[$__begin_$i$i + 8 >> 2] = 0;
 HEAP32[$__begin_$i$i + 12 >> 2] = 0;
 HEAP32[$__begin_$i$i + 16 >> 2] = 0;
 HEAP32[$__begin_$i$i + 20 >> 2] = 0;
 HEAP32[$__begin_$i$i + 24 >> 2] = 0;
 HEAP32[$__begin_$i$i + 28 >> 2] = 0;
 __ZN4tson18PropertyCollectionC2Ev($this + 52 | 0);
 $m_tileSize = $this + 124 | 0;
 dest = $this + 76 | 0;
 stop = dest + 48 | 0;
 do {
  HEAP32[dest >> 2] = 0;
  dest = dest + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 __ZN4tson7Vector2IiEC2Ev($m_tileSize);
 $__begin_$i$i1 = $this + 132 | 0;
 HEAP32[$__begin_$i$i1 >> 2] = 0;
 HEAP32[$__begin_$i$i1 + 4 >> 2] = 0;
 HEAP32[$__begin_$i$i1 + 8 >> 2] = 0;
 HEAP32[$__begin_$i$i1 + 12 >> 2] = 0;
 HEAP32[$__begin_$i$i1 + 16 >> 2] = 0;
 HEAP32[$__begin_$i$i1 + 20 >> 2] = 0;
 HEAP32[$__begin_$i$i1 + 24 >> 2] = 0;
 HEAP8[$this + 160 >> 0] = $status;
 $m_statusMessage = $this + 164 | 0;
 HEAP32[$m_statusMessage >> 2] = HEAP32[$description >> 2];
 HEAP32[$m_statusMessage + 4 >> 2] = HEAP32[$description + 4 >> 2];
 HEAP32[$m_statusMessage + 8 >> 2] = HEAP32[$description + 8 >> 2];
 HEAP32[$description >> 2] = 0;
 HEAP32[$description + 4 >> 2] = 0;
 HEAP32[$description + 8 >> 2] = 0;
 __ZNSt3__26__treeINS_12__value_typeIiPN4tson4TileEEENS_19__map_value_compareIiS5_NS_4lessIiEELb1EEENS_9allocatorIS5_EEEC2ERKS9_($this + 176 | 0, $ref$tmp$i);
 STACKTOP = sp;
 return;
}

function _stbi__load_and_postprocess_8bit($s, $x, $y, $comp, $req_comp) {
 $s = $s | 0;
 $x = $x | 0;
 $y = $y | 0;
 $comp = $comp | 0;
 $req_comp = $req_comp | 0;
 var $28 = 0, $channels = 0, $comp$addr = 0, $cond = 0, $cond14 = 0, $req_comp$addr = 0, $result = 0, $retval = 0, $ri = 0, $s$addr = 0, $x$addr = 0, $y$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 $retval = sp + 40 | 0;
 $s$addr = sp + 36 | 0;
 $x$addr = sp + 32 | 0;
 $y$addr = sp + 28 | 0;
 $comp$addr = sp + 24 | 0;
 $req_comp$addr = sp + 20 | 0;
 $ri = sp + 8 | 0;
 $result = sp + 4 | 0;
 $channels = sp;
 HEAP32[$s$addr >> 2] = $s;
 HEAP32[$x$addr >> 2] = $x;
 HEAP32[$y$addr >> 2] = $y;
 HEAP32[$comp$addr >> 2] = $comp;
 HEAP32[$req_comp$addr >> 2] = $req_comp;
 HEAP32[$result >> 2] = _stbi__load_main(HEAP32[$s$addr >> 2] | 0, HEAP32[$x$addr >> 2] | 0, HEAP32[$y$addr >> 2] | 0, HEAP32[$comp$addr >> 2] | 0, HEAP32[$req_comp$addr >> 2] | 0, $ri, 8) | 0;
 if (!(HEAP32[$result >> 2] | 0)) {
  HEAP32[$retval >> 2] = 0;
  $28 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $28 | 0;
 }
 if ((HEAP32[$ri >> 2] | 0) != 8) {
  if ((HEAP32[$ri >> 2] | 0) != 16) ___assert_fail(32755, 32781, 1129, 32825);
  if (!(HEAP32[$req_comp$addr >> 2] | 0)) $cond = HEAP32[HEAP32[$comp$addr >> 2] >> 2] | 0; else $cond = HEAP32[$req_comp$addr >> 2] | 0;
  HEAP32[$result >> 2] = _stbi__convert_16_to_8(HEAP32[$result >> 2] | 0, HEAP32[HEAP32[$x$addr >> 2] >> 2] | 0, HEAP32[HEAP32[$y$addr >> 2] >> 2] | 0, $cond) | 0;
  HEAP32[$ri >> 2] = 8;
 }
 if (0) {
  if (HEAP32[$req_comp$addr >> 2] | 0) $cond14 = HEAP32[$req_comp$addr >> 2] | 0; else $cond14 = HEAP32[HEAP32[$comp$addr >> 2] >> 2] | 0;
  HEAP32[$channels >> 2] = $cond14;
  _stbi__vertical_flip(HEAP32[$result >> 2] | 0, HEAP32[HEAP32[$x$addr >> 2] >> 2] | 0, HEAP32[HEAP32[$y$addr >> 2] >> 2] | 0, HEAP32[$channels >> 2] | 0);
 }
 HEAP32[$retval >> 2] = HEAP32[$result >> 2];
 $28 = HEAP32[$retval >> 2] | 0;
 STACKTOP = sp;
 return $28 | 0;
}

function __ZNSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN4tson8PropertyEEENS_19__map_value_compareIS7_SA_NS_4lessIS7_EELb1EEENS5_ISA_EEE25__emplace_unique_key_argsIS7_JRKNS_21piecewise_construct_tENS_5tupleIJRKS7_EEENSL_IJEEEEEENS_4pairINS_15__tree_iteratorISA_PNS_11__tree_nodeISA_PvEElEEbEERKT_DpOT0_($agg$result, $this, $__k, $__args, $__args1, $__args3) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__k = $__k | 0;
 $__args = $__args | 0;
 $__args1 = $__args1 | 0;
 $__args3 = $__args3 | 0;
 var $0 = 0, $__h = 0, $__inserted$0 = 0, $__parent = 0, $__r$0 = 0, $call = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $__parent = sp + 12 | 0;
 $__h = sp;
 $call = __ZNSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN4tson8PropertyEEENS_19__map_value_compareIS7_SA_NS_4lessIS7_EELb1EEENS5_ISA_EEE12__find_equalIS7_EERPNS_16__tree_node_baseIPvEERPNS_15__tree_end_nodeISL_EERKT_($this, $__parent, $__k) | 0;
 $0 = HEAP32[$call >> 2] | 0;
 if (!$0) {
  __ZNSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN4tson8PropertyEEENS_19__map_value_compareIS7_SA_NS_4lessIS7_EELb1EEENS5_ISA_EEE16__construct_nodeIJRKNS_21piecewise_construct_tENS_5tupleIJRKS7_EEENSL_IJEEEEEENS_10unique_ptrINS_11__tree_nodeISA_PvEENS_22__tree_node_destructorINS5_IST_EEEEEEDpOT_($__h, $this, $__args, $__args1, $__args3);
  __ZNSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN4tson8PropertyEEENS_19__map_value_compareIS7_SA_NS_4lessIS7_EELb1EEENS5_ISA_EEE16__insert_node_atEPNS_15__tree_end_nodeIPNS_16__tree_node_baseIPvEEEERSL_SL_($this, HEAP32[$__parent >> 2] | 0, $call, HEAP32[$__h >> 2] | 0);
  $__inserted$0 = 1;
  $__r$0 = HEAP32[$__h >> 2] | 0;
 } else {
  $__inserted$0 = 0;
  $__r$0 = $0;
 }
 HEAP32[$agg$result >> 2] = $__r$0;
 HEAP8[$agg$result + 4 >> 0] = $__inserted$0;
 STACKTOP = sp;
 return;
}

function ___fdopen($fd, $mode) {
 $fd = $fd | 0;
 $mode = $mode | 0;
 var $1 = 0, $3 = 0, $4 = 0, $call18 = 0, $call2 = 0, $or24 = 0, $retval$0 = 0, $tobool8 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer7 = 0, $wsz = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 $vararg_buffer7 = sp + 24 | 0;
 $vararg_buffer2 = sp + 8 | 0;
 $vararg_buffer = sp;
 $wsz = sp + 40 | 0;
 if (!(_strchr(38531, HEAP8[$mode >> 0] | 0) | 0)) {
  HEAP32[(___errno_location() | 0) >> 2] = 28;
  $retval$0 = 0;
 } else {
  $call2 = _malloc(1176) | 0;
  if (!$call2) $retval$0 = 0; else {
   _memset($call2 | 0, 0, 144) | 0;
   $tobool8 = (_strchr($mode, 43) | 0) == 0;
   $1 = HEAP8[$mode >> 0] | 0;
   if ($tobool8) HEAP32[$call2 >> 2] = $1 << 24 >> 24 == 114 ? 8 : 4;
   if ($1 << 24 >> 24 == 97) {
    HEAP32[$vararg_buffer >> 2] = $fd;
    HEAP32[$vararg_buffer + 4 >> 2] = 3;
    $call18 = ___syscall221(221, $vararg_buffer | 0) | 0;
    if (!($call18 & 1024)) {
     HEAP32[$vararg_buffer2 >> 2] = $fd;
     HEAP32[$vararg_buffer2 + 4 >> 2] = 4;
     HEAP32[$vararg_buffer2 + 8 >> 2] = $call18 | 1024;
     ___syscall221(221, $vararg_buffer2 | 0) | 0;
    }
    $or24 = HEAP32[$call2 >> 2] | 128;
    HEAP32[$call2 >> 2] = $or24;
    $4 = $or24;
   } else $4 = HEAP32[$call2 >> 2] | 0;
   HEAP32[$call2 + 60 >> 2] = $fd;
   HEAP32[$call2 + 44 >> 2] = $call2 + 152;
   HEAP32[$call2 + 48 >> 2] = 1024;
   $3 = $call2 + 75 | 0;
   HEAP8[$3 >> 0] = -1;
   if (!($4 & 8)) {
    HEAP32[$vararg_buffer7 >> 2] = $fd;
    HEAP32[$vararg_buffer7 + 4 >> 2] = 21523;
    HEAP32[$vararg_buffer7 + 8 >> 2] = $wsz;
    if (!(___syscall54(54, $vararg_buffer7 | 0) | 0)) HEAP8[$3 >> 0] = 10;
   }
   HEAP32[$call2 + 32 >> 2] = 6;
   HEAP32[$call2 + 36 >> 2] = 5;
   HEAP32[$call2 + 40 >> 2] = 1;
   HEAP32[$call2 + 12 >> 2] = 8;
   if (!(HEAP32[15010] | 0)) HEAP32[$call2 + 76 >> 2] = -1;
   ___ofl_add($call2) | 0;
   $retval$0 = $call2;
  }
 }
 STACKTOP = sp;
 return $retval$0 | 0;
}

function __ZN8nlohmann6detail9from_jsonINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEEEvRKT_RNSE_9boolean_tE($j, $b) {
 $j = $j | 0;
 $b = $b | 0;
 var $call$i34 = 0, $call4 = 0, $exception = 0, $ref$tmp = 0, $ref$tmp3 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $ref$tmp = sp + 12 | 0;
 $ref$tmp3 = sp;
 if (__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE10is_booleanEv($j) | 0) {
  HEAP8[$b >> 0] = HEAP8[(__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE7get_ptrIPKbLi0EEEDTcldtclL_ZNS1_7declvalIRKSB_EEDTclsr3std3__2E9__declvalIT_ELi0EEEvEE12get_impl_ptrclsr3stdE7declvalISI_EEEEv($j) | 0) >> 0] | 0;
  STACKTOP = sp;
  return;
 } else {
  $exception = ___cxa_allocate_exception(16) | 0;
  $call4 = __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE9type_nameEv($j) | 0;
  HEAP32[$ref$tmp3 >> 2] = 0;
  HEAP32[$ref$tmp3 + 4 >> 2] = 0;
  HEAP32[$ref$tmp3 + 8 >> 2] = 0;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcm($ref$tmp3, $call4, __ZNSt3__211char_traitsIcE6lengthEPKc($call4) | 0);
  $call$i34 = __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6insertEmPKc($ref$tmp3, 0, 23760) | 0;
  HEAP32[$ref$tmp >> 2] = HEAP32[$call$i34 >> 2];
  HEAP32[$ref$tmp + 4 >> 2] = HEAP32[$call$i34 + 4 >> 2];
  HEAP32[$ref$tmp + 8 >> 2] = HEAP32[$call$i34 + 8 >> 2];
  HEAP32[$call$i34 >> 2] = 0;
  HEAP32[$call$i34 + 4 >> 2] = 0;
  HEAP32[$call$i34 + 8 >> 2] = 0;
  __ZN8nlohmann6detail10type_error6createEiRKNSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE($exception, 302, $ref$tmp);
  ___cxa_throw($exception | 0, 15016, 9);
 }
}

function ___mo_lookup($p, $size, $s) {
 $p = $p | 0;
 $size = $size | 0;
 $s = $s | 0;
 var $add = 0, $add16 = 0, $add42 = 0, $b$0 = 0, $call = 0, $call18 = 0, $call2 = 0, $call25 = 0, $call36 = 0, $call4 = 0, $call44 = 0, $call51 = 0, $cmp71 = 0, $div12 = 0, $div13 = 0, $div14 = 0, $mul15 = 0, $n$0 = 0, $retval$4 = 0, $sub = 0, $sub5 = 0;
 $sub = (HEAP32[$p >> 2] | 0) + 1794895138 | 0;
 $call = _swapc(HEAP32[$p + 8 >> 2] | 0, $sub) | 0;
 $call2 = _swapc(HEAP32[$p + 12 >> 2] | 0, $sub) | 0;
 $call4 = _swapc(HEAP32[$p + 16 >> 2] | 0, $sub) | 0;
 L1 : do if ($call >>> 0 < $size >>> 2 >>> 0) {
  $sub5 = $size - ($call << 2) | 0;
  if ($call2 >>> 0 < $sub5 >>> 0 & $call4 >>> 0 < $sub5 >>> 0) if (!(($call4 | $call2) & 3)) {
   $div12 = $call2 >>> 2;
   $div13 = $call4 >>> 2;
   $b$0 = 0;
   $n$0 = $call;
   while (1) {
    $div14 = $n$0 >>> 1;
    $add = $b$0 + $div14 | 0;
    $mul15 = $add << 1;
    $add16 = $mul15 + $div12 | 0;
    $call18 = _swapc(HEAP32[$p + ($add16 << 2) >> 2] | 0, $sub) | 0;
    $call25 = _swapc(HEAP32[$p + ($add16 + 1 << 2) >> 2] | 0, $sub) | 0;
    if (!($call25 >>> 0 < $size >>> 0 & $call18 >>> 0 < ($size - $call25 | 0) >>> 0)) {
     $retval$4 = 0;
     break L1;
    }
    if (HEAP8[$p + ($call25 + $call18) >> 0] | 0) {
     $retval$4 = 0;
     break L1;
    }
    $call36 = _strcmp($s, $p + $call25 | 0) | 0;
    if (!$call36) break;
    $cmp71 = ($call36 | 0) < 0;
    if (($n$0 | 0) == 1) {
     $retval$4 = 0;
     break L1;
    }
    $b$0 = $cmp71 ? $b$0 : $add;
    $n$0 = $cmp71 ? $div14 : $n$0 - $div14 | 0;
   }
   $add42 = $mul15 + $div13 | 0;
   $call44 = _swapc(HEAP32[$p + ($add42 << 2) >> 2] | 0, $sub) | 0;
   $call51 = _swapc(HEAP32[$p + ($add42 + 1 << 2) >> 2] | 0, $sub) | 0;
   if ($call51 >>> 0 < $size >>> 0 & $call44 >>> 0 < ($size - $call51 | 0) >>> 0) $retval$4 = (HEAP8[$p + ($call51 + $call44) >> 0] | 0) == 0 ? $p + $call51 | 0 : 0; else $retval$4 = 0;
  } else $retval$4 = 0; else $retval$4 = 0;
 } else $retval$4 = 0; while (0);
 return $retval$4 | 0;
}

function __ZNSt3__26__treeINS_12__value_typeIiPN4tson4TileEEENS_19__map_value_compareIiS5_NS_4lessIiEELb1EEENS_9allocatorIS5_EEE12__find_equalIiEERPNS_16__tree_node_baseIPvEERPNS_15__tree_end_nodeISH_EERKT_($this, $__parent, $__v) {
 $this = $this | 0;
 $__parent = $__parent | 0;
 $__v = $__v | 0;
 var $0 = 0, $3 = 0, $4 = 0, $6 = 0, $7 = 0, $__cc$i$i19 = 0, $__nd$0 = 0, $__nd$1$in = 0, $__nd_ptr$0 = 0, $__nd_ptr$1 = 0, $__value_$i$i$i$i = 0, $call$i$i$i20 = 0, $call2 = 0, $retval$0 = 0, label = 0;
 label = 0;
 $__value_$i$i$i$i = $this + 4 | 0;
 $0 = HEAP32[$__value_$i$i$i$i >> 2] | 0;
 $call2 = __ZNKSt3__26__treeINS_12__value_typeIiPN4tson4TileEEENS_19__map_value_compareIiS5_NS_4lessIiEELb1EEENS_9allocatorIS5_EEE10__root_ptrEv($this) | 0;
 do if (!$0) {
  HEAP32[$__parent >> 2] = $__value_$i$i$i$i;
  $retval$0 = $__value_$i$i$i$i;
 } else {
  $__nd$0 = $0;
  $__nd_ptr$0 = $call2;
  while (1) {
   $__cc$i$i19 = $__nd$0 + 16 | 0;
   $call$i$i$i20 = __ZNSt3__29__launderIKNS_4pairIKiPN4tson4TileEEEEEPT_S9_($__cc$i$i19) | 0;
   if ((HEAP32[$__v >> 2] | 0) < (HEAP32[$call$i$i$i20 >> 2] | 0)) {
    $3 = HEAP32[$__nd$0 >> 2] | 0;
    if (!$3) {
     label = 5;
     break;
    } else {
     $__nd$1$in = $3;
     $__nd_ptr$1 = $__nd$0;
    }
   } else {
    $4 = HEAP32[(__ZNSt3__29__launderIKNS_4pairIKiPN4tson4TileEEEEEPT_S9_($__cc$i$i19) | 0) >> 2] | 0;
    if (($4 | 0) >= (HEAP32[$__v >> 2] | 0)) {
     label = 9;
     break;
    }
    $6 = $__nd$0 + 4 | 0;
    $7 = HEAP32[$6 >> 2] | 0;
    if (!$7) {
     label = 8;
     break;
    } else {
     $__nd$1$in = $7;
     $__nd_ptr$1 = $6;
    }
   }
   $__nd$0 = $__nd$1$in;
   $__nd_ptr$0 = $__nd_ptr$1;
  }
  if ((label | 0) == 5) {
   HEAP32[$__parent >> 2] = $__nd$0;
   $retval$0 = $__nd$0;
   break;
  } else if ((label | 0) == 8) {
   HEAP32[$__parent >> 2] = $__nd$0;
   $retval$0 = $6;
   break;
  } else if ((label | 0) == 9) {
   HEAP32[$__parent >> 2] = $__nd$0;
   $retval$0 = $__nd_ptr$0;
   break;
  }
 } while (0);
 return $retval$0 | 0;
}

function __ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPKv($this, $__s, $__iob, $__fl, $__v) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__iob = $__iob | 0;
 $__fl = $__fl | 0;
 $__v = $__v | 0;
 var $__fmt = 0, $__nar = 0, $__o = 0, $add$ptr = 0, $add$ptr13 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call = 0, $call$i = 0, $call21 = 0, $call3 = 0, $call6 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(208);
 $agg$tmp$byval_copy = sp + 184 | 0;
 $__fmt = sp + 192 | 0;
 $__nar = sp + 160 | 0;
 $__o = sp;
 $agg$tmp = sp + 188 | 0;
 HEAP8[$__fmt >> 0] = HEAP8[43061] | 0;
 HEAP8[$__fmt + 1 >> 0] = HEAP8[43062] | 0;
 HEAP8[$__fmt + 2 >> 0] = HEAP8[43063] | 0;
 HEAP8[$__fmt + 3 >> 0] = HEAP8[43064] | 0;
 HEAP8[$__fmt + 4 >> 0] = HEAP8[43065] | 0;
 HEAP8[$__fmt + 5 >> 0] = HEAP8[43066] | 0;
 $call = __ZNSt3__26__clocEv() | 0;
 HEAP32[$agg$tmp$byval_copy >> 2] = $__v;
 $call3 = __ZNSt3__219__libcpp_snprintf_lEPcmP15__locale_structPKcz($__nar, 20, $call, $__fmt, $agg$tmp$byval_copy) | 0;
 $add$ptr = $__nar + $call3 | 0;
 $call6 = __ZNSt3__214__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($__nar, $add$ptr, $__iob) | 0;
 __ZNKSt3__28ios_base6getlocEv($agg$tmp$byval_copy, $__iob);
 $call$i = __ZNKSt3__26locale9use_facetERNS0_2idE($agg$tmp$byval_copy, 61248) | 0;
 __ZNSt3__26localeD2Ev($agg$tmp$byval_copy);
 FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[$call$i >> 2] | 0) + 48 >> 2] & 15]($call$i, $__nar, $add$ptr, $__o) | 0;
 $add$ptr13 = $__o + ($call3 << 2) | 0;
 HEAP32[$agg$tmp >> 2] = HEAP32[$__s >> 2];
 HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 $call21 = __ZNSt3__216__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$tmp$byval_copy, $__o, ($call6 | 0) == ($add$ptr | 0) ? $add$ptr13 : $__o + ($call6 - $__nar << 2) | 0, $add$ptr13, $__iob, $__fl) | 0;
 STACKTOP = sp;
 return $call21 | 0;
}

function __ZNKSt3__28time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPK2tmcc($this, $__s, $0, $1, $__tm, $__fmt, $__mod) {
 $this = $this | 0;
 $__s = $__s | 0;
 $0 = $0 | 0;
 $1 = $1 | 0;
 $__tm = $__tm | 0;
 $__fmt = $__fmt | 0;
 $__mod = $__mod | 0;
 var $2 = 0, $4 = 0, $5 = 0, $7 = 0, $__first$addr$0$i$i = 0, $__nar = 0, $__ne = 0, $__nout_$i$i$i$i = 0, $agg$tmp1$sroa$0$0$i = 0, $agg$tmp1$sroa$0$1$i = 0, $call$i$i$i$i = 0, $call4$i$i$i = 0, $retval$0$i$i$i$i = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 416 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(416);
 $__nar = sp;
 $__ne = sp + 400 | 0;
 HEAP32[$__ne >> 2] = $__nar + 400;
 __ZNKSt3__210__time_put8__do_putEPwRS1_PK2tmcc($this + 8 | 0, $__nar, $__ne, $__tm, $__fmt, $__mod);
 $2 = HEAP32[$__ne >> 2] | 0;
 $__first$addr$0$i$i = $__nar;
 $agg$tmp1$sroa$0$0$i = HEAP32[$__s >> 2] | 0;
 while (1) {
  if (($__first$addr$0$i$i | 0) == ($2 | 0)) break;
  $4 = HEAP32[$__first$addr$0$i$i >> 2] | 0;
  if (!$agg$tmp1$sroa$0$0$i) $agg$tmp1$sroa$0$1$i = 0; else {
   $__nout_$i$i$i$i = $agg$tmp1$sroa$0$0$i + 24 | 0;
   $5 = HEAP32[$__nout_$i$i$i$i >> 2] | 0;
   if (($5 | 0) == (HEAP32[$agg$tmp1$sroa$0$0$i + 28 >> 2] | 0)) {
    $7 = HEAP32[(HEAP32[$agg$tmp1$sroa$0$0$i >> 2] | 0) + 52 >> 2] | 0;
    $call$i$i$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw($4) | 0;
    $retval$0$i$i$i$i = FUNCTION_TABLE_iii[$7 & 31]($agg$tmp1$sroa$0$0$i, $call$i$i$i$i) | 0;
   } else {
    HEAP32[$__nout_$i$i$i$i >> 2] = $5 + 4;
    HEAP32[$5 >> 2] = $4;
    $retval$0$i$i$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw($4) | 0;
   }
   $call4$i$i$i = __ZNSt3__211char_traitsIwE11eq_int_typeEjj($retval$0$i$i$i$i, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0;
   $agg$tmp1$sroa$0$1$i = $call4$i$i$i ? 0 : $agg$tmp1$sroa$0$0$i;
  }
  $__first$addr$0$i$i = $__first$addr$0$i$i + 4 | 0;
  $agg$tmp1$sroa$0$0$i = $agg$tmp1$sroa$0$1$i;
 }
 STACKTOP = sp;
 return $agg$tmp1$sroa$0$0$i | 0;
}

function _rlReadScreenPixels($width, $height) {
 $width = $width | 0;
 $height = $height | 0;
 var $height$addr = 0, $imgData = 0, $mul11 = 0, $mul15 = 0, $mul23 = 0, $screenData = 0, $width$addr = 0, $x = 0, $y = 0, sp = 0, CSE$0 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $width$addr = sp + 20 | 0;
 $height$addr = sp + 16 | 0;
 $screenData = sp + 12 | 0;
 $imgData = sp + 8 | 0;
 $y = sp + 4 | 0;
 $x = sp;
 HEAP32[$width$addr >> 2] = $width;
 HEAP32[$height$addr >> 2] = $height;
 HEAP32[$screenData >> 2] = _calloc((Math_imul(HEAP32[$width$addr >> 2] | 0, HEAP32[$height$addr >> 2] | 0) | 0) << 2, 1) | 0;
 _glReadPixels(0, 0, HEAP32[$width$addr >> 2] | 0, HEAP32[$height$addr >> 2] | 0, 6408, 5121, HEAP32[$screenData >> 2] | 0);
 HEAP32[$imgData >> 2] = _malloc((Math_imul(HEAP32[$width$addr >> 2] | 0, HEAP32[$height$addr >> 2] | 0) | 0) << 2) | 0;
 HEAP32[$y >> 2] = (HEAP32[$height$addr >> 2] | 0) - 1;
 while (1) {
  if ((HEAP32[$y >> 2] | 0) < 0) break;
  HEAP32[$x >> 2] = 0;
  while (1) {
   if ((HEAP32[$x >> 2] | 0) >= (HEAP32[$width$addr >> 2] << 2 | 0)) break;
   $mul11 = (Math_imul(HEAP32[$y >> 2] | 0, HEAP32[$width$addr >> 2] | 0) | 0) << 2;
   $mul15 = (Math_imul((HEAP32[$height$addr >> 2] | 0) - 1 - (HEAP32[$y >> 2] | 0) | 0, HEAP32[$width$addr >> 2] | 0) | 0) << 2;
   CSE$0 = HEAP32[$x >> 2] | 0;
   HEAP8[(HEAP32[$imgData >> 2] | 0) + ($mul15 + CSE$0) >> 0] = HEAP8[(HEAP32[$screenData >> 2] | 0) + ($mul11 + CSE$0) >> 0] | 0;
   if (!(((HEAP32[$x >> 2] | 0) + 1 | 0) % 4 | 0)) {
    $mul23 = (Math_imul((HEAP32[$height$addr >> 2] | 0) - 1 - (HEAP32[$y >> 2] | 0) | 0, HEAP32[$width$addr >> 2] | 0) | 0) << 2;
    HEAP8[(HEAP32[$imgData >> 2] | 0) + ($mul23 + (HEAP32[$x >> 2] | 0)) >> 0] = -1;
   }
   HEAP32[$x >> 2] = (HEAP32[$x >> 2] | 0) + 1;
  }
  HEAP32[$y >> 2] = (HEAP32[$y >> 2] | 0) + -1;
 }
 _free(HEAP32[$screenData >> 2] | 0);
 STACKTOP = sp;
 return HEAP32[$imgData >> 2] | 0;
}

function __ZNKSt3__28time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPK2tmcc($this, $__s, $0, $1, $__tm, $__fmt, $__mod) {
 $this = $this | 0;
 $__s = $__s | 0;
 $0 = $0 | 0;
 $1 = $1 | 0;
 $__tm = $__tm | 0;
 $__fmt = $__fmt | 0;
 $__mod = $__mod | 0;
 var $2 = 0, $4 = 0, $5 = 0, $7 = 0, $__first$addr$0$i$i = 0, $__nar = 0, $__ne = 0, $__nout_$i$i$i$i = 0, $agg$tmp1$sroa$0$0$i = 0, $agg$tmp1$sroa$0$1$i = 0, $call$i$i$i$i = 0, $call4$i$i$i = 0, $retval$0$i$i$i$i = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(112);
 $__nar = sp;
 $__ne = sp + 100 | 0;
 HEAP32[$__ne >> 2] = $__nar + 100;
 __ZNKSt3__210__time_put8__do_putEPcRS1_PK2tmcc($this + 8 | 0, $__nar, $__ne, $__tm, $__fmt, $__mod);
 $2 = HEAP32[$__ne >> 2] | 0;
 $__first$addr$0$i$i = $__nar;
 $agg$tmp1$sroa$0$0$i = HEAP32[$__s >> 2] | 0;
 while (1) {
  if (($__first$addr$0$i$i | 0) == ($2 | 0)) break;
  $4 = HEAP8[$__first$addr$0$i$i >> 0] | 0;
  if (!$agg$tmp1$sroa$0$0$i) $agg$tmp1$sroa$0$1$i = 0; else {
   $__nout_$i$i$i$i = $agg$tmp1$sroa$0$0$i + 24 | 0;
   $5 = HEAP32[$__nout_$i$i$i$i >> 2] | 0;
   if (($5 | 0) == (HEAP32[$agg$tmp1$sroa$0$0$i + 28 >> 2] | 0)) {
    $7 = HEAP32[(HEAP32[$agg$tmp1$sroa$0$0$i >> 2] | 0) + 52 >> 2] | 0;
    $call$i$i$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc($4) | 0;
    $retval$0$i$i$i$i = FUNCTION_TABLE_iii[$7 & 31]($agg$tmp1$sroa$0$0$i, $call$i$i$i$i) | 0;
   } else {
    HEAP32[$__nout_$i$i$i$i >> 2] = $5 + 1;
    HEAP8[$5 >> 0] = $4;
    $retval$0$i$i$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc($4) | 0;
   }
   $call4$i$i$i = __ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i$i$i, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0;
   $agg$tmp1$sroa$0$1$i = $call4$i$i$i ? 0 : $agg$tmp1$sroa$0$0$i;
  }
  $__first$addr$0$i$i = $__first$addr$0$i$i + 1 | 0;
  $agg$tmp1$sroa$0$0$i = $agg$tmp1$sroa$0$1$i;
 }
 STACKTOP = sp;
 return $agg$tmp1$sroa$0$0$i | 0;
}

function _stbi__compute_transparency16($z, $tc, $out_n) {
 $z = $z | 0;
 $tc = $tc | 0;
 $out_n = $out_n | 0;
 var $cmp3 = 0, $i = 0, $out_n$addr = 0, $p = 0, $pixel_count = 0, $s = 0, $tc$addr = 0, $z$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $z$addr = sp + 24 | 0;
 $tc$addr = sp + 20 | 0;
 $out_n$addr = sp + 16 | 0;
 $s = sp + 12 | 0;
 $i = sp + 8 | 0;
 $pixel_count = sp + 4 | 0;
 $p = sp;
 HEAP32[$z$addr >> 2] = $z;
 HEAP32[$tc$addr >> 2] = $tc;
 HEAP32[$out_n$addr >> 2] = $out_n;
 HEAP32[$s >> 2] = HEAP32[HEAP32[$z$addr >> 2] >> 2];
 HEAP32[$pixel_count >> 2] = Math_imul(HEAP32[HEAP32[$s >> 2] >> 2] | 0, HEAP32[(HEAP32[$s >> 2] | 0) + 4 >> 2] | 0) | 0;
 HEAP32[$p >> 2] = HEAP32[(HEAP32[$z$addr >> 2] | 0) + 12 >> 2];
 if (!((HEAP32[$out_n$addr >> 2] | 0) == 2 | (HEAP32[$out_n$addr >> 2] | 0) == 4)) ___assert_fail(33430, 32781, 4686, 33482);
 $cmp3 = (HEAP32[$out_n$addr >> 2] | 0) == 2;
 HEAP32[$i >> 2] = 0;
 if ($cmp3) {
  while (1) {
   if ((HEAP32[$i >> 2] | 0) >>> 0 >= (HEAP32[$pixel_count >> 2] | 0) >>> 0) break;
   HEAP16[(HEAP32[$p >> 2] | 0) + 2 >> 1] = (HEAPU16[HEAP32[$p >> 2] >> 1] | 0 | 0) == (HEAPU16[HEAP32[$tc$addr >> 2] >> 1] | 0 | 0) ? 0 : 65535;
   HEAP32[$p >> 2] = (HEAP32[$p >> 2] | 0) + 4;
   HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
  }
  STACKTOP = sp;
  return 1;
 }
 while (1) {
  if ((HEAP32[$i >> 2] | 0) >>> 0 >= (HEAP32[$pixel_count >> 2] | 0) >>> 0) break;
  if ((HEAPU16[HEAP32[$p >> 2] >> 1] | 0 | 0) == (HEAPU16[HEAP32[$tc$addr >> 2] >> 1] | 0 | 0)) if ((HEAPU16[(HEAP32[$p >> 2] | 0) + 2 >> 1] | 0 | 0) == (HEAPU16[(HEAP32[$tc$addr >> 2] | 0) + 2 >> 1] | 0 | 0)) if ((HEAPU16[(HEAP32[$p >> 2] | 0) + 4 >> 1] | 0 | 0) == (HEAPU16[(HEAP32[$tc$addr >> 2] | 0) + 4 >> 1] | 0 | 0)) HEAP16[(HEAP32[$p >> 2] | 0) + 6 >> 1] = 0;
  HEAP32[$p >> 2] = (HEAP32[$p >> 2] | 0) + 8;
  HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
 }
 STACKTOP = sp;
 return 1;
}

function __ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPKv($this, $__s, $__iob, $__fl, $__v) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__iob = $__iob | 0;
 $__fl = $__fl | 0;
 $__v = $__v | 0;
 var $__fmt = 0, $__nar = 0, $__o = 0, $add$ptr = 0, $add$ptr13 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call = 0, $call$i = 0, $call21 = 0, $call3 = 0, $call6 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(96);
 $agg$tmp$byval_copy = sp + 72 | 0;
 $__fmt = sp + 80 | 0;
 $__nar = sp + 48 | 0;
 $__o = sp;
 $agg$tmp = sp + 76 | 0;
 HEAP8[$__fmt >> 0] = HEAP8[43061] | 0;
 HEAP8[$__fmt + 1 >> 0] = HEAP8[43062] | 0;
 HEAP8[$__fmt + 2 >> 0] = HEAP8[43063] | 0;
 HEAP8[$__fmt + 3 >> 0] = HEAP8[43064] | 0;
 HEAP8[$__fmt + 4 >> 0] = HEAP8[43065] | 0;
 HEAP8[$__fmt + 5 >> 0] = HEAP8[43066] | 0;
 $call = __ZNSt3__26__clocEv() | 0;
 HEAP32[$agg$tmp$byval_copy >> 2] = $__v;
 $call3 = __ZNSt3__219__libcpp_snprintf_lEPcmP15__locale_structPKcz($__nar, 20, $call, $__fmt, $agg$tmp$byval_copy) | 0;
 $add$ptr = $__nar + $call3 | 0;
 $call6 = __ZNSt3__214__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($__nar, $add$ptr, $__iob) | 0;
 __ZNKSt3__28ios_base6getlocEv($agg$tmp$byval_copy, $__iob);
 $call$i = __ZNKSt3__26locale9use_facetERNS0_2idE($agg$tmp$byval_copy, 61216) | 0;
 __ZNSt3__26localeD2Ev($agg$tmp$byval_copy);
 FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[$call$i >> 2] | 0) + 32 >> 2] & 15]($call$i, $__nar, $add$ptr, $__o) | 0;
 $add$ptr13 = $__o + $call3 | 0;
 HEAP32[$agg$tmp >> 2] = HEAP32[$__s >> 2];
 HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 $call21 = __ZNSt3__216__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$tmp$byval_copy, $__o, ($call6 | 0) == ($add$ptr | 0) ? $add$ptr13 : $__o + ($call6 - $__nar) | 0, $add$ptr13, $__iob, $__fl) | 0;
 STACKTOP = sp;
 return $call21 | 0;
}

function _GifPickChangedPixels($lastFrame, $frame, $numPixels) {
 $lastFrame = $lastFrame | 0;
 $frame = $frame | 0;
 $numPixels = $numPixels | 0;
 var $frame$addr = 0, $ii = 0, $lastFrame$addr = 0, $numChanged = 0, $numPixels$addr = 0, $writeIter = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $lastFrame$addr = sp + 20 | 0;
 $frame$addr = sp + 16 | 0;
 $numPixels$addr = sp + 12 | 0;
 $numChanged = sp + 8 | 0;
 $writeIter = sp + 4 | 0;
 $ii = sp;
 HEAP32[$lastFrame$addr >> 2] = $lastFrame;
 HEAP32[$frame$addr >> 2] = $frame;
 HEAP32[$numPixels$addr >> 2] = $numPixels;
 HEAP32[$numChanged >> 2] = 0;
 HEAP32[$writeIter >> 2] = HEAP32[$frame$addr >> 2];
 HEAP32[$ii >> 2] = 0;
 while (1) {
  if ((HEAP32[$ii >> 2] | 0) >= (HEAP32[$numPixels$addr >> 2] | 0)) break;
  if ((HEAPU8[HEAP32[$lastFrame$addr >> 2] >> 0] | 0 | 0) != (HEAPU8[HEAP32[$frame$addr >> 2] >> 0] | 0 | 0)) label = 6; else if ((HEAPU8[(HEAP32[$lastFrame$addr >> 2] | 0) + 1 >> 0] | 0 | 0) != (HEAPU8[(HEAP32[$frame$addr >> 2] | 0) + 1 >> 0] | 0 | 0)) label = 6; else if ((HEAPU8[(HEAP32[$lastFrame$addr >> 2] | 0) + 2 >> 0] | 0 | 0) != (HEAPU8[(HEAP32[$frame$addr >> 2] | 0) + 2 >> 0] | 0 | 0)) label = 6;
  if ((label | 0) == 6) {
   label = 0;
   HEAP8[HEAP32[$writeIter >> 2] >> 0] = HEAP8[HEAP32[$frame$addr >> 2] >> 0] | 0;
   HEAP8[(HEAP32[$writeIter >> 2] | 0) + 1 >> 0] = HEAP8[(HEAP32[$frame$addr >> 2] | 0) + 1 >> 0] | 0;
   HEAP8[(HEAP32[$writeIter >> 2] | 0) + 2 >> 0] = HEAP8[(HEAP32[$frame$addr >> 2] | 0) + 2 >> 0] | 0;
   HEAP32[$numChanged >> 2] = (HEAP32[$numChanged >> 2] | 0) + 1;
   HEAP32[$writeIter >> 2] = (HEAP32[$writeIter >> 2] | 0) + 4;
  }
  HEAP32[$lastFrame$addr >> 2] = (HEAP32[$lastFrame$addr >> 2] | 0) + 4;
  HEAP32[$frame$addr >> 2] = (HEAP32[$frame$addr >> 2] | 0) + 4;
  HEAP32[$ii >> 2] = (HEAP32[$ii >> 2] | 0) + 1;
 }
 STACKTOP = sp;
 return HEAP32[$numChanged >> 2] | 0;
}

function __ZN4tson8Property11setStrValueERKNSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE($this, $value) {
 $this = $this | 0;
 $value = $value | 0;
 var $$pr$pr$i = 0, $4 = 0, $5 = 0, $__s$i$i = 0, $__s$i7$i = 0, $__tmp$i$i = 0, $m_value = 0, $ref$tmp$i = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $__tmp$i$i = sp + 16 | 0;
 $ref$tmp$i = sp;
 $m_value = $this + 16 | 0;
 HEAP32[$ref$tmp$i >> 2] = 0;
 $__s$i$i = $ref$tmp$i + 4 | 0;
 __ZNSt3__23any8_StorageC2Ev($__s$i$i);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($__s$i$i, $value);
 HEAP32[$ref$tmp$i >> 2] = 26;
 do if (($ref$tmp$i | 0) == ($m_value | 0)) {
  $5 = 26;
  label = 7;
 } else {
  if (!(HEAP32[$m_value >> 2] | 0)) {
   $__s$i7$i = $this + 20 | 0;
   HEAP32[$__s$i7$i >> 2] = HEAP32[$__s$i$i >> 2];
   HEAP32[$__s$i7$i + 4 >> 2] = HEAP32[$__s$i$i + 4 >> 2];
   HEAP32[$__s$i7$i + 8 >> 2] = HEAP32[$__s$i$i + 8 >> 2];
   HEAP32[$__s$i$i >> 2] = 0;
   HEAP32[$__s$i$i + 4 >> 2] = 0;
   HEAP32[$__s$i$i + 8 >> 2] = 0;
   HEAP32[$m_value >> 2] = 26;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__s$i$i);
   HEAP32[$ref$tmp$i >> 2] = 0;
   break;
  }
  HEAP32[$__tmp$i$i >> 2] = 0;
  __ZNSt3__23any8_StorageC2Ev($__tmp$i$i + 4 | 0);
  FUNCTION_TABLE_iiiiii[HEAP32[$m_value >> 2] & 31](2, $m_value, $__tmp$i$i, 0, 0) | 0;
  FUNCTION_TABLE_iiiiii[HEAP32[$ref$tmp$i >> 2] & 31](2, $ref$tmp$i, $m_value, 0, 0) | 0;
  FUNCTION_TABLE_iiiiii[HEAP32[$__tmp$i$i >> 2] & 31](2, $__tmp$i$i, $ref$tmp$i, 0, 0) | 0;
  $4 = HEAP32[$__tmp$i$i >> 2] | 0;
  if ($4 | 0) FUNCTION_TABLE_iiiiii[$4 & 31](0, $__tmp$i$i, 0, 0, 0) | 0;
  $$pr$pr$i = HEAP32[$ref$tmp$i >> 2] | 0;
  if ($$pr$pr$i | 0) {
   $5 = $$pr$pr$i;
   label = 7;
  }
 } while (0);
 if ((label | 0) == 7) FUNCTION_TABLE_iiiiii[$5 & 31](0, $ref$tmp$i, 0, 0, 0) | 0;
 STACKTOP = sp;
 return;
}

function _stbi__compute_transparency($z, $tc, $out_n) {
 $z = $z | 0;
 $tc = $tc | 0;
 $out_n = $out_n | 0;
 var $cmp3 = 0, $i = 0, $out_n$addr = 0, $p = 0, $pixel_count = 0, $s = 0, $tc$addr = 0, $z$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $z$addr = sp + 24 | 0;
 $tc$addr = sp + 20 | 0;
 $out_n$addr = sp + 16 | 0;
 $s = sp + 12 | 0;
 $i = sp + 8 | 0;
 $pixel_count = sp + 4 | 0;
 $p = sp;
 HEAP32[$z$addr >> 2] = $z;
 HEAP32[$tc$addr >> 2] = $tc;
 HEAP32[$out_n$addr >> 2] = $out_n;
 HEAP32[$s >> 2] = HEAP32[HEAP32[$z$addr >> 2] >> 2];
 HEAP32[$pixel_count >> 2] = Math_imul(HEAP32[HEAP32[$s >> 2] >> 2] | 0, HEAP32[(HEAP32[$s >> 2] | 0) + 4 >> 2] | 0) | 0;
 HEAP32[$p >> 2] = HEAP32[(HEAP32[$z$addr >> 2] | 0) + 12 >> 2];
 if (!((HEAP32[$out_n$addr >> 2] | 0) == 2 | (HEAP32[$out_n$addr >> 2] | 0) == 4)) ___assert_fail(33430, 32781, 4661, 33455);
 $cmp3 = (HEAP32[$out_n$addr >> 2] | 0) == 2;
 HEAP32[$i >> 2] = 0;
 if ($cmp3) {
  while (1) {
   if ((HEAP32[$i >> 2] | 0) >>> 0 >= (HEAP32[$pixel_count >> 2] | 0) >>> 0) break;
   HEAP8[(HEAP32[$p >> 2] | 0) + 1 >> 0] = (HEAPU8[HEAP32[$p >> 2] >> 0] | 0 | 0) == (HEAPU8[HEAP32[$tc$addr >> 2] >> 0] | 0 | 0) ? 0 : 255;
   HEAP32[$p >> 2] = (HEAP32[$p >> 2] | 0) + 2;
   HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
  }
  STACKTOP = sp;
  return 1;
 }
 while (1) {
  if ((HEAP32[$i >> 2] | 0) >>> 0 >= (HEAP32[$pixel_count >> 2] | 0) >>> 0) break;
  if ((HEAPU8[HEAP32[$p >> 2] >> 0] | 0 | 0) == (HEAPU8[HEAP32[$tc$addr >> 2] >> 0] | 0 | 0)) if ((HEAPU8[(HEAP32[$p >> 2] | 0) + 1 >> 0] | 0 | 0) == (HEAPU8[(HEAP32[$tc$addr >> 2] | 0) + 1 >> 0] | 0 | 0)) if ((HEAPU8[(HEAP32[$p >> 2] | 0) + 2 >> 0] | 0 | 0) == (HEAPU8[(HEAP32[$tc$addr >> 2] | 0) + 2 >> 0] | 0 | 0)) HEAP8[(HEAP32[$p >> 2] | 0) + 3 >> 0] = 0;
  HEAP32[$p >> 2] = (HEAP32[$p >> 2] | 0) + 4;
  HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
 }
 STACKTOP = sp;
 return 1;
}

function _mbtowc($wc, $src, $n) {
 $wc = $wc | 0;
 $src = $src | 0;
 $n = $n | 0;
 var $0 = 0, $3 = 0, $4 = 0, $8 = 0, $conv38 = 0, $dummy = 0, $incdec$ptr = 0, $or51 = 0, $or66 = 0, $retval$0 = 0, $spec$select = 0, $sub = 0, $sub57 = 0, $sub72 = 0, $tobool13 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $dummy = sp;
 L1 : do if (!$src) $retval$0 = 0; else {
  do if ($n | 0) {
   $spec$select = ($wc | 0) == 0 ? $dummy : $wc;
   $0 = HEAP8[$src >> 0] | 0;
   if ($0 << 24 >> 24 > -1) {
    HEAP32[$spec$select >> 2] = $0 & 255;
    $retval$0 = $0 << 24 >> 24 != 0 & 1;
    break L1;
   }
   $tobool13 = (HEAP32[HEAP32[(___pthread_self_420() | 0) + 188 >> 2] >> 2] | 0) == 0;
   $3 = HEAP8[$src >> 0] | 0;
   if ($tobool13) {
    HEAP32[$spec$select >> 2] = $3 << 24 >> 24 & 57343;
    $retval$0 = 1;
    break L1;
   }
   $sub = ($3 & 255) + -194 | 0;
   if ($sub >>> 0 <= 50) {
    $incdec$ptr = $src + 1 | 0;
    $4 = HEAP32[7824 + ($sub << 2) >> 2] | 0;
    if ($n >>> 0 < 4) if ($4 & -2147483648 >>> (($n * 6 | 0) + -6 | 0) | 0) break;
    $conv38 = HEAPU8[$incdec$ptr >> 0] | 0;
    $8 = $conv38 >>> 3;
    if (($8 + -16 | $8 + ($4 >> 26)) >>> 0 <= 7) {
     $or51 = $conv38 + -128 | $4 << 6;
     if (($or51 | 0) >= 0) {
      HEAP32[$spec$select >> 2] = $or51;
      $retval$0 = 2;
      break L1;
     }
     $sub57 = (HEAPU8[$src + 2 >> 0] | 0) + -128 | 0;
     if ($sub57 >>> 0 <= 63) {
      $or66 = $sub57 | $or51 << 6;
      if (($or66 | 0) >= 0) {
       HEAP32[$spec$select >> 2] = $or66;
       $retval$0 = 3;
       break L1;
      }
      $sub72 = (HEAPU8[$src + 3 >> 0] | 0) + -128 | 0;
      if ($sub72 >>> 0 <= 63) {
       HEAP32[$spec$select >> 2] = $sub72 | $or66 << 6;
       $retval$0 = 4;
       break L1;
      }
     }
    }
   }
  } while (0);
  HEAP32[(___errno_location() | 0) >> 2] = 25;
  $retval$0 = -1;
 } while (0);
 STACKTOP = sp;
 return $retval$0 | 0;
}

function _stbi__zexpand($z, $zout, $n) {
 $z = $z | 0;
 $zout = $zout | 0;
 $n = $n | 0;
 var $28 = 0, $cur = 0, $limit = 0, $n$addr = 0, $q = 0, $retval = 0, $sub$ptr$sub6 = 0, $z$addr = 0, $zout$addr = 0, sp = 0, CSE$0 = 0, CSE$1 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $retval = sp + 28 | 0;
 $z$addr = sp + 24 | 0;
 $zout$addr = sp + 20 | 0;
 $n$addr = sp + 16 | 0;
 $q = sp + 12 | 0;
 $cur = sp + 8 | 0;
 $limit = sp + 4 | 0;
 HEAP32[$z$addr >> 2] = $z;
 HEAP32[$zout$addr >> 2] = $zout;
 HEAP32[$n$addr >> 2] = $n;
 HEAP32[(HEAP32[$z$addr >> 2] | 0) + 16 >> 2] = HEAP32[$zout$addr >> 2];
 if (!(HEAP32[(HEAP32[$z$addr >> 2] | 0) + 28 >> 2] | 0)) {
  HEAP32[$retval >> 2] = _stbi__err(33692) | 0;
  $28 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $28 | 0;
 }
 CSE$0 = HEAP32[$z$addr >> 2] | 0;
 HEAP32[$cur >> 2] = (HEAP32[CSE$0 + 16 >> 2] | 0) - (HEAP32[CSE$0 + 20 >> 2] | 0);
 CSE$1 = HEAP32[$z$addr >> 2] | 0;
 $sub$ptr$sub6 = (HEAP32[CSE$1 + 24 >> 2] | 0) - (HEAP32[CSE$1 + 20 >> 2] | 0) | 0;
 HEAP32[sp >> 2] = $sub$ptr$sub6;
 HEAP32[$limit >> 2] = $sub$ptr$sub6;
 while (1) {
  if (((HEAP32[$cur >> 2] | 0) + (HEAP32[$n$addr >> 2] | 0) | 0) <= (HEAP32[$limit >> 2] | 0)) break;
  HEAP32[$limit >> 2] = HEAP32[$limit >> 2] << 1;
 }
 HEAP32[$q >> 2] = _realloc(HEAP32[(HEAP32[$z$addr >> 2] | 0) + 20 >> 2] | 0, HEAP32[$limit >> 2] | 0) | 0;
 if (!(HEAP32[$q >> 2] | 0)) {
  HEAP32[$retval >> 2] = _stbi__err(32857) | 0;
  $28 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $28 | 0;
 } else {
  HEAP32[(HEAP32[$z$addr >> 2] | 0) + 20 >> 2] = HEAP32[$q >> 2];
  HEAP32[(HEAP32[$z$addr >> 2] | 0) + 16 >> 2] = (HEAP32[$q >> 2] | 0) + (HEAP32[$cur >> 2] | 0);
  HEAP32[(HEAP32[$z$addr >> 2] | 0) + 24 >> 2] = (HEAP32[$q >> 2] | 0) + (HEAP32[$limit >> 2] | 0);
  HEAP32[$retval >> 2] = 1;
  $28 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $28 | 0;
 }
 return 0;
}

function __ZNSt3__26vectorIPN8nlohmann10basic_jsonINS_3mapES0_NS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEbxydS7_NS1_14adl_serializerEEENS7_ISC_EEE21__push_back_slow_pathIRKSC_EEvOT_($this, $__x) {
 $this = $this | 0;
 $__x = $__x | 0;
 var $3 = 0, $__end_ = 0, $__end_$i = 0, $__v = 0, $add = 0, $call$i = 0, $mul$i = 0, $sub$ptr$sub$i$i$i = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $__v = sp;
 $__end_$i = $this + 4 | 0;
 $add = ((HEAP32[$__end_$i >> 2] | 0) - (HEAP32[$this >> 2] | 0) >> 2) + 1 | 0;
 $call$i = __ZNKSt3__26vectorIPN8nlohmann10basic_jsonINS_3mapES0_NS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEbxydS7_NS1_14adl_serializerEEENS7_ISC_EEE8max_sizeEv($this) | 0;
 if ($call$i >>> 0 < $add >>> 0) __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($this); else {
  $3 = HEAP32[$this >> 2] | 0;
  $sub$ptr$sub$i$i$i = (HEAP32[$this + 8 >> 2] | 0) - $3 | 0;
  $mul$i = $sub$ptr$sub$i$i$i >> 1;
  __ZNSt3__214__split_bufferIPN8nlohmann10basic_jsonINS_3mapENS_6vectorENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEbxydS8_NS1_14adl_serializerEEERNS8_ISD_EEEC2EmmSF_($__v, $sub$ptr$sub$i$i$i >> 2 >>> 0 < $call$i >>> 1 >>> 0 ? ($mul$i >>> 0 < $add >>> 0 ? $add : $mul$i) : $call$i, (HEAP32[$__end_$i >> 2] | 0) - $3 >> 2, $this + 8 | 0);
  $__end_ = $__v + 8 | 0;
  HEAP32[HEAP32[$__end_ >> 2] >> 2] = HEAP32[$__x >> 2];
  HEAP32[$__end_ >> 2] = (HEAP32[$__end_ >> 2] | 0) + 4;
  __ZNSt3__26vectorIPN8nlohmann10basic_jsonINS_3mapES0_NS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEbxydS7_NS1_14adl_serializerEEENS7_ISC_EEE26__swap_out_circular_bufferERNS_14__split_bufferISC_RSD_EE($this, $__v);
  __ZNSt3__214__split_bufferIPN8nlohmann10basic_jsonINS_3mapENS_6vectorENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEbxydS8_NS1_14adl_serializerEEERNS8_ISD_EEED2Ev($__v);
  STACKTOP = sp;
  return;
 }
}

function __ZNSt3__26vectorIPN8nlohmann10basic_jsonINS_3mapES0_NS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEbxydS7_NS1_14adl_serializerEEENS7_ISC_EEE21__push_back_slow_pathISC_EEvOT_($this, $__x) {
 $this = $this | 0;
 $__x = $__x | 0;
 var $3 = 0, $__end_ = 0, $__end_$i = 0, $__v = 0, $add = 0, $call$i = 0, $mul$i = 0, $sub$ptr$sub$i$i$i = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $__v = sp;
 $__end_$i = $this + 4 | 0;
 $add = ((HEAP32[$__end_$i >> 2] | 0) - (HEAP32[$this >> 2] | 0) >> 2) + 1 | 0;
 $call$i = __ZNKSt3__26vectorIPN8nlohmann10basic_jsonINS_3mapES0_NS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEbxydS7_NS1_14adl_serializerEEENS7_ISC_EEE8max_sizeEv($this) | 0;
 if ($call$i >>> 0 < $add >>> 0) __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($this); else {
  $3 = HEAP32[$this >> 2] | 0;
  $sub$ptr$sub$i$i$i = (HEAP32[$this + 8 >> 2] | 0) - $3 | 0;
  $mul$i = $sub$ptr$sub$i$i$i >> 1;
  __ZNSt3__214__split_bufferIPN8nlohmann10basic_jsonINS_3mapENS_6vectorENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEbxydS8_NS1_14adl_serializerEEERNS8_ISD_EEEC2EmmSF_($__v, $sub$ptr$sub$i$i$i >> 2 >>> 0 < $call$i >>> 1 >>> 0 ? ($mul$i >>> 0 < $add >>> 0 ? $add : $mul$i) : $call$i, (HEAP32[$__end_$i >> 2] | 0) - $3 >> 2, $this + 8 | 0);
  $__end_ = $__v + 8 | 0;
  HEAP32[HEAP32[$__end_ >> 2] >> 2] = HEAP32[$__x >> 2];
  HEAP32[$__end_ >> 2] = (HEAP32[$__end_ >> 2] | 0) + 4;
  __ZNSt3__26vectorIPN8nlohmann10basic_jsonINS_3mapES0_NS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEbxydS7_NS1_14adl_serializerEEENS7_ISC_EEE26__swap_out_circular_bufferERNS_14__split_bufferISC_RSD_EE($this, $__v);
  __ZNSt3__214__split_bufferIPN8nlohmann10basic_jsonINS_3mapENS_6vectorENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEbxydS8_NS1_14adl_serializerEEERNS8_ISD_EEED2Ev($__v);
  STACKTOP = sp;
  return;
 }
}

function __ZNSt3__24__fs10filesystem6detail12_GLOBAL__N_118create_file_statusERNS_10error_codeERKNS1_4pathERK4statPS4_($agg$result, $m_ec, $p, $path_stat, $ec) {
 $agg$result = $agg$result | 0;
 $m_ec = $m_ec | 0;
 $p = $p | 0;
 $path_stat = $path_stat | 0;
 $ec = $ec | 0;
 var $0 = 0, $13 = 0, $14 = 0, $15 = 0, $17 = 0, $5 = 0, $6 = 0, $err = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $err = sp;
 if ($ec | 0) {
  $0 = $m_ec;
  $5 = HEAP32[$0 + 4 >> 2] | 0;
  $6 = $ec;
  HEAP32[$6 >> 2] = HEAP32[$0 >> 2];
  HEAP32[$6 + 4 >> 2] = $5;
 }
 switch (HEAP32[$m_ec >> 2] | 0) {
 case 0:
  {
   switch (((HEAP32[$path_stat + 12 >> 2] & 61440) + -4096 | 0) >>> 12 & 1048575 | 0) {
   case 9:
    {
     $14 = 0;
     $17 = 3;
     break;
    }
   case 7:
    {
     $14 = 0;
     $17 = 1;
     break;
    }
   case 3:
    {
     $14 = 0;
     $17 = 2;
     break;
    }
   case 5:
    {
     $14 = 0;
     $17 = 4;
     break;
    }
   case 1:
    {
     $14 = 0;
     $17 = 5;
     break;
    }
   case 0:
    {
     $14 = 0;
     $17 = 6;
     break;
    }
   case 11:
    {
     $14 = 0;
     $17 = 7;
     break;
    }
   default:
    {
     $14 = 0;
     $17 = 8;
    }
   }
   $13 = __ZNSt3__24__fs10filesystem6detail12_GLOBAL__N_115posix_get_permsERK4stat($path_stat) | 0 | $14;
   $15 = $agg$result;
   HEAP32[$15 >> 2] = $17;
   HEAP32[$15 + 4 >> 2] = $13;
   break;
  }
 case 54:
 case 44:
  {
   HEAP8[$agg$result >> 0] = -1;
   HEAP32[$agg$result + 4 >> 2] = 65535;
   break;
  }
 default:
  {
   __ZNSt3__24__fs10filesystem6detail12_GLOBAL__N_112ErrorHandlerIvEC2EPKcPNS_10error_codeEPKNS1_4pathESC_($err, 45289, $ec, $p, 0);
   __ZNKSt3__24__fs10filesystem6detail12_GLOBAL__N_112ErrorHandlerIvE6reportIJEEEvRKNS_10error_codeEPKcDpRKT_($err, $m_ec);
   HEAP8[$agg$result >> 0] = 0;
   HEAP32[$agg$result + 4 >> 2] = 65535;
  }
 }
 STACKTOP = sp;
 return;
}

function __ZNSt3__2L11init_wweeksEv() {
 var $__i$0$i$i = 0, $arrayctor$cur = 0;
 if (!(HEAP8[58640] | 0)) if (___cxa_guard_acquire(58640) | 0) {
  $arrayctor$cur = 58240;
  do {
   HEAP32[$arrayctor$cur >> 2] = 0;
   HEAP32[$arrayctor$cur + 4 >> 2] = 0;
   HEAP32[$arrayctor$cur + 8 >> 2] = 0;
   $__i$0$i$i = 0;
   while (1) {
    if (($__i$0$i$i | 0) == 3) break;
    HEAP32[$arrayctor$cur + ($__i$0$i$i << 2) >> 2] = 0;
    $__i$0$i$i = $__i$0$i$i + 1 | 0;
   }
   $arrayctor$cur = $arrayctor$cur + 12 | 0;
  } while (($arrayctor$cur | 0) != 58408);
  ___cxa_guard_release(58640);
 }
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(58240, 20432) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(58252, 20460) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(58264, 20488) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(58276, 20520) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(58288, 20560) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(58300, 20596) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(58312, 20624) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(58324, 20660) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(58336, 20676) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(58348, 20692) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(58360, 20708) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(58372, 20724) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(58384, 20740) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(58396, 20756) | 0;
 return;
}

function __ZNSt3__2L10init_weeksEv() {
 var $__i$0$i$i = 0, $arrayctor$cur = 0;
 if (!(HEAP8[58560] | 0)) if (___cxa_guard_acquire(58560) | 0) {
  $arrayctor$cur = 57744;
  do {
   HEAP32[$arrayctor$cur >> 2] = 0;
   HEAP32[$arrayctor$cur + 4 >> 2] = 0;
   HEAP32[$arrayctor$cur + 8 >> 2] = 0;
   $__i$0$i$i = 0;
   while (1) {
    if (($__i$0$i$i | 0) == 3) break;
    HEAP32[$arrayctor$cur + ($__i$0$i$i << 2) >> 2] = 0;
    $__i$0$i$i = $__i$0$i$i + 1 | 0;
   }
   $arrayctor$cur = $arrayctor$cur + 12 | 0;
  } while (($arrayctor$cur | 0) != 57912);
  ___cxa_guard_release(58560);
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(57744, 43472) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(57756, 43479) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(57768, 43486) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(57780, 43494) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(57792, 43504) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(57804, 43513) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(57816, 43520) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(57828, 43529) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(57840, 43533) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(57852, 43537) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(57864, 43541) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(57876, 43545) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(57888, 43549) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(57900, 43553) | 0;
 return;
}

function _MouseButtonCallback($window, $button, $action, $mods) {
 $window = $window | 0;
 $button = $button | 0;
 $action = $action | 0;
 $mods = $mods | 0;
 var $action$addr = 0, $button$addr = 0, $conv10 = f0, $conv14 = f0, $gestureEvent = 0, $gestureEvent$byval_copy = 0, $position = 0, $position11 = 0, $tmp = 0, $y = 0, dest = 0, sp = 0, src = 0, stop = 0, CSE$0 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(144);
 $gestureEvent$byval_copy = sp + 80 | 0;
 $button$addr = sp + 72 | 0;
 $action$addr = sp + 68 | 0;
 $gestureEvent = sp + 8 | 0;
 $tmp = sp;
 HEAP32[sp + 76 >> 2] = $window;
 HEAP32[$button$addr >> 2] = $button;
 HEAP32[$action$addr >> 2] = $action;
 HEAP32[sp + 64 >> 2] = $mods;
 CSE$0 = HEAP32[$button$addr >> 2] | 0;
 HEAP8[62161 + CSE$0 >> 0] = HEAP8[62158 + CSE$0 >> 0] | 0;
 HEAP8[62158 + (HEAP32[$button$addr >> 2] | 0) >> 0] = HEAP32[$action$addr >> 2];
 if (_IsMouseButtonPressed(0) | 0) HEAP32[$gestureEvent >> 2] = 1; else if (_IsMouseButtonReleased(0) | 0) HEAP32[$gestureEvent >> 2] = 0;
 HEAP32[$gestureEvent + 8 >> 2] = 0;
 HEAP32[$gestureEvent + 4 >> 2] = 1;
 $position = $gestureEvent + 24 | 0;
 _GetMousePosition($tmp);
 HEAP32[$position >> 2] = HEAP32[$tmp >> 2];
 HEAP32[$position + 4 >> 2] = HEAP32[$tmp + 4 >> 2];
 $conv10 = Math_fround(_GetScreenWidth() | 0);
 $position11 = $gestureEvent + 24 | 0;
 HEAPF32[$position11 >> 2] = Math_fround(Math_fround(HEAPF32[$position11 >> 2]) / $conv10);
 $conv14 = Math_fround(_GetScreenHeight() | 0);
 $y = $gestureEvent + 24 + 4 | 0;
 HEAPF32[$y >> 2] = Math_fround(Math_fround(HEAPF32[$y >> 2]) / $conv14);
 dest = $gestureEvent$byval_copy;
 src = $gestureEvent;
 stop = dest + 56 | 0;
 do {
  HEAP32[dest >> 2] = HEAP32[src >> 2];
  dest = dest + 4 | 0;
  src = src + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 _ProcessGestureEvent($gestureEvent$byval_copy);
 STACKTOP = sp;
 return;
}

function __ZNK8nlohmann6detail9iter_implIKNS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEEeqERKSF_($this, $other) {
 $this = $this | 0;
 $other = $other | 0;
 var $0 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $agg$tmp18 = 0, $agg$tmp18$byval_copy = 0, $exception = 0, $retval$0 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $agg$tmp18$byval_copy = sp + 12 | 0;
 $agg$tmp$byval_copy = sp + 8 | 0;
 $agg$tmp = sp + 4 | 0;
 $agg$tmp18 = sp;
 $0 = HEAP32[$this >> 2] | 0;
 if (($0 | 0) != (HEAP32[$other >> 2] | 0)) {
  $exception = ___cxa_allocate_exception(16) | 0;
  HEAP32[$agg$tmp18$byval_copy >> 2] = 0;
  HEAP32[$agg$tmp18$byval_copy + 4 >> 2] = 0;
  HEAP32[$agg$tmp18$byval_copy + 8 >> 2] = 0;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcm($agg$tmp18$byval_copy, 23672, __ZNSt3__211char_traitsIcE6lengthEPKc(23672) | 0);
  __ZN8nlohmann6detail16invalid_iterator6createEiRKNSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE($exception, 212, $agg$tmp18$byval_copy);
  ___cxa_throw($exception | 0, 15064, 9);
 }
 if (!$0) ___assert_fail(23450, 22221, 9558, 23721);
 switch (HEAP8[$0 >> 0] | 0) {
 case 1:
  {
   $retval$0 = (HEAP32[$this + 4 >> 2] | 0) == (HEAP32[$other + 4 >> 2] | 0);
   break;
  }
 case 2:
  {
   $retval$0 = (HEAP32[$this + 8 >> 2] | 0) == (HEAP32[$other + 8 >> 2] | 0);
   break;
  }
 default:
  {
   HEAP32[$agg$tmp >> 2] = HEAP32[$this + 12 >> 2];
   HEAP32[$agg$tmp18 >> 2] = HEAP32[$other + 12 >> 2];
   HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
   HEAP32[$agg$tmp18$byval_copy >> 2] = HEAP32[$agg$tmp18 >> 2];
   $retval$0 = __ZN8nlohmann6detaileqENS0_20primitive_iterator_tES1_($agg$tmp$byval_copy, $agg$tmp18$byval_copy) | 0;
  }
 }
 STACKTOP = sp;
 return $retval$0 | 0;
}

function __ZNK8nlohmann6detail9iter_implINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEEeqERKSE_($this, $other) {
 $this = $this | 0;
 $other = $other | 0;
 var $0 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $agg$tmp18 = 0, $agg$tmp18$byval_copy = 0, $exception = 0, $retval$0 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $agg$tmp18$byval_copy = sp + 12 | 0;
 $agg$tmp$byval_copy = sp + 8 | 0;
 $agg$tmp = sp + 4 | 0;
 $agg$tmp18 = sp;
 $0 = HEAP32[$this >> 2] | 0;
 if (($0 | 0) != (HEAP32[$other >> 2] | 0)) {
  $exception = ___cxa_allocate_exception(16) | 0;
  HEAP32[$agg$tmp18$byval_copy >> 2] = 0;
  HEAP32[$agg$tmp18$byval_copy + 4 >> 2] = 0;
  HEAP32[$agg$tmp18$byval_copy + 8 >> 2] = 0;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcm($agg$tmp18$byval_copy, 23672, __ZNSt3__211char_traitsIcE6lengthEPKc(23672) | 0);
  __ZN8nlohmann6detail16invalid_iterator6createEiRKNSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE($exception, 212, $agg$tmp18$byval_copy);
  ___cxa_throw($exception | 0, 15064, 9);
 }
 if (!$0) ___assert_fail(23450, 22221, 9558, 23721);
 switch (HEAP8[$0 >> 0] | 0) {
 case 1:
  {
   $retval$0 = (HEAP32[$this + 4 >> 2] | 0) == (HEAP32[$other + 4 >> 2] | 0);
   break;
  }
 case 2:
  {
   $retval$0 = (HEAP32[$this + 8 >> 2] | 0) == (HEAP32[$other + 8 >> 2] | 0);
   break;
  }
 default:
  {
   HEAP32[$agg$tmp >> 2] = HEAP32[$this + 12 >> 2];
   HEAP32[$agg$tmp18 >> 2] = HEAP32[$other + 12 >> 2];
   HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
   HEAP32[$agg$tmp18$byval_copy >> 2] = HEAP32[$agg$tmp18 >> 2];
   $retval$0 = __ZN8nlohmann6detaileqENS0_20primitive_iterator_tES1_($agg$tmp$byval_copy, $agg$tmp18$byval_copy) | 0;
  }
 }
 STACKTOP = sp;
 return $retval$0 | 0;
}

function __ZNSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8nlohmann10basic_jsonINS_3mapENS_6vectorES7_bxydS5_NS8_14adl_serializerEEEEENS_19__map_value_compareIS7_SE_NS_4lessIvEELb1EEENS5_ISE_EEE5eraseENS_21__tree_const_iteratorISE_PNS_11__tree_nodeISE_PvEElEE($this, $__p) {
 $this = $this | 0;
 $__p = $__p | 0;
 var $0 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $7 = 0, $8 = 0, $__parent_$i410$i$i$i = 0, $__value_$i$i$i4$i = 0, $__x$addr$0$i$i$i$i = 0, $retval$0$i$i$i = 0;
 $0 = HEAP32[$__p >> 2] | 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0;
 if (!$2) {
  $4 = $0 + 8 | 0;
  $5 = HEAP32[$4 >> 2] | 0;
  if ((HEAP32[$5 >> 2] | 0) == ($0 | 0)) $retval$0$i$i$i = $5; else {
   $__parent_$i410$i$i$i = $4;
   do {
    $7 = HEAP32[$__parent_$i410$i$i$i >> 2] | 0;
    $__parent_$i410$i$i$i = $7 + 8 | 0;
    $8 = HEAP32[$__parent_$i410$i$i$i >> 2] | 0;
   } while ((HEAP32[$8 >> 2] | 0) != ($7 | 0));
   $retval$0$i$i$i = $8;
  }
 } else {
  $__x$addr$0$i$i$i$i = $2;
  while (1) {
   $3 = HEAP32[$__x$addr$0$i$i$i$i >> 2] | 0;
   if (!$3) break; else $__x$addr$0$i$i$i$i = $3;
  }
  $retval$0$i$i$i = $__x$addr$0$i$i$i$i;
 }
 if ((HEAP32[$this >> 2] | 0) == ($0 | 0)) HEAP32[$this >> 2] = $retval$0$i$i$i;
 $__value_$i$i$i4$i = $this + 8 | 0;
 HEAP32[$__value_$i$i$i4$i >> 2] = (HEAP32[$__value_$i$i$i4$i >> 2] | 0) + -1;
 __ZNSt3__213__tree_removeIPNS_16__tree_node_baseIPvEEEEvT_S5_(HEAP32[$this + 4 >> 2] | 0, $0);
 __ZNSt3__24pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8nlohmann10basic_jsonINS_3mapENS_6vectorES6_bxydS4_NS8_14adl_serializerEEEED2Ev(__ZNSt3__29__launderINS_4pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8nlohmann10basic_jsonINS_3mapENS_6vectorES7_bxydS5_NS9_14adl_serializerEEEEEEEPT_SH_($0 + 16 | 0) | 0);
 __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm($0, 48);
 return $retval$0$i$i$i | 0;
}

function __ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE6setbufEPcl($this, $__s, $__n) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__n = $__n | 0;
 var $$sink = 0, $$sroa$speculated = 0, $1 = 0, $3 = 0, $4 = 0, $5 = 0, $__binp_$i = 0, $__ebs_ = 0, $__owns_eb_ = 0, $__owns_ib_ = 0, $__s$sink = 0, label = 0;
 label = 0;
 $__binp_$i = $this + 8 | 0;
 $__owns_eb_ = $this + 96 | 0;
 HEAP32[$__binp_$i >> 2] = 0;
 HEAP32[$__binp_$i + 4 >> 2] = 0;
 HEAP32[$__binp_$i + 8 >> 2] = 0;
 HEAP32[$__binp_$i + 12 >> 2] = 0;
 HEAP32[$__binp_$i + 16 >> 2] = 0;
 HEAP32[$__binp_$i + 20 >> 2] = 0;
 if (HEAP8[$__owns_eb_ >> 0] | 0) {
  $1 = HEAP32[$this + 32 >> 2] | 0;
  if ($1 | 0) __ZdaPv($1);
 }
 $__owns_ib_ = $this + 97 | 0;
 if (HEAP8[$__owns_ib_ >> 0] | 0) {
  $3 = HEAP32[$this + 56 >> 2] | 0;
  if ($3 | 0) __ZdaPv($3);
 }
 $__ebs_ = $this + 52 | 0;
 HEAP32[$__ebs_ >> 2] = $__n;
 do if ($__n >>> 0 > 8) {
  $4 = HEAP8[$this + 98 >> 0] | 0;
  if (($__s | 0) != 0 & $4 << 24 >> 24 != 0) {
   HEAP32[$this + 32 >> 2] = $__s;
   HEAP8[$__owns_eb_ >> 0] = 0;
   label = 15;
   break;
  } else {
   HEAP32[$this + 32 >> 2] = __Znam($__n) | 0;
   HEAP8[$__owns_eb_ >> 0] = 1;
   $5 = $4;
   label = 12;
   break;
  }
 } else {
  HEAP32[$this + 32 >> 2] = $this + 44;
  HEAP32[$__ebs_ >> 2] = 8;
  HEAP8[$__owns_eb_ >> 0] = 0;
  $5 = HEAP8[$this + 98 >> 0] | 0;
  label = 12;
 } while (0);
 if ((label | 0) == 12) if (!($5 << 24 >> 24)) {
  $$sroa$speculated = ($__n | 0) > 8 ? $__n : 8;
  HEAP32[$this + 60 >> 2] = $$sroa$speculated;
  if (($__s | 0) != 0 & $$sroa$speculated >>> 0 > 7) {
   $$sink = 0;
   $__s$sink = $__s;
  } else {
   $$sink = 1;
   $__s$sink = __Znam($$sroa$speculated) | 0;
  }
 } else label = 15;
 if ((label | 0) == 15) {
  HEAP32[$this + 60 >> 2] = 0;
  $$sink = 0;
  $__s$sink = 0;
 }
 HEAP32[$this + 56 >> 2] = $__s$sink;
 HEAP8[$__owns_ib_ >> 0] = $$sink;
 return $this | 0;
}

function __ZNSt3__26__treeINS_12__value_typeINS_5tupleIJiiEEEPN4tson4TileEEENS_19__map_value_compareIS3_S7_NS_4lessIS3_EELb1EEENS_9allocatorIS7_EEE25__emplace_unique_key_argsIS3_JRKNS_21piecewise_construct_tENS2_IJOS3_EEENS2_IJEEEEEENS_4pairINS_15__tree_iteratorIS7_PNS_11__tree_nodeIS7_PvEElEEbEERKT_DpOT0_($agg$result, $this, $__k, $__args, $__args1, $__args3) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__k = $__k | 0;
 $__args = $__args | 0;
 $__args1 = $__args1 | 0;
 $__args3 = $__args3 | 0;
 var $0 = 0, $__h = 0, $__inserted$0 = 0, $__parent = 0, $__r$0 = 0, $call = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $__parent = sp + 12 | 0;
 $__h = sp;
 $call = __ZNSt3__26__treeINS_12__value_typeINS_5tupleIJiiEEEPN4tson4TileEEENS_19__map_value_compareIS3_S7_NS_4lessIS3_EELb1EEENS_9allocatorIS7_EEE12__find_equalIS3_EERPNS_16__tree_node_baseIPvEERPNS_15__tree_end_nodeISJ_EERKT_($this, $__parent, $__k) | 0;
 $0 = HEAP32[$call >> 2] | 0;
 if (!$0) {
  __ZNSt3__26__treeINS_12__value_typeINS_5tupleIJiiEEEPN4tson4TileEEENS_19__map_value_compareIS3_S7_NS_4lessIS3_EELb1EEENS_9allocatorIS7_EEE16__construct_nodeIJRKNS_21piecewise_construct_tENS2_IJOS3_EEENS2_IJEEEEEENS_10unique_ptrINS_11__tree_nodeIS7_PvEENS_22__tree_node_destructorINSC_ISP_EEEEEEDpOT_($__h, $this, $__args, $__args1, $__args3);
  __ZNSt3__26__treeINS_12__value_typeINS_5tupleIJiiEEEPN4tson4TileEEENS_19__map_value_compareIS3_S7_NS_4lessIS3_EELb1EEENS_9allocatorIS7_EEE16__insert_node_atEPNS_15__tree_end_nodeIPNS_16__tree_node_baseIPvEEEERSJ_SJ_($this, HEAP32[$__parent >> 2] | 0, $call, HEAP32[$__h >> 2] | 0);
  $__inserted$0 = 1;
  $__r$0 = HEAP32[$__h >> 2] | 0;
 } else {
  $__inserted$0 = 0;
  $__r$0 = $0;
 }
 HEAP32[$agg$result >> 2] = $__r$0;
 HEAP8[$agg$result + 4 >> 0] = $__inserted$0;
 STACKTOP = sp;
 return;
}

function _rlOrtho($left, $right, $bottom, $top, $znear, $zfar) {
 $left = +$left;
 $right = +$right;
 $bottom = +$bottom;
 $top = +$top;
 $znear = +$znear;
 $zfar = +$zfar;
 var $$byval_copy = 0, $6 = 0, $bottom$addr = 0, $left$addr = 0, $matOrtho = 0, $matOrtho$byval_copy = 0, $right$addr = 0, $tmp = 0, $top$addr = 0, $zfar$addr = 0, $znear$addr = 0, dest = 0, sp = 0, src = 0, stop = 0, CSE$0 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(304);
 $matOrtho$byval_copy = sp + 240 | 0;
 $$byval_copy = sp + 176 | 0;
 $left$addr = sp + 40 | 0;
 $right$addr = sp + 32 | 0;
 $bottom$addr = sp + 24 | 0;
 $top$addr = sp + 16 | 0;
 $znear$addr = sp + 8 | 0;
 $zfar$addr = sp;
 $matOrtho = sp + 112 | 0;
 $tmp = sp + 48 | 0;
 HEAPF64[$left$addr >> 3] = $left;
 HEAPF64[$right$addr >> 3] = $right;
 HEAPF64[$bottom$addr >> 3] = $bottom;
 HEAPF64[$top$addr >> 3] = $top;
 HEAPF64[$znear$addr >> 3] = $znear;
 HEAPF64[$zfar$addr >> 3] = $zfar;
 _MatrixOrtho($matOrtho, +HEAPF64[$left$addr >> 3], +HEAPF64[$right$addr >> 3], +HEAPF64[$bottom$addr >> 3], +HEAPF64[$top$addr >> 3], +HEAPF64[$znear$addr >> 3], +HEAPF64[$zfar$addr >> 3]);
 CSE$0 = HEAP32[14811] | 0;
 $6 = CSE$0 | 0;
 dest = $$byval_copy;
 src = CSE$0 | 0;
 stop = dest + 64 | 0;
 do {
  HEAP32[dest >> 2] = HEAP32[src >> 2];
  dest = dest + 4 | 0;
  src = src + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $matOrtho$byval_copy;
 src = $matOrtho;
 stop = dest + 64 | 0;
 do {
  HEAP32[dest >> 2] = HEAP32[src >> 2];
  dest = dest + 4 | 0;
  src = src + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 _MatrixMultiply($tmp, $$byval_copy, $matOrtho$byval_copy);
 dest = $6;
 src = $tmp;
 stop = dest + 64 | 0;
 do {
  HEAP32[dest >> 2] = HEAP32[src >> 2];
  dest = dest + 4 | 0;
  src = src + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 STACKTOP = sp;
 return;
}

function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6insertEmPKcm($this, $__pos, $__s, $__n) {
 $this = $this | 0;
 $__pos = $__pos | 0;
 $__s = $__s | 0;
 $__n = $__n | 0;
 var $0 = 0, $__s$addr$1 = 0, $__size_$i$i = 0, $add = 0, $add$ptr = 0, $cond$i = 0, $cond$i42 = 0, $cond$i48 = 0, $ref$tmp = 0, $sub8 = 0, $tobool$i$i = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $ref$tmp = sp;
 $__size_$i$i = $this + 11 | 0;
 $0 = HEAP8[$__size_$i$i >> 0] | 0;
 $tobool$i$i = $0 << 24 >> 24 < 0;
 if ($tobool$i$i) $cond$i = HEAP32[$this + 4 >> 2] | 0; else $cond$i = $0 & 255;
 if ($cond$i >>> 0 < $__pos >>> 0) __ZNKSt3__221__basic_string_commonILb1EE20__throw_out_of_rangeEv($this);
 if ($tobool$i$i) $cond$i42 = (HEAP32[$this + 8 >> 2] & 2147483647) + -1 | 0; else $cond$i42 = 10;
 if (($cond$i42 - $cond$i | 0) >>> 0 < $__n >>> 0) __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEmmmmmmPKc($this, $cond$i42, $cond$i + $__n - $cond$i42 | 0, $cond$i, $__pos, 0, $__n, $__s); else if ($__n | 0) {
  if ($tobool$i$i) $cond$i48 = HEAP32[$this >> 2] | 0; else $cond$i48 = $this;
  $sub8 = $cond$i - $__pos | 0;
  $add$ptr = $cond$i48 + $__pos | 0;
  if (!$sub8) $__s$addr$1 = $__s; else {
   __ZNSt3__211char_traitsIcE4moveEPcPKcm($add$ptr + $__n | 0, $add$ptr, $sub8) | 0;
   $__s$addr$1 = $add$ptr >>> 0 <= $__s >>> 0 & ($cond$i48 + $cond$i | 0) >>> 0 > $__s >>> 0 ? $__s + $__n | 0 : $__s;
  }
  __ZNSt3__211char_traitsIcE4moveEPcPKcm($add$ptr, $__s$addr$1, $__n) | 0;
  $add = $cond$i + $__n | 0;
  if ((HEAP8[$__size_$i$i >> 0] | 0) < 0) HEAP32[$this + 4 >> 2] = $add; else HEAP8[$__size_$i$i >> 0] = $add;
  HEAP8[$ref$tmp >> 0] = 0;
  __ZNSt3__211char_traitsIcE6assignERcRKc($cond$i48 + $add | 0, $ref$tmp);
 }
 STACKTOP = sp;
 return $this | 0;
}

function __ZNK8nlohmann6detail9iter_implINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEEptEv($this) {
 $this = $this | 0;
 var $0 = 0, $3 = 0, $6 = 0, $exception = 0, $ref$tmp28 = 0, $retval$0 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $ref$tmp28 = sp;
 $0 = HEAP32[$this >> 2] | 0;
 if (!$0) ___assert_fail(23450, 22221, 9432, 28098);
 L4 : do switch (HEAP8[$0 >> 0] | 0) {
 case 1:
  {
   $3 = HEAP32[$this + 4 >> 2] | 0;
   if (($3 | 0) == ((HEAP32[$0 + 8 >> 2] | 0) + 4 | 0)) ___assert_fail(23491, 22221, 9438, 28098); else {
    $retval$0 = (__ZNSt3__29__launderINS_4pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8nlohmann10basic_jsonINS_3mapENS_6vectorES7_bxydS5_NS9_14adl_serializerEEEEEEEPT_SH_($3 + 16 | 0) | 0) + 16 | 0;
    break L4;
   }
   break;
  }
 case 2:
  {
   $6 = HEAP32[$this + 8 >> 2] | 0;
   if (($6 | 0) == (HEAP32[(HEAP32[$0 + 8 >> 2] | 0) + 4 >> 2] | 0)) ___assert_fail(23547, 22221, 9444, 28098); else $retval$0 = $6;
   break;
  }
 default:
  if (__ZNK8nlohmann6detail20primitive_iterator_t8is_beginEv($this + 12 | 0) | 0) {
   $retval$0 = HEAP32[$this >> 2] | 0;
   break L4;
  } else {
   $exception = ___cxa_allocate_exception(16) | 0;
   HEAP32[$ref$tmp28 >> 2] = 0;
   HEAP32[$ref$tmp28 + 4 >> 2] = 0;
   HEAP32[$ref$tmp28 + 8 >> 2] = 0;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcm($ref$tmp28, 23601, __ZNSt3__211char_traitsIcE6lengthEPKc(23601) | 0);
   __ZN8nlohmann6detail16invalid_iterator6createEiRKNSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE($exception, 214, $ref$tmp28);
   ___cxa_throw($exception | 0, 15064, 9);
  }
 } while (0);
 STACKTOP = sp;
 return $retval$0 | 0;
}

function __ZN8nlohmannrsERNSt3__213basic_istreamIcNS0_11char_traitsIcEEEERNS_10basic_jsonINS0_3mapENS0_6vectorENS0_12basic_stringIcS3_NS0_9allocatorIcEEEEbxydSA_NS_14adl_serializerEEE($i, $j) {
 $i = $i | 0;
 $j = $j | 0;
 var $agg$tmp = 0, $ref$tmp = 0, $ref$tmp1 = 0, $temp$lvalue = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(160);
 $ref$tmp = sp;
 $ref$tmp1 = sp + 144 | 0;
 $temp$lvalue = sp + 136 | 0;
 $agg$tmp = sp + 120 | 0;
 __ZN8nlohmann6detail13input_adapterC2ERNSt3__213basic_istreamIcNS2_11char_traitsIcEEEE($temp$lvalue, $i);
 __ZN8nlohmann6detail13input_adaptercvNSt3__210shared_ptrINS0_22input_adapter_protocolEEEEv($ref$tmp1, $temp$lvalue);
 HEAP32[$agg$tmp + 8 >> 2] = 8;
 HEAP32[$agg$tmp + 12 >> 2] = 17560;
 __ZN8nlohmann6detail6parserINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEEC2EONS3_10shared_ptrINS0_22input_adapter_protocolEEENS3_8functionIFbiNSE_13parse_event_tERSD_EEEb($ref$tmp, $ref$tmp1, $agg$tmp, 1);
 __ZN8nlohmann6detail6parserINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE5parseEbRSD_($ref$tmp, 0, $j);
 __ZN8nlohmann6detail6parserINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEED2Ev($ref$tmp);
 __ZNSt3__28functionIFbiN8nlohmann6detail6parserINS1_10basic_jsonINS_3mapENS_6vectorENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEbxydSA_NS1_14adl_serializerEEEE13parse_event_tERSE_EED2Ev($agg$tmp);
 __ZNSt3__210shared_ptrIN8nlohmann6detail22input_adapter_protocolEED2Ev($ref$tmp1);
 __ZN8nlohmann6detail13input_adapterD2Ev($temp$lvalue);
 STACKTOP = sp;
 return $i | 0;
}

function __ZN8nlohmann6detail16invalid_iterator6createEiRKNSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE($agg$result, $id_, $what_arg) {
 $agg$result = $agg$result | 0;
 $id_ = $id_ | 0;
 $what_arg = $what_arg | 0;
 var $0 = 0, $call3$i$i2 = 0, $ref$tmp = 0, $ref$tmp1 = 0, $tobool$i$i$i$i$i = 0, $w = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 $w = sp + 24 | 0;
 $ref$tmp = sp + 12 | 0;
 $ref$tmp1 = sp;
 HEAP32[$ref$tmp1 >> 2] = 0;
 HEAP32[$ref$tmp1 + 4 >> 2] = 0;
 HEAP32[$ref$tmp1 + 8 >> 2] = 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcm($ref$tmp1, 23655, __ZNSt3__211char_traitsIcE6lengthEPKc(23655) | 0);
 __ZN8nlohmann6detail9exception4nameERKNSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEi($ref$tmp, $ref$tmp1, $id_);
 $0 = HEAP8[$what_arg + 11 >> 0] | 0;
 $tobool$i$i$i$i$i = $0 << 24 >> 24 < 0;
 $call3$i$i2 = __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcm($ref$tmp, $tobool$i$i$i$i$i ? HEAP32[$what_arg >> 2] | 0 : $what_arg, $tobool$i$i$i$i$i ? HEAP32[$what_arg + 4 >> 2] | 0 : $0 & 255) | 0;
 HEAP32[$w >> 2] = HEAP32[$call3$i$i2 >> 2];
 HEAP32[$w + 4 >> 2] = HEAP32[$call3$i$i2 + 4 >> 2];
 HEAP32[$w + 8 >> 2] = HEAP32[$call3$i$i2 + 8 >> 2];
 HEAP32[$call3$i$i2 >> 2] = 0;
 HEAP32[$call3$i$i2 + 4 >> 2] = 0;
 HEAP32[$call3$i$i2 + 8 >> 2] = 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp1);
 __ZN8nlohmann6detail16invalid_iteratorC2EiPKc($agg$result, $id_, (HEAP8[$w + 11 >> 0] | 0) < 0 ? HEAP32[$w >> 2] | 0 : $w);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($w);
 STACKTOP = sp;
 return;
}

function _MouseCursorPosCallback($window, $x, $y) {
 $window = $window | 0;
 $x = +$x;
 $y = +$y;
 var $$compoundliteral = 0, $conv12 = f0, $conv7 = f0, $gestureEvent = 0, $gestureEvent$byval_copy = 0, $position = 0, $position5 = 0, $position8 = 0, $x$addr = 0, $y$addr = 0, $y15 = 0, dest = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(144);
 $gestureEvent$byval_copy = sp + 88 | 0;
 $x$addr = sp + 8 | 0;
 $y$addr = sp;
 $gestureEvent = sp + 24 | 0;
 $$compoundliteral = sp + 16 | 0;
 HEAP32[sp + 80 >> 2] = $window;
 HEAPF64[$x$addr >> 3] = $x;
 HEAPF64[$y$addr >> 3] = $y;
 HEAP32[$gestureEvent >> 2] = 2;
 HEAP32[$gestureEvent + 8 >> 2] = 0;
 HEAP32[$gestureEvent + 4 >> 2] = 1;
 $position = $gestureEvent + 24 | 0;
 HEAPF32[$$compoundliteral >> 2] = Math_fround(+HEAPF64[$x$addr >> 3]);
 HEAPF32[$$compoundliteral + 4 >> 2] = Math_fround(+HEAPF64[$y$addr >> 3]);
 HEAP32[$position >> 2] = HEAP32[$$compoundliteral >> 2];
 HEAP32[$position + 4 >> 2] = HEAP32[$$compoundliteral + 4 >> 2];
 $position5 = $gestureEvent + 24 | 0;
 HEAP32[11864] = HEAP32[$position5 >> 2];
 HEAP32[11865] = HEAP32[$position5 + 4 >> 2];
 $conv7 = Math_fround(_GetScreenWidth() | 0);
 $position8 = $gestureEvent + 24 | 0;
 HEAPF32[$position8 >> 2] = Math_fround(Math_fround(HEAPF32[$position8 >> 2]) / $conv7);
 $conv12 = Math_fround(_GetScreenHeight() | 0);
 $y15 = $gestureEvent + 24 + 4 | 0;
 HEAPF32[$y15 >> 2] = Math_fround(Math_fround(HEAPF32[$y15 >> 2]) / $conv12);
 dest = $gestureEvent$byval_copy;
 src = $gestureEvent;
 stop = dest + 56 | 0;
 do {
  HEAP32[dest >> 2] = HEAP32[src >> 2];
  dest = dest + 4 | 0;
  src = src + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 _ProcessGestureEvent($gestureEvent$byval_copy);
 STACKTOP = sp;
 return;
}

function __ZN8nlohmann6detail12out_of_range6createEiRKNSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE($agg$result, $id_, $what_arg) {
 $agg$result = $agg$result | 0;
 $id_ = $id_ | 0;
 $what_arg = $what_arg | 0;
 var $0 = 0, $call3$i$i2 = 0, $ref$tmp = 0, $ref$tmp1 = 0, $tobool$i$i$i$i$i = 0, $w = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 $w = sp + 24 | 0;
 $ref$tmp = sp + 12 | 0;
 $ref$tmp1 = sp;
 HEAP32[$ref$tmp1 >> 2] = 0;
 HEAP32[$ref$tmp1 + 4 >> 2] = 0;
 HEAP32[$ref$tmp1 + 8 >> 2] = 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcm($ref$tmp1, 24280, __ZNSt3__211char_traitsIcE6lengthEPKc(24280) | 0);
 __ZN8nlohmann6detail9exception4nameERKNSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEi($ref$tmp, $ref$tmp1, $id_);
 $0 = HEAP8[$what_arg + 11 >> 0] | 0;
 $tobool$i$i$i$i$i = $0 << 24 >> 24 < 0;
 $call3$i$i2 = __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcm($ref$tmp, $tobool$i$i$i$i$i ? HEAP32[$what_arg >> 2] | 0 : $what_arg, $tobool$i$i$i$i$i ? HEAP32[$what_arg + 4 >> 2] | 0 : $0 & 255) | 0;
 HEAP32[$w >> 2] = HEAP32[$call3$i$i2 >> 2];
 HEAP32[$w + 4 >> 2] = HEAP32[$call3$i$i2 + 4 >> 2];
 HEAP32[$w + 8 >> 2] = HEAP32[$call3$i$i2 + 8 >> 2];
 HEAP32[$call3$i$i2 >> 2] = 0;
 HEAP32[$call3$i$i2 + 4 >> 2] = 0;
 HEAP32[$call3$i$i2 + 8 >> 2] = 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp1);
 __ZN8nlohmann6detail12out_of_rangeC2EiPKc($agg$result, $id_, (HEAP8[$w + 11 >> 0] | 0) < 0 ? HEAP32[$w >> 2] | 0 : $w);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($w);
 STACKTOP = sp;
 return;
}

function __ZNSt3__26__treeINS_12__value_typeIiPN4tson4TileEEENS_19__map_value_compareIiS5_NS_4lessIiEELb1EEENS_9allocatorIS5_EEE25__emplace_unique_key_argsIiJRKNS_21piecewise_construct_tENS_5tupleIJRKiEEENSH_IJEEEEEENS_4pairINS_15__tree_iteratorIS5_PNS_11__tree_nodeIS5_PvEElEEbEERKT_DpOT0_($agg$result, $this, $__k, $__args, $__args1, $__args3) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__k = $__k | 0;
 $__args = $__args | 0;
 $__args1 = $__args1 | 0;
 $__args3 = $__args3 | 0;
 var $0 = 0, $__h = 0, $__inserted$0 = 0, $__parent = 0, $__r$0 = 0, $call = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $__parent = sp + 12 | 0;
 $__h = sp;
 $call = __ZNSt3__26__treeINS_12__value_typeIiPN4tson4TileEEENS_19__map_value_compareIiS5_NS_4lessIiEELb1EEENS_9allocatorIS5_EEE12__find_equalIiEERPNS_16__tree_node_baseIPvEERPNS_15__tree_end_nodeISH_EERKT_($this, $__parent, $__k) | 0;
 $0 = HEAP32[$call >> 2] | 0;
 if (!$0) {
  __ZNSt3__26__treeINS_12__value_typeIiPN4tson4TileEEENS_19__map_value_compareIiS5_NS_4lessIiEELb1EEENS_9allocatorIS5_EEE16__construct_nodeIJRKNS_21piecewise_construct_tENS_5tupleIJRKiEEENSH_IJEEEEEENS_10unique_ptrINS_11__tree_nodeIS5_PvEENS_22__tree_node_destructorINSA_ISP_EEEEEEDpOT_($__h, $this, $__args, $__args1, $__args3);
  __ZNSt3__26__treeINS_12__value_typeIiPN4tson4TileEEENS_19__map_value_compareIiS5_NS_4lessIiEELb1EEENS_9allocatorIS5_EEE16__insert_node_atEPNS_15__tree_end_nodeIPNS_16__tree_node_baseIPvEEEERSH_SH_($this, HEAP32[$__parent >> 2] | 0, $call, HEAP32[$__h >> 2] | 0);
  $__inserted$0 = 1;
  $__r$0 = HEAP32[$__h >> 2] | 0;
 } else {
  $__inserted$0 = 0;
  $__r$0 = $0;
 }
 HEAP32[$agg$result >> 2] = $__r$0;
 HEAP8[$agg$result + 4 >> 0] = $__inserted$0;
 STACKTOP = sp;
 return;
}

function __ZN8nlohmann6detail10type_error6createEiRKNSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE($agg$result, $id_, $what_arg) {
 $agg$result = $agg$result | 0;
 $id_ = $id_ | 0;
 $what_arg = $what_arg | 0;
 var $0 = 0, $call3$i$i2 = 0, $ref$tmp = 0, $ref$tmp1 = 0, $tobool$i$i$i$i$i = 0, $w = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 $w = sp + 24 | 0;
 $ref$tmp = sp + 12 | 0;
 $ref$tmp1 = sp;
 HEAP32[$ref$tmp1 >> 2] = 0;
 HEAP32[$ref$tmp1 + 4 >> 2] = 0;
 HEAP32[$ref$tmp1 + 8 >> 2] = 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcm($ref$tmp1, 22797, __ZNSt3__211char_traitsIcE6lengthEPKc(22797) | 0);
 __ZN8nlohmann6detail9exception4nameERKNSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEi($ref$tmp, $ref$tmp1, $id_);
 $0 = HEAP8[$what_arg + 11 >> 0] | 0;
 $tobool$i$i$i$i$i = $0 << 24 >> 24 < 0;
 $call3$i$i2 = __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcm($ref$tmp, $tobool$i$i$i$i$i ? HEAP32[$what_arg >> 2] | 0 : $what_arg, $tobool$i$i$i$i$i ? HEAP32[$what_arg + 4 >> 2] | 0 : $0 & 255) | 0;
 HEAP32[$w >> 2] = HEAP32[$call3$i$i2 >> 2];
 HEAP32[$w + 4 >> 2] = HEAP32[$call3$i$i2 + 4 >> 2];
 HEAP32[$w + 8 >> 2] = HEAP32[$call3$i$i2 + 8 >> 2];
 HEAP32[$call3$i$i2 >> 2] = 0;
 HEAP32[$call3$i$i2 + 4 >> 2] = 0;
 HEAP32[$call3$i$i2 + 8 >> 2] = 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp1);
 __ZN8nlohmann6detail10type_errorC2EiPKc($agg$result, $id_, (HEAP8[$w + 11 >> 0] | 0) < 0 ? HEAP32[$w >> 2] | 0 : $w);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($w);
 STACKTOP = sp;
 return;
}

function __ZNSt3__26__treeINS_12__value_typeIiPN4tson4TileEEENS_19__map_value_compareIiS5_NS_4lessIiEELb1EEENS_9allocatorIS5_EEE25__emplace_unique_key_argsIiJRKNS_21piecewise_construct_tENS_5tupleIJOiEEENSH_IJEEEEEENS_4pairINS_15__tree_iteratorIS5_PNS_11__tree_nodeIS5_PvEElEEbEERKT_DpOT0_($agg$result, $this, $__k, $__args, $__args1, $__args3) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__k = $__k | 0;
 $__args = $__args | 0;
 $__args1 = $__args1 | 0;
 $__args3 = $__args3 | 0;
 var $0 = 0, $__h = 0, $__inserted$0 = 0, $__parent = 0, $__r$0 = 0, $call = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $__parent = sp + 12 | 0;
 $__h = sp;
 $call = __ZNSt3__26__treeINS_12__value_typeIiPN4tson4TileEEENS_19__map_value_compareIiS5_NS_4lessIiEELb1EEENS_9allocatorIS5_EEE12__find_equalIiEERPNS_16__tree_node_baseIPvEERPNS_15__tree_end_nodeISH_EERKT_($this, $__parent, $__k) | 0;
 $0 = HEAP32[$call >> 2] | 0;
 if (!$0) {
  __ZNSt3__26__treeINS_12__value_typeIiPN4tson4TileEEENS_19__map_value_compareIiS5_NS_4lessIiEELb1EEENS_9allocatorIS5_EEE16__construct_nodeIJRKNS_21piecewise_construct_tENS_5tupleIJOiEEENSH_IJEEEEEENS_10unique_ptrINS_11__tree_nodeIS5_PvEENS_22__tree_node_destructorINSA_ISO_EEEEEEDpOT_($__h, $this, $__args, $__args1, $__args3);
  __ZNSt3__26__treeINS_12__value_typeIiPN4tson4TileEEENS_19__map_value_compareIiS5_NS_4lessIiEELb1EEENS_9allocatorIS5_EEE16__insert_node_atEPNS_15__tree_end_nodeIPNS_16__tree_node_baseIPvEEEERSH_SH_($this, HEAP32[$__parent >> 2] | 0, $call, HEAP32[$__h >> 2] | 0);
  $__inserted$0 = 1;
  $__r$0 = HEAP32[$__h >> 2] | 0;
 } else {
  $__inserted$0 = 0;
  $__r$0 = $0;
 }
 HEAP32[$agg$result >> 2] = $__r$0;
 HEAP8[$agg$result + 4 >> 0] = $__inserted$0;
 STACKTOP = sp;
 return;
}

function _GifPartitionByMedian($image, $left, $right, $com, $neededCenter) {
 $image = $image | 0;
 $left = $left | 0;
 $right = $right | 0;
 $com = $com | 0;
 $neededCenter = $neededCenter | 0;
 var $com$addr = 0, $image$addr = 0, $left$addr = 0, $neededCenter$addr = 0, $pivotIndex = 0, $right$addr = 0, sp = 0, CSE$0 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $image$addr = sp + 20 | 0;
 $left$addr = sp + 16 | 0;
 $right$addr = sp + 12 | 0;
 $com$addr = sp + 8 | 0;
 $neededCenter$addr = sp + 4 | 0;
 $pivotIndex = sp;
 HEAP32[$image$addr >> 2] = $image;
 HEAP32[$left$addr >> 2] = $left;
 HEAP32[$right$addr >> 2] = $right;
 HEAP32[$com$addr >> 2] = $com;
 HEAP32[$neededCenter$addr >> 2] = $neededCenter;
 if ((HEAP32[$left$addr >> 2] | 0) >= ((HEAP32[$right$addr >> 2] | 0) - 1 | 0)) {
  STACKTOP = sp;
  return;
 }
 CSE$0 = HEAP32[$left$addr >> 2] | 0;
 HEAP32[$pivotIndex >> 2] = (CSE$0 | 0) + (((HEAP32[$right$addr >> 2] | 0) - CSE$0 | 0) / 2 | 0);
 HEAP32[$pivotIndex >> 2] = _GifPartition(HEAP32[$image$addr >> 2] | 0, HEAP32[$left$addr >> 2] | 0, HEAP32[$right$addr >> 2] | 0, HEAP32[$com$addr >> 2] | 0, HEAP32[$pivotIndex >> 2] | 0) | 0;
 if ((HEAP32[$pivotIndex >> 2] | 0) > (HEAP32[$neededCenter$addr >> 2] | 0)) _GifPartitionByMedian(HEAP32[$image$addr >> 2] | 0, HEAP32[$left$addr >> 2] | 0, HEAP32[$pivotIndex >> 2] | 0, HEAP32[$com$addr >> 2] | 0, HEAP32[$neededCenter$addr >> 2] | 0);
 if ((HEAP32[$pivotIndex >> 2] | 0) >= (HEAP32[$neededCenter$addr >> 2] | 0)) {
  STACKTOP = sp;
  return;
 }
 _GifPartitionByMedian(HEAP32[$image$addr >> 2] | 0, (HEAP32[$pivotIndex >> 2] | 0) + 1 | 0, HEAP32[$right$addr >> 2] | 0, HEAP32[$com$addr >> 2] | 0, HEAP32[$neededCenter$addr >> 2] | 0);
 STACKTOP = sp;
 return;
}

function _fread($destv, $size, $nmemb, $f) {
 $destv = $destv | 0;
 $size = $size | 0;
 $nmemb = $nmemb | 0;
 $f = $f | 0;
 var $3 = 0, $call34 = 0, $cond = 0, $conv = 0, $dest$0 = 0, $dest$146 = 0, $l$0 = 0, $l$147 = 0, $mode = 0, $mul = 0, $read = 0, $retval$0 = 0, $rpos = 0, $spec$select = 0, $sub$ptr$sub = 0, $sub$ptr$sub$mul = 0, $sub45 = 0, label = 0;
 label = 0;
 $mul = Math_imul($nmemb, $size) | 0;
 $spec$select = ($size | 0) == 0 ? 0 : $nmemb;
 if ((HEAP32[$f + 76 >> 2] | 0) > -1) $cond = ___lockfile($f) | 0; else $cond = 0;
 $mode = $f + 74 | 0;
 $conv = HEAP8[$mode >> 0] | 0;
 HEAP8[$mode >> 0] = $conv + 255 | $conv;
 $rpos = $f + 4 | 0;
 $3 = HEAP32[$rpos >> 2] | 0;
 $sub$ptr$sub = (HEAP32[$f + 8 >> 2] | 0) - $3 | 0;
 if (($sub$ptr$sub | 0) > 0) {
  $sub$ptr$sub$mul = $sub$ptr$sub >>> 0 < $mul >>> 0 ? $sub$ptr$sub : $mul;
  _memcpy($destv | 0, $3 | 0, $sub$ptr$sub$mul | 0) | 0;
  HEAP32[$rpos >> 2] = (HEAP32[$rpos >> 2] | 0) + $sub$ptr$sub$mul;
  $dest$0 = $destv + $sub$ptr$sub$mul | 0;
  $l$0 = $mul - $sub$ptr$sub$mul | 0;
 } else {
  $dest$0 = $destv;
  $l$0 = $mul;
 }
 L7 : do if (!$l$0) label = 13; else {
  $read = $f + 32 | 0;
  $dest$146 = $dest$0;
  $l$147 = $l$0;
  while (1) {
   if (___toread($f) | 0) break;
   $call34 = FUNCTION_TABLE_iiii[HEAP32[$read >> 2] & 63]($f, $dest$146, $l$147) | 0;
   if (($call34 + 1 | 0) >>> 0 < 2) break;
   $sub45 = $l$147 - $call34 | 0;
   if (!$sub45) {
    label = 13;
    break L7;
   } else {
    $dest$146 = $dest$146 + $call34 | 0;
    $l$147 = $sub45;
   }
  }
  if ($cond | 0) ___unlockfile($f);
  $retval$0 = (($mul - $l$147 | 0) >>> 0) / ($size >>> 0) | 0;
 } while (0);
 if ((label | 0) == 13) if (!$cond) $retval$0 = $spec$select; else {
  ___unlockfile($f);
  $retval$0 = $spec$select;
 }
 return $retval$0 | 0;
}

function __ZN4tson3MapC2Ev($this) {
 $this = $this | 0;
 var $m_layers = 0, $m_statusMessage = 0, $m_tileSize = 0, $m_tilesets = 0, $ref$tmp$i = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $ref$tmp$i = sp;
 __ZN4tson5ColorIhEC2Ev($this);
 __ZN4tson7Vector2IiEC2Ev($this + 4 | 0);
 HEAP32[$this + 12 >> 2] = 0;
 HEAP8[$this + 16 >> 0] = 0;
 $m_layers = $this + 20 | 0;
 HEAP32[$m_layers >> 2] = 0;
 HEAP32[$m_layers + 4 >> 2] = 0;
 HEAP32[$m_layers + 8 >> 2] = 0;
 HEAP32[$m_layers + 12 >> 2] = 0;
 HEAP32[$m_layers + 16 >> 2] = 0;
 HEAP32[$m_layers + 20 >> 2] = 0;
 HEAP32[$m_layers + 24 >> 2] = 0;
 HEAP32[$m_layers + 28 >> 2] = 0;
 __ZN4tson18PropertyCollectionC2Ev($this + 52 | 0);
 $m_tileSize = $this + 124 | 0;
 dest = $this + 76 | 0;
 stop = dest + 48 | 0;
 do {
  HEAP32[dest >> 2] = 0;
  dest = dest + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 __ZN4tson7Vector2IiEC2Ev($m_tileSize);
 $m_tilesets = $this + 132 | 0;
 $m_statusMessage = $this + 164 | 0;
 HEAP32[$m_statusMessage >> 2] = 0;
 HEAP32[$m_statusMessage + 4 >> 2] = 0;
 HEAP32[$m_statusMessage + 8 >> 2] = 0;
 HEAP32[$m_tilesets >> 2] = 0;
 HEAP32[$m_tilesets + 4 >> 2] = 0;
 HEAP32[$m_tilesets + 8 >> 2] = 0;
 HEAP32[$m_tilesets + 12 >> 2] = 0;
 HEAP32[$m_tilesets + 16 >> 2] = 0;
 HEAP32[$m_tilesets + 20 >> 2] = 0;
 HEAP32[$m_tilesets + 24 >> 2] = 0;
 HEAP8[$m_tilesets + 28 >> 0] = 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcm($m_statusMessage, 28443, __ZNSt3__211char_traitsIcE6lengthEPKc(28443) | 0);
 __ZNSt3__26__treeINS_12__value_typeIiPN4tson4TileEEENS_19__map_value_compareIiS5_NS_4lessIiEELb1EEENS_9allocatorIS5_EEEC2ERKS9_($this + 176 | 0, $ref$tmp$i);
 STACKTOP = sp;
 return;
}

function _stbi_zlib_decode_malloc_guesssize_headerflag($buffer, $len, $initial_size, $outlen, $parse_header) {
 $buffer = $buffer | 0;
 $len = $len | 0;
 $initial_size = $initial_size | 0;
 $outlen = $outlen | 0;
 $parse_header = $parse_header | 0;
 var $14 = 0, $a = 0, $buffer$addr = 0, $initial_size$addr = 0, $len$addr = 0, $outlen$addr = 0, $p = 0, $parse_header$addr = 0, $retval = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 4112 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(4112);
 $retval = sp + 4100 | 0;
 $buffer$addr = sp + 4096 | 0;
 $len$addr = sp + 4092 | 0;
 $initial_size$addr = sp + 4088 | 0;
 $outlen$addr = sp + 4084 | 0;
 $parse_header$addr = sp + 4080 | 0;
 $a = sp + 8 | 0;
 $p = sp;
 HEAP32[$buffer$addr >> 2] = $buffer;
 HEAP32[$len$addr >> 2] = $len;
 HEAP32[$initial_size$addr >> 2] = $initial_size;
 HEAP32[$outlen$addr >> 2] = $outlen;
 HEAP32[$parse_header$addr >> 2] = $parse_header;
 HEAP32[$p >> 2] = _stbi__malloc(HEAP32[$initial_size$addr >> 2] | 0) | 0;
 if (!(HEAP32[$p >> 2] | 0)) {
  HEAP32[$retval >> 2] = 0;
  $14 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $14 | 0;
 }
 HEAP32[$a >> 2] = HEAP32[$buffer$addr >> 2];
 HEAP32[$a + 4 >> 2] = (HEAP32[$buffer$addr >> 2] | 0) + (HEAP32[$len$addr >> 2] | 0);
 if (!(_stbi__do_zlib($a, HEAP32[$p >> 2] | 0, HEAP32[$initial_size$addr >> 2] | 0, 1, HEAP32[$parse_header$addr >> 2] | 0) | 0)) {
  _free(HEAP32[$a + 20 >> 2] | 0);
  HEAP32[$retval >> 2] = 0;
  $14 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $14 | 0;
 }
 if (HEAP32[$outlen$addr >> 2] | 0) HEAP32[HEAP32[$outlen$addr >> 2] >> 2] = (HEAP32[$a + 16 >> 2] | 0) - (HEAP32[$a + 20 >> 2] | 0);
 HEAP32[$retval >> 2] = HEAP32[$a + 20 >> 2];
 $14 = HEAP32[$retval >> 2] | 0;
 STACKTOP = sp;
 return $14 | 0;
}

function _stbi_write_png($filename, $x, $y, $comp, $data, $stride_bytes) {
 $filename = $filename | 0;
 $x = $x | 0;
 $y = $y | 0;
 $comp = $comp | 0;
 $data = $data | 0;
 $stride_bytes = $stride_bytes | 0;
 var $13 = 0, $8 = 0, $comp$addr = 0, $data$addr = 0, $f = 0, $filename$addr = 0, $len = 0, $png = 0, $retval = 0, $stride_bytes$addr = 0, $x$addr = 0, $y$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 $retval = sp + 36 | 0;
 $filename$addr = sp + 32 | 0;
 $x$addr = sp + 28 | 0;
 $y$addr = sp + 24 | 0;
 $comp$addr = sp + 20 | 0;
 $data$addr = sp + 16 | 0;
 $stride_bytes$addr = sp + 12 | 0;
 $f = sp + 8 | 0;
 $len = sp + 4 | 0;
 $png = sp;
 HEAP32[$filename$addr >> 2] = $filename;
 HEAP32[$x$addr >> 2] = $x;
 HEAP32[$y$addr >> 2] = $y;
 HEAP32[$comp$addr >> 2] = $comp;
 HEAP32[$data$addr >> 2] = $data;
 HEAP32[$stride_bytes$addr >> 2] = $stride_bytes;
 HEAP32[$png >> 2] = _stbi_write_png_to_mem(HEAP32[$data$addr >> 2] | 0, HEAP32[$stride_bytes$addr >> 2] | 0, HEAP32[$x$addr >> 2] | 0, HEAP32[$y$addr >> 2] | 0, HEAP32[$comp$addr >> 2] | 0, $len) | 0;
 if (!(HEAP32[$png >> 2] | 0)) {
  HEAP32[$retval >> 2] = 0;
  $13 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $13 | 0;
 }
 HEAP32[$f >> 2] = _stbiw__fopen(HEAP32[$filename$addr >> 2] | 0, 34090) | 0;
 $8 = HEAP32[$png >> 2] | 0;
 if (HEAP32[$f >> 2] | 0) {
  _fwrite($8, 1, HEAP32[$len >> 2] | 0, HEAP32[$f >> 2] | 0) | 0;
  _fclose(HEAP32[$f >> 2] | 0) | 0;
  _free(HEAP32[$png >> 2] | 0);
  HEAP32[$retval >> 2] = 1;
  $13 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $13 | 0;
 } else {
  _free($8);
  HEAP32[$retval >> 2] = 0;
  $13 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $13 | 0;
 }
 return 0;
}

function _stbir__filter_trapezoid($x, $scale) {
 $x = Math_fround($x);
 $scale = Math_fround($scale);
 var $10 = f0, $13 = f0, $5 = f0, $8 = f0, $halfscale = 0, $r = 0, $retval = 0, $scale$addr = 0, $sub8 = f0, $t = 0, $x$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $retval = sp + 20 | 0;
 $x$addr = sp + 16 | 0;
 $scale$addr = sp + 12 | 0;
 $halfscale = sp + 8 | 0;
 $t = sp + 4 | 0;
 $r = sp;
 HEAPF32[$x$addr >> 2] = $x;
 HEAPF32[$scale$addr >> 2] = $scale;
 HEAPF32[$halfscale >> 2] = Math_fround(Math_fround(HEAPF32[$scale$addr >> 2]) / Math_fround(2.0));
 HEAPF32[$t >> 2] = Math_fround(Math_fround(HEAPF32[$halfscale >> 2]) + Math_fround(.5));
 if (!(Math_fround(HEAPF32[$scale$addr >> 2]) <= Math_fround(1.0))) ___assert_fail(35713, 34244, 762, 35749);
 HEAPF32[$x$addr >> 2] = Math_fround(+Math_abs(+(+Math_fround(HEAPF32[$x$addr >> 2]))));
 $5 = Math_fround(HEAPF32[$x$addr >> 2]);
 if ($5 >= Math_fround(HEAPF32[$t >> 2])) {
  HEAPF32[$retval >> 2] = Math_fround(0.0);
  $13 = Math_fround(HEAPF32[$retval >> 2]);
  STACKTOP = sp;
  return Math_fround($13);
 }
 HEAPF32[$r >> 2] = Math_fround(Math_fround(.5) - Math_fround(HEAPF32[$halfscale >> 2]));
 $8 = Math_fround(HEAPF32[$x$addr >> 2]);
 if ($8 <= Math_fround(HEAPF32[$r >> 2])) {
  HEAPF32[$retval >> 2] = Math_fround(1.0);
  $13 = Math_fround(HEAPF32[$retval >> 2]);
  STACKTOP = sp;
  return Math_fround($13);
 } else {
  $10 = Math_fround(HEAPF32[$t >> 2]);
  $sub8 = Math_fround($10 - Math_fround(HEAPF32[$x$addr >> 2]));
  HEAPF32[$retval >> 2] = Math_fround($sub8 / Math_fround(HEAPF32[$scale$addr >> 2]));
  $13 = Math_fround(HEAPF32[$retval >> 2]);
  STACKTOP = sp;
  return Math_fround($13);
 }
 return Math_fround(0.0);
}

function _IsFileExtension($fileName, $ext) {
 $fileName = $fileName | 0;
 $ext = $ext | 0;
 var $10 = 0, $checkExts = 0, $ext$addr = 0, $extCount = 0, $fileExt = 0, $fileExtLower = 0, $fileName$addr = 0, $i = 0, $result = 0, $tobool = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 $fileName$addr = sp + 36 | 0;
 $ext$addr = sp + 32 | 0;
 $result = sp + 40 | 0;
 $fileExt = sp + 28 | 0;
 $extCount = sp + 24 | 0;
 $checkExts = sp + 20 | 0;
 $fileExtLower = sp;
 $i = sp + 16 | 0;
 HEAP32[$fileName$addr >> 2] = $fileName;
 HEAP32[$ext$addr >> 2] = $ext;
 HEAP8[$result >> 0] = 0;
 HEAP32[$fileExt >> 2] = _GetExtension(HEAP32[$fileName$addr >> 2] | 0) | 0;
 if (!(HEAP32[$fileExt >> 2] | 0)) {
  $10 = HEAP8[$result >> 0] | 0;
  $tobool = $10 & 1;
  STACKTOP = sp;
  return $tobool | 0;
 }
 HEAP32[$extCount >> 2] = 0;
 HEAP32[$checkExts >> 2] = _TextSplit(HEAP32[$ext$addr >> 2] | 0, 59, $extCount) | 0;
 HEAP32[$fileExtLower >> 2] = 0;
 HEAP32[$fileExtLower + 4 >> 2] = 0;
 HEAP32[$fileExtLower + 8 >> 2] = 0;
 HEAP32[$fileExtLower + 12 >> 2] = 0;
 _strcpy($fileExtLower, _TextToLower(HEAP32[$fileExt >> 2] | 0) | 0) | 0;
 HEAP32[$i >> 2] = 0;
 while (1) {
  if ((HEAP32[$i >> 2] | 0) >= (HEAP32[$extCount >> 2] | 0)) {
   label = 7;
   break;
  }
  if (_TextIsEqual($fileExtLower, _TextToLower((HEAP32[(HEAP32[$checkExts >> 2] | 0) + (HEAP32[$i >> 2] << 2) >> 2] | 0) + 1 | 0) | 0) | 0) break;
  HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
 }
 if ((label | 0) == 7) {
  $10 = HEAP8[$result >> 0] | 0;
  $tobool = $10 & 1;
  STACKTOP = sp;
  return $tobool | 0;
 }
 HEAP8[$result >> 0] = 1;
 $10 = HEAP8[$result >> 0] | 0;
 $tobool = $10 & 1;
 STACKTOP = sp;
 return $tobool | 0;
}

function __ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE7seekoffExNS_8ios_base7seekdirEj($agg$result, $this, $0, $1, $__way, $2) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $0 = $0 | 0;
 $1 = $1 | 0;
 $__way = $__way | 0;
 $2 = $2 | 0;
 var $10 = 0, $13 = 0, $14 = 0, $19 = 0, $20 = 0, $21 = 0, $27 = 0, $29 = 0, $3 = 0, $32 = 0, $33 = 0, $35 = 0, $38 = 0, $__file_ = 0, $call$i = 0, $cmp13 = 0, $exception$i = 0;
 $3 = HEAP32[$this + 68 >> 2] | 0;
 if (!$3) {
  $exception$i = ___cxa_allocate_exception(4) | 0;
  __ZNSt8bad_castC2Ev($exception$i);
  ___cxa_throw($exception$i | 0, 15872, 38);
 }
 $call$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$3 >> 2] | 0) + 24 >> 2] & 127]($3) | 0;
 $__file_ = $this + 64 | 0;
 if (!(HEAP32[$__file_ >> 2] | 0)) {
  $29 = 0;
  $32 = 0;
  $35 = -1;
  $38 = -1;
 } else if ((($0 | 0) != 0 | ($1 | 0) != 0) & ($call$i | 0) < 1) {
  $29 = 0;
  $32 = 0;
  $35 = -1;
  $38 = -1;
 } else if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$this >> 2] | 0) + 24 >> 2] & 127]($this) | 0) == 0 & $__way >>> 0 < 3) {
  $10 = HEAP32[$__file_ >> 2] | 0;
  $cmp13 = ($call$i | 0) > 0;
  $13 = ___muldi3($call$i | 0, (($call$i | 0) < 0) << 31 >> 31 | 0, $0 | 0, $1 | 0) | 0;
  $14 = getTempRet0() | 0;
  if (!(___fseeko($10, $cmp13 ? $13 : 0, $cmp13 ? $14 : 0, $__way) | 0)) {
   $19 = ___ftello(HEAP32[$__file_ >> 2] | 0) | 0;
   $20 = getTempRet0() | 0;
   $21 = $this + 72 | 0;
   $29 = HEAP32[$21 >> 2] | 0;
   $32 = HEAP32[$21 + 4 >> 2] | 0;
   $35 = $19;
   $38 = $20;
  } else {
   $29 = 0;
   $32 = 0;
   $35 = -1;
   $38 = -1;
  }
 } else {
  $29 = 0;
  $32 = 0;
  $35 = -1;
  $38 = -1;
 }
 $27 = $agg$result;
 HEAP32[$27 >> 2] = $29;
 HEAP32[$27 + 4 >> 2] = $32;
 $33 = $agg$result + 8 | 0;
 HEAP32[$33 >> 2] = $35;
 HEAP32[$33 + 4 >> 2] = $38;
 return;
}

function _stbi__zhuffman_decode_slowpath($a, $z) {
 $a = $a | 0;
 $z = $z | 0;
 var $28 = 0, $6 = 0, $a$addr = 0, $b = 0, $code_buffer12 = 0, $k = 0, $num_bits = 0, $retval = 0, $s = 0, $z$addr = 0, sp = 0, CSE$0 = 0, CSE$1 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $retval = sp + 20 | 0;
 $a$addr = sp + 16 | 0;
 $z$addr = sp + 12 | 0;
 $b = sp + 8 | 0;
 $s = sp + 4 | 0;
 $k = sp;
 HEAP32[$a$addr >> 2] = $a;
 HEAP32[$z$addr >> 2] = $z;
 HEAP32[$k >> 2] = _stbi__bit_reverse(HEAP32[(HEAP32[$a$addr >> 2] | 0) + 12 >> 2] | 0, 16) | 0;
 HEAP32[$s >> 2] = 10;
 while (1) {
  $6 = HEAP32[$s >> 2] | 0;
  if ((HEAP32[$k >> 2] | 0) < (HEAP32[(HEAP32[$z$addr >> 2] | 0) + 1056 + (HEAP32[$s >> 2] << 2) >> 2] | 0)) break;
  HEAP32[$s >> 2] = $6 + 1;
 }
 if (($6 | 0) == 16) {
  HEAP32[$retval >> 2] = -1;
  $28 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $28 | 0;
 }
 CSE$0 = HEAP32[$z$addr >> 2] | 0;
 CSE$1 = HEAP32[$s >> 2] << 1 | 0;
 HEAP32[$b >> 2] = (HEAP32[$k >> 2] >> 16 - (HEAP32[$s >> 2] | 0)) - (HEAPU16[CSE$0 + 1024 + CSE$1 >> 1] | 0) + (HEAPU16[CSE$0 + 1124 + CSE$1 >> 1] | 0);
 if ((HEAPU8[(HEAP32[$z$addr >> 2] | 0) + 1156 + (HEAP32[$b >> 2] | 0) >> 0] | 0) != (HEAP32[$s >> 2] | 0)) ___assert_fail(33712, 32781, 3992, 33728);
 $code_buffer12 = (HEAP32[$a$addr >> 2] | 0) + 12 | 0;
 HEAP32[$code_buffer12 >> 2] = (HEAP32[$code_buffer12 >> 2] | 0) >>> (HEAP32[$s >> 2] | 0);
 $num_bits = (HEAP32[$a$addr >> 2] | 0) + 8 | 0;
 HEAP32[$num_bits >> 2] = (HEAP32[$num_bits >> 2] | 0) - (HEAP32[$s >> 2] | 0);
 HEAP32[$retval >> 2] = HEAPU16[(HEAP32[$z$addr >> 2] | 0) + 1444 + (HEAP32[$b >> 2] << 1) >> 1];
 $28 = HEAP32[$retval >> 2] | 0;
 STACKTOP = sp;
 return $28 | 0;
}

function _stbir__add_empty_ring_buffer_entry($stbir_info, $n) {
 $stbir_info = $stbir_info | 0;
 $n = $n | 0;
 var $n$addr = 0, $ring_buffer = 0, $ring_buffer_begin_index1 = 0, $ring_buffer_index = 0, $stbir_info$addr = 0, sp = 0, CSE$0 = 0, CSE$1 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $stbir_info$addr = sp + 12 | 0;
 $n$addr = sp + 8 | 0;
 $ring_buffer_index = sp + 4 | 0;
 $ring_buffer = sp;
 HEAP32[$stbir_info$addr >> 2] = $stbir_info;
 HEAP32[$n$addr >> 2] = $n;
 HEAP32[(HEAP32[$stbir_info$addr >> 2] | 0) + 172 >> 2] = HEAP32[$n$addr >> 2];
 $ring_buffer_begin_index1 = (HEAP32[$stbir_info$addr >> 2] | 0) + 176 | 0;
 do if ((HEAP32[(HEAP32[$stbir_info$addr >> 2] | 0) + 176 >> 2] | 0) < 0) {
  HEAP32[$ring_buffer_begin_index1 >> 2] = 0;
  HEAP32[$ring_buffer_index >> 2] = 0;
  HEAP32[(HEAP32[$stbir_info$addr >> 2] | 0) + 168 >> 2] = HEAP32[$n$addr >> 2];
 } else {
  CSE$1 = HEAP32[$stbir_info$addr >> 2] | 0;
  HEAP32[$ring_buffer_index >> 2] = ((HEAP32[$ring_buffer_begin_index1 >> 2] | 0) + ((HEAP32[CSE$1 + 172 >> 2] | 0) - (HEAP32[CSE$1 + 168 >> 2] | 0)) | 0) % (HEAP32[CSE$1 + 164 >> 2] | 0) | 0;
  if ((HEAP32[$ring_buffer_index >> 2] | 0) != (HEAP32[(HEAP32[$stbir_info$addr >> 2] | 0) + 176 >> 2] | 0)) break; else ___assert_fail(35096, 34244, 1431, 35153);
 } while (0);
 CSE$0 = HEAP32[$stbir_info$addr >> 2] | 0;
 HEAP32[$ring_buffer >> 2] = _stbir__get_ring_buffer_entry(HEAP32[CSE$0 + 180 >> 2] | 0, HEAP32[$ring_buffer_index >> 2] | 0, ((HEAP32[CSE$0 + 160 >> 2] | 0) >>> 0) / 4 | 0) | 0;
 _memset(HEAP32[$ring_buffer >> 2] | 0, 0, HEAP32[(HEAP32[$stbir_info$addr >> 2] | 0) + 160 >> 2] | 0) | 0;
 STACKTOP = sp;
 return HEAP32[$ring_buffer >> 2] | 0;
}

function __ZNSt3__26vectorIN4tson9WangColorENS_9allocatorIS2_EEE24__emplace_back_slow_pathIJRKN8nlohmann10basic_jsonINS_3mapES0_NS_12basic_stringIcNS_11char_traitsIcEENS3_IcEEEEbxydS3_NS7_14adl_serializerEEEEEEvDpOT_($this, $__args) {
 $this = $this | 0;
 $__args = $__args | 0;
 var $3 = 0, $__end_ = 0, $__end_$i = 0, $__v = 0, $add = 0, $call$i = 0, $mul$i = 0, $sub$ptr$div$i$i$i = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $__v = sp;
 $__end_$i = $this + 4 | 0;
 $add = (((HEAP32[$__end_$i >> 2] | 0) - (HEAP32[$this >> 2] | 0) | 0) / 24 | 0) + 1 | 0;
 $call$i = __ZNKSt3__26vectorIN4tson9WangColorENS_9allocatorIS2_EEE8max_sizeEv($this) | 0;
 if ($call$i >>> 0 < $add >>> 0) __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($this); else {
  $3 = HEAP32[$this >> 2] | 0;
  $sub$ptr$div$i$i$i = ((HEAP32[$this + 8 >> 2] | 0) - $3 | 0) / 24 | 0;
  $mul$i = $sub$ptr$div$i$i$i << 1;
  __ZNSt3__214__split_bufferIN4tson9WangColorERNS_9allocatorIS2_EEEC2EmmS5_($__v, $sub$ptr$div$i$i$i >>> 0 < $call$i >>> 1 >>> 0 ? ($mul$i >>> 0 < $add >>> 0 ? $add : $mul$i) : $call$i, ((HEAP32[$__end_$i >> 2] | 0) - $3 | 0) / 24 | 0, $this + 8 | 0);
  $__end_ = $__v + 8 | 0;
  __ZN4tson9WangColorC2ERKN8nlohmann10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS1_14adl_serializerEEE(HEAP32[$__end_ >> 2] | 0, $__args);
  HEAP32[$__end_ >> 2] = (HEAP32[$__end_ >> 2] | 0) + 24;
  __ZNSt3__26vectorIN4tson9WangColorENS_9allocatorIS2_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS2_RS4_EE($this, $__v);
  __ZNSt3__214__split_bufferIN4tson9WangColorERNS_9allocatorIS2_EEED2Ev($__v);
  STACKTOP = sp;
  return;
 }
}

function __ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEE8__appendEm($this, $__n) {
 $this = $this | 0;
 $__n = $__n | 0;
 var $1 = 0, $5 = 0, $__end_ = 0, $__v = 0, $__value_$i$i$i = 0, $add = 0, $call$i = 0, $mul$i = 0, $sub$ptr$sub$i$i$i = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $__v = sp;
 $__value_$i$i$i = $this + 8 | 0;
 $__end_ = $this + 4 | 0;
 $1 = HEAP32[$__end_ >> 2] | 0;
 do if ((HEAP32[$__value_$i$i$i >> 2] | 0) - $1 >> 2 >>> 0 < $__n >>> 0) {
  $add = ($1 - (HEAP32[$this >> 2] | 0) >> 2) + $__n | 0;
  $call$i = __ZNKSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEE8max_sizeEv($this) | 0;
  if ($call$i >>> 0 < $add >>> 0) __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($this); else {
   $5 = HEAP32[$this >> 2] | 0;
   $sub$ptr$sub$i$i$i = (HEAP32[$__value_$i$i$i >> 2] | 0) - $5 | 0;
   $mul$i = $sub$ptr$sub$i$i$i >> 1;
   __ZNSt3__214__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lm28EEEEC2EmmS6_($__v, $sub$ptr$sub$i$i$i >> 2 >>> 0 < $call$i >>> 1 >>> 0 ? ($mul$i >>> 0 < $add >>> 0 ? $add : $mul$i) : $call$i, (HEAP32[$__end_ >> 2] | 0) - $5 >> 2, $this + 16 | 0);
   __ZNSt3__214__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lm28EEEE18__construct_at_endEm($__v, $__n);
   __ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($this, $__v);
   __ZNSt3__214__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lm28EEEED2Ev($__v);
   break;
  }
 } else __ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEE18__construct_at_endEm($this, $__n); while (0);
 STACKTOP = sp;
 return;
}

function __ZNSt3__26vectorIN4tson8WangTileENS_9allocatorIS2_EEE24__emplace_back_slow_pathIJRKN8nlohmann10basic_jsonINS_3mapES0_NS_12basic_stringIcNS_11char_traitsIcEENS3_IcEEEEbxydS3_NS7_14adl_serializerEEEEEEvDpOT_($this, $__args) {
 $this = $this | 0;
 $__args = $__args | 0;
 var $3 = 0, $__end_ = 0, $__end_$i = 0, $__v = 0, $add = 0, $call$i = 0, $mul$i = 0, $sub$ptr$div$i$i$i = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $__v = sp;
 $__end_$i = $this + 4 | 0;
 $add = (((HEAP32[$__end_$i >> 2] | 0) - (HEAP32[$this >> 2] | 0) | 0) / 24 | 0) + 1 | 0;
 $call$i = __ZNKSt3__26vectorIN4tson8WangTileENS_9allocatorIS2_EEE8max_sizeEv($this) | 0;
 if ($call$i >>> 0 < $add >>> 0) __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($this); else {
  $3 = HEAP32[$this >> 2] | 0;
  $sub$ptr$div$i$i$i = ((HEAP32[$this + 8 >> 2] | 0) - $3 | 0) / 24 | 0;
  $mul$i = $sub$ptr$div$i$i$i << 1;
  __ZNSt3__214__split_bufferIN4tson8WangTileERNS_9allocatorIS2_EEEC2EmmS5_($__v, $sub$ptr$div$i$i$i >>> 0 < $call$i >>> 1 >>> 0 ? ($mul$i >>> 0 < $add >>> 0 ? $add : $mul$i) : $call$i, ((HEAP32[$__end_$i >> 2] | 0) - $3 | 0) / 24 | 0, $this + 8 | 0);
  $__end_ = $__v + 8 | 0;
  __ZN4tson8WangTileC2ERKN8nlohmann10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS1_14adl_serializerEEE(HEAP32[$__end_ >> 2] | 0, $__args);
  HEAP32[$__end_ >> 2] = (HEAP32[$__end_ >> 2] | 0) + 24;
  __ZNSt3__26vectorIN4tson8WangTileENS_9allocatorIS2_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS2_RS4_EE($this, $__v);
  __ZNSt3__214__split_bufferIN4tson8WangTileERNS_9allocatorIS2_EEED2Ev($__v);
  STACKTOP = sp;
  return;
 }
}

function __ZNSt3__26vectorIN4tson7TilesetENS_9allocatorIS2_EEE24__emplace_back_slow_pathIJRKN8nlohmann10basic_jsonINS_3mapES0_NS_12basic_stringIcNS_11char_traitsIcEENS3_IcEEEEbxydS3_NS7_14adl_serializerEEEEEEvDpOT_($this, $__args) {
 $this = $this | 0;
 $__args = $__args | 0;
 var $3 = 0, $__end_ = 0, $__end_$i = 0, $__v = 0, $add = 0, $call$i = 0, $mul$i = 0, $sub$ptr$div$i$i$i = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $__v = sp;
 $__end_$i = $this + 4 | 0;
 $add = (((HEAP32[$__end_$i >> 2] | 0) - (HEAP32[$this >> 2] | 0) | 0) / 164 | 0) + 1 | 0;
 $call$i = __ZNKSt3__26vectorIN4tson7TilesetENS_9allocatorIS2_EEE8max_sizeEv($this) | 0;
 if ($call$i >>> 0 < $add >>> 0) __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($this); else {
  $3 = HEAP32[$this >> 2] | 0;
  $sub$ptr$div$i$i$i = ((HEAP32[$this + 8 >> 2] | 0) - $3 | 0) / 164 | 0;
  $mul$i = $sub$ptr$div$i$i$i << 1;
  __ZNSt3__214__split_bufferIN4tson7TilesetERNS_9allocatorIS2_EEEC2EmmS5_($__v, $sub$ptr$div$i$i$i >>> 0 < $call$i >>> 1 >>> 0 ? ($mul$i >>> 0 < $add >>> 0 ? $add : $mul$i) : $call$i, ((HEAP32[$__end_$i >> 2] | 0) - $3 | 0) / 164 | 0, $this + 8 | 0);
  $__end_ = $__v + 8 | 0;
  __ZN4tson7TilesetC2ERKN8nlohmann10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS1_14adl_serializerEEE(HEAP32[$__end_ >> 2] | 0, $__args);
  HEAP32[$__end_ >> 2] = (HEAP32[$__end_ >> 2] | 0) + 164;
  __ZNSt3__26vectorIN4tson7TilesetENS_9allocatorIS2_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS2_RS4_EE($this, $__v);
  __ZNSt3__214__split_bufferIN4tson7TilesetERNS_9allocatorIS2_EEED2Ev($__v);
  STACKTOP = sp;
  return;
 }
}

function __ZNSt3__26vectorIN8nlohmann10basic_jsonINS_3mapES0_NS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEbxydS7_NS1_14adl_serializerEEENS7_ISB_EEE26__swap_out_circular_bufferERNS_14__split_bufferISB_RSC_EE($this, $__v) {
 $this = $this | 0;
 $__v = $__v | 0;
 var $$pre$phi11Z2D = 0, $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $3 = 0, $6 = 0, $7 = 0, $8 = 0, $__begin_2 = 0, $__end1$addr$04$i = 0, $__end_ = 0, $__end_6 = 0, $__value_$i$i$i = 0, $__value_$i$i$i6 = 0;
 $0 = HEAP32[$this >> 2] | 0;
 $__end_ = $this + 4 | 0;
 $1 = HEAP32[$__end_ >> 2] | 0;
 $__begin_2 = $__v + 4 | 0;
 if (($1 | 0) == ($0 | 0)) {
  $$pre$phi11Z2D = $__begin_2;
  $$pre$phiZ2D = $this;
  $6 = HEAP32[$__begin_2 >> 2] | 0;
  $7 = $0;
 } else {
  $3 = HEAP32[$__begin_2 >> 2] | 0;
  $__end1$addr$04$i = $1;
  do {
   $__end1$addr$04$i = $__end1$addr$04$i + -16 | 0;
   __ZN8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEC2EOSB_($3 + -16 | 0, $__end1$addr$04$i);
   $3 = (HEAP32[$__begin_2 >> 2] | 0) + -16 | 0;
   HEAP32[$__begin_2 >> 2] = $3;
  } while (($__end1$addr$04$i | 0) != ($0 | 0));
  $$pre$phi11Z2D = $__begin_2;
  $$pre$phiZ2D = $this;
  $6 = $3;
  $7 = HEAP32[$this >> 2] | 0;
 }
 HEAP32[$$pre$phiZ2D >> 2] = $6;
 HEAP32[$$pre$phi11Z2D >> 2] = $7;
 $__end_6 = $__v + 8 | 0;
 $8 = HEAP32[$__end_ >> 2] | 0;
 HEAP32[$__end_ >> 2] = HEAP32[$__end_6 >> 2];
 HEAP32[$__end_6 >> 2] = $8;
 $__value_$i$i$i6 = $this + 8 | 0;
 $__value_$i$i$i = $__v + 12 | 0;
 $10 = HEAP32[$__value_$i$i$i6 >> 2] | 0;
 HEAP32[$__value_$i$i$i6 >> 2] = HEAP32[$__value_$i$i$i >> 2];
 HEAP32[$__value_$i$i$i >> 2] = $10;
 HEAP32[$__v >> 2] = HEAP32[$$pre$phi11Z2D >> 2];
 return;
}

function __ZNSt3__26vectorIN4tson7WangSetENS_9allocatorIS2_EEE24__emplace_back_slow_pathIJRKN8nlohmann10basic_jsonINS_3mapES0_NS_12basic_stringIcNS_11char_traitsIcEENS3_IcEEEEbxydS3_NS7_14adl_serializerEEEEEEvDpOT_($this, $__args) {
 $this = $this | 0;
 $__args = $__args | 0;
 var $3 = 0, $__end_ = 0, $__end_$i = 0, $__v = 0, $add = 0, $call$i = 0, $mul$i = 0, $sub$ptr$div$i$i$i = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $__v = sp;
 $__end_$i = $this + 4 | 0;
 $add = (((HEAP32[$__end_$i >> 2] | 0) - (HEAP32[$this >> 2] | 0) | 0) / 76 | 0) + 1 | 0;
 $call$i = __ZNKSt3__26vectorIN4tson7WangSetENS_9allocatorIS2_EEE8max_sizeEv($this) | 0;
 if ($call$i >>> 0 < $add >>> 0) __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($this); else {
  $3 = HEAP32[$this >> 2] | 0;
  $sub$ptr$div$i$i$i = ((HEAP32[$this + 8 >> 2] | 0) - $3 | 0) / 76 | 0;
  $mul$i = $sub$ptr$div$i$i$i << 1;
  __ZNSt3__214__split_bufferIN4tson7WangSetERNS_9allocatorIS2_EEEC2EmmS5_($__v, $sub$ptr$div$i$i$i >>> 0 < $call$i >>> 1 >>> 0 ? ($mul$i >>> 0 < $add >>> 0 ? $add : $mul$i) : $call$i, ((HEAP32[$__end_$i >> 2] | 0) - $3 | 0) / 76 | 0, $this + 8 | 0);
  $__end_ = $__v + 8 | 0;
  __ZN4tson7WangSetC2ERKN8nlohmann10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS1_14adl_serializerEEE(HEAP32[$__end_ >> 2] | 0, $__args);
  HEAP32[$__end_ >> 2] = (HEAP32[$__end_ >> 2] | 0) + 76;
  __ZNSt3__26vectorIN4tson7WangSetENS_9allocatorIS2_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS2_RS4_EE($this, $__v);
  __ZNSt3__214__split_bufferIN4tson7WangSetERNS_9allocatorIS2_EEED2Ev($__v);
  STACKTOP = sp;
  return;
 }
}

function __ZNSt3__26vectorIN4tson7TerrainENS_9allocatorIS2_EEE24__emplace_back_slow_pathIJRKN8nlohmann10basic_jsonINS_3mapES0_NS_12basic_stringIcNS_11char_traitsIcEENS3_IcEEEEbxydS3_NS7_14adl_serializerEEEEEEvDpOT_($this, $__args) {
 $this = $this | 0;
 $__args = $__args | 0;
 var $3 = 0, $__end_ = 0, $__end_$i = 0, $__v = 0, $add = 0, $call$i = 0, $mul$i = 0, $sub$ptr$div$i$i$i = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $__v = sp;
 $__end_$i = $this + 4 | 0;
 $add = (((HEAP32[$__end_$i >> 2] | 0) - (HEAP32[$this >> 2] | 0) | 0) / 40 | 0) + 1 | 0;
 $call$i = __ZNKSt3__26vectorIN4tson7TerrainENS_9allocatorIS2_EEE8max_sizeEv($this) | 0;
 if ($call$i >>> 0 < $add >>> 0) __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($this); else {
  $3 = HEAP32[$this >> 2] | 0;
  $sub$ptr$div$i$i$i = ((HEAP32[$this + 8 >> 2] | 0) - $3 | 0) / 40 | 0;
  $mul$i = $sub$ptr$div$i$i$i << 1;
  __ZNSt3__214__split_bufferIN4tson7TerrainERNS_9allocatorIS2_EEEC2EmmS5_($__v, $sub$ptr$div$i$i$i >>> 0 < $call$i >>> 1 >>> 0 ? ($mul$i >>> 0 < $add >>> 0 ? $add : $mul$i) : $call$i, ((HEAP32[$__end_$i >> 2] | 0) - $3 | 0) / 40 | 0, $this + 8 | 0);
  $__end_ = $__v + 8 | 0;
  __ZN4tson7TerrainC2ERKN8nlohmann10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS1_14adl_serializerEEE(HEAP32[$__end_ >> 2] | 0, $__args);
  HEAP32[$__end_ >> 2] = (HEAP32[$__end_ >> 2] | 0) + 40;
  __ZNSt3__26vectorIN4tson7TerrainENS_9allocatorIS2_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS2_RS4_EE($this, $__v);
  __ZNSt3__214__split_bufferIN4tson7TerrainERNS_9allocatorIS2_EEED2Ev($__v);
  STACKTOP = sp;
  return;
 }
}

function __ZNSt3__26vectorIN4tson6ObjectENS_9allocatorIS2_EEE24__emplace_back_slow_pathIJRKN8nlohmann10basic_jsonINS_3mapES0_NS_12basic_stringIcNS_11char_traitsIcEENS3_IcEEEEbxydS3_NS7_14adl_serializerEEEEEEvDpOT_($this, $__args) {
 $this = $this | 0;
 $__args = $__args | 0;
 var $3 = 0, $__end_ = 0, $__end_$i = 0, $__v = 0, $add = 0, $call$i = 0, $mul$i = 0, $sub$ptr$div$i$i$i = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $__v = sp;
 $__end_$i = $this + 4 | 0;
 $add = (((HEAP32[$__end_$i >> 2] | 0) - (HEAP32[$this >> 2] | 0) | 0) / 140 | 0) + 1 | 0;
 $call$i = __ZNKSt3__26vectorIN4tson6ObjectENS_9allocatorIS2_EEE8max_sizeEv($this) | 0;
 if ($call$i >>> 0 < $add >>> 0) __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($this); else {
  $3 = HEAP32[$this >> 2] | 0;
  $sub$ptr$div$i$i$i = ((HEAP32[$this + 8 >> 2] | 0) - $3 | 0) / 140 | 0;
  $mul$i = $sub$ptr$div$i$i$i << 1;
  __ZNSt3__214__split_bufferIN4tson6ObjectERNS_9allocatorIS2_EEEC2EmmS5_($__v, $sub$ptr$div$i$i$i >>> 0 < $call$i >>> 1 >>> 0 ? ($mul$i >>> 0 < $add >>> 0 ? $add : $mul$i) : $call$i, ((HEAP32[$__end_$i >> 2] | 0) - $3 | 0) / 140 | 0, $this + 8 | 0);
  $__end_ = $__v + 8 | 0;
  __ZN4tson6ObjectC2ERKN8nlohmann10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS1_14adl_serializerEEE(HEAP32[$__end_ >> 2] | 0, $__args);
  HEAP32[$__end_ >> 2] = (HEAP32[$__end_ >> 2] | 0) + 140;
  __ZNSt3__26vectorIN4tson6ObjectENS_9allocatorIS2_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS2_RS4_EE($this, $__v);
  __ZNSt3__214__split_bufferIN4tson6ObjectERNS_9allocatorIS2_EEED2Ev($__v);
  STACKTOP = sp;
  return;
 }
}

function __ZNSt3__26vectorIN4tson5LayerENS_9allocatorIS2_EEE24__emplace_back_slow_pathIJRKN8nlohmann10basic_jsonINS_3mapES0_NS_12basic_stringIcNS_11char_traitsIcEENS3_IcEEEEbxydS3_NS7_14adl_serializerEEEEEEvDpOT_($this, $__args) {
 $this = $this | 0;
 $__args = $__args | 0;
 var $3 = 0, $__end_ = 0, $__end_$i = 0, $__v = 0, $add = 0, $call$i = 0, $mul$i = 0, $sub$ptr$div$i$i$i = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $__v = sp;
 $__end_$i = $this + 4 | 0;
 $add = (((HEAP32[$__end_$i >> 2] | 0) - (HEAP32[$this >> 2] | 0) | 0) / 220 | 0) + 1 | 0;
 $call$i = __ZNKSt3__26vectorIN4tson5LayerENS_9allocatorIS2_EEE8max_sizeEv($this) | 0;
 if ($call$i >>> 0 < $add >>> 0) __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($this); else {
  $3 = HEAP32[$this >> 2] | 0;
  $sub$ptr$div$i$i$i = ((HEAP32[$this + 8 >> 2] | 0) - $3 | 0) / 220 | 0;
  $mul$i = $sub$ptr$div$i$i$i << 1;
  __ZNSt3__214__split_bufferIN4tson5LayerERNS_9allocatorIS2_EEEC2EmmS5_($__v, $sub$ptr$div$i$i$i >>> 0 < $call$i >>> 1 >>> 0 ? ($mul$i >>> 0 < $add >>> 0 ? $add : $mul$i) : $call$i, ((HEAP32[$__end_$i >> 2] | 0) - $3 | 0) / 220 | 0, $this + 8 | 0);
  $__end_ = $__v + 8 | 0;
  __ZN4tson5LayerC2ERKN8nlohmann10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS1_14adl_serializerEEE(HEAP32[$__end_ >> 2] | 0, $__args);
  HEAP32[$__end_ >> 2] = (HEAP32[$__end_ >> 2] | 0) + 220;
  __ZNSt3__26vectorIN4tson5LayerENS_9allocatorIS2_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS2_RS4_EE($this, $__v);
  __ZNSt3__214__split_bufferIN4tson5LayerERNS_9allocatorIS2_EEED2Ev($__v);
  STACKTOP = sp;
  return;
 }
}

function __ZNSt3__26vectorIN4tson5ChunkENS_9allocatorIS2_EEE24__emplace_back_slow_pathIJRKN8nlohmann10basic_jsonINS_3mapES0_NS_12basic_stringIcNS_11char_traitsIcEENS3_IcEEEEbxydS3_NS7_14adl_serializerEEEEEEvDpOT_($this, $__args) {
 $this = $this | 0;
 $__args = $__args | 0;
 var $3 = 0, $__end_ = 0, $__end_$i = 0, $__v = 0, $add = 0, $call$i = 0, $mul$i = 0, $sub$ptr$div$i$i$i = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $__v = sp;
 $__end_$i = $this + 4 | 0;
 $add = (((HEAP32[$__end_$i >> 2] | 0) - (HEAP32[$this >> 2] | 0) | 0) / 40 | 0) + 1 | 0;
 $call$i = __ZNKSt3__26vectorIN4tson5ChunkENS_9allocatorIS2_EEE8max_sizeEv($this) | 0;
 if ($call$i >>> 0 < $add >>> 0) __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($this); else {
  $3 = HEAP32[$this >> 2] | 0;
  $sub$ptr$div$i$i$i = ((HEAP32[$this + 8 >> 2] | 0) - $3 | 0) / 40 | 0;
  $mul$i = $sub$ptr$div$i$i$i << 1;
  __ZNSt3__214__split_bufferIN4tson5ChunkERNS_9allocatorIS2_EEEC2EmmS5_($__v, $sub$ptr$div$i$i$i >>> 0 < $call$i >>> 1 >>> 0 ? ($mul$i >>> 0 < $add >>> 0 ? $add : $mul$i) : $call$i, ((HEAP32[$__end_$i >> 2] | 0) - $3 | 0) / 40 | 0, $this + 8 | 0);
  $__end_ = $__v + 8 | 0;
  __ZN4tson5ChunkC2ERKN8nlohmann10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS1_14adl_serializerEEE(HEAP32[$__end_ >> 2] | 0, $__args);
  HEAP32[$__end_ >> 2] = (HEAP32[$__end_ >> 2] | 0) + 40;
  __ZNSt3__26vectorIN4tson5ChunkENS_9allocatorIS2_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS2_RS4_EE($this, $__v);
  __ZNSt3__214__split_bufferIN4tson5ChunkERNS_9allocatorIS2_EEED2Ev($__v);
  STACKTOP = sp;
  return;
 }
}

function __ZN7Enemigo4drawEv($this) {
 $this = $this | 0;
 var $0 = f0, $2 = f0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $agg$tmp10 = 0, $conv3 = 0, $conv9 = 0, $enemigo = 0, $tmpcast$byval_copy = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 $tmpcast$byval_copy = sp + 44 | 0;
 $agg$tmp$byval_copy = sp + 24 | 0;
 $agg$tmp = sp + 4 | 0;
 $agg$tmp10 = sp;
 $enemigo = $this + 16 | 0;
 HEAP32[$agg$tmp >> 2] = HEAP32[$enemigo >> 2];
 HEAP32[$agg$tmp + 4 >> 2] = HEAP32[$enemigo + 4 >> 2];
 HEAP32[$agg$tmp + 8 >> 2] = HEAP32[$enemigo + 8 >> 2];
 HEAP32[$agg$tmp + 12 >> 2] = HEAP32[$enemigo + 12 >> 2];
 HEAP32[$agg$tmp + 16 >> 2] = HEAP32[$enemigo + 16 >> 2];
 $0 = Math_fround(HEAPF32[$this + 60 >> 2]);
 $conv3 = ~~Math_fround($0 - Math_fround((HEAP32[$this + 20 >> 2] | 0) / 2 | 0 | 0));
 $2 = Math_fround(HEAPF32[$this + 64 >> 2]);
 $conv9 = ~~Math_fround($2 - Math_fround((HEAP32[$this + 24 >> 2] | 0) / 2 | 0 | 0));
 HEAP32[$agg$tmp10 >> 2] = -1;
 HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$agg$tmp$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
 HEAP32[$agg$tmp$byval_copy + 8 >> 2] = HEAP32[$agg$tmp + 8 >> 2];
 HEAP32[$agg$tmp$byval_copy + 12 >> 2] = HEAP32[$agg$tmp + 12 >> 2];
 HEAP32[$agg$tmp$byval_copy + 16 >> 2] = HEAP32[$agg$tmp + 16 >> 2];
 HEAP8[$tmpcast$byval_copy >> 0] = HEAP8[$agg$tmp10 >> 0] | 0;
 HEAP8[$tmpcast$byval_copy + 1 >> 0] = HEAP8[$agg$tmp10 + 1 >> 0] | 0;
 HEAP8[$tmpcast$byval_copy + 2 >> 0] = HEAP8[$agg$tmp10 + 2 >> 0] | 0;
 HEAP8[$tmpcast$byval_copy + 3 >> 0] = HEAP8[$agg$tmp10 + 3 >> 0] | 0;
 _DrawTexture($agg$tmp$byval_copy, $conv3, $conv9, $tmpcast$byval_copy);
 STACKTOP = sp;
 return;
}

function __ZNSt3__26vectorIN4tson4TileENS_9allocatorIS2_EEE24__emplace_back_slow_pathIJRKN8nlohmann10basic_jsonINS_3mapES0_NS_12basic_stringIcNS_11char_traitsIcEENS3_IcEEEEbxydS3_NS7_14adl_serializerEEEEEEvDpOT_($this, $__args) {
 $this = $this | 0;
 $__args = $__args | 0;
 var $3 = 0, $__end_ = 0, $__end_$i = 0, $__v = 0, $add = 0, $call$i = 0, $mul$i = 0, $sub$ptr$div$i$i$i = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $__v = sp;
 $__end_$i = $this + 4 | 0;
 $add = (((HEAP32[$__end_$i >> 2] | 0) - (HEAP32[$this >> 2] | 0) | 0) / 304 | 0) + 1 | 0;
 $call$i = __ZNKSt3__26vectorIN4tson4TileENS_9allocatorIS2_EEE8max_sizeEv($this) | 0;
 if ($call$i >>> 0 < $add >>> 0) __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($this); else {
  $3 = HEAP32[$this >> 2] | 0;
  $sub$ptr$div$i$i$i = ((HEAP32[$this + 8 >> 2] | 0) - $3 | 0) / 304 | 0;
  $mul$i = $sub$ptr$div$i$i$i << 1;
  __ZNSt3__214__split_bufferIN4tson4TileERNS_9allocatorIS2_EEEC2EmmS5_($__v, $sub$ptr$div$i$i$i >>> 0 < $call$i >>> 1 >>> 0 ? ($mul$i >>> 0 < $add >>> 0 ? $add : $mul$i) : $call$i, ((HEAP32[$__end_$i >> 2] | 0) - $3 | 0) / 304 | 0, $this + 8 | 0);
  $__end_ = $__v + 8 | 0;
  __ZN4tson4TileC2ERKN8nlohmann10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS1_14adl_serializerEEE(HEAP32[$__end_ >> 2] | 0, $__args);
  HEAP32[$__end_ >> 2] = (HEAP32[$__end_ >> 2] | 0) + 304;
  __ZNSt3__26vectorIN4tson4TileENS_9allocatorIS2_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS2_RS4_EE($this, $__v);
  __ZNSt3__214__split_bufferIN4tson4TileERNS_9allocatorIS2_EEED2Ev($__v);
  STACKTOP = sp;
  return;
 }
}

function __ZN8nlohmann6detail9iter_implIKNS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEEppEv($this) {
 $this = $this | 0;
 var $$pre = 0, $$pre$i$i = 0, $0 = 0, $2 = 0, $3 = 0, $5 = 0, $6 = 0, $__i$i$i$i = 0, $__parent_$i410$i$i$i$i$i = 0, $__parent_$i47$i$i$i$i$i = 0, $__x$addr$0$i$i$i$i$i$i = 0, $object_iterator = 0, $retval$0$i$i$i$i$i = 0;
 $0 = HEAP32[$this >> 2] | 0;
 if (!$0) ___assert_fail(23450, 22221, 9477, 23470);
 switch (HEAP8[$0 >> 0] | 0) {
 case 1:
  {
   $object_iterator = $this + 4 | 0;
   $$pre$i$i = HEAP32[$object_iterator >> 2] | 0;
   $$pre = HEAP32[$$pre$i$i + 4 >> 2] | 0;
   if (!$$pre) {
    $__parent_$i47$i$i$i$i$i = $$pre$i$i + 8 | 0;
    $3 = HEAP32[$__parent_$i47$i$i$i$i$i >> 2] | 0;
    if ((HEAP32[$3 >> 2] | 0) == ($$pre$i$i | 0)) $retval$0$i$i$i$i$i = $3; else {
     $__parent_$i410$i$i$i$i$i = $__parent_$i47$i$i$i$i$i;
     do {
      $5 = HEAP32[$__parent_$i410$i$i$i$i$i >> 2] | 0;
      $__parent_$i410$i$i$i$i$i = $5 + 8 | 0;
      $6 = HEAP32[$__parent_$i410$i$i$i$i$i >> 2] | 0;
     } while ((HEAP32[$6 >> 2] | 0) != ($5 | 0));
     $retval$0$i$i$i$i$i = $6;
    }
   } else {
    $__x$addr$0$i$i$i$i$i$i = $$pre;
    while (1) {
     $2 = HEAP32[$__x$addr$0$i$i$i$i$i$i >> 2] | 0;
     if (!$2) break; else $__x$addr$0$i$i$i$i$i$i = $2;
    }
    $retval$0$i$i$i$i$i = $__x$addr$0$i$i$i$i$i$i;
   }
   HEAP32[$object_iterator >> 2] = $retval$0$i$i$i$i$i;
   break;
  }
 case 2:
  {
   $__i$i$i$i = $this + 8 | 0;
   HEAP32[$__i$i$i$i >> 2] = (HEAP32[$__i$i$i$i >> 2] | 0) + 16;
   break;
  }
 default:
  __ZN8nlohmann6detail20primitive_iterator_tppEv($this + 12 | 0) | 0;
 }
 return $this | 0;
}

function __ZN8nlohmann6detail9iter_implINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEEppEv($this) {
 $this = $this | 0;
 var $$pre = 0, $$pre$i$i = 0, $0 = 0, $2 = 0, $3 = 0, $5 = 0, $6 = 0, $__i$i$i$i = 0, $__parent_$i410$i$i$i$i$i = 0, $__parent_$i47$i$i$i$i$i = 0, $__x$addr$0$i$i$i$i$i$i = 0, $object_iterator = 0, $retval$0$i$i$i$i$i = 0;
 $0 = HEAP32[$this >> 2] | 0;
 if (!$0) ___assert_fail(23450, 22221, 9477, 23470);
 switch (HEAP8[$0 >> 0] | 0) {
 case 1:
  {
   $object_iterator = $this + 4 | 0;
   $$pre$i$i = HEAP32[$object_iterator >> 2] | 0;
   $$pre = HEAP32[$$pre$i$i + 4 >> 2] | 0;
   if (!$$pre) {
    $__parent_$i47$i$i$i$i$i = $$pre$i$i + 8 | 0;
    $3 = HEAP32[$__parent_$i47$i$i$i$i$i >> 2] | 0;
    if ((HEAP32[$3 >> 2] | 0) == ($$pre$i$i | 0)) $retval$0$i$i$i$i$i = $3; else {
     $__parent_$i410$i$i$i$i$i = $__parent_$i47$i$i$i$i$i;
     do {
      $5 = HEAP32[$__parent_$i410$i$i$i$i$i >> 2] | 0;
      $__parent_$i410$i$i$i$i$i = $5 + 8 | 0;
      $6 = HEAP32[$__parent_$i410$i$i$i$i$i >> 2] | 0;
     } while ((HEAP32[$6 >> 2] | 0) != ($5 | 0));
     $retval$0$i$i$i$i$i = $6;
    }
   } else {
    $__x$addr$0$i$i$i$i$i$i = $$pre;
    while (1) {
     $2 = HEAP32[$__x$addr$0$i$i$i$i$i$i >> 2] | 0;
     if (!$2) break; else $__x$addr$0$i$i$i$i$i$i = $2;
    }
    $retval$0$i$i$i$i$i = $__x$addr$0$i$i$i$i$i$i;
   }
   HEAP32[$object_iterator >> 2] = $retval$0$i$i$i$i$i;
   break;
  }
 case 2:
  {
   $__i$i$i$i = $this + 8 | 0;
   HEAP32[$__i$i$i$i >> 2] = (HEAP32[$__i$i$i$i >> 2] | 0) + 16;
   break;
  }
 default:
  __ZN8nlohmann6detail20primitive_iterator_tppEv($this + 12 | 0) | 0;
 }
 return $this | 0;
}

function __ZNSt3__29__any_imp13_SmallHandlerIN4tson5ColorIhEEE8__handleENS0_7_ActionEPKNS_3anyEPS7_PKSt9type_infoPKv($__act, $__this, $__other, $__info, $__fallback_info) {
 $__act = $__act | 0;
 $__this = $__this | 0;
 $__other = $__other | 0;
 $__info = $__info | 0;
 $__fallback_info = $__fallback_info | 0;
 var $0 = 0, $1 = 0, $__s$i = 0, $__s$i$i = 0, $__s$i$i6 = 0, $__s$i5 = 0, $retval$0 = 0;
 L1 : do switch ($__act | 0) {
 case 0:
  {
   HEAP32[$__this >> 2] = 0;
   $retval$0 = 0;
   break;
  }
 case 1:
  {
   $__s$i5 = $__this + 4 | 0;
   $__s$i$i6 = $__other + 4 | 0;
   $0 = HEAPU8[$__s$i5 >> 0] | HEAPU8[$__s$i5 + 1 >> 0] << 8 | HEAPU8[$__s$i5 + 2 >> 0] << 16 | HEAPU8[$__s$i5 + 3 >> 0] << 24;
   HEAP8[$__s$i$i6 >> 0] = $0;
   HEAP8[$__s$i$i6 + 1 >> 0] = $0 >> 8;
   HEAP8[$__s$i$i6 + 2 >> 0] = $0 >> 16;
   HEAP8[$__s$i$i6 + 3 >> 0] = $0 >> 24;
   HEAP32[$__other >> 2] = 21;
   $retval$0 = 0;
   break;
  }
 case 2:
  {
   $__s$i = $__this + 4 | 0;
   $__s$i$i = $__other + 4 | 0;
   $1 = HEAPU8[$__s$i >> 0] | HEAPU8[$__s$i + 1 >> 0] << 8 | HEAPU8[$__s$i + 2 >> 0] << 16 | HEAPU8[$__s$i + 3 >> 0] << 24;
   HEAP8[$__s$i$i >> 0] = $1;
   HEAP8[$__s$i$i + 1 >> 0] = $1 >> 8;
   HEAP8[$__s$i$i + 2 >> 0] = $1 >> 16;
   HEAP8[$__s$i$i + 3 >> 0] = $1 >> 24;
   HEAP32[$__other >> 2] = 21;
   HEAP32[$__this >> 2] = 0;
   $retval$0 = 0;
   break;
  }
 case 3:
  {
   if (!$__info) {
    if (($__fallback_info | 0) != 59172) {
     $retval$0 = 0;
     break L1;
    }
   } else if ((HEAP32[$__info + 4 >> 2] | 0) != 22909) {
    $retval$0 = 0;
    break L1;
   }
   $retval$0 = $__this + 4 | 0;
   break;
  }
 case 4:
  {
   $retval$0 = 15056;
   break;
  }
 default:
  {}
 } while (0);
 return $retval$0 | 0;
}

function __ZL28demangling_terminate_handlerv() {
 var $0 = 0, $1 = 0, $11 = 0, $2 = 0, $8 = 0, $9 = 0, $call = 0, $call13 = 0, $cond = 0, $thrown_object = 0, $vararg_buffer = 0, $vararg_buffer10 = 0, $vararg_buffer3 = 0, $vararg_buffer7 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 $vararg_buffer10 = sp + 32 | 0;
 $vararg_buffer7 = sp + 24 | 0;
 $vararg_buffer3 = sp + 16 | 0;
 $vararg_buffer = sp;
 $thrown_object = sp + 36 | 0;
 $call = ___cxa_get_globals_fast() | 0;
 if ($call | 0) {
  $0 = HEAP32[$call >> 2] | 0;
  if ($0 | 0) {
   $1 = $0 + 48 | 0;
   if (!(__ZN10__cxxabiv121__isOurExceptionClassEPK17_Unwind_Exception($1) | 0)) {
    HEAP32[$vararg_buffer7 >> 2] = 38671;
    _abort_message(38621, $vararg_buffer7);
   }
   $2 = __ZN10__cxxabiv119__getExceptionClassEPK17_Unwind_Exception($1) | 0;
   if (($2 | 0) == 1126902529 & (getTempRet0() | 0) == 1129074247) $cond = HEAP32[$0 + 44 >> 2] | 0; else $cond = $0 + 80 | 0;
   HEAP32[$thrown_object >> 2] = $cond;
   $8 = HEAP32[$0 >> 2] | 0;
   $9 = HEAP32[$8 + 4 >> 2] | 0;
   if (FUNCTION_TABLE_iiii[HEAP32[(HEAP32[3940] | 0) + 16 >> 2] & 63](15760, $8, $thrown_object) | 0) {
    $11 = HEAP32[$thrown_object >> 2] | 0;
    $call13 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$11 >> 2] | 0) + 8 >> 2] & 127]($11) | 0;
    HEAP32[$vararg_buffer >> 2] = 38671;
    HEAP32[$vararg_buffer + 4 >> 2] = $9;
    HEAP32[$vararg_buffer + 8 >> 2] = $call13;
    _abort_message(38535, $vararg_buffer);
   } else {
    HEAP32[$vararg_buffer3 >> 2] = 38671;
    HEAP32[$vararg_buffer3 + 4 >> 2] = $9;
    _abort_message(38580, $vararg_buffer3);
   }
  }
 }
 _abort_message(38659, $vararg_buffer10);
}

function _stbir__get_ring_buffer_scanline($get_scanline, $ring_buffer, $begin_index, $first_scanline, $ring_buffer_num_entries, $ring_buffer_length) {
 $get_scanline = $get_scanline | 0;
 $ring_buffer = $ring_buffer | 0;
 $begin_index = $begin_index | 0;
 $first_scanline = $first_scanline | 0;
 $ring_buffer_num_entries = $ring_buffer_num_entries | 0;
 $ring_buffer_length = $ring_buffer_length | 0;
 var $begin_index$addr = 0, $call = 0, $first_scanline$addr = 0, $get_scanline$addr = 0, $ring_buffer$addr = 0, $ring_buffer_index = 0, $ring_buffer_length$addr = 0, $ring_buffer_num_entries$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $get_scanline$addr = sp + 24 | 0;
 $ring_buffer$addr = sp + 20 | 0;
 $begin_index$addr = sp + 16 | 0;
 $first_scanline$addr = sp + 12 | 0;
 $ring_buffer_num_entries$addr = sp + 8 | 0;
 $ring_buffer_length$addr = sp + 4 | 0;
 $ring_buffer_index = sp;
 HEAP32[$get_scanline$addr >> 2] = $get_scanline;
 HEAP32[$ring_buffer$addr >> 2] = $ring_buffer;
 HEAP32[$begin_index$addr >> 2] = $begin_index;
 HEAP32[$first_scanline$addr >> 2] = $first_scanline;
 HEAP32[$ring_buffer_num_entries$addr >> 2] = $ring_buffer_num_entries;
 HEAP32[$ring_buffer_length$addr >> 2] = $ring_buffer_length;
 HEAP32[$ring_buffer_index >> 2] = ((HEAP32[$begin_index$addr >> 2] | 0) + ((HEAP32[$get_scanline$addr >> 2] | 0) - (HEAP32[$first_scanline$addr >> 2] | 0)) | 0) % (HEAP32[$ring_buffer_num_entries$addr >> 2] | 0) | 0;
 $call = _stbir__get_ring_buffer_entry(HEAP32[$ring_buffer$addr >> 2] | 0, HEAP32[$ring_buffer_index >> 2] | 0, HEAP32[$ring_buffer_length$addr >> 2] | 0) | 0;
 STACKTOP = sp;
 return $call | 0;
}

function __ZN4Nave4drawEv($this) {
 $this = $this | 0;
 var $0 = f0, $2 = f0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $agg$tmp10 = 0, $conv3 = 0, $conv9 = 0, $nave = 0, $tmpcast$byval_copy = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 $tmpcast$byval_copy = sp + 44 | 0;
 $agg$tmp$byval_copy = sp + 24 | 0;
 $agg$tmp = sp + 4 | 0;
 $agg$tmp10 = sp;
 $nave = $this + 16 | 0;
 HEAP32[$agg$tmp >> 2] = HEAP32[$nave >> 2];
 HEAP32[$agg$tmp + 4 >> 2] = HEAP32[$nave + 4 >> 2];
 HEAP32[$agg$tmp + 8 >> 2] = HEAP32[$nave + 8 >> 2];
 HEAP32[$agg$tmp + 12 >> 2] = HEAP32[$nave + 12 >> 2];
 HEAP32[$agg$tmp + 16 >> 2] = HEAP32[$nave + 16 >> 2];
 $0 = Math_fround(HEAPF32[$this + 60 >> 2]);
 $conv3 = ~~Math_fround($0 - Math_fround((HEAP32[$this + 20 >> 2] | 0) / 2 | 0 | 0));
 $2 = Math_fround(HEAPF32[$this + 64 >> 2]);
 $conv9 = ~~Math_fround($2 - Math_fround((HEAP32[$this + 24 >> 2] | 0) / 2 | 0 | 0));
 HEAP32[$agg$tmp10 >> 2] = -1;
 HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$agg$tmp$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
 HEAP32[$agg$tmp$byval_copy + 8 >> 2] = HEAP32[$agg$tmp + 8 >> 2];
 HEAP32[$agg$tmp$byval_copy + 12 >> 2] = HEAP32[$agg$tmp + 12 >> 2];
 HEAP32[$agg$tmp$byval_copy + 16 >> 2] = HEAP32[$agg$tmp + 16 >> 2];
 HEAP8[$tmpcast$byval_copy >> 0] = HEAP8[$agg$tmp10 >> 0] | 0;
 HEAP8[$tmpcast$byval_copy + 1 >> 0] = HEAP8[$agg$tmp10 + 1 >> 0] | 0;
 HEAP8[$tmpcast$byval_copy + 2 >> 0] = HEAP8[$agg$tmp10 + 2 >> 0] | 0;
 HEAP8[$tmpcast$byval_copy + 3 >> 0] = HEAP8[$agg$tmp10 + 3 >> 0] | 0;
 _DrawTexture($agg$tmp$byval_copy, $conv3, $conv9, $tmpcast$byval_copy);
 STACKTOP = sp;
 return;
}

function __ZNSt3__26vectorIN4tson5FrameENS_9allocatorIS2_EEE24__emplace_back_slow_pathIJRKN8nlohmann10basic_jsonINS_3mapES0_NS_12basic_stringIcNS_11char_traitsIcEENS3_IcEEEEbxydS3_NS7_14adl_serializerEEEEEEvDpOT_($this, $__args) {
 $this = $this | 0;
 $__args = $__args | 0;
 var $3 = 0, $__end_ = 0, $__end_$i = 0, $__v = 0, $add = 0, $call$i = 0, $mul$i = 0, $sub$ptr$sub$i$i$i = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $__v = sp;
 $__end_$i = $this + 4 | 0;
 $add = ((HEAP32[$__end_$i >> 2] | 0) - (HEAP32[$this >> 2] | 0) >> 3) + 1 | 0;
 $call$i = __ZNKSt3__26vectorIN4tson5FrameENS_9allocatorIS2_EEE8max_sizeEv($this) | 0;
 if ($call$i >>> 0 < $add >>> 0) __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($this); else {
  $3 = HEAP32[$this >> 2] | 0;
  $sub$ptr$sub$i$i$i = (HEAP32[$this + 8 >> 2] | 0) - $3 | 0;
  $mul$i = $sub$ptr$sub$i$i$i >> 2;
  __ZNSt3__214__split_bufferIN4tson5FrameERNS_9allocatorIS2_EEEC2EmmS5_($__v, $sub$ptr$sub$i$i$i >> 3 >>> 0 < $call$i >>> 1 >>> 0 ? ($mul$i >>> 0 < $add >>> 0 ? $add : $mul$i) : $call$i, (HEAP32[$__end_$i >> 2] | 0) - $3 >> 3, $this + 8 | 0);
  $__end_ = $__v + 8 | 0;
  __ZN4tson5FrameC2ERKN8nlohmann10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS1_14adl_serializerEEE(HEAP32[$__end_ >> 2] | 0, $__args);
  HEAP32[$__end_ >> 2] = (HEAP32[$__end_ >> 2] | 0) + 8;
  __ZNSt3__26vectorIN4tson5FrameENS_9allocatorIS2_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS2_RS4_EE($this, $__v);
  __ZNSt3__214__split_bufferIN4tson5FrameERNS_9allocatorIS2_EEED2Ev($__v);
  STACKTOP = sp;
  return;
 }
}

function _DrawTexture($texture, $posX, $posY, $tint) {
 $texture = $texture | 0;
 $posX = $posX | 0;
 $posY = $posY | 0;
 $tint = $tint | 0;
 var $$compoundliteral = 0, $$compoundliteral$byval_copy = 0, $posX$addr = 0, $posY$addr = 0, $texture$byval_copy = 0, $tint$byval_copy = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64);
 $tint$byval_copy = sp + 48 | 0;
 $$compoundliteral$byval_copy = sp + 40 | 0;
 $texture$byval_copy = sp + 16 | 0;
 $posX$addr = sp + 12 | 0;
 $posY$addr = sp + 8 | 0;
 $$compoundliteral = sp;
 HEAP32[$posX$addr >> 2] = $posX;
 HEAP32[$posY$addr >> 2] = $posY;
 HEAPF32[$$compoundliteral >> 2] = Math_fround(HEAP32[$posX$addr >> 2] | 0);
 HEAPF32[$$compoundliteral + 4 >> 2] = Math_fround(HEAP32[$posY$addr >> 2] | 0);
 HEAP32[$texture$byval_copy >> 2] = HEAP32[$texture >> 2];
 HEAP32[$texture$byval_copy + 4 >> 2] = HEAP32[$texture + 4 >> 2];
 HEAP32[$texture$byval_copy + 8 >> 2] = HEAP32[$texture + 8 >> 2];
 HEAP32[$texture$byval_copy + 12 >> 2] = HEAP32[$texture + 12 >> 2];
 HEAP32[$texture$byval_copy + 16 >> 2] = HEAP32[$texture + 16 >> 2];
 HEAP32[$$compoundliteral$byval_copy >> 2] = HEAP32[$$compoundliteral >> 2];
 HEAP32[$$compoundliteral$byval_copy + 4 >> 2] = HEAP32[$$compoundliteral + 4 >> 2];
 HEAP8[$tint$byval_copy >> 0] = HEAP8[$tint >> 0] | 0;
 HEAP8[$tint$byval_copy + 1 >> 0] = HEAP8[$tint + 1 >> 0] | 0;
 HEAP8[$tint$byval_copy + 2 >> 0] = HEAP8[$tint + 2 >> 0] | 0;
 HEAP8[$tint$byval_copy + 3 >> 0] = HEAP8[$tint + 3 >> 0] | 0;
 _DrawTextureEx($texture$byval_copy, $$compoundliteral$byval_copy, Math_fround(0.0), Math_fround(1.0), $tint$byval_copy);
 STACKTOP = sp;
 return;
}

function ___strchrnul($s, $c) {
 $s = $s | 0;
 $c = $c | 0;
 var $1 = 0, $2 = 0, $4 = 0, $5 = 0, $7 = 0, $8 = 0, $conv1 = 0, $incdec$ptr = 0, $incdec$ptr19 = 0, $mul = 0, $retval$0 = 0, $s$addr$0$lcssa = 0, $s$addr$036 = 0, $s$addr$1 = 0, $w$0$lcssa = 0, $w$032 = 0, $xor = 0;
 $conv1 = $c & 255;
 L1 : do if (!$conv1) $retval$0 = $s + (_strlen($s) | 0) | 0; else {
  if (!($s & 3)) $s$addr$0$lcssa = $s; else {
   $1 = $c & 255;
   $s$addr$036 = $s;
   while (1) {
    $2 = HEAP8[$s$addr$036 >> 0] | 0;
    if ($2 << 24 >> 24 == 0 ? 1 : $2 << 24 >> 24 == $1 << 24 >> 24) {
     $retval$0 = $s$addr$036;
     break L1;
    }
    $incdec$ptr = $s$addr$036 + 1 | 0;
    if (!($incdec$ptr & 3)) {
     $s$addr$0$lcssa = $incdec$ptr;
     break;
    } else $s$addr$036 = $incdec$ptr;
   }
  }
  $mul = Math_imul($conv1, 16843009) | 0;
  $4 = HEAP32[$s$addr$0$lcssa >> 2] | 0;
  L10 : do if (!(($4 & -2139062144 ^ -2139062144) & $4 + -16843009)) {
   $5 = $4;
   $w$032 = $s$addr$0$lcssa;
   while (1) {
    $xor = $5 ^ $mul;
    if (($xor & -2139062144 ^ -2139062144) & $xor + -16843009 | 0) {
     $w$0$lcssa = $w$032;
     break L10;
    }
    $incdec$ptr19 = $w$032 + 4 | 0;
    $5 = HEAP32[$incdec$ptr19 >> 2] | 0;
    if (($5 & -2139062144 ^ -2139062144) & $5 + -16843009 | 0) {
     $w$0$lcssa = $incdec$ptr19;
     break;
    } else $w$032 = $incdec$ptr19;
   }
  } else $w$0$lcssa = $s$addr$0$lcssa; while (0);
  $7 = $c & 255;
  $s$addr$1 = $w$0$lcssa;
  while (1) {
   $8 = HEAP8[$s$addr$1 >> 0] | 0;
   if ($8 << 24 >> 24 == 0 ? 1 : $8 << 24 >> 24 == $7 << 24 >> 24) {
    $retval$0 = $s$addr$1;
    break;
   } else $s$addr$1 = $s$addr$1 + 1 | 0;
  }
 } while (0);
 return $retval$0 | 0;
}

function _MatrixToFloatV($agg$result, $mat) {
 $agg$result = $agg$result | 0;
 $mat = $mat | 0;
 var $buffer = 0, dest = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64);
 $buffer = sp;
 dest = $buffer;
 stop = dest + 64 | 0;
 do {
  HEAP32[dest >> 2] = 0;
  dest = dest + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAPF32[$buffer >> 2] = Math_fround(HEAPF32[$mat >> 2]);
 HEAPF32[$buffer + 4 >> 2] = Math_fround(HEAPF32[$mat + 16 >> 2]);
 HEAPF32[$buffer + 8 >> 2] = Math_fround(HEAPF32[$mat + 32 >> 2]);
 HEAPF32[$buffer + 12 >> 2] = Math_fround(HEAPF32[$mat + 48 >> 2]);
 HEAPF32[$buffer + 16 >> 2] = Math_fround(HEAPF32[$mat + 4 >> 2]);
 HEAPF32[$buffer + 20 >> 2] = Math_fround(HEAPF32[$mat + 20 >> 2]);
 HEAPF32[$buffer + 24 >> 2] = Math_fround(HEAPF32[$mat + 36 >> 2]);
 HEAPF32[$buffer + 28 >> 2] = Math_fround(HEAPF32[$mat + 52 >> 2]);
 HEAPF32[$buffer + 32 >> 2] = Math_fround(HEAPF32[$mat + 8 >> 2]);
 HEAPF32[$buffer + 36 >> 2] = Math_fround(HEAPF32[$mat + 24 >> 2]);
 HEAPF32[$buffer + 40 >> 2] = Math_fround(HEAPF32[$mat + 40 >> 2]);
 HEAPF32[$buffer + 44 >> 2] = Math_fround(HEAPF32[$mat + 56 >> 2]);
 HEAPF32[$buffer + 48 >> 2] = Math_fround(HEAPF32[$mat + 12 >> 2]);
 HEAPF32[$buffer + 52 >> 2] = Math_fround(HEAPF32[$mat + 28 >> 2]);
 HEAPF32[$buffer + 56 >> 2] = Math_fround(HEAPF32[$mat + 44 >> 2]);
 HEAPF32[$buffer + 60 >> 2] = Math_fround(HEAPF32[$mat + 60 >> 2]);
 dest = $agg$result;
 src = $buffer;
 stop = dest + 64 | 0;
 do {
  HEAP32[dest >> 2] = HEAP32[src >> 2];
  dest = dest + 4 | 0;
  src = src + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 STACKTOP = sp;
 return;
}

function __ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv($this, $thrown_type, $adjustedPtr) {
 $this = $this | 0;
 $thrown_type = $thrown_type | 0;
 $adjustedPtr = $adjustedPtr | 0;
 var $1 = 0, $dst_ptr_leading_to_static_ptr = 0, $info = 0, $number_of_dst_type = 0, $path_dst_ptr_to_static_ptr = 0, $retval$0 = 0, $retval$2 = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64);
 $info = sp;
 if (__ZL8is_equalPKSt9type_infoS1_b($this, $thrown_type, 0) | 0) $retval$2 = 1; else if (!$thrown_type) $retval$2 = 0; else {
  $1 = ___dynamic_cast($thrown_type, 15784, 15768, 0) | 0;
  if (!$1) $retval$2 = 0; else {
   HEAP32[$info >> 2] = $1;
   HEAP32[$info + 4 >> 2] = 0;
   HEAP32[$info + 8 >> 2] = $this;
   HEAP32[$info + 12 >> 2] = -1;
   $dst_ptr_leading_to_static_ptr = $info + 16 | 0;
   $path_dst_ptr_to_static_ptr = $info + 24 | 0;
   $number_of_dst_type = $info + 48 | 0;
   dest = $dst_ptr_leading_to_static_ptr;
   stop = dest + 36 | 0;
   do {
    HEAP32[dest >> 2] = 0;
    dest = dest + 4 | 0;
   } while ((dest | 0) < (stop | 0));
   HEAP16[$dst_ptr_leading_to_static_ptr + 36 >> 1] = 0;
   HEAP8[$dst_ptr_leading_to_static_ptr + 38 >> 0] = 0;
   HEAP32[$number_of_dst_type >> 2] = 1;
   FUNCTION_TABLE_viiii[HEAP32[(HEAP32[$1 >> 2] | 0) + 28 >> 2] & 63]($1, $info, HEAP32[$adjustedPtr >> 2] | 0, 1);
   if ((HEAP32[$path_dst_ptr_to_static_ptr >> 2] | 0) == 1) {
    HEAP32[$adjustedPtr >> 2] = HEAP32[$dst_ptr_leading_to_static_ptr >> 2];
    $retval$0 = 1;
   } else $retval$0 = 0;
   $retval$2 = $retval$0;
  }
 }
 STACKTOP = sp;
 return $retval$2 | 0;
}

function __ZZN4tson6Object5parseERKN8nlohmann10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS1_14adl_serializerEEEENKUlSF_E0_clESF_($this, $item) {
 $this = $this | 0;
 $item = $item | 0;
 var $0 = 0, $1 = 0, $__end_$i = 0, $call2 = 0, $call5 = 0, $ref$tmp = 0, $ref$tmp3 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $ref$tmp = sp + 4 | 0;
 $ref$tmp3 = sp;
 $0 = HEAP32[$this >> 2] | 0;
 $call2 = __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE3getIiiLi0EEET0_v(__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEixIKcEERKSB_PT_($item, 23124) | 0) | 0;
 HEAP32[$ref$tmp >> 2] = $call2;
 $call5 = __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE3getIiiLi0EEET0_v(__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEixIKcEERKSB_PT_($item, 23126) | 0) | 0;
 HEAP32[$ref$tmp3 >> 2] = $call5;
 $__end_$i = $0 + 52 | 0;
 $1 = HEAP32[$__end_$i >> 2] | 0;
 if ($1 >>> 0 < (HEAP32[$0 + 56 >> 2] | 0) >>> 0) {
  __ZN4tson7Vector2IiEC2Eii($1, $call2, $call5);
  HEAP32[$__end_$i >> 2] = (HEAP32[$__end_$i >> 2] | 0) + 8;
 } else __ZNSt3__26vectorIN4tson7Vector2IiEENS_9allocatorIS3_EEE24__emplace_back_slow_pathIJiiEEEvDpOT_($0 + 48 | 0, $ref$tmp, $ref$tmp3);
 STACKTOP = sp;
 return;
}

function __ZZN4tson6Object5parseERKN8nlohmann10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS1_14adl_serializerEEEENKUlSF_E_clESF_($this, $item) {
 $this = $this | 0;
 $item = $item | 0;
 var $0 = 0, $1 = 0, $__end_$i = 0, $call2 = 0, $call5 = 0, $ref$tmp = 0, $ref$tmp3 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $ref$tmp = sp + 4 | 0;
 $ref$tmp3 = sp;
 $0 = HEAP32[$this >> 2] | 0;
 $call2 = __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE3getIiiLi0EEET0_v(__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEixIKcEERKSB_PT_($item, 23124) | 0) | 0;
 HEAP32[$ref$tmp >> 2] = $call2;
 $call5 = __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE3getIiiLi0EEET0_v(__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEixIKcEERKSB_PT_($item, 23126) | 0) | 0;
 HEAP32[$ref$tmp3 >> 2] = $call5;
 $__end_$i = $0 + 40 | 0;
 $1 = HEAP32[$__end_$i >> 2] | 0;
 if ($1 >>> 0 < (HEAP32[$0 + 44 >> 2] | 0) >>> 0) {
  __ZN4tson7Vector2IiEC2Eii($1, $call2, $call5);
  HEAP32[$__end_$i >> 2] = (HEAP32[$__end_$i >> 2] | 0) + 8;
 } else __ZNSt3__26vectorIN4tson7Vector2IiEENS_9allocatorIS3_EEE24__emplace_back_slow_pathIJiiEEEvDpOT_($0 + 36 | 0, $ref$tmp, $ref$tmp3);
 STACKTOP = sp;
 return;
}

function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_am_pmERiRS4_S4_RjRKNS_5ctypeIwEE($this, $__h, $__b, $__e, $__err, $__ct) {
 $this = $this | 0;
 $__h = $__h | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__err = $__err | 0;
 $__ct = $__ct | 0;
 var $10 = 0, $2 = 0, $5 = 0, $add$ptr = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call = 0, $cond$i = 0, $cond$i18 = 0, $sub$ptr$sub = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $agg$tmp$byval_copy = sp + 4 | 0;
 $agg$tmp = sp;
 $add$ptr = $this + 8 | 0;
 $call = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$add$ptr >> 2] | 0) + 8 >> 2] & 127]($add$ptr) | 0;
 $2 = HEAP8[$call + 8 + 3 >> 0] | 0;
 if ($2 << 24 >> 24 < 0) $cond$i = HEAP32[$call + 4 >> 2] | 0; else $cond$i = $2 & 255;
 $5 = HEAP8[$call + 20 + 3 >> 0] | 0;
 if ($5 << 24 >> 24 < 0) $cond$i18 = HEAP32[$call + 16 >> 2] | 0; else $cond$i18 = $5 & 255;
 do if (($cond$i | 0) == (0 - $cond$i18 | 0)) HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 4; else {
  HEAP32[$agg$tmp >> 2] = HEAP32[$__e >> 2];
  HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
  $sub$ptr$sub = (__ZNSt3__214__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b, $agg$tmp$byval_copy, $call, $call + 24 | 0, $__ct, $__err, 0) | 0) - $call | 0;
  $10 = HEAP32[$__h >> 2] | 0;
  if (($10 | 0) == 12 & ($sub$ptr$sub | 0) == 0) {
   HEAP32[$__h >> 2] = 0;
   break;
  }
  if (($10 | 0) < 12 & ($sub$ptr$sub | 0) == 12) HEAP32[$__h >> 2] = $10 + 12;
 } while (0);
 STACKTOP = sp;
 return;
}

function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initIPKcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESA_SA_($this, $__first, $__last) {
 $this = $this | 0;
 $__first = $__first | 0;
 $__last = $__last | 0;
 var $1 = 0, $__first$addr$018 = 0, $__p$0 = 0, $__p$1$lcssa = 0, $__p$117 = 0, $and$i$i = 0, $call2$i$i$i = 0, $ref$tmp = 0, $sub$ptr$rhs$cast$i$i = 0, $sub$ptr$sub$i$i = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $sub$ptr$rhs$cast$i$i = $__first;
 $ref$tmp = sp;
 $sub$ptr$sub$i$i = $__last - $sub$ptr$rhs$cast$i$i | 0;
 if ($sub$ptr$sub$i$i >>> 0 > 4294967279) __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($this);
 if ($sub$ptr$sub$i$i >>> 0 < 11) {
  HEAP8[$this + 11 >> 0] = $sub$ptr$sub$i$i;
  $__p$0 = $this;
 } else {
  $and$i$i = $sub$ptr$sub$i$i + 16 & -16;
  $call2$i$i$i = __Znwm($and$i$i) | 0;
  HEAP32[$this >> 2] = $call2$i$i$i;
  HEAP32[$this + 8 >> 2] = $and$i$i | -2147483648;
  HEAP32[$this + 4 >> 2] = $sub$ptr$sub$i$i;
  $__p$0 = $call2$i$i$i;
 }
 if (($__first | 0) == ($__last | 0)) $__p$1$lcssa = $__p$0; else {
  $1 = $__last - $sub$ptr$rhs$cast$i$i | 0;
  $__first$addr$018 = $__first;
  $__p$117 = $__p$0;
  while (1) {
   __ZNSt3__211char_traitsIcE6assignERcRKc($__p$117, $__first$addr$018);
   $__first$addr$018 = $__first$addr$018 + 1 | 0;
   if (($__first$addr$018 | 0) == ($__last | 0)) break; else $__p$117 = $__p$117 + 1 | 0;
  }
  $__p$1$lcssa = $__p$0 + $1 | 0;
 }
 HEAP8[$ref$tmp >> 0] = 0;
 __ZNSt3__211char_traitsIcE6assignERcRKc($__p$1$lcssa, $ref$tmp);
 STACKTOP = sp;
 return;
}

function _stbi__mad4sizes_valid($a, $b, $c, $d, $add) {
 $a = $a | 0;
 $b = $b | 0;
 $c = $c | 0;
 $d = $d | 0;
 $add = $add | 0;
 var $14 = 0, $a$addr = 0, $add$addr = 0, $b$addr = 0, $c$addr = 0, $d$addr = 0, $land$ext = 0, $mul = 0, $mul10 = 0, $mul4 = 0, $mul5 = 0, $mul8 = 0, $mul9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $a$addr = sp + 16 | 0;
 $b$addr = sp + 12 | 0;
 $c$addr = sp + 8 | 0;
 $d$addr = sp + 4 | 0;
 $add$addr = sp;
 HEAP32[$a$addr >> 2] = $a;
 HEAP32[$b$addr >> 2] = $b;
 HEAP32[$c$addr >> 2] = $c;
 HEAP32[$d$addr >> 2] = $d;
 HEAP32[$add$addr >> 2] = $add;
 if (!(_stbi__mul2sizes_valid(HEAP32[$a$addr >> 2] | 0, HEAP32[$b$addr >> 2] | 0) | 0)) {
  $14 = 0;
  $land$ext = $14 & 1;
  STACKTOP = sp;
  return $land$ext | 0;
 }
 $mul = Math_imul(HEAP32[$a$addr >> 2] | 0, HEAP32[$b$addr >> 2] | 0) | 0;
 if (!(_stbi__mul2sizes_valid($mul, HEAP32[$c$addr >> 2] | 0) | 0)) {
  $14 = 0;
  $land$ext = $14 & 1;
  STACKTOP = sp;
  return $land$ext | 0;
 }
 $mul4 = Math_imul(HEAP32[$a$addr >> 2] | 0, HEAP32[$b$addr >> 2] | 0) | 0;
 $mul5 = Math_imul($mul4, HEAP32[$c$addr >> 2] | 0) | 0;
 if (!(_stbi__mul2sizes_valid($mul5, HEAP32[$d$addr >> 2] | 0) | 0)) {
  $14 = 0;
  $land$ext = $14 & 1;
  STACKTOP = sp;
  return $land$ext | 0;
 }
 $mul8 = Math_imul(HEAP32[$a$addr >> 2] | 0, HEAP32[$b$addr >> 2] | 0) | 0;
 $mul9 = Math_imul($mul8, HEAP32[$c$addr >> 2] | 0) | 0;
 $mul10 = Math_imul($mul9, HEAP32[$d$addr >> 2] | 0) | 0;
 $14 = (_stbi__addsizes_valid($mul10, HEAP32[$add$addr >> 2] | 0) | 0) != 0;
 $land$ext = $14 & 1;
 STACKTOP = sp;
 return $land$ext | 0;
}

function __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9__grow_byEmmmmmm($this, $__old_cap, $__delta_cap, $__old_sz, $__n_copy, $__n_del, $__n_add) {
 $this = $this | 0;
 $__old_cap = $__old_cap | 0;
 $__delta_cap = $__delta_cap | 0;
 $__old_sz = $__old_sz | 0;
 $__n_copy = $__n_copy | 0;
 $__n_del = $__n_del | 0;
 $__n_add = $__n_add | 0;
 var $$sroa$speculated = 0, $0 = 0, $add = 0, $add14 = 0, $add1435 = 0, $add33 = 0, $call$i$i$i = 0, $cond$i = 0, $mul = 0, $sub23 = 0;
 if ((1073741807 - $__old_cap | 0) >>> 0 < $__delta_cap >>> 0) __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($this);
 $0 = $this + 8 | 0;
 if ((HEAP8[$0 + 3 >> 0] | 0) < 0) $cond$i = HEAP32[$this >> 2] | 0; else $cond$i = $this;
 if ($__old_cap >>> 0 < 536870887) {
  $add = $__delta_cap + $__old_cap | 0;
  $mul = $__old_cap << 1;
  $$sroa$speculated = $add >>> 0 < $mul >>> 0 ? $mul : $add;
  $add14 = $$sroa$speculated >>> 0 < 2 ? 2 : $$sroa$speculated + 4 & -4;
  if ($add14 >>> 0 > 1073741823) _abort(); else $add1435 = $add14;
 } else $add1435 = 1073741807;
 $call$i$i$i = __Znwm($add1435 << 2) | 0;
 if ($__n_copy | 0) __ZNSt3__211char_traitsIwE4copyEPwPKwm($call$i$i$i, $cond$i, $__n_copy) | 0;
 $sub23 = $__old_sz - $__n_del - $__n_copy | 0;
 if ($sub23 | 0) __ZNSt3__211char_traitsIwE4copyEPwPKwm($call$i$i$i + ($__n_copy << 2) + ($__n_add << 2) | 0, $cond$i + ($__n_copy << 2) + ($__n_del << 2) | 0, $sub23) | 0;
 $add33 = $__old_cap + 1 | 0;
 if (($add33 | 0) != 2) __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm($cond$i, $add33 << 2);
 HEAP32[$this >> 2] = $call$i$i$i;
 HEAP32[$0 >> 2] = $add1435 | -2147483648;
 return;
}

function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_am_pmERiRS4_S4_RjRKNS_5ctypeIcEE($this, $__h, $__b, $__e, $__err, $__ct) {
 $this = $this | 0;
 $__h = $__h | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__err = $__err | 0;
 $__ct = $__ct | 0;
 var $1 = 0, $3 = 0, $8 = 0, $add$ptr = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call = 0, $cond$i = 0, $cond$i19 = 0, $sub$ptr$sub = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $agg$tmp$byval_copy = sp + 4 | 0;
 $agg$tmp = sp;
 $add$ptr = $this + 8 | 0;
 $call = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$add$ptr >> 2] | 0) + 8 >> 2] & 127]($add$ptr) | 0;
 $1 = HEAP8[$call + 11 >> 0] | 0;
 if ($1 << 24 >> 24 < 0) $cond$i = HEAP32[$call + 4 >> 2] | 0; else $cond$i = $1 & 255;
 $3 = HEAP8[$call + 12 + 11 >> 0] | 0;
 if ($3 << 24 >> 24 < 0) $cond$i19 = HEAP32[$call + 16 >> 2] | 0; else $cond$i19 = $3 & 255;
 do if (($cond$i | 0) == (0 - $cond$i19 | 0)) HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 4; else {
  HEAP32[$agg$tmp >> 2] = HEAP32[$__e >> 2];
  HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
  $sub$ptr$sub = (__ZNSt3__214__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b, $agg$tmp$byval_copy, $call, $call + 24 | 0, $__ct, $__err, 0) | 0) - $call | 0;
  $8 = HEAP32[$__h >> 2] | 0;
  if (($8 | 0) == 12 & ($sub$ptr$sub | 0) == 0) {
   HEAP32[$__h >> 2] = 0;
   break;
  }
  if (($8 | 0) < 12 & ($sub$ptr$sub | 0) == 12) HEAP32[$__h >> 2] = $8 + 12;
 } while (0);
 STACKTOP = sp;
 return;
}

function __ZNSt3__29__any_imp13_SmallHandlerINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEE8__handleENS0_7_ActionEPKNS_3anyEPSA_PKSt9type_infoPKv($__act, $__this, $__other, $__info, $__fallback_info) {
 $__act = $__act | 0;
 $__this = $__this | 0;
 $__other = $__other | 0;
 $__info = $__info | 0;
 $__fallback_info = $__fallback_info | 0;
 var $__s$i2$i = 0, $__s$i6 = 0, $retval$0 = 0;
 L1 : do switch ($__act | 0) {
 case 0:
  {
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__this + 4 | 0);
   HEAP32[$__this >> 2] = 0;
   $retval$0 = 0;
   break;
  }
 case 1:
  {
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($__other + 4 | 0, $__this + 4 | 0);
   HEAP32[$__other >> 2] = 26;
   $retval$0 = 0;
   break;
  }
 case 2:
  {
   $__s$i6 = $__this + 4 | 0;
   $__s$i2$i = $__other + 4 | 0;
   HEAP32[$__s$i2$i >> 2] = HEAP32[$__s$i6 >> 2];
   HEAP32[$__s$i2$i + 4 >> 2] = HEAP32[$__s$i6 + 4 >> 2];
   HEAP32[$__s$i2$i + 8 >> 2] = HEAP32[$__s$i6 + 8 >> 2];
   HEAP32[$__s$i6 >> 2] = 0;
   HEAP32[$__s$i6 + 4 >> 2] = 0;
   HEAP32[$__s$i6 + 8 >> 2] = 0;
   HEAP32[$__other >> 2] = 26;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__s$i6);
   HEAP32[$__this >> 2] = 0;
   $retval$0 = 0;
   break;
  }
 case 3:
  {
   if (!$__info) {
    if (($__fallback_info | 0) != 59156) {
     $retval$0 = 0;
     break L1;
    }
   } else if ((HEAP32[$__info + 4 >> 2] | 0) != 22607) {
    $retval$0 = 0;
    break L1;
   }
   $retval$0 = $__this + 4 | 0;
   break;
  }
 case 4:
  {
   $retval$0 = 14984;
   break;
  }
 default:
  {}
 } while (0);
 return $retval$0 | 0;
}

function _TakeScreenshot($fileName) {
 $fileName = $fileName | 0;
 var $call4 = 0, $call6 = 0, $fileName$addr = 0, $image = 0, $image$byval_copy = 0, $imgData = 0, $path = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 576 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(576);
 $image$byval_copy = sp + 552 | 0;
 $vararg_buffer2 = sp + 520 | 0;
 $vararg_buffer = sp + 512 | 0;
 $fileName$addr = sp + 548 | 0;
 $imgData = sp + 544 | 0;
 $image = sp + 524 | 0;
 $path = sp;
 HEAP32[$fileName$addr >> 2] = $fileName;
 HEAP32[$imgData >> 2] = _rlReadScreenPixels(HEAP32[14979] | 0, HEAP32[14980] | 0) | 0;
 HEAP32[$image >> 2] = HEAP32[$imgData >> 2];
 HEAP32[$image + 4 >> 2] = HEAP32[14979];
 HEAP32[$image + 8 >> 2] = HEAP32[14980];
 HEAP32[$image + 12 >> 2] = 1;
 HEAP32[$image + 16 >> 2] = 7;
 _memset($path | 0, 0, 512) | 0;
 _strcpy($path, HEAP32[$fileName$addr >> 2] | 0) | 0;
 HEAP32[$image$byval_copy >> 2] = HEAP32[$image >> 2];
 HEAP32[$image$byval_copy + 4 >> 2] = HEAP32[$image + 4 >> 2];
 HEAP32[$image$byval_copy + 8 >> 2] = HEAP32[$image + 8 >> 2];
 HEAP32[$image$byval_copy + 12 >> 2] = HEAP32[$image + 12 >> 2];
 HEAP32[$image$byval_copy + 16 >> 2] = HEAP32[$image + 16 >> 2];
 _ExportImage($image$byval_copy, $path);
 _free(HEAP32[$imgData >> 2] | 0);
 $call4 = _GetFileName($path) | 0;
 $call6 = _GetFileName($path) | 0;
 HEAP32[$vararg_buffer >> 2] = $call4;
 HEAP32[$vararg_buffer + 4 >> 2] = $call6;
 _emscripten_run_script(_TextFormat(32248, $vararg_buffer) | 0);
 HEAP32[$vararg_buffer2 >> 2] = $path;
 _TraceLog(3, 32382, $vararg_buffer2);
 STACKTOP = sp;
 return;
}

function __ZNSt3__212_GLOBAL__N_19as_stringINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPFiPcmPKczEmEET_T0_SD_PKNSD_10value_typeET1_($agg$result, $s, $a) {
 $agg$result = $agg$result | 0;
 $s = $s | 0;
 $a = $a | 0;
 var $0 = 0, $2 = 0, $__i$0$i$i = 0, $__size_$i$i = 0, $available$0 = 0, $available$2 = 0, $call2 = 0, $cond$i = 0, $cond$i$i = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $vararg_buffer = sp;
 $__size_$i$i = $s + 11 | 0;
 $0 = HEAP8[$__size_$i$i >> 0] | 0;
 if ($0 << 24 >> 24 < 0) $cond$i = HEAP32[$s + 4 >> 2] | 0; else $cond$i = $0 & 255;
 $2 = $0;
 $available$0 = $cond$i;
 while (1) {
  if ($2 << 24 >> 24 < 0) $cond$i$i = HEAP32[$s >> 2] | 0; else $cond$i$i = $s;
  HEAP32[$vararg_buffer >> 2] = $a;
  $call2 = _snprintf($cond$i$i, $available$0 + 1 | 0, 45060, $vararg_buffer) | 0;
  if (($call2 | 0) > -1) if ($call2 >>> 0 > $available$0 >>> 0) $available$2 = $call2; else break; else $available$2 = $available$0 << 1 | 1;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($s, $available$2, 0);
  $2 = HEAP8[$__size_$i$i >> 0] | 0;
  $available$0 = $available$2;
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($s, $call2, 0);
 HEAP32[$agg$result >> 2] = HEAP32[$s >> 2];
 HEAP32[$agg$result + 4 >> 2] = HEAP32[$s + 4 >> 2];
 HEAP32[$agg$result + 8 >> 2] = HEAP32[$s + 8 >> 2];
 $__i$0$i$i = 0;
 while (1) {
  if (($__i$0$i$i | 0) == 3) break;
  HEAP32[$s + ($__i$0$i$i << 2) >> 2] = 0;
  $__i$0$i$i = $__i$0$i$i + 1 | 0;
 }
 STACKTOP = sp;
 return;
}

function __ZNSt3__212_GLOBAL__N_19as_stringINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPFiPcmPKczEiEET_T0_SD_PKNSD_10value_typeET1_($agg$result, $s, $a) {
 $agg$result = $agg$result | 0;
 $s = $s | 0;
 $a = $a | 0;
 var $0 = 0, $2 = 0, $__i$0$i$i = 0, $__size_$i$i = 0, $available$0 = 0, $available$2 = 0, $call2 = 0, $cond$i = 0, $cond$i$i = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $vararg_buffer = sp;
 $__size_$i$i = $s + 11 | 0;
 $0 = HEAP8[$__size_$i$i >> 0] | 0;
 if ($0 << 24 >> 24 < 0) $cond$i = HEAP32[$s + 4 >> 2] | 0; else $cond$i = $0 & 255;
 $2 = $0;
 $available$0 = $cond$i;
 while (1) {
  if ($2 << 24 >> 24 < 0) $cond$i$i = HEAP32[$s >> 2] | 0; else $cond$i$i = $s;
  HEAP32[$vararg_buffer >> 2] = $a;
  $call2 = _snprintf($cond$i$i, $available$0 + 1 | 0, 45057, $vararg_buffer) | 0;
  if (($call2 | 0) > -1) if ($call2 >>> 0 > $available$0 >>> 0) $available$2 = $call2; else break; else $available$2 = $available$0 << 1 | 1;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($s, $available$2, 0);
  $2 = HEAP8[$__size_$i$i >> 0] | 0;
  $available$0 = $available$2;
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($s, $call2, 0);
 HEAP32[$agg$result >> 2] = HEAP32[$s >> 2];
 HEAP32[$agg$result + 4 >> 2] = HEAP32[$s + 4 >> 2];
 HEAP32[$agg$result + 8 >> 2] = HEAP32[$s + 8 >> 2];
 $__i$0$i$i = 0;
 while (1) {
  if (($__i$0$i$i | 0) == 3) break;
  HEAP32[$s + ($__i$0$i$i << 2) >> 2] = 0;
  $__i$0$i$i = $__i$0$i$i + 1 | 0;
 }
 STACKTOP = sp;
 return;
}

function _stbiw__sbgrowf($arr, $increment, $itemsize) {
 $arr = $arr | 0;
 $increment = $increment | 0;
 $itemsize = $itemsize | 0;
 var $23 = 0, $24 = 0, $arr$addr = 0, $cond = 0, $cond7 = 0, $increment$addr = 0, $itemsize$addr = 0, $m = 0, $p = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $arr$addr = sp + 16 | 0;
 $increment$addr = sp + 12 | 0;
 $itemsize$addr = sp + 8 | 0;
 $m = sp + 4 | 0;
 $p = sp;
 HEAP32[$arr$addr >> 2] = $arr;
 HEAP32[$increment$addr >> 2] = $increment;
 HEAP32[$itemsize$addr >> 2] = $itemsize;
 if (HEAP32[HEAP32[$arr$addr >> 2] >> 2] | 0) $cond = (HEAP32[(HEAP32[HEAP32[$arr$addr >> 2] >> 2] | 0) + -8 >> 2] << 1) + (HEAP32[$increment$addr >> 2] | 0) | 0; else $cond = (HEAP32[$increment$addr >> 2] | 0) + 1 | 0;
 HEAP32[$m >> 2] = $cond;
 if (HEAP32[HEAP32[$arr$addr >> 2] >> 2] | 0) $cond7 = (HEAP32[HEAP32[$arr$addr >> 2] >> 2] | 0) + -8 | 0; else $cond7 = 0;
 HEAP32[$p >> 2] = _realloc($cond7, (Math_imul(HEAP32[$itemsize$addr >> 2] | 0, HEAP32[$m >> 2] | 0) | 0) + 8 | 0) | 0;
 if (!(HEAP32[$p >> 2] | 0)) ___assert_fail(34138, 34040, 793, 34140);
 if (!(HEAP32[$p >> 2] | 0)) {
  $23 = HEAP32[$arr$addr >> 2] | 0;
  $24 = HEAP32[$23 >> 2] | 0;
  STACKTOP = sp;
  return $24 | 0;
 }
 if (!(HEAP32[HEAP32[$arr$addr >> 2] >> 2] | 0)) HEAP32[(HEAP32[$p >> 2] | 0) + 4 >> 2] = 0;
 HEAP32[HEAP32[$arr$addr >> 2] >> 2] = (HEAP32[$p >> 2] | 0) + 8;
 HEAP32[(HEAP32[HEAP32[$arr$addr >> 2] >> 2] | 0) + -8 >> 2] = HEAP32[$m >> 2];
 $23 = HEAP32[$arr$addr >> 2] | 0;
 $24 = HEAP32[$23 >> 2] | 0;
 STACKTOP = sp;
 return $24 | 0;
}

function __ZNSt3__214__num_put_base14__format_floatEPcPKcj($__fmtp, $__len, $__flags) {
 $__fmtp = $__fmtp | 0;
 $__len = $__len | 0;
 $__flags = $__flags | 0;
 var $$sink = 0, $0 = 0, $8 = 0, $__fmtp$addr$0 = 0, $__fmtp$addr$1 = 0, $__fmtp$addr$2 = 0, $__fmtp$addr$3 = 0, $__len$addr$0 = 0, $and6 = 0, $and7 = 0, $cmp8 = 0, $specify_precision$0$off0 = 0;
 if (!($__flags & 2048)) $__fmtp$addr$0 = $__fmtp; else {
  HEAP8[$__fmtp >> 0] = 43;
  $__fmtp$addr$0 = $__fmtp + 1 | 0;
 }
 if (!($__flags & 1024)) $__fmtp$addr$1 = $__fmtp$addr$0; else {
  HEAP8[$__fmtp$addr$0 >> 0] = 35;
  $__fmtp$addr$1 = $__fmtp$addr$0 + 1 | 0;
 }
 $and6 = $__flags & 260;
 $and7 = $__flags & 16384;
 $cmp8 = ($and6 | 0) == 260;
 if ($cmp8) {
  $__fmtp$addr$2 = $__fmtp$addr$1;
  $specify_precision$0$off0 = 0;
 } else {
  HEAP8[$__fmtp$addr$1 >> 0] = 46;
  HEAP8[$__fmtp$addr$1 + 1 >> 0] = 42;
  $__fmtp$addr$2 = $__fmtp$addr$1 + 2 | 0;
  $specify_precision$0$off0 = 1;
 }
 $__fmtp$addr$3 = $__fmtp$addr$2;
 $__len$addr$0 = $__len;
 while (1) {
  $0 = HEAP8[$__len$addr$0 >> 0] | 0;
  if (!($0 << 24 >> 24)) break;
  HEAP8[$__fmtp$addr$3 >> 0] = $0;
  $__fmtp$addr$3 = $__fmtp$addr$3 + 1 | 0;
  $__len$addr$0 = $__len$addr$0 + 1 | 0;
 }
 L14 : do switch ($and6 & 511) {
 case 4:
  {
   $$sink = $and7 >>> 9 & 255 ^ 102;
   break;
  }
 case 256:
  {
   $$sink = $and7 >>> 9 & 255 ^ 101;
   break;
  }
 default:
  {
   $8 = $and7 >>> 9 & 255;
   if ($cmp8) {
    $$sink = $8 ^ 97;
    break L14;
   } else {
    $$sink = $8 ^ 103;
    break L14;
   }
  }
 } while (0);
 HEAP8[$__fmtp$addr$3 >> 0] = $$sink;
 return $specify_precision$0$off0 | 0;
}

function __ZNSt3__29__any_imp13_SmallHandlerINS_4__fs10filesystem4pathEE8__handleENS0_7_ActionEPKNS_3anyEPS7_PKSt9type_infoPKv($__act, $__this, $__other, $__info, $__fallback_info) {
 $__act = $__act | 0;
 $__this = $__this | 0;
 $__other = $__other | 0;
 $__info = $__info | 0;
 $__fallback_info = $__fallback_info | 0;
 var $__s$i2$i = 0, $__s$i6 = 0, $retval$0 = 0;
 L1 : do switch ($__act | 0) {
 case 0:
  {
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__this + 4 | 0);
   HEAP32[$__this >> 2] = 0;
   $retval$0 = 0;
   break;
  }
 case 1:
  {
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($__other + 4 | 0, $__this + 4 | 0);
   HEAP32[$__other >> 2] = 22;
   $retval$0 = 0;
   break;
  }
 case 2:
  {
   $__s$i6 = $__this + 4 | 0;
   $__s$i2$i = $__other + 4 | 0;
   HEAP32[$__s$i2$i >> 2] = HEAP32[$__s$i6 >> 2];
   HEAP32[$__s$i2$i + 4 >> 2] = HEAP32[$__s$i6 + 4 >> 2];
   HEAP32[$__s$i2$i + 8 >> 2] = HEAP32[$__s$i6 + 8 >> 2];
   HEAP32[$__s$i6 >> 2] = 0;
   HEAP32[$__s$i6 + 4 >> 2] = 0;
   HEAP32[$__s$i6 + 8 >> 2] = 0;
   HEAP32[$__other >> 2] = 22;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__s$i6);
   HEAP32[$__this >> 2] = 0;
   $retval$0 = 0;
   break;
  }
 case 3:
  {
   if (!$__info) {
    if (($__fallback_info | 0) != 59168) {
     $retval$0 = 0;
     break L1;
    }
   } else if ((HEAP32[$__info + 4 >> 2] | 0) != 22878) {
    $retval$0 = 0;
    break L1;
   }
   $retval$0 = $__this + 4 | 0;
   break;
  }
 case 4:
  {
   $retval$0 = 15048;
   break;
  }
 default:
  {}
 } while (0);
 return $retval$0 | 0;
}

function __ZN8nlohmann6detail5lexerINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE18next_byte_in_rangeESt16initializer_listIiE($this, $ranges) {
 $this = $this | 0;
 $ranges = $ranges | 0;
 var $0 = 0, $2 = 0, $4 = 0, $6 = 0, $add$ptr$i = 0, $current = 0, $range$010 = 0, label = 0;
 label = 0;
 $0 = HEAP32[$ranges + 4 >> 2] | 0;
 switch ($0 | 0) {
 case 6:
 case 4:
 case 2:
  break;
 default:
  ___assert_fail(27727, 22221, 7184, 27790);
 }
 $current = $this + 8 | 0;
 __ZN8nlohmann6detail5lexerINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE3addEi($this, HEAP32[$current >> 2] | 0);
 $2 = HEAP32[$ranges >> 2] | 0;
 $add$ptr$i = $2 + ($0 << 2) | 0;
 $range$010 = $2;
 while (1) {
  __ZN8nlohmann6detail5lexerINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE3getEv($this) | 0;
  $4 = HEAP32[$current >> 2] | 0;
  if ((HEAP32[$range$010 >> 2] | 0) > ($4 | 0)) {
   label = 7;
   break;
  }
  if (($4 | 0) > (HEAP32[$range$010 + 4 >> 2] | 0)) {
   label = 7;
   break;
  }
  __ZN8nlohmann6detail5lexerINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE3addEi($this, $4);
  $range$010 = $range$010 + 8 | 0;
  if (($range$010 | 0) == ($add$ptr$i | 0)) {
   $6 = 1;
   break;
  }
 }
 if ((label | 0) == 7) {
  HEAP32[$this + 52 >> 2] = 27689;
  $6 = 0;
 }
 return $6 | 0;
}

function _stbir__filter_mitchell($x, $s) {
 $x = Math_fround($x);
 $s = Math_fround($s);
 var $3 = f0, $6 = f0, $7 = f0, $9 = f0, $cmp = 0, $mul = f0, $retval = 0, $x$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $retval = sp + 8 | 0;
 $x$addr = sp + 4 | 0;
 HEAPF32[$x$addr >> 2] = $x;
 HEAPF32[sp >> 2] = $s;
 HEAPF32[$x$addr >> 2] = Math_fround(+Math_abs(+(+Math_fround(HEAPF32[$x$addr >> 2]))));
 $cmp = Math_fround(HEAPF32[$x$addr >> 2]) < Math_fround(1.0);
 $3 = Math_fround(HEAPF32[$x$addr >> 2]);
 if ($cmp) {
  $mul = Math_fround($3 * Math_fround(HEAPF32[$x$addr >> 2]));
  HEAPF32[$retval >> 2] = Math_fround(Math_fround(Math_fround($mul * Math_fround(Math_fround(Math_fround(HEAPF32[$x$addr >> 2]) * Math_fround(21.0)) - Math_fround(36.0))) + Math_fround(16.0)) / Math_fround(18.0));
  $9 = Math_fround(HEAPF32[$retval >> 2]);
  STACKTOP = sp;
  return Math_fround($9);
 }
 if ($3 < Math_fround(2.0)) {
  $6 = Math_fround(HEAPF32[$x$addr >> 2]);
  $7 = Math_fround(HEAPF32[$x$addr >> 2]);
  HEAPF32[$retval >> 2] = Math_fround(Math_fround(Math_fround($6 * Math_fround(Math_fround($7 * Math_fround(Math_fround(36.0) - Math_fround(Math_fround(HEAPF32[$x$addr >> 2]) * Math_fround(7.0)))) + Math_fround(-60.0))) + Math_fround(32.0)) / Math_fround(18.0));
  $9 = Math_fround(HEAPF32[$retval >> 2]);
  STACKTOP = sp;
  return Math_fround($9);
 } else {
  HEAPF32[$retval >> 2] = Math_fround(0.0);
  $9 = Math_fround(HEAPF32[$retval >> 2]);
  STACKTOP = sp;
  return Math_fround($9);
 }
 return Math_fround(0.0);
}

function __ZNSt3__227__num_get_unsigned_integralIyEET_PKcS3_Rji($__a, $__a_end, $__err, $__base) {
 $__a = $__a | 0;
 $__a_end = $__a_end | 0;
 $__err = $__err | 0;
 $__base = $__base | 0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $6 = 0, $7 = 0, $__a$addr$0 = 0, $__p2 = 0, $cmp1 = 0, $incdec$ptr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $__p2 = sp;
 do if (($__a | 0) == ($__a_end | 0)) {
  HEAP32[$__err >> 2] = 4;
  $10 = 0;
  $11 = 0;
 } else {
  $cmp1 = (HEAP8[$__a >> 0] | 0) == 45;
  if ($cmp1) {
   $incdec$ptr = $__a + 1 | 0;
   if (($incdec$ptr | 0) == ($__a_end | 0)) {
    HEAP32[$__err >> 2] = 4;
    $10 = 0;
    $11 = 0;
    break;
   } else $__a$addr$0 = $incdec$ptr;
  } else $__a$addr$0 = $__a;
  $1 = HEAP32[(___errno_location() | 0) >> 2] | 0;
  HEAP32[(___errno_location() | 0) >> 2] = 0;
  $2 = _strtoull_l($__a$addr$0, $__p2, $__base, __ZNSt3__26__clocEv() | 0) | 0;
  $3 = getTempRet0() | 0;
  $4 = HEAP32[(___errno_location() | 0) >> 2] | 0;
  if (!$4) HEAP32[(___errno_location() | 0) >> 2] = $1;
  do if ((HEAP32[$__p2 >> 2] | 0) == ($__a_end | 0)) if (($4 | 0) == 68) {
   HEAP32[$__err >> 2] = 4;
   $12 = -1;
   $13 = -1;
   break;
  } else {
   $6 = _i64Subtract(0, 0, $2 | 0, $3 | 0) | 0;
   $7 = getTempRet0() | 0;
   $12 = $cmp1 ? $6 : $2;
   $13 = $cmp1 ? $7 : $3;
   break;
  } else {
   HEAP32[$__err >> 2] = 4;
   $12 = 0;
   $13 = 0;
  } while (0);
  $10 = $13;
  $11 = $12;
 } while (0);
 setTempRet0($10 | 0);
 STACKTOP = sp;
 return $11 | 0;
}

function __ZN4tson5LayerC2ERKN8nlohmann10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS1_14adl_serializerEEE($this, $json) {
 $this = $this | 0;
 $json = $json | 0;
 var $m_offset = 0, $m_typeStr = 0, $ref$tmp$i10 = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $ref$tmp$i10 = sp;
 $m_offset = $this + 124 | 0;
 dest = $this;
 stop = dest + 124 | 0;
 do {
  HEAP32[dest >> 2] = 0;
  dest = dest + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 __ZN4tson7Vector2IfEC2Ev($m_offset);
 HEAPF32[$this + 132 >> 2] = Math_fround(0.0);
 __ZN4tson18PropertyCollectionC2Ev($this + 136 | 0);
 __ZN4tson7Vector2IiEC2Ev($this + 160 | 0);
 __ZN4tson5ColorIhEC2Ev($this + 168 | 0);
 $m_typeStr = $this + 172 | 0;
 HEAP32[$this + 188 >> 2] = 0;
 HEAP32[$this + 192 >> 2] = 0;
 HEAP32[$m_typeStr >> 2] = 0;
 HEAP32[$m_typeStr + 4 >> 2] = 0;
 HEAP32[$m_typeStr + 8 >> 2] = 0;
 HEAP16[$m_typeStr + 12 >> 1] = 0;
 __ZNSt3__26__treeINS_12__value_typeIiPN4tson4TileEEENS_19__map_value_compareIiS5_NS_4lessIiEELb1EEENS_9allocatorIS5_EEEC2ERKS9_($this + 196 | 0, $ref$tmp$i10);
 __ZNSt3__26__treeINS_12__value_typeINS_5tupleIJiiEEEPN4tson4TileEEENS_19__map_value_compareIS3_S7_NS_4lessIS3_EELb1EEENS_9allocatorIS7_EEEC2ERKSB_($this + 208 | 0, $ref$tmp$i10);
 __ZN4tson5Layer5parseERKN8nlohmann10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS1_14adl_serializerEEE($this, $json) | 0;
 STACKTOP = sp;
 return;
}

function _rlTranslatef($x, $y, $z) {
 $x = Math_fround($x);
 $y = Math_fround($y);
 $z = Math_fround($z);
 var $$byval_copy = 0, $0 = f0, $1 = f0, $3 = 0, $4 = 0, $matTranslation = 0, $matTranslation$byval_copy = 0, $tmp = 0, $x$addr = 0, $y$addr = 0, $z$addr = 0, dest = 0, sp = 0, src = 0, stop = 0, CSE$0 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 272 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(272);
 $$byval_copy = sp + 208 | 0;
 $matTranslation$byval_copy = sp + 144 | 0;
 $x$addr = sp + 136 | 0;
 $y$addr = sp + 132 | 0;
 $z$addr = sp + 128 | 0;
 $matTranslation = sp + 64 | 0;
 $tmp = sp;
 HEAPF32[$x$addr >> 2] = $x;
 HEAPF32[$y$addr >> 2] = $y;
 HEAPF32[$z$addr >> 2] = $z;
 $0 = Math_fround(HEAPF32[$x$addr >> 2]);
 $1 = Math_fround(HEAPF32[$y$addr >> 2]);
 _MatrixTranslate($matTranslation, $0, $1, Math_fround(HEAPF32[$z$addr >> 2]));
 CSE$0 = HEAP32[14811] | 0;
 $3 = CSE$0 | 0;
 $4 = CSE$0 | 0;
 dest = $matTranslation$byval_copy;
 src = $matTranslation;
 stop = dest + 64 | 0;
 do {
  HEAP32[dest >> 2] = HEAP32[src >> 2];
  dest = dest + 4 | 0;
  src = src + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$byval_copy;
 src = $4;
 stop = dest + 64 | 0;
 do {
  HEAP32[dest >> 2] = HEAP32[src >> 2];
  dest = dest + 4 | 0;
  src = src + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 _MatrixMultiply($tmp, $matTranslation$byval_copy, $$byval_copy);
 dest = $3;
 src = $tmp;
 stop = dest + 64 | 0;
 do {
  HEAP32[dest >> 2] = HEAP32[src >> 2];
  dest = dest + 4 | 0;
  src = src + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 STACKTOP = sp;
 return;
}

function _stbi__convert_16_to_8($orig, $w, $h, $channels) {
 $orig = $orig | 0;
 $w = $w | 0;
 $h = $h | 0;
 $channels = $channels | 0;
 var $16 = 0, $9 = 0, $channels$addr = 0, $h$addr = 0, $i = 0, $img_len = 0, $mul = 0, $orig$addr = 0, $reduced = 0, $retval = 0, $tobool = 0, $w$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $retval = sp + 28 | 0;
 $orig$addr = sp + 24 | 0;
 $w$addr = sp + 20 | 0;
 $h$addr = sp + 16 | 0;
 $channels$addr = sp + 12 | 0;
 $i = sp + 8 | 0;
 $img_len = sp + 4 | 0;
 $reduced = sp;
 HEAP32[$orig$addr >> 2] = $orig;
 HEAP32[$w$addr >> 2] = $w;
 HEAP32[$h$addr >> 2] = $h;
 HEAP32[$channels$addr >> 2] = $channels;
 $mul = Math_imul(HEAP32[$w$addr >> 2] | 0, HEAP32[$h$addr >> 2] | 0) | 0;
 HEAP32[$img_len >> 2] = Math_imul($mul, HEAP32[$channels$addr >> 2] | 0) | 0;
 HEAP32[$reduced >> 2] = _stbi__malloc(HEAP32[$img_len >> 2] | 0) | 0;
 if (!(HEAP32[$reduced >> 2] | 0)) {
  $tobool = (_stbi__err(32857) | 0) != 0;
  HEAP32[$retval >> 2] = $tobool ? 0 : 0;
  $16 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $16 | 0;
 }
 HEAP32[$i >> 2] = 0;
 while (1) {
  $9 = HEAP32[$orig$addr >> 2] | 0;
  if ((HEAP32[$i >> 2] | 0) >= (HEAP32[$img_len >> 2] | 0)) break;
  HEAP8[(HEAP32[$reduced >> 2] | 0) + (HEAP32[$i >> 2] | 0) >> 0] = (HEAPU16[$9 + (HEAP32[$i >> 2] << 1) >> 1] | 0) >> 8;
  HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
 }
 _free($9);
 HEAP32[$retval >> 2] = HEAP32[$reduced >> 2];
 $16 = HEAP32[$retval >> 2] | 0;
 STACKTOP = sp;
 return $16 | 0;
}

function __ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE4openEPKcj($this, $__s, $__mode) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__mode = $__mode | 0;
 var $__file_ = 0, $__rt$1 = 0, $call3 = 0, $retval$0$i$ph = 0;
 $__file_ = $this + 64 | 0;
 L1 : do if (!(HEAP32[$__file_ >> 2] | 0)) {
  do switch ($__mode & -3 | 0) {
  case 48:
  case 16:
   {
    $retval$0$i$ph = 28365;
    break;
   }
  case 1:
  case 17:
   {
    $retval$0$i$ph = 28367;
    break;
   }
  case 8:
   {
    $retval$0$i$ph = 28369;
    break;
   }
  case 24:
   {
    $retval$0$i$ph = 28371;
    break;
   }
  case 56:
   {
    $retval$0$i$ph = 28374;
    break;
   }
  case 9:
  case 25:
   {
    $retval$0$i$ph = 28377;
    break;
   }
  case 52:
  case 20:
   {
    $retval$0$i$ph = 34090;
    break;
   }
  case 5:
  case 21:
   {
    $retval$0$i$ph = 28380;
    break;
   }
  case 12:
   {
    $retval$0$i$ph = 32752;
    break;
   }
  case 28:
   {
    $retval$0$i$ph = 28383;
    break;
   }
  case 60:
   {
    $retval$0$i$ph = 28387;
    break;
   }
  case 13:
  case 29:
   {
    $retval$0$i$ph = 28391;
    break;
   }
  default:
   {
    $__rt$1 = 0;
    break L1;
   }
  } while (0);
  $call3 = _fopen($__s, $retval$0$i$ph) | 0;
  HEAP32[$__file_ >> 2] = $call3;
  if (!$call3) $__rt$1 = 0; else {
   HEAP32[$this + 88 >> 2] = $__mode;
   if (!($__mode & 2)) $__rt$1 = $this; else if (!(_fseek($call3, 0, 2) | 0)) $__rt$1 = $this; else {
    _fclose(HEAP32[$__file_ >> 2] | 0) | 0;
    HEAP32[$__file_ >> 2] = 0;
    $__rt$1 = 0;
   }
  }
 } else $__rt$1 = 0; while (0);
 return $__rt$1 | 0;
}

function _strcspn($s, $c) {
 $s = $s | 0;
 $c = $c | 0;
 var $0 = 0, $2 = 0, $3 = 0, $6 = 0, $7 = 0, $arrayidx8 = 0, $byteset = 0, $c$addr$019 = 0, $conv14 = 0, $conv6 = 0, $incdec$ptr24 = 0, $s$addr$0$lcssa$sink = 0, $s$addr$016 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $byteset = sp;
 $0 = HEAP8[$c >> 0] | 0;
 L1 : do if (!($0 << 24 >> 24)) label = 3; else if (!(HEAP8[$c + 1 >> 0] | 0)) label = 3; else {
  _memset($byteset | 0, 0, 32) | 0;
  $2 = HEAP8[$c >> 0] | 0;
  if ($2 << 24 >> 24) {
   $3 = $2;
   $c$addr$019 = $c;
   do {
    $conv6 = $3 & 255;
    $arrayidx8 = $byteset + ($conv6 >>> 5 << 2) | 0;
    HEAP32[$arrayidx8 >> 2] = HEAP32[$arrayidx8 >> 2] | 1 << ($conv6 & 31);
    $c$addr$019 = $c$addr$019 + 1 | 0;
    $3 = HEAP8[$c$addr$019 >> 0] | 0;
   } while ($3 << 24 >> 24 != 0);
  }
  $6 = HEAP8[$s >> 0] | 0;
  if (!($6 << 24 >> 24)) $s$addr$0$lcssa$sink = $s; else {
   $7 = $6;
   $s$addr$016 = $s;
   while (1) {
    $conv14 = $7 & 255;
    if (HEAP32[$byteset + ($conv14 >>> 5 << 2) >> 2] & 1 << ($conv14 & 31) | 0) {
     $s$addr$0$lcssa$sink = $s$addr$016;
     break L1;
    }
    $incdec$ptr24 = $s$addr$016 + 1 | 0;
    $7 = HEAP8[$incdec$ptr24 >> 0] | 0;
    if (!($7 << 24 >> 24)) {
     $s$addr$0$lcssa$sink = $incdec$ptr24;
     break;
    } else $s$addr$016 = $incdec$ptr24;
   }
  }
 } while (0);
 if ((label | 0) == 3) $s$addr$0$lcssa$sink = ___strchrnul($s, $0 << 24 >> 24) | 0;
 STACKTOP = sp;
 return $s$addr$0$lcssa$sink - $s | 0;
}

function __ZNSt3__26vectorIN4tson7Vector2IiEENS_9allocatorIS3_EEE24__emplace_back_slow_pathIJiiEEEvDpOT_($this, $__args, $__args1) {
 $this = $this | 0;
 $__args = $__args | 0;
 $__args1 = $__args1 | 0;
 var $3 = 0, $__end_ = 0, $__end_$i = 0, $__v = 0, $add = 0, $call$i = 0, $mul$i = 0, $sub$ptr$sub$i$i$i = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $__v = sp;
 $__end_$i = $this + 4 | 0;
 $add = ((HEAP32[$__end_$i >> 2] | 0) - (HEAP32[$this >> 2] | 0) >> 3) + 1 | 0;
 $call$i = __ZNKSt3__26vectorIN4tson7Vector2IiEENS_9allocatorIS3_EEE8max_sizeEv($this) | 0;
 if ($call$i >>> 0 < $add >>> 0) __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($this); else {
  $3 = HEAP32[$this >> 2] | 0;
  $sub$ptr$sub$i$i$i = (HEAP32[$this + 8 >> 2] | 0) - $3 | 0;
  $mul$i = $sub$ptr$sub$i$i$i >> 2;
  __ZNSt3__214__split_bufferIN4tson7Vector2IiEERNS_9allocatorIS3_EEEC2EmmS6_($__v, $sub$ptr$sub$i$i$i >> 3 >>> 0 < $call$i >>> 1 >>> 0 ? ($mul$i >>> 0 < $add >>> 0 ? $add : $mul$i) : $call$i, (HEAP32[$__end_$i >> 2] | 0) - $3 >> 3, $this + 8 | 0);
  $__end_ = $__v + 8 | 0;
  __ZN4tson7Vector2IiEC2Eii(HEAP32[$__end_ >> 2] | 0, HEAP32[$__args >> 2] | 0, HEAP32[$__args1 >> 2] | 0);
  HEAP32[$__end_ >> 2] = (HEAP32[$__end_ >> 2] | 0) + 8;
  __ZNSt3__26vectorIN4tson7Vector2IiEENS_9allocatorIS3_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($this, $__v);
  __ZNSt3__214__split_bufferIN4tson7Vector2IiEERNS_9allocatorIS3_EEED2Ev($__v);
  STACKTOP = sp;
  return;
 }
}

function _GetPixelDataSize($width, $height, $format) {
 $width = $width | 0;
 $height = $height | 0;
 $format = $format | 0;
 var $bpp = 0, $dataSize = 0, $format$addr = 0, $height$addr = 0, $mul = 0, $width$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $width$addr = sp + 16 | 0;
 $height$addr = sp + 12 | 0;
 $format$addr = sp + 8 | 0;
 $dataSize = sp + 4 | 0;
 $bpp = sp;
 HEAP32[$width$addr >> 2] = $width;
 HEAP32[$height$addr >> 2] = $height;
 HEAP32[$format$addr >> 2] = $format;
 HEAP32[$dataSize >> 2] = 0;
 HEAP32[$bpp >> 2] = 0;
 do switch (HEAP32[$format$addr >> 2] | 0) {
 case 1:
  {
   HEAP32[$bpp >> 2] = 8;
   break;
  }
 case 6:
 case 5:
 case 3:
 case 2:
  {
   HEAP32[$bpp >> 2] = 16;
   break;
  }
 case 7:
  {
   HEAP32[$bpp >> 2] = 32;
   break;
  }
 case 4:
  {
   HEAP32[$bpp >> 2] = 24;
   break;
  }
 case 8:
  {
   HEAP32[$bpp >> 2] = 32;
   break;
  }
 case 9:
  {
   HEAP32[$bpp >> 2] = 96;
   break;
  }
 case 10:
  {
   HEAP32[$bpp >> 2] = 128;
   break;
  }
 case 19:
 case 18:
 case 16:
 case 15:
 case 12:
 case 11:
  {
   HEAP32[$bpp >> 2] = 4;
   break;
  }
 case 20:
 case 17:
 case 14:
 case 13:
  {
   HEAP32[$bpp >> 2] = 8;
   break;
  }
 case 21:
  {
   HEAP32[$bpp >> 2] = 2;
   break;
  }
 default:
  {}
 } while (0);
 $mul = Math_imul(HEAP32[$width$addr >> 2] | 0, HEAP32[$height$addr >> 2] | 0) | 0;
 HEAP32[$dataSize >> 2] = (Math_imul($mul, HEAP32[$bpp >> 2] | 0) | 0) / 8 | 0;
 STACKTOP = sp;
 return HEAP32[$dataSize >> 2] | 0;
}

function _stbir__filter_cubic($x, $s) {
 $x = Math_fround($x);
 $s = Math_fround($s);
 var $3 = f0, $6 = f0, $7 = f0, $9 = f0, $cmp = 0, $mul = f0, $retval = 0, $x$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $retval = sp + 8 | 0;
 $x$addr = sp + 4 | 0;
 HEAPF32[$x$addr >> 2] = $x;
 HEAPF32[sp >> 2] = $s;
 HEAPF32[$x$addr >> 2] = Math_fround(+Math_abs(+(+Math_fround(HEAPF32[$x$addr >> 2]))));
 $cmp = Math_fround(HEAPF32[$x$addr >> 2]) < Math_fround(1.0);
 $3 = Math_fround(HEAPF32[$x$addr >> 2]);
 if ($cmp) {
  $mul = Math_fround($3 * Math_fround(HEAPF32[$x$addr >> 2]));
  HEAPF32[$retval >> 2] = Math_fround(Math_fround(Math_fround($mul * Math_fround(Math_fround(Math_fround(HEAPF32[$x$addr >> 2]) * Math_fround(3.0)) - Math_fround(6.0))) + Math_fround(4.0)) / Math_fround(6.0));
  $9 = Math_fround(HEAPF32[$retval >> 2]);
  STACKTOP = sp;
  return Math_fround($9);
 }
 if ($3 < Math_fround(2.0)) {
  $6 = Math_fround(HEAPF32[$x$addr >> 2]);
  $7 = Math_fround(HEAPF32[$x$addr >> 2]);
  HEAPF32[$retval >> 2] = Math_fround(Math_fround(Math_fround($6 * Math_fround(Math_fround($7 * Math_fround(Math_fround(6.0) - Math_fround(HEAPF32[$x$addr >> 2]))) + Math_fround(-12.0))) + Math_fround(8.0)) / Math_fround(6.0));
  $9 = Math_fround(HEAPF32[$retval >> 2]);
  STACKTOP = sp;
  return Math_fround($9);
 } else {
  HEAPF32[$retval >> 2] = Math_fround(0.0);
  $9 = Math_fround(HEAPF32[$retval >> 2]);
  STACKTOP = sp;
  return Math_fround($9);
 }
 return Math_fround(0.0);
}

function _MatrixTranslate($agg$result, $x, $y, $z) {
 $agg$result = $agg$result | 0;
 $x = Math_fround($x);
 $y = Math_fround($y);
 $z = Math_fround($z);
 var $result = 0, $x$addr = 0, $y$addr = 0, $z$addr = 0, dest = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(80);
 $x$addr = sp + 72 | 0;
 $y$addr = sp + 68 | 0;
 $z$addr = sp + 64 | 0;
 $result = sp;
 HEAPF32[$x$addr >> 2] = $x;
 HEAPF32[$y$addr >> 2] = $y;
 HEAPF32[$z$addr >> 2] = $z;
 HEAPF32[$result >> 2] = Math_fround(1.0);
 HEAPF32[$result + 4 >> 2] = Math_fround(0.0);
 HEAPF32[$result + 8 >> 2] = Math_fround(0.0);
 HEAPF32[$result + 12 >> 2] = Math_fround(HEAPF32[$x$addr >> 2]);
 HEAPF32[$result + 16 >> 2] = Math_fround(0.0);
 HEAPF32[$result + 20 >> 2] = Math_fround(1.0);
 HEAPF32[$result + 24 >> 2] = Math_fround(0.0);
 HEAPF32[$result + 28 >> 2] = Math_fround(HEAPF32[$y$addr >> 2]);
 HEAPF32[$result + 32 >> 2] = Math_fround(0.0);
 HEAPF32[$result + 36 >> 2] = Math_fround(0.0);
 HEAPF32[$result + 40 >> 2] = Math_fround(1.0);
 HEAPF32[$result + 44 >> 2] = Math_fround(HEAPF32[$z$addr >> 2]);
 HEAPF32[$result + 48 >> 2] = Math_fround(0.0);
 HEAPF32[$result + 52 >> 2] = Math_fround(0.0);
 HEAPF32[$result + 56 >> 2] = Math_fround(0.0);
 HEAPF32[$result + 60 >> 2] = Math_fround(1.0);
 dest = $agg$result;
 src = $result;
 stop = dest + 64 | 0;
 do {
  HEAP32[dest >> 2] = HEAP32[src >> 2];
  dest = dest + 4 | 0;
  src = src + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 STACKTOP = sp;
 return;
}

function __ZN8nlohmann6detail28json_sax_dom_callback_parserINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE11parse_errorEmRKSB_RKNS0_9exceptionE($this, $0, $1, $ex) {
 $this = $this | 0;
 $0 = $0 | 0;
 $1 = $1 | 0;
 $ex = $ex | 0;
 var $exception = 0, $exception10 = 0, $exception4 = 0, $exception6 = 0, $exception8 = 0;
 HEAP8[$this + 44 >> 0] = 1;
 if (!(HEAP8[$this + 64 >> 0] | 0)) return 0;
 switch (((HEAP32[$ex + 4 >> 2] | 0) / 100 | 0 | 0) % 100 | 0 | 0) {
 case 1:
  {
   $exception = ___cxa_allocate_exception(20) | 0;
   __ZN8nlohmann6detail11parse_errorC2ERKS1_($exception, $ex);
   ___cxa_throw($exception | 0, 14968, 9);
   break;
  }
 case 4:
  {
   $exception4 = ___cxa_allocate_exception(16) | 0;
   __ZN8nlohmann6detail12out_of_rangeC2ERKS1_($exception4, $ex);
   ___cxa_throw($exception4 | 0, 15080, 9);
   break;
  }
 case 2:
  {
   $exception6 = ___cxa_allocate_exception(16) | 0;
   __ZN8nlohmann6detail16invalid_iteratorC2ERKS1_($exception6, $ex);
   ___cxa_throw($exception6 | 0, 15064, 9);
   break;
  }
 case 3:
  {
   $exception8 = ___cxa_allocate_exception(16) | 0;
   __ZN8nlohmann6detail10type_errorC2ERKS1_($exception8, $ex);
   ___cxa_throw($exception8 | 0, 15016, 9);
   break;
  }
 case 5:
  {
   $exception10 = ___cxa_allocate_exception(16) | 0;
   __ZN8nlohmann6detail11other_errorC2ERKS1_($exception10, $ex);
   ___cxa_throw($exception10 | 0, 15096, 9);
   break;
  }
 default:
  ___assert_fail(44909, 22221, 4686, 23964);
 }
 return 0;
}

function _Vector3Normalize($agg$result, $v) {
 $agg$result = $agg$result | 0;
 $v = $v | 0;
 var $2 = f0, $4 = f0, $6 = f0, $ilength = 0, $length = 0, $result = 0, $v$byval_copy = 0, $y = 0, $z = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $v$byval_copy = sp + 20 | 0;
 $result = sp + 8 | 0;
 $length = sp + 4 | 0;
 $ilength = sp;
 HEAP32[$result >> 2] = HEAP32[$v >> 2];
 HEAP32[$result + 4 >> 2] = HEAP32[$v + 4 >> 2];
 HEAP32[$result + 8 >> 2] = HEAP32[$v + 8 >> 2];
 HEAP32[$v$byval_copy >> 2] = HEAP32[$v >> 2];
 HEAP32[$v$byval_copy + 4 >> 2] = HEAP32[$v + 4 >> 2];
 HEAP32[$v$byval_copy + 8 >> 2] = HEAP32[$v + 8 >> 2];
 HEAPF32[$length >> 2] = Math_fround(_Vector3Length($v$byval_copy));
 if (Math_fround(HEAPF32[$length >> 2]) == Math_fround(0.0)) HEAPF32[$length >> 2] = Math_fround(1.0);
 HEAPF32[$ilength >> 2] = Math_fround(Math_fround(1.0) / Math_fround(HEAPF32[$length >> 2]));
 $2 = Math_fround(HEAPF32[$ilength >> 2]);
 HEAPF32[$result >> 2] = Math_fround(Math_fround(HEAPF32[$result >> 2]) * $2);
 $4 = Math_fround(HEAPF32[$ilength >> 2]);
 $y = $result + 4 | 0;
 HEAPF32[$y >> 2] = Math_fround(Math_fround(HEAPF32[$y >> 2]) * $4);
 $6 = Math_fround(HEAPF32[$ilength >> 2]);
 $z = $result + 8 | 0;
 HEAPF32[$z >> 2] = Math_fround(Math_fround(HEAPF32[$z >> 2]) * $6);
 HEAP32[$agg$result >> 2] = HEAP32[$result >> 2];
 HEAP32[$agg$result + 4 >> 2] = HEAP32[$result + 4 >> 2];
 HEAP32[$agg$result + 8 >> 2] = HEAP32[$result + 8 >> 2];
 STACKTOP = sp;
 return;
}

function __ZZN4tson5Layer8firstObjERKNSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEENKUlRKNS_6ObjectEE_clESC_($this, $obj) {
 $this = $this | 0;
 $obj = $obj | 0;
 var $0 = 0, $1 = 0, $3 = 0, $__lhs_sz$033$i = 0, $__lp$034$i = 0, $__rp$035$i = 0, $call = 0, $cond$i$i = 0, $cond$i$i$i = 0, $conv$i$i$i = 0, $retval$1$i = 0, $tobool$i$i$i = 0, $tobool$i$i16$i = 0;
 $call = __ZNK4tson6Object7getNameEv($obj) | 0;
 $0 = HEAP32[$this >> 2] | 0;
 $1 = HEAP8[$call + 11 >> 0] | 0;
 $tobool$i$i$i = $1 << 24 >> 24 < 0;
 $conv$i$i$i = $1 & 255;
 $cond$i$i = $tobool$i$i$i ? HEAP32[$call + 4 >> 2] | 0 : $conv$i$i$i;
 $3 = HEAP8[$0 + 11 >> 0] | 0;
 $tobool$i$i16$i = $3 << 24 >> 24 < 0;
 L1 : do if (($cond$i$i | 0) == (($tobool$i$i16$i ? HEAP32[$0 + 4 >> 2] | 0 : $3 & 255) | 0)) {
  $cond$i$i$i = $tobool$i$i16$i ? HEAP32[$0 >> 2] | 0 : $0;
  if ($tobool$i$i$i) {
   $retval$1$i = (__ZNSt3__211char_traitsIcE7compareEPKcS3_m(HEAP32[$call >> 2] | 0, $cond$i$i$i, $cond$i$i) | 0) == 0;
   break;
  }
  if (!$cond$i$i) $retval$1$i = 1; else {
   $__lhs_sz$033$i = $conv$i$i$i;
   $__lp$034$i = $call;
   $__rp$035$i = $cond$i$i$i;
   while (1) {
    if ((HEAP8[$__lp$034$i >> 0] | 0) != (HEAP8[$__rp$035$i >> 0] | 0)) {
     $retval$1$i = 0;
     break L1;
    }
    $__lhs_sz$033$i = $__lhs_sz$033$i + -1 | 0;
    if (!$__lhs_sz$033$i) {
     $retval$1$i = 1;
     break;
    } else {
     $__lp$034$i = $__lp$034$i + 1 | 0;
     $__rp$035$i = $__rp$035$i + 1 | 0;
    }
   }
  }
 } else $retval$1$i = 0; while (0);
 return $retval$1$i | 0;
}

function __ZZN4tson3Map8getLayerERKNSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEENKUlRKNS_5LayerEE_clESC_($this, $item) {
 $this = $this | 0;
 $item = $item | 0;
 var $0 = 0, $1 = 0, $3 = 0, $__lhs_sz$033$i = 0, $__lp$034$i = 0, $__rp$035$i = 0, $call = 0, $cond$i$i = 0, $cond$i$i$i = 0, $conv$i$i$i = 0, $retval$1$i = 0, $tobool$i$i$i = 0, $tobool$i$i16$i = 0;
 $call = __ZNK4tson5Layer7getNameEv($item) | 0;
 $0 = HEAP32[$this >> 2] | 0;
 $1 = HEAP8[$call + 11 >> 0] | 0;
 $tobool$i$i$i = $1 << 24 >> 24 < 0;
 $conv$i$i$i = $1 & 255;
 $cond$i$i = $tobool$i$i$i ? HEAP32[$call + 4 >> 2] | 0 : $conv$i$i$i;
 $3 = HEAP8[$0 + 11 >> 0] | 0;
 $tobool$i$i16$i = $3 << 24 >> 24 < 0;
 L1 : do if (($cond$i$i | 0) == (($tobool$i$i16$i ? HEAP32[$0 + 4 >> 2] | 0 : $3 & 255) | 0)) {
  $cond$i$i$i = $tobool$i$i16$i ? HEAP32[$0 >> 2] | 0 : $0;
  if ($tobool$i$i$i) {
   $retval$1$i = (__ZNSt3__211char_traitsIcE7compareEPKcS3_m(HEAP32[$call >> 2] | 0, $cond$i$i$i, $cond$i$i) | 0) == 0;
   break;
  }
  if (!$cond$i$i) $retval$1$i = 1; else {
   $__lhs_sz$033$i = $conv$i$i$i;
   $__lp$034$i = $call;
   $__rp$035$i = $cond$i$i$i;
   while (1) {
    if ((HEAP8[$__lp$034$i >> 0] | 0) != (HEAP8[$__rp$035$i >> 0] | 0)) {
     $retval$1$i = 0;
     break L1;
    }
    $__lhs_sz$033$i = $__lhs_sz$033$i + -1 | 0;
    if (!$__lhs_sz$033$i) {
     $retval$1$i = 1;
     break;
    } else {
     $__lp$034$i = $__lp$034$i + 1 | 0;
     $__rp$035$i = $__rp$035$i + 1 | 0;
    }
   }
  }
 } else $retval$1$i = 0; while (0);
 return $retval$1$i | 0;
}

function __ZN8nlohmann6detail19json_sax_dom_parserINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE11parse_errorEmRKSB_RKNS0_9exceptionE($this, $0, $1, $ex) {
 $this = $this | 0;
 $0 = $0 | 0;
 $1 = $1 | 0;
 $ex = $ex | 0;
 var $exception = 0, $exception10 = 0, $exception4 = 0, $exception6 = 0, $exception8 = 0;
 HEAP8[$this + 20 >> 0] = 1;
 if (!(HEAP8[$this + 21 >> 0] | 0)) return 0;
 switch (((HEAP32[$ex + 4 >> 2] | 0) / 100 | 0 | 0) % 100 | 0 | 0) {
 case 1:
  {
   $exception = ___cxa_allocate_exception(20) | 0;
   __ZN8nlohmann6detail11parse_errorC2ERKS1_($exception, $ex);
   ___cxa_throw($exception | 0, 14968, 9);
   break;
  }
 case 4:
  {
   $exception4 = ___cxa_allocate_exception(16) | 0;
   __ZN8nlohmann6detail12out_of_rangeC2ERKS1_($exception4, $ex);
   ___cxa_throw($exception4 | 0, 15080, 9);
   break;
  }
 case 2:
  {
   $exception6 = ___cxa_allocate_exception(16) | 0;
   __ZN8nlohmann6detail16invalid_iteratorC2ERKS1_($exception6, $ex);
   ___cxa_throw($exception6 | 0, 15064, 9);
   break;
  }
 case 3:
  {
   $exception8 = ___cxa_allocate_exception(16) | 0;
   __ZN8nlohmann6detail10type_errorC2ERKS1_($exception8, $ex);
   ___cxa_throw($exception8 | 0, 15016, 9);
   break;
  }
 case 5:
  {
   $exception10 = ___cxa_allocate_exception(16) | 0;
   __ZN8nlohmann6detail11other_errorC2ERKS1_($exception10, $ex);
   ___cxa_throw($exception10 | 0, 15096, 9);
   break;
  }
 default:
  ___assert_fail(44909, 22221, 4439, 23964);
 }
 return 0;
}

function ___fwritex($s, $l, $f) {
 $s = $s | 0;
 $l = $l | 0;
 $f = $f | 0;
 var $0 = 0, $2 = 0, $3 = 0, $4 = 0, $9 = 0, $call16 = 0, $i$033 = 0, $i$1 = 0, $l$addr$1 = 0, $retval$1 = 0, $s$addr$1 = 0, $sub = 0, $wend = 0, $wpos = 0, label = 0;
 label = 0;
 $wend = $f + 16 | 0;
 $0 = HEAP32[$wend >> 2] | 0;
 if (!$0) if (!(___towrite($f) | 0)) {
  $3 = HEAP32[$wend >> 2] | 0;
  label = 5;
 } else $retval$1 = 0; else {
  $3 = $0;
  label = 5;
 }
 L5 : do if ((label | 0) == 5) {
  $wpos = $f + 20 | 0;
  $2 = HEAP32[$wpos >> 2] | 0;
  $4 = $2;
  if (($3 - $2 | 0) >>> 0 < $l >>> 0) {
   $retval$1 = FUNCTION_TABLE_iiii[HEAP32[$f + 36 >> 2] & 63]($f, $s, $l) | 0;
   break;
  }
  L10 : do if ((HEAP8[$f + 75 >> 0] | 0) < 0 | ($l | 0) == 0) {
   $9 = $4;
   $i$1 = 0;
   $l$addr$1 = $l;
   $s$addr$1 = $s;
  } else {
   $i$033 = $l;
   while (1) {
    $sub = $i$033 + -1 | 0;
    if ((HEAP8[$s + $sub >> 0] | 0) == 10) break;
    if (!$sub) {
     $9 = $4;
     $i$1 = 0;
     $l$addr$1 = $l;
     $s$addr$1 = $s;
     break L10;
    } else $i$033 = $sub;
   }
   $call16 = FUNCTION_TABLE_iiii[HEAP32[$f + 36 >> 2] & 63]($f, $s, $i$033) | 0;
   if ($call16 >>> 0 < $i$033 >>> 0) {
    $retval$1 = $call16;
    break L5;
   }
   $9 = HEAP32[$wpos >> 2] | 0;
   $i$1 = $i$033;
   $l$addr$1 = $l - $i$033 | 0;
   $s$addr$1 = $s + $i$033 | 0;
  } while (0);
  _memcpy($9 | 0, $s$addr$1 | 0, $l$addr$1 | 0) | 0;
  HEAP32[$wpos >> 2] = (HEAP32[$wpos >> 2] | 0) + $l$addr$1;
  $retval$1 = $i$1 + $l$addr$1 | 0;
 } while (0);
 return $retval$1 | 0;
}

function __ZN4tson5Frame5parseERKN8nlohmann10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS1_14adl_serializerEEE($this, $json) {
 $this = $this | 0;
 $json = $json | 0;
 var $allFound$0$off0 = 0, $allFound$1$off0 = 0;
 if (!(__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE5countIRA9_KcEEmOT_($json, 23190) | 0)) $allFound$0$off0 = 0; else {
  HEAP32[$this >> 2] = __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE3getIiiLi0EEET0_v(__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEixIKcEERKSB_PT_($json, 23190) | 0) | 0;
  $allFound$0$off0 = 1;
 }
 if (!(__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE5countIRA7_KcEEmOT_($json, 23199) | 0)) $allFound$1$off0 = 0; else {
  HEAP32[$this + 4 >> 2] = __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE3getIiiLi0EEET0_v(__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEixIKcEERKSB_PT_($json, 23199) | 0) | 0;
  $allFound$1$off0 = $allFound$0$off0;
 }
 return $allFound$1$off0 | 0;
}

function __ZNSt3__26vectorIN4tson9WangColorENS_9allocatorIS2_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS2_RS4_EE($this, $__v) {
 $this = $this | 0;
 $__v = $__v | 0;
 var $$pre$phi11Z2D = 0, $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $3 = 0, $6 = 0, $7 = 0, $8 = 0, $__begin_2 = 0, $__end1$addr$04$i = 0, $__end_ = 0, $__end_6 = 0, $__value_$i$i$i = 0, $__value_$i$i$i6 = 0;
 $0 = HEAP32[$this >> 2] | 0;
 $__end_ = $this + 4 | 0;
 $1 = HEAP32[$__end_ >> 2] | 0;
 $__begin_2 = $__v + 4 | 0;
 if (($1 | 0) == ($0 | 0)) {
  $$pre$phi11Z2D = $__begin_2;
  $$pre$phiZ2D = $this;
  $6 = HEAP32[$__begin_2 >> 2] | 0;
  $7 = $0;
 } else {
  $3 = HEAP32[$__begin_2 >> 2] | 0;
  $__end1$addr$04$i = $1;
  do {
   $__end1$addr$04$i = $__end1$addr$04$i + -24 | 0;
   __ZN4tson9WangColorC2EOS0_($3 + -24 | 0, $__end1$addr$04$i);
   $3 = (HEAP32[$__begin_2 >> 2] | 0) + -24 | 0;
   HEAP32[$__begin_2 >> 2] = $3;
  } while (($__end1$addr$04$i | 0) != ($0 | 0));
  $$pre$phi11Z2D = $__begin_2;
  $$pre$phiZ2D = $this;
  $6 = $3;
  $7 = HEAP32[$this >> 2] | 0;
 }
 HEAP32[$$pre$phiZ2D >> 2] = $6;
 HEAP32[$$pre$phi11Z2D >> 2] = $7;
 $__end_6 = $__v + 8 | 0;
 $8 = HEAP32[$__end_ >> 2] | 0;
 HEAP32[$__end_ >> 2] = HEAP32[$__end_6 >> 2];
 HEAP32[$__end_6 >> 2] = $8;
 $__value_$i$i$i6 = $this + 8 | 0;
 $__value_$i$i$i = $__v + 12 | 0;
 $10 = HEAP32[$__value_$i$i$i6 >> 2] | 0;
 HEAP32[$__value_$i$i$i6 >> 2] = HEAP32[$__value_$i$i$i >> 2];
 HEAP32[$__value_$i$i$i >> 2] = $10;
 HEAP32[$__v >> 2] = HEAP32[$$pre$phi11Z2D >> 2];
 return;
}

function _stbir__filter_catmullrom($x, $s) {
 $x = Math_fround($x);
 $s = Math_fround($s);
 var $3 = f0, $6 = f0, $7 = f0, $9 = f0, $cmp = 0, $mul = f0, $retval = 0, $x$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $retval = sp + 8 | 0;
 $x$addr = sp + 4 | 0;
 HEAPF32[$x$addr >> 2] = $x;
 HEAPF32[sp >> 2] = $s;
 HEAPF32[$x$addr >> 2] = Math_fround(+Math_abs(+(+Math_fround(HEAPF32[$x$addr >> 2]))));
 $cmp = Math_fround(HEAPF32[$x$addr >> 2]) < Math_fround(1.0);
 $3 = Math_fround(HEAPF32[$x$addr >> 2]);
 if ($cmp) {
  $mul = Math_fround($3 * Math_fround(HEAPF32[$x$addr >> 2]));
  HEAPF32[$retval >> 2] = Math_fround(Math_fround(1.0) - Math_fround($mul * Math_fround(Math_fround(2.5) - Math_fround(Math_fround(HEAPF32[$x$addr >> 2]) * Math_fround(1.5)))));
  $9 = Math_fround(HEAPF32[$retval >> 2]);
  STACKTOP = sp;
  return Math_fround($9);
 }
 if ($3 < Math_fround(2.0)) {
  $6 = Math_fround(HEAPF32[$x$addr >> 2]);
  $7 = Math_fround(HEAPF32[$x$addr >> 2]);
  HEAPF32[$retval >> 2] = Math_fround(Math_fround(2.0) - Math_fround($6 * Math_fround(Math_fround($7 * Math_fround(Math_fround(Math_fround(HEAPF32[$x$addr >> 2]) * Math_fround(.5)) - Math_fround(2.5))) + Math_fround(4.0))));
  $9 = Math_fround(HEAPF32[$retval >> 2]);
  STACKTOP = sp;
  return Math_fround($9);
 } else {
  HEAPF32[$retval >> 2] = Math_fround(0.0);
  $9 = Math_fround(HEAPF32[$retval >> 2]);
  STACKTOP = sp;
  return Math_fround($9);
 }
 return Math_fround(0.0);
}

function __ZNSt3__26vectorIN4tson7TilesetENS_9allocatorIS2_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS2_RS4_EE($this, $__v) {
 $this = $this | 0;
 $__v = $__v | 0;
 var $$pre$phi11Z2D = 0, $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $3 = 0, $6 = 0, $7 = 0, $8 = 0, $__begin_2 = 0, $__end1$addr$04$i = 0, $__end_ = 0, $__end_6 = 0, $__value_$i$i$i = 0, $__value_$i$i$i6 = 0;
 $0 = HEAP32[$this >> 2] | 0;
 $__end_ = $this + 4 | 0;
 $1 = HEAP32[$__end_ >> 2] | 0;
 $__begin_2 = $__v + 4 | 0;
 if (($1 | 0) == ($0 | 0)) {
  $$pre$phi11Z2D = $__begin_2;
  $$pre$phiZ2D = $this;
  $6 = HEAP32[$__begin_2 >> 2] | 0;
  $7 = $0;
 } else {
  $3 = HEAP32[$__begin_2 >> 2] | 0;
  $__end1$addr$04$i = $1;
  do {
   $__end1$addr$04$i = $__end1$addr$04$i + -164 | 0;
   __ZN4tson7TilesetC2EOS0_($3 + -164 | 0, $__end1$addr$04$i);
   $3 = (HEAP32[$__begin_2 >> 2] | 0) + -164 | 0;
   HEAP32[$__begin_2 >> 2] = $3;
  } while (($__end1$addr$04$i | 0) != ($0 | 0));
  $$pre$phi11Z2D = $__begin_2;
  $$pre$phiZ2D = $this;
  $6 = $3;
  $7 = HEAP32[$this >> 2] | 0;
 }
 HEAP32[$$pre$phiZ2D >> 2] = $6;
 HEAP32[$$pre$phi11Z2D >> 2] = $7;
 $__end_6 = $__v + 8 | 0;
 $8 = HEAP32[$__end_ >> 2] | 0;
 HEAP32[$__end_ >> 2] = HEAP32[$__end_6 >> 2];
 HEAP32[$__end_6 >> 2] = $8;
 $__value_$i$i$i6 = $this + 8 | 0;
 $__value_$i$i$i = $__v + 12 | 0;
 $10 = HEAP32[$__value_$i$i$i6 >> 2] | 0;
 HEAP32[$__value_$i$i$i6 >> 2] = HEAP32[$__value_$i$i$i >> 2];
 HEAP32[$__value_$i$i$i >> 2] = $10;
 HEAP32[$__v >> 2] = HEAP32[$$pre$phi11Z2D >> 2];
 return;
}

function __ZNSt3__26vectorIN4tson8WangTileENS_9allocatorIS2_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS2_RS4_EE($this, $__v) {
 $this = $this | 0;
 $__v = $__v | 0;
 var $$pre$phi11Z2D = 0, $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $3 = 0, $6 = 0, $7 = 0, $8 = 0, $__begin_2 = 0, $__end1$addr$04$i = 0, $__end_ = 0, $__end_6 = 0, $__value_$i$i$i = 0, $__value_$i$i$i6 = 0;
 $0 = HEAP32[$this >> 2] | 0;
 $__end_ = $this + 4 | 0;
 $1 = HEAP32[$__end_ >> 2] | 0;
 $__begin_2 = $__v + 4 | 0;
 if (($1 | 0) == ($0 | 0)) {
  $$pre$phi11Z2D = $__begin_2;
  $$pre$phiZ2D = $this;
  $6 = HEAP32[$__begin_2 >> 2] | 0;
  $7 = $0;
 } else {
  $3 = HEAP32[$__begin_2 >> 2] | 0;
  $__end1$addr$04$i = $1;
  do {
   $__end1$addr$04$i = $__end1$addr$04$i + -24 | 0;
   __ZN4tson8WangTileC2EOS0_($3 + -24 | 0, $__end1$addr$04$i);
   $3 = (HEAP32[$__begin_2 >> 2] | 0) + -24 | 0;
   HEAP32[$__begin_2 >> 2] = $3;
  } while (($__end1$addr$04$i | 0) != ($0 | 0));
  $$pre$phi11Z2D = $__begin_2;
  $$pre$phiZ2D = $this;
  $6 = $3;
  $7 = HEAP32[$this >> 2] | 0;
 }
 HEAP32[$$pre$phiZ2D >> 2] = $6;
 HEAP32[$$pre$phi11Z2D >> 2] = $7;
 $__end_6 = $__v + 8 | 0;
 $8 = HEAP32[$__end_ >> 2] | 0;
 HEAP32[$__end_ >> 2] = HEAP32[$__end_6 >> 2];
 HEAP32[$__end_6 >> 2] = $8;
 $__value_$i$i$i6 = $this + 8 | 0;
 $__value_$i$i$i = $__v + 12 | 0;
 $10 = HEAP32[$__value_$i$i$i6 >> 2] | 0;
 HEAP32[$__value_$i$i$i6 >> 2] = HEAP32[$__value_$i$i$i >> 2];
 HEAP32[$__value_$i$i$i >> 2] = $10;
 HEAP32[$__v >> 2] = HEAP32[$$pre$phi11Z2D >> 2];
 return;
}

function __ZNSt3__26vectorIN4tson6ObjectENS_9allocatorIS2_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS2_RS4_EE($this, $__v) {
 $this = $this | 0;
 $__v = $__v | 0;
 var $$pre$phi11Z2D = 0, $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $3 = 0, $6 = 0, $7 = 0, $8 = 0, $__begin_2 = 0, $__end1$addr$04$i = 0, $__end_ = 0, $__end_6 = 0, $__value_$i$i$i = 0, $__value_$i$i$i6 = 0;
 $0 = HEAP32[$this >> 2] | 0;
 $__end_ = $this + 4 | 0;
 $1 = HEAP32[$__end_ >> 2] | 0;
 $__begin_2 = $__v + 4 | 0;
 if (($1 | 0) == ($0 | 0)) {
  $$pre$phi11Z2D = $__begin_2;
  $$pre$phiZ2D = $this;
  $6 = HEAP32[$__begin_2 >> 2] | 0;
  $7 = $0;
 } else {
  $3 = HEAP32[$__begin_2 >> 2] | 0;
  $__end1$addr$04$i = $1;
  do {
   $__end1$addr$04$i = $__end1$addr$04$i + -140 | 0;
   __ZN4tson6ObjectC2EOS0_($3 + -140 | 0, $__end1$addr$04$i);
   $3 = (HEAP32[$__begin_2 >> 2] | 0) + -140 | 0;
   HEAP32[$__begin_2 >> 2] = $3;
  } while (($__end1$addr$04$i | 0) != ($0 | 0));
  $$pre$phi11Z2D = $__begin_2;
  $$pre$phiZ2D = $this;
  $6 = $3;
  $7 = HEAP32[$this >> 2] | 0;
 }
 HEAP32[$$pre$phiZ2D >> 2] = $6;
 HEAP32[$$pre$phi11Z2D >> 2] = $7;
 $__end_6 = $__v + 8 | 0;
 $8 = HEAP32[$__end_ >> 2] | 0;
 HEAP32[$__end_ >> 2] = HEAP32[$__end_6 >> 2];
 HEAP32[$__end_6 >> 2] = $8;
 $__value_$i$i$i6 = $this + 8 | 0;
 $__value_$i$i$i = $__v + 12 | 0;
 $10 = HEAP32[$__value_$i$i$i6 >> 2] | 0;
 HEAP32[$__value_$i$i$i6 >> 2] = HEAP32[$__value_$i$i$i >> 2];
 HEAP32[$__value_$i$i$i >> 2] = $10;
 HEAP32[$__v >> 2] = HEAP32[$$pre$phi11Z2D >> 2];
 return;
}

function __ZNSt3__26vectorIN4tson7WangSetENS_9allocatorIS2_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS2_RS4_EE($this, $__v) {
 $this = $this | 0;
 $__v = $__v | 0;
 var $$pre$phi11Z2D = 0, $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $3 = 0, $6 = 0, $7 = 0, $8 = 0, $__begin_2 = 0, $__end1$addr$04$i = 0, $__end_ = 0, $__end_6 = 0, $__value_$i$i$i = 0, $__value_$i$i$i6 = 0;
 $0 = HEAP32[$this >> 2] | 0;
 $__end_ = $this + 4 | 0;
 $1 = HEAP32[$__end_ >> 2] | 0;
 $__begin_2 = $__v + 4 | 0;
 if (($1 | 0) == ($0 | 0)) {
  $$pre$phi11Z2D = $__begin_2;
  $$pre$phiZ2D = $this;
  $6 = HEAP32[$__begin_2 >> 2] | 0;
  $7 = $0;
 } else {
  $3 = HEAP32[$__begin_2 >> 2] | 0;
  $__end1$addr$04$i = $1;
  do {
   $__end1$addr$04$i = $__end1$addr$04$i + -76 | 0;
   __ZN4tson7WangSetC2EOS0_($3 + -76 | 0, $__end1$addr$04$i);
   $3 = (HEAP32[$__begin_2 >> 2] | 0) + -76 | 0;
   HEAP32[$__begin_2 >> 2] = $3;
  } while (($__end1$addr$04$i | 0) != ($0 | 0));
  $$pre$phi11Z2D = $__begin_2;
  $$pre$phiZ2D = $this;
  $6 = $3;
  $7 = HEAP32[$this >> 2] | 0;
 }
 HEAP32[$$pre$phiZ2D >> 2] = $6;
 HEAP32[$$pre$phi11Z2D >> 2] = $7;
 $__end_6 = $__v + 8 | 0;
 $8 = HEAP32[$__end_ >> 2] | 0;
 HEAP32[$__end_ >> 2] = HEAP32[$__end_6 >> 2];
 HEAP32[$__end_6 >> 2] = $8;
 $__value_$i$i$i6 = $this + 8 | 0;
 $__value_$i$i$i = $__v + 12 | 0;
 $10 = HEAP32[$__value_$i$i$i6 >> 2] | 0;
 HEAP32[$__value_$i$i$i6 >> 2] = HEAP32[$__value_$i$i$i >> 2];
 HEAP32[$__value_$i$i$i >> 2] = $10;
 HEAP32[$__v >> 2] = HEAP32[$$pre$phi11Z2D >> 2];
 return;
}

function __ZNSt3__26vectorIN4tson7TerrainENS_9allocatorIS2_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS2_RS4_EE($this, $__v) {
 $this = $this | 0;
 $__v = $__v | 0;
 var $$pre$phi11Z2D = 0, $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $3 = 0, $6 = 0, $7 = 0, $8 = 0, $__begin_2 = 0, $__end1$addr$04$i = 0, $__end_ = 0, $__end_6 = 0, $__value_$i$i$i = 0, $__value_$i$i$i6 = 0;
 $0 = HEAP32[$this >> 2] | 0;
 $__end_ = $this + 4 | 0;
 $1 = HEAP32[$__end_ >> 2] | 0;
 $__begin_2 = $__v + 4 | 0;
 if (($1 | 0) == ($0 | 0)) {
  $$pre$phi11Z2D = $__begin_2;
  $$pre$phiZ2D = $this;
  $6 = HEAP32[$__begin_2 >> 2] | 0;
  $7 = $0;
 } else {
  $3 = HEAP32[$__begin_2 >> 2] | 0;
  $__end1$addr$04$i = $1;
  do {
   $__end1$addr$04$i = $__end1$addr$04$i + -40 | 0;
   __ZN4tson7TerrainC2EOS0_($3 + -40 | 0, $__end1$addr$04$i);
   $3 = (HEAP32[$__begin_2 >> 2] | 0) + -40 | 0;
   HEAP32[$__begin_2 >> 2] = $3;
  } while (($__end1$addr$04$i | 0) != ($0 | 0));
  $$pre$phi11Z2D = $__begin_2;
  $$pre$phiZ2D = $this;
  $6 = $3;
  $7 = HEAP32[$this >> 2] | 0;
 }
 HEAP32[$$pre$phiZ2D >> 2] = $6;
 HEAP32[$$pre$phi11Z2D >> 2] = $7;
 $__end_6 = $__v + 8 | 0;
 $8 = HEAP32[$__end_ >> 2] | 0;
 HEAP32[$__end_ >> 2] = HEAP32[$__end_6 >> 2];
 HEAP32[$__end_6 >> 2] = $8;
 $__value_$i$i$i6 = $this + 8 | 0;
 $__value_$i$i$i = $__v + 12 | 0;
 $10 = HEAP32[$__value_$i$i$i6 >> 2] | 0;
 HEAP32[$__value_$i$i$i6 >> 2] = HEAP32[$__value_$i$i$i >> 2];
 HEAP32[$__value_$i$i$i >> 2] = $10;
 HEAP32[$__v >> 2] = HEAP32[$$pre$phi11Z2D >> 2];
 return;
}

function __ZNSt3__26vectorIN4tson5LayerENS_9allocatorIS2_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS2_RS4_EE($this, $__v) {
 $this = $this | 0;
 $__v = $__v | 0;
 var $$pre$phi11Z2D = 0, $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $3 = 0, $6 = 0, $7 = 0, $8 = 0, $__begin_2 = 0, $__end1$addr$04$i = 0, $__end_ = 0, $__end_6 = 0, $__value_$i$i$i = 0, $__value_$i$i$i6 = 0;
 $0 = HEAP32[$this >> 2] | 0;
 $__end_ = $this + 4 | 0;
 $1 = HEAP32[$__end_ >> 2] | 0;
 $__begin_2 = $__v + 4 | 0;
 if (($1 | 0) == ($0 | 0)) {
  $$pre$phi11Z2D = $__begin_2;
  $$pre$phiZ2D = $this;
  $6 = HEAP32[$__begin_2 >> 2] | 0;
  $7 = $0;
 } else {
  $3 = HEAP32[$__begin_2 >> 2] | 0;
  $__end1$addr$04$i = $1;
  do {
   $__end1$addr$04$i = $__end1$addr$04$i + -220 | 0;
   __ZN4tson5LayerC2EOS0_($3 + -220 | 0, $__end1$addr$04$i);
   $3 = (HEAP32[$__begin_2 >> 2] | 0) + -220 | 0;
   HEAP32[$__begin_2 >> 2] = $3;
  } while (($__end1$addr$04$i | 0) != ($0 | 0));
  $$pre$phi11Z2D = $__begin_2;
  $$pre$phiZ2D = $this;
  $6 = $3;
  $7 = HEAP32[$this >> 2] | 0;
 }
 HEAP32[$$pre$phiZ2D >> 2] = $6;
 HEAP32[$$pre$phi11Z2D >> 2] = $7;
 $__end_6 = $__v + 8 | 0;
 $8 = HEAP32[$__end_ >> 2] | 0;
 HEAP32[$__end_ >> 2] = HEAP32[$__end_6 >> 2];
 HEAP32[$__end_6 >> 2] = $8;
 $__value_$i$i$i6 = $this + 8 | 0;
 $__value_$i$i$i = $__v + 12 | 0;
 $10 = HEAP32[$__value_$i$i$i6 >> 2] | 0;
 HEAP32[$__value_$i$i$i6 >> 2] = HEAP32[$__value_$i$i$i >> 2];
 HEAP32[$__value_$i$i$i >> 2] = $10;
 HEAP32[$__v >> 2] = HEAP32[$$pre$phi11Z2D >> 2];
 return;
}

function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm($this, $__b, $__e, $__iob, $__err, $__tm) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__tm = $__tm | 0;
 var $4 = 0, $add$ptr = 0, $add$ptr6 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $agg$tmp2 = 0, $agg$tmp2$byval_copy = 0, $call = 0, $call7 = 0, $cond$i$i1016 = 0, $tobool$i$i$i = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $agg$tmp2$byval_copy = sp + 12 | 0;
 $agg$tmp$byval_copy = sp + 8 | 0;
 $agg$tmp = sp + 4 | 0;
 $agg$tmp2 = sp;
 $add$ptr = $this + 8 | 0;
 $call = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$add$ptr >> 2] | 0) + 20 >> 2] & 127]($add$ptr) | 0;
 HEAP32[$agg$tmp >> 2] = HEAP32[$__b >> 2];
 HEAP32[$agg$tmp2 >> 2] = HEAP32[$__e >> 2];
 $4 = HEAP8[$call + 8 + 3 >> 0] | 0;
 $tobool$i$i$i = $4 << 24 >> 24 < 0;
 $cond$i$i1016 = $tobool$i$i$i ? HEAP32[$call >> 2] | 0 : $call;
 $add$ptr6 = $cond$i$i1016 + (($tobool$i$i$i ? HEAP32[$call + 4 >> 2] | 0 : $4 & 255) << 2) | 0;
 HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$agg$tmp2$byval_copy >> 2] = HEAP32[$agg$tmp2 >> 2];
 $call7 = __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($this, $agg$tmp$byval_copy, $agg$tmp2$byval_copy, $__iob, $__err, $__tm, $cond$i$i1016, $add$ptr6) | 0;
 STACKTOP = sp;
 return $call7 | 0;
}

function __ZNSt3__26vectorIN4tson4TileENS_9allocatorIS2_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS2_RS4_EE($this, $__v) {
 $this = $this | 0;
 $__v = $__v | 0;
 var $$pre$phi11Z2D = 0, $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $3 = 0, $6 = 0, $7 = 0, $8 = 0, $__begin_2 = 0, $__end1$addr$04$i = 0, $__end_ = 0, $__end_6 = 0, $__value_$i$i$i = 0, $__value_$i$i$i6 = 0;
 $0 = HEAP32[$this >> 2] | 0;
 $__end_ = $this + 4 | 0;
 $1 = HEAP32[$__end_ >> 2] | 0;
 $__begin_2 = $__v + 4 | 0;
 if (($1 | 0) == ($0 | 0)) {
  $$pre$phi11Z2D = $__begin_2;
  $$pre$phiZ2D = $this;
  $6 = HEAP32[$__begin_2 >> 2] | 0;
  $7 = $0;
 } else {
  $3 = HEAP32[$__begin_2 >> 2] | 0;
  $__end1$addr$04$i = $1;
  do {
   $__end1$addr$04$i = $__end1$addr$04$i + -304 | 0;
   __ZN4tson4TileC2EOS0_($3 + -304 | 0, $__end1$addr$04$i);
   $3 = (HEAP32[$__begin_2 >> 2] | 0) + -304 | 0;
   HEAP32[$__begin_2 >> 2] = $3;
  } while (($__end1$addr$04$i | 0) != ($0 | 0));
  $$pre$phi11Z2D = $__begin_2;
  $$pre$phiZ2D = $this;
  $6 = $3;
  $7 = HEAP32[$this >> 2] | 0;
 }
 HEAP32[$$pre$phiZ2D >> 2] = $6;
 HEAP32[$$pre$phi11Z2D >> 2] = $7;
 $__end_6 = $__v + 8 | 0;
 $8 = HEAP32[$__end_ >> 2] | 0;
 HEAP32[$__end_ >> 2] = HEAP32[$__end_6 >> 2];
 HEAP32[$__end_6 >> 2] = $8;
 $__value_$i$i$i6 = $this + 8 | 0;
 $__value_$i$i$i = $__v + 12 | 0;
 $10 = HEAP32[$__value_$i$i$i6 >> 2] | 0;
 HEAP32[$__value_$i$i$i6 >> 2] = HEAP32[$__value_$i$i$i >> 2];
 HEAP32[$__value_$i$i$i >> 2] = $10;
 HEAP32[$__v >> 2] = HEAP32[$$pre$phi11Z2D >> 2];
 return;
}

function __ZNSt3__26vectorIN4tson5ChunkENS_9allocatorIS2_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS2_RS4_EE($this, $__v) {
 $this = $this | 0;
 $__v = $__v | 0;
 var $$pre$phi11Z2D = 0, $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $3 = 0, $6 = 0, $7 = 0, $8 = 0, $__begin_2 = 0, $__end1$addr$04$i = 0, $__end_ = 0, $__end_6 = 0, $__value_$i$i$i = 0, $__value_$i$i$i6 = 0;
 $0 = HEAP32[$this >> 2] | 0;
 $__end_ = $this + 4 | 0;
 $1 = HEAP32[$__end_ >> 2] | 0;
 $__begin_2 = $__v + 4 | 0;
 if (($1 | 0) == ($0 | 0)) {
  $$pre$phi11Z2D = $__begin_2;
  $$pre$phiZ2D = $this;
  $6 = HEAP32[$__begin_2 >> 2] | 0;
  $7 = $0;
 } else {
  $3 = HEAP32[$__begin_2 >> 2] | 0;
  $__end1$addr$04$i = $1;
  do {
   $__end1$addr$04$i = $__end1$addr$04$i + -40 | 0;
   __ZN4tson5ChunkC2EOS0_($3 + -40 | 0, $__end1$addr$04$i);
   $3 = (HEAP32[$__begin_2 >> 2] | 0) + -40 | 0;
   HEAP32[$__begin_2 >> 2] = $3;
  } while (($__end1$addr$04$i | 0) != ($0 | 0));
  $$pre$phi11Z2D = $__begin_2;
  $$pre$phiZ2D = $this;
  $6 = $3;
  $7 = HEAP32[$this >> 2] | 0;
 }
 HEAP32[$$pre$phiZ2D >> 2] = $6;
 HEAP32[$$pre$phi11Z2D >> 2] = $7;
 $__end_6 = $__v + 8 | 0;
 $8 = HEAP32[$__end_ >> 2] | 0;
 HEAP32[$__end_ >> 2] = HEAP32[$__end_6 >> 2];
 HEAP32[$__end_6 >> 2] = $8;
 $__value_$i$i$i6 = $this + 8 | 0;
 $__value_$i$i$i = $__v + 12 | 0;
 $10 = HEAP32[$__value_$i$i$i6 >> 2] | 0;
 HEAP32[$__value_$i$i$i6 >> 2] = HEAP32[$__value_$i$i$i >> 2];
 HEAP32[$__value_$i$i$i >> 2] = $10;
 HEAP32[$__v >> 2] = HEAP32[$$pre$phi11Z2D >> 2];
 return;
}

function __ZNSt3__227__num_get_unsigned_integralItEET_PKcS3_Rji($__a, $__a_end, $__err, $__base) {
 $__a = $__a | 0;
 $__a_end = $__a_end | 0;
 $__err = $__err | 0;
 $__base = $__base | 0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $__a$addr$0 = 0, $__p2 = 0, $cmp1 = 0, $incdec$ptr = 0, $retval$0 = 0, $retval$2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $__p2 = sp;
 do if (($__a | 0) == ($__a_end | 0)) {
  HEAP32[$__err >> 2] = 4;
  $retval$2 = 0;
 } else {
  $cmp1 = (HEAP8[$__a >> 0] | 0) == 45;
  if ($cmp1) {
   $incdec$ptr = $__a + 1 | 0;
   if (($incdec$ptr | 0) == ($__a_end | 0)) {
    HEAP32[$__err >> 2] = 4;
    $retval$2 = 0;
    break;
   } else $__a$addr$0 = $incdec$ptr;
  } else $__a$addr$0 = $__a;
  $1 = HEAP32[(___errno_location() | 0) >> 2] | 0;
  HEAP32[(___errno_location() | 0) >> 2] = 0;
  $2 = _strtoull_l($__a$addr$0, $__p2, $__base, __ZNSt3__26__clocEv() | 0) | 0;
  $3 = getTempRet0() | 0;
  $4 = HEAP32[(___errno_location() | 0) >> 2] | 0;
  if (!$4) HEAP32[(___errno_location() | 0) >> 2] = $1;
  do if ((HEAP32[$__p2 >> 2] | 0) == ($__a_end | 0)) {
   if ($3 >>> 0 > 0 | ($3 | 0) == 0 & $2 >>> 0 > 65535 | ($4 | 0) == 68) {
    HEAP32[$__err >> 2] = 4;
    $retval$0 = -1;
    break;
   }
   if ($cmp1) $retval$0 = 0 - $2 & 65535; else $retval$0 = $2 & 65535;
  } else {
   HEAP32[$__err >> 2] = 4;
   $retval$0 = 0;
  } while (0);
  $retval$2 = $retval$0;
 } while (0);
 STACKTOP = sp;
 return $retval$2 | 0;
}

function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEmmmmmm($this, $__old_cap, $__delta_cap, $__old_sz, $__n_copy, $__n_del, $__n_add) {
 $this = $this | 0;
 $__old_cap = $__old_cap | 0;
 $__delta_cap = $__delta_cap | 0;
 $__old_sz = $__old_sz | 0;
 $__n_copy = $__n_copy | 0;
 $__n_del = $__n_del | 0;
 $__n_add = $__n_add | 0;
 var $$sroa$speculated = 0, $add = 0, $add33 = 0, $call$i$i$i = 0, $cond$i = 0, $cond30 = 0, $mul = 0, $sub23 = 0;
 if ((-17 - $__old_cap | 0) >>> 0 < $__delta_cap >>> 0) __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($this);
 if ((HEAP8[$this + 11 >> 0] | 0) < 0) $cond$i = HEAP32[$this >> 2] | 0; else $cond$i = $this;
 if ($__old_cap >>> 0 < 2147483623) {
  $add = $__delta_cap + $__old_cap | 0;
  $mul = $__old_cap << 1;
  $$sroa$speculated = $add >>> 0 < $mul >>> 0 ? $mul : $add;
  $cond30 = $$sroa$speculated >>> 0 < 11 ? 11 : $$sroa$speculated + 16 & -16;
 } else $cond30 = -17;
 $call$i$i$i = __Znwm($cond30) | 0;
 if ($__n_copy | 0) __ZNSt3__211char_traitsIcE4copyEPcPKcm($call$i$i$i, $cond$i, $__n_copy) | 0;
 $sub23 = $__old_sz - $__n_del - $__n_copy | 0;
 if ($sub23 | 0) __ZNSt3__211char_traitsIcE4copyEPcPKcm($call$i$i$i + $__n_copy + $__n_add | 0, $cond$i + $__n_copy + $__n_del | 0, $sub23) | 0;
 $add33 = $__old_cap + 1 | 0;
 if (($add33 | 0) != 11) __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm($cond$i, $add33);
 HEAP32[$this >> 2] = $call$i$i$i;
 HEAP32[$this + 8 >> 2] = $cond30 | -2147483648;
 return;
}

function ___stdio_read($f, $buf, $len) {
 $f = $f | 0;
 $buf = $buf | 0;
 $len = $len | 0;
 var $$cast = 0, $$pr = 0, $0 = 0, $3 = 0, $5 = 0, $6 = 0, $buf3 = 0, $buf_size = 0, $iov = 0, $iov_len = 0, $num = 0, $retval$0 = 0, $rpos = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $iov = sp;
 $num = sp + 16 | 0;
 HEAP32[$iov >> 2] = $buf;
 $iov_len = $iov + 4 | 0;
 $buf_size = $f + 48 | 0;
 $0 = HEAP32[$buf_size >> 2] | 0;
 HEAP32[$iov_len >> 2] = $len - (($0 | 0) != 0 & 1);
 $buf3 = $f + 44 | 0;
 HEAP32[$iov + 8 >> 2] = HEAP32[$buf3 >> 2];
 HEAP32[$iov + 12 >> 2] = $0;
 if (!(___wasi_syscall_ret(___wasi_fd_read(HEAP32[$f + 60 >> 2] | 0, $iov | 0, 2, $num | 0) | 0) | 0)) {
  $$pr = HEAP32[$num >> 2] | 0;
  if (($$pr | 0) < 1) {
   $3 = $$pr;
   label = 4;
  } else {
   $5 = HEAP32[$iov_len >> 2] | 0;
   if ($$pr >>> 0 > $5 >>> 0) {
    $6 = HEAP32[$buf3 >> 2] | 0;
    $rpos = $f + 4 | 0;
    HEAP32[$rpos >> 2] = $6;
    $$cast = $6;
    HEAP32[$f + 8 >> 2] = $$cast + ($$pr - $5);
    if (!(HEAP32[$buf_size >> 2] | 0)) $retval$0 = $len; else {
     HEAP32[$rpos >> 2] = $$cast + 1;
     HEAP8[$buf + ($len + -1) >> 0] = HEAP8[$$cast >> 0] | 0;
     $retval$0 = $len;
    }
   } else $retval$0 = $$pr;
  }
 } else {
  HEAP32[$num >> 2] = -1;
  $3 = -1;
  label = 4;
 }
 if ((label | 0) == 4) {
  HEAP32[$f >> 2] = $3 & 48 ^ 16 | HEAP32[$f >> 2];
  $retval$0 = $3;
 }
 STACKTOP = sp;
 return $retval$0 | 0;
}

function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm($this, $__b, $__e, $__iob, $__err, $__tm) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__tm = $__tm | 0;
 var $3 = 0, $add$ptr = 0, $add$ptr6 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $agg$tmp2 = 0, $agg$tmp2$byval_copy = 0, $call = 0, $call7 = 0, $cond$i$i1117 = 0, $tobool$i$i$i = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $agg$tmp2$byval_copy = sp + 12 | 0;
 $agg$tmp$byval_copy = sp + 8 | 0;
 $agg$tmp = sp + 4 | 0;
 $agg$tmp2 = sp;
 $add$ptr = $this + 8 | 0;
 $call = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$add$ptr >> 2] | 0) + 20 >> 2] & 127]($add$ptr) | 0;
 HEAP32[$agg$tmp >> 2] = HEAP32[$__b >> 2];
 HEAP32[$agg$tmp2 >> 2] = HEAP32[$__e >> 2];
 $3 = HEAP8[$call + 11 >> 0] | 0;
 $tobool$i$i$i = $3 << 24 >> 24 < 0;
 $cond$i$i1117 = $tobool$i$i$i ? HEAP32[$call >> 2] | 0 : $call;
 $add$ptr6 = $cond$i$i1117 + ($tobool$i$i$i ? HEAP32[$call + 4 >> 2] | 0 : $3 & 255) | 0;
 HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$agg$tmp2$byval_copy >> 2] = HEAP32[$agg$tmp2 >> 2];
 $call7 = __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($this, $agg$tmp$byval_copy, $agg$tmp2$byval_copy, $__iob, $__err, $__tm, $cond$i$i1117, $add$ptr6) | 0;
 STACKTOP = sp;
 return $call7 | 0;
}

function _InitWindow($width, $height, $title) {
 $width = $width | 0;
 $height = $height | 0;
 $title = $title | 0;
 var $height$addr = 0, $title$addr = 0, $vararg_buffer = 0, $width$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $vararg_buffer = sp;
 $width$addr = sp + 12 | 0;
 $height$addr = sp + 8 | 0;
 $title$addr = sp + 4 | 0;
 HEAP32[$width$addr >> 2] = $width;
 HEAP32[$height$addr >> 2] = $height;
 HEAP32[$title$addr >> 2] = $title;
 HEAP32[$vararg_buffer >> 2] = 31829;
 _TraceLog(3, 31806, $vararg_buffer);
 HEAP32[14956] = HEAP32[$title$addr >> 2];
 HEAP8[62157] = (_InitGraphicsDevice(HEAP32[$width$addr >> 2] | 0, HEAP32[$height$addr >> 2] | 0) | 0) & 1;
 if (!(HEAP8[62157] & 1)) {
  STACKTOP = sp;
  return;
 }
 _InitTimer();
 _LoadFontDefault();
 _emscripten_set_fullscreenchange_callback_on_thread(0, 0, 1, 29, 2) | 0;
 _emscripten_set_keypress_callback_on_thread(31837, 0, 1, 30, 2) | 0;
 _emscripten_set_click_callback_on_thread(31837, 0, 1, 31, 2) | 0;
 _emscripten_set_touchstart_callback_on_thread(31837, 0, 1, 32, 2) | 0;
 _emscripten_set_touchend_callback_on_thread(31837, 0, 1, 32, 2) | 0;
 _emscripten_set_touchmove_callback_on_thread(31837, 0, 1, 32, 2) | 0;
 _emscripten_set_touchcancel_callback_on_thread(31837, 0, 1, 32, 2) | 0;
 _emscripten_set_gamepadconnected_callback_on_thread(0, 1, 33, 2) | 0;
 _emscripten_set_gamepaddisconnected_callback_on_thread(0, 1, 33, 2) | 0;
 STACKTOP = sp;
 return;
}

function __ZNSt3__225__num_get_signed_integralIlEET_PKcS3_Rji($__a, $__a_end, $__err, $__base) {
 $__a = $__a | 0;
 $__a_end = $__a_end | 0;
 $__err = $__err | 0;
 $__base = $__base | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $__p2 = 0, $retval$0 = 0, $retval$1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $__p2 = sp;
 if (($__a | 0) == ($__a_end | 0)) {
  HEAP32[$__err >> 2] = 4;
  $retval$1 = 0;
 } else {
  $0 = HEAP32[(___errno_location() | 0) >> 2] | 0;
  HEAP32[(___errno_location() | 0) >> 2] = 0;
  $1 = _strtoll_l($__a, $__p2, $__base, __ZNSt3__26__clocEv() | 0) | 0;
  $2 = getTempRet0() | 0;
  $3 = HEAP32[(___errno_location() | 0) >> 2] | 0;
  if (!$3) HEAP32[(___errno_location() | 0) >> 2] = $0;
  L7 : do if ((HEAP32[$__p2 >> 2] | 0) == ($__a_end | 0)) {
   do if (($3 | 0) == 68) {
    HEAP32[$__err >> 2] = 4;
    if (($2 | 0) > 0 | ($2 | 0) == 0 & $1 >>> 0 > 0) {
     $retval$0 = 2147483647;
     break L7;
    }
   } else {
    if (($2 | 0) < -1 | ($2 | 0) == -1 & $1 >>> 0 < 2147483648) {
     HEAP32[$__err >> 2] = 4;
     break;
    }
    if (($2 | 0) > 0 | ($2 | 0) == 0 & $1 >>> 0 > 2147483647) {
     HEAP32[$__err >> 2] = 4;
     $retval$0 = 2147483647;
     break L7;
    } else {
     $retval$0 = $1;
     break L7;
    }
   } while (0);
   $retval$0 = -2147483648;
  } else {
   HEAP32[$__err >> 2] = 4;
   $retval$0 = 0;
  } while (0);
  $retval$1 = $retval$0;
 }
 STACKTOP = sp;
 return $retval$1 | 0;
}

function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initIPcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES9_S9_($this, $__first, $__last) {
 $this = $this | 0;
 $__first = $__first | 0;
 $__last = $__last | 0;
 var $1 = 0, $__first$addr$0 = 0, $__p$0 = 0, $__p$1 = 0, $and$i$i = 0, $call$i$i$i = 0, $ref$tmp = 0, $sub$ptr$rhs$cast$i$i = 0, $sub$ptr$sub$i$i = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $sub$ptr$rhs$cast$i$i = $__first;
 $ref$tmp = sp;
 $sub$ptr$sub$i$i = $__last - $sub$ptr$rhs$cast$i$i | 0;
 if ($sub$ptr$sub$i$i >>> 0 > 4294967279) __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($this);
 if ($sub$ptr$sub$i$i >>> 0 < 11) {
  HEAP8[$this + 11 >> 0] = $sub$ptr$sub$i$i;
  $__p$0 = $this;
 } else {
  $and$i$i = $sub$ptr$sub$i$i + 16 & -16;
  $call$i$i$i = __Znwm($and$i$i) | 0;
  HEAP32[$this >> 2] = $call$i$i$i;
  HEAP32[$this + 8 >> 2] = $and$i$i | -2147483648;
  HEAP32[$this + 4 >> 2] = $sub$ptr$sub$i$i;
  $__p$0 = $call$i$i$i;
 }
 $1 = $__last - $sub$ptr$rhs$cast$i$i | 0;
 $__first$addr$0 = $__first;
 $__p$1 = $__p$0;
 while (1) {
  if (($__first$addr$0 | 0) == ($__last | 0)) break;
  __ZNSt3__211char_traitsIcE6assignERcRKc($__p$1, $__first$addr$0);
  $__first$addr$0 = $__first$addr$0 + 1 | 0;
  $__p$1 = $__p$1 + 1 | 0;
 }
 HEAP8[$ref$tmp >> 0] = 0;
 __ZNSt3__211char_traitsIcE6assignERcRKc($__p$0 + $1 | 0, $ref$tmp);
 STACKTOP = sp;
 return;
}

function _TextSplit($text, $delimiter, $count) {
 $text = $text | 0;
 $delimiter = $delimiter | 0;
 $count = $count | 0;
 var $count$addr = 0, $counter = 0, $delimiter$addr = 0, $i = 0, $text$addr = 0, sp = 0, CSE$0 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $text$addr = sp + 12 | 0;
 $delimiter$addr = sp + 16 | 0;
 $count$addr = sp + 8 | 0;
 $counter = sp + 4 | 0;
 $i = sp;
 HEAP32[$text$addr >> 2] = $text;
 HEAP8[$delimiter$addr >> 0] = $delimiter;
 HEAP32[$count$addr >> 2] = $count;
 _memset(52784, 0, 1024) | 0;
 HEAP32[13452] = 52784;
 HEAP32[$counter >> 2] = 0;
 L1 : do if (HEAP32[$text$addr >> 2] | 0) {
  HEAP32[$counter >> 2] = 1;
  HEAP32[$i >> 2] = 0;
  while (1) {
   if ((HEAP32[$i >> 2] | 0) >= 1024) break L1;
   CSE$0 = HEAP32[$i >> 2] | 0;
   HEAP8[52784 + CSE$0 >> 0] = HEAP8[(HEAP32[$text$addr >> 2] | 0) + CSE$0 >> 0] | 0;
   if (!(HEAP8[52784 + (HEAP32[$i >> 2] | 0) >> 0] | 0)) break L1;
   if ((HEAP8[52784 + (HEAP32[$i >> 2] | 0) >> 0] | 0) == (HEAP8[$delimiter$addr >> 0] | 0)) {
    HEAP8[52784 + (HEAP32[$i >> 2] | 0) >> 0] = 0;
    HEAP32[53808 + (HEAP32[$counter >> 2] << 2) >> 2] = 52784 + (HEAP32[$i >> 2] | 0) + 1;
    HEAP32[$counter >> 2] = (HEAP32[$counter >> 2] | 0) + 1;
    if ((HEAP32[$counter >> 2] | 0) == 128) break L1;
   }
   HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
  }
 } while (0);
 HEAP32[HEAP32[$count$addr >> 2] >> 2] = HEAP32[$counter >> 2];
 STACKTOP = sp;
 return 53808;
}

function __ZNSt3__227__num_get_unsigned_integralImEET_PKcS3_Rji($__a, $__a_end, $__err, $__base) {
 $__a = $__a | 0;
 $__a_end = $__a_end | 0;
 $__err = $__err | 0;
 $__base = $__base | 0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $__a$addr$0 = 0, $__p2 = 0, $cmp1 = 0, $incdec$ptr = 0, $retval$0 = 0, $retval$2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $__p2 = sp;
 do if (($__a | 0) == ($__a_end | 0)) {
  HEAP32[$__err >> 2] = 4;
  $retval$2 = 0;
 } else {
  $cmp1 = (HEAP8[$__a >> 0] | 0) == 45;
  if ($cmp1) {
   $incdec$ptr = $__a + 1 | 0;
   if (($incdec$ptr | 0) == ($__a_end | 0)) {
    HEAP32[$__err >> 2] = 4;
    $retval$2 = 0;
    break;
   } else $__a$addr$0 = $incdec$ptr;
  } else $__a$addr$0 = $__a;
  $1 = HEAP32[(___errno_location() | 0) >> 2] | 0;
  HEAP32[(___errno_location() | 0) >> 2] = 0;
  $2 = _strtoull_l($__a$addr$0, $__p2, $__base, __ZNSt3__26__clocEv() | 0) | 0;
  $3 = getTempRet0() | 0;
  $4 = HEAP32[(___errno_location() | 0) >> 2] | 0;
  if (!$4) HEAP32[(___errno_location() | 0) >> 2] = $1;
  do if ((HEAP32[$__p2 >> 2] | 0) == ($__a_end | 0)) if ($3 >>> 0 > 0 | ($3 | 0) == 0 & $2 >>> 0 > 4294967295 | ($4 | 0) == 68) {
   HEAP32[$__err >> 2] = 4;
   $retval$0 = -1;
   break;
  } else {
   $retval$0 = $cmp1 ? 0 - $2 | 0 : $2;
   break;
  } else {
   HEAP32[$__err >> 2] = 4;
   $retval$0 = 0;
  } while (0);
  $retval$2 = $retval$0;
 } while (0);
 STACKTOP = sp;
 return $retval$2 | 0;
}

function __ZNSt3__227__num_get_unsigned_integralIjEET_PKcS3_Rji($__a, $__a_end, $__err, $__base) {
 $__a = $__a | 0;
 $__a_end = $__a_end | 0;
 $__err = $__err | 0;
 $__base = $__base | 0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $__a$addr$0 = 0, $__p2 = 0, $cmp1 = 0, $incdec$ptr = 0, $retval$0 = 0, $retval$2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $__p2 = sp;
 do if (($__a | 0) == ($__a_end | 0)) {
  HEAP32[$__err >> 2] = 4;
  $retval$2 = 0;
 } else {
  $cmp1 = (HEAP8[$__a >> 0] | 0) == 45;
  if ($cmp1) {
   $incdec$ptr = $__a + 1 | 0;
   if (($incdec$ptr | 0) == ($__a_end | 0)) {
    HEAP32[$__err >> 2] = 4;
    $retval$2 = 0;
    break;
   } else $__a$addr$0 = $incdec$ptr;
  } else $__a$addr$0 = $__a;
  $1 = HEAP32[(___errno_location() | 0) >> 2] | 0;
  HEAP32[(___errno_location() | 0) >> 2] = 0;
  $2 = _strtoull_l($__a$addr$0, $__p2, $__base, __ZNSt3__26__clocEv() | 0) | 0;
  $3 = getTempRet0() | 0;
  $4 = HEAP32[(___errno_location() | 0) >> 2] | 0;
  if (!$4) HEAP32[(___errno_location() | 0) >> 2] = $1;
  do if ((HEAP32[$__p2 >> 2] | 0) == ($__a_end | 0)) if ($3 >>> 0 > 0 | ($3 | 0) == 0 & $2 >>> 0 > 4294967295 | ($4 | 0) == 68) {
   HEAP32[$__err >> 2] = 4;
   $retval$0 = -1;
   break;
  } else {
   $retval$0 = $cmp1 ? 0 - $2 | 0 : $2;
   break;
  } else {
   HEAP32[$__err >> 2] = 4;
   $retval$0 = 0;
  } while (0);
  $retval$2 = $retval$0;
 } while (0);
 STACKTOP = sp;
 return $retval$2 | 0;
}

function __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9push_backEw($this, $__c) {
 $this = $this | 0;
 $__c = $__c | 0;
 var $0 = 0, $1 = 0, $5 = 0, $__c$addr = 0, $__cap$0 = 0, $__p$0 = 0, $__size_$i = 0, $__sz$0 = 0, $call12$pn = 0, $ref$tmp = 0, $tobool$i = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $__c$addr = sp;
 $ref$tmp = sp + 4 | 0;
 HEAP32[$__c$addr >> 2] = $__c;
 $0 = $this + 8 | 0;
 $__size_$i = $0 + 3 | 0;
 $1 = HEAP8[$__size_$i >> 0] | 0;
 $tobool$i = $1 << 24 >> 24 < 0;
 if ($tobool$i) {
  $__cap$0 = (HEAP32[$0 >> 2] & 2147483647) + -1 | 0;
  $__sz$0 = HEAP32[$this + 4 >> 2] | 0;
 } else {
  $__cap$0 = 1;
  $__sz$0 = $1 & 255;
 }
 if (($__sz$0 | 0) == ($__cap$0 | 0)) {
  __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9__grow_byEmmmmmm($this, $__cap$0, 1, $__cap$0, $__cap$0, 0, 0);
  if ((HEAP8[$__size_$i >> 0] | 0) < 0) label = 8; else label = 7;
 } else if ($tobool$i) label = 8; else label = 7;
 if ((label | 0) == 7) {
  HEAP8[$__size_$i >> 0] = $__sz$0 + 1;
  $call12$pn = $this;
 } else if ((label | 0) == 8) {
  $5 = HEAP32[$this >> 2] | 0;
  HEAP32[$this + 4 >> 2] = $__sz$0 + 1;
  $call12$pn = $5;
 }
 $__p$0 = $call12$pn + ($__sz$0 << 2) | 0;
 __ZNSt3__211char_traitsIwE6assignERwRKw($__p$0, $__c$addr);
 HEAP32[$ref$tmp >> 2] = 0;
 __ZNSt3__211char_traitsIwE6assignERwRKw($__p$0 + 4 | 0, $ref$tmp);
 STACKTOP = sp;
 return;
}

function __ZNSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8nlohmann10basic_jsonINS_3mapENS_6vectorES7_bxydS5_NS8_14adl_serializerEEEEENS_19__map_value_compareIS7_SE_NS_4lessIvEELb1EEENS5_ISE_EEE4findIPKcEENS_15__tree_iteratorISE_PNS_11__tree_nodeISE_PvEElEERKT_($this, $__v) {
 $this = $this | 0;
 $__v = $__v | 0;
 var $__value_$i$i$i$i = 0, $call$i$i$i = 0, $call3 = 0, $retval$sroa$0$0 = 0, label = 0;
 label = 0;
 $__value_$i$i$i$i = $this + 4 | 0;
 $call3 = __ZNSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8nlohmann10basic_jsonINS_3mapENS_6vectorES7_bxydS5_NS8_14adl_serializerEEEEENS_19__map_value_compareIS7_SE_NS_4lessIvEELb1EEENS5_ISE_EEE13__lower_boundIPKcEENS_15__tree_iteratorISE_PNS_11__tree_nodeISE_PvEElEERKT_SS_PNS_15__tree_end_nodeIPNS_16__tree_node_baseISQ_EEEE($this, $__v, HEAP32[$__value_$i$i$i$i >> 2] | 0, $__value_$i$i$i$i) | 0;
 if (($call3 | 0) == ($__value_$i$i$i$i | 0)) label = 3; else {
  $call$i$i$i = __ZNSt3__29__launderIKNS_4pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8nlohmann10basic_jsonINS_3mapENS_6vectorES7_bxydS5_NS9_14adl_serializerEEEEEEEPT_SI_($call3 + 16 | 0) | 0;
  if ((__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc($call$i$i$i, HEAP32[$__v >> 2] | 0) | 0) > 0) label = 3; else $retval$sroa$0$0 = $call3;
 }
 if ((label | 0) == 3) $retval$sroa$0$0 = $__value_$i$i$i$i;
 return $retval$sroa$0$0 | 0;
}

function __ZNSt3__26vectorIN4tson4TileENS_9allocatorIS2_EEE24__emplace_back_slow_pathIJS2_EEEvDpOT_($this, $__args) {
 $this = $this | 0;
 $__args = $__args | 0;
 var $3 = 0, $__end_ = 0, $__end_$i = 0, $__v = 0, $add = 0, $call$i = 0, $mul$i = 0, $sub$ptr$div$i$i$i = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $__v = sp;
 $__end_$i = $this + 4 | 0;
 $add = (((HEAP32[$__end_$i >> 2] | 0) - (HEAP32[$this >> 2] | 0) | 0) / 304 | 0) + 1 | 0;
 $call$i = __ZNKSt3__26vectorIN4tson4TileENS_9allocatorIS2_EEE8max_sizeEv($this) | 0;
 if ($call$i >>> 0 < $add >>> 0) __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($this); else {
  $3 = HEAP32[$this >> 2] | 0;
  $sub$ptr$div$i$i$i = ((HEAP32[$this + 8 >> 2] | 0) - $3 | 0) / 304 | 0;
  $mul$i = $sub$ptr$div$i$i$i << 1;
  __ZNSt3__214__split_bufferIN4tson4TileERNS_9allocatorIS2_EEEC2EmmS5_($__v, $sub$ptr$div$i$i$i >>> 0 < $call$i >>> 1 >>> 0 ? ($mul$i >>> 0 < $add >>> 0 ? $add : $mul$i) : $call$i, ((HEAP32[$__end_$i >> 2] | 0) - $3 | 0) / 304 | 0, $this + 8 | 0);
  $__end_ = $__v + 8 | 0;
  __ZN4tson4TileC2EOS0_(HEAP32[$__end_ >> 2] | 0, $__args);
  HEAP32[$__end_ >> 2] = (HEAP32[$__end_ >> 2] | 0) + 304;
  __ZNSt3__26vectorIN4tson4TileENS_9allocatorIS2_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS2_RS4_EE($this, $__v);
  __ZNSt3__214__split_bufferIN4tson4TileERNS_9allocatorIS2_EEED2Ev($__v);
  STACKTOP = sp;
  return;
 }
}

function __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i($this, $info, $dst_ptr, $current_ptr, $path_below) {
 $this = $this | 0;
 $info = $info | 0;
 $dst_ptr = $dst_ptr | 0;
 $current_ptr = $current_ptr | 0;
 $path_below = $path_below | 0;
 var $1 = 0, $3 = 0, $5 = 0, $dst_ptr_leading_to_static_ptr = 0, $number_to_static_ptr26 = 0, $path_dst_ptr_to_static_ptr12 = 0;
 HEAP8[$info + 53 >> 0] = 1;
 do if ((HEAP32[$info + 4 >> 2] | 0) == ($current_ptr | 0)) {
  HEAP8[$info + 52 >> 0] = 1;
  $dst_ptr_leading_to_static_ptr = $info + 16 | 0;
  $1 = HEAP32[$dst_ptr_leading_to_static_ptr >> 2] | 0;
  if (!$1) {
   HEAP32[$dst_ptr_leading_to_static_ptr >> 2] = $dst_ptr;
   HEAP32[$info + 24 >> 2] = $path_below;
   HEAP32[$info + 36 >> 2] = 1;
   if (!(($path_below | 0) == 1 ? (HEAP32[$info + 48 >> 2] | 0) == 1 : 0)) break;
   HEAP8[$info + 54 >> 0] = 1;
   break;
  }
  if (($1 | 0) != ($dst_ptr | 0)) {
   $number_to_static_ptr26 = $info + 36 | 0;
   HEAP32[$number_to_static_ptr26 >> 2] = (HEAP32[$number_to_static_ptr26 >> 2] | 0) + 1;
   HEAP8[$info + 54 >> 0] = 1;
   break;
  }
  $path_dst_ptr_to_static_ptr12 = $info + 24 | 0;
  $3 = HEAP32[$path_dst_ptr_to_static_ptr12 >> 2] | 0;
  if (($3 | 0) == 2) {
   HEAP32[$path_dst_ptr_to_static_ptr12 >> 2] = $path_below;
   $5 = $path_below;
  } else $5 = $3;
  if (($5 | 0) == 1 ? (HEAP32[$info + 48 >> 2] | 0) == 1 : 0) HEAP8[$info + 54 >> 0] = 1;
 } while (0);
 return;
}

function __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initIPKwEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESA_SA_($this, $__first, $__last) {
 $this = $this | 0;
 $__first = $__first | 0;
 $__last = $__last | 0;
 var $__first$addr$0 = 0, $__p$1 = 0, $__p$1$ph = 0, $and$i$i = 0, $call$i$i$i = 0, $ref$tmp = 0, $sub$ptr$div$i$i = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $ref$tmp = sp;
 $sub$ptr$div$i$i = $__last - $__first >> 2;
 if ($sub$ptr$div$i$i >>> 0 > 1073741807) __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($this);
 do if ($sub$ptr$div$i$i >>> 0 < 2) {
  HEAP8[$this + 8 + 3 >> 0] = $sub$ptr$div$i$i;
  $__p$1$ph = $this;
 } else {
  $and$i$i = $sub$ptr$div$i$i + 4 & -4;
  if ($and$i$i >>> 0 > 1073741823) _abort(); else {
   $call$i$i$i = __Znwm($and$i$i << 2) | 0;
   HEAP32[$this >> 2] = $call$i$i$i;
   HEAP32[$this + 8 >> 2] = $and$i$i | -2147483648;
   HEAP32[$this + 4 >> 2] = $sub$ptr$div$i$i;
   $__p$1$ph = $call$i$i$i;
   break;
  }
 } while (0);
 $__first$addr$0 = $__first;
 $__p$1 = $__p$1$ph;
 while (1) {
  if (($__first$addr$0 | 0) == ($__last | 0)) break;
  __ZNSt3__211char_traitsIwE6assignERwRKw($__p$1, $__first$addr$0);
  $__first$addr$0 = $__first$addr$0 + 4 | 0;
  $__p$1 = $__p$1 + 4 | 0;
 }
 HEAP32[$ref$tmp >> 2] = 0;
 __ZNSt3__211char_traitsIwE6assignERwRKw($__p$1, $ref$tmp);
 STACKTOP = sp;
 return;
}

function __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initIPwEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES9_S9_($this, $__first, $__last) {
 $this = $this | 0;
 $__first = $__first | 0;
 $__last = $__last | 0;
 var $__first$addr$0 = 0, $__p$1 = 0, $__p$1$ph = 0, $and$i$i = 0, $call$i$i$i = 0, $ref$tmp = 0, $sub$ptr$div$i$i = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $ref$tmp = sp;
 $sub$ptr$div$i$i = $__last - $__first >> 2;
 if ($sub$ptr$div$i$i >>> 0 > 1073741807) __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($this);
 do if ($sub$ptr$div$i$i >>> 0 < 2) {
  HEAP8[$this + 8 + 3 >> 0] = $sub$ptr$div$i$i;
  $__p$1$ph = $this;
 } else {
  $and$i$i = $sub$ptr$div$i$i + 4 & -4;
  if ($and$i$i >>> 0 > 1073741823) _abort(); else {
   $call$i$i$i = __Znwm($and$i$i << 2) | 0;
   HEAP32[$this >> 2] = $call$i$i$i;
   HEAP32[$this + 8 >> 2] = $and$i$i | -2147483648;
   HEAP32[$this + 4 >> 2] = $sub$ptr$div$i$i;
   $__p$1$ph = $call$i$i$i;
   break;
  }
 } while (0);
 $__first$addr$0 = $__first;
 $__p$1 = $__p$1$ph;
 while (1) {
  if (($__first$addr$0 | 0) == ($__last | 0)) break;
  __ZNSt3__211char_traitsIwE6assignERwRKw($__p$1, $__first$addr$0);
  $__first$addr$0 = $__first$addr$0 + 4 | 0;
  $__p$1 = $__p$1 + 4 | 0;
 }
 HEAP32[$ref$tmp >> 2] = 0;
 __ZNSt3__211char_traitsIwE6assignERwRKw($__p$1, $ref$tmp);
 STACKTOP = sp;
 return;
}

function __ZN4tson6Object19setObjectTypeByJsonERKN8nlohmann10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS1_14adl_serializerEEE($this, $json) {
 $this = $this | 0;
 $json = $json | 0;
 var $$sink = 0, $cmp26 = 0;
 HEAP8[$this >> 0] = 0;
 if (!(HEAP8[$this + 1 >> 0] | 0)) if (!(HEAP8[$this + 32 >> 0] | 0)) if (!(__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE5countIRA8_KcEEmOT_($json, 23362) | 0)) if (!(__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE5countIRA9_KcEEmOT_($json, 23370) | 0)) if (!(__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE5countIRA5_KcEEmOT_($json, 23352) | 0)) if (!(__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE5countIRA4_KcEEmOT_($json, 23324) | 0)) {
  $cmp26 = (__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE5countIRA9_KcEEmOT_($json, 23343) | 0) == 0;
  $$sink = $cmp26 ? 3 : 8;
 } else $$sink = 1; else $$sink = 7; else $$sink = 6; else $$sink = 5; else $$sink = 4; else $$sink = 2;
 HEAP8[$this >> 0] = $$sink;
 return;
}

function __ZN8nlohmann6detail28json_sax_dom_callback_parserINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEEC2ERSD_NS3_8functionIFbiNS0_6parserISD_E13parse_event_tESF_EEEb($this, $r, $cb, $allow_exceptions_) {
 $this = $this | 0;
 $r = $r | 0;
 $cb = $cb | 0;
 $allow_exceptions_ = $allow_exceptions_ | 0;
 var $callback = 0, $keep_stack = 0, $ref$tmp = 0, $ref_stack = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $ref$tmp = sp;
 HEAP32[$this >> 2] = $r;
 $ref_stack = $this + 4 | 0;
 $keep_stack = $this + 16 | 0;
 $callback = $this + 48 | 0;
 dest = $ref_stack;
 stop = dest + 40 | 0;
 do {
  HEAP32[dest >> 2] = 0;
  dest = dest + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP8[$ref_stack + 40 >> 0] = 0;
 __ZNSt3__28functionIFbiN8nlohmann6detail6parserINS1_10basic_jsonINS_3mapENS_6vectorENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEbxydSA_NS1_14adl_serializerEEEE13parse_event_tERSE_EEC2ERKSJ_($callback, $cb);
 HEAP8[$this + 64 >> 0] = $allow_exceptions_ & 1;
 __ZN8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEC2ENS_6detail7value_tE($this + 72 | 0, 8);
 HEAP8[$ref$tmp >> 0] = 1;
 __ZNSt3__26vectorIbNS_9allocatorIbEEE9push_backERKb($keep_stack, $ref$tmp);
 STACKTOP = sp;
 return;
}

function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($this, $__c) {
 $this = $this | 0;
 $__c = $__c | 0;
 var $0 = 0, $4 = 0, $__c$addr = 0, $__cap$0 = 0, $__p$0 = 0, $__size_$i = 0, $__sz$0 = 0, $call12$pn = 0, $ref$tmp = 0, $tobool$i = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $__c$addr = sp;
 $ref$tmp = sp + 1 | 0;
 HEAP8[$__c$addr >> 0] = $__c;
 $__size_$i = $this + 11 | 0;
 $0 = HEAP8[$__size_$i >> 0] | 0;
 $tobool$i = $0 << 24 >> 24 < 0;
 if ($tobool$i) {
  $__cap$0 = (HEAP32[$this + 8 >> 2] & 2147483647) + -1 | 0;
  $__sz$0 = HEAP32[$this + 4 >> 2] | 0;
 } else {
  $__cap$0 = 10;
  $__sz$0 = $0 & 255;
 }
 if (($__sz$0 | 0) == ($__cap$0 | 0)) {
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEmmmmmm($this, $__cap$0, 1, $__cap$0, $__cap$0, 0, 0);
  if ((HEAP8[$__size_$i >> 0] | 0) < 0) label = 8; else label = 7;
 } else if ($tobool$i) label = 8; else label = 7;
 if ((label | 0) == 7) {
  HEAP8[$__size_$i >> 0] = $__sz$0 + 1;
  $call12$pn = $this;
 } else if ((label | 0) == 8) {
  $4 = HEAP32[$this >> 2] | 0;
  HEAP32[$this + 4 >> 2] = $__sz$0 + 1;
  $call12$pn = $4;
 }
 $__p$0 = $call12$pn + $__sz$0 | 0;
 __ZNSt3__211char_traitsIcE6assignERcRKc($__p$0, $__c$addr);
 HEAP8[$ref$tmp >> 0] = 0;
 __ZNSt3__211char_traitsIcE6assignERcRKc($__p$0 + 1 | 0, $ref$tmp);
 STACKTOP = sp;
 return;
}

function __ZNSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8nlohmann10basic_jsonINS_3mapENS_6vectorES7_bxydS5_NS8_14adl_serializerEEEEENS_19__map_value_compareIS7_SE_NS_4lessIvEELb1EEENS5_ISE_EEE13__lower_boundIPKcEENS_15__tree_iteratorISE_PNS_11__tree_nodeISE_PvEElEERKT_SS_PNS_15__tree_end_nodeIPNS_16__tree_node_baseISQ_EEEE($this, $__v, $__root, $__result) {
 $this = $this | 0;
 $__v = $__v | 0;
 $__root = $__root | 0;
 $__result = $__result | 0;
 var $__result$addr$0$lcssa = 0, $__result$addr$06 = 0, $__result$addr$1 = 0, $__root$addr$05 = 0, $call$i$i$i = 0, $cmp$i$i$i = 0;
 if (!$__root) $__result$addr$0$lcssa = $__result; else {
  $__result$addr$06 = $__result;
  $__root$addr$05 = $__root;
  while (1) {
   $call$i$i$i = __ZNSt3__29__launderIKNS_4pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8nlohmann10basic_jsonINS_3mapENS_6vectorES7_bxydS5_NS9_14adl_serializerEEEEEEEPT_SI_($__root$addr$05 + 16 | 0) | 0;
   $cmp$i$i$i = (__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc($call$i$i$i, HEAP32[$__v >> 2] | 0) | 0) < 0;
   $__result$addr$1 = $cmp$i$i$i ? $__result$addr$06 : $__root$addr$05;
   $__root$addr$05 = HEAP32[($cmp$i$i$i ? $__root$addr$05 + 4 | 0 : $__root$addr$05) >> 2] | 0;
   if (!$__root$addr$05) {
    $__result$addr$0$lcssa = $__result$addr$1;
    break;
   } else $__result$addr$06 = $__result$addr$1;
  }
 }
 return $__result$addr$0$lcssa | 0;
}

function _fmt_u($0, $1, $s) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $s = $s | 0;
 var $11 = 0, $13 = 0, $7 = 0, $8 = 0, $incdec$ptr7 = 0, $s$addr$0$lcssa = 0, $s$addr$013 = 0, $s$addr$1$lcssa = 0, $s$addr$19 = 0, $x$addr$0$lcssa$off0 = 0, $y$010 = 0, $7$looptemp = 0, $8$looptemp = 0, $y$010$looptemp = 0;
 if ($1 >>> 0 > 0 | ($1 | 0) == 0 & $0 >>> 0 > 4294967295) {
  $7 = $0;
  $8 = $1;
  $s$addr$013 = $s;
  do {
   $7$looptemp = $7;
   $7 = ___udivdi3($7 | 0, $8 | 0, 10, 0) | 0;
   $8$looptemp = $8;
   $8 = getTempRet0() | 0;
   $11 = ___muldi3($7 | 0, $8 | 0, 10, 0) | 0;
   $13 = _i64Subtract($7$looptemp | 0, $8$looptemp | 0, $11 | 0, getTempRet0() | 0) | 0;
   getTempRet0() | 0;
   $s$addr$013 = $s$addr$013 + -1 | 0;
   HEAP8[$s$addr$013 >> 0] = $13 & 255 | 48;
  } while ($8$looptemp >>> 0 > 9 | ($8$looptemp | 0) == 9 & $7$looptemp >>> 0 > 4294967295);
  $s$addr$0$lcssa = $s$addr$013;
  $x$addr$0$lcssa$off0 = $7;
 } else {
  $s$addr$0$lcssa = $s;
  $x$addr$0$lcssa$off0 = $0;
 }
 if (!$x$addr$0$lcssa$off0) $s$addr$1$lcssa = $s$addr$0$lcssa; else {
  $s$addr$19 = $s$addr$0$lcssa;
  $y$010 = $x$addr$0$lcssa$off0;
  while (1) {
   $y$010$looptemp = $y$010;
   $y$010 = ($y$010 >>> 0) / 10 | 0;
   $incdec$ptr7 = $s$addr$19 + -1 | 0;
   HEAP8[$incdec$ptr7 >> 0] = $y$010$looptemp - ($y$010 * 10 | 0) | 48;
   if ($y$010$looptemp >>> 0 < 10) {
    $s$addr$1$lcssa = $incdec$ptr7;
    break;
   } else $s$addr$19 = $incdec$ptr7;
  }
 }
 return $s$addr$1$lcssa | 0;
}

function _stbiw__zlib_flushf($data, $bitbuffer, $bitcount) {
 $data = $data | 0;
 $bitbuffer = $bitbuffer | 0;
 $bitcount = $bitcount | 0;
 var $11 = 0, $12 = 0, $14 = 0, $2 = 0, $9 = 0, $arrayidx6 = 0, $bitbuffer$addr = 0, $bitcount$addr = 0, $conv = 0, $data$addr = 0, label = 0, sp = 0, CSE$0 = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $data$addr = sp + 8 | 0;
 $bitbuffer$addr = sp + 4 | 0;
 $bitcount$addr = sp;
 HEAP32[$data$addr >> 2] = $data;
 HEAP32[$bitbuffer$addr >> 2] = $bitbuffer;
 HEAP32[$bitcount$addr >> 2] = $bitcount;
 while (1) {
  $2 = HEAP32[$data$addr >> 2] | 0;
  if ((HEAP32[HEAP32[$bitcount$addr >> 2] >> 2] | 0) < 8) break;
  if (!$2) label = 5; else if (((HEAP32[(HEAP32[$data$addr >> 2] | 0) + -8 + 4 >> 2] | 0) + 1 | 0) >= (HEAP32[(HEAP32[$data$addr >> 2] | 0) + -8 >> 2] | 0)) label = 5;
  if ((label | 0) == 5) {
   label = 0;
   _stbiw__sbgrowf($data$addr, 1, 1) | 0;
  }
  $conv = HEAP32[HEAP32[$bitbuffer$addr >> 2] >> 2] & 255;
  CSE$0 = HEAP32[$data$addr >> 2] | 0;
  $9 = CSE$0 | 0;
  $arrayidx6 = CSE$0 + -8 + 4 | 0;
  $11 = HEAP32[$arrayidx6 >> 2] | 0;
  HEAP32[$arrayidx6 >> 2] = $11 + 1;
  HEAP8[$9 + $11 >> 0] = $conv;
  $12 = HEAP32[$bitbuffer$addr >> 2] | 0;
  HEAP32[$12 >> 2] = (HEAP32[$12 >> 2] | 0) >>> 8;
  $14 = HEAP32[$bitcount$addr >> 2] | 0;
  HEAP32[$14 >> 2] = (HEAP32[$14 >> 2] | 0) - 8;
 }
 STACKTOP = sp;
 return $2 | 0;
}

function _DrawCircle($centerX, $centerY, $radius, $color) {
 $centerX = $centerX | 0;
 $centerY = $centerY | 0;
 $radius = Math_fround($radius);
 $color = $color | 0;
 var $$compoundliteral = 0, $$compoundliteral$byval_copy = 0, $2 = f0, $centerX$addr = 0, $centerY$addr = 0, $color$byval_copy = 0, $radius$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 $color$byval_copy = sp + 32 | 0;
 $$compoundliteral$byval_copy = sp + 24 | 0;
 $centerX$addr = sp + 16 | 0;
 $centerY$addr = sp + 12 | 0;
 $radius$addr = sp + 8 | 0;
 $$compoundliteral = sp;
 HEAP32[$centerX$addr >> 2] = $centerX;
 HEAP32[$centerY$addr >> 2] = $centerY;
 HEAPF32[$radius$addr >> 2] = $radius;
 HEAPF32[$$compoundliteral >> 2] = Math_fround(HEAP32[$centerX$addr >> 2] | 0);
 HEAPF32[$$compoundliteral + 4 >> 2] = Math_fround(HEAP32[$centerY$addr >> 2] | 0);
 $2 = Math_fround(HEAPF32[$radius$addr >> 2]);
 HEAP32[$$compoundliteral$byval_copy >> 2] = HEAP32[$$compoundliteral >> 2];
 HEAP32[$$compoundliteral$byval_copy + 4 >> 2] = HEAP32[$$compoundliteral + 4 >> 2];
 HEAP8[$color$byval_copy >> 0] = HEAP8[$color >> 0] | 0;
 HEAP8[$color$byval_copy + 1 >> 0] = HEAP8[$color + 1 >> 0] | 0;
 HEAP8[$color$byval_copy + 2 >> 0] = HEAP8[$color + 2 >> 0] | 0;
 HEAP8[$color$byval_copy + 3 >> 0] = HEAP8[$color + 3 >> 0] | 0;
 _DrawCircleV($$compoundliteral$byval_copy, $2, $color$byval_copy);
 STACKTOP = sp;
 return;
}

function _stbi__paeth($a, $b, $c) {
 $a = $a | 0;
 $b = $b | 0;
 $c = $c | 0;
 var $18 = 0, $a$addr = 0, $b$addr = 0, $c$addr = 0, $p = 0, $pa = 0, $pb = 0, $pc = 0, $retval = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $retval = sp + 28 | 0;
 $a$addr = sp + 24 | 0;
 $b$addr = sp + 20 | 0;
 $c$addr = sp + 16 | 0;
 $p = sp + 12 | 0;
 $pa = sp + 8 | 0;
 $pb = sp + 4 | 0;
 $pc = sp;
 HEAP32[$a$addr >> 2] = $a;
 HEAP32[$b$addr >> 2] = $b;
 HEAP32[$c$addr >> 2] = $c;
 HEAP32[$p >> 2] = (HEAP32[$a$addr >> 2] | 0) + (HEAP32[$b$addr >> 2] | 0) - (HEAP32[$c$addr >> 2] | 0);
 HEAP32[$pa >> 2] = Math_abs((HEAP32[$p >> 2] | 0) - (HEAP32[$a$addr >> 2] | 0) | 0) | 0;
 HEAP32[$pb >> 2] = Math_abs((HEAP32[$p >> 2] | 0) - (HEAP32[$b$addr >> 2] | 0) | 0) | 0;
 HEAP32[$pc >> 2] = Math_abs((HEAP32[$p >> 2] | 0) - (HEAP32[$c$addr >> 2] | 0) | 0) | 0;
 if ((HEAP32[$pa >> 2] | 0) <= (HEAP32[$pb >> 2] | 0)) if ((HEAP32[$pa >> 2] | 0) <= (HEAP32[$pc >> 2] | 0)) {
  HEAP32[$retval >> 2] = HEAP32[$a$addr >> 2];
  $18 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $18 | 0;
 }
 if ((HEAP32[$pb >> 2] | 0) <= (HEAP32[$pc >> 2] | 0)) {
  HEAP32[$retval >> 2] = HEAP32[$b$addr >> 2];
  $18 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $18 | 0;
 } else {
  HEAP32[$retval >> 2] = HEAP32[$c$addr >> 2];
  $18 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $18 | 0;
 }
 return 0;
}

function _stbiw__paeth($a, $b, $c) {
 $a = $a | 0;
 $b = $b | 0;
 $c = $c | 0;
 var $18 = 0, $a$addr = 0, $b$addr = 0, $c$addr = 0, $p = 0, $pa = 0, $pb = 0, $pc = 0, $retval = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $retval = sp + 28 | 0;
 $a$addr = sp + 24 | 0;
 $b$addr = sp + 20 | 0;
 $c$addr = sp + 16 | 0;
 $p = sp + 12 | 0;
 $pa = sp + 8 | 0;
 $pb = sp + 4 | 0;
 $pc = sp;
 HEAP32[$a$addr >> 2] = $a;
 HEAP32[$b$addr >> 2] = $b;
 HEAP32[$c$addr >> 2] = $c;
 HEAP32[$p >> 2] = (HEAP32[$a$addr >> 2] | 0) + (HEAP32[$b$addr >> 2] | 0) - (HEAP32[$c$addr >> 2] | 0);
 HEAP32[$pa >> 2] = Math_abs((HEAP32[$p >> 2] | 0) - (HEAP32[$a$addr >> 2] | 0) | 0) | 0;
 HEAP32[$pb >> 2] = Math_abs((HEAP32[$p >> 2] | 0) - (HEAP32[$b$addr >> 2] | 0) | 0) | 0;
 HEAP32[$pc >> 2] = Math_abs((HEAP32[$p >> 2] | 0) - (HEAP32[$c$addr >> 2] | 0) | 0) | 0;
 if ((HEAP32[$pa >> 2] | 0) <= (HEAP32[$pb >> 2] | 0)) if ((HEAP32[$pa >> 2] | 0) <= (HEAP32[$pc >> 2] | 0)) {
  HEAP8[$retval >> 0] = HEAP32[$a$addr >> 2];
  $18 = HEAP8[$retval >> 0] | 0;
  STACKTOP = sp;
  return $18 | 0;
 }
 if ((HEAP32[$pb >> 2] | 0) <= (HEAP32[$pc >> 2] | 0)) {
  HEAP8[$retval >> 0] = HEAP32[$b$addr >> 2];
  $18 = HEAP8[$retval >> 0] | 0;
  STACKTOP = sp;
  return $18 | 0;
 } else {
  HEAP8[$retval >> 0] = HEAP32[$c$addr >> 2];
  $18 = HEAP8[$retval >> 0] | 0;
  STACKTOP = sp;
  return $18 | 0;
 }
 return 0;
}

function __ZN4tson18PropertyCollectionaSEOS0_($this, $0) {
 $this = $this | 0;
 $0 = $0 | 0;
 var $2 = 0, $__cap_$i$i$i$i$i = 0, $__size_$i1$i$i$i$i = 0, $ref$tmp$i$i$i$i = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $ref$tmp$i$i$i$i = sp;
 $__size_$i1$i$i$i$i = $this + 11 | 0;
 if ((HEAP8[$__size_$i1$i$i$i$i >> 0] | 0) < 0) {
  $2 = HEAP32[$this >> 2] | 0;
  HEAP8[$ref$tmp$i$i$i$i >> 0] = 0;
  __ZNSt3__211char_traitsIcE6assignERcRKc($2, $ref$tmp$i$i$i$i);
  HEAP32[$this + 4 >> 2] = 0;
  if ((HEAP8[$__size_$i1$i$i$i$i >> 0] | 0) < 0) {
   $__cap_$i$i$i$i$i = $this + 8 | 0;
   __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm(HEAP32[$this >> 2] | 0, HEAP32[$__cap_$i$i$i$i$i >> 2] & 2147483647);
   HEAP32[$__cap_$i$i$i$i$i >> 2] = 0;
  }
 } else {
  HEAP8[$ref$tmp$i$i$i$i >> 0] = 0;
  __ZNSt3__211char_traitsIcE6assignERcRKc($this, $ref$tmp$i$i$i$i);
  HEAP8[$__size_$i1$i$i$i$i >> 0] = 0;
 };
 HEAP32[$this >> 2] = HEAP32[$0 >> 2];
 HEAP32[$this + 4 >> 2] = HEAP32[$0 + 4 >> 2];
 HEAP32[$this + 8 >> 2] = HEAP32[$0 + 8 >> 2];
 HEAP32[$0 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 0;
 __ZNSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN4tson8PropertyEEENS_19__map_value_compareIS7_SA_NS_4lessIS7_EELb1EEENS5_ISA_EEEaSEOSG_($this + 12 | 0, $0 + 12 | 0) | 0;
 STACKTOP = sp;
 return $this | 0;
}

function __ZN4tson6ObjectC2ERKN8nlohmann10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS1_14adl_serializerEEE($this, $json) {
 $this = $this | 0;
 $json = $json | 0;
 var $m_id = 0, $m_polygon = 0, $m_rotation = 0, $m_type = 0;
 HEAP8[$this >> 0] = 0;
 HEAP8[$this + 1 >> 0] = 0;
 HEAP32[$this + 4 >> 2] = 0;
 __ZN4tson7Vector2IiEC2Ev($this + 8 | 0);
 $m_id = $this + 16 | 0;
 $m_polygon = $this + 36 | 0;
 HEAP32[$m_id >> 2] = 0;
 HEAP32[$m_id + 4 >> 2] = 0;
 HEAP32[$m_id + 8 >> 2] = 0;
 HEAP32[$m_id + 12 >> 2] = 0;
 HEAP8[$m_id + 16 >> 0] = 0;
 HEAP32[$m_polygon >> 2] = 0;
 HEAP32[$m_polygon + 4 >> 2] = 0;
 HEAP32[$m_polygon + 8 >> 2] = 0;
 HEAP32[$m_polygon + 12 >> 2] = 0;
 HEAP32[$m_polygon + 16 >> 2] = 0;
 HEAP32[$m_polygon + 20 >> 2] = 0;
 __ZN4tson18PropertyCollectionC2Ev($this + 60 | 0);
 $m_rotation = $this + 84 | 0;
 HEAP32[$m_rotation >> 2] = 0;
 HEAP32[$m_rotation + 4 >> 2] = 0;
 HEAP32[$m_rotation + 8 >> 2] = 0;
 HEAP32[$m_rotation + 12 >> 2] = 0;
 __ZN4tson4TextC2Ev($this + 100 | 0);
 $m_type = $this + 116 | 0;
 HEAP32[$m_type >> 2] = 0;
 HEAP32[$m_type + 4 >> 2] = 0;
 HEAP32[$m_type + 8 >> 2] = 0;
 HEAP8[$m_type + 12 >> 0] = 0;
 __ZN4tson7Vector2IiEC2Ev($this + 132 | 0);
 __ZN4tson6Object5parseERKN8nlohmann10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS1_14adl_serializerEEE($this, $json) | 0;
 return;
}

function __ZNSt3__213basic_filebufIcNS_11char_traitsIcEEEC2Ev($this) {
 $this = $this | 0;
 var $0 = 0, $__always_noconv_ = 0, $__cv_ = 0, $__ebs_ = 0, $__loc_$i = 0, $call$i = 0, $ref$tmp = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $ref$tmp = sp;
 __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEEC2Ev($this);
 HEAP32[$this >> 2] = 17856;
 HEAP32[$this + 32 >> 2] = 0;
 HEAP32[$this + 36 >> 2] = 0;
 HEAP32[$this + 40 >> 2] = 0;
 $__ebs_ = $this + 52 | 0;
 $__cv_ = $this + 68 | 0;
 $__always_noconv_ = $this + 98 | 0;
 dest = $__ebs_;
 stop = dest + 44 | 0;
 do {
  HEAP32[dest >> 2] = 0;
  dest = dest + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$__ebs_ + 44 >> 1] = 0;
 HEAP8[$__ebs_ + 46 >> 0] = 0;
 $__loc_$i = $this + 4 | 0;
 __ZNSt3__26localeC2ERKS0_($ref$tmp, $__loc_$i);
 $call$i = __ZNKSt3__26locale9has_facetERNS0_2idE($ref$tmp, 61520) | 0;
 __ZNSt3__26localeD2Ev($ref$tmp);
 if ($call$i) {
  __ZNSt3__26localeC2ERKS0_($ref$tmp, $__loc_$i);
  HEAP32[$__cv_ >> 2] = __ZNKSt3__26locale9use_facetERNS0_2idE($ref$tmp, 61520) | 0;
  __ZNSt3__26localeD2Ev($ref$tmp);
  $0 = HEAP32[$__cv_ >> 2] | 0;
  HEAP8[$__always_noconv_ >> 0] = (FUNCTION_TABLE_ii[HEAP32[(HEAP32[$0 >> 2] | 0) + 28 >> 2] & 127]($0) | 0) & 1;
 }
 FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$this >> 2] | 0) + 12 >> 2] & 63]($this, 0, 4096) | 0;
 STACKTOP = sp;
 return;
}

function __ZN8nlohmann6detail5lexerINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE5resetEv($this) {
 $this = $this | 0;
 var $1 = 0, $4 = 0, $__end_$i$i$i = 0, $__size_$i1$i = 0, $call = 0, $ref$tmp$i = 0, $token_buffer = 0, $token_string = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $ref$tmp$i = sp;
 $token_buffer = $this + 40 | 0;
 $__size_$i1$i = $token_buffer + 11 | 0;
 if ((HEAP8[$__size_$i1$i >> 0] | 0) < 0) {
  $1 = HEAP32[$token_buffer >> 2] | 0;
  HEAP8[$ref$tmp$i >> 0] = 0;
  __ZNSt3__211char_traitsIcE6assignERcRKc($1, $ref$tmp$i);
  HEAP32[$this + 44 >> 2] = 0;
 } else {
  HEAP8[$ref$tmp$i >> 0] = 0;
  __ZNSt3__211char_traitsIcE6assignERcRKc($token_buffer, $ref$tmp$i);
  HEAP8[$__size_$i1$i >> 0] = 0;
 }
 $token_string = $this + 28 | 0;
 $__end_$i$i$i = $this + 32 | 0;
 HEAP32[$__end_$i$i$i >> 2] = HEAP32[$token_string >> 2];
 $call = __ZNSt3__211char_traitsIcE12to_char_typeEi(HEAP32[$this + 8 >> 2] | 0) | 0;
 HEAP8[$ref$tmp$i >> 0] = $call;
 $4 = HEAP32[$__end_$i$i$i >> 2] | 0;
 if ($4 >>> 0 < (HEAP32[$this + 36 >> 2] | 0) >>> 0) {
  HEAP8[$4 >> 0] = $call;
  HEAP32[$__end_$i$i$i >> 2] = (HEAP32[$__end_$i$i$i >> 2] | 0) + 1;
 } else __ZNSt3__26vectorIcNS_9allocatorIcEEE21__push_back_slow_pathIcEEvOT_($token_string, $ref$tmp$i);
 STACKTOP = sp;
 return;
}

function __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE3putEc($this, $__c) {
 $this = $this | 0;
 $__c = $__c | 0;
 var $1 = 0, $2 = 0, $3 = 0, $6 = 0, $__nout_$i$i = 0, $__s = 0, $add$ptr = 0, $call$i$i = 0, $retval$0$i$i = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $__s = sp;
 __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE6sentryC2ERS3_($__s, $this);
 do if (HEAP8[$__s >> 0] | 0) {
  $1 = HEAP32[$this + (HEAP32[(HEAP32[$this >> 2] | 0) + -12 >> 2] | 0) + 24 >> 2] | 0;
  $2 = $1;
  if ($1 | 0) {
   $__nout_$i$i = $2 + 24 | 0;
   $3 = HEAP32[$__nout_$i$i >> 2] | 0;
   if (($3 | 0) == (HEAP32[$2 + 28 >> 2] | 0)) {
    $6 = HEAP32[(HEAP32[$1 >> 2] | 0) + 52 >> 2] | 0;
    $call$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc($__c) | 0;
    $retval$0$i$i = FUNCTION_TABLE_iii[$6 & 31]($2, $call$i$i) | 0;
   } else {
    HEAP32[$__nout_$i$i >> 2] = $3 + 1;
    HEAP8[$3 >> 0] = $__c;
    $retval$0$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc($__c) | 0;
   }
   if (!(__ZNSt3__211char_traitsIcE11eq_int_typeEii($retval$0$i$i, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0)) break;
  }
  $add$ptr = $this + (HEAP32[(HEAP32[$this >> 2] | 0) + -12 >> 2] | 0) | 0;
  __ZNSt3__28ios_base5clearEj($add$ptr, HEAP32[$add$ptr + 16 >> 2] | 1);
 } while (0);
 __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($__s);
 STACKTOP = sp;
 return $this | 0;
}

function __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE6xsputnEPKwl($this, $__s, $__n) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__n = $__n | 0;
 var $$sroa$speculated = 0, $0 = 0, $1 = 0, $2 = 0, $__eout_ = 0, $__i$0 = 0, $__i$0$be = 0, $__nout_ = 0, $__s$addr$0 = 0, $__s$addr$0$be = 0, $call = 0, $call3 = 0, $sub = 0, $sub$ptr$div = 0;
 $call = __ZNSt3__211char_traitsIwE3eofEv() | 0;
 $__nout_ = $this + 24 | 0;
 $__eout_ = $this + 28 | 0;
 $__i$0 = 0;
 $__s$addr$0 = $__s;
 while (1) {
  if (($__i$0 | 0) >= ($__n | 0)) break;
  $0 = HEAP32[$__nout_ >> 2] | 0;
  $1 = HEAP32[$__eout_ >> 2] | 0;
  if ($0 >>> 0 < $1 >>> 0) {
   $sub$ptr$div = $1 - $0 >> 2;
   $sub = $__n - $__i$0 | 0;
   $$sroa$speculated = ($sub | 0) < ($sub$ptr$div | 0) ? $sub : $sub$ptr$div;
   __ZNSt3__211char_traitsIwE4copyEPwPKwm($0, $__s$addr$0, $$sroa$speculated) | 0;
   HEAP32[$__nout_ >> 2] = (HEAP32[$__nout_ >> 2] | 0) + ($$sroa$speculated << 2);
   $__i$0$be = $$sroa$speculated + $__i$0 | 0;
   $__s$addr$0$be = $__s$addr$0 + ($$sroa$speculated << 2) | 0;
  } else {
   $2 = HEAP32[(HEAP32[$this >> 2] | 0) + 52 >> 2] | 0;
   $call3 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$__s$addr$0 >> 2] | 0) | 0;
   if ((FUNCTION_TABLE_iii[$2 & 31]($this, $call3) | 0) == ($call | 0)) break;
   $__i$0$be = $__i$0 + 1 | 0;
   $__s$addr$0$be = $__s$addr$0 + 4 | 0;
  }
  $__i$0 = $__i$0$be;
  $__s$addr$0 = $__s$addr$0$be;
 }
 return $__i$0 | 0;
}

function __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6appendEPKwm($this, $__s, $__n) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__n = $__n | 0;
 var $0 = 0, $1 = 0, $__size_$i$i = 0, $add = 0, $cond$i23 = 0, $cond$i28 = 0, $cond$i33 = 0, $ref$tmp = 0, $tobool$i$i = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $ref$tmp = sp;
 $0 = $this + 8 | 0;
 $__size_$i$i = $0 + 3 | 0;
 $1 = HEAP8[$__size_$i$i >> 0] | 0;
 $tobool$i$i = $1 << 24 >> 24 < 0;
 if ($tobool$i$i) {
  $cond$i23 = HEAP32[$this + 4 >> 2] | 0;
  $cond$i33 = (HEAP32[$0 >> 2] & 2147483647) + -1 | 0;
 } else {
  $cond$i23 = $1 & 255;
  $cond$i33 = 1;
 }
 if (($cond$i33 - $cond$i23 | 0) >>> 0 < $__n >>> 0) __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE21__grow_by_and_replaceEmmmmmmPKw($this, $cond$i33, $cond$i23 + $__n - $cond$i33 | 0, $cond$i23, $cond$i23, 0, $__n, $__s); else if ($__n | 0) {
  if ($tobool$i$i) $cond$i28 = HEAP32[$this >> 2] | 0; else $cond$i28 = $this;
  __ZNSt3__211char_traitsIwE4copyEPwPKwm($cond$i28 + ($cond$i23 << 2) | 0, $__s, $__n) | 0;
  $add = $cond$i23 + $__n | 0;
  if ((HEAP8[$__size_$i$i >> 0] | 0) < 0) HEAP32[$this + 4 >> 2] = $add; else HEAP8[$__size_$i$i >> 0] = $add;
  HEAP32[$ref$tmp >> 2] = 0;
  __ZNSt3__211char_traitsIwE6assignERwRKw($cond$i28 + ($add << 2) | 0, $ref$tmp);
 }
 STACKTOP = sp;
 return $this | 0;
}

function __ZNSt3__26vectorIPN8nlohmann10basic_jsonINS_3mapES0_NS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEbxydS7_NS1_14adl_serializerEEENS7_ISC_EEE26__swap_out_circular_bufferERNS_14__split_bufferISC_RSD_EE($this, $__v) {
 $this = $this | 0;
 $__v = $__v | 0;
 var $$pre$phiZ2D = 0, $0 = 0, $4 = 0, $5 = 0, $6 = 0, $8 = 0, $__begin_2 = 0, $__end_ = 0, $__end_6 = 0, $__value_$i$i$i = 0, $__value_$i$i$i6 = 0, $add$ptr$i = 0, $sub$ptr$sub$i7 = 0;
 $0 = HEAP32[$this >> 2] | 0;
 $__end_ = $this + 4 | 0;
 $__begin_2 = $__v + 4 | 0;
 $sub$ptr$sub$i7 = (HEAP32[$__end_ >> 2] | 0) - $0 | 0;
 $add$ptr$i = (HEAP32[$__begin_2 >> 2] | 0) + (0 - ($sub$ptr$sub$i7 >> 2) << 2) | 0;
 HEAP32[$__begin_2 >> 2] = $add$ptr$i;
 if (($sub$ptr$sub$i7 | 0) > 0) {
  _memcpy($add$ptr$i | 0, $0 | 0, $sub$ptr$sub$i7 | 0) | 0;
  $$pre$phiZ2D = $__begin_2;
  $5 = HEAP32[$__begin_2 >> 2] | 0;
 } else {
  $$pre$phiZ2D = $__begin_2;
  $5 = $add$ptr$i;
 }
 $4 = HEAP32[$this >> 2] | 0;
 HEAP32[$this >> 2] = $5;
 HEAP32[$$pre$phiZ2D >> 2] = $4;
 $__end_6 = $__v + 8 | 0;
 $6 = HEAP32[$__end_ >> 2] | 0;
 HEAP32[$__end_ >> 2] = HEAP32[$__end_6 >> 2];
 HEAP32[$__end_6 >> 2] = $6;
 $__value_$i$i$i6 = $this + 8 | 0;
 $__value_$i$i$i = $__v + 12 | 0;
 $8 = HEAP32[$__value_$i$i$i6 >> 2] | 0;
 HEAP32[$__value_$i$i$i6 >> 2] = HEAP32[$__value_$i$i$i >> 2];
 HEAP32[$__value_$i$i$i >> 2] = $8;
 HEAP32[$__v >> 2] = HEAP32[$$pre$phiZ2D >> 2];
 return;
}

function __ZN4tson3Map11processDataEv($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $__begin$sroa$0$034 = 0, $agg$tmp2414 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $agg$tmp2414 = sp;
 __ZNSt3__26__treeINS_12__value_typeIiPN4tson4TileEEENS_19__map_value_compareIiS5_NS_4lessIiEELb1EEENS_9allocatorIS5_EEE5clearEv($this + 176 | 0);
 $0 = HEAP32[$this + 132 >> 2] | 0;
 $1 = HEAP32[$this + 136 >> 2] | 0;
 if (($0 | 0) != ($1 | 0)) {
  $__begin$sroa$0$034 = $0;
  do {
   $5 = HEAP32[(__ZN4tson7Tileset8getTilesEv($__begin$sroa$0$034) | 0) >> 2] | 0;
   $6 = HEAP32[(__ZN4tson7Tileset8getTilesEv($__begin$sroa$0$034) | 0) + 4 >> 2] | 0;
   HEAP32[$agg$tmp2414 >> 2] = $this;
   if (($5 | 0) != ($6 | 0)) {
    $7 = $5;
    do {
     __ZZN4tson3Map11processDataEvENKUlRNS_4TileEE_clES2_($agg$tmp2414, $7);
     $7 = $7 + 304 | 0;
    } while (($7 | 0) != ($6 | 0));
   }
   $__begin$sroa$0$034 = $__begin$sroa$0$034 + 164 | 0;
  } while (($__begin$sroa$0$034 | 0) != ($1 | 0));
 }
 $2 = HEAP32[$this + 20 >> 2] | 0;
 $3 = HEAP32[$this + 24 >> 2] | 0;
 HEAP32[$agg$tmp2414 >> 2] = $this;
 if (($2 | 0) != ($3 | 0)) {
  $4 = $2;
  do {
   __ZZN4tson3Map11processDataEvENKUlRNS_5LayerEE_clES2_($agg$tmp2414, $4);
   $4 = $4 + 220 | 0;
  } while (($4 | 0) != ($3 | 0));
 }
 STACKTOP = sp;
 return;
}

function __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE6xsputnEPKcl($this, $__s, $__n) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__n = $__n | 0;
 var $$sroa$speculated = 0, $0 = 0, $1 = 0, $2 = 0, $__eout_ = 0, $__i$0 = 0, $__i$0$be = 0, $__nout_ = 0, $__s$addr$0 = 0, $__s$addr$0$be = 0, $call = 0, $call3 = 0, $sub = 0, $sub$ptr$sub = 0;
 $call = __ZNSt3__211char_traitsIcE3eofEv() | 0;
 $__nout_ = $this + 24 | 0;
 $__eout_ = $this + 28 | 0;
 $__i$0 = 0;
 $__s$addr$0 = $__s;
 while (1) {
  if (($__i$0 | 0) >= ($__n | 0)) break;
  $0 = HEAP32[$__nout_ >> 2] | 0;
  $1 = HEAP32[$__eout_ >> 2] | 0;
  if ($0 >>> 0 < $1 >>> 0) {
   $sub$ptr$sub = $1 - $0 | 0;
   $sub = $__n - $__i$0 | 0;
   $$sroa$speculated = ($sub | 0) < ($sub$ptr$sub | 0) ? $sub : $sub$ptr$sub;
   __ZNSt3__211char_traitsIcE4copyEPcPKcm($0, $__s$addr$0, $$sroa$speculated) | 0;
   HEAP32[$__nout_ >> 2] = (HEAP32[$__nout_ >> 2] | 0) + $$sroa$speculated;
   $__i$0$be = $$sroa$speculated + $__i$0 | 0;
   $__s$addr$0$be = $__s$addr$0 + $$sroa$speculated | 0;
  } else {
   $2 = HEAP32[(HEAP32[$this >> 2] | 0) + 52 >> 2] | 0;
   $call3 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$__s$addr$0 >> 0] | 0) | 0;
   if ((FUNCTION_TABLE_iii[$2 & 31]($this, $call3) | 0) == ($call | 0)) break;
   $__i$0$be = $__i$0 + 1 | 0;
   $__s$addr$0$be = $__s$addr$0 + 1 | 0;
  }
  $__i$0 = $__i$0$be;
  $__s$addr$0 = $__s$addr$0$be;
 }
 return $__i$0 | 0;
}

function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEmc($this, $__n, $__c) {
 $this = $this | 0;
 $__n = $__n | 0;
 $__c = $__c | 0;
 var $0 = 0, $3 = 0, $__size_$i$i = 0, $add8 = 0, $cond$i22 = 0, $cond$i32 = 0, $cond$i33 = 0, $ref$tmp = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $ref$tmp = sp;
 if ($__n | 0) {
  $__size_$i$i = $this + 11 | 0;
  $0 = HEAP8[$__size_$i$i >> 0] | 0;
  if ($0 << 24 >> 24 < 0) {
   $cond$i22 = HEAP32[$this + 4 >> 2] | 0;
   $cond$i33 = (HEAP32[$this + 8 >> 2] & 2147483647) + -1 | 0;
  } else {
   $cond$i22 = $0 & 255;
   $cond$i33 = 10;
  }
  if (($cond$i33 - $cond$i22 | 0) >>> 0 < $__n >>> 0) {
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEmmmmmm($this, $cond$i33, $cond$i22 + $__n - $cond$i33 | 0, $cond$i22, $cond$i22, 0, 0);
   $3 = HEAP8[$__size_$i$i >> 0] | 0;
  } else $3 = $0;
  if ($3 << 24 >> 24 < 0) $cond$i32 = HEAP32[$this >> 2] | 0; else $cond$i32 = $this;
  __ZNSt3__211char_traitsIcE6assignEPcmc($cond$i32 + $cond$i22 | 0, $__n, $__c) | 0;
  $add8 = $cond$i22 + $__n | 0;
  if ((HEAP8[$__size_$i$i >> 0] | 0) < 0) HEAP32[$this + 4 >> 2] = $add8; else HEAP8[$__size_$i$i >> 0] = $add8;
  HEAP8[$ref$tmp >> 0] = 0;
  __ZNSt3__211char_traitsIcE6assignERcRKc($cond$i32 + $add8 | 0, $ref$tmp);
 }
 STACKTOP = sp;
 return $this | 0;
}

function __ZN8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE10json_valueC2ENS_6detail7value_tE($this, $t) {
 $this = $this | 0;
 $t = $t | 0;
 var $0 = 0, $4 = 0;
 switch ($t << 24 >> 24) {
 case 1:
  {
   HEAP32[$this >> 2] = __ZN8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE6createINS2_IS9_SB_NS1_4lessIvEENS7_INS1_4pairIKS9_SB_EEEEEEJEEEPT_DpOT0_() | 0;
   break;
  }
 case 2:
  {
   HEAP32[$this >> 2] = __ZN8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE6createINS3_ISB_NS7_ISB_EEEEJEEEPT_DpOT0_() | 0;
   break;
  }
 case 3:
  {
   HEAP32[$this >> 2] = __ZN8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE6createIS9_JRA1_KcEEEPT_DpOT0_(62173) | 0;
   break;
  }
 case 4:
  {
   HEAP8[$this >> 0] = 0;
   break;
  }
 case 5:
  {
   $0 = $this;
   HEAP32[$0 >> 2] = 0;
   HEAP32[$0 + 4 >> 2] = 0;
   break;
  }
 case 6:
  {
   $4 = $this;
   HEAP32[$4 >> 2] = 0;
   HEAP32[$4 + 4 >> 2] = 0;
   break;
  }
 case 7:
  {
   HEAPF64[$this >> 3] = 0.0;
   break;
  }
 case 0:
  {
   HEAP32[$this >> 2] = 0;
   break;
  }
 default:
  HEAP32[$this >> 2] = 0;
 }
 return;
}

function _LoadTextureFromImage($agg$result, $image) {
 $agg$result = $agg$result | 0;
 $image = $image | 0;
 var $texture = 0, $vararg_buffer = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $vararg_buffer = sp;
 $texture = sp + 4 | 0;
 HEAP32[$texture >> 2] = 0;
 HEAP32[$texture + 4 >> 2] = 0;
 HEAP32[$texture + 8 >> 2] = 0;
 HEAP32[$texture + 12 >> 2] = 0;
 HEAP32[$texture + 16 >> 2] = 0;
 if (HEAP32[$image >> 2] | 0) if (HEAP32[$image + 4 >> 2] | 0) if (HEAP32[$image + 8 >> 2] | 0) HEAP32[$texture >> 2] = _rlLoadTexture(HEAP32[$image >> 2] | 0, HEAP32[$image + 4 >> 2] | 0, HEAP32[$image + 8 >> 2] | 0, HEAP32[$image + 16 >> 2] | 0, HEAP32[$image + 12 >> 2] | 0) | 0; else label = 5; else label = 5; else label = 5;
 if ((label | 0) == 5) _TraceLog(4, 37608, $vararg_buffer);
 HEAP32[$texture + 4 >> 2] = HEAP32[$image + 4 >> 2];
 HEAP32[$texture + 8 >> 2] = HEAP32[$image + 8 >> 2];
 HEAP32[$texture + 12 >> 2] = HEAP32[$image + 12 >> 2];
 HEAP32[$texture + 16 >> 2] = HEAP32[$image + 16 >> 2];
 HEAP32[$agg$result >> 2] = HEAP32[$texture >> 2];
 HEAP32[$agg$result + 4 >> 2] = HEAP32[$texture + 4 >> 2];
 HEAP32[$agg$result + 8 >> 2] = HEAP32[$texture + 8 >> 2];
 HEAP32[$agg$result + 12 >> 2] = HEAP32[$texture + 12 >> 2];
 HEAP32[$agg$result + 16 >> 2] = HEAP32[$texture + 16 >> 2];
 STACKTOP = sp;
 return;
}

function __ZNKSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8nlohmann10basic_jsonINS_3mapENS_6vectorES7_bxydS5_NS8_14adl_serializerEEEEENS_19__map_value_compareIS7_SE_NS_4lessIvEELb1EEENS5_ISE_EEE13__upper_boundIA17_cEENS_21__tree_const_iteratorISE_PNS_11__tree_nodeISE_PvEElEERKT_SR_PNS_15__tree_end_nodeIPNS_16__tree_node_baseISP_EEEE($this, $__v, $__root, $__result) {
 $this = $this | 0;
 $__v = $__v | 0;
 $__root = $__root | 0;
 $__result = $__result | 0;
 var $__result$addr$0$lcssa = 0, $__result$addr$06 = 0, $__result$addr$1 = 0, $__root$addr$05 = 0, $cmp$i$i$i = 0;
 if (!$__root) $__result$addr$0$lcssa = $__result; else {
  $__result$addr$06 = $__result;
  $__root$addr$05 = $__root;
  while (1) {
   $cmp$i$i$i = (__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc(__ZNSt3__29__launderIKNS_4pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8nlohmann10basic_jsonINS_3mapENS_6vectorES7_bxydS5_NS9_14adl_serializerEEEEEEEPT_SI_($__root$addr$05 + 16 | 0) | 0, $__v) | 0) > 0;
   $__result$addr$1 = $cmp$i$i$i ? $__root$addr$05 : $__result$addr$06;
   $__root$addr$05 = HEAP32[($cmp$i$i$i ? $__root$addr$05 : $__root$addr$05 + 4 | 0) >> 2] | 0;
   if (!$__root$addr$05) {
    $__result$addr$0$lcssa = $__result$addr$1;
    break;
   } else $__result$addr$06 = $__result$addr$1;
  }
 }
 return $__result$addr$0$lcssa | 0;
}

function __ZNKSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8nlohmann10basic_jsonINS_3mapENS_6vectorES7_bxydS5_NS8_14adl_serializerEEEEENS_19__map_value_compareIS7_SE_NS_4lessIvEELb1EEENS5_ISE_EEE13__upper_boundIA16_cEENS_21__tree_const_iteratorISE_PNS_11__tree_nodeISE_PvEElEERKT_SR_PNS_15__tree_end_nodeIPNS_16__tree_node_baseISP_EEEE($this, $__v, $__root, $__result) {
 $this = $this | 0;
 $__v = $__v | 0;
 $__root = $__root | 0;
 $__result = $__result | 0;
 var $__result$addr$0$lcssa = 0, $__result$addr$06 = 0, $__result$addr$1 = 0, $__root$addr$05 = 0, $cmp$i$i$i = 0;
 if (!$__root) $__result$addr$0$lcssa = $__result; else {
  $__result$addr$06 = $__result;
  $__root$addr$05 = $__root;
  while (1) {
   $cmp$i$i$i = (__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc(__ZNSt3__29__launderIKNS_4pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8nlohmann10basic_jsonINS_3mapENS_6vectorES7_bxydS5_NS9_14adl_serializerEEEEEEEPT_SI_($__root$addr$05 + 16 | 0) | 0, $__v) | 0) > 0;
   $__result$addr$1 = $cmp$i$i$i ? $__root$addr$05 : $__result$addr$06;
   $__root$addr$05 = HEAP32[($cmp$i$i$i ? $__root$addr$05 : $__root$addr$05 + 4 | 0) >> 2] | 0;
   if (!$__root$addr$05) {
    $__result$addr$0$lcssa = $__result$addr$1;
    break;
   } else $__result$addr$06 = $__result$addr$1;
  }
 }
 return $__result$addr$0$lcssa | 0;
}

function __ZNKSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8nlohmann10basic_jsonINS_3mapENS_6vectorES7_bxydS5_NS8_14adl_serializerEEEEENS_19__map_value_compareIS7_SE_NS_4lessIvEELb1EEENS5_ISE_EEE13__upper_boundIA14_cEENS_21__tree_const_iteratorISE_PNS_11__tree_nodeISE_PvEElEERKT_SR_PNS_15__tree_end_nodeIPNS_16__tree_node_baseISP_EEEE($this, $__v, $__root, $__result) {
 $this = $this | 0;
 $__v = $__v | 0;
 $__root = $__root | 0;
 $__result = $__result | 0;
 var $__result$addr$0$lcssa = 0, $__result$addr$06 = 0, $__result$addr$1 = 0, $__root$addr$05 = 0, $cmp$i$i$i = 0;
 if (!$__root) $__result$addr$0$lcssa = $__result; else {
  $__result$addr$06 = $__result;
  $__root$addr$05 = $__root;
  while (1) {
   $cmp$i$i$i = (__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc(__ZNSt3__29__launderIKNS_4pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8nlohmann10basic_jsonINS_3mapENS_6vectorES7_bxydS5_NS9_14adl_serializerEEEEEEEPT_SI_($__root$addr$05 + 16 | 0) | 0, $__v) | 0) > 0;
   $__result$addr$1 = $cmp$i$i$i ? $__root$addr$05 : $__result$addr$06;
   $__root$addr$05 = HEAP32[($cmp$i$i$i ? $__root$addr$05 : $__root$addr$05 + 4 | 0) >> 2] | 0;
   if (!$__root$addr$05) {
    $__result$addr$0$lcssa = $__result$addr$1;
    break;
   } else $__result$addr$06 = $__result$addr$1;
  }
 }
 return $__result$addr$0$lcssa | 0;
}

function __ZNKSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8nlohmann10basic_jsonINS_3mapENS_6vectorES7_bxydS5_NS8_14adl_serializerEEEEENS_19__map_value_compareIS7_SE_NS_4lessIvEELb1EEENS5_ISE_EEE13__upper_boundIA13_cEENS_21__tree_const_iteratorISE_PNS_11__tree_nodeISE_PvEElEERKT_SR_PNS_15__tree_end_nodeIPNS_16__tree_node_baseISP_EEEE($this, $__v, $__root, $__result) {
 $this = $this | 0;
 $__v = $__v | 0;
 $__root = $__root | 0;
 $__result = $__result | 0;
 var $__result$addr$0$lcssa = 0, $__result$addr$06 = 0, $__result$addr$1 = 0, $__root$addr$05 = 0, $cmp$i$i$i = 0;
 if (!$__root) $__result$addr$0$lcssa = $__result; else {
  $__result$addr$06 = $__result;
  $__root$addr$05 = $__root;
  while (1) {
   $cmp$i$i$i = (__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc(__ZNSt3__29__launderIKNS_4pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8nlohmann10basic_jsonINS_3mapENS_6vectorES7_bxydS5_NS9_14adl_serializerEEEEEEEPT_SI_($__root$addr$05 + 16 | 0) | 0, $__v) | 0) > 0;
   $__result$addr$1 = $cmp$i$i$i ? $__root$addr$05 : $__result$addr$06;
   $__root$addr$05 = HEAP32[($cmp$i$i$i ? $__root$addr$05 : $__root$addr$05 + 4 | 0) >> 2] | 0;
   if (!$__root$addr$05) {
    $__result$addr$0$lcssa = $__result$addr$1;
    break;
   } else $__result$addr$06 = $__result$addr$1;
  }
 }
 return $__result$addr$0$lcssa | 0;
}

function __ZNKSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8nlohmann10basic_jsonINS_3mapENS_6vectorES7_bxydS5_NS8_14adl_serializerEEEEENS_19__map_value_compareIS7_SE_NS_4lessIvEELb1EEENS5_ISE_EEE13__upper_boundIA12_cEENS_21__tree_const_iteratorISE_PNS_11__tree_nodeISE_PvEElEERKT_SR_PNS_15__tree_end_nodeIPNS_16__tree_node_baseISP_EEEE($this, $__v, $__root, $__result) {
 $this = $this | 0;
 $__v = $__v | 0;
 $__root = $__root | 0;
 $__result = $__result | 0;
 var $__result$addr$0$lcssa = 0, $__result$addr$06 = 0, $__result$addr$1 = 0, $__root$addr$05 = 0, $cmp$i$i$i = 0;
 if (!$__root) $__result$addr$0$lcssa = $__result; else {
  $__result$addr$06 = $__result;
  $__root$addr$05 = $__root;
  while (1) {
   $cmp$i$i$i = (__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc(__ZNSt3__29__launderIKNS_4pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8nlohmann10basic_jsonINS_3mapENS_6vectorES7_bxydS5_NS9_14adl_serializerEEEEEEEPT_SI_($__root$addr$05 + 16 | 0) | 0, $__v) | 0) > 0;
   $__result$addr$1 = $cmp$i$i$i ? $__root$addr$05 : $__result$addr$06;
   $__root$addr$05 = HEAP32[($cmp$i$i$i ? $__root$addr$05 : $__root$addr$05 + 4 | 0) >> 2] | 0;
   if (!$__root$addr$05) {
    $__result$addr$0$lcssa = $__result$addr$1;
    break;
   } else $__result$addr$06 = $__result$addr$1;
  }
 }
 return $__result$addr$0$lcssa | 0;
}

function __ZNKSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8nlohmann10basic_jsonINS_3mapENS_6vectorES7_bxydS5_NS8_14adl_serializerEEEEENS_19__map_value_compareIS7_SE_NS_4lessIvEELb1EEENS5_ISE_EEE13__upper_boundIA11_cEENS_21__tree_const_iteratorISE_PNS_11__tree_nodeISE_PvEElEERKT_SR_PNS_15__tree_end_nodeIPNS_16__tree_node_baseISP_EEEE($this, $__v, $__root, $__result) {
 $this = $this | 0;
 $__v = $__v | 0;
 $__root = $__root | 0;
 $__result = $__result | 0;
 var $__result$addr$0$lcssa = 0, $__result$addr$06 = 0, $__result$addr$1 = 0, $__root$addr$05 = 0, $cmp$i$i$i = 0;
 if (!$__root) $__result$addr$0$lcssa = $__result; else {
  $__result$addr$06 = $__result;
  $__root$addr$05 = $__root;
  while (1) {
   $cmp$i$i$i = (__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc(__ZNSt3__29__launderIKNS_4pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8nlohmann10basic_jsonINS_3mapENS_6vectorES7_bxydS5_NS9_14adl_serializerEEEEEEEPT_SI_($__root$addr$05 + 16 | 0) | 0, $__v) | 0) > 0;
   $__result$addr$1 = $cmp$i$i$i ? $__root$addr$05 : $__result$addr$06;
   $__root$addr$05 = HEAP32[($cmp$i$i$i ? $__root$addr$05 : $__root$addr$05 + 4 | 0) >> 2] | 0;
   if (!$__root$addr$05) {
    $__result$addr$0$lcssa = $__result$addr$1;
    break;
   } else $__result$addr$06 = $__result$addr$1;
  }
 }
 return $__result$addr$0$lcssa | 0;
}

function __ZNKSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8nlohmann10basic_jsonINS_3mapENS_6vectorES7_bxydS5_NS8_14adl_serializerEEEEENS_19__map_value_compareIS7_SE_NS_4lessIvEELb1EEENS5_ISE_EEE13__upper_boundIA10_cEENS_21__tree_const_iteratorISE_PNS_11__tree_nodeISE_PvEElEERKT_SR_PNS_15__tree_end_nodeIPNS_16__tree_node_baseISP_EEEE($this, $__v, $__root, $__result) {
 $this = $this | 0;
 $__v = $__v | 0;
 $__root = $__root | 0;
 $__result = $__result | 0;
 var $__result$addr$0$lcssa = 0, $__result$addr$06 = 0, $__result$addr$1 = 0, $__root$addr$05 = 0, $cmp$i$i$i = 0;
 if (!$__root) $__result$addr$0$lcssa = $__result; else {
  $__result$addr$06 = $__result;
  $__root$addr$05 = $__root;
  while (1) {
   $cmp$i$i$i = (__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc(__ZNSt3__29__launderIKNS_4pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8nlohmann10basic_jsonINS_3mapENS_6vectorES7_bxydS5_NS9_14adl_serializerEEEEEEEPT_SI_($__root$addr$05 + 16 | 0) | 0, $__v) | 0) > 0;
   $__result$addr$1 = $cmp$i$i$i ? $__root$addr$05 : $__result$addr$06;
   $__root$addr$05 = HEAP32[($cmp$i$i$i ? $__root$addr$05 : $__root$addr$05 + 4 | 0) >> 2] | 0;
   if (!$__root$addr$05) {
    $__result$addr$0$lcssa = $__result$addr$1;
    break;
   } else $__result$addr$06 = $__result$addr$1;
  }
 }
 return $__result$addr$0$lcssa | 0;
}

function __ZNKSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8nlohmann10basic_jsonINS_3mapENS_6vectorES7_bxydS5_NS8_14adl_serializerEEEEENS_19__map_value_compareIS7_SE_NS_4lessIvEELb1EEENS5_ISE_EEE13__lower_boundIA17_cEENS_21__tree_const_iteratorISE_PNS_11__tree_nodeISE_PvEElEERKT_SR_PNS_15__tree_end_nodeIPNS_16__tree_node_baseISP_EEEE($this, $__v, $__root, $__result) {
 $this = $this | 0;
 $__v = $__v | 0;
 $__root = $__root | 0;
 $__result = $__result | 0;
 var $__result$addr$0$lcssa = 0, $__result$addr$06 = 0, $__result$addr$1 = 0, $__root$addr$05 = 0, $cmp$i$i$i = 0;
 if (!$__root) $__result$addr$0$lcssa = $__result; else {
  $__result$addr$06 = $__result;
  $__root$addr$05 = $__root;
  while (1) {
   $cmp$i$i$i = (__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc(__ZNSt3__29__launderIKNS_4pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8nlohmann10basic_jsonINS_3mapENS_6vectorES7_bxydS5_NS9_14adl_serializerEEEEEEEPT_SI_($__root$addr$05 + 16 | 0) | 0, $__v) | 0) < 0;
   $__result$addr$1 = $cmp$i$i$i ? $__result$addr$06 : $__root$addr$05;
   $__root$addr$05 = HEAP32[($cmp$i$i$i ? $__root$addr$05 + 4 | 0 : $__root$addr$05) >> 2] | 0;
   if (!$__root$addr$05) {
    $__result$addr$0$lcssa = $__result$addr$1;
    break;
   } else $__result$addr$06 = $__result$addr$1;
  }
 }
 return $__result$addr$0$lcssa | 0;
}

function __ZNKSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8nlohmann10basic_jsonINS_3mapENS_6vectorES7_bxydS5_NS8_14adl_serializerEEEEENS_19__map_value_compareIS7_SE_NS_4lessIvEELb1EEENS5_ISE_EEE13__lower_boundIA16_cEENS_21__tree_const_iteratorISE_PNS_11__tree_nodeISE_PvEElEERKT_SR_PNS_15__tree_end_nodeIPNS_16__tree_node_baseISP_EEEE($this, $__v, $__root, $__result) {
 $this = $this | 0;
 $__v = $__v | 0;
 $__root = $__root | 0;
 $__result = $__result | 0;
 var $__result$addr$0$lcssa = 0, $__result$addr$06 = 0, $__result$addr$1 = 0, $__root$addr$05 = 0, $cmp$i$i$i = 0;
 if (!$__root) $__result$addr$0$lcssa = $__result; else {
  $__result$addr$06 = $__result;
  $__root$addr$05 = $__root;
  while (1) {
   $cmp$i$i$i = (__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc(__ZNSt3__29__launderIKNS_4pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8nlohmann10basic_jsonINS_3mapENS_6vectorES7_bxydS5_NS9_14adl_serializerEEEEEEEPT_SI_($__root$addr$05 + 16 | 0) | 0, $__v) | 0) < 0;
   $__result$addr$1 = $cmp$i$i$i ? $__result$addr$06 : $__root$addr$05;
   $__root$addr$05 = HEAP32[($cmp$i$i$i ? $__root$addr$05 + 4 | 0 : $__root$addr$05) >> 2] | 0;
   if (!$__root$addr$05) {
    $__result$addr$0$lcssa = $__result$addr$1;
    break;
   } else $__result$addr$06 = $__result$addr$1;
  }
 }
 return $__result$addr$0$lcssa | 0;
}

function __ZNKSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8nlohmann10basic_jsonINS_3mapENS_6vectorES7_bxydS5_NS8_14adl_serializerEEEEENS_19__map_value_compareIS7_SE_NS_4lessIvEELb1EEENS5_ISE_EEE13__lower_boundIA14_cEENS_21__tree_const_iteratorISE_PNS_11__tree_nodeISE_PvEElEERKT_SR_PNS_15__tree_end_nodeIPNS_16__tree_node_baseISP_EEEE($this, $__v, $__root, $__result) {
 $this = $this | 0;
 $__v = $__v | 0;
 $__root = $__root | 0;
 $__result = $__result | 0;
 var $__result$addr$0$lcssa = 0, $__result$addr$06 = 0, $__result$addr$1 = 0, $__root$addr$05 = 0, $cmp$i$i$i = 0;
 if (!$__root) $__result$addr$0$lcssa = $__result; else {
  $__result$addr$06 = $__result;
  $__root$addr$05 = $__root;
  while (1) {
   $cmp$i$i$i = (__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc(__ZNSt3__29__launderIKNS_4pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8nlohmann10basic_jsonINS_3mapENS_6vectorES7_bxydS5_NS9_14adl_serializerEEEEEEEPT_SI_($__root$addr$05 + 16 | 0) | 0, $__v) | 0) < 0;
   $__result$addr$1 = $cmp$i$i$i ? $__result$addr$06 : $__root$addr$05;
   $__root$addr$05 = HEAP32[($cmp$i$i$i ? $__root$addr$05 + 4 | 0 : $__root$addr$05) >> 2] | 0;
   if (!$__root$addr$05) {
    $__result$addr$0$lcssa = $__result$addr$1;
    break;
   } else $__result$addr$06 = $__result$addr$1;
  }
 }
 return $__result$addr$0$lcssa | 0;
}

function __ZNKSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8nlohmann10basic_jsonINS_3mapENS_6vectorES7_bxydS5_NS8_14adl_serializerEEEEENS_19__map_value_compareIS7_SE_NS_4lessIvEELb1EEENS5_ISE_EEE13__lower_boundIA13_cEENS_21__tree_const_iteratorISE_PNS_11__tree_nodeISE_PvEElEERKT_SR_PNS_15__tree_end_nodeIPNS_16__tree_node_baseISP_EEEE($this, $__v, $__root, $__result) {
 $this = $this | 0;
 $__v = $__v | 0;
 $__root = $__root | 0;
 $__result = $__result | 0;
 var $__result$addr$0$lcssa = 0, $__result$addr$06 = 0, $__result$addr$1 = 0, $__root$addr$05 = 0, $cmp$i$i$i = 0;
 if (!$__root) $__result$addr$0$lcssa = $__result; else {
  $__result$addr$06 = $__result;
  $__root$addr$05 = $__root;
  while (1) {
   $cmp$i$i$i = (__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc(__ZNSt3__29__launderIKNS_4pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8nlohmann10basic_jsonINS_3mapENS_6vectorES7_bxydS5_NS9_14adl_serializerEEEEEEEPT_SI_($__root$addr$05 + 16 | 0) | 0, $__v) | 0) < 0;
   $__result$addr$1 = $cmp$i$i$i ? $__result$addr$06 : $__root$addr$05;
   $__root$addr$05 = HEAP32[($cmp$i$i$i ? $__root$addr$05 + 4 | 0 : $__root$addr$05) >> 2] | 0;
   if (!$__root$addr$05) {
    $__result$addr$0$lcssa = $__result$addr$1;
    break;
   } else $__result$addr$06 = $__result$addr$1;
  }
 }
 return $__result$addr$0$lcssa | 0;
}

function __ZNKSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8nlohmann10basic_jsonINS_3mapENS_6vectorES7_bxydS5_NS8_14adl_serializerEEEEENS_19__map_value_compareIS7_SE_NS_4lessIvEELb1EEENS5_ISE_EEE13__lower_boundIA12_cEENS_21__tree_const_iteratorISE_PNS_11__tree_nodeISE_PvEElEERKT_SR_PNS_15__tree_end_nodeIPNS_16__tree_node_baseISP_EEEE($this, $__v, $__root, $__result) {
 $this = $this | 0;
 $__v = $__v | 0;
 $__root = $__root | 0;
 $__result = $__result | 0;
 var $__result$addr$0$lcssa = 0, $__result$addr$06 = 0, $__result$addr$1 = 0, $__root$addr$05 = 0, $cmp$i$i$i = 0;
 if (!$__root) $__result$addr$0$lcssa = $__result; else {
  $__result$addr$06 = $__result;
  $__root$addr$05 = $__root;
  while (1) {
   $cmp$i$i$i = (__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc(__ZNSt3__29__launderIKNS_4pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8nlohmann10basic_jsonINS_3mapENS_6vectorES7_bxydS5_NS9_14adl_serializerEEEEEEEPT_SI_($__root$addr$05 + 16 | 0) | 0, $__v) | 0) < 0;
   $__result$addr$1 = $cmp$i$i$i ? $__result$addr$06 : $__root$addr$05;
   $__root$addr$05 = HEAP32[($cmp$i$i$i ? $__root$addr$05 + 4 | 0 : $__root$addr$05) >> 2] | 0;
   if (!$__root$addr$05) {
    $__result$addr$0$lcssa = $__result$addr$1;
    break;
   } else $__result$addr$06 = $__result$addr$1;
  }
 }
 return $__result$addr$0$lcssa | 0;
}

function __ZNKSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8nlohmann10basic_jsonINS_3mapENS_6vectorES7_bxydS5_NS8_14adl_serializerEEEEENS_19__map_value_compareIS7_SE_NS_4lessIvEELb1EEENS5_ISE_EEE13__lower_boundIA11_cEENS_21__tree_const_iteratorISE_PNS_11__tree_nodeISE_PvEElEERKT_SR_PNS_15__tree_end_nodeIPNS_16__tree_node_baseISP_EEEE($this, $__v, $__root, $__result) {
 $this = $this | 0;
 $__v = $__v | 0;
 $__root = $__root | 0;
 $__result = $__result | 0;
 var $__result$addr$0$lcssa = 0, $__result$addr$06 = 0, $__result$addr$1 = 0, $__root$addr$05 = 0, $cmp$i$i$i = 0;
 if (!$__root) $__result$addr$0$lcssa = $__result; else {
  $__result$addr$06 = $__result;
  $__root$addr$05 = $__root;
  while (1) {
   $cmp$i$i$i = (__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc(__ZNSt3__29__launderIKNS_4pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8nlohmann10basic_jsonINS_3mapENS_6vectorES7_bxydS5_NS9_14adl_serializerEEEEEEEPT_SI_($__root$addr$05 + 16 | 0) | 0, $__v) | 0) < 0;
   $__result$addr$1 = $cmp$i$i$i ? $__result$addr$06 : $__root$addr$05;
   $__root$addr$05 = HEAP32[($cmp$i$i$i ? $__root$addr$05 + 4 | 0 : $__root$addr$05) >> 2] | 0;
   if (!$__root$addr$05) {
    $__result$addr$0$lcssa = $__result$addr$1;
    break;
   } else $__result$addr$06 = $__result$addr$1;
  }
 }
 return $__result$addr$0$lcssa | 0;
}

function __ZNKSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8nlohmann10basic_jsonINS_3mapENS_6vectorES7_bxydS5_NS8_14adl_serializerEEEEENS_19__map_value_compareIS7_SE_NS_4lessIvEELb1EEENS5_ISE_EEE13__lower_boundIA10_cEENS_21__tree_const_iteratorISE_PNS_11__tree_nodeISE_PvEElEERKT_SR_PNS_15__tree_end_nodeIPNS_16__tree_node_baseISP_EEEE($this, $__v, $__root, $__result) {
 $this = $this | 0;
 $__v = $__v | 0;
 $__root = $__root | 0;
 $__result = $__result | 0;
 var $__result$addr$0$lcssa = 0, $__result$addr$06 = 0, $__result$addr$1 = 0, $__root$addr$05 = 0, $cmp$i$i$i = 0;
 if (!$__root) $__result$addr$0$lcssa = $__result; else {
  $__result$addr$06 = $__result;
  $__root$addr$05 = $__root;
  while (1) {
   $cmp$i$i$i = (__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc(__ZNSt3__29__launderIKNS_4pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8nlohmann10basic_jsonINS_3mapENS_6vectorES7_bxydS5_NS9_14adl_serializerEEEEEEEPT_SI_($__root$addr$05 + 16 | 0) | 0, $__v) | 0) < 0;
   $__result$addr$1 = $cmp$i$i$i ? $__result$addr$06 : $__root$addr$05;
   $__root$addr$05 = HEAP32[($cmp$i$i$i ? $__root$addr$05 + 4 | 0 : $__root$addr$05) >> 2] | 0;
   if (!$__root$addr$05) {
    $__result$addr$0$lcssa = $__result$addr$1;
    break;
   } else $__result$addr$06 = $__result$addr$1;
  }
 }
 return $__result$addr$0$lcssa | 0;
}

function __ZNKSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8nlohmann10basic_jsonINS_3mapENS_6vectorES7_bxydS5_NS8_14adl_serializerEEEEENS_19__map_value_compareIS7_SE_NS_4lessIvEELb1EEENS5_ISE_EEE13__upper_boundIA9_cEENS_21__tree_const_iteratorISE_PNS_11__tree_nodeISE_PvEElEERKT_SR_PNS_15__tree_end_nodeIPNS_16__tree_node_baseISP_EEEE($this, $__v, $__root, $__result) {
 $this = $this | 0;
 $__v = $__v | 0;
 $__root = $__root | 0;
 $__result = $__result | 0;
 var $__result$addr$0$lcssa = 0, $__result$addr$06 = 0, $__result$addr$1 = 0, $__root$addr$05 = 0, $cmp$i$i$i = 0;
 if (!$__root) $__result$addr$0$lcssa = $__result; else {
  $__result$addr$06 = $__result;
  $__root$addr$05 = $__root;
  while (1) {
   $cmp$i$i$i = (__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc(__ZNSt3__29__launderIKNS_4pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8nlohmann10basic_jsonINS_3mapENS_6vectorES7_bxydS5_NS9_14adl_serializerEEEEEEEPT_SI_($__root$addr$05 + 16 | 0) | 0, $__v) | 0) > 0;
   $__result$addr$1 = $cmp$i$i$i ? $__root$addr$05 : $__result$addr$06;
   $__root$addr$05 = HEAP32[($cmp$i$i$i ? $__root$addr$05 : $__root$addr$05 + 4 | 0) >> 2] | 0;
   if (!$__root$addr$05) {
    $__result$addr$0$lcssa = $__result$addr$1;
    break;
   } else $__result$addr$06 = $__result$addr$1;
  }
 }
 return $__result$addr$0$lcssa | 0;
}

function __ZNKSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8nlohmann10basic_jsonINS_3mapENS_6vectorES7_bxydS5_NS8_14adl_serializerEEEEENS_19__map_value_compareIS7_SE_NS_4lessIvEELb1EEENS5_ISE_EEE13__upper_boundIA8_cEENS_21__tree_const_iteratorISE_PNS_11__tree_nodeISE_PvEElEERKT_SR_PNS_15__tree_end_nodeIPNS_16__tree_node_baseISP_EEEE($this, $__v, $__root, $__result) {
 $this = $this | 0;
 $__v = $__v | 0;
 $__root = $__root | 0;
 $__result = $__result | 0;
 var $__result$addr$0$lcssa = 0, $__result$addr$06 = 0, $__result$addr$1 = 0, $__root$addr$05 = 0, $cmp$i$i$i = 0;
 if (!$__root) $__result$addr$0$lcssa = $__result; else {
  $__result$addr$06 = $__result;
  $__root$addr$05 = $__root;
  while (1) {
   $cmp$i$i$i = (__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc(__ZNSt3__29__launderIKNS_4pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8nlohmann10basic_jsonINS_3mapENS_6vectorES7_bxydS5_NS9_14adl_serializerEEEEEEEPT_SI_($__root$addr$05 + 16 | 0) | 0, $__v) | 0) > 0;
   $__result$addr$1 = $cmp$i$i$i ? $__root$addr$05 : $__result$addr$06;
   $__root$addr$05 = HEAP32[($cmp$i$i$i ? $__root$addr$05 : $__root$addr$05 + 4 | 0) >> 2] | 0;
   if (!$__root$addr$05) {
    $__result$addr$0$lcssa = $__result$addr$1;
    break;
   } else $__result$addr$06 = $__result$addr$1;
  }
 }
 return $__result$addr$0$lcssa | 0;
}

function __ZNKSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8nlohmann10basic_jsonINS_3mapENS_6vectorES7_bxydS5_NS8_14adl_serializerEEEEENS_19__map_value_compareIS7_SE_NS_4lessIvEELb1EEENS5_ISE_EEE13__upper_boundIA7_cEENS_21__tree_const_iteratorISE_PNS_11__tree_nodeISE_PvEElEERKT_SR_PNS_15__tree_end_nodeIPNS_16__tree_node_baseISP_EEEE($this, $__v, $__root, $__result) {
 $this = $this | 0;
 $__v = $__v | 0;
 $__root = $__root | 0;
 $__result = $__result | 0;
 var $__result$addr$0$lcssa = 0, $__result$addr$06 = 0, $__result$addr$1 = 0, $__root$addr$05 = 0, $cmp$i$i$i = 0;
 if (!$__root) $__result$addr$0$lcssa = $__result; else {
  $__result$addr$06 = $__result;
  $__root$addr$05 = $__root;
  while (1) {
   $cmp$i$i$i = (__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc(__ZNSt3__29__launderIKNS_4pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8nlohmann10basic_jsonINS_3mapENS_6vectorES7_bxydS5_NS9_14adl_serializerEEEEEEEPT_SI_($__root$addr$05 + 16 | 0) | 0, $__v) | 0) > 0;
   $__result$addr$1 = $cmp$i$i$i ? $__root$addr$05 : $__result$addr$06;
   $__root$addr$05 = HEAP32[($cmp$i$i$i ? $__root$addr$05 : $__root$addr$05 + 4 | 0) >> 2] | 0;
   if (!$__root$addr$05) {
    $__result$addr$0$lcssa = $__result$addr$1;
    break;
   } else $__result$addr$06 = $__result$addr$1;
  }
 }
 return $__result$addr$0$lcssa | 0;
}

function __ZNKSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8nlohmann10basic_jsonINS_3mapENS_6vectorES7_bxydS5_NS8_14adl_serializerEEEEENS_19__map_value_compareIS7_SE_NS_4lessIvEELb1EEENS5_ISE_EEE13__upper_boundIA6_cEENS_21__tree_const_iteratorISE_PNS_11__tree_nodeISE_PvEElEERKT_SR_PNS_15__tree_end_nodeIPNS_16__tree_node_baseISP_EEEE($this, $__v, $__root, $__result) {
 $this = $this | 0;
 $__v = $__v | 0;
 $__root = $__root | 0;
 $__result = $__result | 0;
 var $__result$addr$0$lcssa = 0, $__result$addr$06 = 0, $__result$addr$1 = 0, $__root$addr$05 = 0, $cmp$i$i$i = 0;
 if (!$__root) $__result$addr$0$lcssa = $__result; else {
  $__result$addr$06 = $__result;
  $__root$addr$05 = $__root;
  while (1) {
   $cmp$i$i$i = (__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc(__ZNSt3__29__launderIKNS_4pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8nlohmann10basic_jsonINS_3mapENS_6vectorES7_bxydS5_NS9_14adl_serializerEEEEEEEPT_SI_($__root$addr$05 + 16 | 0) | 0, $__v) | 0) > 0;
   $__result$addr$1 = $cmp$i$i$i ? $__root$addr$05 : $__result$addr$06;
   $__root$addr$05 = HEAP32[($cmp$i$i$i ? $__root$addr$05 : $__root$addr$05 + 4 | 0) >> 2] | 0;
   if (!$__root$addr$05) {
    $__result$addr$0$lcssa = $__result$addr$1;
    break;
   } else $__result$addr$06 = $__result$addr$1;
  }
 }
 return $__result$addr$0$lcssa | 0;
}

function __ZNKSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8nlohmann10basic_jsonINS_3mapENS_6vectorES7_bxydS5_NS8_14adl_serializerEEEEENS_19__map_value_compareIS7_SE_NS_4lessIvEELb1EEENS5_ISE_EEE13__upper_boundIA5_cEENS_21__tree_const_iteratorISE_PNS_11__tree_nodeISE_PvEElEERKT_SR_PNS_15__tree_end_nodeIPNS_16__tree_node_baseISP_EEEE($this, $__v, $__root, $__result) {
 $this = $this | 0;
 $__v = $__v | 0;
 $__root = $__root | 0;
 $__result = $__result | 0;
 var $__result$addr$0$lcssa = 0, $__result$addr$06 = 0, $__result$addr$1 = 0, $__root$addr$05 = 0, $cmp$i$i$i = 0;
 if (!$__root) $__result$addr$0$lcssa = $__result; else {
  $__result$addr$06 = $__result;
  $__root$addr$05 = $__root;
  while (1) {
   $cmp$i$i$i = (__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc(__ZNSt3__29__launderIKNS_4pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8nlohmann10basic_jsonINS_3mapENS_6vectorES7_bxydS5_NS9_14adl_serializerEEEEEEEPT_SI_($__root$addr$05 + 16 | 0) | 0, $__v) | 0) > 0;
   $__result$addr$1 = $cmp$i$i$i ? $__root$addr$05 : $__result$addr$06;
   $__root$addr$05 = HEAP32[($cmp$i$i$i ? $__root$addr$05 : $__root$addr$05 + 4 | 0) >> 2] | 0;
   if (!$__root$addr$05) {
    $__result$addr$0$lcssa = $__result$addr$1;
    break;
   } else $__result$addr$06 = $__result$addr$1;
  }
 }
 return $__result$addr$0$lcssa | 0;
}

function __ZNKSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8nlohmann10basic_jsonINS_3mapENS_6vectorES7_bxydS5_NS8_14adl_serializerEEEEENS_19__map_value_compareIS7_SE_NS_4lessIvEELb1EEENS5_ISE_EEE13__upper_boundIA4_cEENS_21__tree_const_iteratorISE_PNS_11__tree_nodeISE_PvEElEERKT_SR_PNS_15__tree_end_nodeIPNS_16__tree_node_baseISP_EEEE($this, $__v, $__root, $__result) {
 $this = $this | 0;
 $__v = $__v | 0;
 $__root = $__root | 0;
 $__result = $__result | 0;
 var $__result$addr$0$lcssa = 0, $__result$addr$06 = 0, $__result$addr$1 = 0, $__root$addr$05 = 0, $cmp$i$i$i = 0;
 if (!$__root) $__result$addr$0$lcssa = $__result; else {
  $__result$addr$06 = $__result;
  $__root$addr$05 = $__root;
  while (1) {
   $cmp$i$i$i = (__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc(__ZNSt3__29__launderIKNS_4pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8nlohmann10basic_jsonINS_3mapENS_6vectorES7_bxydS5_NS9_14adl_serializerEEEEEEEPT_SI_($__root$addr$05 + 16 | 0) | 0, $__v) | 0) > 0;
   $__result$addr$1 = $cmp$i$i$i ? $__root$addr$05 : $__result$addr$06;
   $__root$addr$05 = HEAP32[($cmp$i$i$i ? $__root$addr$05 : $__root$addr$05 + 4 | 0) >> 2] | 0;
   if (!$__root$addr$05) {
    $__result$addr$0$lcssa = $__result$addr$1;
    break;
   } else $__result$addr$06 = $__result$addr$1;
  }
 }
 return $__result$addr$0$lcssa | 0;
}

function __ZNKSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8nlohmann10basic_jsonINS_3mapENS_6vectorES7_bxydS5_NS8_14adl_serializerEEEEENS_19__map_value_compareIS7_SE_NS_4lessIvEELb1EEENS5_ISE_EEE13__upper_boundIA3_cEENS_21__tree_const_iteratorISE_PNS_11__tree_nodeISE_PvEElEERKT_SR_PNS_15__tree_end_nodeIPNS_16__tree_node_baseISP_EEEE($this, $__v, $__root, $__result) {
 $this = $this | 0;
 $__v = $__v | 0;
 $__root = $__root | 0;
 $__result = $__result | 0;
 var $__result$addr$0$lcssa = 0, $__result$addr$06 = 0, $__result$addr$1 = 0, $__root$addr$05 = 0, $cmp$i$i$i = 0;
 if (!$__root) $__result$addr$0$lcssa = $__result; else {
  $__result$addr$06 = $__result;
  $__root$addr$05 = $__root;
  while (1) {
   $cmp$i$i$i = (__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc(__ZNSt3__29__launderIKNS_4pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8nlohmann10basic_jsonINS_3mapENS_6vectorES7_bxydS5_NS9_14adl_serializerEEEEEEEPT_SI_($__root$addr$05 + 16 | 0) | 0, $__v) | 0) > 0;
   $__result$addr$1 = $cmp$i$i$i ? $__root$addr$05 : $__result$addr$06;
   $__root$addr$05 = HEAP32[($cmp$i$i$i ? $__root$addr$05 : $__root$addr$05 + 4 | 0) >> 2] | 0;
   if (!$__root$addr$05) {
    $__result$addr$0$lcssa = $__result$addr$1;
    break;
   } else $__result$addr$06 = $__result$addr$1;
  }
 }
 return $__result$addr$0$lcssa | 0;
}

function __ZNKSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8nlohmann10basic_jsonINS_3mapENS_6vectorES7_bxydS5_NS8_14adl_serializerEEEEENS_19__map_value_compareIS7_SE_NS_4lessIvEELb1EEENS5_ISE_EEE13__upper_boundIA2_cEENS_21__tree_const_iteratorISE_PNS_11__tree_nodeISE_PvEElEERKT_SR_PNS_15__tree_end_nodeIPNS_16__tree_node_baseISP_EEEE($this, $__v, $__root, $__result) {
 $this = $this | 0;
 $__v = $__v | 0;
 $__root = $__root | 0;
 $__result = $__result | 0;
 var $__result$addr$0$lcssa = 0, $__result$addr$06 = 0, $__result$addr$1 = 0, $__root$addr$05 = 0, $cmp$i$i$i = 0;
 if (!$__root) $__result$addr$0$lcssa = $__result; else {
  $__result$addr$06 = $__result;
  $__root$addr$05 = $__root;
  while (1) {
   $cmp$i$i$i = (__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc(__ZNSt3__29__launderIKNS_4pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8nlohmann10basic_jsonINS_3mapENS_6vectorES7_bxydS5_NS9_14adl_serializerEEEEEEEPT_SI_($__root$addr$05 + 16 | 0) | 0, $__v) | 0) > 0;
   $__result$addr$1 = $cmp$i$i$i ? $__root$addr$05 : $__result$addr$06;
   $__root$addr$05 = HEAP32[($cmp$i$i$i ? $__root$addr$05 : $__root$addr$05 + 4 | 0) >> 2] | 0;
   if (!$__root$addr$05) {
    $__result$addr$0$lcssa = $__result$addr$1;
    break;
   } else $__result$addr$06 = $__result$addr$1;
  }
 }
 return $__result$addr$0$lcssa | 0;
}

function __ZNKSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8nlohmann10basic_jsonINS_3mapENS_6vectorES7_bxydS5_NS8_14adl_serializerEEEEENS_19__map_value_compareIS7_SE_NS_4lessIvEELb1EEENS5_ISE_EEE13__lower_boundIA9_cEENS_21__tree_const_iteratorISE_PNS_11__tree_nodeISE_PvEElEERKT_SR_PNS_15__tree_end_nodeIPNS_16__tree_node_baseISP_EEEE($this, $__v, $__root, $__result) {
 $this = $this | 0;
 $__v = $__v | 0;
 $__root = $__root | 0;
 $__result = $__result | 0;
 var $__result$addr$0$lcssa = 0, $__result$addr$06 = 0, $__result$addr$1 = 0, $__root$addr$05 = 0, $cmp$i$i$i = 0;
 if (!$__root) $__result$addr$0$lcssa = $__result; else {
  $__result$addr$06 = $__result;
  $__root$addr$05 = $__root;
  while (1) {
   $cmp$i$i$i = (__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc(__ZNSt3__29__launderIKNS_4pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8nlohmann10basic_jsonINS_3mapENS_6vectorES7_bxydS5_NS9_14adl_serializerEEEEEEEPT_SI_($__root$addr$05 + 16 | 0) | 0, $__v) | 0) < 0;
   $__result$addr$1 = $cmp$i$i$i ? $__result$addr$06 : $__root$addr$05;
   $__root$addr$05 = HEAP32[($cmp$i$i$i ? $__root$addr$05 + 4 | 0 : $__root$addr$05) >> 2] | 0;
   if (!$__root$addr$05) {
    $__result$addr$0$lcssa = $__result$addr$1;
    break;
   } else $__result$addr$06 = $__result$addr$1;
  }
 }
 return $__result$addr$0$lcssa | 0;
}

function __ZNKSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8nlohmann10basic_jsonINS_3mapENS_6vectorES7_bxydS5_NS8_14adl_serializerEEEEENS_19__map_value_compareIS7_SE_NS_4lessIvEELb1EEENS5_ISE_EEE13__lower_boundIA8_cEENS_21__tree_const_iteratorISE_PNS_11__tree_nodeISE_PvEElEERKT_SR_PNS_15__tree_end_nodeIPNS_16__tree_node_baseISP_EEEE($this, $__v, $__root, $__result) {
 $this = $this | 0;
 $__v = $__v | 0;
 $__root = $__root | 0;
 $__result = $__result | 0;
 var $__result$addr$0$lcssa = 0, $__result$addr$06 = 0, $__result$addr$1 = 0, $__root$addr$05 = 0, $cmp$i$i$i = 0;
 if (!$__root) $__result$addr$0$lcssa = $__result; else {
  $__result$addr$06 = $__result;
  $__root$addr$05 = $__root;
  while (1) {
   $cmp$i$i$i = (__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc(__ZNSt3__29__launderIKNS_4pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8nlohmann10basic_jsonINS_3mapENS_6vectorES7_bxydS5_NS9_14adl_serializerEEEEEEEPT_SI_($__root$addr$05 + 16 | 0) | 0, $__v) | 0) < 0;
   $__result$addr$1 = $cmp$i$i$i ? $__result$addr$06 : $__root$addr$05;
   $__root$addr$05 = HEAP32[($cmp$i$i$i ? $__root$addr$05 + 4 | 0 : $__root$addr$05) >> 2] | 0;
   if (!$__root$addr$05) {
    $__result$addr$0$lcssa = $__result$addr$1;
    break;
   } else $__result$addr$06 = $__result$addr$1;
  }
 }
 return $__result$addr$0$lcssa | 0;
}

function __ZNKSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8nlohmann10basic_jsonINS_3mapENS_6vectorES7_bxydS5_NS8_14adl_serializerEEEEENS_19__map_value_compareIS7_SE_NS_4lessIvEELb1EEENS5_ISE_EEE13__lower_boundIA7_cEENS_21__tree_const_iteratorISE_PNS_11__tree_nodeISE_PvEElEERKT_SR_PNS_15__tree_end_nodeIPNS_16__tree_node_baseISP_EEEE($this, $__v, $__root, $__result) {
 $this = $this | 0;
 $__v = $__v | 0;
 $__root = $__root | 0;
 $__result = $__result | 0;
 var $__result$addr$0$lcssa = 0, $__result$addr$06 = 0, $__result$addr$1 = 0, $__root$addr$05 = 0, $cmp$i$i$i = 0;
 if (!$__root) $__result$addr$0$lcssa = $__result; else {
  $__result$addr$06 = $__result;
  $__root$addr$05 = $__root;
  while (1) {
   $cmp$i$i$i = (__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc(__ZNSt3__29__launderIKNS_4pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8nlohmann10basic_jsonINS_3mapENS_6vectorES7_bxydS5_NS9_14adl_serializerEEEEEEEPT_SI_($__root$addr$05 + 16 | 0) | 0, $__v) | 0) < 0;
   $__result$addr$1 = $cmp$i$i$i ? $__result$addr$06 : $__root$addr$05;
   $__root$addr$05 = HEAP32[($cmp$i$i$i ? $__root$addr$05 + 4 | 0 : $__root$addr$05) >> 2] | 0;
   if (!$__root$addr$05) {
    $__result$addr$0$lcssa = $__result$addr$1;
    break;
   } else $__result$addr$06 = $__result$addr$1;
  }
 }
 return $__result$addr$0$lcssa | 0;
}

function __ZNKSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8nlohmann10basic_jsonINS_3mapENS_6vectorES7_bxydS5_NS8_14adl_serializerEEEEENS_19__map_value_compareIS7_SE_NS_4lessIvEELb1EEENS5_ISE_EEE13__lower_boundIA6_cEENS_21__tree_const_iteratorISE_PNS_11__tree_nodeISE_PvEElEERKT_SR_PNS_15__tree_end_nodeIPNS_16__tree_node_baseISP_EEEE($this, $__v, $__root, $__result) {
 $this = $this | 0;
 $__v = $__v | 0;
 $__root = $__root | 0;
 $__result = $__result | 0;
 var $__result$addr$0$lcssa = 0, $__result$addr$06 = 0, $__result$addr$1 = 0, $__root$addr$05 = 0, $cmp$i$i$i = 0;
 if (!$__root) $__result$addr$0$lcssa = $__result; else {
  $__result$addr$06 = $__result;
  $__root$addr$05 = $__root;
  while (1) {
   $cmp$i$i$i = (__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc(__ZNSt3__29__launderIKNS_4pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8nlohmann10basic_jsonINS_3mapENS_6vectorES7_bxydS5_NS9_14adl_serializerEEEEEEEPT_SI_($__root$addr$05 + 16 | 0) | 0, $__v) | 0) < 0;
   $__result$addr$1 = $cmp$i$i$i ? $__result$addr$06 : $__root$addr$05;
   $__root$addr$05 = HEAP32[($cmp$i$i$i ? $__root$addr$05 + 4 | 0 : $__root$addr$05) >> 2] | 0;
   if (!$__root$addr$05) {
    $__result$addr$0$lcssa = $__result$addr$1;
    break;
   } else $__result$addr$06 = $__result$addr$1;
  }
 }
 return $__result$addr$0$lcssa | 0;
}

function __ZNKSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8nlohmann10basic_jsonINS_3mapENS_6vectorES7_bxydS5_NS8_14adl_serializerEEEEENS_19__map_value_compareIS7_SE_NS_4lessIvEELb1EEENS5_ISE_EEE13__lower_boundIA5_cEENS_21__tree_const_iteratorISE_PNS_11__tree_nodeISE_PvEElEERKT_SR_PNS_15__tree_end_nodeIPNS_16__tree_node_baseISP_EEEE($this, $__v, $__root, $__result) {
 $this = $this | 0;
 $__v = $__v | 0;
 $__root = $__root | 0;
 $__result = $__result | 0;
 var $__result$addr$0$lcssa = 0, $__result$addr$06 = 0, $__result$addr$1 = 0, $__root$addr$05 = 0, $cmp$i$i$i = 0;
 if (!$__root) $__result$addr$0$lcssa = $__result; else {
  $__result$addr$06 = $__result;
  $__root$addr$05 = $__root;
  while (1) {
   $cmp$i$i$i = (__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc(__ZNSt3__29__launderIKNS_4pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8nlohmann10basic_jsonINS_3mapENS_6vectorES7_bxydS5_NS9_14adl_serializerEEEEEEEPT_SI_($__root$addr$05 + 16 | 0) | 0, $__v) | 0) < 0;
   $__result$addr$1 = $cmp$i$i$i ? $__result$addr$06 : $__root$addr$05;
   $__root$addr$05 = HEAP32[($cmp$i$i$i ? $__root$addr$05 + 4 | 0 : $__root$addr$05) >> 2] | 0;
   if (!$__root$addr$05) {
    $__result$addr$0$lcssa = $__result$addr$1;
    break;
   } else $__result$addr$06 = $__result$addr$1;
  }
 }
 return $__result$addr$0$lcssa | 0;
}

function __ZNKSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8nlohmann10basic_jsonINS_3mapENS_6vectorES7_bxydS5_NS8_14adl_serializerEEEEENS_19__map_value_compareIS7_SE_NS_4lessIvEELb1EEENS5_ISE_EEE13__lower_boundIA4_cEENS_21__tree_const_iteratorISE_PNS_11__tree_nodeISE_PvEElEERKT_SR_PNS_15__tree_end_nodeIPNS_16__tree_node_baseISP_EEEE($this, $__v, $__root, $__result) {
 $this = $this | 0;
 $__v = $__v | 0;
 $__root = $__root | 0;
 $__result = $__result | 0;
 var $__result$addr$0$lcssa = 0, $__result$addr$06 = 0, $__result$addr$1 = 0, $__root$addr$05 = 0, $cmp$i$i$i = 0;
 if (!$__root) $__result$addr$0$lcssa = $__result; else {
  $__result$addr$06 = $__result;
  $__root$addr$05 = $__root;
  while (1) {
   $cmp$i$i$i = (__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc(__ZNSt3__29__launderIKNS_4pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8nlohmann10basic_jsonINS_3mapENS_6vectorES7_bxydS5_NS9_14adl_serializerEEEEEEEPT_SI_($__root$addr$05 + 16 | 0) | 0, $__v) | 0) < 0;
   $__result$addr$1 = $cmp$i$i$i ? $__result$addr$06 : $__root$addr$05;
   $__root$addr$05 = HEAP32[($cmp$i$i$i ? $__root$addr$05 + 4 | 0 : $__root$addr$05) >> 2] | 0;
   if (!$__root$addr$05) {
    $__result$addr$0$lcssa = $__result$addr$1;
    break;
   } else $__result$addr$06 = $__result$addr$1;
  }
 }
 return $__result$addr$0$lcssa | 0;
}

function __ZNKSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8nlohmann10basic_jsonINS_3mapENS_6vectorES7_bxydS5_NS8_14adl_serializerEEEEENS_19__map_value_compareIS7_SE_NS_4lessIvEELb1EEENS5_ISE_EEE13__lower_boundIA3_cEENS_21__tree_const_iteratorISE_PNS_11__tree_nodeISE_PvEElEERKT_SR_PNS_15__tree_end_nodeIPNS_16__tree_node_baseISP_EEEE($this, $__v, $__root, $__result) {
 $this = $this | 0;
 $__v = $__v | 0;
 $__root = $__root | 0;
 $__result = $__result | 0;
 var $__result$addr$0$lcssa = 0, $__result$addr$06 = 0, $__result$addr$1 = 0, $__root$addr$05 = 0, $cmp$i$i$i = 0;
 if (!$__root) $__result$addr$0$lcssa = $__result; else {
  $__result$addr$06 = $__result;
  $__root$addr$05 = $__root;
  while (1) {
   $cmp$i$i$i = (__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc(__ZNSt3__29__launderIKNS_4pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8nlohmann10basic_jsonINS_3mapENS_6vectorES7_bxydS5_NS9_14adl_serializerEEEEEEEPT_SI_($__root$addr$05 + 16 | 0) | 0, $__v) | 0) < 0;
   $__result$addr$1 = $cmp$i$i$i ? $__result$addr$06 : $__root$addr$05;
   $__root$addr$05 = HEAP32[($cmp$i$i$i ? $__root$addr$05 + 4 | 0 : $__root$addr$05) >> 2] | 0;
   if (!$__root$addr$05) {
    $__result$addr$0$lcssa = $__result$addr$1;
    break;
   } else $__result$addr$06 = $__result$addr$1;
  }
 }
 return $__result$addr$0$lcssa | 0;
}

function __ZNKSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8nlohmann10basic_jsonINS_3mapENS_6vectorES7_bxydS5_NS8_14adl_serializerEEEEENS_19__map_value_compareIS7_SE_NS_4lessIvEELb1EEENS5_ISE_EEE13__lower_boundIA2_cEENS_21__tree_const_iteratorISE_PNS_11__tree_nodeISE_PvEElEERKT_SR_PNS_15__tree_end_nodeIPNS_16__tree_node_baseISP_EEEE($this, $__v, $__root, $__result) {
 $this = $this | 0;
 $__v = $__v | 0;
 $__root = $__root | 0;
 $__result = $__result | 0;
 var $__result$addr$0$lcssa = 0, $__result$addr$06 = 0, $__result$addr$1 = 0, $__root$addr$05 = 0, $cmp$i$i$i = 0;
 if (!$__root) $__result$addr$0$lcssa = $__result; else {
  $__result$addr$06 = $__result;
  $__root$addr$05 = $__root;
  while (1) {
   $cmp$i$i$i = (__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc(__ZNSt3__29__launderIKNS_4pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8nlohmann10basic_jsonINS_3mapENS_6vectorES7_bxydS5_NS9_14adl_serializerEEEEEEEPT_SI_($__root$addr$05 + 16 | 0) | 0, $__v) | 0) < 0;
   $__result$addr$1 = $cmp$i$i$i ? $__result$addr$06 : $__root$addr$05;
   $__root$addr$05 = HEAP32[($cmp$i$i$i ? $__root$addr$05 + 4 | 0 : $__root$addr$05) >> 2] | 0;
   if (!$__root$addr$05) {
    $__result$addr$0$lcssa = $__result$addr$1;
    break;
   } else $__result$addr$06 = $__result$addr$1;
  }
 }
 return $__result$addr$0$lcssa | 0;
}

function __ZNK8nlohmann6detail5lexerINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE16get_token_stringEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 var $0 = 0, $1 = 0, $2 = 0, $__begin$sroa$0$017 = 0, $cs = 0, $vararg_buffer = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $vararg_buffer = sp;
 $cs = sp + 4 | 0;
 HEAP32[$agg$result >> 2] = 0;
 HEAP32[$agg$result + 4 >> 2] = 0;
 HEAP32[$agg$result + 8 >> 2] = 0;
 $0 = HEAP32[$this + 28 >> 2] | 0;
 $1 = HEAP32[$this + 32 >> 2] | 0;
 if (($0 | 0) != ($1 | 0)) {
  $__begin$sroa$0$017 = $0;
  do {
   $2 = HEAP8[$__begin$sroa$0$017 >> 0] | 0;
   if (($2 & 255) < 32) {
    dest = $cs;
    stop = dest + 9 | 0;
    do {
     HEAP8[dest >> 0] = 0;
     dest = dest + 1 | 0;
    } while ((dest | 0) < (stop | 0));
    HEAP32[$vararg_buffer >> 2] = $2 & 255;
    _snprintf($cs, 9, 24619, $vararg_buffer) | 0;
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc($agg$result, $cs) | 0;
   } else __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($agg$result, $2);
   $__begin$sroa$0$017 = $__begin$sroa$0$017 + 1 | 0;
  } while (($__begin$sroa$0$017 | 0) != ($1 | 0));
 }
 STACKTOP = sp;
 return;
}

function __ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE7seekposENS_4fposI11__mbstate_tEEj($agg$result, $this, $__sp, $0) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__sp = $__sp | 0;
 $0 = $0 | 0;
 var $12 = 0, $19 = 0, $23 = 0, $27 = 0, $3 = 0, $32 = 0, $33 = 0, $7 = 0, $__file_ = 0, label = 0;
 label = 0;
 $__file_ = $this + 64 | 0;
 do if (!(HEAP32[$__file_ >> 2] | 0)) label = 3; else if (!(FUNCTION_TABLE_ii[HEAP32[(HEAP32[$this >> 2] | 0) + 24 >> 2] & 127]($this) | 0)) {
  $12 = $__sp + 8 | 0;
  if (!(___fseeko(HEAP32[$__file_ >> 2] | 0, HEAP32[$12 >> 2] | 0, HEAP32[$12 + 4 >> 2] | 0, 0) | 0)) {
   $27 = $__sp;
   $32 = HEAP32[$27 + 4 >> 2] | 0;
   $33 = $this + 72 | 0;
   HEAP32[$33 >> 2] = HEAP32[$27 >> 2];
   HEAP32[$33 + 4 >> 2] = $32;
   HEAP32[$agg$result >> 2] = HEAP32[$__sp >> 2];
   HEAP32[$agg$result + 4 >> 2] = HEAP32[$__sp + 4 >> 2];
   HEAP32[$agg$result + 8 >> 2] = HEAP32[$__sp + 8 >> 2];
   HEAP32[$agg$result + 12 >> 2] = HEAP32[$__sp + 12 >> 2];
   break;
  } else {
   $19 = $agg$result;
   HEAP32[$19 >> 2] = 0;
   HEAP32[$19 + 4 >> 2] = 0;
   $23 = $agg$result + 8 | 0;
   HEAP32[$23 >> 2] = -1;
   HEAP32[$23 + 4 >> 2] = -1;
   break;
  }
 } else label = 3; while (0);
 if ((label | 0) == 3) {
  $3 = $agg$result;
  HEAP32[$3 >> 2] = 0;
  HEAP32[$3 + 4 >> 2] = 0;
  $7 = $agg$result + 8 | 0;
  HEAP32[$7 >> 2] = -1;
  HEAP32[$7 + 4 >> 2] = -1;
 }
 return;
}

function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcm($this, $__s, $__n) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__n = $__n | 0;
 var $0 = 0, $__size_$i$i = 0, $add = 0, $cond$i24 = 0, $cond$i30 = 0, $cond$i35 = 0, $ref$tmp = 0, $tobool$i$i = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $ref$tmp = sp;
 $__size_$i$i = $this + 11 | 0;
 $0 = HEAP8[$__size_$i$i >> 0] | 0;
 $tobool$i$i = $0 << 24 >> 24 < 0;
 if ($tobool$i$i) {
  $cond$i24 = HEAP32[$this + 4 >> 2] | 0;
  $cond$i35 = (HEAP32[$this + 8 >> 2] & 2147483647) + -1 | 0;
 } else {
  $cond$i24 = $0 & 255;
  $cond$i35 = 10;
 }
 if (($cond$i35 - $cond$i24 | 0) >>> 0 < $__n >>> 0) __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEmmmmmmPKc($this, $cond$i35, $cond$i24 + $__n - $cond$i35 | 0, $cond$i24, $cond$i24, 0, $__n, $__s); else if ($__n | 0) {
  if ($tobool$i$i) $cond$i30 = HEAP32[$this >> 2] | 0; else $cond$i30 = $this;
  __ZNSt3__211char_traitsIcE4copyEPcPKcm($cond$i30 + $cond$i24 | 0, $__s, $__n) | 0;
  $add = $cond$i24 + $__n | 0;
  if ((HEAP8[$__size_$i$i >> 0] | 0) < 0) HEAP32[$this + 4 >> 2] = $add; else HEAP8[$__size_$i$i >> 0] = $add;
  HEAP8[$ref$tmp >> 0] = 0;
  __ZNSt3__211char_traitsIcE6assignERcRKc($cond$i30 + $add | 0, $ref$tmp);
 }
 STACKTOP = sp;
 return $this | 0;
}

function _stbir__get_filter_pixel_width($filter, $scale) {
 $filter = $filter | 0;
 $scale = Math_fround($scale);
 var $4 = 0, $5 = f0, $9 = 0, $div = f0, $filter$addr = 0, $mul10 = f0, $retval = 0, $scale$addr = 0, $tobool = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $retval = sp + 8 | 0;
 $filter$addr = sp + 4 | 0;
 $scale$addr = sp;
 HEAP32[$filter$addr >> 2] = $filter;
 HEAPF32[$scale$addr >> 2] = $scale;
 if (!(HEAP32[$filter$addr >> 2] | 0)) ___assert_fail(36602, 34244, 884, 36614);
 if ((HEAP32[$filter$addr >> 2] | 0) >>> 0 >= 6) ___assert_fail(36644, 34244, 885, 36614);
 $tobool = (_stbir__use_upsampling(Math_fround(HEAPF32[$scale$addr >> 2])) | 0) != 0;
 $4 = HEAP32[6304 + (HEAP32[$filter$addr >> 2] << 3) + 4 >> 2] | 0;
 $5 = Math_fround(HEAPF32[$scale$addr >> 2]);
 if ($tobool) {
  $div = Math_fround(Math_fround(1.0) / $5);
  HEAP32[$retval >> 2] = ~~+Math_ceil(+(+Math_fround(Math_fround(FUNCTION_TABLE_ff[$4 & 7]($div)) * Math_fround(2.0))));
  $9 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $9 | 0;
 } else {
  $mul10 = Math_fround(Math_fround(FUNCTION_TABLE_ff[$4 & 7]($5)) * Math_fround(2.0));
  HEAP32[$retval >> 2] = ~~+Math_ceil(+(+Math_fround($mul10 / Math_fround(HEAPF32[$scale$addr >> 2]))));
  $9 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $9 | 0;
 }
 return 0;
}

function __ZNSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8nlohmann10basic_jsonINS_3mapENS_6vectorES7_bxydS5_NS8_14adl_serializerEEEEENS_19__map_value_compareIS7_SE_NS_4lessIvEELb1EEENS5_ISE_EEE7destroyEPNS_11__tree_nodeISE_PvEE($this, $__nd) {
 $this = $this | 0;
 $__nd = $__nd | 0;
 if ($__nd | 0) {
  __ZNSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8nlohmann10basic_jsonINS_3mapENS_6vectorES7_bxydS5_NS8_14adl_serializerEEEEENS_19__map_value_compareIS7_SE_NS_4lessIvEELb1EEENS5_ISE_EEE7destroyEPNS_11__tree_nodeISE_PvEE($this, HEAP32[$__nd >> 2] | 0);
  __ZNSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8nlohmann10basic_jsonINS_3mapENS_6vectorES7_bxydS5_NS8_14adl_serializerEEEEENS_19__map_value_compareIS7_SE_NS_4lessIvEELb1EEENS5_ISE_EEE7destroyEPNS_11__tree_nodeISE_PvEE($this, HEAP32[$__nd + 4 >> 2] | 0);
  __ZNSt3__24pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8nlohmann10basic_jsonINS_3mapENS_6vectorES6_bxydS4_NS8_14adl_serializerEEEED2Ev(__ZNSt3__29__launderINS_4pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8nlohmann10basic_jsonINS_3mapENS_6vectorES7_bxydS5_NS9_14adl_serializerEEEEEEEPT_SH_($__nd + 16 | 0) | 0);
  __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm($__nd, 48);
 }
 return;
}

function __ZNSt3__26__treeINS_12__value_typeIiPN4tson4TileEEENS_19__map_value_compareIiS5_NS_4lessIiEELb1EEENS_9allocatorIS5_EEE15__emplace_multiIJRKNS_4pairIKiS4_EEEEENS_15__tree_iteratorIS5_PNS_11__tree_nodeIS5_PvEElEEDpOT_($this, $__args) {
 $this = $this | 0;
 $__args = $__args | 0;
 var $__h = 0, $__parent = 0, $call5 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $__h = sp + 4 | 0;
 $__parent = sp;
 __ZNSt3__26__treeINS_12__value_typeIiPN4tson4TileEEENS_19__map_value_compareIiS5_NS_4lessIiEELb1EEENS_9allocatorIS5_EEE16__construct_nodeIJRKNS_4pairIKiS4_EEEEENS_10unique_ptrINS_11__tree_nodeIS5_PvEENS_22__tree_node_destructorINSA_ISM_EEEEEEDpOT_($__h, $this, $__args);
 $call5 = __ZNSt3__26__treeINS_12__value_typeIiPN4tson4TileEEENS_19__map_value_compareIiS5_NS_4lessIiEELb1EEENS_9allocatorIS5_EEE16__find_leaf_highERPNS_15__tree_end_nodeIPNS_16__tree_node_baseIPvEEEERKi($this, $__parent, __ZNSt3__29__launderIKNS_4pairIKiPN4tson4TileEEEEEPT_S9_((HEAP32[$__h >> 2] | 0) + 16 | 0) | 0) | 0;
 __ZNSt3__26__treeINS_12__value_typeIiPN4tson4TileEEENS_19__map_value_compareIiS5_NS_4lessIiEELb1EEENS_9allocatorIS5_EEE16__insert_node_atEPNS_15__tree_end_nodeIPNS_16__tree_node_baseIPvEEEERSH_SH_($this, HEAP32[$__parent >> 2] | 0, $call5, HEAP32[$__h >> 2] | 0);
 STACKTOP = sp;
 return HEAP32[$__h >> 2] | 0;
}

function __ZN4tson4GridaSEOS0_($this, $0) {
 $this = $this | 0;
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $2 = 0, $5 = 0, $__cap_$i$i$i$i$i = 0, $__size_$i1$i$i$i$i = 0, $ref$tmp$i$i$i$i = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $ref$tmp$i$i$i$i = sp;
 $__size_$i1$i$i$i$i = $this + 11 | 0;
 if ((HEAP8[$__size_$i1$i$i$i$i >> 0] | 0) < 0) {
  $2 = HEAP32[$this >> 2] | 0;
  HEAP8[$ref$tmp$i$i$i$i >> 0] = 0;
  __ZNSt3__211char_traitsIcE6assignERcRKc($2, $ref$tmp$i$i$i$i);
  HEAP32[$this + 4 >> 2] = 0;
  if ((HEAP8[$__size_$i1$i$i$i$i >> 0] | 0) < 0) {
   $__cap_$i$i$i$i$i = $this + 8 | 0;
   __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm(HEAP32[$this >> 2] | 0, HEAP32[$__cap_$i$i$i$i$i >> 2] & 2147483647);
   HEAP32[$__cap_$i$i$i$i$i >> 2] = 0;
  }
 } else {
  HEAP8[$ref$tmp$i$i$i$i >> 0] = 0;
  __ZNSt3__211char_traitsIcE6assignERcRKc($this, $ref$tmp$i$i$i$i);
  HEAP8[$__size_$i1$i$i$i$i >> 0] = 0;
 };
 HEAP32[$this >> 2] = HEAP32[$0 >> 2];
 HEAP32[$this + 4 >> 2] = HEAP32[$0 + 4 >> 2];
 HEAP32[$this + 8 >> 2] = HEAP32[$0 + 8 >> 2];
 HEAP32[$0 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 0;
 $5 = $0 + 12 | 0;
 $10 = HEAP32[$5 + 4 >> 2] | 0;
 $11 = $this + 12 | 0;
 HEAP32[$11 >> 2] = HEAP32[$5 >> 2];
 HEAP32[$11 + 4 >> 2] = $10;
 STACKTOP = sp;
 return $this | 0;
}

function __ZZN4tson5Layer14createTileDataERKNS_7Vector2IiEEbENKUliE_clEi($this, $tileId) {
 $this = $this | 0;
 $tileId = $tileId | 0;
 var $$pre = 0, $1 = 0, $10 = 0, $13 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $8 = 0, $ref$tmp = 0, $tileId$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $tileId$addr = sp;
 $ref$tmp = sp + 8 | 0;
 HEAP32[$tileId$addr >> 2] = $tileId;
 $1 = HEAP32[$this + 12 >> 2] | 0;
 $2 = HEAP32[$this >> 2] | 0;
 $3 = HEAP32[$2 >> 2] | 0;
 if (($3 | 0) == (HEAP32[HEAP32[$this + 4 >> 2] >> 2] | 0)) {
  $8 = HEAP32[$this + 8 >> 2] | 0;
  HEAP32[$8 >> 2] = (HEAP32[$8 >> 2] | 0) + 1;
  HEAP32[$2 >> 2] = 0;
  $18 = 0;
 } else $18 = $3;
 if (($tileId | 0) > 0) {
  $10 = HEAP32[(__ZNSt3__23mapIiPN4tson4TileENS_4lessIiEENS_9allocatorINS_4pairIKiS3_EEEEEixERS8_($1 + 196 | 0, $tileId$addr) | 0) >> 2] | 0;
  $13 = HEAP32[$this + 8 >> 2] | 0;
  HEAP32[$ref$tmp >> 2] = HEAP32[HEAP32[$this >> 2] >> 2];
  HEAP32[$ref$tmp + 4 >> 2] = HEAP32[$13 >> 2];
  HEAP32[(__ZNSt3__23mapINS_5tupleIJiiEEEPN4tson4TileENS_4lessIS2_EENS_9allocatorINS_4pairIKS2_S5_EEEEEixEOS2_($1 + 208 | 0, $ref$tmp) | 0) >> 2] = $10;
  $$pre = HEAP32[$this >> 2] | 0;
  $16 = HEAP32[$$pre >> 2] | 0;
  $17 = $$pre;
 } else {
  $16 = $18;
  $17 = $2;
 }
 HEAP32[$17 >> 2] = $16 + 1;
 STACKTOP = sp;
 return;
}

function _EmscriptenFullscreenChangeCallback($eventType, $e, $userData) {
 $eventType = $eventType | 0;
 $e = $e | 0;
 $userData = $userData | 0;
 var $3 = 0, $5 = 0, $7 = 0, $9 = 0, $e$addr = 0, $vararg_buffer = 0, $vararg_buffer10 = 0, $vararg_buffer4 = 0, sp = 0, CSE$0 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 $vararg_buffer10 = sp + 32 | 0;
 $vararg_buffer4 = sp + 16 | 0;
 $vararg_buffer = sp;
 $e$addr = sp + 40 | 0;
 HEAP32[sp + 44 >> 2] = $eventType;
 HEAP32[$e$addr >> 2] = $e;
 HEAP32[sp + 36 >> 2] = $userData;
 CSE$0 = HEAP32[$e$addr >> 2] | 0;
 $3 = HEAP32[CSE$0 + 264 >> 2] | 0;
 $5 = HEAP32[CSE$0 + 268 >> 2] | 0;
 $7 = HEAP32[CSE$0 + 272 >> 2] | 0;
 $9 = HEAP32[CSE$0 + 276 >> 2] | 0;
 if (HEAP32[HEAP32[$e$addr >> 2] >> 2] | 0) {
  HEAP32[$vararg_buffer >> 2] = $3;
  HEAP32[$vararg_buffer + 4 >> 2] = $5;
  HEAP32[$vararg_buffer + 8 >> 2] = $7;
  HEAP32[$vararg_buffer + 12 >> 2] = $9;
  _TraceLog(3, 31852, $vararg_buffer);
  _TraceLog(3, 31988, $vararg_buffer10);
  STACKTOP = sp;
  return 0;
 } else {
  HEAP32[$vararg_buffer4 >> 2] = $3;
  HEAP32[$vararg_buffer4 + 4 >> 2] = $5;
  HEAP32[$vararg_buffer4 + 8 >> 2] = $7;
  HEAP32[$vararg_buffer4 + 12 >> 2] = $9;
  _TraceLog(3, 31921, $vararg_buffer4);
  _TraceLog(3, 31988, $vararg_buffer10);
  STACKTOP = sp;
  return 0;
 }
 return 0;
}

function __ZNSt3__26vectorIiNS_9allocatorIiEEE24__emplace_back_slow_pathIJiEEEvDpOT_($this, $__args) {
 $this = $this | 0;
 $__args = $__args | 0;
 var $3 = 0, $5 = 0, $__end_ = 0, $__end_$i = 0, $__v = 0, $add = 0, $call$i = 0, $mul$i = 0, $sub$ptr$sub$i$i$i = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $__v = sp;
 $__end_$i = $this + 4 | 0;
 $add = ((HEAP32[$__end_$i >> 2] | 0) - (HEAP32[$this >> 2] | 0) >> 2) + 1 | 0;
 $call$i = __ZNKSt3__26vectorIiNS_9allocatorIiEEE8max_sizeEv($this) | 0;
 if ($call$i >>> 0 < $add >>> 0) __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($this); else {
  $3 = HEAP32[$this >> 2] | 0;
  $sub$ptr$sub$i$i$i = (HEAP32[$this + 8 >> 2] | 0) - $3 | 0;
  $mul$i = $sub$ptr$sub$i$i$i >> 1;
  __ZNSt3__214__split_bufferIiRNS_9allocatorIiEEEC2EmmS3_($__v, $sub$ptr$sub$i$i$i >> 2 >>> 0 < $call$i >>> 1 >>> 0 ? ($mul$i >>> 0 < $add >>> 0 ? $add : $mul$i) : $call$i, (HEAP32[$__end_$i >> 2] | 0) - $3 >> 2, $this + 8 | 0);
  $__end_ = $__v + 8 | 0;
  $5 = HEAP32[$__end_ >> 2] | 0;
  HEAP32[$5 >> 2] = HEAP32[$__args >> 2];
  HEAP32[$__end_ >> 2] = $5 + 4;
  __ZNSt3__26vectorIiNS_9allocatorIiEEE26__swap_out_circular_bufferERNS_14__split_bufferIiRS2_EE($this, $__v);
  __ZNSt3__214__split_bufferIiRNS_9allocatorIiEEED2Ev($__v);
  STACKTOP = sp;
  return;
 }
}

function __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKwm($this, $__s, $__n) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__n = $__n | 0;
 var $0 = 0, $1 = 0, $__size_$i$i = 0, $cond$i = 0, $cond$i18 = 0, $cond$i23 = 0, $ref$tmp = 0, $tobool$i$i = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $ref$tmp = sp;
 $0 = $this + 8 | 0;
 $__size_$i$i = $0 + 3 | 0;
 $1 = HEAP8[$__size_$i$i >> 0] | 0;
 $tobool$i$i = $1 << 24 >> 24 < 0;
 if ($tobool$i$i) $cond$i = (HEAP32[$0 >> 2] & 2147483647) + -1 | 0; else $cond$i = 1;
 do if ($cond$i >>> 0 < $__n >>> 0) {
  if ($tobool$i$i) $cond$i23 = HEAP32[$this + 4 >> 2] | 0; else $cond$i23 = $1 & 255;
  __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE21__grow_by_and_replaceEmmmmmmPKw($this, $cond$i, $__n - $cond$i | 0, $cond$i23, 0, $cond$i23, $__n, $__s);
 } else {
  if ($tobool$i$i) $cond$i18 = HEAP32[$this >> 2] | 0; else $cond$i18 = $this;
  __ZNSt3__211char_traitsIwE4moveEPwPKwm($cond$i18, $__s, $__n) | 0;
  HEAP32[$ref$tmp >> 2] = 0;
  __ZNSt3__211char_traitsIwE6assignERwRKw($cond$i18 + ($__n << 2) | 0, $ref$tmp);
  if ((HEAP8[$__size_$i$i >> 0] | 0) < 0) {
   HEAP32[$this + 4 >> 2] = $__n;
   break;
  } else {
   HEAP8[$__size_$i$i >> 0] = $__n;
   break;
  }
 } while (0);
 STACKTOP = sp;
 return $this | 0;
}

function __ZNSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8nlohmann10basic_jsonINS_3mapENS_6vectorES7_bxydS5_NS8_14adl_serializerEEEEENS_19__map_value_compareIS7_SE_NS_4lessIvEELb1EEENS5_ISE_EEE16__construct_nodeIJRKNS_21piecewise_construct_tENS_5tupleIJRKS7_EEENSP_IJEEEEEENS_10unique_ptrINS_11__tree_nodeISE_PvEENS_22__tree_node_destructorINS5_ISX_EEEEEEDpOT_($agg$result, $this, $__args, $__args1, $__args3) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__args = $__args | 0;
 $__args1 = $__args1 | 0;
 $__args3 = $__args3 | 0;
 var $$sroa_idx10 = 0, $call$i$i$i = 0, $call2$i$i$i = 0;
 $call2$i$i$i = __Znwm(48) | 0;
 HEAP32[$agg$result >> 2] = $call2$i$i$i;
 HEAP32[$agg$result + 4 >> 2] = $this + 4;
 $$sroa_idx10 = $agg$result + 8 | 0;
 HEAP8[$$sroa_idx10 >> 0] = 0;
 $call$i$i$i = __ZNSt3__29__launderINS_4pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8nlohmann10basic_jsonINS_3mapENS_6vectorES7_bxydS5_NS9_14adl_serializerEEEEEEEPT_SH_($call2$i$i$i + 16 | 0) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($call$i$i$i, HEAP32[$__args1 >> 2] | 0);
 __ZN8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEC2EDn($call$i$i$i + 16 | 0, 0);
 HEAP8[$$sroa_idx10 >> 0] = 1;
 return;
}

function __ZN4tson7TilesetC2ERKN8nlohmann10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS1_14adl_serializerEEE($this, $json) {
 $this = $this | 0;
 $json = $json | 0;
 var $m_margin = 0, $m_properties = 0, dest = 0, stop = 0;
 HEAP32[$this >> 2] = 0;
 HEAP32[$this + 4 >> 2] = 0;
 HEAP32[$this + 8 >> 2] = 0;
 HEAP32[$this + 12 >> 2] = 0;
 HEAP32[$this + 16 >> 2] = 0;
 __ZN4tson7Vector2IiEC2Ev($this + 20 | 0);
 $m_margin = $this + 28 | 0;
 HEAP32[$m_margin >> 2] = 0;
 HEAP32[$m_margin + 4 >> 2] = 0;
 HEAP32[$m_margin + 8 >> 2] = 0;
 HEAP32[$m_margin + 12 >> 2] = 0;
 HEAP32[$m_margin + 16 >> 2] = 0;
 HEAP32[$m_margin + 20 >> 2] = 0;
 __ZN4tson7Vector2IiEC2Ev($this + 52 | 0);
 __ZN4tson5ColorIhEC2Ev($this + 60 | 0);
 $m_properties = $this + 100 | 0;
 dest = $this + 64 | 0;
 stop = dest + 36 | 0;
 do {
  HEAP32[dest >> 2] = 0;
  dest = dest + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 __ZN4tson18PropertyCollectionC2Ev($m_properties);
 HEAP32[$this + 124 >> 2] = 0;
 HEAP32[$this + 128 >> 2] = 0;
 HEAP32[$this + 132 >> 2] = 0;
 __ZN4tson7Vector2IiEC2Ev($this + 136 | 0);
 __ZN4tson4GridC2Ev($this + 144 | 0);
 __ZN4tson7Tileset5parseERKN8nlohmann10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS1_14adl_serializerEEE($this, $json) | 0;
 return;
}

function __ZN8nlohmann6detail5lexerINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE13get_codepointEv($this) {
 $this = $this | 0;
 var $$off = 0, $1 = 0, $2 = 0, $__begin$031 = 0, $codepoint$032 = 0, $current = 0, $retval$3 = 0, $sub$pn = 0, label = 0;
 label = 0;
 $current = $this + 8 | 0;
 if ((HEAP32[$current >> 2] | 0) != 117) ___assert_fail(27809, 22221, 7137, 27824);
 $__begin$031 = 17764;
 $codepoint$032 = 0;
 L4 : while (1) {
  $1 = HEAP32[$__begin$031 >> 2] | 0;
  __ZN8nlohmann6detail5lexerINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE3getEv($this) | 0;
  $2 = HEAP32[$current >> 2] | 0;
  $$off = $2 + -48 | 0;
  do if ($$off >>> 0 < 10) $sub$pn = $$off; else {
   if (($2 + -65 | 0) >>> 0 < 6) {
    $sub$pn = $2 + -55 | 0;
    break;
   }
   if (($2 + -97 | 0) >>> 0 >= 6) {
    $retval$3 = -1;
    break L4;
   }
   $sub$pn = $2 + -87 | 0;
  } while (0);
  $codepoint$032 = ($sub$pn << $1) + $codepoint$032 | 0;
  $__begin$031 = $__begin$031 + 4 | 0;
  if (($__begin$031 | 0) == 17780) {
   label = 10;
   break;
  }
 }
 if ((label | 0) == 10) if ($codepoint$032 >>> 0 < 65536) $retval$3 = $codepoint$032; else ___assert_fail(27838, 22221, 7163, 27824);
 return $retval$3 | 0;
}

function __ZNSt3__26vectorIiNS_9allocatorIiEEE21__push_back_slow_pathIiEEvOT_($this, $__x) {
 $this = $this | 0;
 $__x = $__x | 0;
 var $3 = 0, $5 = 0, $__end_ = 0, $__end_$i = 0, $__v = 0, $add = 0, $call$i = 0, $mul$i = 0, $sub$ptr$sub$i$i$i = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $__v = sp;
 $__end_$i = $this + 4 | 0;
 $add = ((HEAP32[$__end_$i >> 2] | 0) - (HEAP32[$this >> 2] | 0) >> 2) + 1 | 0;
 $call$i = __ZNKSt3__26vectorIiNS_9allocatorIiEEE8max_sizeEv($this) | 0;
 if ($call$i >>> 0 < $add >>> 0) __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($this); else {
  $3 = HEAP32[$this >> 2] | 0;
  $sub$ptr$sub$i$i$i = (HEAP32[$this + 8 >> 2] | 0) - $3 | 0;
  $mul$i = $sub$ptr$sub$i$i$i >> 1;
  __ZNSt3__214__split_bufferIiRNS_9allocatorIiEEEC2EmmS3_($__v, $sub$ptr$sub$i$i$i >> 2 >>> 0 < $call$i >>> 1 >>> 0 ? ($mul$i >>> 0 < $add >>> 0 ? $add : $mul$i) : $call$i, (HEAP32[$__end_$i >> 2] | 0) - $3 >> 2, $this + 8 | 0);
  $__end_ = $__v + 8 | 0;
  $5 = HEAP32[$__end_ >> 2] | 0;
  HEAP32[$5 >> 2] = HEAP32[$__x >> 2];
  HEAP32[$__end_ >> 2] = $5 + 4;
  __ZNSt3__26vectorIiNS_9allocatorIiEEE26__swap_out_circular_bufferERNS_14__split_bufferIiRS2_EE($this, $__v);
  __ZNSt3__214__split_bufferIiRNS_9allocatorIiEEED2Ev($__v);
  STACKTOP = sp;
  return;
 }
}

function __ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this, $info, $current_ptr, $path_below, $use_strcmp) {
 $this = $this | 0;
 $info = $info | 0;
 $current_ptr = $current_ptr | 0;
 $path_below = $path_below | 0;
 $use_strcmp = $use_strcmp | 0;
 var $dst_ptr_not_leading_to_static_ptr = 0, $number_to_dst_ptr = 0;
 do if (__ZL8is_equalPKSt9type_infoS1_b($this, HEAP32[$info + 8 >> 2] | 0, $use_strcmp) | 0) __ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi(0, $info, $current_ptr, $path_below); else if (__ZL8is_equalPKSt9type_infoS1_b($this, HEAP32[$info >> 2] | 0, $use_strcmp) | 0) {
  if ((HEAP32[$info + 16 >> 2] | 0) != ($current_ptr | 0)) {
   $dst_ptr_not_leading_to_static_ptr = $info + 20 | 0;
   if ((HEAP32[$dst_ptr_not_leading_to_static_ptr >> 2] | 0) != ($current_ptr | 0)) {
    HEAP32[$info + 32 >> 2] = $path_below;
    HEAP32[$dst_ptr_not_leading_to_static_ptr >> 2] = $current_ptr;
    $number_to_dst_ptr = $info + 40 | 0;
    HEAP32[$number_to_dst_ptr >> 2] = (HEAP32[$number_to_dst_ptr >> 2] | 0) + 1;
    if ((HEAP32[$info + 36 >> 2] | 0) == 1) if ((HEAP32[$info + 24 >> 2] | 0) == 2) HEAP8[$info + 54 >> 0] = 1;
    HEAP32[$info + 44 >> 2] = 4;
    break;
   }
  }
  if (($path_below | 0) == 1) HEAP32[$info + 32 >> 2] = 1;
 } while (0);
 return;
}

function _vsnprintf($s, $n, $fmt, $ap) {
 $s = $s | 0;
 $n = $n | 0;
 $fmt = $fmt | 0;
 $ap = $ap | 0;
 var $0 = 0, $add$ptr = 0, $b = 0, $call10 = 0, $f = 0, $n$addr$0 = 0, $retval$0 = 0, $s$addr$0 = 0, $spec$select = 0, $sub3 = 0, $wend = 0, $wpos = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(160);
 $b = sp + 144 | 0;
 $f = sp;
 _memcpy($f | 0, 15616, 144) | 0;
 if (($n + -1 | 0) >>> 0 > 2147483646) if (!$n) {
  $n$addr$0 = 1;
  $s$addr$0 = $b;
  label = 4;
 } else {
  HEAP32[(___errno_location() | 0) >> 2] = 61;
  $retval$0 = -1;
 } else {
  $n$addr$0 = $n;
  $s$addr$0 = $s;
  label = 4;
 }
 if ((label | 0) == 4) {
  $sub3 = -2 - $s$addr$0 | 0;
  $spec$select = $n$addr$0 >>> 0 > $sub3 >>> 0 ? $sub3 : $n$addr$0;
  HEAP32[$f + 48 >> 2] = $spec$select;
  $wpos = $f + 20 | 0;
  HEAP32[$wpos >> 2] = $s$addr$0;
  HEAP32[$f + 44 >> 2] = $s$addr$0;
  $add$ptr = $s$addr$0 + $spec$select | 0;
  $wend = $f + 16 | 0;
  HEAP32[$wend >> 2] = $add$ptr;
  HEAP32[$f + 28 >> 2] = $add$ptr;
  $call10 = _vfprintf($f, $fmt, $ap) | 0;
  if (!$spec$select) $retval$0 = $call10; else {
   $0 = HEAP32[$wpos >> 2] | 0;
   HEAP8[$0 + ((($0 | 0) == (HEAP32[$wend >> 2] | 0)) << 31 >> 31) >> 0] = 0;
   $retval$0 = $call10;
  }
 }
 STACKTOP = sp;
 return $retval$0 | 0;
}

function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcm($this, $__s, $__n) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__n = $__n | 0;
 var $0 = 0, $__size_$i$i = 0, $cond$i = 0, $cond$i19 = 0, $cond$i25 = 0, $ref$tmp = 0, $tobool$i$i = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $ref$tmp = sp;
 $__size_$i$i = $this + 11 | 0;
 $0 = HEAP8[$__size_$i$i >> 0] | 0;
 $tobool$i$i = $0 << 24 >> 24 < 0;
 if ($tobool$i$i) $cond$i = (HEAP32[$this + 8 >> 2] & 2147483647) + -1 | 0; else $cond$i = 10;
 do if ($cond$i >>> 0 < $__n >>> 0) {
  if ($tobool$i$i) $cond$i25 = HEAP32[$this + 4 >> 2] | 0; else $cond$i25 = $0 & 255;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEmmmmmmPKc($this, $cond$i, $__n - $cond$i | 0, $cond$i25, 0, $cond$i25, $__n, $__s);
 } else {
  if ($tobool$i$i) $cond$i19 = HEAP32[$this >> 2] | 0; else $cond$i19 = $this;
  __ZNSt3__211char_traitsIcE4moveEPcPKcm($cond$i19, $__s, $__n) | 0;
  HEAP8[$ref$tmp >> 0] = 0;
  __ZNSt3__211char_traitsIcE6assignERcRKc($cond$i19 + $__n | 0, $ref$tmp);
  if ((HEAP8[$__size_$i$i >> 0] | 0) < 0) {
   HEAP32[$this + 4 >> 2] = $__n;
   break;
  } else {
   HEAP8[$__size_$i$i >> 0] = $__n;
   break;
  }
 } while (0);
 STACKTOP = sp;
 return $this | 0;
}

function __ZNSt3__26vectorIcNS_9allocatorIcEEE21__push_back_slow_pathIcEEvOT_($this, $__x) {
 $this = $this | 0;
 $__x = $__x | 0;
 var $3 = 0, $__end_ = 0, $__end_$i = 0, $__v = 0, $add = 0, $call$i = 0, $mul$i = 0, $sub$ptr$sub$i$i$i = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $__v = sp;
 $__end_$i = $this + 4 | 0;
 $add = (HEAP32[$__end_$i >> 2] | 0) - (HEAP32[$this >> 2] | 0) + 1 | 0;
 $call$i = __ZNKSt3__26vectorIcNS_9allocatorIcEEE8max_sizeEv($this) | 0;
 if ($call$i >>> 0 < $add >>> 0) __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($this); else {
  $3 = HEAP32[$this >> 2] | 0;
  $sub$ptr$sub$i$i$i = (HEAP32[$this + 8 >> 2] | 0) - $3 | 0;
  $mul$i = $sub$ptr$sub$i$i$i << 1;
  __ZNSt3__214__split_bufferIcRNS_9allocatorIcEEEC2EmmS3_($__v, $sub$ptr$sub$i$i$i >>> 0 < $call$i >>> 1 >>> 0 ? ($mul$i >>> 0 < $add >>> 0 ? $add : $mul$i) : $call$i, (HEAP32[$__end_$i >> 2] | 0) - $3 | 0, $this + 8 | 0);
  $__end_ = $__v + 8 | 0;
  HEAP8[HEAP32[$__end_ >> 2] >> 0] = HEAP8[$__x >> 0] | 0;
  HEAP32[$__end_ >> 2] = (HEAP32[$__end_ >> 2] | 0) + 1;
  __ZNSt3__26vectorIcNS_9allocatorIcEEE26__swap_out_circular_bufferERNS_14__split_bufferIcRS2_EE($this, $__v);
  __ZNSt3__214__split_bufferIcRNS_9allocatorIcEEED2Ev($__v);
  STACKTOP = sp;
  return;
 }
}

function _TraceLog($logType, $text, $varargs) {
 $logType = $logType | 0;
 $text = $text | 0;
 $varargs = $varargs | 0;
 var $args = 0, $buffer = 0, $logType$addr = 0, $text$addr = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(160);
 $logType$addr = sp + 148 | 0;
 $text$addr = sp + 144 | 0;
 $args = sp + 128 | 0;
 $buffer = sp;
 HEAP32[$logType$addr >> 2] = $logType;
 HEAP32[$text$addr >> 2] = $text;
 if ((HEAP32[$logType$addr >> 2] | 0) < 3) {
  STACKTOP = sp;
  return;
 }
 HEAP32[$args >> 2] = $varargs;
 dest = $buffer;
 stop = dest + 128 | 0;
 do {
  HEAP32[dest >> 2] = 0;
  dest = dest + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 switch (HEAP32[$logType$addr >> 2] | 0) {
 case 1:
  {
   _strcpy($buffer, 38369) | 0;
   break;
  }
 case 2:
  {
   _strcpy($buffer, 38377) | 0;
   break;
  }
 case 3:
  {
   _strcpy($buffer, 38385) | 0;
   break;
  }
 case 4:
  {
   _strcpy($buffer, 38392) | 0;
   break;
  }
 case 5:
  {
   _strcpy($buffer, 38402) | 0;
   break;
  }
 case 6:
  {
   _strcpy($buffer, 38410) | 0;
   break;
  }
 default:
  {}
 }
 _strcat($buffer, HEAP32[$text$addr >> 2] | 0) | 0;
 _strcat($buffer, 38418) | 0;
 _vprintf($buffer, $args) | 0;
 if ((HEAP32[$logType$addr >> 2] | 0) >= 5) _exit(1); else {
  STACKTOP = sp;
  return;
 }
}

function _stbi__zhuffman_decode($a, $z) {
 $a = $a | 0;
 $z = $z | 0;
 var $18 = 0, $a$addr = 0, $b = 0, $code_buffer2 = 0, $num_bits4 = 0, $retval = 0, $s = 0, $z$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $retval = sp + 16 | 0;
 $a$addr = sp + 12 | 0;
 $z$addr = sp + 8 | 0;
 $b = sp + 4 | 0;
 $s = sp;
 HEAP32[$a$addr >> 2] = $a;
 HEAP32[$z$addr >> 2] = $z;
 if ((HEAP32[(HEAP32[$a$addr >> 2] | 0) + 8 >> 2] | 0) < 16) _stbi__fill_bits(HEAP32[$a$addr >> 2] | 0);
 HEAP32[$b >> 2] = HEAPU16[(HEAP32[$z$addr >> 2] | 0) + ((HEAP32[(HEAP32[$a$addr >> 2] | 0) + 12 >> 2] & 511) << 1) >> 1];
 if (HEAP32[$b >> 2] | 0) {
  HEAP32[$s >> 2] = HEAP32[$b >> 2] >> 9;
  $code_buffer2 = (HEAP32[$a$addr >> 2] | 0) + 12 | 0;
  HEAP32[$code_buffer2 >> 2] = (HEAP32[$code_buffer2 >> 2] | 0) >>> (HEAP32[$s >> 2] | 0);
  $num_bits4 = (HEAP32[$a$addr >> 2] | 0) + 8 | 0;
  HEAP32[$num_bits4 >> 2] = (HEAP32[$num_bits4 >> 2] | 0) - (HEAP32[$s >> 2] | 0);
  HEAP32[$retval >> 2] = HEAP32[$b >> 2] & 511;
  $18 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $18 | 0;
 } else {
  HEAP32[$retval >> 2] = _stbi__zhuffman_decode_slowpath(HEAP32[$a$addr >> 2] | 0, HEAP32[$z$addr >> 2] | 0) | 0;
  $18 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $18 | 0;
 }
 return 0;
}

function __ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($this, $__v) {
 $this = $this | 0;
 $__v = $__v | 0;
 var $$pre$phiZ2D = 0, $0 = 0, $4 = 0, $5 = 0, $6 = 0, $8 = 0, $__begin_2 = 0, $__end_ = 0, $__end_6 = 0, $__value_$i$i$i = 0, $__value_$i$i$i6 = 0, $add$ptr$i = 0, $sub$ptr$sub$i7 = 0;
 $0 = HEAP32[$this >> 2] | 0;
 $__end_ = $this + 4 | 0;
 $__begin_2 = $__v + 4 | 0;
 $sub$ptr$sub$i7 = (HEAP32[$__end_ >> 2] | 0) - $0 | 0;
 $add$ptr$i = (HEAP32[$__begin_2 >> 2] | 0) + (0 - ($sub$ptr$sub$i7 >> 2) << 2) | 0;
 HEAP32[$__begin_2 >> 2] = $add$ptr$i;
 if (($sub$ptr$sub$i7 | 0) > 0) {
  _memcpy($add$ptr$i | 0, $0 | 0, $sub$ptr$sub$i7 | 0) | 0;
  $$pre$phiZ2D = $__begin_2;
  $5 = HEAP32[$__begin_2 >> 2] | 0;
 } else {
  $$pre$phiZ2D = $__begin_2;
  $5 = $add$ptr$i;
 }
 $4 = HEAP32[$this >> 2] | 0;
 HEAP32[$this >> 2] = $5;
 HEAP32[$$pre$phiZ2D >> 2] = $4;
 $__end_6 = $__v + 8 | 0;
 $6 = HEAP32[$__end_ >> 2] | 0;
 HEAP32[$__end_ >> 2] = HEAP32[$__end_6 >> 2];
 HEAP32[$__end_6 >> 2] = $6;
 $__value_$i$i$i6 = $this + 8 | 0;
 $__value_$i$i$i = $__v + 12 | 0;
 $8 = HEAP32[$__value_$i$i$i6 >> 2] | 0;
 HEAP32[$__value_$i$i$i6 >> 2] = HEAP32[$__value_$i$i$i >> 2];
 HEAP32[$__value_$i$i$i >> 2] = $8;
 HEAP32[$__v >> 2] = HEAP32[$$pre$phiZ2D >> 2];
 return;
}

function __ZN8nlohmann6detail5lexerINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEEC2EONS3_10shared_ptrINS0_22input_adapter_protocolEEE($this, $adapter) {
 $this = $this | 0;
 $adapter = $adapter | 0;
 var $__cntrl_3$i = 0, $error_message = 0, $value_integer = 0, dest = 0, stop = 0;
 HEAP32[$this >> 2] = HEAP32[$adapter >> 2];
 $__cntrl_3$i = $adapter + 4 | 0;
 HEAP32[$this + 4 >> 2] = HEAP32[$__cntrl_3$i >> 2];
 HEAP32[$adapter >> 2] = 0;
 HEAP32[$__cntrl_3$i >> 2] = 0;
 HEAP32[$this + 8 >> 2] = __ZNSt3__211char_traitsIcE3eofEv() | 0;
 HEAP8[$this + 12 >> 0] = 0;
 $error_message = $this + 52 | 0;
 dest = $this + 16 | 0;
 stop = dest + 36 | 0;
 do {
  HEAP32[dest >> 2] = 0;
  dest = dest + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP32[$error_message >> 2] = 62173;
 $value_integer = $this + 56 | 0;
 HEAP32[$value_integer >> 2] = 0;
 HEAP32[$value_integer + 4 >> 2] = 0;
 HEAP32[$value_integer + 8 >> 2] = 0;
 HEAP32[$value_integer + 12 >> 2] = 0;
 HEAP32[$value_integer + 16 >> 2] = 0;
 HEAP32[$value_integer + 20 >> 2] = 0;
 HEAP8[$this + 80 >> 0] = __ZN8nlohmann6detail5lexerINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE17get_decimal_pointEv() | 0;
 return;
}

function __ZN4tson5ChunkC2EOS0_($this, $0) {
 $this = $this | 0;
 $0 = $0 | 0;
 var $__end_$i = 0, $__end_$i$i = 0, $__value_$i$i$i8$i = 0, $__value_$i$i$i9$i = 0, $m_base64Data = 0, $m_base64Data3 = 0, $m_size = 0, $m_size4 = 0;
 HEAP32[$this >> 2] = 0;
 $__end_$i$i = $this + 4 | 0;
 HEAP32[$__end_$i$i >> 2] = 0;
 $__value_$i$i$i9$i = $this + 8 | 0;
 HEAP32[$__value_$i$i$i9$i >> 2] = 0;
 HEAP32[$this >> 2] = HEAP32[$0 >> 2];
 $__end_$i = $0 + 4 | 0;
 HEAP32[$__end_$i$i >> 2] = HEAP32[$__end_$i >> 2];
 $__value_$i$i$i8$i = $0 + 8 | 0;
 HEAP32[$__value_$i$i$i9$i >> 2] = HEAP32[$__value_$i$i$i8$i >> 2];
 HEAP32[$__value_$i$i$i8$i >> 2] = 0;
 HEAP32[$__end_$i >> 2] = 0;
 HEAP32[$0 >> 2] = 0;
 $m_base64Data = $this + 12 | 0;
 $m_base64Data3 = $0 + 12 | 0;
 HEAP32[$m_base64Data >> 2] = HEAP32[$m_base64Data3 >> 2];
 HEAP32[$m_base64Data + 4 >> 2] = HEAP32[$m_base64Data3 + 4 >> 2];
 HEAP32[$m_base64Data + 8 >> 2] = HEAP32[$m_base64Data3 + 8 >> 2];
 HEAP32[$m_base64Data3 >> 2] = 0;
 HEAP32[$m_base64Data3 + 4 >> 2] = 0;
 HEAP32[$m_base64Data3 + 8 >> 2] = 0;
 $m_size = $this + 24 | 0;
 $m_size4 = $0 + 24 | 0;
 HEAP32[$m_size >> 2] = HEAP32[$m_size4 >> 2];
 HEAP32[$m_size + 4 >> 2] = HEAP32[$m_size4 + 4 >> 2];
 HEAP32[$m_size + 8 >> 2] = HEAP32[$m_size4 + 8 >> 2];
 HEAP32[$m_size + 12 >> 2] = HEAP32[$m_size4 + 12 >> 2];
 return;
}

function __ZNSt3__26vectorIN4tson7Vector2IiEENS_9allocatorIS3_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($this, $__v) {
 $this = $this | 0;
 $__v = $__v | 0;
 var $$pre$phiZ2D = 0, $0 = 0, $4 = 0, $5 = 0, $6 = 0, $8 = 0, $__begin_2 = 0, $__end_ = 0, $__end_6 = 0, $__value_$i$i$i = 0, $__value_$i$i$i6 = 0, $add$ptr$i = 0, $sub$ptr$sub$i7 = 0;
 $0 = HEAP32[$this >> 2] | 0;
 $__end_ = $this + 4 | 0;
 $__begin_2 = $__v + 4 | 0;
 $sub$ptr$sub$i7 = (HEAP32[$__end_ >> 2] | 0) - $0 | 0;
 $add$ptr$i = (HEAP32[$__begin_2 >> 2] | 0) + (0 - ($sub$ptr$sub$i7 >> 3) << 3) | 0;
 HEAP32[$__begin_2 >> 2] = $add$ptr$i;
 if (($sub$ptr$sub$i7 | 0) > 0) {
  _memcpy($add$ptr$i | 0, $0 | 0, $sub$ptr$sub$i7 | 0) | 0;
  $$pre$phiZ2D = $__begin_2;
  $5 = HEAP32[$__begin_2 >> 2] | 0;
 } else {
  $$pre$phiZ2D = $__begin_2;
  $5 = $add$ptr$i;
 }
 $4 = HEAP32[$this >> 2] | 0;
 HEAP32[$this >> 2] = $5;
 HEAP32[$$pre$phiZ2D >> 2] = $4;
 $__end_6 = $__v + 8 | 0;
 $6 = HEAP32[$__end_ >> 2] | 0;
 HEAP32[$__end_ >> 2] = HEAP32[$__end_6 >> 2];
 HEAP32[$__end_6 >> 2] = $6;
 $__value_$i$i$i6 = $this + 8 | 0;
 $__value_$i$i$i = $__v + 12 | 0;
 $8 = HEAP32[$__value_$i$i$i6 >> 2] | 0;
 HEAP32[$__value_$i$i$i6 >> 2] = HEAP32[$__value_$i$i$i >> 2];
 HEAP32[$__value_$i$i$i >> 2] = $8;
 HEAP32[$__v >> 2] = HEAP32[$$pre$phiZ2D >> 2];
 return;
}

function __ZN4tson18PropertyCollection3addERKN8nlohmann10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS1_14adl_serializerEEE($this, $json) {
 $this = $this | 0;
 $json = $json | 0;
 var $call10 = 0, $m_properties = 0, $name = 0, $property = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 $property = sp + 16 | 0;
 $name = sp;
 __ZN4tson8PropertyC2ERKN8nlohmann10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS1_14adl_serializerEEE($property, $json);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($name, __ZNK4tson8Property7getNameEv($property) | 0);
 $m_properties = $this + 12 | 0;
 __ZN4tson8PropertyaSEOS0_(__ZNSt3__23mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN4tson8PropertyENS_4lessIS6_EENS4_INS_4pairIKS6_S8_EEEEEixERSC_($m_properties, $name) | 0, $property) | 0;
 $call10 = __ZNSt3__23mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN4tson8PropertyENS_4lessIS6_EENS4_INS_4pairIKS6_S8_EEEEEixERSC_($m_properties, $name) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($name);
 __ZN4tson8PropertyD2Ev($property);
 STACKTOP = sp;
 return $call10 | 0;
}

function __ZNSt3__26vectorIN4tson5FrameENS_9allocatorIS2_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS2_RS4_EE($this, $__v) {
 $this = $this | 0;
 $__v = $__v | 0;
 var $$pre$phiZ2D = 0, $0 = 0, $4 = 0, $5 = 0, $6 = 0, $8 = 0, $__begin_2 = 0, $__end_ = 0, $__end_6 = 0, $__value_$i$i$i = 0, $__value_$i$i$i6 = 0, $add$ptr$i = 0, $sub$ptr$sub$i7 = 0;
 $0 = HEAP32[$this >> 2] | 0;
 $__end_ = $this + 4 | 0;
 $__begin_2 = $__v + 4 | 0;
 $sub$ptr$sub$i7 = (HEAP32[$__end_ >> 2] | 0) - $0 | 0;
 $add$ptr$i = (HEAP32[$__begin_2 >> 2] | 0) + (0 - ($sub$ptr$sub$i7 >> 3) << 3) | 0;
 HEAP32[$__begin_2 >> 2] = $add$ptr$i;
 if (($sub$ptr$sub$i7 | 0) > 0) {
  _memcpy($add$ptr$i | 0, $0 | 0, $sub$ptr$sub$i7 | 0) | 0;
  $$pre$phiZ2D = $__begin_2;
  $5 = HEAP32[$__begin_2 >> 2] | 0;
 } else {
  $$pre$phiZ2D = $__begin_2;
  $5 = $add$ptr$i;
 }
 $4 = HEAP32[$this >> 2] | 0;
 HEAP32[$this >> 2] = $5;
 HEAP32[$$pre$phiZ2D >> 2] = $4;
 $__end_6 = $__v + 8 | 0;
 $6 = HEAP32[$__end_ >> 2] | 0;
 HEAP32[$__end_ >> 2] = HEAP32[$__end_6 >> 2];
 HEAP32[$__end_6 >> 2] = $6;
 $__value_$i$i$i6 = $this + 8 | 0;
 $__value_$i$i$i = $__v + 12 | 0;
 $8 = HEAP32[$__value_$i$i$i6 >> 2] | 0;
 HEAP32[$__value_$i$i$i6 >> 2] = HEAP32[$__value_$i$i$i >> 2];
 HEAP32[$__value_$i$i$i >> 2] = $8;
 HEAP32[$__v >> 2] = HEAP32[$$pre$phiZ2D >> 2];
 return;
}

function ___newlocale($mask, $name, $loc) {
 $mask = $mask | 0;
 $name = $name | 0;
 $loc = $loc | 0;
 var $$pre30 = 0, $i$028 = 0, $i$126 = 0, $j$027 = 0, $lm$0 = 0, $retval$0 = 0, $tmp = 0, $tobool8 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $tmp = sp;
 L1 : do if (!(___loc_is_allocated($loc) | 0)) {
  $tobool8 = ($loc | 0) != 0;
  $i$126 = 0;
  $j$027 = 0;
  do {
   $$pre30 = 1 << $i$126 & $mask;
   if ($tobool8 & ($$pre30 | 0) == 0) $lm$0 = HEAP32[$loc + ($i$126 << 2) >> 2] | 0; else $lm$0 = ___get_locale($i$126, ($$pre30 | 0) == 0 ? 62173 : $name) | 0;
   $j$027 = $j$027 + (($lm$0 | 0) != 0 & 1) | 0;
   HEAP32[$tmp + ($i$126 << 2) >> 2] = $lm$0;
   $i$126 = $i$126 + 1 | 0;
  } while (($i$126 | 0) != 6);
  switch ($j$027 & 2147483647 | 0) {
  case 0:
   {
    $retval$0 = 60100;
    break L1;
    break;
   }
  case 1:
   {
    if ((HEAP32[$tmp >> 2] | 0) == 17952) {
     $retval$0 = 17980;
     break L1;
    }
    break;
   }
  default:
   {}
  }
  $retval$0 = $loc;
 } else {
  $i$028 = 0;
  do {
   if (1 << $i$028 & $mask | 0) HEAP32[$loc + ($i$028 << 2) >> 2] = ___get_locale($i$028, $name) | 0;
   $i$028 = $i$028 + 1 | 0;
  } while (($i$028 | 0) != 6);
  $retval$0 = $loc;
 } while (0);
 STACKTOP = sp;
 return $retval$0 | 0;
}

function __ZNSt3__26__treeINS_12__value_typeIiPN4tson4TileEEENS_19__map_value_compareIiS5_NS_4lessIiEELb1EEENS_9allocatorIS5_EEE16__find_leaf_highERPNS_15__tree_end_nodeIPNS_16__tree_node_baseIPvEEEERKi($this, $__parent, $__v) {
 $this = $this | 0;
 $__parent = $__parent | 0;
 $__v = $__v | 0;
 var $0 = 0, $3 = 0, $5 = 0, $__nd$0 = 0, $__nd$1$in = 0, $__value_$i$i$i$i = 0, $call$i$i$i = 0, $retval$0 = 0, label = 0;
 label = 0;
 $__value_$i$i$i$i = $this + 4 | 0;
 $0 = HEAP32[$__value_$i$i$i$i >> 2] | 0;
 do if (!$0) {
  HEAP32[$__parent >> 2] = $__value_$i$i$i$i;
  $retval$0 = $__value_$i$i$i$i;
 } else {
  $__nd$0 = $0;
  while (1) {
   $call$i$i$i = __ZNSt3__29__launderIKNS_4pairIKiPN4tson4TileEEEEEPT_S9_($__nd$0 + 16 | 0) | 0;
   if ((HEAP32[$__v >> 2] | 0) < (HEAP32[$call$i$i$i >> 2] | 0)) {
    $3 = HEAP32[$__nd$0 >> 2] | 0;
    if (!$3) {
     label = 5;
     break;
    } else $__nd$1$in = $3;
   } else {
    $5 = HEAP32[$__nd$0 + 4 >> 2] | 0;
    if (!$5) {
     label = 7;
     break;
    } else $__nd$1$in = $5;
   }
   $__nd$0 = $__nd$1$in;
  }
  if ((label | 0) == 5) {
   HEAP32[$__parent >> 2] = $__nd$0;
   $retval$0 = $__nd$0;
   break;
  } else if ((label | 0) == 7) {
   HEAP32[$__parent >> 2] = $__nd$0;
   $retval$0 = $__nd$0 + 4 | 0;
   break;
  }
 } while (0);
 return $retval$0 | 0;
}

function __ZNSt3__26vectorIiNS_9allocatorIiEEE26__swap_out_circular_bufferERNS_14__split_bufferIiRS2_EE($this, $__v) {
 $this = $this | 0;
 $__v = $__v | 0;
 var $$pre$phiZ2D = 0, $0 = 0, $4 = 0, $5 = 0, $6 = 0, $8 = 0, $__begin_2 = 0, $__end_ = 0, $__end_6 = 0, $__value_$i$i$i = 0, $__value_$i$i$i6 = 0, $add$ptr$i = 0, $sub$ptr$sub$i7 = 0;
 $0 = HEAP32[$this >> 2] | 0;
 $__end_ = $this + 4 | 0;
 $__begin_2 = $__v + 4 | 0;
 $sub$ptr$sub$i7 = (HEAP32[$__end_ >> 2] | 0) - $0 | 0;
 $add$ptr$i = (HEAP32[$__begin_2 >> 2] | 0) + (0 - ($sub$ptr$sub$i7 >> 2) << 2) | 0;
 HEAP32[$__begin_2 >> 2] = $add$ptr$i;
 if (($sub$ptr$sub$i7 | 0) > 0) {
  _memcpy($add$ptr$i | 0, $0 | 0, $sub$ptr$sub$i7 | 0) | 0;
  $$pre$phiZ2D = $__begin_2;
  $5 = HEAP32[$__begin_2 >> 2] | 0;
 } else {
  $$pre$phiZ2D = $__begin_2;
  $5 = $add$ptr$i;
 }
 $4 = HEAP32[$this >> 2] | 0;
 HEAP32[$this >> 2] = $5;
 HEAP32[$$pre$phiZ2D >> 2] = $4;
 $__end_6 = $__v + 8 | 0;
 $6 = HEAP32[$__end_ >> 2] | 0;
 HEAP32[$__end_ >> 2] = HEAP32[$__end_6 >> 2];
 HEAP32[$__end_6 >> 2] = $6;
 $__value_$i$i$i6 = $this + 8 | 0;
 $__value_$i$i$i = $__v + 12 | 0;
 $8 = HEAP32[$__value_$i$i$i6 >> 2] | 0;
 HEAP32[$__value_$i$i$i6 >> 2] = HEAP32[$__value_$i$i$i >> 2];
 HEAP32[$__value_$i$i$i >> 2] = $8;
 HEAP32[$__v >> 2] = HEAP32[$$pre$phiZ2D >> 2];
 return;
}

function _rlColor4ub($x, $y, $z, $w) {
 $x = $x | 0;
 $y = $y | 0;
 $z = $z | 0;
 $w = $w | 0;
 var $cCounter24 = 0, $w$addr = 0, $x$addr = 0, $y$addr = 0, $z$addr = 0, sp = 0, CSE$0 = 0, CSE$1 = 0, CSE$2 = 0, CSE$3 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $x$addr = sp + 3 | 0;
 $y$addr = sp + 2 | 0;
 $z$addr = sp + 1 | 0;
 $w$addr = sp;
 HEAP8[$x$addr >> 0] = $x;
 HEAP8[$y$addr >> 0] = $y;
 HEAP8[$z$addr >> 0] = $z;
 HEAP8[$w$addr >> 0] = $w;
 CSE$0 = 47408 + ((HEAP32[14847] | 0) * 48 | 0) | 0;
 HEAP8[(HEAP32[CSE$0 + 20 >> 2] | 0) + (HEAP32[CSE$0 + 8 >> 2] << 2) >> 0] = HEAP8[$x$addr >> 0] | 0;
 CSE$1 = 47408 + ((HEAP32[14847] | 0) * 48 | 0) | 0;
 HEAP8[(HEAP32[CSE$1 + 20 >> 2] | 0) + ((HEAP32[CSE$1 + 8 >> 2] << 2) + 1) >> 0] = HEAP8[$y$addr >> 0] | 0;
 CSE$2 = 47408 + ((HEAP32[14847] | 0) * 48 | 0) | 0;
 HEAP8[(HEAP32[CSE$2 + 20 >> 2] | 0) + ((HEAP32[CSE$2 + 8 >> 2] << 2) + 2) >> 0] = HEAP8[$z$addr >> 0] | 0;
 CSE$3 = 47408 + ((HEAP32[14847] | 0) * 48 | 0) | 0;
 HEAP8[(HEAP32[CSE$3 + 20 >> 2] | 0) + ((HEAP32[CSE$3 + 8 >> 2] << 2) + 3) >> 0] = HEAP8[$w$addr >> 0] | 0;
 $cCounter24 = 47408 + ((HEAP32[14847] | 0) * 48 | 0) + 8 | 0;
 HEAP32[$cCounter24 >> 2] = (HEAP32[$cCounter24 >> 2] | 0) + 1;
 STACKTOP = sp;
 return;
}

function _stbir__setup($info, $input_w, $input_h, $output_w, $output_h, $channels) {
 $info = $info | 0;
 $input_w = $input_w | 0;
 $input_h = $input_h | 0;
 $output_w = $output_w | 0;
 $output_h = $output_h | 0;
 $channels = $channels | 0;
 var $channels$addr = 0, $info$addr = 0, $input_h$addr = 0, $input_w$addr = 0, $output_h$addr = 0, $output_w$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $info$addr = sp + 20 | 0;
 $input_w$addr = sp + 16 | 0;
 $input_h$addr = sp + 12 | 0;
 $output_w$addr = sp + 8 | 0;
 $output_h$addr = sp + 4 | 0;
 $channels$addr = sp;
 HEAP32[$info$addr >> 2] = $info;
 HEAP32[$input_w$addr >> 2] = $input_w;
 HEAP32[$input_h$addr >> 2] = $input_h;
 HEAP32[$output_w$addr >> 2] = $output_w;
 HEAP32[$output_h$addr >> 2] = $output_h;
 HEAP32[$channels$addr >> 2] = $channels;
 HEAP32[(HEAP32[$info$addr >> 2] | 0) + 4 >> 2] = HEAP32[$input_w$addr >> 2];
 HEAP32[(HEAP32[$info$addr >> 2] | 0) + 8 >> 2] = HEAP32[$input_h$addr >> 2];
 HEAP32[(HEAP32[$info$addr >> 2] | 0) + 20 >> 2] = HEAP32[$output_w$addr >> 2];
 HEAP32[(HEAP32[$info$addr >> 2] | 0) + 24 >> 2] = HEAP32[$output_h$addr >> 2];
 HEAP32[(HEAP32[$info$addr >> 2] | 0) + 64 >> 2] = HEAP32[$channels$addr >> 2];
 STACKTOP = sp;
 return;
}

function __ZNSt3__26vectorIcNS_9allocatorIcEEE26__swap_out_circular_bufferERNS_14__split_bufferIcRS2_EE($this, $__v) {
 $this = $this | 0;
 $__v = $__v | 0;
 var $$pre$phiZ2D = 0, $0 = 0, $4 = 0, $5 = 0, $6 = 0, $8 = 0, $__begin_2 = 0, $__end_ = 0, $__end_6 = 0, $__value_$i$i$i = 0, $__value_$i$i$i6 = 0, $add$ptr$i = 0, $sub$ptr$sub$i7 = 0;
 $0 = HEAP32[$this >> 2] | 0;
 $__end_ = $this + 4 | 0;
 $__begin_2 = $__v + 4 | 0;
 $sub$ptr$sub$i7 = (HEAP32[$__end_ >> 2] | 0) - $0 | 0;
 $add$ptr$i = (HEAP32[$__begin_2 >> 2] | 0) + (0 - $sub$ptr$sub$i7) | 0;
 HEAP32[$__begin_2 >> 2] = $add$ptr$i;
 if (($sub$ptr$sub$i7 | 0) > 0) {
  _memcpy($add$ptr$i | 0, $0 | 0, $sub$ptr$sub$i7 | 0) | 0;
  $$pre$phiZ2D = $__begin_2;
  $5 = HEAP32[$__begin_2 >> 2] | 0;
 } else {
  $$pre$phiZ2D = $__begin_2;
  $5 = $add$ptr$i;
 }
 $4 = HEAP32[$this >> 2] | 0;
 HEAP32[$this >> 2] = $5;
 HEAP32[$$pre$phiZ2D >> 2] = $4;
 $__end_6 = $__v + 8 | 0;
 $6 = HEAP32[$__end_ >> 2] | 0;
 HEAP32[$__end_ >> 2] = HEAP32[$__end_6 >> 2];
 HEAP32[$__end_6 >> 2] = $6;
 $__value_$i$i$i6 = $this + 8 | 0;
 $__value_$i$i$i = $__v + 12 | 0;
 $8 = HEAP32[$__value_$i$i$i6 >> 2] | 0;
 HEAP32[$__value_$i$i$i6 >> 2] = HEAP32[$__value_$i$i$i >> 2];
 HEAP32[$__value_$i$i$i >> 2] = $8;
 HEAP32[$__v >> 2] = HEAP32[$$pre$phiZ2D >> 2];
 return;
}

function _GetGamepadButton($button) {
 $button = $button | 0;
 var $btn = 0, $button$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $button$addr = sp + 4 | 0;
 $btn = sp;
 HEAP32[$button$addr >> 2] = $button;
 HEAP32[$btn >> 2] = 0;
 do switch (HEAP32[$button$addr >> 2] | 0) {
 case 0:
  {
   HEAP32[$btn >> 2] = 7;
   break;
  }
 case 1:
  {
   HEAP32[$btn >> 2] = 6;
   break;
  }
 case 2:
  {
   HEAP32[$btn >> 2] = 8;
   break;
  }
 case 3:
  {
   HEAP32[$btn >> 2] = 5;
   break;
  }
 case 4:
  {
   HEAP32[$btn >> 2] = 9;
   break;
  }
 case 5:
  {
   HEAP32[$btn >> 2] = 11;
   break;
  }
 case 6:
  {
   HEAP32[$btn >> 2] = 10;
   break;
  }
 case 7:
  {
   HEAP32[$btn >> 2] = 12;
   break;
  }
 case 8:
  {
   HEAP32[$btn >> 2] = 13;
   break;
  }
 case 9:
  {
   HEAP32[$btn >> 2] = 15;
   break;
  }
 case 10:
  {
   HEAP32[$btn >> 2] = 16;
   break;
  }
 case 11:
  {
   HEAP32[$btn >> 2] = 17;
   break;
  }
 case 12:
  {
   HEAP32[$btn >> 2] = 1;
   break;
  }
 case 13:
  {
   HEAP32[$btn >> 2] = 3;
   break;
  }
 case 14:
  {
   HEAP32[$btn >> 2] = 4;
   break;
  }
 case 15:
  {
   HEAP32[$btn >> 2] = 2;
   break;
  }
 default:
  {}
 } while (0);
 STACKTOP = sp;
 return HEAP32[$btn >> 2] | 0;
}

function __ZNSt3__212_GLOBAL__N_129throw_from_string_invalid_argERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE($func) {
 $func = $func | 0;
 var $0 = 0, $__i$0$i$i$i = 0, $__size_$i$i$i = 0, $call1$i = 0, $cond$i$i = 0, $ref$tmp = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $ref$tmp = sp;
 HEAP32[$ref$tmp >> 2] = 0;
 HEAP32[$ref$tmp + 4 >> 2] = 0;
 HEAP32[$ref$tmp + 8 >> 2] = 0;
 $__i$0$i$i$i = 0;
 while (1) {
  if (($__i$0$i$i$i | 0) == 3) break;
  HEAP32[$ref$tmp + ($__i$0$i$i$i << 2) >> 2] = 0;
  $__i$0$i$i$i = $__i$0$i$i$i + 1 | 0;
 }
 $__size_$i$i$i = $func + 11 | 0;
 $0 = HEAP8[$__size_$i$i$i >> 0] | 0;
 $cond$i$i = $0 << 24 >> 24 < 0 ? HEAP32[$func + 4 >> 2] | 0 : $0 & 255;
 $call1$i = __ZNSt3__211char_traitsIcE6lengthEPKc(45022) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcmm($ref$tmp, (HEAP8[$__size_$i$i$i >> 0] | 0) < 0 ? HEAP32[$func >> 2] | 0 : $func, $cond$i$i, $cond$i$i + $call1$i | 0);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcm($ref$tmp, 45022, $call1$i) | 0;
 __ZNSt3__212_GLOBAL__N_112throw_helperISt16invalid_argumentEEvRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE($ref$tmp);
}

function __ZNSt3__212_GLOBAL__N_130throw_from_string_out_of_rangeERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE($func) {
 $func = $func | 0;
 var $0 = 0, $__i$0$i$i$i = 0, $__size_$i$i$i = 0, $call1$i = 0, $cond$i$i = 0, $ref$tmp = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $ref$tmp = sp;
 HEAP32[$ref$tmp >> 2] = 0;
 HEAP32[$ref$tmp + 4 >> 2] = 0;
 HEAP32[$ref$tmp + 8 >> 2] = 0;
 $__i$0$i$i$i = 0;
 while (1) {
  if (($__i$0$i$i$i | 0) == 3) break;
  HEAP32[$ref$tmp + ($__i$0$i$i$i << 2) >> 2] = 0;
  $__i$0$i$i$i = $__i$0$i$i$i + 1 | 0;
 }
 $__size_$i$i$i = $func + 11 | 0;
 $0 = HEAP8[$__size_$i$i$i >> 0] | 0;
 $cond$i$i = $0 << 24 >> 24 < 0 ? HEAP32[$func + 4 >> 2] | 0 : $0 & 255;
 $call1$i = __ZNSt3__211char_traitsIcE6lengthEPKc(45042) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcmm($ref$tmp, (HEAP8[$__size_$i$i$i >> 0] | 0) < 0 ? HEAP32[$func >> 2] | 0 : $func, $cond$i$i, $cond$i$i + $call1$i | 0);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcm($ref$tmp, 45042, $call1$i) | 0;
 __ZNSt3__212_GLOBAL__N_112throw_helperISt12out_of_rangeEEvRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE($ref$tmp);
}

function _stbi__malloc_mad4($a, $b, $c, $d, $add) {
 $a = $a | 0;
 $b = $b | 0;
 $c = $c | 0;
 $d = $d | 0;
 $add = $add | 0;
 var $10 = 0, $a$addr = 0, $add$addr = 0, $b$addr = 0, $c$addr = 0, $d$addr = 0, $mul = 0, $mul1 = 0, $mul2 = 0, $retval = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $retval = sp + 20 | 0;
 $a$addr = sp + 16 | 0;
 $b$addr = sp + 12 | 0;
 $c$addr = sp + 8 | 0;
 $d$addr = sp + 4 | 0;
 $add$addr = sp;
 HEAP32[$a$addr >> 2] = $a;
 HEAP32[$b$addr >> 2] = $b;
 HEAP32[$c$addr >> 2] = $c;
 HEAP32[$d$addr >> 2] = $d;
 HEAP32[$add$addr >> 2] = $add;
 if (_stbi__mad4sizes_valid(HEAP32[$a$addr >> 2] | 0, HEAP32[$b$addr >> 2] | 0, HEAP32[$c$addr >> 2] | 0, HEAP32[$d$addr >> 2] | 0, HEAP32[$add$addr >> 2] | 0) | 0) {
  $mul = Math_imul(HEAP32[$a$addr >> 2] | 0, HEAP32[$b$addr >> 2] | 0) | 0;
  $mul1 = Math_imul($mul, HEAP32[$c$addr >> 2] | 0) | 0;
  $mul2 = Math_imul($mul1, HEAP32[$d$addr >> 2] | 0) | 0;
  HEAP32[$retval >> 2] = _stbi__malloc($mul2 + (HEAP32[$add$addr >> 2] | 0) | 0) | 0;
  $10 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $10 | 0;
 } else {
  HEAP32[$retval >> 2] = 0;
  $10 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $10 | 0;
 }
 return 0;
}

function _fflush($f) {
 $f = $f | 0;
 var $call1 = 0, $cond10 = 0, $cond20 = 0, $f$addr$019 = 0, $f$addr$022 = 0, $phitmp = 0, $r$0$lcssa = 0, $r$021 = 0, $r$1 = 0, $retval$0 = 0;
 do if (!$f) {
  if (!(HEAP32[4504] | 0)) $cond10 = 0; else $cond10 = _fflush(HEAP32[4504] | 0) | 0;
  $f$addr$019 = HEAP32[(___ofl_lock() | 0) >> 2] | 0;
  if (!$f$addr$019) $r$0$lcssa = $cond10; else {
   $f$addr$022 = $f$addr$019;
   $r$021 = $cond10;
   while (1) {
    if ((HEAP32[$f$addr$022 + 76 >> 2] | 0) > -1) $cond20 = ___lockfile($f$addr$022) | 0; else $cond20 = 0;
    if ((HEAP32[$f$addr$022 + 20 >> 2] | 0) >>> 0 > (HEAP32[$f$addr$022 + 28 >> 2] | 0) >>> 0) $r$1 = ___fflush_unlocked($f$addr$022) | 0 | $r$021; else $r$1 = $r$021;
    if ($cond20 | 0) ___unlockfile($f$addr$022);
    $f$addr$022 = HEAP32[$f$addr$022 + 56 >> 2] | 0;
    if (!$f$addr$022) {
     $r$0$lcssa = $r$1;
     break;
    } else $r$021 = $r$1;
   }
  }
  ___ofl_unlock();
  $retval$0 = $r$0$lcssa;
 } else {
  if ((HEAP32[$f + 76 >> 2] | 0) <= -1) {
   $retval$0 = ___fflush_unlocked($f) | 0;
   break;
  }
  $phitmp = (___lockfile($f) | 0) == 0;
  $call1 = ___fflush_unlocked($f) | 0;
  if ($phitmp) $retval$0 = $call1; else {
   ___unlockfile($f);
   $retval$0 = $call1;
  }
 } while (0);
 return $retval$0 | 0;
}

function _stbi__hdr_gettoken($z, $buffer) {
 $z = $z | 0;
 $buffer = $buffer | 0;
 var $3 = 0, $4 = 0, $5 = 0, $buffer$addr = 0, $c = 0, $len = 0, $z$addr = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $z$addr = sp + 8 | 0;
 $buffer$addr = sp + 4 | 0;
 $len = sp;
 $c = sp + 12 | 0;
 HEAP32[$z$addr >> 2] = $z;
 HEAP32[$buffer$addr >> 2] = $buffer;
 HEAP32[$len >> 2] = 0;
 HEAP8[$c >> 0] = 0;
 HEAP8[$c >> 0] = _stbi__get8(HEAP32[$z$addr >> 2] | 0) | 0;
 while (1) {
  if (_stbi__at_eof(HEAP32[$z$addr >> 2] | 0) | 0) break;
  if ((HEAP8[$c >> 0] | 0) == 10) break;
  $3 = HEAP8[$c >> 0] | 0;
  $4 = HEAP32[$buffer$addr >> 2] | 0;
  $5 = HEAP32[$len >> 2] | 0;
  HEAP32[$len >> 2] = $5 + 1;
  HEAP8[$4 + $5 >> 0] = $3;
  if ((HEAP32[$len >> 2] | 0) == 1023) {
   label = 5;
   break;
  }
  HEAP8[$c >> 0] = _stbi__get8(HEAP32[$z$addr >> 2] | 0) | 0;
 }
 L6 : do if ((label | 0) == 5) while (1) {
  if (_stbi__at_eof(HEAP32[$z$addr >> 2] | 0) | 0) break L6;
  if (((_stbi__get8(HEAP32[$z$addr >> 2] | 0) | 0) & 255 | 0) == 10) break L6;
 } while (0);
 HEAP8[(HEAP32[$buffer$addr >> 2] | 0) + (HEAP32[$len >> 2] | 0) >> 0] = 0;
 STACKTOP = sp;
 return HEAP32[$buffer$addr >> 2] | 0;
}

function _stbi__skip($s, $n) {
 $s = $s | 0;
 $n = $n | 0;
 var $1 = 0, $blen = 0, $img_buffer11 = 0, $n$addr = 0, $s$addr = 0, sp = 0, CSE$0 = 0, CSE$1 = 0, CSE$2 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $s$addr = sp + 8 | 0;
 $n$addr = sp + 4 | 0;
 $blen = sp;
 HEAP32[$s$addr >> 2] = $s;
 HEAP32[$n$addr >> 2] = $n;
 $1 = HEAP32[$s$addr >> 2] | 0;
 if ((HEAP32[$n$addr >> 2] | 0) < 0) {
  HEAP32[(HEAP32[$s$addr >> 2] | 0) + 168 >> 2] = HEAP32[$1 + 172 >> 2];
  STACKTOP = sp;
  return;
 }
 if (HEAP32[$1 + 16 >> 2] | 0) {
  CSE$0 = HEAP32[$s$addr >> 2] | 0;
  HEAP32[$blen >> 2] = (HEAP32[CSE$0 + 172 >> 2] | 0) - (HEAP32[CSE$0 + 168 >> 2] | 0);
  if ((HEAP32[$blen >> 2] | 0) < (HEAP32[$n$addr >> 2] | 0)) {
   CSE$1 = HEAP32[$s$addr >> 2] | 0;
   HEAP32[CSE$1 + 168 >> 2] = HEAP32[CSE$1 + 172 >> 2];
   CSE$2 = HEAP32[$s$addr >> 2] | 0;
   FUNCTION_TABLE_vii[HEAP32[CSE$2 + 16 + 4 >> 2] & 127](HEAP32[CSE$2 + 28 >> 2] | 0, (HEAP32[$n$addr >> 2] | 0) - (HEAP32[$blen >> 2] | 0) | 0);
   STACKTOP = sp;
   return;
  }
 }
 $img_buffer11 = (HEAP32[$s$addr >> 2] | 0) + 168 | 0;
 HEAP32[$img_buffer11 >> 2] = (HEAP32[$img_buffer11 >> 2] | 0) + (HEAP32[$n$addr >> 2] | 0);
 STACKTOP = sp;
 return;
}

function __ZN4tson4TextaSEOS0_($this, $0) {
 $this = $this | 0;
 $0 = $0 | 0;
 var $2 = 0, $__cap_$i$i$i$i$i = 0, $__size_$i1$i$i$i$i = 0, $ref$tmp$i$i$i$i = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $ref$tmp$i$i$i$i = sp;
 $__size_$i1$i$i$i$i = $this + 11 | 0;
 if ((HEAP8[$__size_$i1$i$i$i$i >> 0] | 0) < 0) {
  $2 = HEAP32[$this >> 2] | 0;
  HEAP8[$ref$tmp$i$i$i$i >> 0] = 0;
  __ZNSt3__211char_traitsIcE6assignERcRKc($2, $ref$tmp$i$i$i$i);
  HEAP32[$this + 4 >> 2] = 0;
  if ((HEAP8[$__size_$i1$i$i$i$i >> 0] | 0) < 0) {
   $__cap_$i$i$i$i$i = $this + 8 | 0;
   __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm(HEAP32[$this >> 2] | 0, HEAP32[$__cap_$i$i$i$i$i >> 2] & 2147483647);
   HEAP32[$__cap_$i$i$i$i$i >> 2] = 0;
  }
 } else {
  HEAP8[$ref$tmp$i$i$i$i >> 0] = 0;
  __ZNSt3__211char_traitsIcE6assignERcRKc($this, $ref$tmp$i$i$i$i);
  HEAP8[$__size_$i1$i$i$i$i >> 0] = 0;
 };
 HEAP32[$this >> 2] = HEAP32[$0 >> 2];
 HEAP32[$this + 4 >> 2] = HEAP32[$0 + 4 >> 2];
 HEAP32[$this + 8 >> 2] = HEAP32[$0 + 8 >> 2];
 HEAP32[$0 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 0;
 HEAP8[$this + 12 >> 0] = HEAP8[$0 + 12 >> 0] | 0;
 STACKTOP = sp;
 return $this | 0;
}

function __ZNSt3__26vectorIbNS_9allocatorIbEEE9push_backERKb($this, $__x) {
 $this = $this | 0;
 $__x = $__x | 0;
 var $0 = 0, $2 = 0, $3 = 0, $__size_ = 0, $__value_$i$i$i$i = 0, $add$ptr$i$i = 0, $and$i$i = 0, $call$i = 0, $mul$i = 0, $shl$i$i = 0, $storemerge = 0;
 $__size_ = $this + 4 | 0;
 $0 = HEAP32[$__size_ >> 2] | 0;
 $__value_$i$i$i$i = $this + 8 | 0;
 do if (($0 | 0) == (HEAP32[$__value_$i$i$i$i >> 2] << 5 | 0)) {
  $call$i = __ZNKSt3__26vectorIbNS_9allocatorIbEEE8max_sizeEv($this) | 0;
  if ($call$i >>> 0 < ($0 + 1 | 0) >>> 0) __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($this); else {
   $2 = HEAP32[$__value_$i$i$i$i >> 2] | 0;
   $mul$i = $2 << 6;
   $and$i$i = $0 + 32 & -32;
   __ZNSt3__26vectorIbNS_9allocatorIbEEE7reserveEm($this, $2 << 5 >>> 0 < $call$i >>> 1 >>> 0 ? ($mul$i >>> 0 < $and$i$i >>> 0 ? $and$i$i : $mul$i) : $call$i);
   $3 = HEAP32[$__size_ >> 2] | 0;
   break;
  }
 } else $3 = $0; while (0);
 HEAP32[$__size_ >> 2] = $3 + 1;
 $add$ptr$i$i = (HEAP32[$this >> 2] | 0) + ($3 >>> 5 << 2) | 0;
 $shl$i$i = 1 << ($3 & 31);
 if (!(HEAP8[$__x >> 0] | 0)) $storemerge = HEAP32[$add$ptr$i$i >> 2] & ~$shl$i$i; else $storemerge = HEAP32[$add$ptr$i$i >> 2] | $shl$i$i;
 HEAP32[$add$ptr$i$i >> 2] = $storemerge;
 return;
}

function __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE6xsgetnEPwl($this, $__s, $__n) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__n = $__n | 0;
 var $$pn = 0, $0 = 0, $1 = 0, $4 = 0, $__einp_ = 0, $__i$0 = 0, $__ninp_ = 0, $__s$addr$0 = 0, $__s$addr$1 = 0, $call11 = 0, $sub = 0, $sub$ptr$div = 0;
 __ZNSt3__211char_traitsIwE3eofEv() | 0;
 $__ninp_ = $this + 12 | 0;
 $__einp_ = $this + 16 | 0;
 $__i$0 = 0;
 $__s$addr$0 = $__s;
 while (1) {
  if (($__i$0 | 0) >= ($__n | 0)) break;
  $0 = HEAP32[$__ninp_ >> 2] | 0;
  $1 = HEAP32[$__einp_ >> 2] | 0;
  if ($0 >>> 0 < $1 >>> 0) {
   $sub$ptr$div = $1 - $0 >> 2;
   $sub = $__n - $__i$0 | 0;
   $4 = ($sub | 0) < ($sub$ptr$div | 0) ? $sub : $sub$ptr$div;
   __ZNSt3__211char_traitsIwE4copyEPwPKwm($__s$addr$0, $0, $4) | 0;
   HEAP32[$__ninp_ >> 2] = (HEAP32[$__ninp_ >> 2] | 0) + ($4 << 2);
   $$pn = $4;
   $__s$addr$1 = $__s$addr$0 + ($4 << 2) | 0;
  } else {
   $call11 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$this >> 2] | 0) + 40 >> 2] & 127]($this) | 0;
   if (($call11 | 0) == -1) break;
   HEAP32[$__s$addr$0 >> 2] = __ZNSt3__211char_traitsIwE12to_char_typeEj($call11) | 0;
   $$pn = 1;
   $__s$addr$1 = $__s$addr$0 + 4 | 0;
  }
  $__i$0 = $$pn + $__i$0 | 0;
  $__s$addr$0 = $__s$addr$1;
 }
 return $__i$0 | 0;
}

function _memset(ptr, value, num) {
 ptr = ptr | 0;
 value = value | 0;
 num = num | 0;
 var end = 0, aligned_end = 0, block_aligned_end = 0, value4 = 0;
 end = ptr + num | 0;
 value = value & 255;
 if ((num | 0) >= 67) {
  while (ptr & 3) {
   HEAP8[ptr >> 0] = value;
   ptr = ptr + 1 | 0;
  }
  aligned_end = end & -4 | 0;
  value4 = value | value << 8 | value << 16 | value << 24;
  block_aligned_end = aligned_end - 64 | 0;
  while ((ptr | 0) <= (block_aligned_end | 0)) {
   HEAP32[ptr >> 2] = value4;
   HEAP32[ptr + 4 >> 2] = value4;
   HEAP32[ptr + 8 >> 2] = value4;
   HEAP32[ptr + 12 >> 2] = value4;
   HEAP32[ptr + 16 >> 2] = value4;
   HEAP32[ptr + 20 >> 2] = value4;
   HEAP32[ptr + 24 >> 2] = value4;
   HEAP32[ptr + 28 >> 2] = value4;
   HEAP32[ptr + 32 >> 2] = value4;
   HEAP32[ptr + 36 >> 2] = value4;
   HEAP32[ptr + 40 >> 2] = value4;
   HEAP32[ptr + 44 >> 2] = value4;
   HEAP32[ptr + 48 >> 2] = value4;
   HEAP32[ptr + 52 >> 2] = value4;
   HEAP32[ptr + 56 >> 2] = value4;
   HEAP32[ptr + 60 >> 2] = value4;
   ptr = ptr + 64 | 0;
  }
  while ((ptr | 0) < (aligned_end | 0)) {
   HEAP32[ptr >> 2] = value4;
   ptr = ptr + 4 | 0;
  }
 }
 while ((ptr | 0) < (end | 0)) {
  HEAP8[ptr >> 0] = value;
  ptr = ptr + 1 | 0;
 }
 return end - num | 0;
}

function __ZNSt3__211__stdoutbufIwE4syncEv($this) {
 $this = $this | 0;
 var $0 = 0, $__cv_ = 0, $__extbe = 0, $__extbuf = 0, $__file_ = 0, $__st_ = 0, $add$ptr = 0, $call$i = 0, $retval$2 = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$sub = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $__extbuf = sp + 8 | 0;
 $__extbe = sp;
 $__cv_ = $this + 36 | 0;
 $__st_ = $this + 40 | 0;
 $add$ptr = $__extbuf + 8 | 0;
 $sub$ptr$rhs$cast = $__extbuf;
 $__file_ = $this + 32 | 0;
 L1 : while (1) {
  $0 = HEAP32[$__cv_ >> 2] | 0;
  $call$i = FUNCTION_TABLE_iiiiii[HEAP32[(HEAP32[$0 >> 2] | 0) + 20 >> 2] & 31]($0, HEAP32[$__st_ >> 2] | 0, $__extbuf, $add$ptr, $__extbe) | 0;
  $sub$ptr$sub = (HEAP32[$__extbe >> 2] | 0) - $sub$ptr$rhs$cast | 0;
  if ((_fwrite($__extbuf, 1, $sub$ptr$sub, HEAP32[$__file_ >> 2] | 0) | 0) != ($sub$ptr$sub | 0)) {
   $retval$2 = -1;
   break;
  }
  switch ($call$i | 0) {
  case 1:
   break;
  case 2:
   {
    $retval$2 = -1;
    break L1;
    break;
   }
  default:
   {
    label = 4;
    break L1;
   }
  }
 }
 if ((label | 0) == 4) $retval$2 = ((_fflush(HEAP32[$__file_ >> 2] | 0) | 0) != 0) << 31 >> 31;
 STACKTOP = sp;
 return $retval$2 | 0;
}

function __ZNSt3__211__stdoutbufIcE4syncEv($this) {
 $this = $this | 0;
 var $0 = 0, $__cv_ = 0, $__extbe = 0, $__extbuf = 0, $__file_ = 0, $__st_ = 0, $add$ptr = 0, $call$i = 0, $retval$2 = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$sub = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $__extbuf = sp + 8 | 0;
 $__extbe = sp;
 $__cv_ = $this + 36 | 0;
 $__st_ = $this + 40 | 0;
 $add$ptr = $__extbuf + 8 | 0;
 $sub$ptr$rhs$cast = $__extbuf;
 $__file_ = $this + 32 | 0;
 L1 : while (1) {
  $0 = HEAP32[$__cv_ >> 2] | 0;
  $call$i = FUNCTION_TABLE_iiiiii[HEAP32[(HEAP32[$0 >> 2] | 0) + 20 >> 2] & 31]($0, HEAP32[$__st_ >> 2] | 0, $__extbuf, $add$ptr, $__extbe) | 0;
  $sub$ptr$sub = (HEAP32[$__extbe >> 2] | 0) - $sub$ptr$rhs$cast | 0;
  if ((_fwrite($__extbuf, 1, $sub$ptr$sub, HEAP32[$__file_ >> 2] | 0) | 0) != ($sub$ptr$sub | 0)) {
   $retval$2 = -1;
   break;
  }
  switch ($call$i | 0) {
  case 1:
   break;
  case 2:
   {
    $retval$2 = -1;
    break L1;
    break;
   }
  default:
   {
    label = 4;
    break L1;
   }
  }
 }
 if ((label | 0) == 4) $retval$2 = ((_fflush(HEAP32[$__file_ >> 2] | 0) | 0) != 0) << 31 >> 31;
 STACKTOP = sp;
 return $retval$2 | 0;
}

function __ZN4tson5LayerD2Ev($this) {
 $this = $this | 0;
 __ZNSt3__23mapINS_5tupleIJiiEEEPN4tson4TileENS_4lessIS2_EENS_9allocatorINS_4pairIKS2_S5_EEEEED2Ev($this + 208 | 0);
 __ZNSt3__23mapIiPN4tson4TileENS_4lessIiEENS_9allocatorINS_4pairIKiS3_EEEEED2Ev($this + 196 | 0);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($this + 172 | 0);
 __ZN4tson18PropertyCollectionD2Ev($this + 136 | 0);
 __ZNSt3__213__vector_baseIN4tson6ObjectENS_9allocatorIS2_EEED2Ev($this + 112 | 0);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($this + 100 | 0);
 __ZNSt3__213__vector_baseIN4tson5LayerENS_9allocatorIS2_EEED2Ev($this + 88 | 0);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($this + 76 | 0);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($this + 60 | 0);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($this + 48 | 0);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($this + 36 | 0);
 __ZNSt3__213__vector_baseIiNS_9allocatorIiEEED2Ev($this + 24 | 0);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($this + 12 | 0);
 __ZNSt3__213__vector_baseIN4tson5ChunkENS_9allocatorIS2_EEED2Ev($this);
 return;
}

function __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE6xsgetnEPcl($this, $__s, $__n) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__n = $__n | 0;
 var $$pn = 0, $0 = 0, $1 = 0, $4 = 0, $__einp_ = 0, $__i$0 = 0, $__ninp_ = 0, $__s$addr$0 = 0, $__s$addr$1 = 0, $call11 = 0, $sub = 0, $sub$ptr$sub = 0;
 __ZNSt3__211char_traitsIcE3eofEv() | 0;
 $__ninp_ = $this + 12 | 0;
 $__einp_ = $this + 16 | 0;
 $__i$0 = 0;
 $__s$addr$0 = $__s;
 while (1) {
  if (($__i$0 | 0) >= ($__n | 0)) break;
  $0 = HEAP32[$__ninp_ >> 2] | 0;
  $1 = HEAP32[$__einp_ >> 2] | 0;
  if ($0 >>> 0 < $1 >>> 0) {
   $sub$ptr$sub = $1 - $0 | 0;
   $sub = $__n - $__i$0 | 0;
   $4 = ($sub | 0) < ($sub$ptr$sub | 0) ? $sub : $sub$ptr$sub;
   __ZNSt3__211char_traitsIcE4copyEPcPKcm($__s$addr$0, $0, $4) | 0;
   HEAP32[$__ninp_ >> 2] = (HEAP32[$__ninp_ >> 2] | 0) + $4;
   $$pn = $4;
   $__s$addr$1 = $__s$addr$0 + $4 | 0;
  } else {
   $call11 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$this >> 2] | 0) + 40 >> 2] & 127]($this) | 0;
   if (($call11 | 0) == -1) break;
   HEAP8[$__s$addr$0 >> 0] = __ZNSt3__211char_traitsIcE12to_char_typeEi($call11) | 0;
   $$pn = 1;
   $__s$addr$1 = $__s$addr$0 + 1 | 0;
  }
  $__i$0 = $$pn + $__i$0 | 0;
  $__s$addr$0 = $__s$addr$1;
 }
 return $__i$0 | 0;
}

function _ImageFromImage($agg$result, $image, $rec) {
 $agg$result = $agg$result | 0;
 $image = $image | 0;
 $rec = $rec | 0;
 var $rec$byval_copy = 0, $result = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 $rec$byval_copy = sp + 20 | 0;
 $result = sp;
 HEAP32[$rec$byval_copy >> 2] = HEAP32[$image >> 2];
 HEAP32[$rec$byval_copy + 4 >> 2] = HEAP32[$image + 4 >> 2];
 HEAP32[$rec$byval_copy + 8 >> 2] = HEAP32[$image + 8 >> 2];
 HEAP32[$rec$byval_copy + 12 >> 2] = HEAP32[$image + 12 >> 2];
 HEAP32[$rec$byval_copy + 16 >> 2] = HEAP32[$image + 16 >> 2];
 _ImageCopy($result, $rec$byval_copy);
 HEAP32[$rec$byval_copy >> 2] = HEAP32[$rec >> 2];
 HEAP32[$rec$byval_copy + 4 >> 2] = HEAP32[$rec + 4 >> 2];
 HEAP32[$rec$byval_copy + 8 >> 2] = HEAP32[$rec + 8 >> 2];
 HEAP32[$rec$byval_copy + 12 >> 2] = HEAP32[$rec + 12 >> 2];
 _ImageCrop($result, $rec$byval_copy);
 HEAP32[$agg$result >> 2] = HEAP32[$result >> 2];
 HEAP32[$agg$result + 4 >> 2] = HEAP32[$result + 4 >> 2];
 HEAP32[$agg$result + 8 >> 2] = HEAP32[$result + 8 >> 2];
 HEAP32[$agg$result + 12 >> 2] = HEAP32[$result + 12 >> 2];
 HEAP32[$agg$result + 16 >> 2] = HEAP32[$result + 16 >> 2];
 STACKTOP = sp;
 return;
}

function __ZN4tson5LayerC2Ev($this) {
 $this = $this | 0;
 var $m_offset = 0, $m_typeStr = 0, $ref$tmp$i1 = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $ref$tmp$i1 = sp;
 $m_offset = $this + 124 | 0;
 dest = $this;
 stop = dest + 124 | 0;
 do {
  HEAP32[dest >> 2] = 0;
  dest = dest + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 __ZN4tson7Vector2IfEC2Ev($m_offset);
 HEAPF32[$this + 132 >> 2] = Math_fround(0.0);
 __ZN4tson18PropertyCollectionC2Ev($this + 136 | 0);
 __ZN4tson7Vector2IiEC2Ev($this + 160 | 0);
 __ZN4tson5ColorIhEC2Ev($this + 168 | 0);
 $m_typeStr = $this + 172 | 0;
 HEAP32[$this + 188 >> 2] = 0;
 HEAP32[$this + 192 >> 2] = 0;
 HEAP32[$m_typeStr >> 2] = 0;
 HEAP32[$m_typeStr + 4 >> 2] = 0;
 HEAP32[$m_typeStr + 8 >> 2] = 0;
 HEAP16[$m_typeStr + 12 >> 1] = 0;
 __ZNSt3__26__treeINS_12__value_typeIiPN4tson4TileEEENS_19__map_value_compareIiS5_NS_4lessIiEELb1EEENS_9allocatorIS5_EEEC2ERKS9_($this + 196 | 0, $ref$tmp$i1);
 __ZNSt3__26__treeINS_12__value_typeINS_5tupleIJiiEEEPN4tson4TileEEENS_19__map_value_compareIS3_S7_NS_4lessIS3_EELb1EEENS_9allocatorIS7_EEEC2ERKSB_($this + 208 | 0, $ref$tmp$i1);
 STACKTOP = sp;
 return;
}

function _GifWritePalette($f, $pPal) {
 $f = $f | 0;
 $pPal = $pPal | 0;
 var $b = 0, $f$addr = 0, $g = 0, $ii = 0, $pPal$addr = 0, $r = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $f$addr = sp + 20 | 0;
 $pPal$addr = sp + 16 | 0;
 $ii = sp + 12 | 0;
 $r = sp + 8 | 0;
 $g = sp + 4 | 0;
 $b = sp;
 HEAP32[$f$addr >> 2] = $f;
 HEAP32[$pPal$addr >> 2] = $pPal;
 _fputc(0, HEAP32[$f$addr >> 2] | 0) | 0;
 _fputc(0, HEAP32[$f$addr >> 2] | 0) | 0;
 _fputc(0, HEAP32[$f$addr >> 2] | 0) | 0;
 HEAP32[$ii >> 2] = 1;
 while (1) {
  if ((HEAP32[$ii >> 2] | 0) >= (1 << HEAP32[HEAP32[$pPal$addr >> 2] >> 2] | 0)) break;
  HEAP32[$r >> 2] = HEAPU8[(HEAP32[$pPal$addr >> 2] | 0) + 4 + (HEAP32[$ii >> 2] | 0) >> 0];
  HEAP32[$g >> 2] = HEAPU8[(HEAP32[$pPal$addr >> 2] | 0) + 260 + (HEAP32[$ii >> 2] | 0) >> 0];
  HEAP32[$b >> 2] = HEAPU8[(HEAP32[$pPal$addr >> 2] | 0) + 516 + (HEAP32[$ii >> 2] | 0) >> 0];
  _fputc(HEAP32[$r >> 2] | 0, HEAP32[$f$addr >> 2] | 0) | 0;
  _fputc(HEAP32[$g >> 2] | 0, HEAP32[$f$addr >> 2] | 0) | 0;
  _fputc(HEAP32[$b >> 2] | 0, HEAP32[$f$addr >> 2] | 0) | 0;
  HEAP32[$ii >> 2] = (HEAP32[$ii >> 2] | 0) + 1;
 }
 STACKTOP = sp;
 return;
}

function __ZN4tson7Tileson9parseJsonERKN8nlohmann10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS1_14adl_serializerEEE($agg$result, $this, $json) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $json = $json | 0;
 var $agg$tmp = 0, $map = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(208);
 $map = sp + 12 | 0;
 $agg$tmp = sp;
 __ZN4tson3MapC2Ev($map);
 if (__ZN4tson3Map5parseERKN8nlohmann10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS1_14adl_serializerEEE($map, $json) | 0) __ZN4tson3MapC2EOS0_($agg$result, $map); else {
  HEAP32[$agg$tmp >> 2] = 0;
  HEAP32[$agg$tmp + 4 >> 2] = 0;
  HEAP32[$agg$tmp + 8 >> 2] = 0;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcm($agg$tmp, 22376, __ZNSt3__211char_traitsIcE6lengthEPKc(22376) | 0);
  __ZN4tson3MapC2ENS_11ParseStatusENSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE($agg$result, 3, $agg$tmp);
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($agg$tmp);
 }
 __ZN4tson3MapD2Ev($map);
 STACKTOP = sp;
 return;
}

function __ZNSt3__212_GLOBAL__N_117as_integer_helperIlNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPFlPKcPPciEEET_RKS7_RKT0_PmiT1_($func, $str, $idx, $base) {
 $func = $func | 0;
 $str = $str | 0;
 $idx = $idx | 0;
 $base = $base | 0;
 var $2 = 0, $3 = 0, $4 = 0, $call3 = 0, $call4 = 0, $cond$i$i$i = 0, $ptr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $ptr = sp;
 HEAP32[$ptr >> 2] = 0;
 $cond$i$i$i = (HEAP8[$str + 11 >> 0] | 0) < 0 ? HEAP32[$str >> 2] | 0 : $str;
 $2 = HEAP32[(___errno_location() | 0) >> 2] | 0;
 HEAP32[(___errno_location() | 0) >> 2] = 0;
 $call3 = _strtol($cond$i$i$i, $ptr, $base) | 0;
 $call4 = ___errno_location() | 0;
 $3 = HEAP32[$call4 >> 2] | 0;
 HEAP32[$call4 >> 2] = $2;
 if (($3 | 0) == 68) __ZNSt3__212_GLOBAL__N_130throw_from_string_out_of_rangeERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE($func);
 $4 = HEAP32[$ptr >> 2] | 0;
 if (($4 | 0) == ($cond$i$i$i | 0)) __ZNSt3__212_GLOBAL__N_129throw_from_string_invalid_argERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE($func);
 if ($idx | 0) HEAP32[$idx >> 2] = $4 - $cond$i$i$i;
 STACKTOP = sp;
 return $call3 | 0;
}

function _stbi_load_from_file($f, $x, $y, $comp, $req_comp) {
 $f = $f | 0;
 $x = $x | 0;
 $y = $y | 0;
 $comp = $comp | 0;
 $req_comp = $req_comp | 0;
 var $9 = 0, $comp$addr = 0, $f$addr = 0, $req_comp$addr = 0, $result = 0, $s = 0, $x$addr = 0, $y$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(208);
 $f$addr = sp + 204 | 0;
 $x$addr = sp + 200 | 0;
 $y$addr = sp + 196 | 0;
 $comp$addr = sp + 192 | 0;
 $req_comp$addr = sp + 188 | 0;
 $result = sp + 184 | 0;
 $s = sp;
 HEAP32[$f$addr >> 2] = $f;
 HEAP32[$x$addr >> 2] = $x;
 HEAP32[$y$addr >> 2] = $y;
 HEAP32[$comp$addr >> 2] = $comp;
 HEAP32[$req_comp$addr >> 2] = $req_comp;
 _stbi__start_file($s, HEAP32[$f$addr >> 2] | 0);
 HEAP32[$result >> 2] = _stbi__load_and_postprocess_8bit($s, HEAP32[$x$addr >> 2] | 0, HEAP32[$y$addr >> 2] | 0, HEAP32[$comp$addr >> 2] | 0, HEAP32[$req_comp$addr >> 2] | 0) | 0;
 if (!(HEAP32[$result >> 2] | 0)) {
  $9 = HEAP32[$result >> 2] | 0;
  STACKTOP = sp;
  return $9 | 0;
 }
 _fseek(HEAP32[$f$addr >> 2] | 0, 0 - ((HEAP32[$s + 172 >> 2] | 0) - (HEAP32[$s + 168 >> 2] | 0)) | 0, 1) | 0;
 $9 = HEAP32[$result >> 2] | 0;
 STACKTOP = sp;
 return $9 | 0;
}

function __ZNSt3__23mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8nlohmann10basic_jsonIS0_NS_6vectorES6_bxydS4_NS7_14adl_serializerEEENS_4lessIvEENS4_INS_4pairIKS6_SB_EEEEEixERSF_($this, $__k) {
 $this = $this | 0;
 $__k = $__k | 0;
 var $ref$tmp = 0, $ref$tmp2 = 0, $second = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $ref$tmp = sp + 8 | 0;
 $ref$tmp2 = sp;
 HEAP32[$ref$tmp2 >> 2] = $__k;
 __ZNSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8nlohmann10basic_jsonINS_3mapENS_6vectorES7_bxydS5_NS8_14adl_serializerEEEEENS_19__map_value_compareIS7_SE_NS_4lessIvEELb1EEENS5_ISE_EEE25__emplace_unique_key_argsIS7_JRKNS_21piecewise_construct_tENS_5tupleIJRKS7_EEENSP_IJEEEEEENS_4pairINS_15__tree_iteratorISE_PNS_11__tree_nodeISE_PvEElEEbEERKT_DpOT0_($ref$tmp, $this, $__k, 62140, $ref$tmp2, sp + 16 | 0);
 $second = (__ZNSt3__29__launderINS_4pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8nlohmann10basic_jsonINS_3mapENS_6vectorES7_bxydS5_NS9_14adl_serializerEEEEEEEPT_SH_((HEAP32[$ref$tmp >> 2] | 0) + 16 | 0) | 0) + 16 | 0;
 STACKTOP = sp;
 return $second | 0;
}

function __ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE9pbackfailEi($this, $__c) {
 $this = $this | 0;
 $__c = $__c | 0;
 var $__ninp_$i = 0, $call12 = 0, $call8 = 0, $retval$0 = 0, label = 0;
 label = 0;
 do if (!(HEAP32[$this + 64 >> 2] | 0)) label = 8; else {
  $__ninp_$i = $this + 12 | 0;
  if ((HEAP32[$this + 8 >> 2] | 0) >>> 0 < (HEAP32[$__ninp_$i >> 2] | 0) >>> 0) {
   if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($__c, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
    HEAP32[$__ninp_$i >> 2] = (HEAP32[$__ninp_$i >> 2] | 0) + -1;
    $retval$0 = __ZNSt3__211char_traitsIcE7not_eofEi($__c) | 0;
    break;
   }
   if (!(HEAP32[$this + 88 >> 2] & 16)) {
    $call8 = __ZNSt3__211char_traitsIcE12to_char_typeEi($__c) | 0;
    if (!(__ZNSt3__211char_traitsIcE2eqEcc($call8, HEAP8[(HEAP32[$__ninp_$i >> 2] | 0) + -1 >> 0] | 0) | 0)) {
     label = 8;
     break;
    }
   }
   HEAP32[$__ninp_$i >> 2] = (HEAP32[$__ninp_$i >> 2] | 0) + -1;
   $call12 = __ZNSt3__211char_traitsIcE12to_char_typeEi($__c) | 0;
   HEAP8[HEAP32[$__ninp_$i >> 2] >> 0] = $call12;
   $retval$0 = $__c;
  } else label = 8;
 } while (0);
 if ((label | 0) == 8) $retval$0 = __ZNSt3__211char_traitsIcE3eofEv() | 0;
 return $retval$0 | 0;
}

function __webgl1_match_ext_proc_address_without_suffix($name) {
 $name = $name | 0;
 var $retval$0 = 0, $tobool70 = 0;
 if (!(_strcmp($name, 39128) | 0)) $retval$0 = 47; else if (!(_strcmp($name, 39141) | 0)) $retval$0 = 48; else if (!(_strcmp($name, 39157) | 0)) $retval$0 = 74; else if (!(_strcmp($name, 39167) | 0)) $retval$0 = 49; else if (!(_strcmp($name, 39180) | 0)) $retval$0 = 129; else if (!(_strcmp($name, 39191) | 0)) $retval$0 = 50; else if (!(_strcmp($name, 39206) | 0)) $retval$0 = 7; else if (!(_strcmp($name, 39219) | 0)) $retval$0 = 8; else if (!(_strcmp($name, 39238) | 0)) $retval$0 = 9; else if (!(_strcmp($name, 39258) | 0)) $retval$0 = 10; else if (!(_strcmp($name, 39279) | 0)) $retval$0 = 11; else if (!(_strcmp($name, 39301) | 0)) $retval$0 = 130; else if (!(_strcmp($name, 39319) | 0)) $retval$0 = 51; else if (!(_strcmp($name, 39340) | 0)) $retval$0 = 52; else if (!(_strcmp($name, 39358) | 0)) $retval$0 = 75; else if (!(_strcmp($name, 39374) | 0)) $retval$0 = 53; else if (!(_strcmp($name, 39388) | 0)) $retval$0 = 10; else if (!(_strcmp($name, 39410) | 0)) $retval$0 = 5; else {
  $tobool70 = (_strcmp($name, 39434) | 0) == 0;
  return ($tobool70 ? 46 : 0) | 0;
 }
 return $retval$0 | 0;
}

function _stbir__get_contributors($scale, $filter, $input_size, $output_size) {
 $scale = Math_fround($scale);
 $filter = $filter | 0;
 $input_size = $input_size | 0;
 $output_size = $output_size | 0;
 var $2 = 0, $5 = 0, $filter$addr = 0, $input_size$addr = 0, $output_size$addr = 0, $retval = 0, $scale$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $retval = sp + 16 | 0;
 $scale$addr = sp + 12 | 0;
 $filter$addr = sp + 8 | 0;
 $input_size$addr = sp + 4 | 0;
 $output_size$addr = sp;
 HEAPF32[$scale$addr >> 2] = $scale;
 HEAP32[$filter$addr >> 2] = $filter;
 HEAP32[$input_size$addr >> 2] = $input_size;
 HEAP32[$output_size$addr >> 2] = $output_size;
 if (_stbir__use_upsampling(Math_fround(HEAPF32[$scale$addr >> 2])) | 0) {
  HEAP32[$retval >> 2] = HEAP32[$output_size$addr >> 2];
  $5 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $5 | 0;
 } else {
  $2 = HEAP32[$input_size$addr >> 2] | 0;
  HEAP32[$retval >> 2] = $2 + ((_stbir__get_filter_pixel_margin(HEAP32[$filter$addr >> 2] | 0, Math_fround(HEAPF32[$scale$addr >> 2])) | 0) << 1);
  $5 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $5 | 0;
 }
 return 0;
}

function __ZNSt3__225__num_get_signed_integralIxEET_PKcS3_Rji($__a, $__a_end, $__err, $__base) {
 $__a = $__a | 0;
 $__a_end = $__a_end | 0;
 $__err = $__err | 0;
 $__base = $__base | 0;
 var $0 = 0, $1 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $9 = 0, $__p2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $__p2 = sp;
 if (($__a | 0) == ($__a_end | 0)) {
  HEAP32[$__err >> 2] = 4;
  $12 = 0;
  $13 = 0;
 } else {
  $0 = HEAP32[(___errno_location() | 0) >> 2] | 0;
  HEAP32[(___errno_location() | 0) >> 2] = 0;
  $1 = _strtoll_l($__a, $__p2, $__base, __ZNSt3__26__clocEv() | 0) | 0;
  $2 = getTempRet0() | 0;
  $3 = HEAP32[(___errno_location() | 0) >> 2] | 0;
  if (!$3) HEAP32[(___errno_location() | 0) >> 2] = $0;
  if ((HEAP32[$__p2 >> 2] | 0) == ($__a_end | 0)) if (($3 | 0) == 68) {
   HEAP32[$__err >> 2] = 4;
   $9 = ($2 | 0) > 0 | ($2 | 0) == 0 & $1 >>> 0 > 0;
   $14 = $9 ? -1 : 0;
   $15 = $9 ? 2147483647 : -2147483648;
  } else {
   $14 = $1;
   $15 = $2;
  } else {
   HEAP32[$__err >> 2] = 4;
   $14 = 0;
   $15 = 0;
  }
  $12 = $15;
  $13 = $14;
 }
 setTempRet0($12 | 0);
 STACKTOP = sp;
 return $13 | 0;
}

function _GifWriteBit($stat, $bit) {
 $stat = $stat | 0;
 $bit = $bit | 0;
 var $12 = 0, $15 = 0, $7 = 0, $bit$addr = 0, $byte = 0, $chunk = 0, $chunkIndex = 0, $stat$addr = 0, sp = 0, CSE$0 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $stat$addr = sp + 4 | 0;
 $bit$addr = sp;
 HEAP32[$stat$addr >> 2] = $stat;
 HEAP32[$bit$addr >> 2] = $bit;
 HEAP32[$bit$addr >> 2] = HEAP32[$bit$addr >> 2] & 1;
 HEAP32[$bit$addr >> 2] = HEAP32[$bit$addr >> 2] << HEAPU8[HEAP32[$stat$addr >> 2] >> 0];
 $byte = (HEAP32[$stat$addr >> 2] | 0) + 1 | 0;
 HEAP8[$byte >> 0] = HEAPU8[$byte >> 0] | HEAP32[$bit$addr >> 2];
 $7 = HEAP32[$stat$addr >> 2] | 0;
 HEAP8[$7 >> 0] = (HEAP8[$7 >> 0] | 0) + 1 << 24 >> 24;
 if ((HEAPU8[HEAP32[$stat$addr >> 2] >> 0] | 0) <= 7) {
  STACKTOP = sp;
  return;
 }
 CSE$0 = HEAP32[$stat$addr >> 2] | 0;
 $12 = HEAP8[CSE$0 + 1 >> 0] | 0;
 $chunk = CSE$0 + 8 | 0;
 $chunkIndex = CSE$0 + 4 | 0;
 $15 = HEAP32[$chunkIndex >> 2] | 0;
 HEAP32[$chunkIndex >> 2] = $15 + 1;
 HEAP8[$chunk + $15 >> 0] = $12;
 HEAP8[HEAP32[$stat$addr >> 2] >> 0] = 0;
 HEAP8[(HEAP32[$stat$addr >> 2] | 0) + 1 >> 0] = 0;
 STACKTOP = sp;
 return;
}

function _stbi__mad3sizes_valid($a, $b, $c, $add) {
 $a = $a | 0;
 $b = $b | 0;
 $c = $c | 0;
 $add = $add | 0;
 var $9 = 0, $a$addr = 0, $add$addr = 0, $b$addr = 0, $c$addr = 0, $land$ext = 0, $mul = 0, $mul3 = 0, $mul4 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $a$addr = sp + 12 | 0;
 $b$addr = sp + 8 | 0;
 $c$addr = sp + 4 | 0;
 $add$addr = sp;
 HEAP32[$a$addr >> 2] = $a;
 HEAP32[$b$addr >> 2] = $b;
 HEAP32[$c$addr >> 2] = $c;
 HEAP32[$add$addr >> 2] = $add;
 if (!(_stbi__mul2sizes_valid(HEAP32[$a$addr >> 2] | 0, HEAP32[$b$addr >> 2] | 0) | 0)) {
  $9 = 0;
  $land$ext = $9 & 1;
  STACKTOP = sp;
  return $land$ext | 0;
 }
 $mul = Math_imul(HEAP32[$a$addr >> 2] | 0, HEAP32[$b$addr >> 2] | 0) | 0;
 if (!(_stbi__mul2sizes_valid($mul, HEAP32[$c$addr >> 2] | 0) | 0)) {
  $9 = 0;
  $land$ext = $9 & 1;
  STACKTOP = sp;
  return $land$ext | 0;
 }
 $mul3 = Math_imul(HEAP32[$a$addr >> 2] | 0, HEAP32[$b$addr >> 2] | 0) | 0;
 $mul4 = Math_imul($mul3, HEAP32[$c$addr >> 2] | 0) | 0;
 $9 = (_stbi__addsizes_valid($mul4, HEAP32[$add$addr >> 2] | 0) | 0) != 0;
 $land$ext = $9 & 1;
 STACKTOP = sp;
 return $land$ext | 0;
}

function __ZNSt3__219__double_or_nothingIwEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_($__b, $__n, $__e) {
 $__b = $__b | 0;
 $__n = $__n | 0;
 $__e = $__e | 0;
 var $$pr = 0, $2 = 0, $3 = 0, $8 = 0, $__value_$i$i$i = 0, $call17 = 0, $cmp = 0, $mul4 = 0, $sub$ptr$div11 = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$sub = 0;
 $__value_$i$i$i = $__b + 4 | 0;
 $cmp = (HEAP32[$__value_$i$i$i >> 2] | 0) != 153;
 $2 = HEAP32[$__b >> 2] | 0;
 $sub$ptr$rhs$cast = $2;
 $sub$ptr$sub = (HEAP32[$__e >> 2] | 0) - $sub$ptr$rhs$cast | 0;
 $mul4 = $sub$ptr$sub << 1;
 $3 = $sub$ptr$sub >>> 0 < 2147483647 ? (($mul4 | 0) == 0 ? 4 : $mul4) : -1;
 $sub$ptr$div11 = (HEAP32[$__n >> 2] | 0) - $sub$ptr$rhs$cast >> 2;
 $call17 = _realloc($cmp ? $2 : 0, $3) | 0;
 if (!$call17) __ZSt17__throw_bad_allocv();
 if ($cmp) {
  HEAP32[$__b >> 2] = $call17;
  $8 = $call17;
 } else {
  $$pr = HEAP32[$__b >> 2] | 0;
  HEAP32[$__b >> 2] = $call17;
  if (!$$pr) $8 = $call17; else {
   FUNCTION_TABLE_vi[HEAP32[$__value_$i$i$i >> 2] & 255]($$pr);
   $8 = HEAP32[$__b >> 2] | 0;
  }
 }
 HEAP32[$__value_$i$i$i >> 2] = 154;
 HEAP32[$__n >> 2] = $8 + ($sub$ptr$div11 << 2);
 HEAP32[$__e >> 2] = (HEAP32[$__b >> 2] | 0) + ($3 >>> 2 << 2);
 return;
}

function __ZNSt3__219__double_or_nothingIjEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_($__b, $__n, $__e) {
 $__b = $__b | 0;
 $__n = $__n | 0;
 $__e = $__e | 0;
 var $$pr = 0, $2 = 0, $3 = 0, $8 = 0, $__value_$i$i$i = 0, $call17 = 0, $cmp = 0, $mul4 = 0, $sub$ptr$div11 = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$sub = 0;
 $__value_$i$i$i = $__b + 4 | 0;
 $cmp = (HEAP32[$__value_$i$i$i >> 2] | 0) != 153;
 $2 = HEAP32[$__b >> 2] | 0;
 $sub$ptr$rhs$cast = $2;
 $sub$ptr$sub = (HEAP32[$__e >> 2] | 0) - $sub$ptr$rhs$cast | 0;
 $mul4 = $sub$ptr$sub << 1;
 $3 = $sub$ptr$sub >>> 0 < 2147483647 ? (($mul4 | 0) == 0 ? 4 : $mul4) : -1;
 $sub$ptr$div11 = (HEAP32[$__n >> 2] | 0) - $sub$ptr$rhs$cast >> 2;
 $call17 = _realloc($cmp ? $2 : 0, $3) | 0;
 if (!$call17) __ZSt17__throw_bad_allocv();
 if ($cmp) {
  HEAP32[$__b >> 2] = $call17;
  $8 = $call17;
 } else {
  $$pr = HEAP32[$__b >> 2] | 0;
  HEAP32[$__b >> 2] = $call17;
  if (!$$pr) $8 = $call17; else {
   FUNCTION_TABLE_vi[HEAP32[$__value_$i$i$i >> 2] & 255]($$pr);
   $8 = HEAP32[$__b >> 2] | 0;
  }
 }
 HEAP32[$__value_$i$i$i >> 2] = 154;
 HEAP32[$__n >> 2] = $8 + ($sub$ptr$div11 << 2);
 HEAP32[$__e >> 2] = (HEAP32[$__b >> 2] | 0) + ($3 >>> 2 << 2);
 return;
}

function __ZN8nlohmann6detail9iter_implIKNS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEEC2EPSE_($this, $object) {
 $this = $this | 0;
 $object = $object | 0;
 var $0 = 0, $array_iterator = 0, $m_it = 0, $primitive_iterator = 0, $ref$tmp10 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $ref$tmp10 = sp;
 HEAP32[$this >> 2] = $object;
 $m_it = $this + 4 | 0;
 HEAP32[$m_it >> 2] = 0;
 $array_iterator = $this + 8 | 0;
 HEAP32[$array_iterator >> 2] = 0;
 $primitive_iterator = $this + 12 | 0;
 HEAP32[$primitive_iterator >> 2] = 0;
 __ZN8nlohmann6detail20primitive_iterator_tC2Ev($primitive_iterator);
 $0 = HEAP32[$this >> 2] | 0;
 if (!$0) ___assert_fail(23450, 22221, 9241, 23740);
 switch (HEAP8[$0 >> 0] | 0) {
 case 1:
  {
   HEAP32[$m_it >> 2] = 0;
   break;
  }
 case 2:
  {
   HEAP32[$array_iterator >> 2] = 0;
   break;
  }
 default:
  {
   HEAP32[$ref$tmp10 >> 2] = 0;
   __ZN8nlohmann6detail20primitive_iterator_tC2Ev($ref$tmp10);
   HEAP32[$primitive_iterator >> 2] = HEAP32[$ref$tmp10 >> 2];
  }
 }
 STACKTOP = sp;
 return;
}

function __ZN8nlohmann6detail9iter_implINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEEC2EPSD_($this, $object) {
 $this = $this | 0;
 $object = $object | 0;
 var $0 = 0, $array_iterator = 0, $m_it = 0, $primitive_iterator = 0, $ref$tmp10 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $ref$tmp10 = sp;
 HEAP32[$this >> 2] = $object;
 $m_it = $this + 4 | 0;
 HEAP32[$m_it >> 2] = 0;
 $array_iterator = $this + 8 | 0;
 HEAP32[$array_iterator >> 2] = 0;
 $primitive_iterator = $this + 12 | 0;
 HEAP32[$primitive_iterator >> 2] = 0;
 __ZN8nlohmann6detail20primitive_iterator_tC2Ev($primitive_iterator);
 $0 = HEAP32[$this >> 2] | 0;
 if (!$0) ___assert_fail(23450, 22221, 9241, 23740);
 switch (HEAP8[$0 >> 0] | 0) {
 case 1:
  {
   HEAP32[$m_it >> 2] = 0;
   break;
  }
 case 2:
  {
   HEAP32[$array_iterator >> 2] = 0;
   break;
  }
 default:
  {
   HEAP32[$ref$tmp10 >> 2] = 0;
   __ZN8nlohmann6detail20primitive_iterator_tC2Ev($ref$tmp10);
   HEAP32[$primitive_iterator >> 2] = HEAP32[$ref$tmp10 >> 2];
  }
 }
 STACKTOP = sp;
 return;
}

function _wcrtomb($s, $wc, $st) {
 $s = $s | 0;
 $wc = $wc | 0;
 $st = $st | 0;
 var $retval$0 = 0;
 do if (!$s) $retval$0 = 1; else {
  if ($wc >>> 0 < 128) {
   HEAP8[$s >> 0] = $wc;
   $retval$0 = 1;
   break;
  }
  if (!(HEAP32[HEAP32[(___pthread_self_423() | 0) + 188 >> 2] >> 2] | 0)) if (($wc & -128 | 0) == 57216) {
   HEAP8[$s >> 0] = $wc;
   $retval$0 = 1;
   break;
  } else {
   HEAP32[(___errno_location() | 0) >> 2] = 25;
   $retval$0 = -1;
   break;
  }
  if ($wc >>> 0 < 2048) {
   HEAP8[$s >> 0] = $wc >>> 6 | 192;
   HEAP8[$s + 1 >> 0] = $wc & 63 | 128;
   $retval$0 = 2;
   break;
  }
  if ($wc >>> 0 < 55296 | ($wc & -8192 | 0) == 57344) {
   HEAP8[$s >> 0] = $wc >>> 12 | 224;
   HEAP8[$s + 1 >> 0] = $wc >>> 6 & 63 | 128;
   HEAP8[$s + 2 >> 0] = $wc & 63 | 128;
   $retval$0 = 3;
   break;
  }
  if (($wc + -65536 | 0) >>> 0 < 1048576) {
   HEAP8[$s >> 0] = $wc >>> 18 | 240;
   HEAP8[$s + 1 >> 0] = $wc >>> 12 & 63 | 128;
   HEAP8[$s + 2 >> 0] = $wc >>> 6 & 63 | 128;
   HEAP8[$s + 3 >> 0] = $wc & 63 | 128;
   $retval$0 = 4;
   break;
  } else {
   HEAP32[(___errno_location() | 0) >> 2] = 25;
   $retval$0 = -1;
   break;
  }
 } while (0);
 return $retval$0 | 0;
}

function _rlClearColor($r, $g, $b, $a) {
 $r = $r | 0;
 $g = $g | 0;
 $b = $b | 0;
 $a = $a | 0;
 var $4 = f0, $5 = f0, $6 = f0, $a$addr = 0, $b$addr = 0, $ca = 0, $cb = 0, $cg = 0, $cr = 0, $g$addr = 0, $r$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $r$addr = sp + 19 | 0;
 $g$addr = sp + 18 | 0;
 $b$addr = sp + 17 | 0;
 $a$addr = sp + 16 | 0;
 $cr = sp + 12 | 0;
 $cg = sp + 8 | 0;
 $cb = sp + 4 | 0;
 $ca = sp;
 HEAP8[$r$addr >> 0] = $r;
 HEAP8[$g$addr >> 0] = $g;
 HEAP8[$b$addr >> 0] = $b;
 HEAP8[$a$addr >> 0] = $a;
 HEAPF32[$cr >> 2] = Math_fround(Math_fround(HEAPU8[$r$addr >> 0] | 0) / Math_fround(255.0));
 HEAPF32[$cg >> 2] = Math_fround(Math_fround(HEAPU8[$g$addr >> 0] | 0) / Math_fround(255.0));
 HEAPF32[$cb >> 2] = Math_fround(Math_fround(HEAPU8[$b$addr >> 0] | 0) / Math_fround(255.0));
 HEAPF32[$ca >> 2] = Math_fround(Math_fround(HEAPU8[$a$addr >> 0] | 0) / Math_fround(255.0));
 $4 = Math_fround(HEAPF32[$cr >> 2]);
 $5 = Math_fround(HEAPF32[$cg >> 2]);
 $6 = Math_fround(HEAPF32[$cb >> 2]);
 _glClearColor(+$4, +$5, +$6, +Math_fround(HEAPF32[$ca >> 2]));
 STACKTOP = sp;
 return;
}

function _stbir__linear_to_srgb_uchar($in) {
 $in = Math_fround($in);
 var $0 = f0, $3 = f0, $bias = 0, $conv = 0, $f = 0, $in$addr = 0, $scale = 0, $t = 0, $tab = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $in$addr = sp + 20 | 0;
 $tab = sp + 16 | 0;
 $bias = sp + 12 | 0;
 $scale = sp + 8 | 0;
 $t = sp + 4 | 0;
 $f = sp;
 HEAPF32[$in$addr >> 2] = $in;
 $0 = Math_fround(HEAPF32[$in$addr >> 2]);
 if (!($0 > Math_fround(HEAPF32[4486]))) HEAPF32[$in$addr >> 2] = Math_fround(HEAPF32[4486]);
 $3 = Math_fround(HEAPF32[$in$addr >> 2]);
 if ($3 > Math_fround(HEAPF32[4487])) HEAPF32[$in$addr >> 2] = Math_fround(HEAPF32[4487]);
 HEAPF32[$f >> 2] = Math_fround(HEAPF32[$in$addr >> 2]);
 HEAP32[$tab >> 2] = HEAP32[7376 + (((HEAP32[$f >> 2] | 0) - (HEAP32[4486] | 0) | 0) >>> 20 << 2) >> 2];
 HEAP32[$bias >> 2] = (HEAP32[$tab >> 2] | 0) >>> 16 << 9;
 HEAP32[$scale >> 2] = HEAP32[$tab >> 2] & 65535;
 HEAP32[$t >> 2] = (HEAP32[$f >> 2] | 0) >>> 12 & 255;
 $conv = ((HEAP32[$bias >> 2] | 0) + (Math_imul(HEAP32[$scale >> 2] | 0, HEAP32[$t >> 2] | 0) | 0) | 0) >>> 16 & 255;
 STACKTOP = sp;
 return $conv | 0;
}

function __ZNSt3__219__double_or_nothingIcEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_($__b, $__n, $__e) {
 $__b = $__b | 0;
 $__n = $__n | 0;
 $__e = $__e | 0;
 var $$pr = 0, $2 = 0, $3 = 0, $8 = 0, $__value_$i$i$i = 0, $call16 = 0, $cmp = 0, $mul4 = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$sub = 0, $sub$ptr$sub10 = 0;
 $__value_$i$i$i = $__b + 4 | 0;
 $cmp = (HEAP32[$__value_$i$i$i >> 2] | 0) != 153;
 $2 = HEAP32[$__b >> 2] | 0;
 $sub$ptr$rhs$cast = $2;
 $sub$ptr$sub = (HEAP32[$__e >> 2] | 0) - $sub$ptr$rhs$cast | 0;
 $mul4 = $sub$ptr$sub << 1;
 $3 = $sub$ptr$sub >>> 0 < 2147483647 ? (($mul4 | 0) == 0 ? 1 : $mul4) : -1;
 $sub$ptr$sub10 = (HEAP32[$__n >> 2] | 0) - $sub$ptr$rhs$cast | 0;
 $call16 = _realloc($cmp ? $2 : 0, $3) | 0;
 if (!$call16) __ZSt17__throw_bad_allocv();
 if ($cmp) {
  HEAP32[$__b >> 2] = $call16;
  $8 = $call16;
 } else {
  $$pr = HEAP32[$__b >> 2] | 0;
  HEAP32[$__b >> 2] = $call16;
  if (!$$pr) $8 = $call16; else {
   FUNCTION_TABLE_vi[HEAP32[$__value_$i$i$i >> 2] & 255]($$pr);
   $8 = HEAP32[$__b >> 2] | 0;
  }
 }
 HEAP32[$__value_$i$i$i >> 2] = 154;
 HEAP32[$__n >> 2] = $8 + $sub$ptr$sub10;
 HEAP32[$__e >> 2] = (HEAP32[$__b >> 2] | 0) + $3;
 return;
}

function __ZNSt3__29__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_($agg$result, $__iob, $__atoms, $__decimal_point, $__thousands_sep) {
 $agg$result = $agg$result | 0;
 $__iob = $__iob | 0;
 $__atoms = $__atoms | 0;
 $__decimal_point = $__decimal_point | 0;
 $__thousands_sep = $__thousands_sep | 0;
 var $__loc = 0, $call$i = 0, $call$i5 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $__loc = sp;
 __ZNKSt3__28ios_base6getlocEv($__loc, $__iob);
 $call$i = __ZNKSt3__26locale9use_facetERNS0_2idE($__loc, 61248) | 0;
 FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[$call$i >> 2] | 0) + 48 >> 2] & 15]($call$i, 14672, 14704, $__atoms) | 0;
 $call$i5 = __ZNKSt3__26locale9use_facetERNS0_2idE($__loc, 61256) | 0;
 HEAP32[$__decimal_point >> 2] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$call$i5 >> 2] | 0) + 12 >> 2] & 127]($call$i5) | 0;
 HEAP32[$__thousands_sep >> 2] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$call$i5 >> 2] | 0) + 16 >> 2] & 127]($call$i5) | 0;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[$call$i5 >> 2] | 0) + 20 >> 2] & 127]($agg$result, $call$i5);
 __ZNSt3__26localeD2Ev($__loc);
 STACKTOP = sp;
 return;
}

function _stbi__parse_zlib_header($a) {
 $a = $a | 0;
 var $7 = 0, $a$addr = 0, $cm = 0, $cmf = 0, $flg = 0, $retval = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $retval = sp + 16 | 0;
 $a$addr = sp + 12 | 0;
 $cmf = sp + 8 | 0;
 $cm = sp + 4 | 0;
 $flg = sp;
 HEAP32[$a$addr >> 2] = $a;
 HEAP32[$cmf >> 2] = (_stbi__zget8(HEAP32[$a$addr >> 2] | 0) | 0) & 255;
 HEAP32[$cm >> 2] = HEAP32[$cmf >> 2] & 15;
 HEAP32[$flg >> 2] = (_stbi__zget8(HEAP32[$a$addr >> 2] | 0) | 0) & 255;
 if (((HEAP32[$cmf >> 2] << 8) + (HEAP32[$flg >> 2] | 0) | 0) % 31 | 0 | 0) {
  HEAP32[$retval >> 2] = _stbi__err(33981) | 0;
  $7 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $7 | 0;
 }
 if (HEAP32[$flg >> 2] & 32 | 0) {
  HEAP32[$retval >> 2] = _stbi__err(33997) | 0;
  $7 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $7 | 0;
 }
 if ((HEAP32[$cm >> 2] | 0) != 8) {
  HEAP32[$retval >> 2] = _stbi__err(34012) | 0;
  $7 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $7 | 0;
 } else {
  HEAP32[$retval >> 2] = 1;
  $7 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $7 | 0;
 }
 return 0;
}

function __ZNSt3__29__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_($agg$result, $__iob, $__atoms, $__decimal_point, $__thousands_sep) {
 $agg$result = $agg$result | 0;
 $__iob = $__iob | 0;
 $__atoms = $__atoms | 0;
 $__decimal_point = $__decimal_point | 0;
 $__thousands_sep = $__thousands_sep | 0;
 var $__loc = 0, $call$i = 0, $call$i5 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $__loc = sp;
 __ZNKSt3__28ios_base6getlocEv($__loc, $__iob);
 $call$i = __ZNKSt3__26locale9use_facetERNS0_2idE($__loc, 61216) | 0;
 FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[$call$i >> 2] | 0) + 32 >> 2] & 15]($call$i, 14672, 14704, $__atoms) | 0;
 $call$i5 = __ZNKSt3__26locale9use_facetERNS0_2idE($__loc, 61232) | 0;
 HEAP8[$__decimal_point >> 0] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$call$i5 >> 2] | 0) + 12 >> 2] & 127]($call$i5) | 0;
 HEAP8[$__thousands_sep >> 0] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$call$i5 >> 2] | 0) + 16 >> 2] & 127]($call$i5) | 0;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[$call$i5 >> 2] | 0) + 20 >> 2] & 127]($agg$result, $call$i5);
 __ZNSt3__26localeD2Ev($__loc);
 STACKTOP = sp;
 return;
}

function __ZN8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE10json_value7destroyENS_6detail7value_tE($this, $t) {
 $this = $this | 0;
 $t = $t | 0;
 switch ($t << 24 >> 24) {
 case 1:
  {
   __ZNSt3__23mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8nlohmann10basic_jsonIS0_NS_6vectorES6_bxydS4_NS7_14adl_serializerEEENS_4lessIvEENS4_INS_4pairIKS6_SB_EEEEED2Ev(HEAP32[$this >> 2] | 0);
   __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm(HEAP32[$this >> 2] | 0, 12);
   break;
  }
 case 2:
  {
   __ZNSt3__213__vector_baseIN8nlohmann10basic_jsonINS_3mapENS_6vectorENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEbxydS8_NS1_14adl_serializerEEENS8_ISC_EEED2Ev(HEAP32[$this >> 2] | 0);
   __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm(HEAP32[$this >> 2] | 0, 12);
   break;
  }
 case 3:
  {
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(HEAP32[$this >> 2] | 0);
   __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm(HEAP32[$this >> 2] | 0, 12);
   break;
  }
 default:
  {}
 }
 return;
}

function _stbi__hdr_test_core($s, $signature) {
 $s = $s | 0;
 $signature = $signature | 0;
 var $3 = 0, $8 = 0, $conv = 0, $i = 0, $retval = 0, $s$addr = 0, $signature$addr = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $retval = sp + 12 | 0;
 $s$addr = sp + 8 | 0;
 $signature$addr = sp + 4 | 0;
 $i = sp;
 HEAP32[$s$addr >> 2] = $s;
 HEAP32[$signature$addr >> 2] = $signature;
 HEAP32[$i >> 2] = 0;
 while (1) {
  $3 = HEAP32[$s$addr >> 2] | 0;
  if (!(HEAP8[(HEAP32[$signature$addr >> 2] | 0) + (HEAP32[$i >> 2] | 0) >> 0] | 0)) {
   label = 6;
   break;
  }
  $conv = (_stbi__get8($3) | 0) & 255;
  if (($conv | 0) != (HEAP8[(HEAP32[$signature$addr >> 2] | 0) + (HEAP32[$i >> 2] | 0) >> 0] | 0)) {
   label = 4;
   break;
  }
  HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
 }
 if ((label | 0) == 4) {
  HEAP32[$retval >> 2] = 0;
  $8 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $8 | 0;
 } else if ((label | 0) == 6) {
  _stbi__rewind($3);
  HEAP32[$retval >> 2] = 1;
  $8 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $8 | 0;
 }
 return 0;
}

function _stbi__float_postprocess($result, $x, $y, $comp, $req_comp) {
 $result = $result | 0;
 $x = $x | 0;
 $y = $y | 0;
 $comp = $comp | 0;
 $req_comp = $req_comp | 0;
 var $channels = 0, $comp$addr = 0, $cond = 0, $req_comp$addr = 0, $result$addr = 0, $x$addr = 0, $y$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $result$addr = sp + 20 | 0;
 $x$addr = sp + 16 | 0;
 $y$addr = sp + 12 | 0;
 $comp$addr = sp + 8 | 0;
 $req_comp$addr = sp + 4 | 0;
 $channels = sp;
 HEAP32[$result$addr >> 2] = $result;
 HEAP32[$x$addr >> 2] = $x;
 HEAP32[$y$addr >> 2] = $y;
 HEAP32[$comp$addr >> 2] = $comp;
 HEAP32[$req_comp$addr >> 2] = $req_comp;
 if (!(0 != 0 & (HEAP32[$result$addr >> 2] | 0) != 0)) {
  STACKTOP = sp;
  return;
 }
 if (HEAP32[$req_comp$addr >> 2] | 0) $cond = HEAP32[$req_comp$addr >> 2] | 0; else $cond = HEAP32[HEAP32[$comp$addr >> 2] >> 2] | 0;
 HEAP32[$channels >> 2] = $cond;
 _stbi__vertical_flip(HEAP32[$result$addr >> 2] | 0, HEAP32[HEAP32[$x$addr >> 2] >> 2] | 0, HEAP32[HEAP32[$y$addr >> 2] >> 2] | 0, HEAP32[$channels >> 2] << 2);
 STACKTOP = sp;
 return;
}

function ___fseeko_unlocked($f, $0, $1, $whence) {
 $f = $f | 0;
 $0 = $0 | 0;
 $1 = $1 | 0;
 $whence = $whence | 0;
 var $13 = 0, $14 = 0, $6 = 0, $retval$0 = 0, $sub$ptr$sub = 0, $wbase = 0, $wpos = 0, label = 0;
 label = 0;
 if (($whence | 0) == 1) {
  $sub$ptr$sub = (HEAP32[$f + 8 >> 2] | 0) - (HEAP32[$f + 4 >> 2] | 0) | 0;
  $6 = _i64Subtract($0 | 0, $1 | 0, $sub$ptr$sub | 0, (($sub$ptr$sub | 0) < 0) << 31 >> 31 | 0) | 0;
  $13 = $6;
  $14 = getTempRet0() | 0;
 } else {
  $13 = $0;
  $14 = $1;
 }
 $wpos = $f + 20 | 0;
 $wbase = $f + 28 | 0;
 if ((HEAP32[$wpos >> 2] | 0) >>> 0 > (HEAP32[$wbase >> 2] | 0) >>> 0) {
  FUNCTION_TABLE_iiii[HEAP32[$f + 36 >> 2] & 63]($f, 0, 0) | 0;
  if (!(HEAP32[$wpos >> 2] | 0)) $retval$0 = -1; else label = 5;
 } else label = 5;
 if ((label | 0) == 5) {
  HEAP32[$f + 16 >> 2] = 0;
  HEAP32[$wbase >> 2] = 0;
  HEAP32[$wpos >> 2] = 0;
  FUNCTION_TABLE_iiiii[HEAP32[$f + 40 >> 2] & 15]($f, $13, $14, $whence) | 0;
  if ((getTempRet0() | 0) < 0) $retval$0 = -1; else {
   HEAP32[$f + 8 >> 2] = 0;
   HEAP32[$f + 4 >> 2] = 0;
   HEAP32[$f >> 2] = HEAP32[$f >> 2] & -17;
   $retval$0 = 0;
  }
 }
 return $retval$0 | 0;
}

function _stbi__do_zlib($a, $obuf, $olen, $exp, $parse_header) {
 $a = $a | 0;
 $obuf = $obuf | 0;
 $olen = $olen | 0;
 $exp = $exp | 0;
 $parse_header = $parse_header | 0;
 var $a$addr = 0, $call = 0, $exp$addr = 0, $obuf$addr = 0, $olen$addr = 0, $parse_header$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $a$addr = sp + 16 | 0;
 $obuf$addr = sp + 12 | 0;
 $olen$addr = sp + 8 | 0;
 $exp$addr = sp + 4 | 0;
 $parse_header$addr = sp;
 HEAP32[$a$addr >> 2] = $a;
 HEAP32[$obuf$addr >> 2] = $obuf;
 HEAP32[$olen$addr >> 2] = $olen;
 HEAP32[$exp$addr >> 2] = $exp;
 HEAP32[$parse_header$addr >> 2] = $parse_header;
 HEAP32[(HEAP32[$a$addr >> 2] | 0) + 20 >> 2] = HEAP32[$obuf$addr >> 2];
 HEAP32[(HEAP32[$a$addr >> 2] | 0) + 16 >> 2] = HEAP32[$obuf$addr >> 2];
 HEAP32[(HEAP32[$a$addr >> 2] | 0) + 24 >> 2] = (HEAP32[$obuf$addr >> 2] | 0) + (HEAP32[$olen$addr >> 2] | 0);
 HEAP32[(HEAP32[$a$addr >> 2] | 0) + 28 >> 2] = HEAP32[$exp$addr >> 2];
 $call = _stbi__parse_zlib(HEAP32[$a$addr >> 2] | 0, HEAP32[$parse_header$addr >> 2] | 0) | 0;
 STACKTOP = sp;
 return $call | 0;
}

function _fputc($c, $f) {
 $c = $c | 0;
 $f = $f | 0;
 var $2 = 0, $5 = 0, $cond30 = 0, $conv = 0, $conv1 = 0, $conv11 = 0, $conv12 = 0, $retval$0 = 0, $wpos = 0, $wpos18 = 0, label = 0;
 label = 0;
 if ((HEAP32[$f + 76 >> 2] | 0) < 0) label = 3; else if (!(___lockfile($f) | 0)) label = 3; else {
  $conv11 = $c & 255;
  $conv12 = $c & 255;
  if (($conv12 | 0) == (HEAP8[$f + 75 >> 0] | 0)) label = 10; else {
   $wpos18 = $f + 20 | 0;
   $5 = HEAP32[$wpos18 >> 2] | 0;
   if ($5 >>> 0 < (HEAP32[$f + 16 >> 2] | 0) >>> 0) {
    HEAP32[$wpos18 >> 2] = $5 + 1;
    HEAP8[$5 >> 0] = $conv11;
    $cond30 = $conv12;
   } else label = 10;
  }
  if ((label | 0) == 10) $cond30 = ___overflow($f, $c) | 0;
  ___unlockfile($f);
  $retval$0 = $cond30;
 }
 do if ((label | 0) == 3) {
  $conv = $c & 255;
  $conv1 = $c & 255;
  if (($conv1 | 0) != (HEAP8[$f + 75 >> 0] | 0)) {
   $wpos = $f + 20 | 0;
   $2 = HEAP32[$wpos >> 2] | 0;
   if ($2 >>> 0 < (HEAP32[$f + 16 >> 2] | 0) >>> 0) {
    HEAP32[$wpos >> 2] = $2 + 1;
    HEAP8[$2 >> 0] = $conv;
    $retval$0 = $conv1;
    break;
   }
  }
  $retval$0 = ___overflow($f, $c) | 0;
 } while (0);
 return $retval$0 | 0;
}

function _stbi__get8($s) {
 $s = $s | 0;
 var $10 = 0, $12 = 0, $4 = 0, $5 = 0, $img_buffer1 = 0, $img_buffer3 = 0, $retval = 0, $s$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $retval = sp + 4 | 0;
 $s$addr = sp;
 HEAP32[$s$addr >> 2] = $s;
 $4 = HEAP32[$s$addr >> 2] | 0;
 if ((HEAP32[(HEAP32[$s$addr >> 2] | 0) + 168 >> 2] | 0) >>> 0 < (HEAP32[(HEAP32[$s$addr >> 2] | 0) + 172 >> 2] | 0) >>> 0) {
  $img_buffer1 = $4 + 168 | 0;
  $5 = HEAP32[$img_buffer1 >> 2] | 0;
  HEAP32[$img_buffer1 >> 2] = $5 + 1;
  HEAP8[$retval >> 0] = HEAP8[$5 >> 0] | 0;
  $12 = HEAP8[$retval >> 0] | 0;
  STACKTOP = sp;
  return $12 | 0;
 }
 if (HEAP32[$4 + 32 >> 2] | 0) {
  _stbi__refill_buffer(HEAP32[$s$addr >> 2] | 0);
  $img_buffer3 = (HEAP32[$s$addr >> 2] | 0) + 168 | 0;
  $10 = HEAP32[$img_buffer3 >> 2] | 0;
  HEAP32[$img_buffer3 >> 2] = $10 + 1;
  HEAP8[$retval >> 0] = HEAP8[$10 >> 0] | 0;
  $12 = HEAP8[$retval >> 0] | 0;
  STACKTOP = sp;
  return $12 | 0;
 } else {
  HEAP8[$retval >> 0] = 0;
  $12 = HEAP8[$retval >> 0] | 0;
  STACKTOP = sp;
  return $12 | 0;
 }
 return 0;
}

function __ZNSt3__215__num_get_floatIfEET_PKcS3_Rj($__a, $__a_end, $__err) {
 $__a = $__a | 0;
 $__a_end = $__a_end | 0;
 $__err = $__err | 0;
 var $0 = 0, $1 = 0, $__p2 = 0, $call1$i = f0, $retval$0 = f0, $retval$0$ph = f0, $retval$1 = f0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $__p2 = sp;
 if (($__a | 0) == ($__a_end | 0)) {
  HEAP32[$__err >> 2] = 4;
  $retval$1 = Math_fround(0.0);
 } else {
  $0 = HEAP32[(___errno_location() | 0) >> 2] | 0;
  HEAP32[(___errno_location() | 0) >> 2] = 0;
  $call1$i = Math_fround(_strtof_l($__a, $__p2, __ZNSt3__26__clocEv() | 0));
  $1 = HEAP32[(___errno_location() | 0) >> 2] | 0;
  if (!$1) HEAP32[(___errno_location() | 0) >> 2] = $0;
  if ((HEAP32[$__p2 >> 2] | 0) == ($__a_end | 0)) if (($1 | 0) == 68) {
   $retval$0$ph = $call1$i;
   label = 6;
  } else $retval$0 = $call1$i; else {
   $retval$0$ph = Math_fround(0.0);
   label = 6;
  }
  if ((label | 0) == 6) {
   HEAP32[$__err >> 2] = 4;
   $retval$0 = $retval$0$ph;
  }
  $retval$1 = $retval$0;
 }
 STACKTOP = sp;
 return Math_fround($retval$1);
}

function __ZN8nlohmann6detail6parserINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEEC2EONS3_10shared_ptrINS0_22input_adapter_protocolEEENS3_8functionIFbiNSE_13parse_event_tERSD_EEEb($this, $adapter, $cb, $allow_exceptions_) {
 $this = $this | 0;
 $adapter = $adapter | 0;
 $cb = $cb | 0;
 $allow_exceptions_ = $allow_exceptions_ | 0;
 __ZNSt3__28functionIFbiN8nlohmann6detail6parserINS1_10basic_jsonINS_3mapENS_6vectorENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEbxydSA_NS1_14adl_serializerEEEE13parse_event_tERSE_EEC2ERKSJ_($this, $cb);
 HEAP32[$this + 16 >> 2] = 0;
 __ZN8nlohmann6detail5lexerINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEEC2EONS3_10shared_ptrINS0_22input_adapter_protocolEEE($this + 24 | 0, $adapter);
 HEAP8[$this + 112 >> 0] = $allow_exceptions_ & 1;
 __ZN8nlohmann6detail6parserINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE9get_tokenEv($this) | 0;
 return;
}

function __ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this, $info, $adjustedPtr, $path_below) {
 $this = $this | 0;
 $info = $info | 0;
 $adjustedPtr = $adjustedPtr | 0;
 $path_below = $path_below | 0;
 var $1 = 0, $add$ptr = 0, $p$0 = 0, $search_done = 0;
 L1 : do if (__ZL8is_equalPKSt9type_infoS1_b($this, HEAP32[$info + 8 >> 2] | 0, 0) | 0) __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0, $info, $adjustedPtr, $path_below); else {
  $1 = HEAP32[$this + 12 >> 2] | 0;
  $add$ptr = $this + 16 + ($1 << 3) | 0;
  __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this + 16 | 0, $info, $adjustedPtr, $path_below);
  if (($1 | 0) > 1) {
   $search_done = $info + 54 | 0;
   $p$0 = $this + 24 | 0;
   do {
    __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($p$0, $info, $adjustedPtr, $path_below);
    if (HEAP8[$search_done >> 0] | 0) break L1;
    $p$0 = $p$0 + 8 | 0;
   } while ($p$0 >>> 0 < $add$ptr >>> 0);
  }
 } while (0);
 return;
}

function __ZNKSt3__27codecvtIwc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_($this, $st, $to, $to_end, $to_nxt) {
 $this = $this | 0;
 $st = $st | 0;
 $to = $to | 0;
 $to_end = $to_end | 0;
 $to_nxt = $to_nxt | 0;
 var $4 = 0, $5 = 0, $call$i = 0, $call$i$i = 0, $dec = 0, $n$0 = 0, $p$0 = 0, $retval$0 = 0, $tmp = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $tmp = sp;
 HEAP32[$to_nxt >> 2] = $to;
 $call$i$i = ___uselocale(HEAP32[$this + 8 >> 2] | 0) | 0;
 $call$i = _wcrtomb($tmp, 0, $st) | 0;
 if ($call$i$i | 0) ___uselocale($call$i$i) | 0;
 L4 : do if (($call$i + 1 | 0) >>> 0 < 2) $retval$0 = 2; else {
  $dec = $call$i + -1 | 0;
  if ($dec >>> 0 > ($to_end - (HEAP32[$to_nxt >> 2] | 0) | 0) >>> 0) $retval$0 = 1; else {
   $n$0 = $dec;
   $p$0 = $tmp;
   while (1) {
    if (!$n$0) {
     $retval$0 = 0;
     break L4;
    }
    $4 = HEAP8[$p$0 >> 0] | 0;
    $5 = HEAP32[$to_nxt >> 2] | 0;
    HEAP32[$to_nxt >> 2] = $5 + 1;
    HEAP8[$5 >> 0] = $4;
    $n$0 = $n$0 + -1 | 0;
    $p$0 = $p$0 + 1 | 0;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $retval$0 | 0;
}

function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIwEE($this, $__m, $__b, $__e, $__err, $__ct) {
 $this = $this | 0;
 $__m = $__m | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__err = $__err | 0;
 $__ct = $__ct | 0;
 var $add$ptr = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call = 0, $sub$ptr$sub = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $agg$tmp$byval_copy = sp + 4 | 0;
 $agg$tmp = sp;
 $add$ptr = $this + 8 | 0;
 $call = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$add$ptr >> 2] | 0) + 4 >> 2] & 127]($add$ptr) | 0;
 HEAP32[$agg$tmp >> 2] = HEAP32[$__e >> 2];
 HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 $sub$ptr$sub = (__ZNSt3__214__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b, $agg$tmp$byval_copy, $call, $call + 288 | 0, $__ct, $__err, 0) | 0) - $call | 0;
 if (($sub$ptr$sub | 0) < 288) HEAP32[$__m >> 2] = (($sub$ptr$sub | 0) / 12 | 0 | 0) % 12 | 0;
 STACKTOP = sp;
 return;
}

function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIcEE($this, $__m, $__b, $__e, $__err, $__ct) {
 $this = $this | 0;
 $__m = $__m | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__err = $__err | 0;
 $__ct = $__ct | 0;
 var $add$ptr = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call = 0, $sub$ptr$sub = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $agg$tmp$byval_copy = sp + 4 | 0;
 $agg$tmp = sp;
 $add$ptr = $this + 8 | 0;
 $call = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$add$ptr >> 2] | 0) + 4 >> 2] & 127]($add$ptr) | 0;
 HEAP32[$agg$tmp >> 2] = HEAP32[$__e >> 2];
 HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 $sub$ptr$sub = (__ZNSt3__214__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b, $agg$tmp$byval_copy, $call, $call + 288 | 0, $__ct, $__err, 0) | 0) - $call | 0;
 if (($sub$ptr$sub | 0) < 288) HEAP32[$__m >> 2] = (($sub$ptr$sub | 0) / 12 | 0 | 0) % 12 | 0;
 STACKTOP = sp;
 return;
}

function _strlen($s) {
 $s = $s | 0;
 var $$pn = 0, $$pn24 = 0, $0 = 0, $3 = 0, $5 = 0, $incdec$ptr = 0, $incdec$ptr1323 = 0, $s$addr$0$lcssa = 0, $s$addr$015 = 0, $s$addr$1$lcssa = 0, $w$0 = 0, label = 0;
 label = 0;
 $0 = $s;
 L1 : do if (!($0 & 3)) {
  $s$addr$0$lcssa = $s;
  label = 5;
 } else {
  $5 = $0;
  $s$addr$015 = $s;
  while (1) {
   if (!(HEAP8[$s$addr$015 >> 0] | 0)) {
    $$pn = $5;
    break L1;
   }
   $incdec$ptr = $s$addr$015 + 1 | 0;
   $5 = $incdec$ptr;
   if (!($5 & 3)) {
    $s$addr$0$lcssa = $incdec$ptr;
    label = 5;
    break;
   } else $s$addr$015 = $incdec$ptr;
  }
 } while (0);
 if ((label | 0) == 5) {
  $w$0 = $s$addr$0$lcssa;
  while (1) {
   $3 = HEAP32[$w$0 >> 2] | 0;
   if (!(($3 & -2139062144 ^ -2139062144) & $3 + -16843009)) $w$0 = $w$0 + 4 | 0; else break;
  }
  if (!(($3 & 255) << 24 >> 24)) $s$addr$1$lcssa = $w$0; else {
   $$pn24 = $w$0;
   while (1) {
    $incdec$ptr1323 = $$pn24 + 1 | 0;
    if (!(HEAP8[$incdec$ptr1323 >> 0] | 0)) {
     $s$addr$1$lcssa = $incdec$ptr1323;
     break;
    } else $$pn24 = $incdec$ptr1323;
   }
  }
  $$pn = $s$addr$1$lcssa;
 }
 return $$pn - $0 | 0;
}

function __ZNKSt3__210__time_put8__do_putEPwRS1_PK2tmcc($this, $__wb, $__we, $__tm, $__fmt, $__mod) {
 $this = $this | 0;
 $__wb = $__wb | 0;
 $__we = $__we | 0;
 $__tm = $__tm | 0;
 $__fmt = $__fmt | 0;
 $__mod = $__mod | 0;
 var $0 = 0, $__nar = 0, $__nb = 0, $__ne = 0, $call = 0, $call$i = 0, $call$i$i = 0, $mb = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(128);
 $__nar = sp;
 $__ne = sp + 116 | 0;
 $mb = sp + 104 | 0;
 $__nb = sp + 112 | 0;
 HEAP32[$__ne >> 2] = $__nar + 100;
 __ZNKSt3__210__time_put8__do_putEPcRS1_PK2tmcc($this, $__nar, $__ne, $__tm, $__fmt, $__mod);
 $0 = $mb;
 HEAP32[$0 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$__nb >> 2] = $__nar;
 $call = __ZNSt3__212_GLOBAL__N_17countofIwEEmPKT_S4_($__wb, HEAP32[$__we >> 2] | 0) | 0;
 $call$i$i = ___uselocale(HEAP32[$this >> 2] | 0) | 0;
 $call$i = _mbsrtowcs($__wb, $__nb, $call, $mb) | 0;
 if ($call$i$i | 0) ___uselocale($call$i$i) | 0;
 if (($call$i | 0) == -1) __ZNSt3__221__throw_runtime_errorEPKc(0); else {
  HEAP32[$__we >> 2] = $__wb + ($call$i << 2);
  STACKTOP = sp;
  return;
 }
}

function _fourbyte_strstr($h, $n) {
 $h = $h | 0;
 $n = $n | 0;
 var $7 = 0, $8 = 0, $arrayidx22 = 0, $h$addr$0$lcssa = 0, $h$addr$018 = 0, $hw$019 = 0, $incdec$ptr = 0, $or10 = 0, $or24 = 0, $tobool = 0, $tobool$lcssa = 0, $tobool15 = 0;
 $or10 = (HEAPU8[$n + 1 >> 0] | 0) << 16 | (HEAPU8[$n >> 0] | 0) << 24 | (HEAPU8[$n + 2 >> 0] | 0) << 8 | (HEAPU8[$n + 3 >> 0] | 0);
 $arrayidx22 = $h + 3 | 0;
 $7 = HEAP8[$arrayidx22 >> 0] | 0;
 $or24 = (HEAPU8[$h + 1 >> 0] | 0) << 16 | (HEAPU8[$h >> 0] | 0) << 24 | (HEAPU8[$h + 2 >> 0] | 0) << 8 | $7 & 255;
 $tobool15 = $7 << 24 >> 24 == 0;
 if (($or24 | 0) == ($or10 | 0) | $tobool15) {
  $h$addr$0$lcssa = $arrayidx22;
  $tobool$lcssa = $tobool15;
 } else {
  $h$addr$018 = $arrayidx22;
  $hw$019 = $or24;
  while (1) {
   $incdec$ptr = $h$addr$018 + 1 | 0;
   $8 = HEAP8[$incdec$ptr >> 0] | 0;
   $hw$019 = $hw$019 << 8 | $8 & 255;
   $tobool = $8 << 24 >> 24 == 0;
   if (($hw$019 | 0) == ($or10 | 0) | $tobool) {
    $h$addr$0$lcssa = $incdec$ptr;
    $tobool$lcssa = $tobool;
    break;
   } else $h$addr$018 = $incdec$ptr;
  }
 }
 return ($tobool$lcssa ? 0 : $h$addr$0$lcssa + -3 | 0) | 0;
}

function _stbir__get_coefficient_width($filter, $scale) {
 $filter = $filter | 0;
 $scale = Math_fround($scale);
 var $2 = 0, $3 = f0, $6 = 0, $div = f0, $filter$addr = 0, $retval = 0, $scale$addr = 0, $tobool = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $retval = sp + 8 | 0;
 $filter$addr = sp + 4 | 0;
 $scale$addr = sp;
 HEAP32[$filter$addr >> 2] = $filter;
 HEAPF32[$scale$addr >> 2] = $scale;
 $tobool = (_stbir__use_upsampling(Math_fround(HEAPF32[$scale$addr >> 2])) | 0) != 0;
 $2 = HEAP32[6304 + (HEAP32[$filter$addr >> 2] << 3) + 4 >> 2] | 0;
 $3 = Math_fround(HEAPF32[$scale$addr >> 2]);
 if ($tobool) {
  $div = Math_fround(Math_fround(1.0) / $3);
  HEAP32[$retval >> 2] = ~~+Math_ceil(+(+Math_fround(Math_fround(FUNCTION_TABLE_ff[$2 & 7]($div)) * Math_fround(2.0))));
  $6 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $6 | 0;
 } else {
  HEAP32[$retval >> 2] = ~~+Math_ceil(+(+Math_fround(Math_fround(FUNCTION_TABLE_ff[$2 & 7]($3)) * Math_fround(2.0))));
  $6 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $6 | 0;
 }
 return 0;
}

function _stbir__choose_filter($info, $h_filter, $v_filter) {
 $info = $info | 0;
 $h_filter = $h_filter | 0;
 $v_filter = $v_filter | 0;
 var $h_filter$addr = 0, $info$addr = 0, $tobool = 0, $tobool4 = 0, $v_filter$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $info$addr = sp + 8 | 0;
 $h_filter$addr = sp + 4 | 0;
 $v_filter$addr = sp;
 HEAP32[$info$addr >> 2] = $info;
 HEAP32[$h_filter$addr >> 2] = $h_filter;
 HEAP32[$v_filter$addr >> 2] = $v_filter;
 if (!(HEAP32[$h_filter$addr >> 2] | 0)) {
  $tobool = (_stbir__use_upsampling(Math_fround(HEAPF32[(HEAP32[$info$addr >> 2] | 0) + 56 >> 2])) | 0) != 0;
  HEAP32[$h_filter$addr >> 2] = $tobool ? 4 : 5;
 }
 if (!(HEAP32[$v_filter$addr >> 2] | 0)) {
  $tobool4 = (_stbir__use_upsampling(Math_fround(HEAPF32[(HEAP32[$info$addr >> 2] | 0) + 60 >> 2])) | 0) != 0;
  HEAP32[$v_filter$addr >> 2] = $tobool4 ? 4 : 5;
 }
 HEAP32[(HEAP32[$info$addr >> 2] | 0) + 80 >> 2] = HEAP32[$h_filter$addr >> 2];
 HEAP32[(HEAP32[$info$addr >> 2] | 0) + 84 >> 2] = HEAP32[$v_filter$addr >> 2];
 STACKTOP = sp;
 return;
}

function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIwEE($this, $__w, $__b, $__e, $__err, $__ct) {
 $this = $this | 0;
 $__w = $__w | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__err = $__err | 0;
 $__ct = $__ct | 0;
 var $add$ptr = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call = 0, $sub$ptr$sub = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $agg$tmp$byval_copy = sp + 4 | 0;
 $agg$tmp = sp;
 $add$ptr = $this + 8 | 0;
 $call = FUNCTION_TABLE_ii[HEAP32[HEAP32[$add$ptr >> 2] >> 2] & 127]($add$ptr) | 0;
 HEAP32[$agg$tmp >> 2] = HEAP32[$__e >> 2];
 HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 $sub$ptr$sub = (__ZNSt3__214__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b, $agg$tmp$byval_copy, $call, $call + 168 | 0, $__ct, $__err, 0) | 0) - $call | 0;
 if (($sub$ptr$sub | 0) < 168) HEAP32[$__w >> 2] = (($sub$ptr$sub | 0) / 12 | 0 | 0) % 7 | 0;
 STACKTOP = sp;
 return;
}

function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIcEE($this, $__w, $__b, $__e, $__err, $__ct) {
 $this = $this | 0;
 $__w = $__w | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__err = $__err | 0;
 $__ct = $__ct | 0;
 var $add$ptr = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call = 0, $sub$ptr$sub = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $agg$tmp$byval_copy = sp + 4 | 0;
 $agg$tmp = sp;
 $add$ptr = $this + 8 | 0;
 $call = FUNCTION_TABLE_ii[HEAP32[HEAP32[$add$ptr >> 2] >> 2] & 127]($add$ptr) | 0;
 HEAP32[$agg$tmp >> 2] = HEAP32[$__e >> 2];
 HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 $sub$ptr$sub = (__ZNSt3__214__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b, $agg$tmp$byval_copy, $call, $call + 168 | 0, $__ct, $__err, 0) | 0) - $call | 0;
 if (($sub$ptr$sub | 0) < 168) HEAP32[$__w >> 2] = (($sub$ptr$sub | 0) / 12 | 0 | 0) % 7 | 0;
 STACKTOP = sp;
 return;
}

function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($this, $__n, $__c) {
 $this = $this | 0;
 $__n = $__n | 0;
 $__c = $__c | 0;
 var $0 = 0, $__size_$i$i = 0, $add$ptr$i = 0, $cond$i = 0, $ref$tmp$i = 0, $tobool$i$i = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $ref$tmp$i = sp;
 $__size_$i$i = $this + 11 | 0;
 $0 = HEAP8[$__size_$i$i >> 0] | 0;
 $tobool$i$i = $0 << 24 >> 24 < 0;
 if ($tobool$i$i) $cond$i = HEAP32[$this + 4 >> 2] | 0; else $cond$i = $0 & 255;
 do if ($cond$i >>> 0 < $__n >>> 0) __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEmc($this, $__n - $cond$i | 0, $__c) | 0; else if ($tobool$i$i) {
  $add$ptr$i = (HEAP32[$this >> 2] | 0) + $__n | 0;
  HEAP8[$ref$tmp$i >> 0] = 0;
  __ZNSt3__211char_traitsIcE6assignERcRKc($add$ptr$i, $ref$tmp$i);
  HEAP32[$this + 4 >> 2] = $__n;
  break;
 } else {
  HEAP8[$ref$tmp$i >> 0] = 0;
  __ZNSt3__211char_traitsIcE6assignERcRKc($this + $__n | 0, $ref$tmp$i);
  HEAP8[$__size_$i$i >> 0] = $__n;
  break;
 } while (0);
 STACKTOP = sp;
 return;
}

function __ZNSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN4tson8PropertyEEENS_19__map_value_compareIS7_SA_NS_4lessIS7_EELb1EEENS5_ISA_EEE16__construct_nodeIJRKNS_21piecewise_construct_tENS_5tupleIJRKS7_EEENSL_IJEEEEEENS_10unique_ptrINS_11__tree_nodeISA_PvEENS_22__tree_node_destructorINS5_IST_EEEEEEDpOT_($agg$result, $this, $__args, $__args1, $__args3) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__args = $__args | 0;
 $__args1 = $__args1 | 0;
 $__args3 = $__args3 | 0;
 var $$sroa_idx10 = 0, $call$i$i$i = 0, $call2$i$i$i = 0;
 $call2$i$i$i = __Znwm(60) | 0;
 HEAP32[$agg$result >> 2] = $call2$i$i$i;
 HEAP32[$agg$result + 4 >> 2] = $this + 4;
 $$sroa_idx10 = $agg$result + 8 | 0;
 HEAP8[$$sroa_idx10 >> 0] = 0;
 $call$i$i$i = __ZNSt3__29__launderINS_4pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN4tson8PropertyEEEEEPT_SD_($call2$i$i$i + 16 | 0) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($call$i$i$i, HEAP32[$__args1 >> 2] | 0);
 __ZN4tson8PropertyC2Ev($call$i$i$i + 12 | 0);
 HEAP8[$$sroa_idx10 >> 0] = 1;
 return;
}

function __ZNSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8nlohmann10basic_jsonINS_3mapENS_6vectorES7_bxydS5_NS8_14adl_serializerEEEEENS_19__map_value_compareIS7_SE_NS_4lessIvEELb1EEENS5_ISE_EEE16__construct_nodeIJRKNS_4pairIKS7_SD_EEEEENS_10unique_ptrINS_11__tree_nodeISE_PvEENS_22__tree_node_destructorINS5_ISU_EEEEEEDpOT_($agg$result, $this, $__args) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__args = $__args | 0;
 var $$sroa_idx11 = 0, $call2$i$i$i = 0;
 $call2$i$i$i = __Znwm(48) | 0;
 HEAP32[$agg$result >> 2] = $call2$i$i$i;
 HEAP32[$agg$result + 4 >> 2] = $this + 4;
 $$sroa_idx11 = $agg$result + 8 | 0;
 HEAP8[$$sroa_idx11 >> 0] = 0;
 __ZNSt3__24pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8nlohmann10basic_jsonINS_3mapENS_6vectorES6_bxydS4_NS8_14adl_serializerEEEEC2ERKSE_(__ZNSt3__29__launderINS_4pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8nlohmann10basic_jsonINS_3mapENS_6vectorES7_bxydS5_NS9_14adl_serializerEEEEEEEPT_SH_($call2$i$i$i + 16 | 0) | 0, $__args);
 HEAP8[$$sroa_idx11 >> 0] = 1;
 return;
}

function _MatrixScale($agg$result, $x, $y, $z) {
 $agg$result = $agg$result | 0;
 $x = Math_fround($x);
 $y = Math_fround($y);
 $z = Math_fround($z);
 var $result = 0, $x$addr = 0, $y$addr = 0, $z$addr = 0, dest = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(80);
 $x$addr = sp + 72 | 0;
 $y$addr = sp + 68 | 0;
 $z$addr = sp + 64 | 0;
 $result = sp;
 HEAPF32[$x$addr >> 2] = $x;
 HEAPF32[$y$addr >> 2] = $y;
 HEAPF32[$z$addr >> 2] = $z;
 dest = $result;
 stop = dest + 64 | 0;
 do {
  HEAP32[dest >> 2] = 0;
  dest = dest + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAPF32[$result >> 2] = Math_fround(HEAPF32[$x$addr >> 2]);
 HEAPF32[$result + 20 >> 2] = Math_fround(HEAPF32[$y$addr >> 2]);
 HEAPF32[$result + 40 >> 2] = Math_fround(HEAPF32[$z$addr >> 2]);
 HEAPF32[$result + 60 >> 2] = Math_fround(1.0);
 dest = $agg$result;
 src = $result;
 stop = dest + 64 | 0;
 do {
  HEAP32[dest >> 2] = HEAP32[src >> 2];
  dest = dest + 4 | 0;
  src = src + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 STACKTOP = sp;
 return;
}

function __ZNSt3__26vectorIbNS_9allocatorIbEEE7reserveEm($this, $__n) {
 $this = $this | 0;
 $__n = $__n | 0;
 var $1 = 0, $2 = 0, $__v = 0, $agg$tmp = 0, $agg$tmp3 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $__v = sp + 16 | 0;
 $agg$tmp = sp + 8 | 0;
 $agg$tmp3 = sp;
 if (HEAP32[$this + 8 >> 2] << 5 >>> 0 < $__n >>> 0) {
  HEAP32[$__v >> 2] = 0;
  HEAP32[$__v + 4 >> 2] = 0;
  HEAP32[$__v + 8 >> 2] = 0;
  __ZNSt3__26vectorIbNS_9allocatorIbEEE11__vallocateEm($__v, $__n);
  $1 = HEAP32[$this >> 2] | 0;
  HEAP32[$agg$tmp >> 2] = $1;
  HEAP32[$agg$tmp + 4 >> 2] = 0;
  $2 = HEAP32[$this + 4 >> 2] | 0;
  HEAP32[$agg$tmp3 >> 2] = $1 + ($2 >>> 5 << 2);
  HEAP32[$agg$tmp3 + 4 >> 2] = $2 & 31;
  __ZNSt3__26vectorIbNS_9allocatorIbEEE18__construct_at_endINS_14__bit_iteratorIS3_Lb0ELm0EEEEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES8_S8_($__v, $agg$tmp, $agg$tmp3);
  __ZNSt3__26vectorIbNS_9allocatorIbEEE4swapERS3_($this, $__v);
  __ZNSt3__26vectorIbNS_9allocatorIbEEED2Ev($__v);
 }
 STACKTOP = sp;
 return;
}

function __ZNSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN4tson8PropertyEEENS_19__map_value_compareIS7_SA_NS_4lessIS7_EELb1EEENS5_ISA_EEE7destroyEPNS_11__tree_nodeISA_PvEE($this, $__nd) {
 $this = $this | 0;
 $__nd = $__nd | 0;
 if ($__nd | 0) {
  __ZNSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN4tson8PropertyEEENS_19__map_value_compareIS7_SA_NS_4lessIS7_EELb1EEENS5_ISA_EEE7destroyEPNS_11__tree_nodeISA_PvEE($this, HEAP32[$__nd >> 2] | 0);
  __ZNSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN4tson8PropertyEEENS_19__map_value_compareIS7_SA_NS_4lessIS7_EELb1EEENS5_ISA_EEE7destroyEPNS_11__tree_nodeISA_PvEE($this, HEAP32[$__nd + 4 >> 2] | 0);
  __ZNSt3__24pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN4tson8PropertyEED2Ev(__ZNSt3__29__launderINS_4pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN4tson8PropertyEEEEEPT_SD_($__nd + 16 | 0) | 0);
  __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm($__nd, 60);
 }
 return;
}

function __ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEmmPKcm($this, $__pos1, $__n1, $__s, $__n2) {
 $this = $this | 0;
 $__pos1 = $__pos1 | 0;
 $__n1 = $__n1 | 0;
 $__s = $__s | 0;
 $__n2 = $__n2 | 0;
 var $$sroa$speculated = 0, $0 = 0, $call6 = 0, $cmp$i$i$i7 = 0, $cond$i = 0, $cond$i$i = 0, $sub = 0, $tobool$i$i = 0;
 $0 = HEAP8[$this + 11 >> 0] | 0;
 $tobool$i$i = $0 << 24 >> 24 < 0;
 if ($tobool$i$i) $cond$i = HEAP32[$this + 4 >> 2] | 0; else $cond$i = $0 & 255;
 if (($__n2 | 0) == -1 | $cond$i >>> 0 < $__pos1 >>> 0) __ZNKSt3__221__basic_string_commonILb1EE20__throw_out_of_rangeEv($this);
 $sub = $cond$i - $__pos1 | 0;
 $$sroa$speculated = $sub >>> 0 < $__n1 >>> 0 ? $sub : $__n1;
 if ($tobool$i$i) $cond$i$i = HEAP32[$this >> 2] | 0; else $cond$i$i = $this;
 $cmp$i$i$i7 = $$sroa$speculated >>> 0 > $__n2 >>> 0;
 $call6 = __ZNSt3__211char_traitsIcE7compareEPKcS3_m($cond$i$i + $__pos1 | 0, $__s, $cmp$i$i$i7 ? $__n2 : $$sroa$speculated) | 0;
 if (!$call6) return ($$sroa$speculated >>> 0 < $__n2 >>> 0 ? -1 : $cmp$i$i$i7 & 1) | 0; else return $call6 | 0;
 return 0;
}

function __ZNSt3__215__num_get_floatIeEET_PKcS3_Rj($__a, $__a_end, $__err) {
 $__a = $__a | 0;
 $__a_end = $__a_end | 0;
 $__err = $__err | 0;
 var $0 = 0, $1 = 0, $__p2 = 0, $call1$i = 0.0, $retval$0 = 0.0, $retval$0$ph = 0.0, $retval$1 = 0.0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $__p2 = sp;
 if (($__a | 0) == ($__a_end | 0)) {
  HEAP32[$__err >> 2] = 4;
  $retval$1 = 0.0;
 } else {
  $0 = HEAP32[(___errno_location() | 0) >> 2] | 0;
  HEAP32[(___errno_location() | 0) >> 2] = 0;
  $call1$i = +_strtold_l($__a, $__p2, __ZNSt3__26__clocEv() | 0);
  $1 = HEAP32[(___errno_location() | 0) >> 2] | 0;
  if (!$1) HEAP32[(___errno_location() | 0) >> 2] = $0;
  if ((HEAP32[$__p2 >> 2] | 0) == ($__a_end | 0)) if (($1 | 0) == 68) {
   $retval$0$ph = $call1$i;
   label = 6;
  } else $retval$0 = $call1$i; else {
   $retval$0$ph = 0.0;
   label = 6;
  }
  if ((label | 0) == 6) {
   HEAP32[$__err >> 2] = 4;
   $retval$0 = $retval$0$ph;
  }
  $retval$1 = $retval$0;
 }
 STACKTOP = sp;
 return +$retval$1;
}

function __ZNSt3__215__num_get_floatIdEET_PKcS3_Rj($__a, $__a_end, $__err) {
 $__a = $__a | 0;
 $__a_end = $__a_end | 0;
 $__err = $__err | 0;
 var $0 = 0, $1 = 0, $__p2 = 0, $call1$i = 0.0, $retval$0 = 0.0, $retval$0$ph = 0.0, $retval$1 = 0.0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $__p2 = sp;
 if (($__a | 0) == ($__a_end | 0)) {
  HEAP32[$__err >> 2] = 4;
  $retval$1 = 0.0;
 } else {
  $0 = HEAP32[(___errno_location() | 0) >> 2] | 0;
  HEAP32[(___errno_location() | 0) >> 2] = 0;
  $call1$i = +_strtod_l($__a, $__p2, __ZNSt3__26__clocEv() | 0);
  $1 = HEAP32[(___errno_location() | 0) >> 2] | 0;
  if (!$1) HEAP32[(___errno_location() | 0) >> 2] = $0;
  if ((HEAP32[$__p2 >> 2] | 0) == ($__a_end | 0)) if (($1 | 0) == 68) {
   $retval$0$ph = $call1$i;
   label = 6;
  } else $retval$0 = $call1$i; else {
   $retval$0$ph = 0.0;
   label = 6;
  }
  if ((label | 0) == 6) {
   HEAP32[$__err >> 2] = 4;
   $retval$0 = $retval$0$ph;
  }
  $retval$1 = $retval$0;
 }
 STACKTOP = sp;
 return +$retval$1;
}

function _stbi__malloc_mad3($a, $b, $c, $add) {
 $a = $a | 0;
 $b = $b | 0;
 $c = $c | 0;
 $add = $add | 0;
 var $8 = 0, $a$addr = 0, $add$addr = 0, $b$addr = 0, $c$addr = 0, $mul = 0, $mul1 = 0, $retval = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $retval = sp + 16 | 0;
 $a$addr = sp + 12 | 0;
 $b$addr = sp + 8 | 0;
 $c$addr = sp + 4 | 0;
 $add$addr = sp;
 HEAP32[$a$addr >> 2] = $a;
 HEAP32[$b$addr >> 2] = $b;
 HEAP32[$c$addr >> 2] = $c;
 HEAP32[$add$addr >> 2] = $add;
 if (_stbi__mad3sizes_valid(HEAP32[$a$addr >> 2] | 0, HEAP32[$b$addr >> 2] | 0, HEAP32[$c$addr >> 2] | 0, HEAP32[$add$addr >> 2] | 0) | 0) {
  $mul = Math_imul(HEAP32[$a$addr >> 2] | 0, HEAP32[$b$addr >> 2] | 0) | 0;
  $mul1 = Math_imul($mul, HEAP32[$c$addr >> 2] | 0) | 0;
  HEAP32[$retval >> 2] = _stbi__malloc($mul1 + (HEAP32[$add$addr >> 2] | 0) | 0) | 0;
  $8 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $8 | 0;
 } else {
  HEAP32[$retval >> 2] = 0;
  $8 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $8 | 0;
 }
 return 0;
}

function __ZNSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN4tson8PropertyEEENS_19__map_value_compareIS7_SA_NS_4lessIS7_EELb1EEENS5_ISA_EEE13__move_assignERSG_NS_17integral_constantIbLb1EEE($this, $__t, $0) {
 $this = $this | 0;
 $__t = $__t | 0;
 $0 = $0 | 0;
 var $3 = 0, $4 = 0, $6 = 0, $__value_$i$i$i = 0, $__value_$i$i15 = 0;
 $__value_$i$i$i = $this + 4 | 0;
 __ZNSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN4tson8PropertyEEENS_19__map_value_compareIS7_SA_NS_4lessIS7_EELb1EEENS5_ISA_EEE7destroyEPNS_11__tree_nodeISA_PvEE($this, HEAP32[$__value_$i$i$i >> 2] | 0);
 HEAP32[$this >> 2] = HEAP32[$__t >> 2];
 $__value_$i$i15 = $__t + 4 | 0;
 $3 = HEAP32[$__value_$i$i15 >> 2] | 0;
 HEAP32[$__value_$i$i$i >> 2] = $3;
 $4 = $__t + 8 | 0;
 $6 = HEAP32[$4 >> 2] | 0;
 HEAP32[$this + 8 >> 2] = $6;
 if (!$6) HEAP32[$this >> 2] = $__value_$i$i$i; else {
  HEAP32[$3 + 8 >> 2] = $__value_$i$i$i;
  HEAP32[$__t >> 2] = $__value_$i$i15;
  HEAP32[$__value_$i$i15 >> 2] = 0;
  HEAP32[$4 >> 2] = 0;
 }
 return;
}

function __ZN8nlohmann6detail5lexerINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE15token_type_nameENSE_10token_typeE($t) {
 $t = $t | 0;
 var $retval$0 = 0;
 do switch ($t | 0) {
 case 0:
  {
   $retval$0 = 24603;
   break;
  }
 case 1:
  {
   $retval$0 = 24590;
   break;
  }
 case 2:
  {
   $retval$0 = 24576;
   break;
  }
 case 3:
  {
   $retval$0 = 24563;
   break;
  }
 case 4:
  {
   $retval$0 = 24548;
   break;
  }
 case 7:
 case 6:
 case 5:
  {
   $retval$0 = 24533;
   break;
  }
 case 8:
  {
   $retval$0 = 24529;
   break;
  }
 case 9:
  {
   $retval$0 = 24525;
   break;
  }
 case 10:
  {
   $retval$0 = 24521;
   break;
  }
 case 11:
  {
   $retval$0 = 24517;
   break;
  }
 case 12:
  {
   $retval$0 = 24513;
   break;
  }
 case 13:
  {
   $retval$0 = 24509;
   break;
  }
 case 14:
  {
   $retval$0 = 24495;
   break;
  }
 case 15:
  {
   $retval$0 = 24482;
   break;
  }
 case 16:
  {
   $retval$0 = 24459;
   break;
  }
 default:
  $retval$0 = 24445;
 } while (0);
 return $retval$0 | 0;
}

function __ZNSt3__29__any_imp13_SmallHandlerIbE8__handleENS0_7_ActionEPKNS_3anyEPS4_PKSt9type_infoPKv($__act, $__this, $__other, $__info, $__fallback_info) {
 $__act = $__act | 0;
 $__this = $__this | 0;
 $__other = $__other | 0;
 $__info = $__info | 0;
 $__fallback_info = $__fallback_info | 0;
 var $retval$0 = 0;
 L1 : do switch ($__act | 0) {
 case 0:
  {
   HEAP32[$__this >> 2] = 0;
   $retval$0 = 0;
   break;
  }
 case 1:
  {
   HEAP8[$__other + 4 >> 0] = HEAP8[$__this + 4 >> 0] | 0;
   HEAP32[$__other >> 2] = 24;
   $retval$0 = 0;
   break;
  }
 case 2:
  {
   HEAP8[$__other + 4 >> 0] = HEAP8[$__this + 4 >> 0] | 0;
   HEAP32[$__other >> 2] = 24;
   HEAP32[$__this >> 2] = 0;
   $retval$0 = 0;
   break;
  }
 case 3:
  {
   if (!$__info) {
    if (($__fallback_info | 0) != 59164) {
     $retval$0 = 0;
     break L1;
    }
   } else if ((HEAP32[$__info + 4 >> 2] | 0) != (HEAP32[3987] | 0)) {
    $retval$0 = 0;
    break L1;
   }
   $retval$0 = $__this + 4 | 0;
   break;
  }
 case 4:
  {
   $retval$0 = 15944;
   break;
  }
 default:
  {}
 } while (0);
 return $retval$0 | 0;
}

function __ZNSt3__26locale5__imp7installEPNS0_5facetEl($this, $f, $id) {
 $this = $this | 0;
 $f = $f | 0;
 $id = $id | 0;
 var $3 = 0, $5 = 0, $6 = 0, $7 = 0, $__begin_$i9$pre$phiZZ2D = 0, $__shared_owners_$i = 0, $__shared_owners_$i6 = 0, $facets_ = 0;
 $__shared_owners_$i = $f + 4 | 0;
 HEAP32[$__shared_owners_$i >> 2] = (HEAP32[$__shared_owners_$i >> 2] | 0) + 1;
 $facets_ = $this + 8 | 0;
 $3 = HEAP32[$facets_ >> 2] | 0;
 if ((HEAP32[$this + 12 >> 2] | 0) - $3 >> 2 >>> 0 > $id >>> 0) {
  $5 = $3;
  $__begin_$i9$pre$phiZZ2D = $facets_;
 } else {
  __ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEE6resizeEm($facets_, $id + 1 | 0);
  $5 = HEAP32[$facets_ >> 2] | 0;
  $__begin_$i9$pre$phiZZ2D = $facets_;
 }
 $6 = HEAP32[$5 + ($id << 2) >> 2] | 0;
 if ($6 | 0) {
  $__shared_owners_$i6 = $6 + 4 | 0;
  $7 = HEAP32[$__shared_owners_$i6 >> 2] | 0;
  HEAP32[$__shared_owners_$i6 >> 2] = $7 + -1;
  if (!$7) FUNCTION_TABLE_vi[HEAP32[(HEAP32[$6 >> 2] | 0) + 8 >> 2] & 255]($6);
 }
 HEAP32[(HEAP32[$__begin_$i9$pre$phiZZ2D >> 2] | 0) + ($id << 2) >> 2] = $f;
 return;
}

function __ZNSt3__29__any_imp13_SmallHandlerIiE8__handleENS0_7_ActionEPKNS_3anyEPS4_PKSt9type_infoPKv($__act, $__this, $__other, $__info, $__fallback_info) {
 $__act = $__act | 0;
 $__this = $__this | 0;
 $__other = $__other | 0;
 $__info = $__info | 0;
 $__fallback_info = $__fallback_info | 0;
 var $retval$0 = 0;
 L1 : do switch ($__act | 0) {
 case 0:
  {
   HEAP32[$__this >> 2] = 0;
   $retval$0 = 0;
   break;
  }
 case 1:
  {
   HEAP32[$__other + 4 >> 2] = HEAP32[$__this + 4 >> 2];
   HEAP32[$__other >> 2] = 23;
   $retval$0 = 0;
   break;
  }
 case 2:
  {
   HEAP32[$__other + 4 >> 2] = HEAP32[$__this + 4 >> 2];
   HEAP32[$__other >> 2] = 23;
   HEAP32[$__this >> 2] = 0;
   $retval$0 = 0;
   break;
  }
 case 3:
  {
   if (!$__info) {
    if (($__fallback_info | 0) != 59152) {
     $retval$0 = 0;
     break L1;
    }
   } else if ((HEAP32[$__info + 4 >> 2] | 0) != (HEAP32[3989] | 0)) {
    $retval$0 = 0;
    break L1;
   }
   $retval$0 = $__this + 4 | 0;
   break;
  }
 case 4:
  {
   $retval$0 = 15952;
   break;
  }
 default:
  {}
 } while (0);
 return $retval$0 | 0;
}

function __ZNSt3__29__any_imp13_SmallHandlerIfE8__handleENS0_7_ActionEPKNS_3anyEPS4_PKSt9type_infoPKv($__act, $__this, $__other, $__info, $__fallback_info) {
 $__act = $__act | 0;
 $__this = $__this | 0;
 $__other = $__other | 0;
 $__info = $__info | 0;
 $__fallback_info = $__fallback_info | 0;
 var $retval$0 = 0;
 L1 : do switch ($__act | 0) {
 case 0:
  {
   HEAP32[$__this >> 2] = 0;
   $retval$0 = 0;
   break;
  }
 case 1:
  {
   HEAP32[$__other + 4 >> 2] = HEAP32[$__this + 4 >> 2];
   HEAP32[$__other >> 2] = 25;
   $retval$0 = 0;
   break;
  }
 case 2:
  {
   HEAP32[$__other + 4 >> 2] = HEAP32[$__this + 4 >> 2];
   HEAP32[$__other >> 2] = 25;
   HEAP32[$__this >> 2] = 0;
   $retval$0 = 0;
   break;
  }
 case 3:
  {
   if (!$__info) {
    if (($__fallback_info | 0) != 59160) {
     $retval$0 = 0;
     break L1;
    }
   } else if ((HEAP32[$__info + 4 >> 2] | 0) != (HEAP32[3991] | 0)) {
    $retval$0 = 0;
    break L1;
   }
   $retval$0 = $__this + 4 | 0;
   break;
  }
 case 4:
  {
   $retval$0 = 15960;
   break;
  }
 default:
  {}
 } while (0);
 return $retval$0 | 0;
}

function __ZNSt3__26locale2id5__getEv($this) {
 $this = $this | 0;
 var $__p$i = 0, $indirect$arg$temp$byval_copy2D2D = 0, $indirect$arg$temp2D2D = 0, $ref$tmp = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 $indirect$arg$temp$byval_copy2D2D = sp + 32 | 0;
 $__p$i = sp + 24 | 0;
 $ref$tmp = sp;
 $indirect$arg$temp2D2D = sp + 16 | 0;
 HEAP32[$indirect$arg$temp2D2D >> 2] = 151;
 HEAP32[$indirect$arg$temp2D2D + 4 >> 2] = 0;
 HEAP32[$indirect$arg$temp$byval_copy2D2D >> 2] = HEAP32[$indirect$arg$temp2D2D >> 2];
 HEAP32[$indirect$arg$temp$byval_copy2D2D + 4 >> 2] = HEAP32[$indirect$arg$temp2D2D + 4 >> 2];
 __ZNSt3__212_GLOBAL__N_111__fake_bindC2EMNS_6locale2idEFvvEPS3_($ref$tmp, $indirect$arg$temp$byval_copy2D2D, $this);
 if ((HEAP32[$this >> 2] | 0) != -1) {
  HEAP32[$indirect$arg$temp$byval_copy2D2D >> 2] = $ref$tmp;
  HEAP32[$__p$i >> 2] = $indirect$arg$temp$byval_copy2D2D;
  __ZNSt3__211__call_onceERVmPvPFvS2_E($this, $__p$i, 152);
 }
 STACKTOP = sp;
 return (HEAP32[$this + 4 >> 2] | 0) + -1 | 0;
}

function __ZN8nlohmann6detail5lexerINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE5ungetEv($this) {
 $this = $this | 0;
 var $1 = 0, $2 = 0, $3 = 0, $5 = 0, $__end_$i = 0, $chars_read_current_line = 0, $chars_read_total = 0, $lines_read = 0;
 HEAP8[$this + 12 >> 0] = 1;
 $chars_read_total = $this + 16 | 0;
 HEAP32[$chars_read_total >> 2] = (HEAP32[$chars_read_total >> 2] | 0) + -1;
 $chars_read_current_line = $this + 20 | 0;
 $1 = HEAP32[$chars_read_current_line >> 2] | 0;
 if (!$1) {
  $lines_read = $this + 24 | 0;
  $2 = HEAP32[$lines_read >> 2] | 0;
  if ($2 | 0) HEAP32[$lines_read >> 2] = $2 + -1;
 } else HEAP32[$chars_read_current_line >> 2] = $1 + -1;
 $3 = HEAP32[$this + 8 >> 2] | 0;
 do if (($3 | 0) != (__ZNSt3__211char_traitsIcE3eofEv() | 0)) {
  $__end_$i = $this + 32 | 0;
  $5 = HEAP32[$__end_$i >> 2] | 0;
  if ((HEAP32[$this + 28 >> 2] | 0) == ($5 | 0)) ___assert_fail(24945, 22221, 8289, 24970); else {
   HEAP32[$__end_$i >> 2] = $5 + -1;
   break;
  }
 } while (0);
 return;
}

function _threebyte_strstr($h, $n) {
 $h = $h | 0;
 $n = $n | 0;
 var $5 = 0, $6 = 0, $arrayidx15 = 0, $h$addr$0$lcssa = 0, $h$addr$016 = 0, $hw$017 = 0, $incdec$ptr = 0, $or18 = 0, $or7 = 0, $tobool = 0, $tobool$lcssa = 0, $tobool13 = 0;
 $or7 = (HEAPU8[$n + 1 >> 0] | 0) << 16 | (HEAPU8[$n >> 0] | 0) << 24 | (HEAPU8[$n + 2 >> 0] | 0) << 8;
 $arrayidx15 = $h + 2 | 0;
 $5 = HEAP8[$arrayidx15 >> 0] | 0;
 $or18 = (HEAPU8[$h + 1 >> 0] | 0) << 16 | (HEAPU8[$h >> 0] | 0) << 24 | ($5 & 255) << 8;
 $tobool13 = $5 << 24 >> 24 == 0;
 if (($or18 | 0) == ($or7 | 0) | $tobool13) {
  $h$addr$0$lcssa = $arrayidx15;
  $tobool$lcssa = $tobool13;
 } else {
  $h$addr$016 = $arrayidx15;
  $hw$017 = $or18;
  while (1) {
   $incdec$ptr = $h$addr$016 + 1 | 0;
   $6 = HEAP8[$incdec$ptr >> 0] | 0;
   $hw$017 = ($hw$017 | $6 & 255) << 8;
   $tobool = $6 << 24 >> 24 == 0;
   if (($hw$017 | 0) == ($or7 | 0) | $tobool) {
    $h$addr$0$lcssa = $incdec$ptr;
    $tobool$lcssa = $tobool;
    break;
   } else $h$addr$016 = $incdec$ptr;
  }
 }
 return ($tobool$lcssa ? 0 : $h$addr$0$lcssa + -2 | 0) | 0;
}

function _stbi__start_callbacks($s, $c, $user) {
 $s = $s | 0;
 $c = $c | 0;
 $user = $user | 0;
 var $1 = 0, $c$addr = 0, $io = 0, $s$addr = 0, $user$addr = 0, sp = 0, CSE$0 = 0, CSE$1 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $s$addr = sp + 8 | 0;
 $c$addr = sp + 4 | 0;
 $user$addr = sp;
 HEAP32[$s$addr >> 2] = $s;
 HEAP32[$c$addr >> 2] = $c;
 HEAP32[$user$addr >> 2] = $user;
 $io = (HEAP32[$s$addr >> 2] | 0) + 16 | 0;
 $1 = HEAP32[$c$addr >> 2] | 0;
 HEAP32[$io >> 2] = HEAP32[$1 >> 2];
 HEAP32[$io + 4 >> 2] = HEAP32[$1 + 4 >> 2];
 HEAP32[$io + 8 >> 2] = HEAP32[$1 + 8 >> 2];
 HEAP32[(HEAP32[$s$addr >> 2] | 0) + 28 >> 2] = HEAP32[$user$addr >> 2];
 HEAP32[(HEAP32[$s$addr >> 2] | 0) + 36 >> 2] = 128;
 HEAP32[(HEAP32[$s$addr >> 2] | 0) + 32 >> 2] = 1;
 CSE$0 = HEAP32[$s$addr >> 2] | 0;
 HEAP32[CSE$0 + 176 >> 2] = (CSE$0 | 0) + 40;
 _stbi__refill_buffer(HEAP32[$s$addr >> 2] | 0);
 CSE$1 = HEAP32[$s$addr >> 2] | 0;
 HEAP32[CSE$1 + 180 >> 2] = HEAP32[CSE$1 + 172 >> 2];
 STACKTOP = sp;
 return;
}

function _stbir__decode_and_resample_downsample($stbir_info, $n) {
 $stbir_info = $stbir_info | 0;
 $n = $n | 0;
 var $11 = 0, $9 = 0, $n$addr = 0, $stbir_info$addr = 0, $tobool = 0, sp = 0, CSE$0 = 0, CSE$1 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $stbir_info$addr = sp + 4 | 0;
 $n$addr = sp;
 HEAP32[$stbir_info$addr >> 2] = $stbir_info;
 HEAP32[$n$addr >> 2] = $n;
 _stbir__decode_scanline(HEAP32[$stbir_info$addr >> 2] | 0, HEAP32[$n$addr >> 2] | 0);
 CSE$0 = HEAP32[$stbir_info$addr >> 2] | 0;
 _memset(HEAP32[CSE$0 + 124 >> 2] | 0, 0, (Math_imul(HEAP32[CSE$0 + 20 >> 2] | 0, HEAP32[CSE$0 + 64 >> 2] | 0) | 0) << 2 | 0) | 0;
 $tobool = (_stbir__use_width_upsampling(HEAP32[$stbir_info$addr >> 2] | 0) | 0) != 0;
 CSE$1 = HEAP32[$stbir_info$addr >> 2] | 0;
 $9 = CSE$1 | 0;
 $11 = HEAP32[CSE$1 + 124 >> 2] | 0;
 if ($tobool) {
  _stbir__resample_horizontal_upsample($9, $11);
  STACKTOP = sp;
  return;
 } else {
  _stbir__resample_horizontal_downsample($9, $11);
  STACKTOP = sp;
  return;
 }
}

function __ZNSt3__214__num_put_base12__format_intEPcPKcbj($__fmtp, $__len, $__signd, $__flags) {
 $__fmtp = $__fmtp | 0;
 $__len = $__len | 0;
 $__signd = $__signd | 0;
 $__flags = $__flags | 0;
 var $$sink = 0, $0 = 0, $__fmtp$addr$0 = 0, $__fmtp$addr$2 = 0, $__fmtp$addr$2$ph = 0, $__len$addr$0 = 0;
 if (!($__flags & 2048)) $__fmtp$addr$0 = $__fmtp; else {
  HEAP8[$__fmtp >> 0] = 43;
  $__fmtp$addr$0 = $__fmtp + 1 | 0;
 }
 if (!($__flags & 512)) $__fmtp$addr$2$ph = $__fmtp$addr$0; else {
  HEAP8[$__fmtp$addr$0 >> 0] = 35;
  $__fmtp$addr$2$ph = $__fmtp$addr$0 + 1 | 0;
 }
 $__fmtp$addr$2 = $__fmtp$addr$2$ph;
 $__len$addr$0 = $__len;
 while (1) {
  $0 = HEAP8[$__len$addr$0 >> 0] | 0;
  if (!($0 << 24 >> 24)) break;
  HEAP8[$__fmtp$addr$2 >> 0] = $0;
  $__fmtp$addr$2 = $__fmtp$addr$2 + 1 | 0;
  $__len$addr$0 = $__len$addr$0 + 1 | 0;
 }
 switch ($__flags & 74) {
 case 64:
  {
   $$sink = 111;
   break;
  }
 case 8:
  {
   $$sink = $__flags >>> 9 & 32 ^ 120;
   break;
  }
 default:
  $$sink = $__signd ? 100 : 117;
 }
 HEAP8[$__fmtp$addr$2 >> 0] = $$sink;
 return;
}

function _stbir__get_coefficient($coefficients, $filter, $scale, $n, $c) {
 $coefficients = $coefficients | 0;
 $filter = $filter | 0;
 $scale = Math_fround($scale);
 $n = $n | 0;
 $c = $c | 0;
 var $c$addr = 0, $coefficients$addr = 0, $filter$addr = 0, $mul = 0, $n$addr = 0, $scale$addr = 0, $width = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $coefficients$addr = sp + 20 | 0;
 $filter$addr = sp + 16 | 0;
 $scale$addr = sp + 12 | 0;
 $n$addr = sp + 8 | 0;
 $c$addr = sp + 4 | 0;
 $width = sp;
 HEAP32[$coefficients$addr >> 2] = $coefficients;
 HEAP32[$filter$addr >> 2] = $filter;
 HEAPF32[$scale$addr >> 2] = $scale;
 HEAP32[$n$addr >> 2] = $n;
 HEAP32[$c$addr >> 2] = $c;
 HEAP32[$width >> 2] = _stbir__get_coefficient_width(HEAP32[$filter$addr >> 2] | 0, Math_fround(HEAPF32[$scale$addr >> 2])) | 0;
 $mul = Math_imul(HEAP32[$width >> 2] | 0, HEAP32[$n$addr >> 2] | 0) | 0;
 STACKTOP = sp;
 return (HEAP32[$coefficients$addr >> 2] | 0) + ($mul + (HEAP32[$c$addr >> 2] | 0) << 2) | 0;
}

function __ZNSt3__212_GLOBAL__N_113do_strerror_rEi($agg$result, $ev) {
 $agg$result = $agg$result | 0;
 $ev = $ev | 0;
 var $0 = 0, $buffer = 0, $call3 = 0, $error_message$0 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1040 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(1040);
 $vararg_buffer = sp + 1024 | 0;
 $buffer = sp;
 $0 = HEAP32[(___errno_location() | 0) >> 2] | 0;
 $call3 = __ZNSt3__212_GLOBAL__N_124handle_strerror_r_returnEiPc(_strerror_r($ev, $buffer, 1024) | 0, $buffer) | 0;
 if (!(HEAP8[$call3 >> 0] | 0)) {
  HEAP32[$vararg_buffer >> 2] = $ev;
  _snprintf($buffer, 1024, 45099, $vararg_buffer) | 0;
  $error_message$0 = $buffer;
 } else $error_message$0 = $call3;
 HEAP32[(___errno_location() | 0) >> 2] = $0;
 HEAP32[$agg$result >> 2] = 0;
 HEAP32[$agg$result + 4 >> 2] = 0;
 HEAP32[$agg$result + 8 >> 2] = 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcm($agg$result, $error_message$0, __ZNSt3__211char_traitsIcE6lengthEPKc($error_message$0) | 0);
 STACKTOP = sp;
 return;
}

function __ZNSt3__26vectorIN8nlohmann10basic_jsonINS_3mapES0_NS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEbxydS7_NS1_14adl_serializerEEENS7_ISB_EEEC2ERKSD_($this, $__x) {
 $this = $this | 0;
 $__x = $__x | 0;
 var $__end_$i8 = 0, $sub$ptr$div$i = 0, $sub$ptr$sub$i = 0;
 HEAP32[$this >> 2] = 0;
 HEAP32[$this + 4 >> 2] = 0;
 HEAP32[$this + 8 >> 2] = 0;
 $__end_$i8 = $__x + 4 | 0;
 $sub$ptr$sub$i = (HEAP32[$__end_$i8 >> 2] | 0) - (HEAP32[$__x >> 2] | 0) | 0;
 $sub$ptr$div$i = $sub$ptr$sub$i >> 4;
 if ($sub$ptr$sub$i | 0) {
  __ZNSt3__26vectorIN8nlohmann10basic_jsonINS_3mapES0_NS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEbxydS7_NS1_14adl_serializerEEENS7_ISB_EEE11__vallocateEm($this, $sub$ptr$div$i);
  __ZNSt3__26vectorIN8nlohmann10basic_jsonINS_3mapES0_NS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEbxydS7_NS1_14adl_serializerEEENS7_ISB_EEE18__construct_at_endIPSB_EENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESH_SH_m($this, HEAP32[$__x >> 2] | 0, HEAP32[$__end_$i8 >> 2] | 0, $sub$ptr$div$i);
 }
 return;
}

function __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi($this, $info, $adjustedPtr, $path_below) {
 $this = $this | 0;
 $info = $info | 0;
 $adjustedPtr = $adjustedPtr | 0;
 $path_below = $path_below | 0;
 var $0 = 0, $dst_ptr_leading_to_static_ptr = 0, $number_to_static_ptr11 = 0, $path_dst_ptr_to_static_ptr6 = 0;
 $dst_ptr_leading_to_static_ptr = $info + 16 | 0;
 $0 = HEAP32[$dst_ptr_leading_to_static_ptr >> 2] | 0;
 do if (!$0) {
  HEAP32[$dst_ptr_leading_to_static_ptr >> 2] = $adjustedPtr;
  HEAP32[$info + 24 >> 2] = $path_below;
  HEAP32[$info + 36 >> 2] = 1;
 } else {
  if (($0 | 0) != ($adjustedPtr | 0)) {
   $number_to_static_ptr11 = $info + 36 | 0;
   HEAP32[$number_to_static_ptr11 >> 2] = (HEAP32[$number_to_static_ptr11 >> 2] | 0) + 1;
   HEAP32[$info + 24 >> 2] = 2;
   HEAP8[$info + 54 >> 0] = 1;
   break;
  }
  $path_dst_ptr_to_static_ptr6 = $info + 24 | 0;
  if ((HEAP32[$path_dst_ptr_to_static_ptr6 >> 2] | 0) == 2) HEAP32[$path_dst_ptr_to_static_ptr6 >> 2] = $path_below;
 } while (0);
 return;
}

function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm($this, $__b, $__e, $__iob, $__err, $__tm) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__tm = $__tm | 0;
 var $agg$tmp = 0, $agg$tmp$byval_copy = 0, $agg$tmp2 = 0, $agg$tmp2$byval_copy = 0, $call = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $agg$tmp2$byval_copy = sp + 12 | 0;
 $agg$tmp$byval_copy = sp + 8 | 0;
 $agg$tmp = sp + 4 | 0;
 $agg$tmp2 = sp;
 HEAP32[$agg$tmp >> 2] = HEAP32[$__b >> 2];
 HEAP32[$agg$tmp2 >> 2] = HEAP32[$__e >> 2];
 HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$agg$tmp2$byval_copy >> 2] = HEAP32[$agg$tmp2 >> 2];
 $call = __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($this, $agg$tmp$byval_copy, $agg$tmp2$byval_copy, $__iob, $__err, $__tm, 14896, 14928) | 0;
 STACKTOP = sp;
 return $call | 0;
}

function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm($this, $__b, $__e, $__iob, $__err, $__tm) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__tm = $__tm | 0;
 var $agg$tmp = 0, $agg$tmp$byval_copy = 0, $agg$tmp2 = 0, $agg$tmp2$byval_copy = 0, $call = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $agg$tmp2$byval_copy = sp + 12 | 0;
 $agg$tmp$byval_copy = sp + 8 | 0;
 $agg$tmp = sp + 4 | 0;
 $agg$tmp2 = sp;
 HEAP32[$agg$tmp >> 2] = HEAP32[$__b >> 2];
 HEAP32[$agg$tmp2 >> 2] = HEAP32[$__e >> 2];
 HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$agg$tmp2$byval_copy >> 2] = HEAP32[$agg$tmp2 >> 2];
 $call = __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($this, $agg$tmp$byval_copy, $agg$tmp2$byval_copy, $__iob, $__err, $__tm, 43597, 43605) | 0;
 STACKTOP = sp;
 return $call | 0;
}

function __ZNSt3__210shared_ptrIN8nlohmann6detail20input_stream_adapterEE11make_sharedIJRNS_13basic_istreamIcNS_11char_traitsIcEEEEEEES4_DpOT_($agg$result, $__args) {
 $agg$result = $agg$result | 0;
 $__args = $__args | 0;
 var $__value_$i$i$i12 = 0, $call2$i$i = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $vararg_buffer = sp;
 $call2$i$i = __Znwm(24) | 0;
 HEAP32[$call2$i$i + 4 >> 2] = 0;
 HEAP32[$call2$i$i + 8 >> 2] = 0;
 HEAP32[$call2$i$i >> 2] = 17788;
 $__value_$i$i$i12 = $call2$i$i + 12 | 0;
 __ZN8nlohmann6detail20input_stream_adapterC2ERNSt3__213basic_istreamIcNS2_11char_traitsIcEEEE($__value_$i$i$i12, $__args);
 HEAP32[$agg$result >> 2] = $__value_$i$i$i12;
 HEAP32[$agg$result + 4 >> 2] = $call2$i$i;
 HEAP32[$vararg_buffer >> 2] = $__value_$i$i$i12;
 HEAP32[$vararg_buffer + 4 >> 2] = $__value_$i$i$i12;
 __ZNSt3__210shared_ptrIN8nlohmann6detail20input_stream_adapterEE18__enable_weak_thisEz($agg$result, $vararg_buffer);
 STACKTOP = sp;
 return;
}

function __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwm($this, $__s, $__sz) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__sz = $__sz | 0;
 var $__p$0 = 0, $and$i$i = 0, $call$i$i$i = 0, $ref$tmp = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $ref$tmp = sp;
 if ($__sz >>> 0 > 1073741807) __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($this);
 do if ($__sz >>> 0 < 2) {
  HEAP8[$this + 8 + 3 >> 0] = $__sz;
  $__p$0 = $this;
 } else {
  $and$i$i = $__sz + 4 & -4;
  if ($and$i$i >>> 0 > 1073741823) _abort(); else {
   $call$i$i$i = __Znwm($and$i$i << 2) | 0;
   HEAP32[$this >> 2] = $call$i$i$i;
   HEAP32[$this + 8 >> 2] = $and$i$i | -2147483648;
   HEAP32[$this + 4 >> 2] = $__sz;
   $__p$0 = $call$i$i$i;
   break;
  }
 } while (0);
 __ZNSt3__211char_traitsIwE4copyEPwPKwm($__p$0, $__s, $__sz) | 0;
 HEAP32[$ref$tmp >> 2] = 0;
 __ZNSt3__211char_traitsIwE6assignERwRKw($__p$0 + ($__sz << 2) | 0, $ref$tmp);
 STACKTOP = sp;
 return;
}

function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRe($this, $__b, $__e, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $agg$tmp = 0, $agg$tmp$byval_copy = 0, $agg$tmp2 = 0, $agg$tmp2$byval_copy = 0, $call = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $agg$tmp2$byval_copy = sp + 12 | 0;
 $agg$tmp$byval_copy = sp + 8 | 0;
 $agg$tmp = sp + 4 | 0;
 $agg$tmp2 = sp;
 HEAP32[$agg$tmp >> 2] = HEAP32[$__b >> 2];
 HEAP32[$agg$tmp2 >> 2] = HEAP32[$__e >> 2];
 HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$agg$tmp2$byval_copy >> 2] = HEAP32[$agg$tmp2 >> 2];
 $call = __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIeEES4_S4_S4_RNS_8ios_baseERjRT_($this, $agg$tmp$byval_copy, $agg$tmp2$byval_copy, $__iob, $__err, $__v) | 0;
 STACKTOP = sp;
 return $call | 0;
}

function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRd($this, $__b, $__e, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $agg$tmp = 0, $agg$tmp$byval_copy = 0, $agg$tmp2 = 0, $agg$tmp2$byval_copy = 0, $call = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $agg$tmp2$byval_copy = sp + 12 | 0;
 $agg$tmp$byval_copy = sp + 8 | 0;
 $agg$tmp = sp + 4 | 0;
 $agg$tmp2 = sp;
 HEAP32[$agg$tmp >> 2] = HEAP32[$__b >> 2];
 HEAP32[$agg$tmp2 >> 2] = HEAP32[$__e >> 2];
 HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$agg$tmp2$byval_copy >> 2] = HEAP32[$agg$tmp2 >> 2];
 $call = __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIdEES4_S4_S4_RNS_8ios_baseERjRT_($this, $agg$tmp$byval_copy, $agg$tmp2$byval_copy, $__iob, $__err, $__v) | 0;
 STACKTOP = sp;
 return $call | 0;
}

function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRf($this, $__b, $__e, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $agg$tmp = 0, $agg$tmp$byval_copy = 0, $agg$tmp2 = 0, $agg$tmp2$byval_copy = 0, $call = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $agg$tmp2$byval_copy = sp + 12 | 0;
 $agg$tmp$byval_copy = sp + 8 | 0;
 $agg$tmp = sp + 4 | 0;
 $agg$tmp2 = sp;
 HEAP32[$agg$tmp >> 2] = HEAP32[$__b >> 2];
 HEAP32[$agg$tmp2 >> 2] = HEAP32[$__e >> 2];
 HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$agg$tmp2$byval_copy >> 2] = HEAP32[$agg$tmp2 >> 2];
 $call = __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIfEES4_S4_S4_RNS_8ios_baseERjRT_($this, $agg$tmp$byval_copy, $agg$tmp2$byval_copy, $__iob, $__err, $__v) | 0;
 STACKTOP = sp;
 return $call | 0;
}

function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRe($this, $__b, $__e, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $agg$tmp = 0, $agg$tmp$byval_copy = 0, $agg$tmp2 = 0, $agg$tmp2$byval_copy = 0, $call = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $agg$tmp2$byval_copy = sp + 12 | 0;
 $agg$tmp$byval_copy = sp + 8 | 0;
 $agg$tmp = sp + 4 | 0;
 $agg$tmp2 = sp;
 HEAP32[$agg$tmp >> 2] = HEAP32[$__b >> 2];
 HEAP32[$agg$tmp2 >> 2] = HEAP32[$__e >> 2];
 HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$agg$tmp2$byval_copy >> 2] = HEAP32[$agg$tmp2 >> 2];
 $call = __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIeEES4_S4_S4_RNS_8ios_baseERjRT_($this, $agg$tmp$byval_copy, $agg$tmp2$byval_copy, $__iob, $__err, $__v) | 0;
 STACKTOP = sp;
 return $call | 0;
}

function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRd($this, $__b, $__e, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $agg$tmp = 0, $agg$tmp$byval_copy = 0, $agg$tmp2 = 0, $agg$tmp2$byval_copy = 0, $call = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $agg$tmp2$byval_copy = sp + 12 | 0;
 $agg$tmp$byval_copy = sp + 8 | 0;
 $agg$tmp = sp + 4 | 0;
 $agg$tmp2 = sp;
 HEAP32[$agg$tmp >> 2] = HEAP32[$__b >> 2];
 HEAP32[$agg$tmp2 >> 2] = HEAP32[$__e >> 2];
 HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$agg$tmp2$byval_copy >> 2] = HEAP32[$agg$tmp2 >> 2];
 $call = __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIdEES4_S4_S4_RNS_8ios_baseERjRT_($this, $agg$tmp$byval_copy, $agg$tmp2$byval_copy, $__iob, $__err, $__v) | 0;
 STACKTOP = sp;
 return $call | 0;
}

function __ZN8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEaSESB_($this, $other) {
 $this = $this | 0;
 $other = $other | 0;
 var $0 = 0, $10 = 0, $15 = 0, $16 = 0, $2 = 0, $20 = 0, $3 = 0, $5 = 0, $8 = 0, $9 = 0;
 __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE16assert_invariantEv($other);
 $0 = HEAP8[$this >> 0] | 0;
 HEAP8[$this >> 0] = HEAP8[$other >> 0] | 0;
 HEAP8[$other >> 0] = $0;
 $2 = $this + 8 | 0;
 $3 = $2;
 $5 = HEAP32[$3 >> 2] | 0;
 $8 = HEAP32[$3 + 4 >> 2] | 0;
 $9 = $other + 8 | 0;
 $10 = $9;
 $15 = HEAP32[$10 + 4 >> 2] | 0;
 $16 = $2;
 HEAP32[$16 >> 2] = HEAP32[$10 >> 2];
 HEAP32[$16 + 4 >> 2] = $15;
 $20 = $9;
 HEAP32[$20 >> 2] = $5;
 HEAP32[$20 + 4 >> 2] = $8;
 __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE16assert_invariantEv($this);
 return $this | 0;
}
function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRf($this, $__b, $__e, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $agg$tmp = 0, $agg$tmp$byval_copy = 0, $agg$tmp2 = 0, $agg$tmp2$byval_copy = 0, $call = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $agg$tmp2$byval_copy = sp + 12 | 0;
 $agg$tmp$byval_copy = sp + 8 | 0;
 $agg$tmp = sp + 4 | 0;
 $agg$tmp2 = sp;
 HEAP32[$agg$tmp >> 2] = HEAP32[$__b >> 2];
 HEAP32[$agg$tmp2 >> 2] = HEAP32[$__e >> 2];
 HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$agg$tmp2$byval_copy >> 2] = HEAP32[$agg$tmp2 >> 2];
 $call = __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIfEES4_S4_S4_RNS_8ios_baseERjRT_($this, $agg$tmp$byval_copy, $agg$tmp2$byval_copy, $__iob, $__err, $__v) | 0;
 STACKTOP = sp;
 return $call | 0;
}

function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_($this, $__b, $__e, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $agg$tmp = 0, $agg$tmp$byval_copy = 0, $agg$tmp2 = 0, $agg$tmp2$byval_copy = 0, $call = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $agg$tmp2$byval_copy = sp + 12 | 0;
 $agg$tmp$byval_copy = sp + 8 | 0;
 $agg$tmp = sp + 4 | 0;
 $agg$tmp2 = sp;
 HEAP32[$agg$tmp >> 2] = HEAP32[$__b >> 2];
 HEAP32[$agg$tmp2 >> 2] = HEAP32[$__e >> 2];
 HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$agg$tmp2$byval_copy >> 2] = HEAP32[$agg$tmp2 >> 2];
 $call = __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedIjEES4_S4_S4_RNS_8ios_baseERjRT_($this, $agg$tmp$byval_copy, $agg$tmp2$byval_copy, $__iob, $__err, $__v) | 0;
 STACKTOP = sp;
 return $call | 0;
}

function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_($this, $__b, $__e, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $agg$tmp = 0, $agg$tmp$byval_copy = 0, $agg$tmp2 = 0, $agg$tmp2$byval_copy = 0, $call = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $agg$tmp2$byval_copy = sp + 12 | 0;
 $agg$tmp$byval_copy = sp + 8 | 0;
 $agg$tmp = sp + 4 | 0;
 $agg$tmp2 = sp;
 HEAP32[$agg$tmp >> 2] = HEAP32[$__b >> 2];
 HEAP32[$agg$tmp2 >> 2] = HEAP32[$__e >> 2];
 HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$agg$tmp2$byval_copy >> 2] = HEAP32[$agg$tmp2 >> 2];
 $call = __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedIjEES4_S4_S4_RNS_8ios_baseERjRT_($this, $agg$tmp$byval_copy, $agg$tmp2$byval_copy, $__iob, $__err, $__v) | 0;
 STACKTOP = sp;
 return $call | 0;
}

function __ZN8nlohmann6detail5lexerINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE8skip_bomEv($this) {
 $this = $this | 0;
 var $retval$0 = 0;
 if ((__ZN8nlohmann6detail5lexerINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE3getEv($this) | 0) == 239) if ((__ZN8nlohmann6detail5lexerINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE3getEv($this) | 0) == 187) $retval$0 = (__ZN8nlohmann6detail5lexerINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE3getEv($this) | 0) == 191; else $retval$0 = 0; else {
  __ZN8nlohmann6detail5lexerINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE5ungetEv($this);
  $retval$0 = 1;
 }
 return $retval$0 | 0;
}

function __ZNSt3__23mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN4tson8PropertyENS_4lessIS6_EENS4_INS_4pairIKS6_S8_EEEEEixERSC_($this, $__k) {
 $this = $this | 0;
 $__k = $__k | 0;
 var $ref$tmp = 0, $ref$tmp2 = 0, $second = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $ref$tmp = sp + 8 | 0;
 $ref$tmp2 = sp;
 HEAP32[$ref$tmp2 >> 2] = $__k;
 __ZNSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN4tson8PropertyEEENS_19__map_value_compareIS7_SA_NS_4lessIS7_EELb1EEENS5_ISA_EEE25__emplace_unique_key_argsIS7_JRKNS_21piecewise_construct_tENS_5tupleIJRKS7_EEENSL_IJEEEEEENS_4pairINS_15__tree_iteratorISA_PNS_11__tree_nodeISA_PvEElEEbEERKT_DpOT0_($ref$tmp, $this, $__k, 62140, $ref$tmp2, sp + 16 | 0);
 $second = (__ZNSt3__29__launderINS_4pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN4tson8PropertyEEEEEPT_SD_((HEAP32[$ref$tmp >> 2] | 0) + 16 | 0) | 0) + 12 | 0;
 STACKTOP = sp;
 return $second | 0;
}

function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRy($this, $__b, $__e, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $agg$tmp = 0, $agg$tmp$byval_copy = 0, $agg$tmp2 = 0, $agg$tmp2$byval_copy = 0, $call = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $agg$tmp2$byval_copy = sp + 12 | 0;
 $agg$tmp$byval_copy = sp + 8 | 0;
 $agg$tmp = sp + 4 | 0;
 $agg$tmp2 = sp;
 HEAP32[$agg$tmp >> 2] = HEAP32[$__b >> 2];
 HEAP32[$agg$tmp2 >> 2] = HEAP32[$__e >> 2];
 HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$agg$tmp2$byval_copy >> 2] = HEAP32[$agg$tmp2 >> 2];
 $call = __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedIyEES4_S4_S4_RNS_8ios_baseERjRT_($this, $agg$tmp$byval_copy, $agg$tmp2$byval_copy, $__iob, $__err, $__v) | 0;
 STACKTOP = sp;
 return $call | 0;
}

function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRt($this, $__b, $__e, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $agg$tmp = 0, $agg$tmp$byval_copy = 0, $agg$tmp2 = 0, $agg$tmp2$byval_copy = 0, $call = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $agg$tmp2$byval_copy = sp + 12 | 0;
 $agg$tmp$byval_copy = sp + 8 | 0;
 $agg$tmp = sp + 4 | 0;
 $agg$tmp2 = sp;
 HEAP32[$agg$tmp >> 2] = HEAP32[$__b >> 2];
 HEAP32[$agg$tmp2 >> 2] = HEAP32[$__e >> 2];
 HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$agg$tmp2$byval_copy >> 2] = HEAP32[$agg$tmp2 >> 2];
 $call = __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedItEES4_S4_S4_RNS_8ios_baseERjRT_($this, $agg$tmp$byval_copy, $agg$tmp2$byval_copy, $__iob, $__err, $__v) | 0;
 STACKTOP = sp;
 return $call | 0;
}

function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRm($this, $__b, $__e, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $agg$tmp = 0, $agg$tmp$byval_copy = 0, $agg$tmp2 = 0, $agg$tmp2$byval_copy = 0, $call = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $agg$tmp2$byval_copy = sp + 12 | 0;
 $agg$tmp$byval_copy = sp + 8 | 0;
 $agg$tmp = sp + 4 | 0;
 $agg$tmp2 = sp;
 HEAP32[$agg$tmp >> 2] = HEAP32[$__b >> 2];
 HEAP32[$agg$tmp2 >> 2] = HEAP32[$__e >> 2];
 HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$agg$tmp2$byval_copy >> 2] = HEAP32[$agg$tmp2 >> 2];
 $call = __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedImEES4_S4_S4_RNS_8ios_baseERjRT_($this, $agg$tmp$byval_copy, $agg$tmp2$byval_copy, $__iob, $__err, $__v) | 0;
 STACKTOP = sp;
 return $call | 0;
}

function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRy($this, $__b, $__e, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $agg$tmp = 0, $agg$tmp$byval_copy = 0, $agg$tmp2 = 0, $agg$tmp2$byval_copy = 0, $call = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $agg$tmp2$byval_copy = sp + 12 | 0;
 $agg$tmp$byval_copy = sp + 8 | 0;
 $agg$tmp = sp + 4 | 0;
 $agg$tmp2 = sp;
 HEAP32[$agg$tmp >> 2] = HEAP32[$__b >> 2];
 HEAP32[$agg$tmp2 >> 2] = HEAP32[$__e >> 2];
 HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$agg$tmp2$byval_copy >> 2] = HEAP32[$agg$tmp2 >> 2];
 $call = __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedIyEES4_S4_S4_RNS_8ios_baseERjRT_($this, $agg$tmp$byval_copy, $agg$tmp2$byval_copy, $__iob, $__err, $__v) | 0;
 STACKTOP = sp;
 return $call | 0;
}

function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRt($this, $__b, $__e, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $agg$tmp = 0, $agg$tmp$byval_copy = 0, $agg$tmp2 = 0, $agg$tmp2$byval_copy = 0, $call = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $agg$tmp2$byval_copy = sp + 12 | 0;
 $agg$tmp$byval_copy = sp + 8 | 0;
 $agg$tmp = sp + 4 | 0;
 $agg$tmp2 = sp;
 HEAP32[$agg$tmp >> 2] = HEAP32[$__b >> 2];
 HEAP32[$agg$tmp2 >> 2] = HEAP32[$__e >> 2];
 HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$agg$tmp2$byval_copy >> 2] = HEAP32[$agg$tmp2 >> 2];
 $call = __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedItEES4_S4_S4_RNS_8ios_baseERjRT_($this, $agg$tmp$byval_copy, $agg$tmp2$byval_copy, $__iob, $__err, $__v) | 0;
 STACKTOP = sp;
 return $call | 0;
}

function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRm($this, $__b, $__e, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $agg$tmp = 0, $agg$tmp$byval_copy = 0, $agg$tmp2 = 0, $agg$tmp2$byval_copy = 0, $call = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $agg$tmp2$byval_copy = sp + 12 | 0;
 $agg$tmp$byval_copy = sp + 8 | 0;
 $agg$tmp = sp + 4 | 0;
 $agg$tmp2 = sp;
 HEAP32[$agg$tmp >> 2] = HEAP32[$__b >> 2];
 HEAP32[$agg$tmp2 >> 2] = HEAP32[$__e >> 2];
 HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$agg$tmp2$byval_copy >> 2] = HEAP32[$agg$tmp2 >> 2];
 $call = __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedImEES4_S4_S4_RNS_8ios_baseERjRT_($this, $agg$tmp$byval_copy, $agg$tmp2$byval_copy, $__iob, $__err, $__v) | 0;
 STACKTOP = sp;
 return $call | 0;
}

function __ZN7EnemigoC2ENSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEERK7Vector2($this, $text, $enemigoPos) {
 $this = $this | 0;
 $text = $text | 0;
 $enemigoPos = $enemigoPos | 0;
 var $0 = 0, $5 = 0, $6 = 0, $cond$i$i$i = 0, $enemigo2 = 0, $ref$tmp = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $ref$tmp = sp;
 HEAP32[$this + 36 >> 2] = 100;
 $0 = $enemigoPos;
 $5 = HEAP32[$0 + 4 >> 2] | 0;
 $6 = $this + 60 | 0;
 HEAP32[$6 >> 2] = HEAP32[$0 >> 2];
 HEAP32[$6 + 4 >> 2] = $5;
 if ((HEAP8[$text + 11 >> 0] | 0) < 0) $cond$i$i$i = HEAP32[$text >> 2] | 0; else $cond$i$i$i = $text;
 _LoadTexture($ref$tmp, $cond$i$i$i);
 $enemigo2 = $this + 16 | 0;
 HEAP32[$enemigo2 >> 2] = HEAP32[$ref$tmp >> 2];
 HEAP32[$enemigo2 + 4 >> 2] = HEAP32[$ref$tmp + 4 >> 2];
 HEAP32[$enemigo2 + 8 >> 2] = HEAP32[$ref$tmp + 8 >> 2];
 HEAP32[$enemigo2 + 12 >> 2] = HEAP32[$ref$tmp + 12 >> 2];
 HEAP32[$enemigo2 + 16 >> 2] = HEAP32[$ref$tmp + 16 >> 2];
 STACKTOP = sp;
 return;
}

function __ZNSt3__2plIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_12basic_stringIT_T0_T1_EEPKS6_RKS9_($agg$result, $__lhs, $__rhs) {
 $agg$result = $agg$result | 0;
 $__lhs = $__lhs | 0;
 $__rhs = $__rhs | 0;
 var $0 = 0, $__i$0$i$i = 0, $__size_$i$i = 0, $call = 0, $cond$i = 0;
 HEAP32[$agg$result >> 2] = 0;
 HEAP32[$agg$result + 4 >> 2] = 0;
 HEAP32[$agg$result + 8 >> 2] = 0;
 $__i$0$i$i = 0;
 while (1) {
  if (($__i$0$i$i | 0) == 3) break;
  HEAP32[$agg$result + ($__i$0$i$i << 2) >> 2] = 0;
  $__i$0$i$i = $__i$0$i$i + 1 | 0;
 }
 $call = __ZNSt3__211char_traitsIcE6lengthEPKc($__lhs) | 0;
 $__size_$i$i = $__rhs + 11 | 0;
 $0 = HEAP8[$__size_$i$i >> 0] | 0;
 $cond$i = $0 << 24 >> 24 < 0 ? HEAP32[$__rhs + 4 >> 2] | 0 : $0 & 255;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcmm($agg$result, $__lhs, $call, $cond$i + $call | 0);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcm($agg$result, (HEAP8[$__size_$i$i >> 0] | 0) < 0 ? HEAP32[$__rhs >> 2] | 0 : $__rhs, $cond$i) | 0;
 return;
}

function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRx($this, $__b, $__e, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $agg$tmp = 0, $agg$tmp$byval_copy = 0, $agg$tmp2 = 0, $agg$tmp2$byval_copy = 0, $call = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $agg$tmp2$byval_copy = sp + 12 | 0;
 $agg$tmp$byval_copy = sp + 8 | 0;
 $agg$tmp = sp + 4 | 0;
 $agg$tmp2 = sp;
 HEAP32[$agg$tmp >> 2] = HEAP32[$__b >> 2];
 HEAP32[$agg$tmp2 >> 2] = HEAP32[$__e >> 2];
 HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$agg$tmp2$byval_copy >> 2] = HEAP32[$agg$tmp2 >> 2];
 $call = __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__do_get_signedIxEES4_S4_S4_RNS_8ios_baseERjRT_($this, $agg$tmp$byval_copy, $agg$tmp2$byval_copy, $__iob, $__err, $__v) | 0;
 STACKTOP = sp;
 return $call | 0;
}

function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRl($this, $__b, $__e, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $agg$tmp = 0, $agg$tmp$byval_copy = 0, $agg$tmp2 = 0, $agg$tmp2$byval_copy = 0, $call = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $agg$tmp2$byval_copy = sp + 12 | 0;
 $agg$tmp$byval_copy = sp + 8 | 0;
 $agg$tmp = sp + 4 | 0;
 $agg$tmp2 = sp;
 HEAP32[$agg$tmp >> 2] = HEAP32[$__b >> 2];
 HEAP32[$agg$tmp2 >> 2] = HEAP32[$__e >> 2];
 HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$agg$tmp2$byval_copy >> 2] = HEAP32[$agg$tmp2 >> 2];
 $call = __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__do_get_signedIlEES4_S4_S4_RNS_8ios_baseERjRT_($this, $agg$tmp$byval_copy, $agg$tmp2$byval_copy, $__iob, $__err, $__v) | 0;
 STACKTOP = sp;
 return $call | 0;
}

function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRx($this, $__b, $__e, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $agg$tmp = 0, $agg$tmp$byval_copy = 0, $agg$tmp2 = 0, $agg$tmp2$byval_copy = 0, $call = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $agg$tmp2$byval_copy = sp + 12 | 0;
 $agg$tmp$byval_copy = sp + 8 | 0;
 $agg$tmp = sp + 4 | 0;
 $agg$tmp2 = sp;
 HEAP32[$agg$tmp >> 2] = HEAP32[$__b >> 2];
 HEAP32[$agg$tmp2 >> 2] = HEAP32[$__e >> 2];
 HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$agg$tmp2$byval_copy >> 2] = HEAP32[$agg$tmp2 >> 2];
 $call = __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__do_get_signedIxEES4_S4_S4_RNS_8ios_baseERjRT_($this, $agg$tmp$byval_copy, $agg$tmp2$byval_copy, $__iob, $__err, $__v) | 0;
 STACKTOP = sp;
 return $call | 0;
}

function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRl($this, $__b, $__e, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $agg$tmp = 0, $agg$tmp$byval_copy = 0, $agg$tmp2 = 0, $agg$tmp2$byval_copy = 0, $call = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $agg$tmp2$byval_copy = sp + 12 | 0;
 $agg$tmp$byval_copy = sp + 8 | 0;
 $agg$tmp = sp + 4 | 0;
 $agg$tmp2 = sp;
 HEAP32[$agg$tmp >> 2] = HEAP32[$__b >> 2];
 HEAP32[$agg$tmp2 >> 2] = HEAP32[$__e >> 2];
 HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$agg$tmp2$byval_copy >> 2] = HEAP32[$agg$tmp2 >> 2];
 $call = __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__do_get_signedIlEES4_S4_S4_RNS_8ios_baseERjRT_($this, $agg$tmp$byval_copy, $agg$tmp2$byval_copy, $__iob, $__err, $__v) | 0;
 STACKTOP = sp;
 return $call | 0;
}

function __ZN4tson5Layer8firstObjERKNSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE($this, $name) {
 $this = $this | 0;
 $name = $name | 0;
 var $$lcssa$i = 0, $$lcssa$i$ph = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $__end_$i4 = 0, $agg$tmp63 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $agg$tmp63 = sp;
 $0 = HEAP32[$this + 112 >> 2] | 0;
 $__end_$i4 = $this + 116 | 0;
 $1 = HEAP32[$__end_$i4 >> 2] | 0;
 HEAP32[$agg$tmp63 >> 2] = $name;
 if (($0 | 0) == ($1 | 0)) {
  $$lcssa$i = $0;
  $3 = $0;
 } else {
  $2 = $0;
  while (1) {
   if (__ZZN4tson5Layer8firstObjERKNSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEENKUlRKNS_6ObjectEE_clESC_($agg$tmp63, $2) | 0) {
    $$lcssa$i$ph = $2;
    break;
   }
   $2 = $2 + 140 | 0;
   if (($2 | 0) == ($1 | 0)) {
    $$lcssa$i$ph = $1;
    break;
   }
  }
  $$lcssa$i = $$lcssa$i$ph;
  $3 = HEAP32[$__end_$i4 >> 2] | 0;
 }
 STACKTOP = sp;
 return (($$lcssa$i | 0) == ($3 | 0) ? 0 : $$lcssa$i) | 0;
}

function _UpdateBuffersDefault() {
 var CSE$0 = 0, CSE$1 = 0, CSE$2 = 0;
 if ((HEAP32[47408 + ((HEAP32[14847] | 0) * 48 | 0) >> 2] | 0) <= 0) return;
 if (HEAP8[62144] & 1) FUNCTION_TABLE_vi[HEAP32[14851] & 255](HEAP32[47408 + ((HEAP32[14847] | 0) * 48 | 0) + 28 >> 2] | 0);
 _glBindBuffer(34962, HEAP32[47408 + ((HEAP32[14847] | 0) * 48 | 0) + 32 >> 2] | 0);
 CSE$0 = 47408 + ((HEAP32[14847] | 0) * 48 | 0) | 0;
 _glBufferSubData(34962, 0, (HEAP32[CSE$0 >> 2] | 0) * 12 | 0, HEAP32[CSE$0 + 12 >> 2] | 0);
 _glBindBuffer(34962, HEAP32[47408 + ((HEAP32[14847] | 0) * 48 | 0) + 32 + 4 >> 2] | 0);
 CSE$1 = 47408 + ((HEAP32[14847] | 0) * 48 | 0) | 0;
 _glBufferSubData(34962, 0, HEAP32[CSE$1 >> 2] << 3 | 0, HEAP32[CSE$1 + 16 >> 2] | 0);
 _glBindBuffer(34962, HEAP32[47408 + ((HEAP32[14847] | 0) * 48 | 0) + 32 + 8 >> 2] | 0);
 CSE$2 = 47408 + ((HEAP32[14847] | 0) * 48 | 0) | 0;
 _glBufferSubData(34962, 0, HEAP32[CSE$2 >> 2] << 2 | 0, HEAP32[CSE$2 + 20 >> 2] | 0);
 if (!(HEAP8[62144] & 1)) return;
 FUNCTION_TABLE_vi[HEAP32[14851] & 255](0);
 return;
}

function _stbi__refill_buffer($s) {
 $s = $s | 0;
 var $8 = 0, $n = 0, $s$addr = 0, sp = 0, CSE$0 = 0, CSE$1 = 0, CSE$2 = 0, CSE$3 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $s$addr = sp + 4 | 0;
 $n = sp;
 HEAP32[$s$addr >> 2] = $s;
 CSE$0 = HEAP32[$s$addr >> 2] | 0;
 HEAP32[$n >> 2] = FUNCTION_TABLE_iiii[HEAP32[CSE$0 + 16 >> 2] & 63](HEAP32[CSE$0 + 28 >> 2] | 0, CSE$0 + 40 | 0, HEAP32[CSE$0 + 36 >> 2] | 0) | 0;
 $8 = HEAP32[$s$addr >> 2] | 0;
 if (!(HEAP32[$n >> 2] | 0)) {
  HEAP32[$8 + 32 >> 2] = 0;
  CSE$1 = HEAP32[$s$addr >> 2] | 0;
  HEAP32[CSE$1 + 168 >> 2] = (CSE$1 | 0) + 40;
  CSE$2 = HEAP32[$s$addr >> 2] | 0;
  HEAP32[CSE$2 + 172 >> 2] = (CSE$2 | 0) + 40 + 1;
  HEAP8[HEAP32[(HEAP32[$s$addr >> 2] | 0) + 168 >> 2] >> 0] = 0;
  STACKTOP = sp;
  return;
 } else {
  HEAP32[(HEAP32[$s$addr >> 2] | 0) + 168 >> 2] = $8 + 40;
  CSE$3 = HEAP32[$s$addr >> 2] | 0;
  HEAP32[CSE$3 + 172 >> 2] = (CSE$3 | 0) + 40 + (HEAP32[$n >> 2] | 0);
  STACKTOP = sp;
  return;
 }
}

function _GifWriteCode($f, $stat, $code, $length) {
 $f = $f | 0;
 $stat = $stat | 0;
 $code = $code | 0;
 $length = $length | 0;
 var $code$addr = 0, $f$addr = 0, $ii = 0, $length$addr = 0, $stat$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $f$addr = sp + 16 | 0;
 $stat$addr = sp + 12 | 0;
 $code$addr = sp + 8 | 0;
 $length$addr = sp + 4 | 0;
 $ii = sp;
 HEAP32[$f$addr >> 2] = $f;
 HEAP32[$stat$addr >> 2] = $stat;
 HEAP32[$code$addr >> 2] = $code;
 HEAP32[$length$addr >> 2] = $length;
 HEAP32[$ii >> 2] = 0;
 while (1) {
  if ((HEAP32[$ii >> 2] | 0) >>> 0 >= (HEAP32[$length$addr >> 2] | 0) >>> 0) break;
  _GifWriteBit(HEAP32[$stat$addr >> 2] | 0, HEAP32[$code$addr >> 2] | 0);
  HEAP32[$code$addr >> 2] = (HEAP32[$code$addr >> 2] | 0) >>> 1;
  if ((HEAP32[(HEAP32[$stat$addr >> 2] | 0) + 4 >> 2] | 0) == 255) _GifWriteChunk(HEAP32[$f$addr >> 2] | 0, HEAP32[$stat$addr >> 2] | 0);
  HEAP32[$ii >> 2] = (HEAP32[$ii >> 2] | 0) + 1;
 }
 STACKTOP = sp;
 return;
}

function __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEmw($this, $__n, $__c) {
 $this = $this | 0;
 $__n = $__n | 0;
 $__c = $__c | 0;
 var $__p$0 = 0, $and$i$i = 0, $call$i$i$i = 0, $ref$tmp = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $ref$tmp = sp;
 if ($__n >>> 0 > 1073741807) __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($this);
 do if ($__n >>> 0 < 2) {
  HEAP8[$this + 8 + 3 >> 0] = $__n;
  $__p$0 = $this;
 } else {
  $and$i$i = $__n + 4 & -4;
  if ($and$i$i >>> 0 > 1073741823) _abort(); else {
   $call$i$i$i = __Znwm($and$i$i << 2) | 0;
   HEAP32[$this >> 2] = $call$i$i$i;
   HEAP32[$this + 8 >> 2] = $and$i$i | -2147483648;
   HEAP32[$this + 4 >> 2] = $__n;
   $__p$0 = $call$i$i$i;
   break;
  }
 } while (0);
 __ZNSt3__211char_traitsIwE6assignEPwmw($__p$0, $__n, $__c) | 0;
 HEAP32[$ref$tmp >> 2] = 0;
 __ZNSt3__211char_traitsIwE6assignERwRKw($__p$0 + ($__n << 2) | 0, $ref$tmp);
 STACKTOP = sp;
 return;
}

function __ZN4tson3Map8getLayerERKNSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE($this, $name) {
 $this = $this | 0;
 $name = $name | 0;
 var $$lcssa$i = 0, $$lcssa$i$ph = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $__end_$i4 = 0, $agg$tmp63 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $agg$tmp63 = sp;
 $0 = HEAP32[$this + 20 >> 2] | 0;
 $__end_$i4 = $this + 24 | 0;
 $1 = HEAP32[$__end_$i4 >> 2] | 0;
 HEAP32[$agg$tmp63 >> 2] = $name;
 if (($0 | 0) == ($1 | 0)) {
  $$lcssa$i = $0;
  $3 = $0;
 } else {
  $2 = $0;
  while (1) {
   if (__ZZN4tson3Map8getLayerERKNSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEENKUlRKNS_5LayerEE_clESC_($agg$tmp63, $2) | 0) {
    $$lcssa$i$ph = $2;
    break;
   }
   $2 = $2 + 220 | 0;
   if (($2 | 0) == ($1 | 0)) {
    $$lcssa$i$ph = $1;
    break;
   }
  }
  $$lcssa$i = $$lcssa$i$ph;
  $3 = HEAP32[$__end_$i4 >> 2] | 0;
 }
 STACKTOP = sp;
 return (($$lcssa$i | 0) == ($3 | 0) ? 0 : $$lcssa$i) | 0;
}

function __ZN8nlohmann6detail5lexerINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE12scan_literalEPKcmNSE_10token_typeE($this, $literal_text, $length, $return_type) {
 $this = $this | 0;
 $literal_text = $literal_text | 0;
 $length = $length | 0;
 $return_type = $return_type | 0;
 var $3 = 0, $call = 0, $i$06 = 0;
 if ((HEAP32[$this + 8 >> 2] | 0) != (HEAP8[$literal_text >> 0] | 0)) ___assert_fail(27882, 22221, 8197, 27909);
 L4 : do if ($length >>> 0 > 1) {
  $i$06 = 1;
  while (1) {
   $call = __ZN8nlohmann6detail5lexerINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE3getEv($this) | 0;
   if (($call | 0) != (HEAP8[$literal_text + $i$06 >> 0] | 0)) break;
   $i$06 = $i$06 + 1 | 0;
   if ($i$06 >>> 0 >= $length >>> 0) {
    $3 = $return_type;
    break L4;
   }
  }
  HEAP32[$this + 52 >> 2] = 24673;
  $3 = 14;
 } else $3 = $return_type; while (0);
 return $3 | 0;
}

function _WindowDropCallback($window, $count, $paths) {
 $window = $window | 0;
 $count = $count | 0;
 $paths = $paths | 0;
 var $call1 = 0, $count$addr = 0, $i = 0, $paths$addr = 0, sp = 0, CSE$0 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $count$addr = sp + 8 | 0;
 $paths$addr = sp + 4 | 0;
 $i = sp;
 HEAP32[sp + 12 >> 2] = $window;
 HEAP32[$count$addr >> 2] = $count;
 HEAP32[$paths$addr >> 2] = $paths;
 _ClearDroppedFiles();
 HEAP32[14983] = _malloc(HEAP32[$count$addr >> 2] << 2) | 0;
 HEAP32[$i >> 2] = 0;
 while (1) {
  if ((HEAP32[$i >> 2] | 0) >= (HEAP32[$count$addr >> 2] | 0)) break;
  $call1 = _malloc(512) | 0;
  HEAP32[(HEAP32[14983] | 0) + (HEAP32[$i >> 2] << 2) >> 2] = $call1;
  CSE$0 = HEAP32[$i >> 2] << 2 | 0;
  _strcpy(HEAP32[(HEAP32[14983] | 0) + CSE$0 >> 2] | 0, HEAP32[(HEAP32[$paths$addr >> 2] | 0) + CSE$0 >> 2] | 0) | 0;
  HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
 }
 HEAP32[14984] = HEAP32[$count$addr >> 2];
 STACKTOP = sp;
 return;
}

function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm($this, $__b, $__e, $__iob, $__err, $__tm) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__tm = $__tm | 0;
 var $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call$i = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $agg$tmp$byval_copy = sp + 4 | 0;
 $agg$tmp = sp;
 __ZNKSt3__28ios_base6getlocEv($agg$tmp$byval_copy, $__iob);
 $call$i = __ZNKSt3__26locale9use_facetERNS0_2idE($agg$tmp$byval_copy, 61248) | 0;
 __ZNSt3__26localeD2Ev($agg$tmp$byval_copy);
 HEAP32[$agg$tmp >> 2] = HEAP32[$__e >> 2];
 HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIwEE($this, $__tm + 16 | 0, $__b, $agg$tmp$byval_copy, $__err, $call$i);
 STACKTOP = sp;
 return HEAP32[$__b >> 2] | 0;
}

function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm($this, $__b, $__e, $__iob, $__err, $__tm) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__tm = $__tm | 0;
 var $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call$i = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $agg$tmp$byval_copy = sp + 4 | 0;
 $agg$tmp = sp;
 __ZNKSt3__28ios_base6getlocEv($agg$tmp$byval_copy, $__iob);
 $call$i = __ZNKSt3__26locale9use_facetERNS0_2idE($agg$tmp$byval_copy, 61248) | 0;
 __ZNSt3__26localeD2Ev($agg$tmp$byval_copy);
 HEAP32[$agg$tmp >> 2] = HEAP32[$__e >> 2];
 HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIwEE($this, $__tm + 24 | 0, $__b, $agg$tmp$byval_copy, $__err, $call$i);
 STACKTOP = sp;
 return HEAP32[$__b >> 2] | 0;
}

function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm($this, $__b, $__e, $__iob, $__err, $__tm) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__tm = $__tm | 0;
 var $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call$i = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $agg$tmp$byval_copy = sp + 4 | 0;
 $agg$tmp = sp;
 __ZNKSt3__28ios_base6getlocEv($agg$tmp$byval_copy, $__iob);
 $call$i = __ZNKSt3__26locale9use_facetERNS0_2idE($agg$tmp$byval_copy, 61216) | 0;
 __ZNSt3__26localeD2Ev($agg$tmp$byval_copy);
 HEAP32[$agg$tmp >> 2] = HEAP32[$__e >> 2];
 HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIcEE($this, $__tm + 16 | 0, $__b, $agg$tmp$byval_copy, $__err, $call$i);
 STACKTOP = sp;
 return HEAP32[$__b >> 2] | 0;
}

function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm($this, $__b, $__e, $__iob, $__err, $__tm) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__tm = $__tm | 0;
 var $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call$i = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $agg$tmp$byval_copy = sp + 4 | 0;
 $agg$tmp = sp;
 __ZNKSt3__28ios_base6getlocEv($agg$tmp$byval_copy, $__iob);
 $call$i = __ZNKSt3__26locale9use_facetERNS0_2idE($agg$tmp$byval_copy, 61216) | 0;
 __ZNSt3__26localeD2Ev($agg$tmp$byval_copy);
 HEAP32[$agg$tmp >> 2] = HEAP32[$__e >> 2];
 HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIcEE($this, $__tm + 24 | 0, $__b, $agg$tmp$byval_copy, $__err, $call$i);
 STACKTOP = sp;
 return HEAP32[$__b >> 2] | 0;
}

function __ZNSt3__26__treeINS_12__value_typeIiPN4tson4TileEEENS_19__map_value_compareIiS5_NS_4lessIiEELb1EEENS_9allocatorIS5_EEEaSERKSC_($this, $__t) {
 $this = $this | 0;
 $__t = $__t | 0;
 var $agg$tmp = 0, $agg$tmp$byval_copy = 0, $agg$tmp4 = 0, $agg$tmp4$byval_copy = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $agg$tmp4$byval_copy = sp + 12 | 0;
 $agg$tmp$byval_copy = sp + 8 | 0;
 $agg$tmp = sp + 4 | 0;
 $agg$tmp4 = sp;
 if (($this | 0) != ($__t | 0)) {
  HEAP32[$agg$tmp >> 2] = HEAP32[$__t >> 2];
  HEAP32[$agg$tmp4 >> 2] = $__t + 4;
  HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
  HEAP32[$agg$tmp4$byval_copy >> 2] = HEAP32[$agg$tmp4 >> 2];
  __ZNSt3__26__treeINS_12__value_typeIiPN4tson4TileEEENS_19__map_value_compareIiS5_NS_4lessIiEELb1EEENS_9allocatorIS5_EEE14__assign_multiINS_21__tree_const_iteratorIS5_PNS_11__tree_nodeIS5_PvEElEEEEvT_SK_($this, $agg$tmp$byval_copy, $agg$tmp4$byval_copy);
 }
 STACKTOP = sp;
 return $this | 0;
}

function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm($this, $__b, $__e, $__iob, $__err, $__tm) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__tm = $__tm | 0;
 var $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call$i = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $agg$tmp$byval_copy = sp + 4 | 0;
 $agg$tmp = sp;
 __ZNKSt3__28ios_base6getlocEv($agg$tmp$byval_copy, $__iob);
 $call$i = __ZNKSt3__26locale9use_facetERNS0_2idE($agg$tmp$byval_copy, 61248) | 0;
 __ZNSt3__26localeD2Ev($agg$tmp$byval_copy);
 HEAP32[$agg$tmp >> 2] = HEAP32[$__e >> 2];
 HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIwEE($this, $__tm + 20 | 0, $__b, $agg$tmp$byval_copy, $__err, $call$i);
 STACKTOP = sp;
 return HEAP32[$__b >> 2] | 0;
}

function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm($this, $__b, $__e, $__iob, $__err, $__tm) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__tm = $__tm | 0;
 var $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call$i = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $agg$tmp$byval_copy = sp + 4 | 0;
 $agg$tmp = sp;
 __ZNKSt3__28ios_base6getlocEv($agg$tmp$byval_copy, $__iob);
 $call$i = __ZNKSt3__26locale9use_facetERNS0_2idE($agg$tmp$byval_copy, 61216) | 0;
 __ZNSt3__26localeD2Ev($agg$tmp$byval_copy);
 HEAP32[$agg$tmp >> 2] = HEAP32[$__e >> 2];
 HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIcEE($this, $__tm + 20 | 0, $__b, $agg$tmp$byval_copy, $__err, $call$i);
 STACKTOP = sp;
 return HEAP32[$__b >> 2] | 0;
}

function __ZNKSt3__27codecvtIwc11__mbstate_tE9do_lengthERS1_PKcS5_m($this, $st, $frm, $frm_end, $mx) {
 $this = $this | 0;
 $st = $st | 0;
 $frm = $frm | 0;
 $frm_end = $frm_end | 0;
 $mx = $mx | 0;
 var $$sink = 0, $__l = 0, $call$i = 0, $call$i$i = 0, $frm$addr$0 = 0, $nbytes$0 = 0, $nwchar_t$0 = 0, $sub$ptr$lhs$cast = 0;
 $sub$ptr$lhs$cast = $frm_end;
 $__l = $this + 8 | 0;
 $frm$addr$0 = $frm;
 $nbytes$0 = 0;
 $nwchar_t$0 = 0;
 L1 : while (1) {
  if (($frm$addr$0 | 0) == ($frm_end | 0) | $nwchar_t$0 >>> 0 >= $mx >>> 0) break;
  $call$i$i = ___uselocale(HEAP32[$__l >> 2] | 0) | 0;
  $call$i = _mbrlen($frm$addr$0, $sub$ptr$lhs$cast - $frm$addr$0 | 0, $st) | 0;
  if ($call$i$i | 0) ___uselocale($call$i$i) | 0;
  switch ($call$i | 0) {
  case -2:
  case -1:
   {
    break L1;
    break;
   }
  case 0:
   {
    $$sink = 1;
    break;
   }
  default:
   $$sink = $call$i;
  }
  $frm$addr$0 = $frm$addr$0 + $$sink | 0;
  $nbytes$0 = $$sink + $nbytes$0 | 0;
  $nwchar_t$0 = $nwchar_t$0 + 1 | 0;
 }
 return $nbytes$0 | 0;
}

function _stbi__fill_bits($z) {
 $z = $z | 0;
 var $code_buffer3 = 0, $conv = 0, $num_bits4 = 0, $z$addr = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $z$addr = sp;
 HEAP32[$z$addr >> 2] = $z;
 while (1) {
  if ((HEAP32[(HEAP32[$z$addr >> 2] | 0) + 12 >> 2] | 0) >>> 0 >= 1 << HEAP32[(HEAP32[$z$addr >> 2] | 0) + 8 >> 2] >>> 0) {
   label = 3;
   break;
  }
  $conv = (_stbi__zget8(HEAP32[$z$addr >> 2] | 0) | 0) & 255;
  $code_buffer3 = (HEAP32[$z$addr >> 2] | 0) + 12 | 0;
  HEAP32[$code_buffer3 >> 2] = HEAP32[$code_buffer3 >> 2] | $conv << HEAP32[(HEAP32[$z$addr >> 2] | 0) + 8 >> 2];
  $num_bits4 = (HEAP32[$z$addr >> 2] | 0) + 8 | 0;
  HEAP32[$num_bits4 >> 2] = (HEAP32[$num_bits4 >> 2] | 0) + 8;
  if ((HEAP32[(HEAP32[$z$addr >> 2] | 0) + 8 >> 2] | 0) > 24) {
   label = 5;
   break;
  }
 }
 if ((label | 0) == 3) ___assert_fail(33788, 32781, 3964, 33825); else if ((label | 0) == 5) {
  STACKTOP = sp;
  return;
 }
}

function ___overflow($f, $_c) {
 $f = $f | 0;
 $_c = $_c | 0;
 var $0 = 0, $1 = 0, $2 = 0, $c = 0, $conv = 0, $conv5 = 0, $retval$0 = 0, $wend = 0, $wpos = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $c = sp;
 $conv = $_c & 255;
 HEAP8[$c >> 0] = $conv;
 $wend = $f + 16 | 0;
 $0 = HEAP32[$wend >> 2] | 0;
 if (!$0) if (!(___towrite($f) | 0)) {
  $2 = HEAP32[$wend >> 2] | 0;
  label = 4;
 } else $retval$0 = -1; else {
  $2 = $0;
  label = 4;
 }
 do if ((label | 0) == 4) {
  $wpos = $f + 20 | 0;
  $1 = HEAP32[$wpos >> 2] | 0;
  if ($1 >>> 0 < $2 >>> 0) {
   $conv5 = $_c & 255;
   if (($conv5 | 0) != (HEAP8[$f + 75 >> 0] | 0)) {
    HEAP32[$wpos >> 2] = $1 + 1;
    HEAP8[$1 >> 0] = $conv;
    $retval$0 = $conv5;
    break;
   }
  }
  if ((FUNCTION_TABLE_iiii[HEAP32[$f + 36 >> 2] & 63]($f, $c, 1) | 0) == 1) $retval$0 = HEAPU8[$c >> 0] | 0; else $retval$0 = -1;
 } while (0);
 STACKTOP = sp;
 return $retval$0 | 0;
}

function __ZNSt3__26__treeINS_12__value_typeINS_5tupleIJiiEEEPN4tson4TileEEENS_19__map_value_compareIS3_S7_NS_4lessIS3_EELb1EEENS_9allocatorIS7_EEE13__move_assignERSE_NS_17integral_constantIbLb1EEE($this, $__t, $0) {
 $this = $this | 0;
 $__t = $__t | 0;
 $0 = $0 | 0;
 var $3 = 0, $4 = 0, $6 = 0, $__value_$i$i$i = 0, $__value_$i$i15 = 0;
 $__value_$i$i$i = $this + 4 | 0;
 __ZNSt3__26__treeINS_12__value_typeINS_5tupleIJiiEEEPN4tson4TileEEENS_19__map_value_compareIS3_S7_NS_4lessIS3_EELb1EEENS_9allocatorIS7_EEE7destroyEPNS_11__tree_nodeIS7_PvEE($this, HEAP32[$__value_$i$i$i >> 2] | 0);
 HEAP32[$this >> 2] = HEAP32[$__t >> 2];
 $__value_$i$i15 = $__t + 4 | 0;
 $3 = HEAP32[$__value_$i$i15 >> 2] | 0;
 HEAP32[$__value_$i$i$i >> 2] = $3;
 $4 = $__t + 8 | 0;
 $6 = HEAP32[$4 >> 2] | 0;
 HEAP32[$this + 8 >> 2] = $6;
 if (!$6) HEAP32[$this >> 2] = $__value_$i$i$i; else {
  HEAP32[$3 + 8 >> 2] = $__value_$i$i$i;
  HEAP32[$__t >> 2] = $__value_$i$i15;
  HEAP32[$__value_$i$i15 >> 2] = 0;
  HEAP32[$4 >> 2] = 0;
 }
 return;
}

function __ZNSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8nlohmann10basic_jsonINS_3mapENS_6vectorES7_bxydS5_NS8_14adl_serializerEEEEENS_19__map_value_compareIS7_SE_NS_4lessIvEELb1EEENS5_ISE_EEE16__insert_node_atEPNS_15__tree_end_nodeIPNS_16__tree_node_baseIPvEEEERSP_SP_($this, $__parent, $__child, $__new_node) {
 $this = $this | 0;
 $__parent = $__parent | 0;
 $__child = $__child | 0;
 $__new_node = $__new_node | 0;
 var $1 = 0, $4 = 0, $__value_$i$i$i = 0;
 HEAP32[$__new_node >> 2] = 0;
 HEAP32[$__new_node + 4 >> 2] = 0;
 HEAP32[$__new_node + 8 >> 2] = $__parent;
 HEAP32[$__child >> 2] = $__new_node;
 $1 = HEAP32[HEAP32[$this >> 2] >> 2] | 0;
 if (!$1) $4 = $__new_node; else {
  HEAP32[$this >> 2] = $1;
  $4 = HEAP32[$__child >> 2] | 0;
 }
 __ZNSt3__227__tree_balance_after_insertIPNS_16__tree_node_baseIPvEEEEvT_S5_(HEAP32[$this + 4 >> 2] | 0, $4);
 $__value_$i$i$i = $this + 8 | 0;
 HEAP32[$__value_$i$i$i >> 2] = (HEAP32[$__value_$i$i$i >> 2] | 0) + 1;
 return;
}

function _strncmp($_l, $_r, $n) {
 $_l = $_l | 0;
 $_r = $_r | 0;
 $n = $n | 0;
 var $$lcssa = 0, $0 = 0, $1 = 0, $2 = 0, $incdec$ptr9 = 0, $l$015 = 0, $n$addr$017$in = 0, $r$0$lcssa = 0, $r$016 = 0, $retval$0 = 0;
 if (!$n) $retval$0 = 0; else {
  $0 = HEAP8[$_l >> 0] | 0;
  L3 : do if (!($0 << 24 >> 24)) {
   $$lcssa = 0;
   $r$0$lcssa = $_r;
  } else {
   $2 = $0;
   $l$015 = $_l;
   $n$addr$017$in = $n;
   $r$016 = $_r;
   while (1) {
    $n$addr$017$in = $n$addr$017$in + -1 | 0;
    $1 = HEAP8[$r$016 >> 0] | 0;
    if (!($2 << 24 >> 24 == $1 << 24 >> 24 & (($n$addr$017$in | 0) != 0 & $1 << 24 >> 24 != 0))) {
     $$lcssa = $2;
     $r$0$lcssa = $r$016;
     break L3;
    }
    $l$015 = $l$015 + 1 | 0;
    $incdec$ptr9 = $r$016 + 1 | 0;
    $2 = HEAP8[$l$015 >> 0] | 0;
    if (!($2 << 24 >> 24)) {
     $$lcssa = 0;
     $r$0$lcssa = $incdec$ptr9;
     break;
    } else $r$016 = $incdec$ptr9;
   }
  } while (0);
  $retval$0 = ($$lcssa & 255) - (HEAPU8[$r$0$lcssa >> 0] | 0) | 0;
 }
 return $retval$0 | 0;
}

function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcmm($this, $__s, $__sz, $__reserve) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__sz = $__sz | 0;
 $__reserve = $__reserve | 0;
 var $__p$0 = 0, $and$i$i = 0, $call$i$i$i = 0, $ref$tmp = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $ref$tmp = sp;
 if ($__reserve >>> 0 > 4294967279) __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($this);
 if ($__reserve >>> 0 < 11) {
  HEAP8[$this + 11 >> 0] = $__sz;
  $__p$0 = $this;
 } else {
  $and$i$i = $__reserve + 16 & -16;
  $call$i$i$i = __Znwm($and$i$i) | 0;
  HEAP32[$this >> 2] = $call$i$i$i;
  HEAP32[$this + 8 >> 2] = $and$i$i | -2147483648;
  HEAP32[$this + 4 >> 2] = $__sz;
  $__p$0 = $call$i$i$i;
 }
 __ZNSt3__211char_traitsIcE4copyEPcPKcm($__p$0, $__s, $__sz) | 0;
 HEAP8[$ref$tmp >> 0] = 0;
 __ZNSt3__211char_traitsIcE6assignERcRKc($__p$0 + $__sz | 0, $ref$tmp);
 STACKTOP = sp;
 return;
}

function __ZNSt3__214__split_bufferIPN8nlohmann10basic_jsonINS_3mapENS_6vectorENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEbxydS8_NS1_14adl_serializerEEERNS8_ISD_EEEC2EmmSF_($this, $__cap, $__start, $__a) {
 $this = $this | 0;
 $__cap = $__cap | 0;
 $__start = $__start | 0;
 $__a = $__a | 0;
 var $__value_$i1$i = 0, $add$ptr = 0, $cond = 0, $exception$i$i$i = 0;
 $__value_$i1$i = $this + 12 | 0;
 HEAP32[$__value_$i1$i >> 2] = 0;
 HEAP32[$this + 16 >> 2] = $__a;
 do if (!$__cap) $cond = 0; else if ($__cap >>> 0 > 1073741823) {
  $exception$i$i$i = ___cxa_allocate_exception(8) | 0;
  __ZNSt11logic_errorC2EPKc($exception$i$i$i, 22952);
  HEAP32[$exception$i$i$i >> 2] = 18488;
  ___cxa_throw($exception$i$i$i | 0, 15856, 33);
 } else {
  $cond = __Znwm($__cap << 2) | 0;
  break;
 } while (0);
 HEAP32[$this >> 2] = $cond;
 $add$ptr = $cond + ($__start << 2) | 0;
 HEAP32[$this + 8 >> 2] = $add$ptr;
 HEAP32[$this + 4 >> 2] = $add$ptr;
 HEAP32[$__value_$i1$i >> 2] = $cond + ($__cap << 2);
 return;
}

function __ZN4NaveC2ENSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEERK7Vector2($this, $text, $navePos) {
 $this = $this | 0;
 $text = $text | 0;
 $navePos = $navePos | 0;
 var $0 = 0, $5 = 0, $6 = 0, $cond$i$i$i = 0, $nave2 = 0, $ref$tmp = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $ref$tmp = sp;
 HEAP32[$this + 36 >> 2] = 100;
 $0 = $navePos;
 $5 = HEAP32[$0 + 4 >> 2] | 0;
 $6 = $this + 60 | 0;
 HEAP32[$6 >> 2] = HEAP32[$0 >> 2];
 HEAP32[$6 + 4 >> 2] = $5;
 if ((HEAP8[$text + 11 >> 0] | 0) < 0) $cond$i$i$i = HEAP32[$text >> 2] | 0; else $cond$i$i$i = $text;
 _LoadTexture($ref$tmp, $cond$i$i$i);
 $nave2 = $this + 16 | 0;
 HEAP32[$nave2 >> 2] = HEAP32[$ref$tmp >> 2];
 HEAP32[$nave2 + 4 >> 2] = HEAP32[$ref$tmp + 4 >> 2];
 HEAP32[$nave2 + 8 >> 2] = HEAP32[$ref$tmp + 8 >> 2];
 HEAP32[$nave2 + 12 >> 2] = HEAP32[$ref$tmp + 12 >> 2];
 HEAP32[$nave2 + 16 >> 2] = HEAP32[$ref$tmp + 16 >> 2];
 STACKTOP = sp;
 return;
}

function __ZNSt3__214__split_bufferIN8nlohmann10basic_jsonINS_3mapENS_6vectorENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEbxydS8_NS1_14adl_serializerEEERNS8_ISC_EEEC2EmmSE_($this, $__cap, $__start, $__a) {
 $this = $this | 0;
 $__cap = $__cap | 0;
 $__start = $__start | 0;
 $__a = $__a | 0;
 var $__value_$i1$i = 0, $add$ptr = 0, $cond = 0, $exception$i$i$i = 0;
 $__value_$i1$i = $this + 12 | 0;
 HEAP32[$__value_$i1$i >> 2] = 0;
 HEAP32[$this + 16 >> 2] = $__a;
 do if (!$__cap) $cond = 0; else if ($__cap >>> 0 > 268435455) {
  $exception$i$i$i = ___cxa_allocate_exception(8) | 0;
  __ZNSt11logic_errorC2EPKc($exception$i$i$i, 22952);
  HEAP32[$exception$i$i$i >> 2] = 18488;
  ___cxa_throw($exception$i$i$i | 0, 15856, 33);
 } else {
  $cond = __Znwm($__cap << 4) | 0;
  break;
 } while (0);
 HEAP32[$this >> 2] = $cond;
 $add$ptr = $cond + ($__start << 4) | 0;
 HEAP32[$this + 8 >> 2] = $add$ptr;
 HEAP32[$this + 4 >> 2] = $add$ptr;
 HEAP32[$__value_$i1$i >> 2] = $cond + ($__cap << 4);
 return;
}

function _stbiw__zhash($data) {
 $data = $data | 0;
 var $data$addr = 0, $hash = 0, sp = 0, CSE$0 = 0, CSE$1 = 0, CSE$2 = 0, CSE$3 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $data$addr = sp + 4 | 0;
 $hash = sp;
 HEAP32[$data$addr >> 2] = $data;
 CSE$0 = HEAP32[$data$addr >> 2] | 0;
 HEAP32[$hash >> 2] = (HEAPU8[HEAP32[$data$addr >> 2] >> 0] | 0) + (HEAPU8[CSE$0 + 1 >> 0] << 8) + (HEAPU8[CSE$0 + 2 >> 0] << 16);
 HEAP32[$hash >> 2] = HEAP32[$hash >> 2] ^ HEAP32[$hash >> 2] << 3;
 CSE$1 = HEAP32[$hash >> 2] | 0;
 HEAP32[$hash >> 2] = (CSE$1 | 0) + ((CSE$1 | 0) >>> 5);
 HEAP32[$hash >> 2] = HEAP32[$hash >> 2] ^ HEAP32[$hash >> 2] << 4;
 CSE$2 = HEAP32[$hash >> 2] | 0;
 HEAP32[$hash >> 2] = (CSE$2 | 0) + ((CSE$2 | 0) >>> 17);
 HEAP32[$hash >> 2] = HEAP32[$hash >> 2] ^ HEAP32[$hash >> 2] << 25;
 CSE$3 = HEAP32[$hash >> 2] | 0;
 HEAP32[$hash >> 2] = (CSE$3 | 0) + ((CSE$3 | 0) >>> 6);
 STACKTOP = sp;
 return HEAP32[$hash >> 2] | 0;
}

function _stbiw__wpcrc($data, $len) {
 $data = $data | 0;
 $len = $len | 0;
 var $16 = 0, $crc = 0, $data$addr = 0, $len$addr = 0, sp = 0, CSE$0 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $data$addr = sp + 8 | 0;
 $len$addr = sp + 4 | 0;
 $crc = sp;
 HEAP32[$data$addr >> 2] = $data;
 HEAP32[$len$addr >> 2] = $len;
 CSE$0 = HEAP32[$len$addr >> 2] | 0;
 HEAP32[$crc >> 2] = _stbiw__crc32((HEAP32[HEAP32[$data$addr >> 2] >> 2] | 0) + (0 - CSE$0) + -4 | 0, CSE$0 + 4 | 0) | 0;
 HEAP8[HEAP32[HEAP32[$data$addr >> 2] >> 2] >> 0] = (HEAP32[$crc >> 2] | 0) >>> 24;
 HEAP8[(HEAP32[HEAP32[$data$addr >> 2] >> 2] | 0) + 1 >> 0] = (HEAP32[$crc >> 2] | 0) >>> 16;
 HEAP8[(HEAP32[HEAP32[$data$addr >> 2] >> 2] | 0) + 2 >> 0] = (HEAP32[$crc >> 2] | 0) >>> 8;
 HEAP8[(HEAP32[HEAP32[$data$addr >> 2] >> 2] | 0) + 3 >> 0] = HEAP32[$crc >> 2];
 $16 = HEAP32[$data$addr >> 2] | 0;
 HEAP32[$16 >> 2] = (HEAP32[$16 >> 2] | 0) + 4;
 STACKTOP = sp;
 return;
}

function __ZNSt3__26__treeINS_12__value_typeINS_5tupleIJiiEEEPN4tson4TileEEENS_19__map_value_compareIS3_S7_NS_4lessIS3_EELb1EEENS_9allocatorIS7_EEE16__construct_nodeIJRKNS_21piecewise_construct_tENS2_IJOS3_EEENS2_IJEEEEEENS_10unique_ptrINS_11__tree_nodeIS7_PvEENS_22__tree_node_destructorINSC_ISP_EEEEEEDpOT_($agg$result, $this, $__args, $__args1, $__args3) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__args = $__args | 0;
 $__args1 = $__args1 | 0;
 $__args3 = $__args3 | 0;
 var $3 = 0, $8 = 0, $9 = 0, $call$i$i$i = 0, $call2$i$i$i = 0;
 $call2$i$i$i = __Znwm(28) | 0;
 HEAP32[$agg$result >> 2] = $call2$i$i$i;
 HEAP32[$agg$result + 4 >> 2] = $this + 4;
 $call$i$i$i = __ZNSt3__29__launderINS_4pairIKNS_5tupleIJiiEEEPN4tson4TileEEEEEPT_SA_($call2$i$i$i + 16 | 0) | 0;
 $3 = HEAP32[$__args1 >> 2] | 0;
 $8 = HEAP32[$3 + 4 >> 2] | 0;
 $9 = $call$i$i$i;
 HEAP32[$9 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$9 + 4 >> 2] = $8;
 HEAP32[$call$i$i$i + 8 >> 2] = 0;
 HEAP8[$agg$result + 8 >> 0] = 1;
 return;
}

function __ZN4tson4TileC2ERKN8nlohmann10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS1_14adl_serializerEEE($this, $json) {
 $this = $this | 0;
 $json = $json | 0;
 var $m_terrain = 0;
 HEAP32[$this >> 2] = 0;
 HEAP32[$this + 4 >> 2] = 0;
 HEAP32[$this + 8 >> 2] = 0;
 HEAP32[$this + 12 >> 2] = 0;
 HEAP32[$this + 16 >> 2] = 0;
 HEAP32[$this + 20 >> 2] = 0;
 HEAP32[$this + 24 >> 2] = 0;
 __ZN4tson7Vector2IiEC2Ev($this + 28 | 0);
 __ZN4tson5LayerC2Ev($this + 36 | 0);
 __ZN4tson18PropertyCollectionC2Ev($this + 256 | 0);
 $m_terrain = $this + 280 | 0;
 HEAP32[$m_terrain >> 2] = 0;
 HEAP32[$m_terrain + 4 >> 2] = 0;
 HEAP32[$m_terrain + 8 >> 2] = 0;
 HEAP32[$m_terrain + 12 >> 2] = 0;
 HEAP32[$m_terrain + 16 >> 2] = 0;
 HEAP32[$m_terrain + 20 >> 2] = 0;
 __ZN4tson4Tile5parseERKN8nlohmann10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS1_14adl_serializerEEE($this, $json) | 0;
 return;
}

function _stbi__png_load($s, $x, $y, $comp, $req_comp, $ri) {
 $s = $s | 0;
 $x = $x | 0;
 $y = $y | 0;
 $comp = $comp | 0;
 $req_comp = $req_comp | 0;
 $ri = $ri | 0;
 var $call = 0, $comp$addr = 0, $p = 0, $req_comp$addr = 0, $ri$addr = 0, $s$addr = 0, $x$addr = 0, $y$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 $s$addr = sp + 40 | 0;
 $x$addr = sp + 36 | 0;
 $y$addr = sp + 32 | 0;
 $comp$addr = sp + 28 | 0;
 $req_comp$addr = sp + 24 | 0;
 $ri$addr = sp + 20 | 0;
 $p = sp;
 HEAP32[$s$addr >> 2] = $s;
 HEAP32[$x$addr >> 2] = $x;
 HEAP32[$y$addr >> 2] = $y;
 HEAP32[$comp$addr >> 2] = $comp;
 HEAP32[$req_comp$addr >> 2] = $req_comp;
 HEAP32[$ri$addr >> 2] = $ri;
 HEAP32[$p >> 2] = HEAP32[$s$addr >> 2];
 $call = _stbi__do_png($p, HEAP32[$x$addr >> 2] | 0, HEAP32[$y$addr >> 2] | 0, HEAP32[$comp$addr >> 2] | 0, HEAP32[$req_comp$addr >> 2] | 0, HEAP32[$ri$addr >> 2] | 0) | 0;
 STACKTOP = sp;
 return $call | 0;
}

function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIwEE($this, $__y, $__b, $__e, $__err, $__ct) {
 $this = $this | 0;
 $__y = $__y | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__err = $__err | 0;
 $__ct = $__ct | 0;
 var $__t$0 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $agg$tmp$byval_copy = sp + 4 | 0;
 $agg$tmp = sp;
 HEAP32[$agg$tmp >> 2] = HEAP32[$__e >> 2];
 HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 $call = __ZNSt3__220__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, $agg$tmp$byval_copy, $__err, $__ct, 4) | 0;
 if (!(HEAP32[$__err >> 2] & 4)) {
  if (($call | 0) < 69) $__t$0 = $call + 2e3 | 0; else $__t$0 = ($call | 0) < 100 ? $call + 1900 | 0 : $call;
  HEAP32[$__y >> 2] = $__t$0 + -1900;
 }
 STACKTOP = sp;
 return;
}

function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIcEE($this, $__y, $__b, $__e, $__err, $__ct) {
 $this = $this | 0;
 $__y = $__y | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__err = $__err | 0;
 $__ct = $__ct | 0;
 var $__t$0 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $agg$tmp$byval_copy = sp + 4 | 0;
 $agg$tmp = sp;
 HEAP32[$agg$tmp >> 2] = HEAP32[$__e >> 2];
 HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 $call = __ZNSt3__220__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, $agg$tmp$byval_copy, $__err, $__ct, 4) | 0;
 if (!(HEAP32[$__err >> 2] & 4)) {
  if (($call | 0) < 69) $__t$0 = $call + 2e3 | 0; else $__t$0 = ($call | 0) < 100 ? $call + 1900 | 0 : $call;
  HEAP32[$__y >> 2] = $__t$0 + -1900;
 }
 STACKTOP = sp;
 return;
}

function __ZN4tson3MapD2Ev($this) {
 $this = $this | 0;
 __ZNSt3__23mapIiPN4tson4TileENS_4lessIiEENS_9allocatorINS_4pairIKiS3_EEEEED2Ev($this + 176 | 0);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($this + 164 | 0);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($this + 144 | 0);
 __ZNSt3__213__vector_baseIN4tson7TilesetENS_9allocatorIS2_EEED2Ev($this + 132 | 0);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($this + 112 | 0);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($this + 100 | 0);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($this + 88 | 0);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($this + 76 | 0);
 __ZN4tson18PropertyCollectionD2Ev($this + 52 | 0);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($this + 40 | 0);
 __ZNSt3__213__vector_baseIN4tson5LayerENS_9allocatorIS2_EEED2Ev($this + 20 | 0);
 return;
}

function __ZZN4tson8WangTile5parseERKN8nlohmann10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS1_14adl_serializerEEEENKUlSF_E_clESF_($this, $item) {
 $this = $this | 0;
 $item = $item | 0;
 var $0 = 0, $1 = 0, $__end_$i = 0, $call = 0, $ref$tmp = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $ref$tmp = sp;
 $0 = HEAP32[$this >> 2] | 0;
 $call = __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE3getIiiLi0EEET0_v($item) | 0;
 HEAP32[$ref$tmp >> 2] = $call;
 $__end_$i = $0 + 16 | 0;
 $1 = HEAP32[$__end_$i >> 2] | 0;
 if ($1 >>> 0 < (HEAP32[$0 + 20 >> 2] | 0) >>> 0) {
  HEAP32[$1 >> 2] = $call;
  HEAP32[$__end_$i >> 2] = $1 + 4;
 } else __ZNSt3__26vectorIiNS_9allocatorIiEEE24__emplace_back_slow_pathIJiEEEvDpOT_($0 + 12 | 0, $ref$tmp);
 STACKTOP = sp;
 return;
}

function __ZZN4tson4Tile5parseERKN8nlohmann10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS1_14adl_serializerEEEENKUlSF_E0_clESF_($this, $item) {
 $this = $this | 0;
 $item = $item | 0;
 var $0 = 0, $1 = 0, $__end_$i = 0, $call = 0, $ref$tmp = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $ref$tmp = sp;
 $0 = HEAP32[$this >> 2] | 0;
 $call = __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE3getIiiLi0EEET0_v($item) | 0;
 HEAP32[$ref$tmp >> 2] = $call;
 $__end_$i = $0 + 284 | 0;
 $1 = HEAP32[$__end_$i >> 2] | 0;
 if ($1 >>> 0 < (HEAP32[$0 + 288 >> 2] | 0) >>> 0) {
  HEAP32[$1 >> 2] = $call;
  HEAP32[$__end_$i >> 2] = $1 + 4;
 } else __ZNSt3__26vectorIiNS_9allocatorIiEEE24__emplace_back_slow_pathIJiEEEvDpOT_($0 + 280 | 0, $ref$tmp);
 STACKTOP = sp;
 return;
}

function __ZN8nlohmann6detail20external_constructorILNS0_7value_tE6EE9constructINS_10basic_jsonINSt3__23mapENS6_6vectorENS6_12basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEbxydSC_NS_14adl_serializerEEEEEvRT_NSH_17number_unsigned_tE($j, $0, $1) {
 $j = $j | 0;
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $3 = 0, $8 = 0, $9 = 0, $ref$tmp = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $ref$tmp = sp;
 HEAP8[$j >> 0] = 6;
 __ZN8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE10json_valueC2Ey($ref$tmp, $0, $1);
 $3 = $ref$tmp;
 $8 = HEAP32[$3 + 4 >> 2] | 0;
 $9 = $j + 8 | 0;
 HEAP32[$9 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$9 + 4 >> 2] = $8;
 __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE16assert_invariantEv($j);
 STACKTOP = sp;
 return;
}

function __ZN8nlohmann6detail20external_constructorILNS0_7value_tE5EE9constructINS_10basic_jsonINSt3__23mapENS6_6vectorENS6_12basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEbxydSC_NS_14adl_serializerEEEEEvRT_NSH_16number_integer_tE($j, $0, $1) {
 $j = $j | 0;
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $3 = 0, $8 = 0, $9 = 0, $ref$tmp = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $ref$tmp = sp;
 HEAP8[$j >> 0] = 5;
 __ZN8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE10json_valueC2Ex($ref$tmp, $0, $1);
 $3 = $ref$tmp;
 $8 = HEAP32[$3 + 4 >> 2] | 0;
 $9 = $j + 8 | 0;
 HEAP32[$9 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$9 + 4 >> 2] = $8;
 __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE16assert_invariantEv($j);
 STACKTOP = sp;
 return;
}

function __ZNKSt3__210__time_put8__do_putEPcRS1_PK2tmcc($this, $__nb, $__ne, $__tm, $__fmt, $__mod) {
 $this = $this | 0;
 $__nb = $__nb | 0;
 $__ne = $__ne | 0;
 $__tm = $__tm | 0;
 $__fmt = $__fmt | 0;
 $__mod = $__mod | 0;
 var $arrayinit$element = 0, $arrayinit$element2 = 0, $call = 0, $fmt = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $fmt = sp;
 HEAP8[$fmt >> 0] = 37;
 $arrayinit$element = $fmt + 1 | 0;
 HEAP8[$arrayinit$element >> 0] = $__fmt;
 $arrayinit$element2 = $fmt + 2 | 0;
 HEAP8[$arrayinit$element2 >> 0] = $__mod;
 HEAP8[$fmt + 3 >> 0] = 0;
 if ($__mod << 24 >> 24) {
  HEAP8[$arrayinit$element >> 0] = $__mod;
  HEAP8[$arrayinit$element2 >> 0] = $__fmt;
 }
 $call = __ZNSt3__212_GLOBAL__N_17countofIcEEmPKT_S4_($__nb, HEAP32[$__ne >> 2] | 0) | 0;
 HEAP32[$__ne >> 2] = $__nb + (_strftime_l($__nb | 0, $call | 0, $fmt | 0, $__tm | 0, HEAP32[$this >> 2] | 0) | 0);
 STACKTOP = sp;
 return;
}

function __ZNSt3__26__treeINS_12__value_typeIiPN4tson4TileEEENS_19__map_value_compareIiS5_NS_4lessIiEELb1EEENS_9allocatorIS5_EEE13__move_assignERSC_NS_17integral_constantIbLb1EEE($this, $__t, $0) {
 $this = $this | 0;
 $__t = $__t | 0;
 $0 = $0 | 0;
 var $3 = 0, $4 = 0, $6 = 0, $__value_$i$i$i = 0, $__value_$i$i15 = 0;
 $__value_$i$i$i = $this + 4 | 0;
 __ZNSt3__26__treeINS_12__value_typeIiPN4tson4TileEEENS_19__map_value_compareIiS5_NS_4lessIiEELb1EEENS_9allocatorIS5_EEE7destroyEPNS_11__tree_nodeIS5_PvEE($this, HEAP32[$__value_$i$i$i >> 2] | 0);
 HEAP32[$this >> 2] = HEAP32[$__t >> 2];
 $__value_$i$i15 = $__t + 4 | 0;
 $3 = HEAP32[$__value_$i$i15 >> 2] | 0;
 HEAP32[$__value_$i$i$i >> 2] = $3;
 $4 = $__t + 8 | 0;
 $6 = HEAP32[$4 >> 2] | 0;
 HEAP32[$this + 8 >> 2] = $6;
 if (!$6) HEAP32[$this >> 2] = $__value_$i$i$i; else {
  HEAP32[$3 + 8 >> 2] = $__value_$i$i$i;
  HEAP32[$__t >> 2] = $__value_$i$i15;
  HEAP32[$__value_$i$i15 >> 2] = 0;
  HEAP32[$4 >> 2] = 0;
 }
 return;
}

function __ZZN4tson5Layer5parseERKN8nlohmann10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS1_14adl_serializerEEEENKUlSF_E_clESF_($this, $item) {
 $this = $this | 0;
 $item = $item | 0;
 var $0 = 0, $1 = 0, $__end_$i = 0, $call = 0, $ref$tmp = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $ref$tmp = sp;
 $0 = HEAP32[$this >> 2] | 0;
 $call = __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE3getIiiLi0EEET0_v($item) | 0;
 HEAP32[$ref$tmp >> 2] = $call;
 $__end_$i = $0 + 28 | 0;
 $1 = HEAP32[$__end_$i >> 2] | 0;
 if ($1 >>> 0 < (HEAP32[$0 + 32 >> 2] | 0) >>> 0) {
  HEAP32[$1 >> 2] = $call;
  HEAP32[$__end_$i >> 2] = $1 + 4;
 } else __ZNSt3__26vectorIiNS_9allocatorIiEEE21__push_back_slow_pathIiEEvOT_($0 + 24 | 0, $ref$tmp);
 STACKTOP = sp;
 return;
}

function __ZN4tson5Layer6getObjEi($this, $id) {
 $this = $this | 0;
 $id = $id | 0;
 var $$lcssa$i = 0, $$lcssa$i$ph = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $__end_$i4 = 0, $agg$tmp63 = 0, $id$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $agg$tmp63 = sp;
 $id$addr = sp + 4 | 0;
 HEAP32[$id$addr >> 2] = $id;
 $0 = HEAP32[$this + 112 >> 2] | 0;
 $__end_$i4 = $this + 116 | 0;
 $1 = HEAP32[$__end_$i4 >> 2] | 0;
 HEAP32[$agg$tmp63 >> 2] = $id$addr;
 if (($0 | 0) == ($1 | 0)) {
  $$lcssa$i = $0;
  $3 = $0;
 } else {
  $2 = $0;
  while (1) {
   if (__ZZN4tson5Layer6getObjEiENKUlRKNS_6ObjectEE_clES3_($agg$tmp63, $2) | 0) {
    $$lcssa$i$ph = $2;
    break;
   }
   $2 = $2 + 140 | 0;
   if (($2 | 0) == ($1 | 0)) {
    $$lcssa$i$ph = $1;
    break;
   }
  }
  $$lcssa$i = $$lcssa$i$ph;
  $3 = HEAP32[$__end_$i4 >> 2] | 0;
 }
 STACKTOP = sp;
 return (($$lcssa$i | 0) == ($3 | 0) ? 0 : $$lcssa$i) | 0;
}

function _DrawCircleV($center, $radius, $color) {
 $center = $center | 0;
 $radius = Math_fround($radius);
 $color = $color | 0;
 var $0 = f0, $center$byval_copy = 0, $color$byval_copy = 0, $radius$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $color$byval_copy = sp + 16 | 0;
 $center$byval_copy = sp + 8 | 0;
 $radius$addr = sp;
 HEAPF32[$radius$addr >> 2] = $radius;
 $0 = Math_fround(HEAPF32[$radius$addr >> 2]);
 HEAP32[$center$byval_copy >> 2] = HEAP32[$center >> 2];
 HEAP32[$center$byval_copy + 4 >> 2] = HEAP32[$center + 4 >> 2];
 HEAP8[$color$byval_copy >> 0] = HEAP8[$color >> 0] | 0;
 HEAP8[$color$byval_copy + 1 >> 0] = HEAP8[$color + 1 >> 0] | 0;
 HEAP8[$color$byval_copy + 2 >> 0] = HEAP8[$color + 2 >> 0] | 0;
 HEAP8[$color$byval_copy + 3 >> 0] = HEAP8[$color + 3 >> 0] | 0;
 _DrawCircleSector($center$byval_copy, $0, 0, 360, 36, $color$byval_copy);
 STACKTOP = sp;
 return;
}

function __ZNSt3__26vectorIN8nlohmann10basic_jsonINS_3mapES0_NS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEbxydS7_NS1_14adl_serializerEEENS7_ISB_EEE11__vallocateEm($this, $__n) {
 $this = $this | 0;
 $__n = $__n | 0;
 var $call2$i$i$i = 0, $exception$i$i$i = 0;
 if ((__ZNKSt3__26vectorIN8nlohmann10basic_jsonINS_3mapES0_NS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEbxydS7_NS1_14adl_serializerEEENS7_ISB_EEE8max_sizeEv($this) | 0) >>> 0 < $__n >>> 0) __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($this);
 if ($__n >>> 0 > 268435455) {
  $exception$i$i$i = ___cxa_allocate_exception(8) | 0;
  __ZNSt11logic_errorC2EPKc($exception$i$i$i, 22952);
  HEAP32[$exception$i$i$i >> 2] = 18488;
  ___cxa_throw($exception$i$i$i | 0, 15856, 33);
 } else {
  $call2$i$i$i = __Znwm($__n << 4) | 0;
  HEAP32[$this + 4 >> 2] = $call2$i$i$i;
  HEAP32[$this >> 2] = $call2$i$i$i;
  HEAP32[$this + 8 >> 2] = $call2$i$i$i + ($__n << 4);
  return;
 }
}

function __ZN8nlohmann6detail20external_constructorILNS0_7value_tE7EE9constructINS_10basic_jsonINSt3__23mapENS6_6vectorENS6_12basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEbxydSC_NS_14adl_serializerEEEEEvRT_NSH_14number_float_tE($j, $val) {
 $j = $j | 0;
 $val = +$val;
 var $1 = 0, $6 = 0, $7 = 0, $ref$tmp = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $ref$tmp = sp;
 HEAP8[$j >> 0] = 7;
 __ZN8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE10json_valueC2Ed($ref$tmp, $val);
 $1 = $ref$tmp;
 $6 = HEAP32[$1 + 4 >> 2] | 0;
 $7 = $j + 8 | 0;
 HEAP32[$7 >> 2] = HEAP32[$1 >> 2];
 HEAP32[$7 + 4 >> 2] = $6;
 __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE16assert_invariantEv($j);
 STACKTOP = sp;
 return;
}

function __ZZN4tson5Chunk5parseERKN8nlohmann10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS1_14adl_serializerEEEENKUlSF_E_clESF_($this, $item) {
 $this = $this | 0;
 $item = $item | 0;
 var $0 = 0, $1 = 0, $__end_$i = 0, $call = 0, $ref$tmp = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $ref$tmp = sp;
 $0 = HEAP32[$this >> 2] | 0;
 $call = __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE3getIiiLi0EEET0_v($item) | 0;
 HEAP32[$ref$tmp >> 2] = $call;
 $__end_$i = $0 + 4 | 0;
 $1 = HEAP32[$__end_$i >> 2] | 0;
 if ($1 >>> 0 < (HEAP32[$0 + 8 >> 2] | 0) >>> 0) {
  HEAP32[$1 >> 2] = $call;
  HEAP32[$__end_$i >> 2] = $1 + 4;
 } else __ZNSt3__26vectorIiNS_9allocatorIiEEE21__push_back_slow_pathIiEEvOT_($0, $ref$tmp);
 STACKTOP = sp;
 return;
}

function _ungetc($c, $f) {
 $c = $c | 0;
 $f = $f | 0;
 var $$pr = 0, $1 = 0, $3 = 0, $cond = 0, $incdec$ptr = 0, $retval$1 = 0, $rpos = 0, label = 0;
 label = 0;
 do if (($c | 0) == -1) $retval$1 = -1; else {
  if ((HEAP32[$f + 76 >> 2] | 0) > -1) $cond = ___lockfile($f) | 0; else $cond = 0;
  $rpos = $f + 4 | 0;
  $1 = HEAP32[$rpos >> 2] | 0;
  if (!$1) {
   ___toread($f) | 0;
   $$pr = HEAP32[$rpos >> 2] | 0;
   if ($$pr | 0) {
    $3 = $$pr;
    label = 6;
   }
  } else {
   $3 = $1;
   label = 6;
  }
  if ((label | 0) == 6) if ($3 >>> 0 > ((HEAP32[$f + 44 >> 2] | 0) + -8 | 0) >>> 0) {
   $incdec$ptr = $3 + -1 | 0;
   HEAP32[$rpos >> 2] = $incdec$ptr;
   HEAP8[$incdec$ptr >> 0] = $c;
   HEAP32[$f >> 2] = HEAP32[$f >> 2] & -17;
   if (!$cond) {
    $retval$1 = $c;
    break;
   }
   ___unlockfile($f);
   $retval$1 = $c;
   break;
  }
  if (!$cond) $retval$1 = -1; else {
   ___unlockfile($f);
   $retval$1 = -1;
  }
 } while (0);
 return $retval$1 | 0;
}

function __ZNSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN4tson8PropertyEEENS_19__map_value_compareIS7_SA_NS_4lessIS7_EELb1EEENS5_ISA_EEE16__insert_node_atEPNS_15__tree_end_nodeIPNS_16__tree_node_baseIPvEEEERSL_SL_($this, $__parent, $__child, $__new_node) {
 $this = $this | 0;
 $__parent = $__parent | 0;
 $__child = $__child | 0;
 $__new_node = $__new_node | 0;
 var $1 = 0, $4 = 0, $__value_$i$i$i = 0;
 HEAP32[$__new_node >> 2] = 0;
 HEAP32[$__new_node + 4 >> 2] = 0;
 HEAP32[$__new_node + 8 >> 2] = $__parent;
 HEAP32[$__child >> 2] = $__new_node;
 $1 = HEAP32[HEAP32[$this >> 2] >> 2] | 0;
 if (!$1) $4 = $__new_node; else {
  HEAP32[$this >> 2] = $1;
  $4 = HEAP32[$__child >> 2] | 0;
 }
 __ZNSt3__227__tree_balance_after_insertIPNS_16__tree_node_baseIPvEEEEvT_S5_(HEAP32[$this + 4 >> 2] | 0, $4);
 $__value_$i$i$i = $this + 8 | 0;
 HEAP32[$__value_$i$i$i >> 2] = (HEAP32[$__value_$i$i$i >> 2] | 0) + 1;
 return;
}

function __ZN8nlohmann6detail20external_constructorILNS0_7value_tE3EE9constructINS_10basic_jsonINSt3__23mapENS6_6vectorENS6_12basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEbxydSC_NS_14adl_serializerEEEEEvRT_RKNSH_8string_tE($j, $s) {
 $j = $j | 0;
 $s = $s | 0;
 var $1 = 0, $6 = 0, $7 = 0, $ref$tmp = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $ref$tmp = sp;
 HEAP8[$j >> 0] = 3;
 __ZN8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE10json_valueC2ERKS9_($ref$tmp, $s);
 $1 = $ref$tmp;
 $6 = HEAP32[$1 + 4 >> 2] | 0;
 $7 = $j + 8 | 0;
 HEAP32[$7 >> 2] = HEAP32[$1 >> 2];
 HEAP32[$7 + 4 >> 2] = $6;
 __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE16assert_invariantEv($j);
 STACKTOP = sp;
 return;
}

function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcm($this, $__s, $__sz) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__sz = $__sz | 0;
 var $__p$0 = 0, $and$i$i = 0, $call$i$i$i = 0, $ref$tmp = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $ref$tmp = sp;
 if ($__sz >>> 0 > 4294967279) __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($this);
 if ($__sz >>> 0 < 11) {
  HEAP8[$this + 11 >> 0] = $__sz;
  $__p$0 = $this;
 } else {
  $and$i$i = $__sz + 16 & -16;
  $call$i$i$i = __Znwm($and$i$i) | 0;
  HEAP32[$this >> 2] = $call$i$i$i;
  HEAP32[$this + 8 >> 2] = $and$i$i | -2147483648;
  HEAP32[$this + 4 >> 2] = $__sz;
  $__p$0 = $call$i$i$i;
 }
 __ZNSt3__211char_traitsIcE4copyEPcPKcm($__p$0, $__s, $__sz) | 0;
 HEAP8[$ref$tmp >> 0] = 0;
 __ZNSt3__211char_traitsIcE6assignERcRKc($__p$0 + $__sz | 0, $ref$tmp);
 STACKTOP = sp;
 return;
}

function __ZN8nlohmann6detail20external_constructorILNS0_7value_tE4EE9constructINS_10basic_jsonINSt3__23mapENS6_6vectorENS6_12basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEbxydSC_NS_14adl_serializerEEEEEvRT_NSH_9boolean_tE($j, $b) {
 $j = $j | 0;
 $b = $b | 0;
 var $1 = 0, $6 = 0, $7 = 0, $ref$tmp = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $ref$tmp = sp;
 HEAP8[$j >> 0] = 4;
 __ZN8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE10json_valueC2Eb($ref$tmp, $b);
 $1 = $ref$tmp;
 $6 = HEAP32[$1 + 4 >> 2] | 0;
 $7 = $j + 8 | 0;
 HEAP32[$7 >> 2] = HEAP32[$1 >> 2];
 HEAP32[$7 + 4 >> 2] = $6;
 __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE16assert_invariantEv($j);
 STACKTOP = sp;
 return;
}

function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_12_hourERiRS4_S4_RjRKNS_5ctypeIwEE($this, $__h, $__b, $__e, $__err, $__ct) {
 $this = $this | 0;
 $__h = $__h | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__err = $__err | 0;
 $__ct = $__ct | 0;
 var $1 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $agg$tmp$byval_copy = sp + 4 | 0;
 $agg$tmp = sp;
 HEAP32[$agg$tmp >> 2] = HEAP32[$__e >> 2];
 HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 $call = __ZNSt3__220__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, $agg$tmp$byval_copy, $__err, $__ct, 2) | 0;
 $1 = HEAP32[$__err >> 2] | 0;
 if (($call + -1 | 0) >>> 0 < 12 & ($1 & 4 | 0) == 0) HEAP32[$__h >> 2] = $call; else HEAP32[$__err >> 2] = $1 | 4;
 STACKTOP = sp;
 return;
}

function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_12_hourERiRS4_S4_RjRKNS_5ctypeIcEE($this, $__h, $__b, $__e, $__err, $__ct) {
 $this = $this | 0;
 $__h = $__h | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__err = $__err | 0;
 $__ct = $__ct | 0;
 var $1 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $agg$tmp$byval_copy = sp + 4 | 0;
 $agg$tmp = sp;
 HEAP32[$agg$tmp >> 2] = HEAP32[$__e >> 2];
 HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 $call = __ZNSt3__220__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, $agg$tmp$byval_copy, $__err, $__ct, 2) | 0;
 $1 = HEAP32[$__err >> 2] | 0;
 if (($call + -1 | 0) >>> 0 < 12 & ($1 & 4 | 0) == 0) HEAP32[$__h >> 2] = $call; else HEAP32[$__err >> 2] = $1 | 4;
 STACKTOP = sp;
 return;
}

function _stbiw__zlib_countm($a, $b, $limit) {
 $a = $a | 0;
 $b = $b | 0;
 $limit = $limit | 0;
 var $a$addr = 0, $b$addr = 0, $i = 0, $limit$addr = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $a$addr = sp + 12 | 0;
 $b$addr = sp + 8 | 0;
 $limit$addr = sp + 4 | 0;
 $i = sp;
 HEAP32[$a$addr >> 2] = $a;
 HEAP32[$b$addr >> 2] = $b;
 HEAP32[$limit$addr >> 2] = $limit;
 HEAP32[$i >> 2] = 0;
 while (1) {
  if (!((HEAP32[$i >> 2] | 0) < (HEAP32[$limit$addr >> 2] | 0) ? (HEAP32[$i >> 2] | 0) < 258 : 0)) {
   label = 5;
   break;
  }
  if ((HEAPU8[(HEAP32[$a$addr >> 2] | 0) + (HEAP32[$i >> 2] | 0) >> 0] | 0 | 0) != (HEAPU8[(HEAP32[$b$addr >> 2] | 0) + (HEAP32[$i >> 2] | 0) >> 0] | 0 | 0)) {
   label = 5;
   break;
  }
  HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
 }
 if ((label | 0) == 5) {
  STACKTOP = sp;
  return HEAP32[$i >> 2] | 0;
 }
 return 0;
}

function _stbi__at_eof($s) {
 $s = $s | 0;
 var $12 = 0, $retval = 0, $s$addr = 0, sp = 0, CSE$0 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $retval = sp + 4 | 0;
 $s$addr = sp;
 HEAP32[$s$addr >> 2] = $s;
 if (HEAP32[(HEAP32[$s$addr >> 2] | 0) + 16 >> 2] | 0) {
  if (!(FUNCTION_TABLE_ii[HEAP32[(HEAP32[$s$addr >> 2] | 0) + 16 + 8 >> 2] & 127](HEAP32[(HEAP32[$s$addr >> 2] | 0) + 28 >> 2] | 0) | 0)) {
   HEAP32[$retval >> 2] = 0;
   $12 = HEAP32[$retval >> 2] | 0;
   STACKTOP = sp;
   return $12 | 0;
  }
  if (!(HEAP32[(HEAP32[$s$addr >> 2] | 0) + 32 >> 2] | 0)) {
   HEAP32[$retval >> 2] = 1;
   $12 = HEAP32[$retval >> 2] | 0;
   STACKTOP = sp;
   return $12 | 0;
  }
 }
 CSE$0 = HEAP32[$s$addr >> 2] | 0;
 HEAP32[$retval >> 2] = (HEAP32[CSE$0 + 168 >> 2] | 0) >>> 0 >= (HEAP32[CSE$0 + 172 >> 2] | 0) >>> 0 & 1;
 $12 = HEAP32[$retval >> 2] | 0;
 STACKTOP = sp;
 return $12 | 0;
}

function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE9__get_dayERiRS4_S4_RjRKNS_5ctypeIwEE($this, $__d, $__b, $__e, $__err, $__ct) {
 $this = $this | 0;
 $__d = $__d | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__err = $__err | 0;
 $__ct = $__ct | 0;
 var $1 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $agg$tmp$byval_copy = sp + 4 | 0;
 $agg$tmp = sp;
 HEAP32[$agg$tmp >> 2] = HEAP32[$__e >> 2];
 HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 $call = __ZNSt3__220__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, $agg$tmp$byval_copy, $__err, $__ct, 2) | 0;
 $1 = HEAP32[$__err >> 2] | 0;
 if (($call + -1 | 0) >>> 0 < 31 & ($1 & 4 | 0) == 0) HEAP32[$__d >> 2] = $call; else HEAP32[$__err >> 2] = $1 | 4;
 STACKTOP = sp;
 return;
}

function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE18__get_day_year_numERiRS4_S4_RjRKNS_5ctypeIwEE($this, $__d, $__b, $__e, $__err, $__ct) {
 $this = $this | 0;
 $__d = $__d | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__err = $__err | 0;
 $__ct = $__ct | 0;
 var $1 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $agg$tmp$byval_copy = sp + 4 | 0;
 $agg$tmp = sp;
 HEAP32[$agg$tmp >> 2] = HEAP32[$__e >> 2];
 HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 $call = __ZNSt3__220__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, $agg$tmp$byval_copy, $__err, $__ct, 3) | 0;
 $1 = HEAP32[$__err >> 2] | 0;
 if (($call | 0) < 366 & ($1 & 4 | 0) == 0) HEAP32[$__d >> 2] = $call; else HEAP32[$__err >> 2] = $1 | 4;
 STACKTOP = sp;
 return;
}

function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE9__get_dayERiRS4_S4_RjRKNS_5ctypeIcEE($this, $__d, $__b, $__e, $__err, $__ct) {
 $this = $this | 0;
 $__d = $__d | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__err = $__err | 0;
 $__ct = $__ct | 0;
 var $1 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $agg$tmp$byval_copy = sp + 4 | 0;
 $agg$tmp = sp;
 HEAP32[$agg$tmp >> 2] = HEAP32[$__e >> 2];
 HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 $call = __ZNSt3__220__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, $agg$tmp$byval_copy, $__err, $__ct, 2) | 0;
 $1 = HEAP32[$__err >> 2] | 0;
 if (($call + -1 | 0) >>> 0 < 31 & ($1 & 4 | 0) == 0) HEAP32[$__d >> 2] = $call; else HEAP32[$__err >> 2] = $1 | 4;
 STACKTOP = sp;
 return;
}

function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE18__get_day_year_numERiRS4_S4_RjRKNS_5ctypeIcEE($this, $__d, $__b, $__e, $__err, $__ct) {
 $this = $this | 0;
 $__d = $__d | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__err = $__err | 0;
 $__ct = $__ct | 0;
 var $1 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $agg$tmp$byval_copy = sp + 4 | 0;
 $agg$tmp = sp;
 HEAP32[$agg$tmp >> 2] = HEAP32[$__e >> 2];
 HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 $call = __ZNSt3__220__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, $agg$tmp$byval_copy, $__err, $__ct, 3) | 0;
 $1 = HEAP32[$__err >> 2] | 0;
 if (($call | 0) < 366 & ($1 & 4 | 0) == 0) HEAP32[$__d >> 2] = $call; else HEAP32[$__err >> 2] = $1 | 4;
 STACKTOP = sp;
 return;
}

function __ZNSt3__213__vector_baseIN8nlohmann10basic_jsonINS_3mapENS_6vectorENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEbxydS8_NS1_14adl_serializerEEENS8_ISC_EEED2Ev($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $3 = 0, $__end_$i = 0, $__soon_to_be_end$0$i3 = 0;
 $0 = HEAP32[$this >> 2] | 0;
 if ($0 | 0) {
  $__end_$i = $this + 4 | 0;
  $1 = HEAP32[$__end_$i >> 2] | 0;
  if (($1 | 0) == ($0 | 0)) $3 = $0; else {
   $__soon_to_be_end$0$i3 = $1;
   do {
    $__soon_to_be_end$0$i3 = $__soon_to_be_end$0$i3 + -16 | 0;
    __ZN8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEED2Ev($__soon_to_be_end$0$i3);
   } while (($__soon_to_be_end$0$i3 | 0) != ($0 | 0));
   $3 = HEAP32[$this >> 2] | 0;
  }
  HEAP32[$__end_$i >> 2] = $0;
  __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm($3, (HEAP32[$this + 8 >> 2] | 0) - $3 | 0);
 }
 return;
}

function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_monthERiRS4_S4_RjRKNS_5ctypeIwEE($this, $__m, $__b, $__e, $__err, $__ct) {
 $this = $this | 0;
 $__m = $__m | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__err = $__err | 0;
 $__ct = $__ct | 0;
 var $1 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $agg$tmp$byval_copy = sp + 4 | 0;
 $agg$tmp = sp;
 HEAP32[$agg$tmp >> 2] = HEAP32[$__e >> 2];
 HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 $call = __ZNSt3__220__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, $agg$tmp$byval_copy, $__err, $__ct, 2) | 0;
 $1 = HEAP32[$__err >> 2] | 0;
 if (($call | 0) < 13 & ($1 & 4 | 0) == 0) HEAP32[$__m >> 2] = $call + -1; else HEAP32[$__err >> 2] = $1 | 4;
 STACKTOP = sp;
 return;
}

function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_monthERiRS4_S4_RjRKNS_5ctypeIcEE($this, $__m, $__b, $__e, $__err, $__ct) {
 $this = $this | 0;
 $__m = $__m | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__err = $__err | 0;
 $__ct = $__ct | 0;
 var $1 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $agg$tmp$byval_copy = sp + 4 | 0;
 $agg$tmp = sp;
 HEAP32[$agg$tmp >> 2] = HEAP32[$__e >> 2];
 HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 $call = __ZNSt3__220__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, $agg$tmp$byval_copy, $__err, $__ct, 2) | 0;
 $1 = HEAP32[$__err >> 2] | 0;
 if (($call | 0) < 13 & ($1 & 4 | 0) == 0) HEAP32[$__m >> 2] = $call + -1; else HEAP32[$__err >> 2] = $1 | 4;
 STACKTOP = sp;
 return;
}

function _scalbn($x, $n) {
 $x = +$x;
 $n = $n | 0;
 var $2 = 0, $3 = 0, $add14 = 0, $cmp1 = 0, $cmp11 = 0, $mul = 0.0, $mul10 = 0.0, $n$addr$0 = 0, $sub4 = 0, $y$0 = 0.0;
 if (($n | 0) > 1023) {
  $mul = $x * 8988465674311579538646525.0e283;
  $cmp1 = ($n | 0) > 2046;
  $sub4 = $n + -2046 | 0;
  $n$addr$0 = $cmp1 ? (($sub4 | 0) < 1023 ? $sub4 : 1023) : $n + -1023 | 0;
  $y$0 = $cmp1 ? $mul * 8988465674311579538646525.0e283 : $mul;
 } else if (($n | 0) < -1022) {
  $mul10 = $x * 2.2250738585072014e-308;
  $cmp11 = ($n | 0) < -2044;
  $add14 = $n + 2044 | 0;
  $n$addr$0 = $cmp11 ? (($add14 | 0) > -1022 ? $add14 : -1022) : $n + 1022 | 0;
  $y$0 = $cmp11 ? $mul10 * 2.2250738585072014e-308 : $mul10;
 } else {
  $n$addr$0 = $n;
  $y$0 = $x;
 }
 $2 = _bitshift64Shl($n$addr$0 + 1023 | 0, 0, 52) | 0;
 $3 = getTempRet0() | 0;
 HEAP32[tempDoublePtr >> 2] = $2;
 HEAP32[tempDoublePtr + 4 >> 2] = $3;
 return +($y$0 * +HEAPF64[tempDoublePtr >> 3]);
}

function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEmc($this, $__n, $__c) {
 $this = $this | 0;
 $__n = $__n | 0;
 $__c = $__c | 0;
 var $__p$0 = 0, $and$i$i = 0, $call$i$i$i = 0, $ref$tmp = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $ref$tmp = sp;
 if ($__n >>> 0 > 4294967279) __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($this);
 if ($__n >>> 0 < 11) {
  HEAP8[$this + 11 >> 0] = $__n;
  $__p$0 = $this;
 } else {
  $and$i$i = $__n + 16 & -16;
  $call$i$i$i = __Znwm($and$i$i) | 0;
  HEAP32[$this >> 2] = $call$i$i$i;
  HEAP32[$this + 8 >> 2] = $and$i$i | -2147483648;
  HEAP32[$this + 4 >> 2] = $__n;
  $__p$0 = $call$i$i$i;
 }
 __ZNSt3__211char_traitsIcE6assignEPcmc($__p$0, $__n, $__c) | 0;
 HEAP8[$ref$tmp >> 0] = 0;
 __ZNSt3__211char_traitsIcE6assignERcRKc($__p$0 + $__n | 0, $ref$tmp);
 STACKTOP = sp;
 return;
}

function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_weekdayERiRS4_S4_RjRKNS_5ctypeIwEE($this, $__w, $__b, $__e, $__err, $__ct) {
 $this = $this | 0;
 $__w = $__w | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__err = $__err | 0;
 $__ct = $__ct | 0;
 var $1 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $agg$tmp$byval_copy = sp + 4 | 0;
 $agg$tmp = sp;
 HEAP32[$agg$tmp >> 2] = HEAP32[$__e >> 2];
 HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 $call = __ZNSt3__220__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, $agg$tmp$byval_copy, $__err, $__ct, 1) | 0;
 $1 = HEAP32[$__err >> 2] | 0;
 if (($call | 0) < 7 & ($1 & 4 | 0) == 0) HEAP32[$__w >> 2] = $call; else HEAP32[$__err >> 2] = $1 | 4;
 STACKTOP = sp;
 return;
}

function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE12__get_secondERiRS4_S4_RjRKNS_5ctypeIwEE($this, $__s, $__b, $__e, $__err, $__ct) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__err = $__err | 0;
 $__ct = $__ct | 0;
 var $1 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $agg$tmp$byval_copy = sp + 4 | 0;
 $agg$tmp = sp;
 HEAP32[$agg$tmp >> 2] = HEAP32[$__e >> 2];
 HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 $call = __ZNSt3__220__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, $agg$tmp$byval_copy, $__err, $__ct, 2) | 0;
 $1 = HEAP32[$__err >> 2] | 0;
 if (($call | 0) < 61 & ($1 & 4 | 0) == 0) HEAP32[$__s >> 2] = $call; else HEAP32[$__err >> 2] = $1 | 4;
 STACKTOP = sp;
 return;
}

function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE12__get_minuteERiRS4_S4_RjRKNS_5ctypeIwEE($this, $__m, $__b, $__e, $__err, $__ct) {
 $this = $this | 0;
 $__m = $__m | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__err = $__err | 0;
 $__ct = $__ct | 0;
 var $1 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $agg$tmp$byval_copy = sp + 4 | 0;
 $agg$tmp = sp;
 HEAP32[$agg$tmp >> 2] = HEAP32[$__e >> 2];
 HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 $call = __ZNSt3__220__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, $agg$tmp$byval_copy, $__err, $__ct, 2) | 0;
 $1 = HEAP32[$__err >> 2] | 0;
 if (($call | 0) < 60 & ($1 & 4 | 0) == 0) HEAP32[$__m >> 2] = $call; else HEAP32[$__err >> 2] = $1 | 4;
 STACKTOP = sp;
 return;
}

function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_weekdayERiRS4_S4_RjRKNS_5ctypeIcEE($this, $__w, $__b, $__e, $__err, $__ct) {
 $this = $this | 0;
 $__w = $__w | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__err = $__err | 0;
 $__ct = $__ct | 0;
 var $1 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $agg$tmp$byval_copy = sp + 4 | 0;
 $agg$tmp = sp;
 HEAP32[$agg$tmp >> 2] = HEAP32[$__e >> 2];
 HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 $call = __ZNSt3__220__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, $agg$tmp$byval_copy, $__err, $__ct, 1) | 0;
 $1 = HEAP32[$__err >> 2] | 0;
 if (($call | 0) < 7 & ($1 & 4 | 0) == 0) HEAP32[$__w >> 2] = $call; else HEAP32[$__err >> 2] = $1 | 4;
 STACKTOP = sp;
 return;
}

function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE12__get_secondERiRS4_S4_RjRKNS_5ctypeIcEE($this, $__s, $__b, $__e, $__err, $__ct) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__err = $__err | 0;
 $__ct = $__ct | 0;
 var $1 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $agg$tmp$byval_copy = sp + 4 | 0;
 $agg$tmp = sp;
 HEAP32[$agg$tmp >> 2] = HEAP32[$__e >> 2];
 HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 $call = __ZNSt3__220__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, $agg$tmp$byval_copy, $__err, $__ct, 2) | 0;
 $1 = HEAP32[$__err >> 2] | 0;
 if (($call | 0) < 61 & ($1 & 4 | 0) == 0) HEAP32[$__s >> 2] = $call; else HEAP32[$__err >> 2] = $1 | 4;
 STACKTOP = sp;
 return;
}

function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE12__get_minuteERiRS4_S4_RjRKNS_5ctypeIcEE($this, $__m, $__b, $__e, $__err, $__ct) {
 $this = $this | 0;
 $__m = $__m | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__err = $__err | 0;
 $__ct = $__ct | 0;
 var $1 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $agg$tmp$byval_copy = sp + 4 | 0;
 $agg$tmp = sp;
 HEAP32[$agg$tmp >> 2] = HEAP32[$__e >> 2];
 HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 $call = __ZNSt3__220__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, $agg$tmp$byval_copy, $__err, $__ct, 2) | 0;
 $1 = HEAP32[$__err >> 2] | 0;
 if (($call | 0) < 60 & ($1 & 4 | 0) == 0) HEAP32[$__m >> 2] = $call; else HEAP32[$__err >> 2] = $1 | 4;
 STACKTOP = sp;
 return;
}

function __ZNSt3__26vectorIN4tson7TilesetENS_9allocatorIS2_EEE13__vdeallocateEv($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $3 = 0, $__end_$i$i$i = 0, $__soon_to_be_end$06$i$i$i = 0, $__value_$i$i$i$i$i = 0;
 $0 = HEAP32[$this >> 2] | 0;
 if ($0 | 0) {
  $__end_$i$i$i = $this + 4 | 0;
  $1 = HEAP32[$__end_$i$i$i >> 2] | 0;
  if (($1 | 0) == ($0 | 0)) $3 = $0; else {
   $__soon_to_be_end$06$i$i$i = $1;
   do {
    $__soon_to_be_end$06$i$i$i = $__soon_to_be_end$06$i$i$i + -164 | 0;
    __ZN4tson7TilesetD2Ev($__soon_to_be_end$06$i$i$i);
   } while (($__soon_to_be_end$06$i$i$i | 0) != ($0 | 0));
   $3 = HEAP32[$this >> 2] | 0;
  }
  HEAP32[$__end_$i$i$i >> 2] = $0;
  $__value_$i$i$i$i$i = $this + 8 | 0;
  __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm($3, (HEAP32[$__value_$i$i$i$i$i >> 2] | 0) - $3 | 0);
  HEAP32[$__value_$i$i$i$i$i >> 2] = 0;
  HEAP32[$__end_$i$i$i >> 2] = 0;
  HEAP32[$this >> 2] = 0;
 }
 return;
}

function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE10__get_hourERiRS4_S4_RjRKNS_5ctypeIwEE($this, $__h, $__b, $__e, $__err, $__ct) {
 $this = $this | 0;
 $__h = $__h | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__err = $__err | 0;
 $__ct = $__ct | 0;
 var $1 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $agg$tmp$byval_copy = sp + 4 | 0;
 $agg$tmp = sp;
 HEAP32[$agg$tmp >> 2] = HEAP32[$__e >> 2];
 HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 $call = __ZNSt3__220__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, $agg$tmp$byval_copy, $__err, $__ct, 2) | 0;
 $1 = HEAP32[$__err >> 2] | 0;
 if (($call | 0) < 24 & ($1 & 4 | 0) == 0) HEAP32[$__h >> 2] = $call; else HEAP32[$__err >> 2] = $1 | 4;
 STACKTOP = sp;
 return;
}

function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE10__get_hourERiRS4_S4_RjRKNS_5ctypeIcEE($this, $__h, $__b, $__e, $__err, $__ct) {
 $this = $this | 0;
 $__h = $__h | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__err = $__err | 0;
 $__ct = $__ct | 0;
 var $1 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $agg$tmp$byval_copy = sp + 4 | 0;
 $agg$tmp = sp;
 HEAP32[$agg$tmp >> 2] = HEAP32[$__e >> 2];
 HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 $call = __ZNSt3__220__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, $agg$tmp$byval_copy, $__err, $__ct, 2) | 0;
 $1 = HEAP32[$__err >> 2] | 0;
 if (($call | 0) < 24 & ($1 & 4 | 0) == 0) HEAP32[$__h >> 2] = $call; else HEAP32[$__err >> 2] = $1 | 4;
 STACKTOP = sp;
 return;
}

function __ZN4tson5Layer14createTileDataERKNS_7Vector2IiEEb($this, $mapSize, $isInfiniteMap) {
 $this = $this | 0;
 $mapSize = $mapSize | 0;
 $isInfiniteMap = $isInfiniteMap | 0;
 var $0 = 0, $1 = 0, $3 = 0, $agg$tmp63 = 0, $x = 0, $y = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $agg$tmp63 = sp;
 $x = sp + 20 | 0;
 $y = sp + 16 | 0;
 HEAP32[$x >> 2] = 0;
 HEAP32[$y >> 2] = 0;
 if (!$isInfiniteMap) {
  $0 = HEAP32[$this + 24 >> 2] | 0;
  $1 = HEAP32[$this + 28 >> 2] | 0;
  HEAP32[$agg$tmp63 >> 2] = $x;
  HEAP32[$agg$tmp63 + 4 >> 2] = $mapSize;
  HEAP32[$agg$tmp63 + 8 >> 2] = $y;
  HEAP32[$agg$tmp63 + 12 >> 2] = $this;
  if (($0 | 0) != ($1 | 0)) {
   $3 = $0;
   do {
    __ZZN4tson5Layer14createTileDataERKNS_7Vector2IiEEbENKUliE_clEi($agg$tmp63, HEAP32[$3 >> 2] | 0);
    $3 = $3 + 4 | 0;
   } while (($3 | 0) != ($1 | 0));
  }
 }
 STACKTOP = sp;
 return;
}

function ___fflush_unlocked($f) {
 $f = $f | 0;
 var $4 = 0, $5 = 0, $rend = 0, $retval$0 = 0, $rpos = 0, $sub$ptr$sub = 0, $wbase = 0, $wpos = 0, label = 0;
 label = 0;
 $wpos = $f + 20 | 0;
 $wbase = $f + 28 | 0;
 if ((HEAP32[$wpos >> 2] | 0) >>> 0 > (HEAP32[$wbase >> 2] | 0) >>> 0) {
  FUNCTION_TABLE_iiii[HEAP32[$f + 36 >> 2] & 63]($f, 0, 0) | 0;
  if (!(HEAP32[$wpos >> 2] | 0)) $retval$0 = -1; else label = 3;
 } else label = 3;
 if ((label | 0) == 3) {
  $rpos = $f + 4 | 0;
  $4 = HEAP32[$rpos >> 2] | 0;
  $rend = $f + 8 | 0;
  $5 = HEAP32[$rend >> 2] | 0;
  if ($4 >>> 0 < $5 >>> 0) {
   $sub$ptr$sub = $4 - $5 | 0;
   FUNCTION_TABLE_iiiii[HEAP32[$f + 40 >> 2] & 15]($f, $sub$ptr$sub, (($sub$ptr$sub | 0) < 0) << 31 >> 31, 1) | 0;
   getTempRet0() | 0;
  }
  HEAP32[$f + 16 >> 2] = 0;
  HEAP32[$wbase >> 2] = 0;
  HEAP32[$wpos >> 2] = 0;
  HEAP32[$rend >> 2] = 0;
  HEAP32[$rpos >> 2] = 0;
  $retval$0 = 0;
 }
 return $retval$0 | 0;
}

function __ZNSt3__26vectorIN4tson6ObjectENS_9allocatorIS2_EEE13__vdeallocateEv($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $3 = 0, $__end_$i$i$i = 0, $__soon_to_be_end$06$i$i$i = 0, $__value_$i$i$i$i$i = 0;
 $0 = HEAP32[$this >> 2] | 0;
 if ($0 | 0) {
  $__end_$i$i$i = $this + 4 | 0;
  $1 = HEAP32[$__end_$i$i$i >> 2] | 0;
  if (($1 | 0) == ($0 | 0)) $3 = $0; else {
   $__soon_to_be_end$06$i$i$i = $1;
   do {
    $__soon_to_be_end$06$i$i$i = $__soon_to_be_end$06$i$i$i + -140 | 0;
    __ZN4tson6ObjectD2Ev($__soon_to_be_end$06$i$i$i);
   } while (($__soon_to_be_end$06$i$i$i | 0) != ($0 | 0));
   $3 = HEAP32[$this >> 2] | 0;
  }
  HEAP32[$__end_$i$i$i >> 2] = $0;
  $__value_$i$i$i$i$i = $this + 8 | 0;
  __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm($3, (HEAP32[$__value_$i$i$i$i$i >> 2] | 0) - $3 | 0);
  HEAP32[$__value_$i$i$i$i$i >> 2] = 0;
  HEAP32[$__end_$i$i$i >> 2] = 0;
  HEAP32[$this >> 2] = 0;
 }
 return;
}

function __ZNSt3__26vectorIN8nlohmann10basic_jsonINS_3mapES0_NS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEbxydS7_NS1_14adl_serializerEEENS7_ISB_EEE18__construct_at_endIPSB_EENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESH_SH_m($this, $__first, $__last, $__n) {
 $this = $this | 0;
 $__first = $__first | 0;
 $__last = $__last | 0;
 $__n = $__n | 0;
 var $0 = 0, $__begin1$addr$0$i3 = 0, $__end_ = 0;
 $__end_ = $this + 4 | 0;
 if (($__first | 0) != ($__last | 0)) {
  $0 = HEAP32[$__end_ >> 2] | 0;
  $__begin1$addr$0$i3 = $__first;
  do {
   __ZN8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEC2ERKSB_($0, $__begin1$addr$0$i3);
   $__begin1$addr$0$i3 = $__begin1$addr$0$i3 + 16 | 0;
   $0 = (HEAP32[$__end_ >> 2] | 0) + 16 | 0;
   HEAP32[$__end_ >> 2] = $0;
  } while (($__begin1$addr$0$i3 | 0) != ($__last | 0));
 }
 return;
}

function __ZNSt3__26vectorIN4tson5LayerENS_9allocatorIS2_EEE13__vdeallocateEv($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $3 = 0, $__end_$i$i$i = 0, $__soon_to_be_end$0$i2$i$i = 0, $__value_$i$i$i$i$i = 0;
 $0 = HEAP32[$this >> 2] | 0;
 if ($0 | 0) {
  $__end_$i$i$i = $this + 4 | 0;
  $1 = HEAP32[$__end_$i$i$i >> 2] | 0;
  if (($1 | 0) == ($0 | 0)) $3 = $0; else {
   $__soon_to_be_end$0$i2$i$i = $1;
   do {
    $__soon_to_be_end$0$i2$i$i = $__soon_to_be_end$0$i2$i$i + -220 | 0;
    __ZN4tson5LayerD2Ev($__soon_to_be_end$0$i2$i$i);
   } while (($__soon_to_be_end$0$i2$i$i | 0) != ($0 | 0));
   $3 = HEAP32[$this >> 2] | 0;
  }
  HEAP32[$__end_$i$i$i >> 2] = $0;
  $__value_$i$i$i$i$i = $this + 8 | 0;
  __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm($3, (HEAP32[$__value_$i$i$i$i$i >> 2] | 0) - $3 | 0);
  HEAP32[$__value_$i$i$i$i$i >> 2] = 0;
  HEAP32[$__end_$i$i$i >> 2] = 0;
  HEAP32[$this >> 2] = 0;
 }
 return;
}

function __ZNSt3__26vectorIN4tson5ChunkENS_9allocatorIS2_EEE13__vdeallocateEv($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $3 = 0, $__end_$i$i$i = 0, $__soon_to_be_end$06$i$i$i = 0, $__value_$i$i$i$i$i = 0;
 $0 = HEAP32[$this >> 2] | 0;
 if ($0 | 0) {
  $__end_$i$i$i = $this + 4 | 0;
  $1 = HEAP32[$__end_$i$i$i >> 2] | 0;
  if (($1 | 0) == ($0 | 0)) $3 = $0; else {
   $__soon_to_be_end$06$i$i$i = $1;
   do {
    $__soon_to_be_end$06$i$i$i = $__soon_to_be_end$06$i$i$i + -40 | 0;
    __ZN4tson5ChunkD2Ev($__soon_to_be_end$06$i$i$i);
   } while (($__soon_to_be_end$06$i$i$i | 0) != ($0 | 0));
   $3 = HEAP32[$this >> 2] | 0;
  }
  HEAP32[$__end_$i$i$i >> 2] = $0;
  $__value_$i$i$i$i$i = $this + 8 | 0;
  __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm($3, (HEAP32[$__value_$i$i$i$i$i >> 2] | 0) - $3 | 0);
  HEAP32[$__value_$i$i$i$i$i >> 2] = 0;
  HEAP32[$__end_$i$i$i >> 2] = 0;
  HEAP32[$this >> 2] = 0;
 }
 return;
}

function _stbir__decode_and_resample_upsample($stbir_info, $n) {
 $stbir_info = $stbir_info | 0;
 $n = $n | 0;
 var $3 = 0, $call1 = 0, $n$addr = 0, $stbir_info$addr = 0, $tobool = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $stbir_info$addr = sp + 4 | 0;
 $n$addr = sp;
 HEAP32[$stbir_info$addr >> 2] = $stbir_info;
 HEAP32[$n$addr >> 2] = $n;
 _stbir__decode_scanline(HEAP32[$stbir_info$addr >> 2] | 0, HEAP32[$n$addr >> 2] | 0);
 $tobool = (_stbir__use_width_upsampling(HEAP32[$stbir_info$addr >> 2] | 0) | 0) != 0;
 $3 = HEAP32[$stbir_info$addr >> 2] | 0;
 $call1 = _stbir__add_empty_ring_buffer_entry(HEAP32[$stbir_info$addr >> 2] | 0, HEAP32[$n$addr >> 2] | 0) | 0;
 if ($tobool) {
  _stbir__resample_horizontal_upsample($3, $call1);
  STACKTOP = sp;
  return;
 } else {
  _stbir__resample_horizontal_downsample($3, $call1);
  STACKTOP = sp;
  return;
 }
}

function _GetGlyphIndex($font, $codepoint) {
 $font = $font | 0;
 $codepoint = $codepoint | 0;
 var $6 = 0, $7 = 0, $codepoint$addr = 0, $i = 0, $index = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $codepoint$addr = sp + 8 | 0;
 $index = sp + 4 | 0;
 $i = sp;
 HEAP32[$codepoint$addr >> 2] = $codepoint;
 HEAP32[$index >> 2] = 63;
 HEAP32[$i >> 2] = 0;
 while (1) {
  if ((HEAP32[$i >> 2] | 0) >= (HEAP32[$font + 4 >> 2] | 0)) {
   label = 6;
   break;
  }
  $6 = HEAP32[$i >> 2] | 0;
  if ((HEAP32[(HEAP32[$font + 32 >> 2] | 0) + ((HEAP32[$i >> 2] | 0) * 36 | 0) >> 2] | 0) == (HEAP32[$codepoint$addr >> 2] | 0)) break;
  HEAP32[$i >> 2] = $6 + 1;
 }
 if ((label | 0) == 6) {
  $7 = HEAP32[$index >> 2] | 0;
  STACKTOP = sp;
  return $7 | 0;
 }
 HEAP32[$index >> 2] = $6;
 $7 = HEAP32[$index >> 2] | 0;
 STACKTOP = sp;
 return $7 | 0;
}

function __ZNSt3__214__split_bufferIN8nlohmann10basic_jsonINS_3mapENS_6vectorENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEbxydS8_NS1_14adl_serializerEEERNS8_ISC_EEED2Ev($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $2 = 0, $4 = 0, $__end_$i$i$i = 0, $incdec$ptr$i$i$i = 0;
 $0 = HEAP32[$this + 4 >> 2] | 0;
 $__end_$i$i$i = $this + 8 | 0;
 $1 = HEAP32[$__end_$i$i$i >> 2] | 0;
 if (($1 | 0) != ($0 | 0)) {
  $2 = $1;
  do {
   $incdec$ptr$i$i$i = $2 + -16 | 0;
   HEAP32[$__end_$i$i$i >> 2] = $incdec$ptr$i$i$i;
   __ZN8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEED2Ev($incdec$ptr$i$i$i);
   $2 = HEAP32[$__end_$i$i$i >> 2] | 0;
  } while (($2 | 0) != ($0 | 0));
 }
 $4 = HEAP32[$this >> 2] | 0;
 if ($4 | 0) __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm($4, (HEAP32[$this + 12 >> 2] | 0) - $4 | 0);
 return;
}

function _stbi__check_png_header($s) {
 $s = $s | 0;
 var $5 = 0, $conv = 0, $i = 0, $retval = 0, $s$addr = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $retval = sp + 8 | 0;
 $s$addr = sp + 4 | 0;
 $i = sp;
 HEAP32[$s$addr >> 2] = $s;
 HEAP32[$i >> 2] = 0;
 while (1) {
  if ((HEAP32[$i >> 2] | 0) >= 8) {
   label = 6;
   break;
  }
  $conv = (_stbi__get8(HEAP32[$s$addr >> 2] | 0) | 0) & 255;
  if (($conv | 0) != (HEAPU8[34155 + (HEAP32[$i >> 2] | 0) >> 0] | 0 | 0)) {
   label = 4;
   break;
  }
  HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
 }
 if ((label | 0) == 4) {
  HEAP32[$retval >> 2] = _stbi__err(34028) | 0;
  $5 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $5 | 0;
 } else if ((label | 0) == 6) {
  HEAP32[$retval >> 2] = 1;
  $5 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $5 | 0;
 }
 return 0;
}

function __ZNSt3__26__treeINS_12__value_typeINS_5tupleIJiiEEEPN4tson4TileEEENS_19__map_value_compareIS3_S7_NS_4lessIS3_EELb1EEENS_9allocatorIS7_EEE16__insert_node_atEPNS_15__tree_end_nodeIPNS_16__tree_node_baseIPvEEEERSJ_SJ_($this, $__parent, $__child, $__new_node) {
 $this = $this | 0;
 $__parent = $__parent | 0;
 $__child = $__child | 0;
 $__new_node = $__new_node | 0;
 var $1 = 0, $4 = 0, $__value_$i$i$i = 0;
 HEAP32[$__new_node >> 2] = 0;
 HEAP32[$__new_node + 4 >> 2] = 0;
 HEAP32[$__new_node + 8 >> 2] = $__parent;
 HEAP32[$__child >> 2] = $__new_node;
 $1 = HEAP32[HEAP32[$this >> 2] >> 2] | 0;
 if (!$1) $4 = $__new_node; else {
  HEAP32[$this >> 2] = $1;
  $4 = HEAP32[$__child >> 2] | 0;
 }
 __ZNSt3__227__tree_balance_after_insertIPNS_16__tree_node_baseIPvEEEEvT_S5_(HEAP32[$this + 4 >> 2] | 0, $4);
 $__value_$i$i$i = $this + 8 | 0;
 HEAP32[$__value_$i$i$i >> 2] = (HEAP32[$__value_$i$i$i >> 2] | 0) + 1;
 return;
}

function __ZNSt3__23mapINS_5tupleIJiiEEEPN4tson4TileENS_4lessIS2_EENS_9allocatorINS_4pairIKS2_S5_EEEEEixEOS2_($this, $__k) {
 $this = $this | 0;
 $__k = $__k | 0;
 var $ref$tmp = 0, $ref$tmp2 = 0, $second = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $ref$tmp = sp + 8 | 0;
 $ref$tmp2 = sp;
 HEAP32[$ref$tmp2 >> 2] = $__k;
 __ZNSt3__26__treeINS_12__value_typeINS_5tupleIJiiEEEPN4tson4TileEEENS_19__map_value_compareIS3_S7_NS_4lessIS3_EELb1EEENS_9allocatorIS7_EEE25__emplace_unique_key_argsIS3_JRKNS_21piecewise_construct_tENS2_IJOS3_EEENS2_IJEEEEEENS_4pairINS_15__tree_iteratorIS7_PNS_11__tree_nodeIS7_PvEElEEbEERKT_DpOT0_($ref$tmp, $this, $__k, 62140, $ref$tmp2, sp + 16 | 0);
 $second = (__ZNSt3__29__launderINS_4pairIKNS_5tupleIJiiEEEPN4tson4TileEEEEEPT_SA_((HEAP32[$ref$tmp >> 2] | 0) + 16 | 0) | 0) + 8 | 0;
 STACKTOP = sp;
 return $second | 0;
}

function _GetTouchPosition($agg$result, $index) {
 $agg$result = $agg$result | 0;
 $index = $index | 0;
 var $arrayidx = 0, $index$addr = 0, $position = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $vararg_buffer = sp;
 $index$addr = sp + 16 | 0;
 $position = sp + 8 | 0;
 HEAP32[$index$addr >> 2] = $index;
 HEAP32[$position >> 2] = HEAP32[4481];
 HEAP32[$position + 4 >> 2] = HEAP32[4482];
 if ((HEAP32[$index$addr >> 2] | 0) < 10) {
  $arrayidx = 47456 + (HEAP32[$index$addr >> 2] << 3) | 0;
  HEAP32[$position >> 2] = HEAP32[$arrayidx >> 2];
  HEAP32[$position + 4 >> 2] = HEAP32[$arrayidx + 4 >> 2];
 } else {
  HEAP32[$vararg_buffer >> 2] = 10;
  _TraceLog(4, 31730, $vararg_buffer);
 };
 HEAP32[$agg$result >> 2] = HEAP32[$position >> 2];
 HEAP32[$agg$result + 4 >> 2] = HEAP32[$position + 4 >> 2];
 STACKTOP = sp;
 return;
}

function _stbi__zreceive($z, $n) {
 $z = $z | 0;
 $n = $n | 0;
 var $code_buffer1 = 0, $k = 0, $n$addr = 0, $num_bits2 = 0, $z$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $z$addr = sp + 8 | 0;
 $n$addr = sp + 4 | 0;
 $k = sp;
 HEAP32[$z$addr >> 2] = $z;
 HEAP32[$n$addr >> 2] = $n;
 if ((HEAP32[(HEAP32[$z$addr >> 2] | 0) + 8 >> 2] | 0) < (HEAP32[$n$addr >> 2] | 0)) _stbi__fill_bits(HEAP32[$z$addr >> 2] | 0);
 HEAP32[$k >> 2] = HEAP32[(HEAP32[$z$addr >> 2] | 0) + 12 >> 2] & (1 << HEAP32[$n$addr >> 2]) - 1;
 $code_buffer1 = (HEAP32[$z$addr >> 2] | 0) + 12 | 0;
 HEAP32[$code_buffer1 >> 2] = (HEAP32[$code_buffer1 >> 2] | 0) >>> (HEAP32[$n$addr >> 2] | 0);
 $num_bits2 = (HEAP32[$z$addr >> 2] | 0) + 8 | 0;
 HEAP32[$num_bits2 >> 2] = (HEAP32[$num_bits2 >> 2] | 0) - (HEAP32[$n$addr >> 2] | 0);
 STACKTOP = sp;
 return HEAP32[$k >> 2] | 0;
}

function __ZNSt3__214__split_bufferIN4tson9WangColorERNS_9allocatorIS2_EEEC2EmmS5_($this, $__cap, $__start, $__a) {
 $this = $this | 0;
 $__cap = $__cap | 0;
 $__start = $__start | 0;
 $__a = $__a | 0;
 var $__value_$i1$i = 0, $add$ptr = 0, $cond = 0, $exception$i$i$i = 0;
 $__value_$i1$i = $this + 12 | 0;
 HEAP32[$__value_$i1$i >> 2] = 0;
 HEAP32[$this + 16 >> 2] = $__a;
 do if (!$__cap) $cond = 0; else if ($__cap >>> 0 > 178956970) {
  $exception$i$i$i = ___cxa_allocate_exception(8) | 0;
  __ZNSt11logic_errorC2EPKc($exception$i$i$i, 22952);
  HEAP32[$exception$i$i$i >> 2] = 18488;
  ___cxa_throw($exception$i$i$i | 0, 15856, 33);
 } else {
  $cond = __Znwm($__cap * 24 | 0) | 0;
  break;
 } while (0);
 HEAP32[$this >> 2] = $cond;
 $add$ptr = $cond + ($__start * 24 | 0) | 0;
 HEAP32[$this + 8 >> 2] = $add$ptr;
 HEAP32[$this + 4 >> 2] = $add$ptr;
 HEAP32[$__value_$i1$i >> 2] = $cond + ($__cap * 24 | 0);
 return;
}

function __ZNSt3__214__split_bufferIN4tson7TilesetERNS_9allocatorIS2_EEEC2EmmS5_($this, $__cap, $__start, $__a) {
 $this = $this | 0;
 $__cap = $__cap | 0;
 $__start = $__start | 0;
 $__a = $__a | 0;
 var $__value_$i1$i = 0, $add$ptr = 0, $cond = 0, $exception$i$i$i = 0;
 $__value_$i1$i = $this + 12 | 0;
 HEAP32[$__value_$i1$i >> 2] = 0;
 HEAP32[$this + 16 >> 2] = $__a;
 do if (!$__cap) $cond = 0; else if ($__cap >>> 0 > 26188824) {
  $exception$i$i$i = ___cxa_allocate_exception(8) | 0;
  __ZNSt11logic_errorC2EPKc($exception$i$i$i, 22952);
  HEAP32[$exception$i$i$i >> 2] = 18488;
  ___cxa_throw($exception$i$i$i | 0, 15856, 33);
 } else {
  $cond = __Znwm($__cap * 164 | 0) | 0;
  break;
 } while (0);
 HEAP32[$this >> 2] = $cond;
 $add$ptr = $cond + ($__start * 164 | 0) | 0;
 HEAP32[$this + 8 >> 2] = $add$ptr;
 HEAP32[$this + 4 >> 2] = $add$ptr;
 HEAP32[$__value_$i1$i >> 2] = $cond + ($__cap * 164 | 0);
 return;
}

function __ZNKSt3__27collateIcE10do_compareEPKcS3_S3_S3_($this, $__lo1, $__hi1, $__lo2, $__hi2) {
 $this = $this | 0;
 $__lo1 = $__lo1 | 0;
 $__hi1 = $__hi1 | 0;
 $__lo2 = $__lo2 | 0;
 $__hi2 = $__hi2 | 0;
 var $0 = 0, $1 = 0, $__lo1$addr$0 = 0, $__lo2$addr$0 = 0, $retval$0 = 0, label = 0;
 label = 0;
 $__lo1$addr$0 = $__lo1;
 $__lo2$addr$0 = $__lo2;
 while (1) {
  if (($__lo2$addr$0 | 0) == ($__hi2 | 0)) {
   label = 7;
   break;
  }
  if (($__lo1$addr$0 | 0) == ($__hi1 | 0)) {
   $retval$0 = -1;
   break;
  }
  $0 = HEAP8[$__lo1$addr$0 >> 0] | 0;
  $1 = HEAP8[$__lo2$addr$0 >> 0] | 0;
  if ($0 << 24 >> 24 < $1 << 24 >> 24) {
   $retval$0 = -1;
   break;
  }
  if ($1 << 24 >> 24 < $0 << 24 >> 24) {
   $retval$0 = 1;
   break;
  }
  $__lo1$addr$0 = $__lo1$addr$0 + 1 | 0;
  $__lo2$addr$0 = $__lo2$addr$0 + 1 | 0;
 }
 if ((label | 0) == 7) $retval$0 = ($__lo1$addr$0 | 0) != ($__hi1 | 0) & 1;
 return $retval$0 | 0;
}

function __ZN8nlohmann6detail28json_sax_dom_callback_parserINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEED2Ev($this) {
 $this = $this | 0;
 __ZN8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEED2Ev($this + 72 | 0);
 __ZNSt3__28functionIFbiN8nlohmann6detail6parserINS1_10basic_jsonINS_3mapENS_6vectorENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEbxydSA_NS1_14adl_serializerEEEE13parse_event_tERSE_EED2Ev($this + 48 | 0);
 __ZNSt3__26vectorIbNS_9allocatorIbEEED2Ev($this + 28 | 0);
 __ZNSt3__26vectorIbNS_9allocatorIbEEED2Ev($this + 16 | 0);
 __ZNSt3__213__vector_baseIPN8nlohmann10basic_jsonINS_3mapENS_6vectorENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEbxydS8_NS1_14adl_serializerEEENS8_ISD_EEED2Ev($this + 4 | 0);
 return;
}

function _stbi__malloc_mad2($a, $b, $add) {
 $a = $a | 0;
 $b = $b | 0;
 $add = $add | 0;
 var $6 = 0, $a$addr = 0, $add$addr = 0, $b$addr = 0, $mul = 0, $retval = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $retval = sp + 12 | 0;
 $a$addr = sp + 8 | 0;
 $b$addr = sp + 4 | 0;
 $add$addr = sp;
 HEAP32[$a$addr >> 2] = $a;
 HEAP32[$b$addr >> 2] = $b;
 HEAP32[$add$addr >> 2] = $add;
 if (_stbi__mad2sizes_valid(HEAP32[$a$addr >> 2] | 0, HEAP32[$b$addr >> 2] | 0, HEAP32[$add$addr >> 2] | 0) | 0) {
  $mul = Math_imul(HEAP32[$a$addr >> 2] | 0, HEAP32[$b$addr >> 2] | 0) | 0;
  HEAP32[$retval >> 2] = _stbi__malloc($mul + (HEAP32[$add$addr >> 2] | 0) | 0) | 0;
  $6 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $6 | 0;
 } else {
  HEAP32[$retval >> 2] = 0;
  $6 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $6 | 0;
 }
 return 0;
}

function __ZNSt3__214__split_bufferIN4tson8WangTileERNS_9allocatorIS2_EEEC2EmmS5_($this, $__cap, $__start, $__a) {
 $this = $this | 0;
 $__cap = $__cap | 0;
 $__start = $__start | 0;
 $__a = $__a | 0;
 var $__value_$i1$i = 0, $add$ptr = 0, $cond = 0, $exception$i$i$i = 0;
 $__value_$i1$i = $this + 12 | 0;
 HEAP32[$__value_$i1$i >> 2] = 0;
 HEAP32[$this + 16 >> 2] = $__a;
 do if (!$__cap) $cond = 0; else if ($__cap >>> 0 > 178956970) {
  $exception$i$i$i = ___cxa_allocate_exception(8) | 0;
  __ZNSt11logic_errorC2EPKc($exception$i$i$i, 22952);
  HEAP32[$exception$i$i$i >> 2] = 18488;
  ___cxa_throw($exception$i$i$i | 0, 15856, 33);
 } else {
  $cond = __Znwm($__cap * 24 | 0) | 0;
  break;
 } while (0);
 HEAP32[$this >> 2] = $cond;
 $add$ptr = $cond + ($__start * 24 | 0) | 0;
 HEAP32[$this + 8 >> 2] = $add$ptr;
 HEAP32[$this + 4 >> 2] = $add$ptr;
 HEAP32[$__value_$i1$i >> 2] = $cond + ($__cap * 24 | 0);
 return;
}

function __ZNSt3__214__split_bufferIN4tson6ObjectERNS_9allocatorIS2_EEEC2EmmS5_($this, $__cap, $__start, $__a) {
 $this = $this | 0;
 $__cap = $__cap | 0;
 $__start = $__start | 0;
 $__a = $__a | 0;
 var $__value_$i1$i = 0, $add$ptr = 0, $cond = 0, $exception$i$i$i = 0;
 $__value_$i1$i = $this + 12 | 0;
 HEAP32[$__value_$i1$i >> 2] = 0;
 HEAP32[$this + 16 >> 2] = $__a;
 do if (!$__cap) $cond = 0; else if ($__cap >>> 0 > 30678337) {
  $exception$i$i$i = ___cxa_allocate_exception(8) | 0;
  __ZNSt11logic_errorC2EPKc($exception$i$i$i, 22952);
  HEAP32[$exception$i$i$i >> 2] = 18488;
  ___cxa_throw($exception$i$i$i | 0, 15856, 33);
 } else {
  $cond = __Znwm($__cap * 140 | 0) | 0;
  break;
 } while (0);
 HEAP32[$this >> 2] = $cond;
 $add$ptr = $cond + ($__start * 140 | 0) | 0;
 HEAP32[$this + 8 >> 2] = $add$ptr;
 HEAP32[$this + 4 >> 2] = $add$ptr;
 HEAP32[$__value_$i1$i >> 2] = $cond + ($__cap * 140 | 0);
 return;
}

function __ZNSt3__214__split_bufferIN4tson7TerrainERNS_9allocatorIS2_EEEC2EmmS5_($this, $__cap, $__start, $__a) {
 $this = $this | 0;
 $__cap = $__cap | 0;
 $__start = $__start | 0;
 $__a = $__a | 0;
 var $__value_$i1$i = 0, $add$ptr = 0, $cond = 0, $exception$i$i$i = 0;
 $__value_$i1$i = $this + 12 | 0;
 HEAP32[$__value_$i1$i >> 2] = 0;
 HEAP32[$this + 16 >> 2] = $__a;
 do if (!$__cap) $cond = 0; else if ($__cap >>> 0 > 107374182) {
  $exception$i$i$i = ___cxa_allocate_exception(8) | 0;
  __ZNSt11logic_errorC2EPKc($exception$i$i$i, 22952);
  HEAP32[$exception$i$i$i >> 2] = 18488;
  ___cxa_throw($exception$i$i$i | 0, 15856, 33);
 } else {
  $cond = __Znwm($__cap * 40 | 0) | 0;
  break;
 } while (0);
 HEAP32[$this >> 2] = $cond;
 $add$ptr = $cond + ($__start * 40 | 0) | 0;
 HEAP32[$this + 8 >> 2] = $add$ptr;
 HEAP32[$this + 4 >> 2] = $add$ptr;
 HEAP32[$__value_$i1$i >> 2] = $cond + ($__cap * 40 | 0);
 return;
}

function __ZNSt3__214__split_bufferIN4tson5LayerERNS_9allocatorIS2_EEEC2EmmS5_($this, $__cap, $__start, $__a) {
 $this = $this | 0;
 $__cap = $__cap | 0;
 $__start = $__start | 0;
 $__a = $__a | 0;
 var $__value_$i1$i = 0, $add$ptr = 0, $cond = 0, $exception$i$i$i = 0;
 $__value_$i1$i = $this + 12 | 0;
 HEAP32[$__value_$i1$i >> 2] = 0;
 HEAP32[$this + 16 >> 2] = $__a;
 do if (!$__cap) $cond = 0; else if ($__cap >>> 0 > 19522578) {
  $exception$i$i$i = ___cxa_allocate_exception(8) | 0;
  __ZNSt11logic_errorC2EPKc($exception$i$i$i, 22952);
  HEAP32[$exception$i$i$i >> 2] = 18488;
  ___cxa_throw($exception$i$i$i | 0, 15856, 33);
 } else {
  $cond = __Znwm($__cap * 220 | 0) | 0;
  break;
 } while (0);
 HEAP32[$this >> 2] = $cond;
 $add$ptr = $cond + ($__start * 220 | 0) | 0;
 HEAP32[$this + 8 >> 2] = $add$ptr;
 HEAP32[$this + 4 >> 2] = $add$ptr;
 HEAP32[$__value_$i1$i >> 2] = $cond + ($__cap * 220 | 0);
 return;
}

function _frexp($x, $e) {
 $x = +$x;
 $e = $e | 0;
 var $0 = 0, $1 = 0, $2 = 0, $call = 0.0, $retval$0 = 0.0, $storemerge = 0, $x$addr$0 = 0.0;
 HEAPF64[tempDoublePtr >> 3] = $x;
 $0 = HEAP32[tempDoublePtr >> 2] | 0;
 $1 = HEAP32[tempDoublePtr + 4 >> 2] | 0;
 $2 = _bitshift64Lshr($0 | 0, $1 | 0, 52) | 0;
 getTempRet0() | 0;
 switch ($2 & 2047) {
 case 0:
  {
   if ($x != 0.0) {
    $call = +_frexp($x * 18446744073709551616.0, $e);
    $storemerge = (HEAP32[$e >> 2] | 0) + -64 | 0;
    $x$addr$0 = $call;
   } else {
    $storemerge = 0;
    $x$addr$0 = $x;
   }
   HEAP32[$e >> 2] = $storemerge;
   $retval$0 = $x$addr$0;
   break;
  }
 case 2047:
  {
   $retval$0 = $x;
   break;
  }
 default:
  {
   HEAP32[$e >> 2] = ($2 & 2047) + -1022;
   HEAP32[tempDoublePtr >> 2] = $0;
   HEAP32[tempDoublePtr + 4 >> 2] = $1 & -2146435073 | 1071644672;
   $retval$0 = +HEAPF64[tempDoublePtr >> 3];
  }
 }
 return +$retval$0;
}

function __ZNSt3__214__split_bufferIN4tson7WangSetERNS_9allocatorIS2_EEEC2EmmS5_($this, $__cap, $__start, $__a) {
 $this = $this | 0;
 $__cap = $__cap | 0;
 $__start = $__start | 0;
 $__a = $__a | 0;
 var $__value_$i1$i = 0, $add$ptr = 0, $cond = 0, $exception$i$i$i = 0;
 $__value_$i1$i = $this + 12 | 0;
 HEAP32[$__value_$i1$i >> 2] = 0;
 HEAP32[$this + 16 >> 2] = $__a;
 do if (!$__cap) $cond = 0; else if ($__cap >>> 0 > 56512727) {
  $exception$i$i$i = ___cxa_allocate_exception(8) | 0;
  __ZNSt11logic_errorC2EPKc($exception$i$i$i, 22952);
  HEAP32[$exception$i$i$i >> 2] = 18488;
  ___cxa_throw($exception$i$i$i | 0, 15856, 33);
 } else {
  $cond = __Znwm($__cap * 76 | 0) | 0;
  break;
 } while (0);
 HEAP32[$this >> 2] = $cond;
 $add$ptr = $cond + ($__start * 76 | 0) | 0;
 HEAP32[$this + 8 >> 2] = $add$ptr;
 HEAP32[$this + 4 >> 2] = $add$ptr;
 HEAP32[$__value_$i1$i >> 2] = $cond + ($__cap * 76 | 0);
 return;
}

function __ZNSt3__214__split_bufferIN4tson4TileERNS_9allocatorIS2_EEEC2EmmS5_($this, $__cap, $__start, $__a) {
 $this = $this | 0;
 $__cap = $__cap | 0;
 $__start = $__start | 0;
 $__a = $__a | 0;
 var $__value_$i1$i = 0, $add$ptr = 0, $cond = 0, $exception$i$i$i = 0;
 $__value_$i1$i = $this + 12 | 0;
 HEAP32[$__value_$i1$i >> 2] = 0;
 HEAP32[$this + 16 >> 2] = $__a;
 do if (!$__cap) $cond = 0; else if ($__cap >>> 0 > 14128181) {
  $exception$i$i$i = ___cxa_allocate_exception(8) | 0;
  __ZNSt11logic_errorC2EPKc($exception$i$i$i, 22952);
  HEAP32[$exception$i$i$i >> 2] = 18488;
  ___cxa_throw($exception$i$i$i | 0, 15856, 33);
 } else {
  $cond = __Znwm($__cap * 304 | 0) | 0;
  break;
 } while (0);
 HEAP32[$this >> 2] = $cond;
 $add$ptr = $cond + ($__start * 304 | 0) | 0;
 HEAP32[$this + 8 >> 2] = $add$ptr;
 HEAP32[$this + 4 >> 2] = $add$ptr;
 HEAP32[$__value_$i1$i >> 2] = $cond + ($__cap * 304 | 0);
 return;
}

function __ZNSt3__214__split_bufferIN4tson5ChunkERNS_9allocatorIS2_EEEC2EmmS5_($this, $__cap, $__start, $__a) {
 $this = $this | 0;
 $__cap = $__cap | 0;
 $__start = $__start | 0;
 $__a = $__a | 0;
 var $__value_$i1$i = 0, $add$ptr = 0, $cond = 0, $exception$i$i$i = 0;
 $__value_$i1$i = $this + 12 | 0;
 HEAP32[$__value_$i1$i >> 2] = 0;
 HEAP32[$this + 16 >> 2] = $__a;
 do if (!$__cap) $cond = 0; else if ($__cap >>> 0 > 107374182) {
  $exception$i$i$i = ___cxa_allocate_exception(8) | 0;
  __ZNSt11logic_errorC2EPKc($exception$i$i$i, 22952);
  HEAP32[$exception$i$i$i >> 2] = 18488;
  ___cxa_throw($exception$i$i$i | 0, 15856, 33);
 } else {
  $cond = __Znwm($__cap * 40 | 0) | 0;
  break;
 } while (0);
 HEAP32[$this >> 2] = $cond;
 $add$ptr = $cond + ($__start * 40 | 0) | 0;
 HEAP32[$this + 8 >> 2] = $add$ptr;
 HEAP32[$this + 4 >> 2] = $add$ptr;
 HEAP32[$__value_$i1$i >> 2] = $cond + ($__cap * 40 | 0);
 return;
}

function __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE5flushEv($this) {
 $this = $this | 0;
 var $2 = 0, $__s = 0, $add$ptr14 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $__s = sp;
 if (HEAP32[$this + (HEAP32[(HEAP32[$this >> 2] | 0) + -12 >> 2] | 0) + 24 >> 2] | 0) {
  __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE6sentryC2ERS3_($__s, $this);
  if (HEAP8[$__s >> 0] | 0) {
   $2 = HEAP32[$this + (HEAP32[(HEAP32[$this >> 2] | 0) + -12 >> 2] | 0) + 24 >> 2] | 0;
   if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$2 >> 2] | 0) + 24 >> 2] & 127]($2) | 0) == -1) {
    $add$ptr14 = $this + (HEAP32[(HEAP32[$this >> 2] | 0) + -12 >> 2] | 0) | 0;
    __ZNSt3__28ios_base5clearEj($add$ptr14, HEAP32[$add$ptr14 + 16 >> 2] | 1);
   }
  }
  __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($__s);
 }
 STACKTOP = sp;
 return $this | 0;
}

function ___strerror_l($e, $loc) {
 $e = $e | 0;
 $loc = $loc | 0;
 var $i$012 = 0, $i$111 = 0, $i$111$ph = 0, $inc = 0, $s$0$lcssa = 0, $s$010 = 0, $s$1 = 0, label = 0, $s$1$looptemp = 0;
 label = 0;
 $i$012 = 0;
 while (1) {
  if ((HEAPU8[12624 + $i$012 >> 0] | 0) == ($e | 0)) {
   label = 4;
   break;
  }
  $inc = $i$012 + 1 | 0;
  if (($inc | 0) == 87) {
   $i$111$ph = 87;
   label = 5;
   break;
  } else $i$012 = $inc;
 }
 if ((label | 0) == 4) if (!$i$012) $s$0$lcssa = 12720; else {
  $i$111$ph = $i$012;
  label = 5;
 }
 if ((label | 0) == 5) {
  $i$111 = $i$111$ph;
  $s$010 = 12720;
  while (1) {
   $s$1 = $s$010;
   do {
    $s$1$looptemp = $s$1;
    $s$1 = $s$1 + 1 | 0;
   } while ((HEAP8[$s$1$looptemp >> 0] | 0) != 0);
   $i$111 = $i$111 + -1 | 0;
   if (!$i$111) {
    $s$0$lcssa = $s$1;
    break;
   } else $s$010 = $s$1;
  }
 }
 return ___lctrans($s$0$lcssa, HEAP32[$loc + 20 >> 2] | 0) | 0;
}

function _stbi_loadf_from_file($f, $x, $y, $comp, $req_comp) {
 $f = $f | 0;
 $x = $x | 0;
 $y = $y | 0;
 $comp = $comp | 0;
 $req_comp = $req_comp | 0;
 var $call = 0, $comp$addr = 0, $f$addr = 0, $req_comp$addr = 0, $s = 0, $x$addr = 0, $y$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(208);
 $f$addr = sp + 200 | 0;
 $x$addr = sp + 196 | 0;
 $y$addr = sp + 192 | 0;
 $comp$addr = sp + 188 | 0;
 $req_comp$addr = sp + 184 | 0;
 $s = sp;
 HEAP32[$f$addr >> 2] = $f;
 HEAP32[$x$addr >> 2] = $x;
 HEAP32[$y$addr >> 2] = $y;
 HEAP32[$comp$addr >> 2] = $comp;
 HEAP32[$req_comp$addr >> 2] = $req_comp;
 _stbi__start_file($s, HEAP32[$f$addr >> 2] | 0);
 $call = _stbi__loadf_main($s, HEAP32[$x$addr >> 2] | 0, HEAP32[$y$addr >> 2] | 0, HEAP32[$comp$addr >> 2] | 0, HEAP32[$req_comp$addr >> 2] | 0) | 0;
 STACKTOP = sp;
 return $call | 0;
}

function __ZNSt3__214__split_bufferIN4tson7Vector2IiEERNS_9allocatorIS3_EEEC2EmmS6_($this, $__cap, $__start, $__a) {
 $this = $this | 0;
 $__cap = $__cap | 0;
 $__start = $__start | 0;
 $__a = $__a | 0;
 var $__value_$i1$i = 0, $add$ptr = 0, $cond = 0, $exception$i$i$i = 0;
 $__value_$i1$i = $this + 12 | 0;
 HEAP32[$__value_$i1$i >> 2] = 0;
 HEAP32[$this + 16 >> 2] = $__a;
 do if (!$__cap) $cond = 0; else if ($__cap >>> 0 > 536870911) {
  $exception$i$i$i = ___cxa_allocate_exception(8) | 0;
  __ZNSt11logic_errorC2EPKc($exception$i$i$i, 22952);
  HEAP32[$exception$i$i$i >> 2] = 18488;
  ___cxa_throw($exception$i$i$i | 0, 15856, 33);
 } else {
  $cond = __Znwm($__cap << 3) | 0;
  break;
 } while (0);
 HEAP32[$this >> 2] = $cond;
 $add$ptr = $cond + ($__start << 3) | 0;
 HEAP32[$this + 8 >> 2] = $add$ptr;
 HEAP32[$this + 4 >> 2] = $add$ptr;
 HEAP32[$__value_$i1$i >> 2] = $cond + ($__cap << 3);
 return;
}

function __ZZN4tson7WangSet5parseERKN8nlohmann10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS1_14adl_serializerEEEENKUlSF_E1_clESF_($this, $item) {
 $this = $this | 0;
 $item = $item | 0;
 var $0 = 0, $1 = 0, $__end_$i = 0;
 $0 = HEAP32[$this >> 2] | 0;
 $__end_$i = $0 + 44 | 0;
 $1 = HEAP32[$__end_$i >> 2] | 0;
 if ($1 >>> 0 < (HEAP32[$0 + 48 >> 2] | 0) >>> 0) {
  __ZN4tson9WangColorC2ERKN8nlohmann10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS1_14adl_serializerEEE($1, $item);
  HEAP32[$__end_$i >> 2] = (HEAP32[$__end_$i >> 2] | 0) + 24;
 } else __ZNSt3__26vectorIN4tson9WangColorENS_9allocatorIS2_EEE24__emplace_back_slow_pathIJRKN8nlohmann10basic_jsonINS_3mapES0_NS_12basic_stringIcNS_11char_traitsIcEENS3_IcEEEEbxydS3_NS7_14adl_serializerEEEEEEvDpOT_($0 + 40 | 0, $item);
 return;
}

function __ZZN4tson7WangSet5parseERKN8nlohmann10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS1_14adl_serializerEEEENKUlSF_E0_clESF_($this, $item) {
 $this = $this | 0;
 $item = $item | 0;
 var $0 = 0, $1 = 0, $__end_$i = 0;
 $0 = HEAP32[$this >> 2] | 0;
 $__end_$i = $0 + 32 | 0;
 $1 = HEAP32[$__end_$i >> 2] | 0;
 if ($1 >>> 0 < (HEAP32[$0 + 36 >> 2] | 0) >>> 0) {
  __ZN4tson9WangColorC2ERKN8nlohmann10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS1_14adl_serializerEEE($1, $item);
  HEAP32[$__end_$i >> 2] = (HEAP32[$__end_$i >> 2] | 0) + 24;
 } else __ZNSt3__26vectorIN4tson9WangColorENS_9allocatorIS2_EEE24__emplace_back_slow_pathIJRKN8nlohmann10basic_jsonINS_3mapES0_NS_12basic_stringIcNS_11char_traitsIcEENS3_IcEEEEbxydS3_NS7_14adl_serializerEEEEEEvDpOT_($0 + 28 | 0, $item);
 return;
}

function __ZNSt3__26__treeINS_12__value_typeIiPN4tson4TileEEENS_19__map_value_compareIiS5_NS_4lessIiEELb1EEENS_9allocatorIS5_EEE16__insert_node_atEPNS_15__tree_end_nodeIPNS_16__tree_node_baseIPvEEEERSH_SH_($this, $__parent, $__child, $__new_node) {
 $this = $this | 0;
 $__parent = $__parent | 0;
 $__child = $__child | 0;
 $__new_node = $__new_node | 0;
 var $1 = 0, $4 = 0, $__value_$i$i$i = 0;
 HEAP32[$__new_node >> 2] = 0;
 HEAP32[$__new_node + 4 >> 2] = 0;
 HEAP32[$__new_node + 8 >> 2] = $__parent;
 HEAP32[$__child >> 2] = $__new_node;
 $1 = HEAP32[HEAP32[$this >> 2] >> 2] | 0;
 if (!$1) $4 = $__new_node; else {
  HEAP32[$this >> 2] = $1;
  $4 = HEAP32[$__child >> 2] | 0;
 }
 __ZNSt3__227__tree_balance_after_insertIPNS_16__tree_node_baseIPvEEEEvT_S5_(HEAP32[$this + 4 >> 2] | 0, $4);
 $__value_$i$i$i = $this + 8 | 0;
 HEAP32[$__value_$i$i$i >> 2] = (HEAP32[$__value_$i$i$i >> 2] | 0) + 1;
 return;
}

function _rlTexCoord2f($x, $y) {
 $x = Math_fround($x);
 $y = Math_fround($y);
 var $0 = f0, $5 = f0, $tcCounter10 = 0, $x$addr = 0, $y$addr = 0, sp = 0, CSE$0 = 0, CSE$1 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $x$addr = sp + 4 | 0;
 $y$addr = sp;
 HEAPF32[$x$addr >> 2] = $x;
 HEAPF32[$y$addr >> 2] = $y;
 $0 = Math_fround(HEAPF32[$x$addr >> 2]);
 CSE$0 = 47408 + ((HEAP32[14847] | 0) * 48 | 0) | 0;
 HEAPF32[(HEAP32[CSE$0 + 16 >> 2] | 0) + (HEAP32[CSE$0 + 4 >> 2] << 1 << 2) >> 2] = $0;
 $5 = Math_fround(HEAPF32[$y$addr >> 2]);
 CSE$1 = 47408 + ((HEAP32[14847] | 0) * 48 | 0) | 0;
 HEAPF32[(HEAP32[CSE$1 + 16 >> 2] | 0) + ((HEAP32[CSE$1 + 4 >> 2] << 1) + 1 << 2) >> 2] = $5;
 $tcCounter10 = 47408 + ((HEAP32[14847] | 0) * 48 | 0) + 4 | 0;
 HEAP32[$tcCounter10 >> 2] = (HEAP32[$tcCounter10 >> 2] | 0) + 1;
 STACKTOP = sp;
 return;
}

function __ZZN4tson7Tileset5parseERKN8nlohmann10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS1_14adl_serializerEEEENKUlSF_E1_clESF_($this, $item) {
 $this = $this | 0;
 $item = $item | 0;
 var $0 = 0, $1 = 0, $__end_$i = 0;
 $0 = HEAP32[$this >> 2] | 0;
 $__end_$i = $0 + 128 | 0;
 $1 = HEAP32[$__end_$i >> 2] | 0;
 if ($1 >>> 0 < (HEAP32[$0 + 132 >> 2] | 0) >>> 0) {
  __ZN4tson7TerrainC2ERKN8nlohmann10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS1_14adl_serializerEEE($1, $item);
  HEAP32[$__end_$i >> 2] = (HEAP32[$__end_$i >> 2] | 0) + 40;
 } else __ZNSt3__26vectorIN4tson7TerrainENS_9allocatorIS2_EEE24__emplace_back_slow_pathIJRKN8nlohmann10basic_jsonINS_3mapES0_NS_12basic_stringIcNS_11char_traitsIcEENS3_IcEEEEbxydS3_NS7_14adl_serializerEEEEEEvDpOT_($0 + 124 | 0, $item);
 return;
}

function __ZZN4tson7WangSet5parseERKN8nlohmann10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS1_14adl_serializerEEEENKUlSF_E_clESF_($this, $item) {
 $this = $this | 0;
 $item = $item | 0;
 var $0 = 0, $1 = 0, $__end_$i = 0;
 $0 = HEAP32[$this >> 2] | 0;
 $__end_$i = $0 + 20 | 0;
 $1 = HEAP32[$__end_$i >> 2] | 0;
 if ($1 >>> 0 < (HEAP32[$0 + 24 >> 2] | 0) >>> 0) {
  __ZN4tson8WangTileC2ERKN8nlohmann10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS1_14adl_serializerEEE($1, $item);
  HEAP32[$__end_$i >> 2] = (HEAP32[$__end_$i >> 2] | 0) + 24;
 } else __ZNSt3__26vectorIN4tson8WangTileENS_9allocatorIS2_EEE24__emplace_back_slow_pathIJRKN8nlohmann10basic_jsonINS_3mapES0_NS_12basic_stringIcNS_11char_traitsIcEENS3_IcEEEEbxydS3_NS7_14adl_serializerEEEEEEvDpOT_($0 + 16 | 0, $item);
 return;
}

function __ZNSt3__214__split_bufferIN4tson5FrameERNS_9allocatorIS2_EEEC2EmmS5_($this, $__cap, $__start, $__a) {
 $this = $this | 0;
 $__cap = $__cap | 0;
 $__start = $__start | 0;
 $__a = $__a | 0;
 var $__value_$i1$i = 0, $add$ptr = 0, $cond = 0, $exception$i$i$i = 0;
 $__value_$i1$i = $this + 12 | 0;
 HEAP32[$__value_$i1$i >> 2] = 0;
 HEAP32[$this + 16 >> 2] = $__a;
 do if (!$__cap) $cond = 0; else if ($__cap >>> 0 > 536870911) {
  $exception$i$i$i = ___cxa_allocate_exception(8) | 0;
  __ZNSt11logic_errorC2EPKc($exception$i$i$i, 22952);
  HEAP32[$exception$i$i$i >> 2] = 18488;
  ___cxa_throw($exception$i$i$i | 0, 15856, 33);
 } else {
  $cond = __Znwm($__cap << 3) | 0;
  break;
 } while (0);
 HEAP32[$this >> 2] = $cond;
 $add$ptr = $cond + ($__start << 3) | 0;
 HEAP32[$this + 8 >> 2] = $add$ptr;
 HEAP32[$this + 4 >> 2] = $add$ptr;
 HEAP32[$__value_$i1$i >> 2] = $cond + ($__cap << 3);
 return;
}

function __ZZN4tson5Layer5parseERKN8nlohmann10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS1_14adl_serializerEEEENKUlSF_E2_clESF_($this, $item) {
 $this = $this | 0;
 $item = $item | 0;
 var $0 = 0, $1 = 0, $__end_$i = 0;
 $0 = HEAP32[$this >> 2] | 0;
 $__end_$i = $0 + 116 | 0;
 $1 = HEAP32[$__end_$i >> 2] | 0;
 if ($1 >>> 0 < (HEAP32[$0 + 120 >> 2] | 0) >>> 0) {
  __ZN4tson6ObjectC2ERKN8nlohmann10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS1_14adl_serializerEEE($1, $item);
  HEAP32[$__end_$i >> 2] = (HEAP32[$__end_$i >> 2] | 0) + 140;
 } else __ZNSt3__26vectorIN4tson6ObjectENS_9allocatorIS2_EEE24__emplace_back_slow_pathIJRKN8nlohmann10basic_jsonINS_3mapES0_NS_12basic_stringIcNS_11char_traitsIcEENS3_IcEEEEbxydS3_NS7_14adl_serializerEEEEEEvDpOT_($0 + 112 | 0, $item);
 return;
}

function __ZZN4tson3Map5parseERKN8nlohmann10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS1_14adl_serializerEEEENKUlSF_E0_clESF_($this, $item) {
 $this = $this | 0;
 $item = $item | 0;
 var $0 = 0, $1 = 0, $__end_$i = 0;
 $0 = HEAP32[$this >> 2] | 0;
 $__end_$i = $0 + 136 | 0;
 $1 = HEAP32[$__end_$i >> 2] | 0;
 if ($1 >>> 0 < (HEAP32[$0 + 140 >> 2] | 0) >>> 0) {
  __ZN4tson7TilesetC2ERKN8nlohmann10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS1_14adl_serializerEEE($1, $item);
  HEAP32[$__end_$i >> 2] = (HEAP32[$__end_$i >> 2] | 0) + 164;
 } else __ZNSt3__26vectorIN4tson7TilesetENS_9allocatorIS2_EEE24__emplace_back_slow_pathIJRKN8nlohmann10basic_jsonINS_3mapES0_NS_12basic_stringIcNS_11char_traitsIcEENS3_IcEEEEbxydS3_NS7_14adl_serializerEEEEEEvDpOT_($0 + 132 | 0, $item);
 return;
}

function ___ftello_unlocked($f) {
 $f = $f | 0;
 var $12 = 0, $13 = 0, $18 = 0, $20 = 0, $21 = 0, $4 = 0, $5 = 0, $6 = 0, $sub$ptr$sub = 0, $sub$ptr$sub6 = 0;
 if (!(HEAP32[$f >> 2] & 128)) $4 = 1; else $4 = (HEAP32[$f + 20 >> 2] | 0) >>> 0 > (HEAP32[$f + 28 >> 2] | 0) >>> 0 ? 2 : 1;
 $5 = FUNCTION_TABLE_iiiii[HEAP32[$f + 40 >> 2] & 15]($f, 0, 0, $4) | 0;
 $6 = getTempRet0() | 0;
 if (($6 | 0) < 0) {
  $20 = $6;
  $21 = $5;
 } else {
  $sub$ptr$sub = (HEAP32[$f + 8 >> 2] | 0) - (HEAP32[$f + 4 >> 2] | 0) | 0;
  $12 = _i64Subtract($5 | 0, $6 | 0, $sub$ptr$sub | 0, (($sub$ptr$sub | 0) < 0) << 31 >> 31 | 0) | 0;
  $13 = getTempRet0() | 0;
  $sub$ptr$sub6 = (HEAP32[$f + 20 >> 2] | 0) - (HEAP32[$f + 28 >> 2] | 0) | 0;
  $18 = _i64Add($12 | 0, $13 | 0, $sub$ptr$sub6 | 0, (($sub$ptr$sub6 | 0) < 0) << 31 >> 31 | 0) | 0;
  $20 = getTempRet0() | 0;
  $21 = $18;
 }
 setTempRet0($20 | 0);
 return $21 | 0;
}

function __ZZN4tson7Tileset5parseERKN8nlohmann10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS1_14adl_serializerEEEENKUlSF_E_clESF_($this, $item) {
 $this = $this | 0;
 $item = $item | 0;
 var $0 = 0, $1 = 0, $__end_$i = 0;
 $0 = HEAP32[$this >> 2] | 0;
 $__end_$i = $0 + 92 | 0;
 $1 = HEAP32[$__end_$i >> 2] | 0;
 if ($1 >>> 0 < (HEAP32[$0 + 96 >> 2] | 0) >>> 0) {
  __ZN4tson7WangSetC2ERKN8nlohmann10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS1_14adl_serializerEEE($1, $item);
  HEAP32[$__end_$i >> 2] = (HEAP32[$__end_$i >> 2] | 0) + 76;
 } else __ZNSt3__26vectorIN4tson7WangSetENS_9allocatorIS2_EEE24__emplace_back_slow_pathIJRKN8nlohmann10basic_jsonINS_3mapES0_NS_12basic_stringIcNS_11char_traitsIcEENS3_IcEEEEbxydS3_NS7_14adl_serializerEEEEEEvDpOT_($0 + 88 | 0, $item);
 return;
}

function _strtox($s, $p, $prec) {
 $s = $s | 0;
 $p = $p | 0;
 $prec = $prec | 0;
 var $0 = 0, $10 = 0, $11 = 0, $call = 0.0, $f = 0, $rend = 0, $rpos = 0, $sub$ptr$sub = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(144);
 $f = sp;
 _memset($f | 0, 0, 144) | 0;
 $rpos = $f + 4 | 0;
 HEAP32[$rpos >> 2] = $s;
 $rend = $f + 8 | 0;
 HEAP32[$rend >> 2] = -1;
 HEAP32[$f + 44 >> 2] = $s;
 HEAP32[$f + 76 >> 2] = -1;
 ___shlim($f, 0, 0);
 $call = +___floatscan($f, $prec, 1);
 $0 = $f + 120 | 0;
 $sub$ptr$sub = (HEAP32[$rpos >> 2] | 0) - (HEAP32[$rend >> 2] | 0) | 0;
 $10 = _i64Add(HEAP32[$0 >> 2] | 0, HEAP32[$0 + 4 >> 2] | 0, $sub$ptr$sub | 0, (($sub$ptr$sub | 0) < 0) << 31 >> 31 | 0) | 0;
 $11 = getTempRet0() | 0;
 if ($p | 0) HEAP32[$p >> 2] = ($10 | 0) == 0 & ($11 | 0) == 0 ? $s : $s + $10 | 0;
 STACKTOP = sp;
 return +$call;
}

function _fopen($filename, $mode) {
 $filename = $filename | 0;
 $mode = $mode | 0;
 var $call4 = 0, $call8 = 0, $or = 0, $retval$0 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $vararg_buffer = sp;
 if (!(_strchr(38531, HEAP8[$mode >> 0] | 0) | 0)) {
  HEAP32[(___errno_location() | 0) >> 2] = 28;
  $retval$0 = 0;
 } else {
  $or = ___fmodeflags($mode) | 0 | 32768;
  HEAP32[$vararg_buffer >> 2] = $filename;
  HEAP32[$vararg_buffer + 4 >> 2] = $or;
  HEAP32[$vararg_buffer + 8 >> 2] = 438;
  $call4 = ___syscall_ret(___syscall5(5, $vararg_buffer | 0) | 0) | 0;
  if (($call4 | 0) < 0) $retval$0 = 0; else {
   $call8 = ___fdopen($call4, $mode) | 0;
   if (!$call8) {
    ___wasi_fd_close($call4 | 0) | 0;
    $retval$0 = 0;
   } else $retval$0 = $call8;
  }
 }
 STACKTOP = sp;
 return $retval$0 | 0;
}

function __ZZN4tson7Tileset5parseERKN8nlohmann10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS1_14adl_serializerEEEENKUlSF_E0_clESF_($this, $item) {
 $this = $this | 0;
 $item = $item | 0;
 var $0 = 0, $1 = 0, $__end_$i = 0;
 $0 = HEAP32[$this >> 2] | 0;
 $__end_$i = $0 + 80 | 0;
 $1 = HEAP32[$__end_$i >> 2] | 0;
 if ($1 >>> 0 < (HEAP32[$0 + 84 >> 2] | 0) >>> 0) {
  __ZN4tson4TileC2ERKN8nlohmann10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS1_14adl_serializerEEE($1, $item);
  HEAP32[$__end_$i >> 2] = (HEAP32[$__end_$i >> 2] | 0) + 304;
 } else __ZNSt3__26vectorIN4tson4TileENS_9allocatorIS2_EEE24__emplace_back_slow_pathIJRKN8nlohmann10basic_jsonINS_3mapES0_NS_12basic_stringIcNS_11char_traitsIcEENS3_IcEEEEbxydS3_NS7_14adl_serializerEEEEEEvDpOT_($0 + 76 | 0, $item);
 return;
}

function __ZZN4tson5Layer5parseERKN8nlohmann10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS1_14adl_serializerEEEENKUlSF_E1_clESF_($this, $item) {
 $this = $this | 0;
 $item = $item | 0;
 var $0 = 0, $1 = 0, $__end_$i = 0;
 $0 = HEAP32[$this >> 2] | 0;
 $__end_$i = $0 + 92 | 0;
 $1 = HEAP32[$__end_$i >> 2] | 0;
 if ($1 >>> 0 < (HEAP32[$0 + 96 >> 2] | 0) >>> 0) {
  __ZN4tson5LayerC2ERKN8nlohmann10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS1_14adl_serializerEEE($1, $item);
  HEAP32[$__end_$i >> 2] = (HEAP32[$__end_$i >> 2] | 0) + 220;
 } else __ZNSt3__26vectorIN4tson5LayerENS_9allocatorIS2_EEE24__emplace_back_slow_pathIJRKN8nlohmann10basic_jsonINS_3mapES0_NS_12basic_stringIcNS_11char_traitsIcEENS3_IcEEEEbxydS3_NS7_14adl_serializerEEEEEEvDpOT_($0 + 88 | 0, $item);
 return;
}

function __ZNKSt3__27collateIwE10do_compareEPKwS3_S3_S3_($this, $__lo1, $__hi1, $__lo2, $__hi2) {
 $this = $this | 0;
 $__lo1 = $__lo1 | 0;
 $__hi1 = $__hi1 | 0;
 $__lo2 = $__lo2 | 0;
 $__hi2 = $__hi2 | 0;
 var $0 = 0, $1 = 0, $__lo1$addr$0 = 0, $__lo2$addr$0 = 0, $retval$0 = 0, label = 0;
 label = 0;
 $__lo1$addr$0 = $__lo1;
 $__lo2$addr$0 = $__lo2;
 while (1) {
  if (($__lo2$addr$0 | 0) == ($__hi2 | 0)) {
   label = 7;
   break;
  }
  if (($__lo1$addr$0 | 0) == ($__hi1 | 0)) {
   $retval$0 = -1;
   break;
  }
  $0 = HEAP32[$__lo1$addr$0 >> 2] | 0;
  $1 = HEAP32[$__lo2$addr$0 >> 2] | 0;
  if (($0 | 0) < ($1 | 0)) {
   $retval$0 = -1;
   break;
  }
  if (($1 | 0) < ($0 | 0)) {
   $retval$0 = 1;
   break;
  }
  $__lo1$addr$0 = $__lo1$addr$0 + 4 | 0;
  $__lo2$addr$0 = $__lo2$addr$0 + 4 | 0;
 }
 if ((label | 0) == 7) $retval$0 = ($__lo1$addr$0 | 0) != ($__hi1 | 0) & 1;
 return $retval$0 | 0;
}

function _strstr($h, $n) {
 $h = $h | 0;
 $n = $n | 0;
 var $0 = 0, $call = 0, $retval$0 = 0;
 $0 = HEAP8[$n >> 0] | 0;
 do if (!($0 << 24 >> 24)) $retval$0 = $h; else {
  $call = _strchr($h, $0 << 24 >> 24) | 0;
  if (!$call) $retval$0 = 0; else if (!(HEAP8[$n + 1 >> 0] | 0)) $retval$0 = $call; else if (!(HEAP8[$call + 1 >> 0] | 0)) $retval$0 = 0; else {
   if (!(HEAP8[$n + 2 >> 0] | 0)) {
    $retval$0 = _twobyte_strstr($call, $n) | 0;
    break;
   }
   if (!(HEAP8[$call + 2 >> 0] | 0)) $retval$0 = 0; else {
    if (!(HEAP8[$n + 3 >> 0] | 0)) {
     $retval$0 = _threebyte_strstr($call, $n) | 0;
     break;
    }
    if (!(HEAP8[$call + 3 >> 0] | 0)) $retval$0 = 0; else if (!(HEAP8[$n + 4 >> 0] | 0)) {
     $retval$0 = _fourbyte_strstr($call, $n) | 0;
     break;
    } else {
     $retval$0 = _twoway_strstr($call, $n) | 0;
     break;
    }
   }
  }
 } while (0);
 return $retval$0 | 0;
}

function __ZNSt3__26locale5__impD2Ev($this) {
 $this = $this | 0;
 var $1 = 0, $3 = 0, $4 = 0, $__end_$i = 0, $__shared_owners_$i = 0, $facets_ = 0, $i$0 = 0;
 HEAP32[$this >> 2] = 21372;
 $facets_ = $this + 8 | 0;
 $__end_$i = $this + 12 | 0;
 $i$0 = 0;
 while (1) {
  $1 = HEAP32[$facets_ >> 2] | 0;
  if ($i$0 >>> 0 >= (HEAP32[$__end_$i >> 2] | 0) - $1 >> 2 >>> 0) break;
  $3 = HEAP32[$1 + ($i$0 << 2) >> 2] | 0;
  if ($3 | 0) {
   $__shared_owners_$i = $3 + 4 | 0;
   $4 = HEAP32[$__shared_owners_$i >> 2] | 0;
   HEAP32[$__shared_owners_$i >> 2] = $4 + -1;
   if (!$4) FUNCTION_TABLE_vi[HEAP32[(HEAP32[$3 >> 2] | 0) + 8 >> 2] & 255]($3);
  }
  $i$0 = $i$0 + 1 | 0;
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($this + 144 | 0);
 __ZNSt3__213__vector_baseIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEED2Ev($facets_);
 __ZNSt3__26locale5facetD2Ev($this);
 return;
}

function __ZNK4tson8Property8getValueIiEET_v($this) {
 $this = $this | 0;
 var $0 = 0, $3 = 0, $call$i5$i$i$i = 0, $exception$i$i = 0, $m_value = 0, $retval$0$i = 0, $retval$0$in = 0;
 $m_value = $this + 16 | 0;
 $0 = HEAP32[$m_value >> 2] | 0;
 if (!$0) $retval$0$i = 15936; else $retval$0$i = FUNCTION_TABLE_iiiiii[$0 & 31](4, $m_value, 0, 0, 0) | 0;
 do if ((HEAP32[$retval$0$i + 4 >> 2] | 0) == (HEAP32[3989] | 0)) {
  $3 = HEAP32[$m_value >> 2] | 0;
  if ($3 | 0) {
   $call$i5$i$i$i = FUNCTION_TABLE_iiiiii[$3 & 31](3, $m_value, 0, 15952, 59152) | 0;
   if ($call$i5$i$i$i | 0) {
    $retval$0$in = $call$i5$i$i$i;
    break;
   }
  }
  $exception$i$i = ___cxa_allocate_exception(4) | 0;
  HEAP32[$exception$i$i >> 2] = 0;
  __ZNSt12bad_any_castC2Ev($exception$i$i);
  ___cxa_throw($exception$i$i | 0, 15984, 38);
 } else $retval$0$in = 59152; while (0);
 return HEAP32[$retval$0$in >> 2] | 0;
}

function __ZZN4tson3Map5parseERKN8nlohmann10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS1_14adl_serializerEEEENKUlSF_E_clESF_($this, $item) {
 $this = $this | 0;
 $item = $item | 0;
 var $0 = 0, $1 = 0, $__end_$i = 0;
 $0 = HEAP32[$this >> 2] | 0;
 $__end_$i = $0 + 24 | 0;
 $1 = HEAP32[$__end_$i >> 2] | 0;
 if ($1 >>> 0 < (HEAP32[$0 + 28 >> 2] | 0) >>> 0) {
  __ZN4tson5LayerC2ERKN8nlohmann10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS1_14adl_serializerEEE($1, $item);
  HEAP32[$__end_$i >> 2] = (HEAP32[$__end_$i >> 2] | 0) + 220;
 } else __ZNSt3__26vectorIN4tson5LayerENS_9allocatorIS2_EEE24__emplace_back_slow_pathIJRKN8nlohmann10basic_jsonINS_3mapES0_NS_12basic_stringIcNS_11char_traitsIcEENS3_IcEEEEbxydS3_NS7_14adl_serializerEEEEEEvDpOT_($0 + 20 | 0, $item);
 return;
}

function __ZNSt3__214__split_bufferIiRNS_9allocatorIiEEEC2EmmS3_($this, $__cap, $__start, $__a) {
 $this = $this | 0;
 $__cap = $__cap | 0;
 $__start = $__start | 0;
 $__a = $__a | 0;
 var $__value_$i1$i = 0, $add$ptr = 0, $cond = 0, $exception$i$i$i = 0;
 $__value_$i1$i = $this + 12 | 0;
 HEAP32[$__value_$i1$i >> 2] = 0;
 HEAP32[$this + 16 >> 2] = $__a;
 do if (!$__cap) $cond = 0; else if ($__cap >>> 0 > 1073741823) {
  $exception$i$i$i = ___cxa_allocate_exception(8) | 0;
  __ZNSt11logic_errorC2EPKc($exception$i$i$i, 22952);
  HEAP32[$exception$i$i$i >> 2] = 18488;
  ___cxa_throw($exception$i$i$i | 0, 15856, 33);
 } else {
  $cond = __Znwm($__cap << 2) | 0;
  break;
 } while (0);
 HEAP32[$this >> 2] = $cond;
 $add$ptr = $cond + ($__start << 2) | 0;
 HEAP32[$this + 8 >> 2] = $add$ptr;
 HEAP32[$this + 4 >> 2] = $add$ptr;
 HEAP32[$__value_$i1$i >> 2] = $cond + ($__cap << 2);
 return;
}

function __ZN4tson8WangTileC2EOS0_($this, $0) {
 $this = $this | 0;
 $0 = $0 | 0;
 var $__end_$i = 0, $__end_$i$i = 0, $__value_$i$i$i8$i = 0, $__value_$i$i$i9$i = 0, $m_wangId = 0, $m_wangId3 = 0;
 HEAP32[$this >> 2] = HEAP32[$0 >> 2];
 HEAP32[$this + 4 >> 2] = HEAP32[$0 + 4 >> 2];
 HEAP8[$this + 8 >> 0] = HEAP8[$0 + 8 >> 0] | 0;
 $m_wangId = $this + 12 | 0;
 $m_wangId3 = $0 + 12 | 0;
 HEAP32[$m_wangId >> 2] = 0;
 $__end_$i$i = $this + 16 | 0;
 HEAP32[$__end_$i$i >> 2] = 0;
 $__value_$i$i$i9$i = $this + 20 | 0;
 HEAP32[$__value_$i$i$i9$i >> 2] = 0;
 HEAP32[$m_wangId >> 2] = HEAP32[$m_wangId3 >> 2];
 $__end_$i = $0 + 16 | 0;
 HEAP32[$__end_$i$i >> 2] = HEAP32[$__end_$i >> 2];
 $__value_$i$i$i8$i = $0 + 20 | 0;
 HEAP32[$__value_$i$i$i9$i >> 2] = HEAP32[$__value_$i$i$i8$i >> 2];
 HEAP32[$__value_$i$i$i8$i >> 2] = 0;
 HEAP32[$__end_$i >> 2] = 0;
 HEAP32[$m_wangId3 >> 2] = 0;
 return;
}

function __ZNSt3__214__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($__nb, $__ne, $__iob) {
 $__nb = $__nb | 0;
 $__ne = $__ne | 0;
 $__iob = $__iob | 0;
 var $1 = 0, $retval$0 = 0, label = 0;
 label = 0;
 L1 : do switch ((HEAP32[$__iob + 4 >> 2] & 176) << 24 >> 24) {
 case 16:
  {
   $1 = HEAP8[$__nb >> 0] | 0;
   switch ($1 << 24 >> 24) {
   case 43:
   case 45:
    {
     $retval$0 = $__nb + 1 | 0;
     break L1;
     break;
    }
   default:
    {}
   }
   if (($__ne - $__nb | 0) > 1 & $1 << 24 >> 24 == 48) {
    switch (HEAP8[$__nb + 1 >> 0] | 0) {
    case 88:
    case 120:
     break;
    default:
     {
      label = 7;
      break L1;
     }
    }
    $retval$0 = $__nb + 2 | 0;
   } else label = 7;
   break;
  }
 case 32:
  {
   $retval$0 = $__ne;
   break;
  }
 default:
  label = 7;
 } while (0);
 if ((label | 0) == 7) $retval$0 = $__nb;
 return $retval$0 | 0;
}

function __ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE12__write_modeEv($this) {
 $this = $this | 0;
 var $$sink7 = 0, $1 = 0, $3 = 0, $4 = 0, $__cm_ = 0, $add$ptr$sink = 0;
 $__cm_ = $this + 92 | 0;
 if (!(HEAP32[$__cm_ >> 2] & 16)) {
  HEAP32[$this + 8 >> 2] = 0;
  HEAP32[$this + 12 >> 2] = 0;
  HEAP32[$this + 16 >> 2] = 0;
  $1 = HEAP32[$this + 52 >> 2] | 0;
  do if ($1 >>> 0 > 8) if (!(HEAP8[$this + 98 >> 0] | 0)) {
   $4 = HEAP32[$this + 56 >> 2] | 0;
   $$sink7 = $4;
   $add$ptr$sink = $4 + ((HEAP32[$this + 60 >> 2] | 0) + -1) | 0;
   break;
  } else {
   $3 = HEAP32[$this + 32 >> 2] | 0;
   $$sink7 = $3;
   $add$ptr$sink = $3 + ($1 + -1) | 0;
   break;
  } else {
   $$sink7 = 0;
   $add$ptr$sink = 0;
  } while (0);
  HEAP32[$this + 24 >> 2] = $$sink7;
  HEAP32[$this + 20 >> 2] = $$sink7;
  HEAP32[$this + 28 >> 2] = $add$ptr$sink;
  HEAP32[$__cm_ >> 2] = 16;
 }
 return;
}

function _stbir__edge_wrap($edge, $n, $max) {
 $edge = $edge | 0;
 $n = $n | 0;
 $max = $max | 0;
 var $7 = 0, $edge$addr = 0, $max$addr = 0, $n$addr = 0, $retval = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $retval = sp + 12 | 0;
 $edge$addr = sp + 8 | 0;
 $n$addr = sp + 4 | 0;
 $max$addr = sp;
 HEAP32[$edge$addr >> 2] = $edge;
 HEAP32[$n$addr >> 2] = $n;
 HEAP32[$max$addr >> 2] = $max;
 if ((HEAP32[$n$addr >> 2] | 0) >= 0) if ((HEAP32[$n$addr >> 2] | 0) < (HEAP32[$max$addr >> 2] | 0)) {
  HEAP32[$retval >> 2] = HEAP32[$n$addr >> 2];
  $7 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $7 | 0;
 }
 HEAP32[$retval >> 2] = _stbir__edge_wrap_slow(HEAP32[$edge$addr >> 2] | 0, HEAP32[$n$addr >> 2] | 0, HEAP32[$max$addr >> 2] | 0) | 0;
 $7 = HEAP32[$retval >> 2] | 0;
 STACKTOP = sp;
 return $7 | 0;
}

function __ZZN4tson5Layer5parseERKN8nlohmann10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS1_14adl_serializerEEEENKUlSF_E0_clESF_($this, $item) {
 $this = $this | 0;
 $item = $item | 0;
 var $0 = 0, $1 = 0, $__end_$i = 0;
 $0 = HEAP32[$this >> 2] | 0;
 $__end_$i = $0 + 4 | 0;
 $1 = HEAP32[$__end_$i >> 2] | 0;
 if ($1 >>> 0 < (HEAP32[$0 + 8 >> 2] | 0) >>> 0) {
  __ZN4tson5ChunkC2ERKN8nlohmann10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS1_14adl_serializerEEE($1, $item);
  HEAP32[$__end_$i >> 2] = (HEAP32[$__end_$i >> 2] | 0) + 40;
 } else __ZNSt3__26vectorIN4tson5ChunkENS_9allocatorIS2_EEE24__emplace_back_slow_pathIJRKN8nlohmann10basic_jsonINS_3mapES0_NS_12basic_stringIcNS_11char_traitsIcEENS3_IcEEEEbxydS3_NS7_14adl_serializerEEEEEEvDpOT_($0, $item);
 return;
}

function __ZN8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEC2EOSB_($this, $other) {
 $this = $this | 0;
 $other = $other | 0;
 var $1 = 0, $13 = 0, $3 = 0, $8 = 0, $9 = 0;
 HEAP8[$this >> 0] = HEAP8[$other >> 0] | 0;
 $1 = $other + 8 | 0;
 $3 = $1;
 $8 = HEAP32[$3 + 4 >> 2] | 0;
 $9 = $this + 8 | 0;
 HEAP32[$9 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$9 + 4 >> 2] = $8;
 __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE16assert_invariantEv($other);
 HEAP8[$other >> 0] = 0;
 $13 = $1;
 HEAP32[$13 >> 2] = 0;
 HEAP32[$13 + 4 >> 2] = 0;
 __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE16assert_invariantEv($this);
 return;
}

function __ZZN4tson4Tile5parseERKN8nlohmann10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS1_14adl_serializerEEEENKUlSF_E_clESF_($this, $item) {
 $this = $this | 0;
 $item = $item | 0;
 var $0 = 0, $1 = 0, $__end_$i = 0;
 $0 = HEAP32[$this >> 2] | 0;
 $__end_$i = $0 + 4 | 0;
 $1 = HEAP32[$__end_$i >> 2] | 0;
 if ($1 >>> 0 < (HEAP32[$0 + 8 >> 2] | 0) >>> 0) {
  __ZN4tson5FrameC2ERKN8nlohmann10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS1_14adl_serializerEEE($1, $item);
  HEAP32[$__end_$i >> 2] = (HEAP32[$__end_$i >> 2] | 0) + 8;
 } else __ZNSt3__26vectorIN4tson5FrameENS_9allocatorIS2_EEE24__emplace_back_slow_pathIJRKN8nlohmann10basic_jsonINS_3mapES0_NS_12basic_stringIcNS_11char_traitsIcEENS3_IcEEEEbxydS3_NS7_14adl_serializerEEEEEEvDpOT_($0, $item);
 return;
}

function __ZN8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE6createIS9_JRA1_KcEEEPT_DpOT0_($args) {
 $args = $args | 0;
 var $3 = 0, $call2$i$i$i = 0, $object = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $object = sp;
 $call2$i$i$i = __Znwm(12) | 0;
 HEAP32[$object >> 2] = $call2$i$i$i;
 HEAP32[$object + 4 >> 2] = sp + 8;
 HEAP32[$call2$i$i$i >> 2] = 0;
 HEAP32[$call2$i$i$i + 4 >> 2] = 0;
 HEAP32[$call2$i$i$i + 8 >> 2] = 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcm($call2$i$i$i, $args, __ZNSt3__211char_traitsIcE6lengthEPKc($args) | 0);
 $3 = HEAP32[$object >> 2] | 0;
 if (!$3) ___assert_fail(24255, 22221, 15187, 24273); else {
  STACKTOP = sp;
  return $3 | 0;
 }
 return 0;
}

function _Vector2Distance($v1, $v2) {
 $v1 = $v1 | 0;
 $v2 = $v2 | 0;
 var $0 = f0, $2 = f0, $4 = f0, $6 = f0, $9 = f0, $mul = f0, $result = 0, $sub = f0, $sub6 = f0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $result = sp;
 $0 = Math_fround(HEAPF32[$v1 >> 2]);
 $sub = Math_fround($0 - Math_fround(HEAPF32[$v2 >> 2]));
 $2 = Math_fround(HEAPF32[$v1 >> 2]);
 $mul = Math_fround($sub * Math_fround($2 - Math_fround(HEAPF32[$v2 >> 2])));
 $4 = Math_fround(HEAPF32[$v1 + 4 >> 2]);
 $sub6 = Math_fround($4 - Math_fround(HEAPF32[$v2 + 4 >> 2]));
 $6 = Math_fround(HEAPF32[$v1 + 4 >> 2]);
 HEAPF32[$result >> 2] = Math_fround(Math_sqrt(Math_fround($mul + Math_fround($sub6 * Math_fround($6 - Math_fround(HEAPF32[$v2 + 4 >> 2]))))));
 $9 = Math_fround(HEAPF32[$result >> 2]);
 STACKTOP = sp;
 return Math_fround($9);
}

function __ZNSt3__23mapIiPN4tson4TileENS_4lessIiEENS_9allocatorINS_4pairIKiS3_EEEEEixERS8_($this, $__k) {
 $this = $this | 0;
 $__k = $__k | 0;
 var $ref$tmp = 0, $ref$tmp2 = 0, $second = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $ref$tmp = sp + 8 | 0;
 $ref$tmp2 = sp;
 HEAP32[$ref$tmp2 >> 2] = $__k;
 __ZNSt3__26__treeINS_12__value_typeIiPN4tson4TileEEENS_19__map_value_compareIiS5_NS_4lessIiEELb1EEENS_9allocatorIS5_EEE25__emplace_unique_key_argsIiJRKNS_21piecewise_construct_tENS_5tupleIJRKiEEENSH_IJEEEEEENS_4pairINS_15__tree_iteratorIS5_PNS_11__tree_nodeIS5_PvEElEEbEERKT_DpOT0_($ref$tmp, $this, $__k, 62140, $ref$tmp2, sp + 16 | 0);
 $second = (__ZNSt3__29__launderINS_4pairIKiPN4tson4TileEEEEEPT_S8_((HEAP32[$ref$tmp >> 2] | 0) + 16 | 0) | 0) + 4 | 0;
 STACKTOP = sp;
 return $second | 0;
}

function __ZNSt3__211__stdoutbufIwE6xsputnEPKwl($this, $__s, $__n) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__n = $__n | 0;
 var $2 = 0, $__i$0 = 0, $__s$addr$0 = 0, $call2 = 0, $call3 = 0, $retval$0 = 0;
 L1 : do if (!(HEAP8[$this + 44 >> 0] | 0)) {
  $__i$0 = 0;
  $__s$addr$0 = $__s;
  while (1) {
   if (($__i$0 | 0) >= ($__n | 0)) {
    $retval$0 = $__i$0;
    break L1;
   }
   $2 = HEAP32[(HEAP32[$this >> 2] | 0) + 52 >> 2] | 0;
   $call2 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$__s$addr$0 >> 2] | 0) | 0;
   $call3 = FUNCTION_TABLE_iii[$2 & 31]($this, $call2) | 0;
   if (($call3 | 0) == (__ZNSt3__211char_traitsIwE3eofEv() | 0)) {
    $retval$0 = $__i$0;
    break L1;
   }
   $__i$0 = $__i$0 + 1 | 0;
   $__s$addr$0 = $__s$addr$0 + 4 | 0;
  }
 } else $retval$0 = _fwrite($__s, 4, $__n, HEAP32[$this + 32 >> 2] | 0) | 0; while (0);
 return $retval$0 | 0;
}

function __ZNSt3__214__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lm28EEEEC2EmmS6_($this, $__cap, $__start, $__a) {
 $this = $this | 0;
 $__cap = $__cap | 0;
 $__start = $__start | 0;
 $__a = $__a | 0;
 var $__allocated_$i$i = 0, $__value_$i1$i = 0, $add$ptr = 0, $cond = 0;
 $__value_$i1$i = $this + 12 | 0;
 HEAP32[$__value_$i1$i >> 2] = 0;
 HEAP32[$this + 16 >> 2] = $__a;
 do if (!$__cap) $cond = 0; else {
  $__allocated_$i$i = $__a + 112 | 0;
  if ($__cap >>> 0 < 29 & (HEAP8[$__allocated_$i$i >> 0] | 0) == 0) {
   HEAP8[$__allocated_$i$i >> 0] = 1;
   $cond = $__a;
   break;
  } else {
   $cond = __Znwm($__cap << 2) | 0;
   break;
  }
 } while (0);
 HEAP32[$this >> 2] = $cond;
 $add$ptr = $cond + ($__start << 2) | 0;
 HEAP32[$this + 8 >> 2] = $add$ptr;
 HEAP32[$this + 4 >> 2] = $add$ptr;
 HEAP32[$__value_$i1$i >> 2] = $cond + ($__cap << 2);
 return;
}

function __ZNSt3__211__stdoutbufIcE6xsputnEPKcl($this, $__s, $__n) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__n = $__n | 0;
 var $2 = 0, $__i$0 = 0, $__s$addr$0 = 0, $call2 = 0, $call3 = 0, $retval$0 = 0;
 L1 : do if (!(HEAP8[$this + 44 >> 0] | 0)) {
  $__i$0 = 0;
  $__s$addr$0 = $__s;
  while (1) {
   if (($__i$0 | 0) >= ($__n | 0)) {
    $retval$0 = $__i$0;
    break L1;
   }
   $2 = HEAP32[(HEAP32[$this >> 2] | 0) + 52 >> 2] | 0;
   $call2 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$__s$addr$0 >> 0] | 0) | 0;
   $call3 = FUNCTION_TABLE_iii[$2 & 31]($this, $call2) | 0;
   if (($call3 | 0) == (__ZNSt3__211char_traitsIcE3eofEv() | 0)) {
    $retval$0 = $__i$0;
    break L1;
   }
   $__i$0 = $__i$0 + 1 | 0;
   $__s$addr$0 = $__s$addr$0 + 1 | 0;
  }
 } else $retval$0 = _fwrite($__s, 1, $__n, HEAP32[$this + 32 >> 2] | 0) | 0; while (0);
 return $retval$0 | 0;
}

function __ZNSt3__23mapIiPN4tson4TileENS_4lessIiEENS_9allocatorINS_4pairIKiS3_EEEEEixEOi($this, $__k) {
 $this = $this | 0;
 $__k = $__k | 0;
 var $ref$tmp = 0, $ref$tmp2 = 0, $second = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $ref$tmp = sp + 8 | 0;
 $ref$tmp2 = sp;
 HEAP32[$ref$tmp2 >> 2] = $__k;
 __ZNSt3__26__treeINS_12__value_typeIiPN4tson4TileEEENS_19__map_value_compareIiS5_NS_4lessIiEELb1EEENS_9allocatorIS5_EEE25__emplace_unique_key_argsIiJRKNS_21piecewise_construct_tENS_5tupleIJOiEEENSH_IJEEEEEENS_4pairINS_15__tree_iteratorIS5_PNS_11__tree_nodeIS5_PvEElEEbEERKT_DpOT0_($ref$tmp, $this, $__k, 62140, $ref$tmp2, sp + 16 | 0);
 $second = (__ZNSt3__29__launderINS_4pairIKiPN4tson4TileEEEEEPT_S8_((HEAP32[$ref$tmp >> 2] | 0) + 16 | 0) | 0) + 4 | 0;
 STACKTOP = sp;
 return $second | 0;
}

function _Vector2Angle($v1, $v2) {
 $v1 = $v1 | 0;
 $v2 = $v2 | 0;
 var $0 = f0, $2 = f0, $6 = f0, $result = 0, $sub = f0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $result = sp;
 $0 = Math_fround(HEAPF32[$v2 + 4 >> 2]);
 $sub = Math_fround($0 - Math_fround(HEAPF32[$v1 + 4 >> 2]));
 $2 = Math_fround(HEAPF32[$v2 >> 2]);
 HEAPF32[$result >> 2] = Math_fround(Math_fround(_atan2f($sub, Math_fround($2 - Math_fround(HEAPF32[$v1 >> 2])))) * Math_fround(57.2957763));
 if (!(Math_fround(HEAPF32[$result >> 2]) < Math_fround(0.0))) {
  $6 = Math_fround(HEAPF32[$result >> 2]);
  STACKTOP = sp;
  return Math_fround($6);
 }
 HEAPF32[$result >> 2] = Math_fround(Math_fround(HEAPF32[$result >> 2]) + Math_fround(360.0));
 $6 = Math_fround(HEAPF32[$result >> 2]);
 STACKTOP = sp;
 return Math_fround($6);
}

function __ZNSt3__26__treeINS_12__value_typeIiPN4tson4TileEEENS_19__map_value_compareIiS5_NS_4lessIiEELb1EEENS_9allocatorIS5_EEE16__construct_nodeIJRKNS_21piecewise_construct_tENS_5tupleIJRKiEEENSH_IJEEEEEENS_10unique_ptrINS_11__tree_nodeIS5_PvEENS_22__tree_node_destructorINSA_ISP_EEEEEEDpOT_($agg$result, $this, $__args, $__args1, $__args3) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__args = $__args | 0;
 $__args1 = $__args1 | 0;
 $__args3 = $__args3 | 0;
 var $call$i$i$i = 0, $call2$i$i$i = 0;
 $call2$i$i$i = __Znwm(24) | 0;
 HEAP32[$agg$result >> 2] = $call2$i$i$i;
 HEAP32[$agg$result + 4 >> 2] = $this + 4;
 $call$i$i$i = __ZNSt3__29__launderINS_4pairIKiPN4tson4TileEEEEEPT_S8_($call2$i$i$i + 16 | 0) | 0;
 HEAP32[$call$i$i$i >> 2] = HEAP32[HEAP32[$__args1 >> 2] >> 2];
 HEAP32[$call$i$i$i + 4 >> 2] = 0;
 HEAP8[$agg$result + 8 >> 0] = 1;
 return;
}

function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_year4ERiRS4_S4_RjRKNS_5ctypeIwEE($this, $__y, $__b, $__e, $__err, $__ct) {
 $this = $this | 0;
 $__y = $__y | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__err = $__err | 0;
 $__ct = $__ct | 0;
 var $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $agg$tmp$byval_copy = sp + 4 | 0;
 $agg$tmp = sp;
 HEAP32[$agg$tmp >> 2] = HEAP32[$__e >> 2];
 HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 $call = __ZNSt3__220__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, $agg$tmp$byval_copy, $__err, $__ct, 4) | 0;
 if (!(HEAP32[$__err >> 2] & 4)) HEAP32[$__y >> 2] = $call + -1900;
 STACKTOP = sp;
 return;
}

function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_year4ERiRS4_S4_RjRKNS_5ctypeIcEE($this, $__y, $__b, $__e, $__err, $__ct) {
 $this = $this | 0;
 $__y = $__y | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__err = $__err | 0;
 $__ct = $__ct | 0;
 var $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $agg$tmp$byval_copy = sp + 4 | 0;
 $agg$tmp = sp;
 HEAP32[$agg$tmp >> 2] = HEAP32[$__e >> 2];
 HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 $call = __ZNSt3__220__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, $agg$tmp$byval_copy, $__err, $__ct, 4) | 0;
 if (!(HEAP32[$__err >> 2] & 4)) HEAP32[$__y >> 2] = $call + -1900;
 STACKTOP = sp;
 return;
}

function _IsMouseButtonPressed($button) {
 $button = $button | 0;
 var $6 = 0, $button$addr = 0, $pressed = 0, $tobool = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $button$addr = sp;
 $pressed = sp + 4 | 0;
 HEAP32[$button$addr >> 2] = $button;
 HEAP8[$pressed >> 0] = 0;
 if ((HEAP8[62158 + (HEAP32[$button$addr >> 2] | 0) >> 0] | 0) != (HEAP8[62161 + (HEAP32[$button$addr >> 2] | 0) >> 0] | 0)) {
  if ((HEAP8[62158 + (HEAP32[$button$addr >> 2] | 0) >> 0] | 0) != 1) label = 3;
 } else label = 3;
 if ((label | 0) == 3) if (!(_IsGestureDetected(1) | 0)) {
  $6 = HEAP8[$pressed >> 0] | 0;
  $tobool = $6 & 1;
  STACKTOP = sp;
  return $tobool | 0;
 }
 HEAP8[$pressed >> 0] = 1;
 $6 = HEAP8[$pressed >> 0] | 0;
 $tobool = $6 & 1;
 STACKTOP = sp;
 return $tobool | 0;
}

function _stbir__srgb_to_linear($f) {
 $f = Math_fround($f);
 var $1 = f0, $3 = f0, $cmp = 0, $f$addr = 0, $retval = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $retval = sp + 4 | 0;
 $f$addr = sp;
 HEAPF32[$f$addr >> 2] = $f;
 $cmp = Math_fround(HEAPF32[$f$addr >> 2]) <= Math_fround(.0404499993);
 $1 = Math_fround(HEAPF32[$f$addr >> 2]);
 if ($cmp) {
  HEAPF32[$retval >> 2] = Math_fround($1 / Math_fround(12.9200001));
  $3 = Math_fround(HEAPF32[$retval >> 2]);
  STACKTOP = sp;
  return Math_fround($3);
 } else {
  HEAPF32[$retval >> 2] = Math_fround(+Math_pow(+(+Math_fround(Math_fround($1 + Math_fround(.0549999997)) / Math_fround(1.05499995))), 2.4000000953674316));
  $3 = Math_fround(HEAPF32[$retval >> 2]);
  STACKTOP = sp;
  return Math_fround($3);
 }
 return Math_fround(0.0);
}

function _stbir__linear_to_srgb($f) {
 $f = Math_fround($f);
 var $1 = f0, $3 = f0, $cmp = 0, $f$addr = 0, $retval = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $retval = sp + 4 | 0;
 $f$addr = sp;
 HEAPF32[$f$addr >> 2] = $f;
 $cmp = Math_fround(HEAPF32[$f$addr >> 2]) <= Math_fround(.00313080009);
 $1 = Math_fround(HEAPF32[$f$addr >> 2]);
 if ($cmp) {
  HEAPF32[$retval >> 2] = Math_fround($1 * Math_fround(12.9200001));
  $3 = Math_fround(HEAPF32[$retval >> 2]);
  STACKTOP = sp;
  return Math_fround($3);
 } else {
  HEAPF32[$retval >> 2] = Math_fround(Math_fround(Math_fround(+Math_pow(+(+$1), .4166666567325592)) * Math_fround(1.05499995)) - Math_fround(.0549999997));
  $3 = Math_fround(HEAPF32[$retval >> 2]);
  STACKTOP = sp;
  return Math_fround($3);
 }
 return Math_fround(0.0);
}

function __ZNSt3__26__treeINS_12__value_typeIiPN4tson4TileEEENS_19__map_value_compareIiS5_NS_4lessIiEELb1EEENS_9allocatorIS5_EEE16__construct_nodeIJRKNS_21piecewise_construct_tENS_5tupleIJOiEEENSH_IJEEEEEENS_10unique_ptrINS_11__tree_nodeIS5_PvEENS_22__tree_node_destructorINSA_ISO_EEEEEEDpOT_($agg$result, $this, $__args, $__args1, $__args3) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__args = $__args | 0;
 $__args1 = $__args1 | 0;
 $__args3 = $__args3 | 0;
 var $call$i$i$i = 0, $call2$i$i$i = 0;
 $call2$i$i$i = __Znwm(24) | 0;
 HEAP32[$agg$result >> 2] = $call2$i$i$i;
 HEAP32[$agg$result + 4 >> 2] = $this + 4;
 $call$i$i$i = __ZNSt3__29__launderINS_4pairIKiPN4tson4TileEEEEEPT_S8_($call2$i$i$i + 16 | 0) | 0;
 HEAP32[$call$i$i$i >> 2] = HEAP32[HEAP32[$__args1 >> 2] >> 2];
 HEAP32[$call$i$i$i + 4 >> 2] = 0;
 HEAP8[$agg$result + 8 >> 0] = 1;
 return;
}

function __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($this) {
 $this = $this | 0;
 var $0 = 0, $4 = 0, $5 = 0, $7 = 0, $__os_ = 0, $add$ptr = 0, $add$ptr30 = 0;
 $__os_ = $this + 4 | 0;
 $0 = HEAP32[$__os_ >> 2] | 0;
 $add$ptr = $0 + (HEAP32[(HEAP32[$0 >> 2] | 0) + -12 >> 2] | 0) | 0;
 if (HEAP32[$add$ptr + 24 >> 2] | 0) if (!(HEAP32[$add$ptr + 16 >> 2] | 0)) if (HEAP32[$add$ptr + 4 >> 2] & 8192 | 0) if (!(__ZSt18uncaught_exceptionv() | 0)) {
  $4 = HEAP32[$__os_ >> 2] | 0;
  $5 = HEAP32[$4 + (HEAP32[(HEAP32[$4 >> 2] | 0) + -12 >> 2] | 0) + 24 >> 2] | 0;
  if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$5 >> 2] | 0) + 24 >> 2] & 127]($5) | 0) == -1) {
   $7 = HEAP32[$__os_ >> 2] | 0;
   $add$ptr30 = $7 + (HEAP32[(HEAP32[$7 >> 2] | 0) + -12 >> 2] | 0) | 0;
   __ZNSt3__28ios_base5clearEj($add$ptr30, HEAP32[$add$ptr30 + 16 >> 2] | 1);
  }
 }
 return;
}

function _rlPopMatrix() {
 var $mat = 0, dest = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64);
 $mat = sp;
 if ((HEAP32[14828] | 0) > 0) {
  dest = $mat;
  src = 45360 + ((HEAP32[14828] | 0) - 1 << 6) | 0;
  stop = dest + 64 | 0;
  do {
   HEAP32[dest >> 2] = HEAP32[src >> 2];
   dest = dest + 4 | 0;
   src = src + 4 | 0;
  } while ((dest | 0) < (stop | 0));
  dest = HEAP32[14811] | 0;
  src = $mat;
  stop = dest + 64 | 0;
  do {
   HEAP32[dest >> 2] = HEAP32[src >> 2];
   dest = dest + 4 | 0;
   src = src + 4 | 0;
  } while ((dest | 0) < (stop | 0));
  HEAP32[14828] = (HEAP32[14828] | 0) + -1;
 }
 if (!((HEAP32[14828] | 0) == 0 & (HEAP32[4478] | 0) == 5888)) {
  STACKTOP = sp;
  return;
 }
 HEAP32[14811] = 59248;
 HEAP8[62143] = 0;
 STACKTOP = sp;
 return;
}

function _emscripten_GetProcAddress($name_) {
 $name_ = $name_ | 0;
 var $call1 = 0, $call12 = 0, $call16 = 0, $call20 = 0, $call3 = 0, $call4 = 0, $call8 = 0, $ptr$0 = 0;
 $call1 = _malloc((_strlen($name_) | 0) + 1 | 0) | 0;
 _strcpy($call1, $name_) | 0;
 $call3 = _strstr($call1, 42160) | 0;
 if ($call3 | 0) HEAP8[$call3 >> 0] = 0;
 $call4 = _strstr($call1, 42164) | 0;
 if ($call4 | 0) HEAP8[$call4 >> 0] = 0;
 $call8 = _strstr($call1, 42168) | 0;
 if ($call8 | 0) HEAP8[$call8 >> 0] = 0;
 $call12 = _strstr($call1, 42172) | 0;
 if ($call12 | 0) HEAP8[$call12 >> 0] = 0;
 $call16 = _strstr($call1, 42178) | 0;
 if ($call16 | 0) HEAP8[$call16 >> 0] = 0;
 $call20 = _emscripten_webgl1_get_proc_address($call1) | 0;
 if (!$call20) $ptr$0 = __webgl1_match_ext_proc_address_without_suffix($call1) | 0; else $ptr$0 = $call20;
 _free($call1);
 return $ptr$0 | 0;
}

function _fclose($f) {
 $f = $f | 0;
 var $$pre = 0, $2 = 0, $5 = 0, $9 = 0, $call1 = 0, $call18 = 0, $cond = 0, $or = 0, $tobool = 0;
 if ((HEAP32[$f + 76 >> 2] | 0) > -1) $cond = ___lockfile($f) | 0; else $cond = 0;
 ___unlist_locked_file($f);
 $tobool = (HEAP32[$f >> 2] & 1 | 0) != 0;
 if (!$tobool) {
  $call1 = ___ofl_lock() | 0;
  $2 = HEAP32[$f + 52 >> 2] | 0;
  $$pre = $f + 56 | 0;
  if ($2 | 0) HEAP32[$2 + 56 >> 2] = HEAP32[$$pre >> 2];
  $5 = HEAP32[$$pre >> 2] | 0;
  if ($5 | 0) HEAP32[$5 + 52 >> 2] = $2;
  if ((HEAP32[$call1 >> 2] | 0) == ($f | 0)) HEAP32[$call1 >> 2] = $5;
  ___ofl_unlock();
 }
 $call18 = _fflush($f) | 0;
 $or = FUNCTION_TABLE_ii[HEAP32[$f + 12 >> 2] & 127]($f) | 0 | $call18;
 $9 = HEAP32[$f + 96 >> 2] | 0;
 if ($9 | 0) _free($9);
 if ($tobool) {
  if ($cond | 0) ___unlockfile($f);
 } else _free($f);
 return $or | 0;
}

function __ZNSt3__26__treeINS_12__value_typeINS_5tupleIJiiEEEPN4tson4TileEEENS_19__map_value_compareIS3_S7_NS_4lessIS3_EELb1EEENS_9allocatorIS7_EEE7destroyEPNS_11__tree_nodeIS7_PvEE($this, $__nd) {
 $this = $this | 0;
 $__nd = $__nd | 0;
 if ($__nd | 0) {
  __ZNSt3__26__treeINS_12__value_typeINS_5tupleIJiiEEEPN4tson4TileEEENS_19__map_value_compareIS3_S7_NS_4lessIS3_EELb1EEENS_9allocatorIS7_EEE7destroyEPNS_11__tree_nodeIS7_PvEE($this, HEAP32[$__nd >> 2] | 0);
  __ZNSt3__26__treeINS_12__value_typeINS_5tupleIJiiEEEPN4tson4TileEEENS_19__map_value_compareIS3_S7_NS_4lessIS3_EELb1EEENS_9allocatorIS7_EEE7destroyEPNS_11__tree_nodeIS7_PvEE($this, HEAP32[$__nd + 4 >> 2] | 0);
  __ZNSt3__29__launderINS_4pairIKNS_5tupleIJiiEEEPN4tson4TileEEEEEPT_SA_($__nd + 16 | 0) | 0;
  __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm($__nd, 28);
 }
 return;
}

function _GetFileName($filePath) {
 $filePath = $filePath | 0;
 var $7 = 0, $fileName = 0, $filePath$addr = 0, $retval = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $retval = sp + 8 | 0;
 $filePath$addr = sp + 4 | 0;
 $fileName = sp;
 HEAP32[$filePath$addr >> 2] = $filePath;
 HEAP32[$fileName >> 2] = 0;
 if (HEAP32[$filePath$addr >> 2] | 0) HEAP32[$fileName >> 2] = _strprbrk(HEAP32[$filePath$addr >> 2] | 0, 32403) | 0;
 if (HEAP32[$fileName >> 2] | 0) if ((HEAP32[$fileName >> 2] | 0) != (HEAP32[$filePath$addr >> 2] | 0)) {
  HEAP32[$retval >> 2] = (HEAP32[$fileName >> 2] | 0) + 1;
  $7 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $7 | 0;
 }
 HEAP32[$retval >> 2] = HEAP32[$filePath$addr >> 2];
 $7 = HEAP32[$retval >> 2] | 0;
 STACKTOP = sp;
 return $7 | 0;
}

function __ZNKSt3__27codecvtIDsc11__mbstate_tE6do_outERS1_PKDsS5_RS5_PcS7_RS7_($this, $0, $frm, $frm_end, $frm_nxt, $to, $to_end, $to_nxt) {
 $this = $this | 0;
 $0 = $0 | 0;
 $frm = $frm | 0;
 $frm_end = $frm_end | 0;
 $frm_nxt = $frm_nxt | 0;
 $to = $to | 0;
 $to_end = $to_end | 0;
 $to_nxt = $to_nxt | 0;
 var $_frm_nxt = 0, $_to_nxt = 0, $call = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $_frm_nxt = sp + 4 | 0;
 $_to_nxt = sp;
 HEAP32[$_frm_nxt >> 2] = $frm;
 HEAP32[$_to_nxt >> 2] = $to;
 $call = __ZNSt3__2L13utf16_to_utf8EPKtS1_RS1_PhS3_RS3_mNS_12codecvt_modeE($frm, $frm_end, $_frm_nxt, $to, $to_end, $_to_nxt, 1114111, 0) | 0;
 HEAP32[$frm_nxt >> 2] = HEAP32[$_frm_nxt >> 2];
 HEAP32[$to_nxt >> 2] = HEAP32[$_to_nxt >> 2];
 STACKTOP = sp;
 return $call | 0;
}

function __ZNKSt3__27codecvtIDsc11__mbstate_tE5do_inERS1_PKcS5_RS5_PDsS7_RS7_($this, $0, $frm, $frm_end, $frm_nxt, $to, $to_end, $to_nxt) {
 $this = $this | 0;
 $0 = $0 | 0;
 $frm = $frm | 0;
 $frm_end = $frm_end | 0;
 $frm_nxt = $frm_nxt | 0;
 $to = $to | 0;
 $to_end = $to_end | 0;
 $to_nxt = $to_nxt | 0;
 var $_frm_nxt = 0, $_to_nxt = 0, $call = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $_frm_nxt = sp + 4 | 0;
 $_to_nxt = sp;
 HEAP32[$_frm_nxt >> 2] = $frm;
 HEAP32[$_to_nxt >> 2] = $to;
 $call = __ZNSt3__2L13utf8_to_utf16EPKhS1_RS1_PtS3_RS3_mNS_12codecvt_modeE($frm, $frm_end, $_frm_nxt, $to, $to_end, $_to_nxt, 1114111, 0) | 0;
 HEAP32[$frm_nxt >> 2] = HEAP32[$_frm_nxt >> 2];
 HEAP32[$to_nxt >> 2] = HEAP32[$_to_nxt >> 2];
 STACKTOP = sp;
 return $call | 0;
}

function __ZNKSt3__27codecvtIDic11__mbstate_tE6do_outERS1_PKDiS5_RS5_PcS7_RS7_($this, $0, $frm, $frm_end, $frm_nxt, $to, $to_end, $to_nxt) {
 $this = $this | 0;
 $0 = $0 | 0;
 $frm = $frm | 0;
 $frm_end = $frm_end | 0;
 $frm_nxt = $frm_nxt | 0;
 $to = $to | 0;
 $to_end = $to_end | 0;
 $to_nxt = $to_nxt | 0;
 var $_frm_nxt = 0, $_to_nxt = 0, $call = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $_frm_nxt = sp + 4 | 0;
 $_to_nxt = sp;
 HEAP32[$_frm_nxt >> 2] = $frm;
 HEAP32[$_to_nxt >> 2] = $to;
 $call = __ZNSt3__2L12ucs4_to_utf8EPKjS1_RS1_PhS3_RS3_mNS_12codecvt_modeE($frm, $frm_end, $_frm_nxt, $to, $to_end, $_to_nxt, 1114111, 0) | 0;
 HEAP32[$frm_nxt >> 2] = HEAP32[$_frm_nxt >> 2];
 HEAP32[$to_nxt >> 2] = HEAP32[$_to_nxt >> 2];
 STACKTOP = sp;
 return $call | 0;
}

function _stbir__filter_triangle($x, $s) {
 $x = Math_fround($x);
 $s = Math_fround($s);
 var $4 = f0, $retval = 0, $x$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $retval = sp + 8 | 0;
 $x$addr = sp + 4 | 0;
 HEAPF32[$x$addr >> 2] = $x;
 HEAPF32[sp >> 2] = $s;
 HEAPF32[$x$addr >> 2] = Math_fround(+Math_abs(+(+Math_fround(HEAPF32[$x$addr >> 2]))));
 if (Math_fround(HEAPF32[$x$addr >> 2]) <= Math_fround(1.0)) {
  HEAPF32[$retval >> 2] = Math_fround(Math_fround(1.0) - Math_fround(HEAPF32[$x$addr >> 2]));
  $4 = Math_fround(HEAPF32[$retval >> 2]);
  STACKTOP = sp;
  return Math_fround($4);
 } else {
  HEAPF32[$retval >> 2] = Math_fround(0.0);
  $4 = Math_fround(HEAPF32[$retval >> 2]);
  STACKTOP = sp;
  return Math_fround($4);
 }
 return Math_fround(0.0);
}

function __ZNKSt3__27codecvtIDic11__mbstate_tE5do_inERS1_PKcS5_RS5_PDiS7_RS7_($this, $0, $frm, $frm_end, $frm_nxt, $to, $to_end, $to_nxt) {
 $this = $this | 0;
 $0 = $0 | 0;
 $frm = $frm | 0;
 $frm_end = $frm_end | 0;
 $frm_nxt = $frm_nxt | 0;
 $to = $to | 0;
 $to_end = $to_end | 0;
 $to_nxt = $to_nxt | 0;
 var $_frm_nxt = 0, $_to_nxt = 0, $call = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $_frm_nxt = sp + 4 | 0;
 $_to_nxt = sp;
 HEAP32[$_frm_nxt >> 2] = $frm;
 HEAP32[$_to_nxt >> 2] = $to;
 $call = __ZNSt3__2L12utf8_to_ucs4EPKhS1_RS1_PjS3_RS3_mNS_12codecvt_modeE($frm, $frm_end, $_frm_nxt, $to, $to_end, $_to_nxt, 1114111, 0) | 0;
 HEAP32[$frm_nxt >> 2] = HEAP32[$_frm_nxt >> 2];
 HEAP32[$to_nxt >> 2] = HEAP32[$_to_nxt >> 2];
 STACKTOP = sp;
 return $call | 0;
}

function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_mmRKS4_($this, $__str, $__pos, $__n, $__a) {
 $this = $this | 0;
 $__str = $__str | 0;
 $__pos = $__pos | 0;
 $__n = $__n | 0;
 $__a = $__a | 0;
 var $0 = 0, $cond$i = 0, $sub = 0, $tobool$i$i = 0;
 HEAP32[$this >> 2] = 0;
 HEAP32[$this + 4 >> 2] = 0;
 HEAP32[$this + 8 >> 2] = 0;
 $0 = HEAP8[$__str + 11 >> 0] | 0;
 $tobool$i$i = $0 << 24 >> 24 < 0;
 $cond$i = $tobool$i$i ? HEAP32[$__str + 4 >> 2] | 0 : $0 & 255;
 if ($cond$i >>> 0 < $__pos >>> 0) __ZNKSt3__221__basic_string_commonILb1EE20__throw_out_of_rangeEv($this); else {
  $sub = $cond$i - $__pos | 0;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcm($this, ($tobool$i$i ? HEAP32[$__str >> 2] | 0 : $__str) + $__pos | 0, $sub >>> 0 < $__n >>> 0 ? $sub : $__n);
  return;
 }
}

function __ZNSt3__24stoiERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPmi($str, $idx, $base) {
 $str = $str | 0;
 $idx = $idx | 0;
 $base = $base | 0;
 var $call = 0, $ref$tmp = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $ref$tmp = sp;
 HEAP32[$ref$tmp >> 2] = 0;
 HEAP32[$ref$tmp + 4 >> 2] = 0;
 HEAP32[$ref$tmp + 8 >> 2] = 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcm($ref$tmp, 45017, __ZNSt3__211char_traitsIcE6lengthEPKc(45017) | 0);
 $call = __ZNSt3__212_GLOBAL__N_110as_integerIiNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEET_RKS7_RKT0_Pmi($ref$tmp, $str, $idx, $base) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp);
 STACKTOP = sp;
 return $call | 0;
}

function _EmscriptenMouseCallback($eventType, $mouseEvent, $userData) {
 $eventType = $eventType | 0;
 $mouseEvent = $mouseEvent | 0;
 $userData = $userData | 0;
 var $eventType$addr = 0, $plce = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 272 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(272);
 $eventType$addr = sp + 268 | 0;
 $plce = sp;
 HEAP32[$eventType$addr >> 2] = $eventType;
 HEAP32[sp + 264 >> 2] = $mouseEvent;
 HEAP32[sp + 260 >> 2] = $userData;
 do if ((HEAP32[$eventType$addr >> 2] | 0) == 4) if (0) {
  _emscripten_get_pointerlock_status($plce | 0) | 0;
  if (HEAP32[$plce >> 2] | 0) {
   _emscripten_exit_pointerlock() | 0;
   _emscripten_get_pointerlock_status($plce | 0) | 0;
   break;
  } else {
   _emscripten_request_pointerlock(0, 1) | 0;
   break;
  }
 } while (0);
 STACKTOP = sp;
 return 0;
}

function _TextToLower($text) {
 $text = $text | 0;
 var $conv5 = 0, $i = 0, $text$addr = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $text$addr = sp + 4 | 0;
 $i = sp;
 HEAP32[$text$addr >> 2] = $text;
 HEAP32[$i >> 2] = 0;
 while (1) {
  if ((HEAP32[$i >> 2] | 0) >= 1024) {
   label = 6;
   break;
  }
  if (!(HEAP8[(HEAP32[$text$addr >> 2] | 0) + (HEAP32[$i >> 2] | 0) >> 0] | 0)) break;
  $conv5 = (_tolower(HEAP8[(HEAP32[$text$addr >> 2] | 0) + (HEAP32[$i >> 2] | 0) >> 0] | 0) | 0) & 255;
  HEAP8[54320 + (HEAP32[$i >> 2] | 0) >> 0] = $conv5;
  HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
 }
 if ((label | 0) == 6) {
  STACKTOP = sp;
  return 54320;
 }
 HEAP8[54320 + (HEAP32[$i >> 2] | 0) >> 0] = 0;
 STACKTOP = sp;
 return 54320;
}

function _SetupViewport($width, $height) {
 $width = $width | 0;
 $height = $height | 0;
 var $height$addr = 0, $width$addr = 0, sp = 0, CSE$0 = 0, CSE$1 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $width$addr = sp + 4 | 0;
 $height$addr = sp;
 HEAP32[$width$addr >> 2] = $width;
 HEAP32[$height$addr >> 2] = $height;
 HEAP32[14979] = HEAP32[$width$addr >> 2];
 HEAP32[14980] = HEAP32[$height$addr >> 2];
 CSE$0 = HEAP32[14981] | 0;
 CSE$1 = HEAP32[14982] | 0;
 _rlViewport((CSE$0 | 0) / 2 | 0, (CSE$1 | 0) / 2 | 0, (HEAP32[14979] | 0) - CSE$0 | 0, (HEAP32[14980] | 0) - CSE$1 | 0);
 _rlMatrixMode(5889);
 _rlLoadIdentity();
 _rlOrtho(0.0, +(HEAP32[14979] | 0), +(HEAP32[14980] | 0), 0.0, 0.0, 1.0);
 _rlMatrixMode(5888);
 _rlLoadIdentity();
 STACKTOP = sp;
 return;
}

function __ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareINS_17basic_string_viewIcS2_EEEENS_9enable_ifIXsr33__can_be_converted_to_string_viewIcS2_T_EE5valueEiE4typeERKSA_($this, $__t) {
 $this = $this | 0;
 $__t = $__t | 0;
 var $1 = 0, $2 = 0, $call6 = 0, $cmp$i$i$i = 0, $cond$i$i = 0, $cond$i14 = 0;
 $1 = HEAP32[$__t + 4 >> 2] | 0;
 $2 = HEAP8[$this + 11 >> 0] | 0;
 if ($2 << 24 >> 24 < 0) {
  $cond$i$i = HEAP32[$this >> 2] | 0;
  $cond$i14 = HEAP32[$this + 4 >> 2] | 0;
 } else {
  $cond$i$i = $this;
  $cond$i14 = $2 & 255;
 }
 $cmp$i$i$i = $1 >>> 0 < $cond$i14 >>> 0;
 $call6 = __ZNSt3__211char_traitsIcE7compareEPKcS3_m($cond$i$i, HEAP32[$__t >> 2] | 0, $cmp$i$i$i ? $1 : $cond$i14) | 0;
 if (!$call6) return ($cond$i14 >>> 0 < $1 >>> 0 ? -1 : $cmp$i$i$i & 1) | 0; else return $call6 | 0;
 return 0;
}

function __ZN8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE6createINS3_ISB_NS7_ISB_EEEEJRKSE_EEEPT_DpOT0_($args) {
 $args = $args | 0;
 var $3 = 0, $call2$i$i$i = 0, $object = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $object = sp;
 $call2$i$i$i = __Znwm(12) | 0;
 HEAP32[$object >> 2] = $call2$i$i$i;
 HEAP32[$object + 4 >> 2] = sp + 8;
 __ZNSt3__26vectorIN8nlohmann10basic_jsonINS_3mapES0_NS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEbxydS7_NS1_14adl_serializerEEENS7_ISB_EEEC2ERKSD_($call2$i$i$i, $args);
 $3 = HEAP32[$object >> 2] | 0;
 if (!$3) ___assert_fail(24255, 22221, 15187, 24273); else {
  STACKTOP = sp;
  return $3 | 0;
 }
 return 0;
}

function _stbir__get_ring_buffer_entry($ring_buffer, $index, $ring_buffer_length) {
 $ring_buffer = $ring_buffer | 0;
 $index = $index | 0;
 $ring_buffer_length = $ring_buffer_length | 0;
 var $arrayidx = 0, $index$addr = 0, $ring_buffer$addr = 0, $ring_buffer_length$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $ring_buffer$addr = sp + 8 | 0;
 $index$addr = sp + 4 | 0;
 $ring_buffer_length$addr = sp;
 HEAP32[$ring_buffer$addr >> 2] = $ring_buffer;
 HEAP32[$index$addr >> 2] = $index;
 HEAP32[$ring_buffer_length$addr >> 2] = $ring_buffer_length;
 $arrayidx = (HEAP32[$ring_buffer$addr >> 2] | 0) + ((Math_imul(HEAP32[$index$addr >> 2] | 0, HEAP32[$ring_buffer_length$addr >> 2] | 0) | 0) << 2) | 0;
 STACKTOP = sp;
 return $arrayidx | 0;
}

function _stbiw__crc32($buffer, $len) {
 $buffer = $buffer | 0;
 $len = $len | 0;
 var $2 = 0, $buffer$addr = 0, $crc = 0, $i = 0, $len$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $buffer$addr = sp + 12 | 0;
 $len$addr = sp + 8 | 0;
 $crc = sp + 4 | 0;
 $i = sp;
 HEAP32[$buffer$addr >> 2] = $buffer;
 HEAP32[$len$addr >> 2] = $len;
 HEAP32[$crc >> 2] = -1;
 HEAP32[$i >> 2] = 0;
 while (1) {
  $2 = HEAP32[$crc >> 2] | 0;
  if ((HEAP32[$i >> 2] | 0) >= (HEAP32[$len$addr >> 2] | 0)) break;
  HEAP32[$crc >> 2] = $2 >>> 8 ^ HEAP32[5216 + (((HEAPU8[(HEAP32[$buffer$addr >> 2] | 0) + (HEAP32[$i >> 2] | 0) >> 0] | 0) ^ HEAP32[$crc >> 2] & 255) << 2) >> 2];
  HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
 }
 STACKTOP = sp;
 return ~$2 | 0;
}

function _realloc($oldmem, $bytes) {
 $oldmem = $oldmem | 0;
 $bytes = $bytes | 0;
 var $0 = 0, $call12 = 0, $call7 = 0, $mem$1 = 0, $sub = 0;
 if (!$oldmem) {
  $mem$1 = _malloc($bytes) | 0;
  return $mem$1 | 0;
 }
 if ($bytes >>> 0 > 4294967231) {
  HEAP32[(___errno_location() | 0) >> 2] = 48;
  $mem$1 = 0;
  return $mem$1 | 0;
 }
 $call7 = _try_realloc_chunk($oldmem + -8 | 0, $bytes >>> 0 < 11 ? 16 : $bytes + 11 & -8) | 0;
 if ($call7 | 0) {
  $mem$1 = $call7 + 8 | 0;
  return $mem$1 | 0;
 }
 $call12 = _malloc($bytes) | 0;
 if (!$call12) {
  $mem$1 = 0;
  return $mem$1 | 0;
 }
 $0 = HEAP32[$oldmem + -4 >> 2] | 0;
 $sub = ($0 & -8) - (($0 & 3 | 0) == 0 ? 8 : 4) | 0;
 _memcpy($call12 | 0, $oldmem | 0, ($sub >>> 0 < $bytes >>> 0 ? $sub : $bytes) | 0) | 0;
 _free($oldmem);
 $mem$1 = $call12;
 return $mem$1 | 0;
}

function _stbi__mad2sizes_valid($a, $b, $add) {
 $a = $a | 0;
 $b = $b | 0;
 $add = $add | 0;
 var $5 = 0, $a$addr = 0, $add$addr = 0, $b$addr = 0, $land$ext = 0, $mul = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $a$addr = sp + 8 | 0;
 $b$addr = sp + 4 | 0;
 $add$addr = sp;
 HEAP32[$a$addr >> 2] = $a;
 HEAP32[$b$addr >> 2] = $b;
 HEAP32[$add$addr >> 2] = $add;
 if (!(_stbi__mul2sizes_valid(HEAP32[$a$addr >> 2] | 0, HEAP32[$b$addr >> 2] | 0) | 0)) {
  $5 = 0;
  $land$ext = $5 & 1;
  STACKTOP = sp;
  return $land$ext | 0;
 }
 $mul = Math_imul(HEAP32[$a$addr >> 2] | 0, HEAP32[$b$addr >> 2] | 0) | 0;
 $5 = (_stbi__addsizes_valid($mul, HEAP32[$add$addr >> 2] | 0) | 0) != 0;
 $land$ext = $5 & 1;
 STACKTOP = sp;
 return $land$ext | 0;
}

function _Wait($ms) {
 $ms = Math_fround($ms);
 var $conv1 = f0, $ms$addr = 0, $req = 0, $sec = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $ms$addr = sp + 16 | 0;
 $req = sp + 8 | 0;
 $sec = sp;
 HEAPF32[$ms$addr >> 2] = $ms;
 HEAP32[$req >> 2] = 0;
 HEAP32[$req + 4 >> 2] = 0;
 HEAP32[$sec >> 2] = ~~Math_fround(Math_fround(HEAPF32[$ms$addr >> 2]) / Math_fround(1.0e3));
 $conv1 = Math_fround((HEAP32[$sec >> 2] | 0) * 1e3 | 0);
 HEAPF32[$ms$addr >> 2] = Math_fround(Math_fround(HEAPF32[$ms$addr >> 2]) - $conv1);
 HEAP32[$req >> 2] = HEAP32[$sec >> 2];
 HEAP32[$req + 4 >> 2] = ~~Math_fround(Math_fround(HEAPF32[$ms$addr >> 2]) * Math_fround(1.0e6));
 do {} while ((_nanosleep($req | 0, $req | 0) | 0) == -1);
 STACKTOP = sp;
 return;
}

function __ZNSt3__24__fs10filesystem6detail12_GLOBAL__N_110posix_statERKNS1_4pathER4statPNS_10error_codeE($agg$result, $p, $path_stat, $ec) {
 $agg$result = $agg$result | 0;
 $p = $p | 0;
 $path_stat = $path_stat | 0;
 $ec = $ec | 0;
 var $m_ec = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $m_ec = sp;
 HEAP32[$m_ec >> 2] = 0;
 HEAP32[$m_ec + 4 >> 2] = __ZNSt3__215system_categoryEv() | 0;
 if ((_stat((HEAP8[$p + 11 >> 0] | 0) < 0 ? HEAP32[$p >> 2] | 0 : $p, $path_stat) | 0) == -1) __ZNSt3__24__fs10filesystem6detail12_GLOBAL__N_113capture_errnoEv($m_ec);
 __ZNSt3__24__fs10filesystem6detail12_GLOBAL__N_118create_file_statusERNS_10error_codeERKNS1_4pathERK4statPS4_($agg$result, $m_ec, $p, $path_stat, $ec);
 STACKTOP = sp;
 return;
}

function __ZNSt3__26__treeINS_12__value_typeIiPN4tson4TileEEENS_19__map_value_compareIiS5_NS_4lessIiEELb1EEENS_9allocatorIS5_EEE16__construct_nodeIJRKNS_4pairIKiS4_EEEEENS_10unique_ptrINS_11__tree_nodeIS5_PvEENS_22__tree_node_destructorINSA_ISM_EEEEEEDpOT_($agg$result, $this, $__args) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__args = $__args | 0;
 var $2 = 0, $7 = 0, $8 = 0, $call$i$i$i = 0, $call2$i$i$i = 0;
 $call2$i$i$i = __Znwm(24) | 0;
 HEAP32[$agg$result >> 2] = $call2$i$i$i;
 HEAP32[$agg$result + 4 >> 2] = $this + 4;
 $call$i$i$i = __ZNSt3__29__launderINS_4pairIKiPN4tson4TileEEEEEPT_S8_($call2$i$i$i + 16 | 0) | 0;
 $2 = $__args;
 $7 = HEAP32[$2 + 4 >> 2] | 0;
 $8 = $call$i$i$i;
 HEAP32[$8 >> 2] = HEAP32[$2 >> 2];
 HEAP32[$8 + 4 >> 2] = $7;
 HEAP8[$agg$result + 8 >> 0] = 1;
 return;
}

function _twobyte_strstr($h, $n) {
 $h = $h | 0;
 $n = $n | 0;
 var $2 = 0, $4 = 0, $5 = 0, $arrayidx7 = 0, $conv12 = 0, $h$addr$012 = 0, $hw$0$in13 = 0, $incdec$ptr17 = 0, $or = 0;
 $or = (HEAPU8[$n >> 0] | 0) << 8 | (HEAPU8[$n + 1 >> 0] | 0);
 $arrayidx7 = $h + 1 | 0;
 $2 = HEAP8[$arrayidx7 >> 0] | 0;
 L1 : do if (!($2 << 24 >> 24)) $5 = 0; else {
  $h$addr$012 = $arrayidx7;
  $hw$0$in13 = (HEAPU8[$h >> 0] | 0) << 8 | $2 & 255;
  while (1) {
   $conv12 = $hw$0$in13 & 65535;
   if (($conv12 | 0) == ($or | 0)) break;
   $incdec$ptr17 = $h$addr$012 + 1 | 0;
   $4 = HEAP8[$incdec$ptr17 >> 0] | 0;
   if (!($4 << 24 >> 24)) {
    $5 = 0;
    break L1;
   } else {
    $h$addr$012 = $incdec$ptr17;
    $hw$0$in13 = $conv12 << 8 | $4 & 255;
   }
  }
  $5 = $h$addr$012 + -1 | 0;
 } while (0);
 return $5 | 0;
}

function __ZNSt3__211__stdoutbufIwEC2EP8_IO_FILEP11__mbstate_t($this, $__fp, $__st) {
 $this = $this | 0;
 $__fp = $__fp | 0;
 $__st = $__st | 0;
 var $call$i = 0, $ref$tmp = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $ref$tmp = sp;
 __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEEC2Ev($this);
 HEAP32[$this >> 2] = 18972;
 HEAP32[$this + 32 >> 2] = $__fp;
 __ZNSt3__26localeC2ERKS0_($ref$tmp, $this + 4 | 0);
 $call$i = __ZNKSt3__26locale9use_facetERNS0_2idE($ref$tmp, 61528) | 0;
 __ZNSt3__26localeD2Ev($ref$tmp);
 HEAP32[$this + 36 >> 2] = $call$i;
 HEAP32[$this + 40 >> 2] = $__st;
 HEAP8[$this + 44 >> 0] = (FUNCTION_TABLE_ii[HEAP32[(HEAP32[$call$i >> 2] | 0) + 28 >> 2] & 127]($call$i) | 0) & 1;
 STACKTOP = sp;
 return;
}

function __ZNSt3__211__stdoutbufIcEC2EP8_IO_FILEP11__mbstate_t($this, $__fp, $__st) {
 $this = $this | 0;
 $__fp = $__fp | 0;
 $__st = $__st | 0;
 var $call$i = 0, $ref$tmp = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $ref$tmp = sp;
 __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEEC2Ev($this);
 HEAP32[$this >> 2] = 19036;
 HEAP32[$this + 32 >> 2] = $__fp;
 __ZNSt3__26localeC2ERKS0_($ref$tmp, $this + 4 | 0);
 $call$i = __ZNKSt3__26locale9use_facetERNS0_2idE($ref$tmp, 61520) | 0;
 __ZNSt3__26localeD2Ev($ref$tmp);
 HEAP32[$this + 36 >> 2] = $call$i;
 HEAP32[$this + 40 >> 2] = $__st;
 HEAP8[$this + 44 >> 0] = (FUNCTION_TABLE_ii[HEAP32[(HEAP32[$call$i >> 2] | 0) + 28 >> 2] & 127]($call$i) | 0) & 1;
 STACKTOP = sp;
 return;
}

function __ZNSt3__26__treeINS_12__value_typeIiPN4tson4TileEEENS_19__map_value_compareIiS5_NS_4lessIiEELb1EEENS_9allocatorIS5_EEE8__detachEPNS_11__tree_nodeIS5_PvEE($__cache) {
 $__cache = $__cache | 0;
 var $1 = 0, $2 = 0, $4 = 0, $retval$0 = 0;
 $1 = HEAP32[$__cache + 8 >> 2] | 0;
 do if (!$1) $retval$0 = 0; else {
  $2 = HEAP32[$1 >> 2] | 0;
  if (($2 | 0) == ($__cache | 0)) {
   HEAP32[$1 >> 2] = 0;
   $4 = HEAP32[$1 + 4 >> 2] | 0;
   if (!$4) {
    $retval$0 = $1;
    break;
   }
   $retval$0 = __ZNSt3__211__tree_leafIPNS_16__tree_node_baseIPvEEEET_S5_($4) | 0;
   break;
  } else {
   HEAP32[$1 + 4 >> 2] = 0;
   if (!$2) {
    $retval$0 = $1;
    break;
   }
   $retval$0 = __ZNSt3__211__tree_leafIPNS_16__tree_node_baseIPvEEEET_S5_($2) | 0;
   break;
  }
 } while (0);
 return $retval$0 | 0;
}

function __ZNSt3__214__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lm28EEEED2Ev($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $__end_$i$i$i = 0, $incdec$ptr$i$i$i = 0;
 $0 = HEAP32[$this + 4 >> 2] | 0;
 $__end_$i$i$i = $this + 8 | 0;
 $1 = HEAP32[$__end_$i$i$i >> 2] | 0;
 while (1) {
  if (($1 | 0) == ($0 | 0)) break;
  $incdec$ptr$i$i$i = $1 + -4 | 0;
  HEAP32[$__end_$i$i$i >> 2] = $incdec$ptr$i$i$i;
  $1 = $incdec$ptr$i$i$i;
 }
 $2 = HEAP32[$this >> 2] | 0;
 $3 = $2;
 do if ($2 | 0) {
  $4 = HEAP32[$this + 16 >> 2] | 0;
  if (($2 | 0) == ($4 | 0)) {
   HEAP8[$4 + 112 >> 0] = 0;
   break;
  } else {
   __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm($2, (HEAP32[$this + 12 >> 2] | 0) - $3 | 0);
   break;
  }
 } while (0);
 return;
}

function _GetGamepadAxis($axis) {
 $axis = $axis | 0;
 var $axis$addr = 0, $axs = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $axis$addr = sp + 4 | 0;
 $axs = sp;
 HEAP32[$axis$addr >> 2] = $axis;
 HEAP32[$axs >> 2] = 0;
 switch (HEAP32[$axis$addr >> 2] | 0) {
 case 0:
  {
   HEAP32[$axs >> 2] = 1;
   label = 3;
   break;
  }
 case 1:
  {
   label = 3;
   break;
  }
 case 2:
  {
   label = 4;
   break;
  }
 case 3:
  {
   label = 5;
   break;
  }
 default:
  {}
 }
 if ((label | 0) == 3) {
  HEAP32[$axs >> 2] = 2;
  label = 4;
 }
 if ((label | 0) == 4) {
  HEAP32[$axs >> 2] = 3;
  label = 5;
 }
 if ((label | 0) == 5) HEAP32[$axs >> 2] = 3;
 STACKTOP = sp;
 return HEAP32[$axs >> 2] | 0;
}

function __ZN8nlohmann6detail28json_sax_dom_callback_parserINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE15number_unsignedEy($this, $0, $1) {
 $this = $this | 0;
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $val$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $val$addr = sp;
 $2 = $val$addr;
 HEAP32[$2 >> 2] = $0;
 HEAP32[$2 + 4 >> 2] = $1;
 __ZN8nlohmann6detail28json_sax_dom_callback_parserINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE12handle_valueIRyEENS3_4pairIbPSD_EEOT_b(sp + 8 | 0, $this, $val$addr, 0);
 STACKTOP = sp;
 return 1;
}

function __ZN8nlohmann6detail28json_sax_dom_callback_parserINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE14number_integerEx($this, $0, $1) {
 $this = $this | 0;
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $val$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $val$addr = sp;
 $2 = $val$addr;
 HEAP32[$2 >> 2] = $0;
 HEAP32[$2 + 4 >> 2] = $1;
 __ZN8nlohmann6detail28json_sax_dom_callback_parserINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE12handle_valueIRxEENS3_4pairIbPSD_EEOT_b(sp + 8 | 0, $this, $val$addr, 0);
 STACKTOP = sp;
 return 1;
}

function __ZNSt3__2L11init_wam_pmEv() {
 var $__i$0$i$i = 0, $arrayctor$cur = 0;
 if (!(HEAP8[58608] | 0)) if (___cxa_guard_acquire(58608) | 0) {
  $arrayctor$cur = 57920;
  do {
   HEAP32[$arrayctor$cur >> 2] = 0;
   HEAP32[$arrayctor$cur + 4 >> 2] = 0;
   HEAP32[$arrayctor$cur + 8 >> 2] = 0;
   $__i$0$i$i = 0;
   while (1) {
    if (($__i$0$i$i | 0) == 3) break;
    HEAP32[$arrayctor$cur + ($__i$0$i$i << 2) >> 2] = 0;
    $__i$0$i$i = $__i$0$i$i + 1 | 0;
   }
   $arrayctor$cur = $arrayctor$cur + 12 | 0;
  } while (($arrayctor$cur | 0) != 57944);
  ___cxa_guard_release(58608);
 }
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(57920, 19888) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(57932, 19900) | 0;
 return;
}

function __ZNSt3__2L10init_am_pmEv() {
 var $__i$0$i$i = 0, $arrayctor$cur = 0;
 if (!(HEAP8[58528] | 0)) if (___cxa_guard_acquire(58528) | 0) {
  $arrayctor$cur = 57424;
  do {
   HEAP32[$arrayctor$cur >> 2] = 0;
   HEAP32[$arrayctor$cur + 4 >> 2] = 0;
   HEAP32[$arrayctor$cur + 8 >> 2] = 0;
   $__i$0$i$i = 0;
   while (1) {
    if (($__i$0$i$i | 0) == 3) break;
    HEAP32[$arrayctor$cur + ($__i$0$i$i << 2) >> 2] = 0;
    $__i$0$i$i = $__i$0$i$i + 1 | 0;
   }
   $arrayctor$cur = $arrayctor$cur + 12 | 0;
  } while (($arrayctor$cur | 0) != 57448);
  ___cxa_guard_release(58528);
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(57424, 43336) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(57436, 43339) | 0;
 return;
}

function __ZNSt3__26__treeINS_12__value_typeIiPN4tson4TileEEENS_19__map_value_compareIiS5_NS_4lessIiEELb1EEENS_9allocatorIS5_EEE7destroyEPNS_11__tree_nodeIS5_PvEE($this, $__nd) {
 $this = $this | 0;
 $__nd = $__nd | 0;
 if ($__nd | 0) {
  __ZNSt3__26__treeINS_12__value_typeIiPN4tson4TileEEENS_19__map_value_compareIiS5_NS_4lessIiEELb1EEENS_9allocatorIS5_EEE7destroyEPNS_11__tree_nodeIS5_PvEE($this, HEAP32[$__nd >> 2] | 0);
  __ZNSt3__26__treeINS_12__value_typeIiPN4tson4TileEEENS_19__map_value_compareIiS5_NS_4lessIiEELb1EEENS_9allocatorIS5_EEE7destroyEPNS_11__tree_nodeIS5_PvEE($this, HEAP32[$__nd + 4 >> 2] | 0);
  __ZNSt3__29__launderINS_4pairIKiPN4tson4TileEEEEEPT_S8_($__nd + 16 | 0) | 0;
  __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm($__nd, 24);
 }
 return;
}

function __ZNSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN4tson8PropertyEEENS_19__map_value_compareIS7_SA_NS_4lessIS7_EELb1EEENS5_ISA_EEEC2EOSG_($this, $__t) {
 $this = $this | 0;
 $__t = $__t | 0;
 var $1 = 0, $2 = 0, $4 = 0, $__value_$i$i$i11 = 0, $__value_$i$i$i8 = 0;
 HEAP32[$this >> 2] = HEAP32[$__t >> 2];
 $1 = HEAP32[$__t + 4 >> 2] | 0;
 HEAP32[$this + 4 >> 2] = $1;
 $2 = $__t + 8 | 0;
 $4 = HEAP32[$2 >> 2] | 0;
 HEAP32[$this + 8 >> 2] = $4;
 $__value_$i$i$i11 = $this + 4 | 0;
 if (!$4) HEAP32[$this >> 2] = $__value_$i$i$i11; else {
  HEAP32[$1 + 8 >> 2] = $__value_$i$i$i11;
  $__value_$i$i$i8 = $__t + 4 | 0;
  HEAP32[$__t >> 2] = $__value_$i$i$i8;
  HEAP32[$__value_$i$i$i8 >> 2] = 0;
  HEAP32[$2 >> 2] = 0;
 }
 return;
}

function __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this, $info, $dst_ptr, $current_ptr, $path_below, $use_strcmp) {
 $this = $this | 0;
 $info = $info | 0;
 $dst_ptr = $dst_ptr | 0;
 $current_ptr = $current_ptr | 0;
 $path_below = $path_below | 0;
 $use_strcmp = $use_strcmp | 0;
 var $0 = 0, $3 = 0, $offset_to_base$0 = 0, $shr = 0;
 $0 = HEAP32[$this + 4 >> 2] | 0;
 $shr = $0 >> 8;
 if (!($0 & 1)) $offset_to_base$0 = $shr; else $offset_to_base$0 = HEAP32[(HEAP32[$current_ptr >> 2] | 0) + $shr >> 2] | 0;
 $3 = HEAP32[$this >> 2] | 0;
 FUNCTION_TABLE_viiiiii[HEAP32[(HEAP32[$3 >> 2] | 0) + 20 >> 2] & 15]($3, $info, $dst_ptr, $current_ptr + $offset_to_base$0 | 0, ($0 & 2 | 0) == 0 ? 2 : $path_below, $use_strcmp);
 return;
}

function _MatrixIdentity($agg$result) {
 $agg$result = $agg$result | 0;
 var $result = 0, dest = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64);
 $result = sp;
 dest = $result;
 stop = dest + 64 | 0;
 do {
  HEAP32[dest >> 2] = 0;
  dest = dest + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAPF32[$result >> 2] = Math_fround(1.0);
 HEAPF32[$result + 20 >> 2] = Math_fround(1.0);
 HEAPF32[$result + 40 >> 2] = Math_fround(1.0);
 HEAPF32[$result + 60 >> 2] = Math_fround(1.0);
 dest = $agg$result;
 src = $result;
 stop = dest + 64 | 0;
 do {
  HEAP32[dest >> 2] = HEAP32[src >> 2];
  dest = dest + 4 | 0;
  src = src + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 STACKTOP = sp;
 return;
}

function _pad_667($f, $c, $w, $l, $fl) {
 $f = $f | 0;
 $c = $c | 0;
 $w = $w | 0;
 $l = $l | 0;
 $fl = $fl | 0;
 var $1 = 0, $l$addr$0$lcssa = 0, $l$addr$09 = 0, $pad = 0, $sub = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(256);
 $pad = sp;
 if (($w | 0) > ($l | 0) & ($fl & 73728 | 0) == 0) {
  $sub = $w - $l | 0;
  _memset($pad | 0, $c << 24 >> 24 | 0, ($sub >>> 0 < 256 ? $sub : 256) | 0) | 0;
  if ($sub >>> 0 > 255) {
   $1 = $w - $l | 0;
   $l$addr$09 = $sub;
   do {
    _out($f, $pad, 256);
    $l$addr$09 = $l$addr$09 + -256 | 0;
   } while ($l$addr$09 >>> 0 > 255);
   $l$addr$0$lcssa = $1 & 255;
  } else $l$addr$0$lcssa = $sub;
  _out($f, $pad, $l$addr$0$lcssa);
 }
 STACKTOP = sp;
 return;
}

function __ZNSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN4tson8PropertyEEENS_19__map_value_compareIS7_SA_NS_4lessIS7_EELb1EEENS5_ISA_EEEaSEOSG_($this, $__t) {
 $this = $this | 0;
 $__t = $__t | 0;
 var $agg$tmp$byval_copy = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $agg$tmp$byval_copy = sp + 1 | 0;
 HEAP8[$agg$tmp$byval_copy >> 0] = HEAP8[sp >> 0] | 0;
 __ZNSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN4tson8PropertyEEENS_19__map_value_compareIS7_SA_NS_4lessIS7_EELb1EEENS5_ISA_EEE13__move_assignERSG_NS_17integral_constantIbLb1EEE($this, $__t, $agg$tmp$byval_copy);
 STACKTOP = sp;
 return $this | 0;
}

function ___toread($f) {
 $f = $f | 0;
 var $4 = 0, $add$ptr = 0, $conv = 0, $mode = 0, $retval$0 = 0, $wbase = 0, $wpos = 0;
 $mode = $f + 74 | 0;
 $conv = HEAP8[$mode >> 0] | 0;
 HEAP8[$mode >> 0] = $conv + 255 | $conv;
 $wpos = $f + 20 | 0;
 $wbase = $f + 28 | 0;
 if ((HEAP32[$wpos >> 2] | 0) >>> 0 > (HEAP32[$wbase >> 2] | 0) >>> 0) FUNCTION_TABLE_iiii[HEAP32[$f + 36 >> 2] & 63]($f, 0, 0) | 0;
 HEAP32[$f + 16 >> 2] = 0;
 HEAP32[$wbase >> 2] = 0;
 HEAP32[$wpos >> 2] = 0;
 $4 = HEAP32[$f >> 2] | 0;
 if (!($4 & 4)) {
  $add$ptr = (HEAP32[$f + 44 >> 2] | 0) + (HEAP32[$f + 48 >> 2] | 0) | 0;
  HEAP32[$f + 8 >> 2] = $add$ptr;
  HEAP32[$f + 4 >> 2] = $add$ptr;
  $retval$0 = $4 << 27 >> 31;
 } else {
  HEAP32[$f >> 2] = $4 | 32;
  $retval$0 = -1;
 }
 return $retval$0 | 0;
}

function __ZNSt3__210__stdinbufIwEC2EP8_IO_FILEP11__mbstate_t($this, $__fp, $__st) {
 $this = $this | 0;
 $__fp = $__fp | 0;
 $__st = $__st | 0;
 var $0 = 0, $ref$tmp = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $ref$tmp = sp;
 __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEEC2Ev($this);
 HEAP32[$this >> 2] = 19100;
 HEAP32[$this + 32 >> 2] = $__fp;
 HEAP32[$this + 40 >> 2] = $__st;
 HEAP32[$this + 48 >> 2] = __ZNSt3__211char_traitsIwE3eofEv() | 0;
 HEAP8[$this + 52 >> 0] = 0;
 $0 = HEAP32[(HEAP32[$this >> 2] | 0) + 8 >> 2] | 0;
 __ZNSt3__26localeC2ERKS0_($ref$tmp, $this + 4 | 0);
 FUNCTION_TABLE_vii[$0 & 127]($this, $ref$tmp);
 __ZNSt3__26localeD2Ev($ref$tmp);
 STACKTOP = sp;
 return;
}

function __ZNSt3__210__stdinbufIcEC2EP8_IO_FILEP11__mbstate_t($this, $__fp, $__st) {
 $this = $this | 0;
 $__fp = $__fp | 0;
 $__st = $__st | 0;
 var $0 = 0, $ref$tmp = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $ref$tmp = sp;
 __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEEC2Ev($this);
 HEAP32[$this >> 2] = 19164;
 HEAP32[$this + 32 >> 2] = $__fp;
 HEAP32[$this + 40 >> 2] = $__st;
 HEAP32[$this + 48 >> 2] = __ZNSt3__211char_traitsIcE3eofEv() | 0;
 HEAP8[$this + 52 >> 0] = 0;
 $0 = HEAP32[(HEAP32[$this >> 2] | 0) + 8 >> 2] | 0;
 __ZNSt3__26localeC2ERKS0_($ref$tmp, $this + 4 | 0);
 FUNCTION_TABLE_vii[$0 & 127]($this, $ref$tmp);
 __ZNSt3__26localeD2Ev($ref$tmp);
 STACKTOP = sp;
 return;
}

function _getc($f) {
 $f = $f | 0;
 var $1 = 0, $4 = 0, $cond15 = 0, $retval$0 = 0, $rpos = 0, $rpos4 = 0, label = 0;
 label = 0;
 if ((HEAP32[$f + 76 >> 2] | 0) < 0) label = 3; else if (!(___lockfile($f) | 0)) label = 3; else {
  $rpos4 = $f + 4 | 0;
  $4 = HEAP32[$rpos4 >> 2] | 0;
  if ($4 >>> 0 < (HEAP32[$f + 8 >> 2] | 0) >>> 0) {
   HEAP32[$rpos4 >> 2] = $4 + 1;
   $cond15 = HEAPU8[$4 >> 0] | 0;
  } else $cond15 = ___uflow($f) | 0;
  $retval$0 = $cond15;
 }
 do if ((label | 0) == 3) {
  $rpos = $f + 4 | 0;
  $1 = HEAP32[$rpos >> 2] | 0;
  if ($1 >>> 0 < (HEAP32[$f + 8 >> 2] | 0) >>> 0) {
   HEAP32[$rpos >> 2] = $1 + 1;
   $retval$0 = HEAPU8[$1 >> 0] | 0;
   break;
  } else {
   $retval$0 = ___uflow($f) | 0;
   break;
  }
 } while (0);
 return $retval$0 | 0;
}

function __ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this, $info, $dst_ptr, $current_ptr, $path_below, $use_strcmp) {
 $this = $this | 0;
 $info = $info | 0;
 $dst_ptr = $dst_ptr | 0;
 $current_ptr = $current_ptr | 0;
 $path_below = $path_below | 0;
 $use_strcmp = $use_strcmp | 0;
 var $1 = 0;
 if (__ZL8is_equalPKSt9type_infoS1_b($this, HEAP32[$info + 8 >> 2] | 0, $use_strcmp) | 0) __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0, $info, $dst_ptr, $current_ptr, $path_below); else {
  $1 = HEAP32[$this + 8 >> 2] | 0;
  FUNCTION_TABLE_viiiiii[HEAP32[(HEAP32[$1 >> 2] | 0) + 20 >> 2] & 15]($1, $info, $dst_ptr, $current_ptr, $path_below, $use_strcmp);
 }
 return;
}

function __ZN8nlohmann6detail20input_stream_adapter13get_characterEv($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $5 = 0, $__ninp_$i = 0, $add$ptr = 0, $retval$0$i = 0;
 $0 = HEAP32[$this + 8 >> 2] | 0;
 $__ninp_$i = $0 + 12 | 0;
 $1 = HEAP32[$__ninp_$i >> 2] | 0;
 if (($1 | 0) == (HEAP32[$0 + 16 >> 2] | 0)) $retval$0$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$0 >> 2] | 0) + 40 >> 2] & 127]($0) | 0; else {
  HEAP32[$__ninp_$i >> 2] = $1 + 1;
  $retval$0$i = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$1 >> 0] | 0) | 0;
 }
 if (($retval$0$i | 0) == -1) {
  $5 = HEAP32[$this + 4 >> 2] | 0;
  $add$ptr = $5 + (HEAP32[(HEAP32[$5 >> 2] | 0) + -12 >> 2] | 0) | 0;
  __ZNSt3__28ios_base5clearEj($add$ptr, HEAP32[$add$ptr + 16 >> 2] | 2);
 }
 return $retval$0$i | 0;
}

function _strtox_735($s, $p, $base, $0, $1) {
 $s = $s | 0;
 $p = $p | 0;
 $base = $base | 0;
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $f = 0, $rpos = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(144);
 $f = sp;
 HEAP32[$f >> 2] = 0;
 $rpos = $f + 4 | 0;
 HEAP32[$rpos >> 2] = $s;
 HEAP32[$f + 44 >> 2] = $s;
 $2 = $f + 8 | 0;
 HEAP32[$2 >> 2] = ($s | 0) < 0 ? -1 : $s + 2147483647 | 0;
 HEAP32[$f + 76 >> 2] = -1;
 ___shlim($f, 0, 0);
 $3 = ___intscan($f, $base, 1, $0, $1) | 0;
 $4 = getTempRet0() | 0;
 if ($p | 0) HEAP32[$p >> 2] = $s + ((HEAP32[$rpos >> 2] | 0) + (HEAP32[$f + 120 >> 2] | 0) - (HEAP32[$2 >> 2] | 0));
 setTempRet0($4 | 0);
 STACKTOP = sp;
 return $3 | 0;
}

function __ZN8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEC2IRS9_S9_Li0EEEOT_($this, $val) {
 $this = $this | 0;
 $val = $val | 0;
 var $1 = 0;
 HEAP8[$this >> 0] = 0;
 $1 = $this + 8 | 0;
 HEAP32[$1 >> 2] = 0;
 HEAP32[$1 + 4 >> 2] = 0;
 __ZN8nlohmann14adl_serializerINSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEvE7to_jsonINS_10basic_jsonINS1_3mapENS1_6vectorES7_bxydS5_S0_EERS7_EEDTcmclL_ZNS_12_GLOBAL__N_17to_jsonEEfp_clsr3stdE7forwardIT0_Efp0_EEcvv_EERT_OSG_($this, $val);
 __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE16assert_invariantEv($this);
 return;
}

function __ZN8nlohmann6detail13input_adapterC2ERNSt3__213basic_istreamIcNS2_11char_traitsIcEEEE($this, $i) {
 $this = $this | 0;
 $i = $i | 0;
 var $__cntrl_3$i = 0, $ref$tmp = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $ref$tmp = sp;
 __ZNSt3__210shared_ptrIN8nlohmann6detail20input_stream_adapterEE11make_sharedIJRNS_13basic_istreamIcNS_11char_traitsIcEEEEEEES4_DpOT_($ref$tmp, $i);
 HEAP32[$this >> 2] = HEAP32[$ref$tmp >> 2];
 $__cntrl_3$i = $ref$tmp + 4 | 0;
 HEAP32[$this + 4 >> 2] = HEAP32[$__cntrl_3$i >> 2];
 HEAP32[$ref$tmp >> 2] = 0;
 HEAP32[$__cntrl_3$i >> 2] = 0;
 __ZNSt3__210shared_ptrIN8nlohmann6detail20input_stream_adapterEED2Ev($ref$tmp);
 STACKTOP = sp;
 return;
}

function __ZN8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEC2IRyyLi0EEEOT_($this, $val) {
 $this = $this | 0;
 $val = $val | 0;
 var $1 = 0;
 HEAP8[$this >> 0] = 0;
 $1 = $this + 8 | 0;
 HEAP32[$1 >> 2] = 0;
 HEAP32[$1 + 4 >> 2] = 0;
 __ZN8nlohmann14adl_serializerIyvE7to_jsonINS_10basic_jsonINSt3__23mapENS4_6vectorENS4_12basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEbxydSA_S0_EERyEEDTcmclL_ZNS_12_GLOBAL__N_17to_jsonEEfp_clsr3stdE7forwardIT0_Efp0_EEcvv_EERT_OSG_($this, $val);
 __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE16assert_invariantEv($this);
 return;
}

function __ZN8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEC2IRxxLi0EEEOT_($this, $val) {
 $this = $this | 0;
 $val = $val | 0;
 var $1 = 0;
 HEAP8[$this >> 0] = 0;
 $1 = $this + 8 | 0;
 HEAP32[$1 >> 2] = 0;
 HEAP32[$1 + 4 >> 2] = 0;
 __ZN8nlohmann14adl_serializerIxvE7to_jsonINS_10basic_jsonINSt3__23mapENS4_6vectorENS4_12basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEbxydSA_S0_EERxEEDTcmclL_ZNS_12_GLOBAL__N_17to_jsonEEfp_clsr3stdE7forwardIT0_Efp0_EEcvv_EERT_OSG_($this, $val);
 __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE16assert_invariantEv($this);
 return;
}

function __ZN8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEC2IRddLi0EEEOT_($this, $val) {
 $this = $this | 0;
 $val = $val | 0;
 var $1 = 0;
 HEAP8[$this >> 0] = 0;
 $1 = $this + 8 | 0;
 HEAP32[$1 >> 2] = 0;
 HEAP32[$1 + 4 >> 2] = 0;
 __ZN8nlohmann14adl_serializerIdvE7to_jsonINS_10basic_jsonINSt3__23mapENS4_6vectorENS4_12basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEbxydSA_S0_EERdEEDTcmclL_ZNS_12_GLOBAL__N_17to_jsonEEfp_clsr3stdE7forwardIT0_Efp0_EEcvv_EERT_OSG_($this, $val);
 __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE16assert_invariantEv($this);
 return;
}

function __ZN8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEC2IRbbLi0EEEOT_($this, $val) {
 $this = $this | 0;
 $val = $val | 0;
 var $1 = 0;
 HEAP8[$this >> 0] = 0;
 $1 = $this + 8 | 0;
 HEAP32[$1 >> 2] = 0;
 HEAP32[$1 + 4 >> 2] = 0;
 __ZN8nlohmann14adl_serializerIbvE7to_jsonINS_10basic_jsonINSt3__23mapENS4_6vectorENS4_12basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEbxydSA_S0_EERbEEDTcmclL_ZNS_12_GLOBAL__N_17to_jsonEEfp_clsr3stdE7forwardIT0_Efp0_EEcvv_EERT_OSG_($this, $val);
 __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE16assert_invariantEv($this);
 return;
}

function __ZN4tson4TileC2Ei($this, $id) {
 $this = $this | 0;
 $id = $id | 0;
 var $__begin_$i$i1 = 0, $m_image = 0;
 HEAP32[$this >> 2] = 0;
 HEAP32[$this + 4 >> 2] = 0;
 HEAP32[$this + 8 >> 2] = 0;
 HEAP32[$this + 12 >> 2] = $id;
 $m_image = $this + 16 | 0;
 HEAP32[$m_image >> 2] = 0;
 HEAP32[$m_image + 4 >> 2] = 0;
 HEAP32[$m_image + 8 >> 2] = 0;
 __ZN4tson7Vector2IiEC2Ev($this + 28 | 0);
 __ZN4tson5LayerC2Ev($this + 36 | 0);
 __ZN4tson18PropertyCollectionC2Ev($this + 256 | 0);
 $__begin_$i$i1 = $this + 280 | 0;
 HEAP32[$__begin_$i$i1 >> 2] = 0;
 HEAP32[$__begin_$i$i1 + 4 >> 2] = 0;
 HEAP32[$__begin_$i$i1 + 8 >> 2] = 0;
 HEAP32[$__begin_$i$i1 + 12 >> 2] = 0;
 HEAP32[$__begin_$i$i1 + 16 >> 2] = 0;
 HEAP32[$__begin_$i$i1 + 20 >> 2] = 0;
 return;
}

function __ZNSt3__29__num_getIwE17__stage2_int_prepERNS_8ios_baseERw($agg$result, $__iob, $__thousands_sep) {
 $agg$result = $agg$result | 0;
 $__iob = $__iob | 0;
 $__thousands_sep = $__thousands_sep | 0;
 var $__loc = 0, $call$i = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $__loc = sp;
 __ZNKSt3__28ios_base6getlocEv($__loc, $__iob);
 $call$i = __ZNKSt3__26locale9use_facetERNS0_2idE($__loc, 61256) | 0;
 HEAP32[$__thousands_sep >> 2] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$call$i >> 2] | 0) + 16 >> 2] & 127]($call$i) | 0;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[$call$i >> 2] | 0) + 20 >> 2] & 127]($agg$result, $call$i);
 __ZNSt3__26localeD2Ev($__loc);
 STACKTOP = sp;
 return;
}

function __ZNSt3__29__num_getIcE17__stage2_int_prepERNS_8ios_baseERc($agg$result, $__iob, $__thousands_sep) {
 $agg$result = $agg$result | 0;
 $__iob = $__iob | 0;
 $__thousands_sep = $__thousands_sep | 0;
 var $__loc = 0, $call$i = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $__loc = sp;
 __ZNKSt3__28ios_base6getlocEv($__loc, $__iob);
 $call$i = __ZNKSt3__26locale9use_facetERNS0_2idE($__loc, 61232) | 0;
 HEAP8[$__thousands_sep >> 0] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$call$i >> 2] | 0) + 16 >> 2] & 127]($call$i) | 0;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[$call$i >> 2] | 0) + 20 >> 2] & 127]($agg$result, $call$i);
 __ZNSt3__26localeD2Ev($__loc);
 STACKTOP = sp;
 return;
}

function __ZN8nlohmann6detail28json_sax_dom_callback_parserINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE12number_floatEdRKSB_($this, $val, $0) {
 $this = $this | 0;
 $val = +$val;
 $0 = $0 | 0;
 var $val$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $val$addr = sp;
 HEAPF64[$val$addr >> 3] = $val;
 __ZN8nlohmann6detail28json_sax_dom_callback_parserINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE12handle_valueIRdEENS3_4pairIbPSD_EEOT_b(sp + 8 | 0, $this, $val$addr, 0);
 STACKTOP = sp;
 return 1;
}

function ___fmodeflags($mode) {
 $mode = $mode | 0;
 var $0 = 0, $flags$0 = 0, $flags$2 = 0, $flags$4 = 0, $spec$select = 0, $spec$select13 = 0, $tobool = 0, $tobool10 = 0, $tobool6 = 0, CSE$0 = 0;
 $tobool = (_strchr($mode, 43) | 0) == 0;
 $0 = HEAP8[$mode >> 0] | 0;
 CSE$0 = $0 << 24 >> 24 | 0;
 $flags$0 = $tobool ? (CSE$0 | 0) != 114 & 1 : 2;
 $tobool6 = (_strchr($mode, 120) | 0) == 0;
 $spec$select = $tobool6 ? $flags$0 : $flags$0 | 128;
 $tobool10 = (_strchr($mode, 101) | 0) == 0;
 $flags$2 = $tobool10 ? $spec$select : $spec$select | 524288;
 $spec$select13 = (CSE$0 | 0) == 114 ? $flags$2 : $flags$2 | 64;
 $flags$4 = (CSE$0 | 0) == 119 ? $spec$select13 | 512 : $spec$select13;
 return ((CSE$0 | 0) == 97 ? $flags$4 | 1024 : $flags$4) | 0;
}

function __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE5countIRA17_KcEEmOT_($this, $key) {
 $this = $this | 0;
 $key = $key | 0;
 var $cond = 0;
 if (__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE9is_objectEv($this) | 0) $cond = __ZNKSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8nlohmann10basic_jsonINS_3mapENS_6vectorES7_bxydS5_NS8_14adl_serializerEEEEENS_19__map_value_compareIS7_SE_NS_4lessIvEELb1EEENS5_ISE_EEE13__count_multiIA17_cEEmRKT_(HEAP32[$this + 8 >> 2] | 0, $key) | 0; else $cond = 0;
 return $cond | 0;
}

function __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE5countIRA16_KcEEmOT_($this, $key) {
 $this = $this | 0;
 $key = $key | 0;
 var $cond = 0;
 if (__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE9is_objectEv($this) | 0) $cond = __ZNKSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8nlohmann10basic_jsonINS_3mapENS_6vectorES7_bxydS5_NS8_14adl_serializerEEEEENS_19__map_value_compareIS7_SE_NS_4lessIvEELb1EEENS5_ISE_EEE13__count_multiIA16_cEEmRKT_(HEAP32[$this + 8 >> 2] | 0, $key) | 0; else $cond = 0;
 return $cond | 0;
}

function __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE5countIRA14_KcEEmOT_($this, $key) {
 $this = $this | 0;
 $key = $key | 0;
 var $cond = 0;
 if (__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE9is_objectEv($this) | 0) $cond = __ZNKSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8nlohmann10basic_jsonINS_3mapENS_6vectorES7_bxydS5_NS8_14adl_serializerEEEEENS_19__map_value_compareIS7_SE_NS_4lessIvEELb1EEENS5_ISE_EEE13__count_multiIA14_cEEmRKT_(HEAP32[$this + 8 >> 2] | 0, $key) | 0; else $cond = 0;
 return $cond | 0;
}

function __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE5countIRA13_KcEEmOT_($this, $key) {
 $this = $this | 0;
 $key = $key | 0;
 var $cond = 0;
 if (__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE9is_objectEv($this) | 0) $cond = __ZNKSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8nlohmann10basic_jsonINS_3mapENS_6vectorES7_bxydS5_NS8_14adl_serializerEEEEENS_19__map_value_compareIS7_SE_NS_4lessIvEELb1EEENS5_ISE_EEE13__count_multiIA13_cEEmRKT_(HEAP32[$this + 8 >> 2] | 0, $key) | 0; else $cond = 0;
 return $cond | 0;
}

function __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE5countIRA12_KcEEmOT_($this, $key) {
 $this = $this | 0;
 $key = $key | 0;
 var $cond = 0;
 if (__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE9is_objectEv($this) | 0) $cond = __ZNKSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8nlohmann10basic_jsonINS_3mapENS_6vectorES7_bxydS5_NS8_14adl_serializerEEEEENS_19__map_value_compareIS7_SE_NS_4lessIvEELb1EEENS5_ISE_EEE13__count_multiIA12_cEEmRKT_(HEAP32[$this + 8 >> 2] | 0, $key) | 0; else $cond = 0;
 return $cond | 0;
}

function __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE5countIRA11_KcEEmOT_($this, $key) {
 $this = $this | 0;
 $key = $key | 0;
 var $cond = 0;
 if (__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE9is_objectEv($this) | 0) $cond = __ZNKSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8nlohmann10basic_jsonINS_3mapENS_6vectorES7_bxydS5_NS8_14adl_serializerEEEEENS_19__map_value_compareIS7_SE_NS_4lessIvEELb1EEENS5_ISE_EEE13__count_multiIA11_cEEmRKT_(HEAP32[$this + 8 >> 2] | 0, $key) | 0; else $cond = 0;
 return $cond | 0;
}

function __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE5countIRA10_KcEEmOT_($this, $key) {
 $this = $this | 0;
 $key = $key | 0;
 var $cond = 0;
 if (__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE9is_objectEv($this) | 0) $cond = __ZNKSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8nlohmann10basic_jsonINS_3mapENS_6vectorES7_bxydS5_NS8_14adl_serializerEEEEENS_19__map_value_compareIS7_SE_NS_4lessIvEELb1EEENS5_ISE_EEE13__count_multiIA10_cEEmRKT_(HEAP32[$this + 8 >> 2] | 0, $key) | 0; else $cond = 0;
 return $cond | 0;
}

function __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this, $info, $adjustedPtr, $path_below) {
 $this = $this | 0;
 $info = $info | 0;
 $adjustedPtr = $adjustedPtr | 0;
 $path_below = $path_below | 0;
 var $$pre = 0, $2 = 0, $offset_to_base$0 = 0, $shr = 0;
 $$pre = HEAP32[$this + 4 >> 2] | 0;
 if (!$adjustedPtr) $offset_to_base$0 = 0; else {
  $shr = $$pre >> 8;
  if (!($$pre & 1)) $offset_to_base$0 = $shr; else $offset_to_base$0 = HEAP32[(HEAP32[$adjustedPtr >> 2] | 0) + $shr >> 2] | 0;
 }
 $2 = HEAP32[$this >> 2] | 0;
 FUNCTION_TABLE_viiii[HEAP32[(HEAP32[$2 >> 2] | 0) + 28 >> 2] & 63]($2, $info, $adjustedPtr + $offset_to_base$0 | 0, ($$pre & 2 | 0) == 0 ? 2 : $path_below);
 return;
}

function __ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE11__read_modeEv($this) {
 $this = $this | 0;
 var $$sink5 = 0, $__cm_ = 0, $add$ptr9 = 0, $retval$0 = 0, $tobool2 = 0;
 $__cm_ = $this + 92 | 0;
 if (!(HEAP32[$__cm_ >> 2] & 8)) {
  HEAP32[$this + 24 >> 2] = 0;
  HEAP32[$this + 20 >> 2] = 0;
  HEAP32[$this + 28 >> 2] = 0;
  $tobool2 = (HEAP8[$this + 98 >> 0] | 0) == 0;
  $$sink5 = HEAP32[($tobool2 ? $this + 56 | 0 : $this + 32 | 0) >> 2] | 0;
  $add$ptr9 = $$sink5 + (HEAP32[($tobool2 ? $this + 60 | 0 : $this + 52 | 0) >> 2] | 0) | 0;
  HEAP32[$this + 8 >> 2] = $$sink5;
  HEAP32[$this + 12 >> 2] = $add$ptr9;
  HEAP32[$this + 16 >> 2] = $add$ptr9;
  HEAP32[$__cm_ >> 2] = 8;
  $retval$0 = 1;
 } else $retval$0 = 0;
 return $retval$0 | 0;
}

function __ZNSt3__213__vector_baseIN4tson9WangColorENS_9allocatorIS2_EEED2Ev($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $3 = 0, $__end_$i$i = 0, $__soon_to_be_end$06$i$i = 0;
 $0 = HEAP32[$this >> 2] | 0;
 if ($0 | 0) {
  $__end_$i$i = $this + 4 | 0;
  $1 = HEAP32[$__end_$i$i >> 2] | 0;
  if (($1 | 0) == ($0 | 0)) $3 = $0; else {
   $__soon_to_be_end$06$i$i = $1;
   do {
    $__soon_to_be_end$06$i$i = $__soon_to_be_end$06$i$i + -24 | 0;
    __ZN4tson9WangColorD2Ev($__soon_to_be_end$06$i$i);
   } while (($__soon_to_be_end$06$i$i | 0) != ($0 | 0));
   $3 = HEAP32[$this >> 2] | 0;
  }
  HEAP32[$__end_$i$i >> 2] = $0;
  __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm($3, (HEAP32[$this + 8 >> 2] | 0) - $3 | 0);
 }
 return;
}

function __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE5countIRA9_KcEEmOT_($this, $key) {
 $this = $this | 0;
 $key = $key | 0;
 var $cond = 0;
 if (__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE9is_objectEv($this) | 0) $cond = __ZNKSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8nlohmann10basic_jsonINS_3mapENS_6vectorES7_bxydS5_NS8_14adl_serializerEEEEENS_19__map_value_compareIS7_SE_NS_4lessIvEELb1EEENS5_ISE_EEE13__count_multiIA9_cEEmRKT_(HEAP32[$this + 8 >> 2] | 0, $key) | 0; else $cond = 0;
 return $cond | 0;
}

function __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE5countIRA8_KcEEmOT_($this, $key) {
 $this = $this | 0;
 $key = $key | 0;
 var $cond = 0;
 if (__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE9is_objectEv($this) | 0) $cond = __ZNKSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8nlohmann10basic_jsonINS_3mapENS_6vectorES7_bxydS5_NS8_14adl_serializerEEEEENS_19__map_value_compareIS7_SE_NS_4lessIvEELb1EEENS5_ISE_EEE13__count_multiIA8_cEEmRKT_(HEAP32[$this + 8 >> 2] | 0, $key) | 0; else $cond = 0;
 return $cond | 0;
}

function __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE5countIRA7_KcEEmOT_($this, $key) {
 $this = $this | 0;
 $key = $key | 0;
 var $cond = 0;
 if (__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE9is_objectEv($this) | 0) $cond = __ZNKSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8nlohmann10basic_jsonINS_3mapENS_6vectorES7_bxydS5_NS8_14adl_serializerEEEEENS_19__map_value_compareIS7_SE_NS_4lessIvEELb1EEENS5_ISE_EEE13__count_multiIA7_cEEmRKT_(HEAP32[$this + 8 >> 2] | 0, $key) | 0; else $cond = 0;
 return $cond | 0;
}

function __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE5countIRA6_KcEEmOT_($this, $key) {
 $this = $this | 0;
 $key = $key | 0;
 var $cond = 0;
 if (__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE9is_objectEv($this) | 0) $cond = __ZNKSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8nlohmann10basic_jsonINS_3mapENS_6vectorES7_bxydS5_NS8_14adl_serializerEEEEENS_19__map_value_compareIS7_SE_NS_4lessIvEELb1EEENS5_ISE_EEE13__count_multiIA6_cEEmRKT_(HEAP32[$this + 8 >> 2] | 0, $key) | 0; else $cond = 0;
 return $cond | 0;
}

function __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE5countIRA5_KcEEmOT_($this, $key) {
 $this = $this | 0;
 $key = $key | 0;
 var $cond = 0;
 if (__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE9is_objectEv($this) | 0) $cond = __ZNKSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8nlohmann10basic_jsonINS_3mapENS_6vectorES7_bxydS5_NS8_14adl_serializerEEEEENS_19__map_value_compareIS7_SE_NS_4lessIvEELb1EEENS5_ISE_EEE13__count_multiIA5_cEEmRKT_(HEAP32[$this + 8 >> 2] | 0, $key) | 0; else $cond = 0;
 return $cond | 0;
}

function __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE5countIRA4_KcEEmOT_($this, $key) {
 $this = $this | 0;
 $key = $key | 0;
 var $cond = 0;
 if (__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE9is_objectEv($this) | 0) $cond = __ZNKSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8nlohmann10basic_jsonINS_3mapENS_6vectorES7_bxydS5_NS8_14adl_serializerEEEEENS_19__map_value_compareIS7_SE_NS_4lessIvEELb1EEENS5_ISE_EEE13__count_multiIA4_cEEmRKT_(HEAP32[$this + 8 >> 2] | 0, $key) | 0; else $cond = 0;
 return $cond | 0;
}

function __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE5countIRA3_KcEEmOT_($this, $key) {
 $this = $this | 0;
 $key = $key | 0;
 var $cond = 0;
 if (__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE9is_objectEv($this) | 0) $cond = __ZNKSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8nlohmann10basic_jsonINS_3mapENS_6vectorES7_bxydS5_NS8_14adl_serializerEEEEENS_19__map_value_compareIS7_SE_NS_4lessIvEELb1EEENS5_ISE_EEE13__count_multiIA3_cEEmRKT_(HEAP32[$this + 8 >> 2] | 0, $key) | 0; else $cond = 0;
 return $cond | 0;
}

function __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE5countIRA2_KcEEmOT_($this, $key) {
 $this = $this | 0;
 $key = $key | 0;
 var $cond = 0;
 if (__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE9is_objectEv($this) | 0) $cond = __ZNKSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8nlohmann10basic_jsonINS_3mapENS_6vectorES7_bxydS5_NS8_14adl_serializerEEEEENS_19__map_value_compareIS7_SE_NS_4lessIvEELb1EEENS5_ISE_EEE13__count_multiIA2_cEEmRKT_(HEAP32[$this + 8 >> 2] | 0, $key) | 0; else $cond = 0;
 return $cond | 0;
}

function __ZN8nlohmann6detail19json_sax_dom_parserINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE15number_unsignedEy($this, $0, $1) {
 $this = $this | 0;
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $val$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $val$addr = sp;
 $2 = $val$addr;
 HEAP32[$2 >> 2] = $0;
 HEAP32[$2 + 4 >> 2] = $1;
 __ZN8nlohmann6detail19json_sax_dom_parserINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE12handle_valueIRyEEPSD_OT_($this, $val$addr) | 0;
 STACKTOP = sp;
 return 1;
}

function __ZNSt3__213__vector_baseIN4tson8WangTileENS_9allocatorIS2_EEED2Ev($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $3 = 0, $__end_$i$i = 0, $__soon_to_be_end$06$i$i = 0;
 $0 = HEAP32[$this >> 2] | 0;
 if ($0 | 0) {
  $__end_$i$i = $this + 4 | 0;
  $1 = HEAP32[$__end_$i$i >> 2] | 0;
  if (($1 | 0) == ($0 | 0)) $3 = $0; else {
   $__soon_to_be_end$06$i$i = $1;
   do {
    $__soon_to_be_end$06$i$i = $__soon_to_be_end$06$i$i + -24 | 0;
    __ZN4tson8WangTileD2Ev($__soon_to_be_end$06$i$i);
   } while (($__soon_to_be_end$06$i$i | 0) != ($0 | 0));
   $3 = HEAP32[$this >> 2] | 0;
  }
  HEAP32[$__end_$i$i >> 2] = $0;
  __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm($3, (HEAP32[$this + 8 >> 2] | 0) - $3 | 0);
 }
 return;
}

function __ZN8nlohmann6detail19json_sax_dom_parserINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE14number_integerEx($this, $0, $1) {
 $this = $this | 0;
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $val$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $val$addr = sp;
 $2 = $val$addr;
 HEAP32[$2 >> 2] = $0;
 HEAP32[$2 + 4 >> 2] = $1;
 __ZN8nlohmann6detail19json_sax_dom_parserINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE12handle_valueIRxEEPSD_OT_($this, $val$addr) | 0;
 STACKTOP = sp;
 return 1;
}

function _EmscriptenKeyboardCallback($eventType, $keyEvent, $userData) {
 $eventType = $eventType | 0;
 $keyEvent = $keyEvent | 0;
 $userData = $userData | 0;
 var $eventType$addr = 0, $keyEvent$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $eventType$addr = sp + 8 | 0;
 $keyEvent$addr = sp + 4 | 0;
 HEAP32[$eventType$addr >> 2] = $eventType;
 HEAP32[$keyEvent$addr >> 2] = $keyEvent;
 HEAP32[sp >> 2] = $userData;
 if ((HEAP32[$eventType$addr >> 2] | 0) != 1) {
  STACKTOP = sp;
  return 0;
 }
 if (_strcmp((HEAP32[$keyEvent$addr >> 2] | 0) + 32 | 0, 31845) | 0) {
  STACKTOP = sp;
  return 0;
 }
 _emscripten_exit_pointerlock() | 0;
 STACKTOP = sp;
 return 0;
}

function _stbiw__zlib_bitrev($code, $codebits) {
 $code = $code | 0;
 $codebits = $codebits | 0;
 var $0 = 0, $1 = 0, $code$addr = 0, $codebits$addr = 0, $res = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $code$addr = sp + 8 | 0;
 $codebits$addr = sp + 4 | 0;
 $res = sp;
 HEAP32[$code$addr >> 2] = $code;
 HEAP32[$codebits$addr >> 2] = $codebits;
 HEAP32[$res >> 2] = 0;
 while (1) {
  $0 = HEAP32[$codebits$addr >> 2] | 0;
  HEAP32[$codebits$addr >> 2] = $0 + -1;
  $1 = HEAP32[$res >> 2] | 0;
  if (!$0) break;
  HEAP32[$res >> 2] = $1 << 1 | HEAP32[$code$addr >> 2] & 1;
  HEAP32[$code$addr >> 2] = HEAP32[$code$addr >> 2] >> 1;
 }
 STACKTOP = sp;
 return $1 | 0;
}

function __ZNSt3__213__vector_baseIN4tson7TilesetENS_9allocatorIS2_EEED2Ev($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $3 = 0, $__end_$i$i = 0, $__soon_to_be_end$06$i$i = 0;
 $0 = HEAP32[$this >> 2] | 0;
 if ($0 | 0) {
  $__end_$i$i = $this + 4 | 0;
  $1 = HEAP32[$__end_$i$i >> 2] | 0;
  if (($1 | 0) == ($0 | 0)) $3 = $0; else {
   $__soon_to_be_end$06$i$i = $1;
   do {
    $__soon_to_be_end$06$i$i = $__soon_to_be_end$06$i$i + -164 | 0;
    __ZN4tson7TilesetD2Ev($__soon_to_be_end$06$i$i);
   } while (($__soon_to_be_end$06$i$i | 0) != ($0 | 0));
   $3 = HEAP32[$this >> 2] | 0;
  }
  HEAP32[$__end_$i$i >> 2] = $0;
  __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm($3, (HEAP32[$this + 8 >> 2] | 0) - $3 | 0);
 }
 return;
}

function _IsKeyPressed($key) {
 $key = $key | 0;
 var $6 = 0, $key$addr = 0, $pressed = 0, $tobool = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $key$addr = sp;
 $pressed = sp + 4 | 0;
 HEAP32[$key$addr >> 2] = $key;
 HEAP8[$pressed >> 0] = 0;
 if ((HEAP8[47536 + (HEAP32[$key$addr >> 2] | 0) >> 0] | 0) != (HEAP8[48048 + (HEAP32[$key$addr >> 2] | 0) >> 0] | 0)) if ((HEAP8[47536 + (HEAP32[$key$addr >> 2] | 0) >> 0] | 0) == 1) {
  HEAP8[$pressed >> 0] = 1;
  $6 = HEAP8[$pressed >> 0] | 0;
  $tobool = $6 & 1;
  STACKTOP = sp;
  return $tobool | 0;
 }
 HEAP8[$pressed >> 0] = 0;
 $6 = HEAP8[$pressed >> 0] | 0;
 $tobool = $6 & 1;
 STACKTOP = sp;
 return $tobool | 0;
}

function __ZNSt3__26__treeINS_12__value_typeINS_5tupleIJiiEEEPN4tson4TileEEENS_19__map_value_compareIS3_S7_NS_4lessIS3_EELb1EEENS_9allocatorIS7_EEEC2EOSE_($this, $__t) {
 $this = $this | 0;
 $__t = $__t | 0;
 var $1 = 0, $2 = 0, $4 = 0, $__value_$i$i$i11 = 0, $__value_$i$i$i8 = 0;
 HEAP32[$this >> 2] = HEAP32[$__t >> 2];
 $1 = HEAP32[$__t + 4 >> 2] | 0;
 HEAP32[$this + 4 >> 2] = $1;
 $2 = $__t + 8 | 0;
 $4 = HEAP32[$2 >> 2] | 0;
 HEAP32[$this + 8 >> 2] = $4;
 $__value_$i$i$i11 = $this + 4 | 0;
 if (!$4) HEAP32[$this >> 2] = $__value_$i$i$i11; else {
  HEAP32[$1 + 8 >> 2] = $__value_$i$i$i11;
  $__value_$i$i$i8 = $__t + 4 | 0;
  HEAP32[$__t >> 2] = $__value_$i$i$i8;
  HEAP32[$__value_$i$i$i8 >> 2] = 0;
  HEAP32[$2 >> 2] = 0;
 }
 return;
}

function __ZNSt3__213__vector_baseIN4tson7WangSetENS_9allocatorIS2_EEED2Ev($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $3 = 0, $__end_$i$i = 0, $__soon_to_be_end$06$i$i = 0;
 $0 = HEAP32[$this >> 2] | 0;
 if ($0 | 0) {
  $__end_$i$i = $this + 4 | 0;
  $1 = HEAP32[$__end_$i$i >> 2] | 0;
  if (($1 | 0) == ($0 | 0)) $3 = $0; else {
   $__soon_to_be_end$06$i$i = $1;
   do {
    $__soon_to_be_end$06$i$i = $__soon_to_be_end$06$i$i + -76 | 0;
    __ZN4tson7WangSetD2Ev($__soon_to_be_end$06$i$i);
   } while (($__soon_to_be_end$06$i$i | 0) != ($0 | 0));
   $3 = HEAP32[$this >> 2] | 0;
  }
  HEAP32[$__end_$i$i >> 2] = $0;
  __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm($3, (HEAP32[$this + 8 >> 2] | 0) - $3 | 0);
 }
 return;
}

function __ZNSt3__213__vector_baseIN4tson7TerrainENS_9allocatorIS2_EEED2Ev($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $3 = 0, $__end_$i$i = 0, $__soon_to_be_end$06$i$i = 0;
 $0 = HEAP32[$this >> 2] | 0;
 if ($0 | 0) {
  $__end_$i$i = $this + 4 | 0;
  $1 = HEAP32[$__end_$i$i >> 2] | 0;
  if (($1 | 0) == ($0 | 0)) $3 = $0; else {
   $__soon_to_be_end$06$i$i = $1;
   do {
    $__soon_to_be_end$06$i$i = $__soon_to_be_end$06$i$i + -40 | 0;
    __ZN4tson7TerrainD2Ev($__soon_to_be_end$06$i$i);
   } while (($__soon_to_be_end$06$i$i | 0) != ($0 | 0));
   $3 = HEAP32[$this >> 2] | 0;
  }
  HEAP32[$__end_$i$i >> 2] = $0;
  __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm($3, (HEAP32[$this + 8 >> 2] | 0) - $3 | 0);
 }
 return;
}

function __ZNSt3__213__vector_baseIN4tson6ObjectENS_9allocatorIS2_EEED2Ev($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $3 = 0, $__end_$i$i = 0, $__soon_to_be_end$06$i$i = 0;
 $0 = HEAP32[$this >> 2] | 0;
 if ($0 | 0) {
  $__end_$i$i = $this + 4 | 0;
  $1 = HEAP32[$__end_$i$i >> 2] | 0;
  if (($1 | 0) == ($0 | 0)) $3 = $0; else {
   $__soon_to_be_end$06$i$i = $1;
   do {
    $__soon_to_be_end$06$i$i = $__soon_to_be_end$06$i$i + -140 | 0;
    __ZN4tson6ObjectD2Ev($__soon_to_be_end$06$i$i);
   } while (($__soon_to_be_end$06$i$i | 0) != ($0 | 0));
   $3 = HEAP32[$this >> 2] | 0;
  }
  HEAP32[$__end_$i$i >> 2] = $0;
  __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm($3, (HEAP32[$this + 8 >> 2] | 0) - $3 | 0);
 }
 return;
}

function __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE8max_sizeEv($this) {
 $this = $this | 0;
 var $retval$0 = 0;
 switch (HEAP8[$this >> 0] | 0) {
 case 2:
  {
   $retval$0 = __ZNKSt3__26vectorIN8nlohmann10basic_jsonINS_3mapES0_NS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEbxydS7_NS1_14adl_serializerEEENS7_ISB_EEE8max_sizeEv(HEAP32[$this + 8 >> 2] | 0) | 0;
   break;
  }
 case 1:
  {
   $retval$0 = 89478485;
   break;
  }
 default:
  $retval$0 = __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE4sizeEv($this) | 0;
 }
 return $retval$0 | 0;
}

function __ZNSt3__213__vector_baseIN4tson5ChunkENS_9allocatorIS2_EEED2Ev($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $3 = 0, $__end_$i$i = 0, $__soon_to_be_end$06$i$i = 0;
 $0 = HEAP32[$this >> 2] | 0;
 if ($0 | 0) {
  $__end_$i$i = $this + 4 | 0;
  $1 = HEAP32[$__end_$i$i >> 2] | 0;
  if (($1 | 0) == ($0 | 0)) $3 = $0; else {
   $__soon_to_be_end$06$i$i = $1;
   do {
    $__soon_to_be_end$06$i$i = $__soon_to_be_end$06$i$i + -40 | 0;
    __ZN4tson5ChunkD2Ev($__soon_to_be_end$06$i$i);
   } while (($__soon_to_be_end$06$i$i | 0) != ($0 | 0));
   $3 = HEAP32[$this >> 2] | 0;
  }
  HEAP32[$__end_$i$i >> 2] = $0;
  __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm($3, (HEAP32[$this + 8 >> 2] | 0) - $3 | 0);
 }
 return;
}

function __ZNSt3__213__vector_baseIN4tson4TileENS_9allocatorIS2_EEED2Ev($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $3 = 0, $__end_$i$i = 0, $__soon_to_be_end$06$i$i = 0;
 $0 = HEAP32[$this >> 2] | 0;
 if ($0 | 0) {
  $__end_$i$i = $this + 4 | 0;
  $1 = HEAP32[$__end_$i$i >> 2] | 0;
  if (($1 | 0) == ($0 | 0)) $3 = $0; else {
   $__soon_to_be_end$06$i$i = $1;
   do {
    $__soon_to_be_end$06$i$i = $__soon_to_be_end$06$i$i + -304 | 0;
    __ZN4tson4TileD2Ev($__soon_to_be_end$06$i$i);
   } while (($__soon_to_be_end$06$i$i | 0) != ($0 | 0));
   $3 = HEAP32[$this >> 2] | 0;
  }
  HEAP32[$__end_$i$i >> 2] = $0;
  __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm($3, (HEAP32[$this + 8 >> 2] | 0) - $3 | 0);
 }
 return;
}

function _strprbrk($s, $charset) {
 $s = $s | 0;
 $charset = $charset | 0;
 var $3 = 0, $charset$addr = 0, $latestMatch = 0, $s$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $s$addr = sp + 8 | 0;
 $charset$addr = sp + 4 | 0;
 $latestMatch = sp;
 HEAP32[$s$addr >> 2] = $s;
 HEAP32[$charset$addr >> 2] = $charset;
 HEAP32[$latestMatch >> 2] = 0;
 while (1) {
  HEAP32[$s$addr >> 2] = _strpbrk(HEAP32[$s$addr >> 2] | 0, HEAP32[$charset$addr >> 2] | 0) | 0;
  if (!(HEAP32[$s$addr >> 2] | 0)) break;
  $3 = HEAP32[$s$addr >> 2] | 0;
  HEAP32[$s$addr >> 2] = $3 + 1;
  HEAP32[$latestMatch >> 2] = $3;
 }
 STACKTOP = sp;
 return HEAP32[$latestMatch >> 2] | 0;
}

function __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this, $info, $current_ptr, $path_below, $use_strcmp) {
 $this = $this | 0;
 $info = $info | 0;
 $current_ptr = $current_ptr | 0;
 $path_below = $path_below | 0;
 $use_strcmp = $use_strcmp | 0;
 var $0 = 0, $3 = 0, $offset_to_base$0 = 0, $shr = 0;
 $0 = HEAP32[$this + 4 >> 2] | 0;
 $shr = $0 >> 8;
 if (!($0 & 1)) $offset_to_base$0 = $shr; else $offset_to_base$0 = HEAP32[(HEAP32[$current_ptr >> 2] | 0) + $shr >> 2] | 0;
 $3 = HEAP32[$this >> 2] | 0;
 FUNCTION_TABLE_viiiii[HEAP32[(HEAP32[$3 >> 2] | 0) + 24 >> 2] & 15]($3, $info, $current_ptr + $offset_to_base$0 | 0, ($0 & 2 | 0) == 0 ? 2 : $path_below, $use_strcmp);
 return;
}

function __ZN8nlohmann6detail28json_sax_dom_callback_parserINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE7booleanEb($this, $val) {
 $this = $this | 0;
 $val = $val | 0;
 var $val$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $val$addr = sp + 8 | 0;
 HEAP8[$val$addr >> 0] = $val & 1;
 __ZN8nlohmann6detail28json_sax_dom_callback_parserINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE12handle_valueIRbEENS3_4pairIbPSD_EEOT_b(sp, $this, $val$addr, 0);
 STACKTOP = sp;
 return 1;
}

function __ZN4tson18PropertyCollection8getValueIiEET_RKNSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEE($this, $name) {
 $this = $this | 0;
 $name = $name | 0;
 var $cond = 0, $m_properties = 0;
 $m_properties = $this + 12 | 0;
 if (!(__ZNKSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN4tson8PropertyEEENS_19__map_value_compareIS7_SA_NS_4lessIS7_EELb1EEENS5_ISA_EEE14__count_uniqueIS7_EEmRKT_($m_properties, $name) | 0)) $cond = 0; else $cond = __ZNK4tson8Property8getValueIiEET_v(__ZNSt3__23mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN4tson8PropertyENS_4lessIS6_EENS4_INS_4pairIKS6_S8_EEEEEixERSC_($m_properties, $name) | 0) | 0;
 return $cond | 0;
}

function _GetExtension($fileName) {
 $fileName = $fileName | 0;
 var $5 = 0, $dot = 0, $fileName$addr = 0, $retval = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $retval = sp + 8 | 0;
 $fileName$addr = sp + 4 | 0;
 $dot = sp;
 HEAP32[$fileName$addr >> 2] = $fileName;
 HEAP32[$dot >> 2] = _strrchr(HEAP32[$fileName$addr >> 2] | 0, 46) | 0;
 if (HEAP32[$dot >> 2] | 0) if ((HEAP32[$dot >> 2] | 0) != (HEAP32[$fileName$addr >> 2] | 0)) {
  HEAP32[$retval >> 2] = (HEAP32[$dot >> 2] | 0) + 1;
  $5 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $5 | 0;
 }
 HEAP32[$retval >> 2] = 0;
 $5 = HEAP32[$retval >> 2] | 0;
 STACKTOP = sp;
 return $5 | 0;
}

function __ZN8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE6createIS9_JRKS9_EEEPT_DpOT0_($args) {
 $args = $args | 0;
 var $3 = 0, $call2$i$i$i = 0, $object = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $object = sp;
 $call2$i$i$i = __Znwm(12) | 0;
 HEAP32[$object >> 2] = $call2$i$i$i;
 HEAP32[$object + 4 >> 2] = sp + 8;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($call2$i$i$i, $args);
 $3 = HEAP32[$object >> 2] | 0;
 if (!$3) ___assert_fail(24255, 22221, 15187, 24273); else {
  STACKTOP = sp;
  return $3 | 0;
 }
 return 0;
}

function __ZNSt3__26__treeINS_12__value_typeIiPN4tson4TileEEENS_19__map_value_compareIiS5_NS_4lessIiEELb1EEENS_9allocatorIS5_EEEC2EOSC_($this, $__t) {
 $this = $this | 0;
 $__t = $__t | 0;
 var $1 = 0, $2 = 0, $4 = 0, $__value_$i$i$i11 = 0, $__value_$i$i$i8 = 0;
 HEAP32[$this >> 2] = HEAP32[$__t >> 2];
 $1 = HEAP32[$__t + 4 >> 2] | 0;
 HEAP32[$this + 4 >> 2] = $1;
 $2 = $__t + 8 | 0;
 $4 = HEAP32[$2 >> 2] | 0;
 HEAP32[$this + 8 >> 2] = $4;
 $__value_$i$i$i11 = $this + 4 | 0;
 if (!$4) HEAP32[$this >> 2] = $__value_$i$i$i11; else {
  HEAP32[$1 + 8 >> 2] = $__value_$i$i$i11;
  $__value_$i$i$i8 = $__t + 4 | 0;
  HEAP32[$__t >> 2] = $__value_$i$i$i8;
  HEAP32[$__value_$i$i$i8 >> 2] = 0;
  HEAP32[$2 >> 2] = 0;
 }
 return;
}

function _GifWriteChunk($f, $stat) {
 $f = $f | 0;
 $stat = $stat | 0;
 var $f$addr = 0, $stat$addr = 0, sp = 0, CSE$0 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $f$addr = sp + 4 | 0;
 $stat$addr = sp;
 HEAP32[$f$addr >> 2] = $f;
 HEAP32[$stat$addr >> 2] = $stat;
 _fputc(HEAP32[(HEAP32[$stat$addr >> 2] | 0) + 4 >> 2] | 0, HEAP32[$f$addr >> 2] | 0) | 0;
 CSE$0 = HEAP32[$stat$addr >> 2] | 0;
 _fwrite(CSE$0 + 8 | 0, 1, HEAP32[CSE$0 + 4 >> 2] | 0, HEAP32[$f$addr >> 2] | 0) | 0;
 HEAP8[HEAP32[$stat$addr >> 2] >> 0] = 0;
 HEAP8[(HEAP32[$stat$addr >> 2] | 0) + 1 >> 0] = 0;
 HEAP32[(HEAP32[$stat$addr >> 2] | 0) + 4 >> 2] = 0;
 STACKTOP = sp;
 return;
}

function __ZNSt3__213__vector_baseIN4tson5LayerENS_9allocatorIS2_EEED2Ev($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $3 = 0, $__end_$i = 0, $__soon_to_be_end$0$i3 = 0;
 $0 = HEAP32[$this >> 2] | 0;
 if ($0 | 0) {
  $__end_$i = $this + 4 | 0;
  $1 = HEAP32[$__end_$i >> 2] | 0;
  if (($1 | 0) == ($0 | 0)) $3 = $0; else {
   $__soon_to_be_end$0$i3 = $1;
   do {
    $__soon_to_be_end$0$i3 = $__soon_to_be_end$0$i3 + -220 | 0;
    __ZN4tson5LayerD2Ev($__soon_to_be_end$0$i3);
   } while (($__soon_to_be_end$0$i3 | 0) != ($0 | 0));
   $3 = HEAP32[$this >> 2] | 0;
  }
  HEAP32[$__end_$i >> 2] = $0;
  __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm($3, (HEAP32[$this + 8 >> 2] | 0) - $3 | 0);
 }
 return;
}

function _TextFormat($text, $varargs) {
 $text = $text | 0;
 $varargs = $varargs | 0;
 var $add = 0, $args = 0, $currentBuffer = 0, $text$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $text$addr = sp + 20 | 0;
 $currentBuffer = sp + 16 | 0;
 $args = sp;
 HEAP32[$text$addr >> 2] = $text;
 HEAP32[$currentBuffer >> 2] = 48688 + (HEAP32[15007] << 10);
 HEAP32[$args >> 2] = $varargs;
 _vsprintf(HEAP32[$currentBuffer >> 2] | 0, HEAP32[$text$addr >> 2] | 0, $args) | 0;
 $add = (HEAP32[15007] | 0) + 1 | 0;
 HEAP32[15007] = $add;
 HEAP32[15007] = (HEAP32[15007] | 0) >= 4 ? 0 : $add;
 STACKTOP = sp;
 return HEAP32[$currentBuffer >> 2] | 0;
}

function _stbi__mul2sizes_valid($a, $b) {
 $a = $a | 0;
 $b = $b | 0;
 var $a$addr = 0, $b$addr = 0, $retval = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $retval = sp + 8 | 0;
 $a$addr = sp + 4 | 0;
 $b$addr = sp;
 HEAP32[$a$addr >> 2] = $a;
 HEAP32[$b$addr >> 2] = $b;
 do if ((HEAP32[$a$addr >> 2] | 0) < 0 | (HEAP32[$b$addr >> 2] | 0) < 0) HEAP32[$retval >> 2] = 0; else if (!(HEAP32[$b$addr >> 2] | 0)) {
  HEAP32[$retval >> 2] = 1;
  break;
 } else {
  HEAP32[$retval >> 2] = (HEAP32[$a$addr >> 2] | 0) <= (2147483647 / (HEAP32[$b$addr >> 2] | 0) | 0 | 0) & 1;
  break;
 } while (0);
 STACKTOP = sp;
 return HEAP32[$retval >> 2] | 0;
}

function __ZNSt3__24__fs10filesystem8_PathCVTIcE15__append_sourceINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEvRSA_RKT_($__dest, $__s) {
 $__dest = $__dest | 0;
 $__s = $__s | 0;
 var $call = 0;
 $call = __ZNSt3__24__fs10filesystem20__is_pathable_stringINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEvE13__range_beginERKS8_($__s) | 0;
 __ZNSt3__24__fs10filesystem8_PathCVTIcE14__append_rangeIPKcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeERNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES8_S8_($__dest, $call, __ZNSt3__24__fs10filesystem20__is_pathable_stringINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEvE11__range_endERKS8_($__s) | 0);
 return;
}

function _Vector3Length($v) {
 $v = $v | 0;
 var $0 = f0, $2 = f0, $4 = f0, $7 = f0, $add = f0, $mul = f0, $result = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $result = sp;
 $0 = Math_fround(HEAPF32[$v >> 2]);
 $mul = Math_fround($0 * Math_fround(HEAPF32[$v >> 2]));
 $2 = Math_fround(HEAPF32[$v + 4 >> 2]);
 $add = Math_fround($mul + Math_fround($2 * Math_fround(HEAPF32[$v + 4 >> 2])));
 $4 = Math_fround(HEAPF32[$v + 8 >> 2]);
 HEAPF32[$result >> 2] = Math_fround(Math_sqrt(Math_fround($add + Math_fround($4 * Math_fround(HEAPF32[$v + 8 >> 2])))));
 $7 = Math_fround(HEAPF32[$result >> 2]);
 STACKTOP = sp;
 return Math_fround($7);
}

function __ZN8nlohmann6detail9iter_implIKNS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE9set_beginEv($this) {
 $this = $this | 0;
 var $0 = 0;
 $0 = HEAP32[$this >> 2] | 0;
 if (!$0) ___assert_fail(23450, 22221, 9327, 23750);
 switch (HEAP8[$0 >> 0] | 0) {
 case 1:
  {
   HEAP32[$this + 4 >> 2] = HEAP32[HEAP32[$0 + 8 >> 2] >> 2];
   break;
  }
 case 2:
  {
   HEAP32[$this + 8 >> 2] = HEAP32[HEAP32[$0 + 8 >> 2] >> 2];
   break;
  }
 case 0:
  {
   __ZN8nlohmann6detail20primitive_iterator_t7set_endEv($this + 12 | 0);
   break;
  }
 default:
  __ZN8nlohmann6detail20primitive_iterator_t9set_beginEv($this + 12 | 0);
 }
 return;
}

function __ZN8nlohmann6detail9iter_implINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE9set_beginEv($this) {
 $this = $this | 0;
 var $0 = 0;
 $0 = HEAP32[$this >> 2] | 0;
 if (!$0) ___assert_fail(23450, 22221, 9327, 23750);
 switch (HEAP8[$0 >> 0] | 0) {
 case 1:
  {
   HEAP32[$this + 4 >> 2] = HEAP32[HEAP32[$0 + 8 >> 2] >> 2];
   break;
  }
 case 2:
  {
   HEAP32[$this + 8 >> 2] = HEAP32[HEAP32[$0 + 8 >> 2] >> 2];
   break;
  }
 case 0:
  {
   __ZN8nlohmann6detail20primitive_iterator_t7set_endEv($this + 12 | 0);
   break;
  }
 default:
  __ZN8nlohmann6detail20primitive_iterator_t9set_beginEv($this + 12 | 0);
 }
 return;
}

function __ZN8nlohmann6detail19json_sax_dom_parserINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE12number_floatEdRKSB_($this, $val, $0) {
 $this = $this | 0;
 $val = +$val;
 $0 = $0 | 0;
 var $val$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $val$addr = sp;
 HEAPF64[$val$addr >> 3] = $val;
 __ZN8nlohmann6detail19json_sax_dom_parserINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE12handle_valueIRdEEPSD_OT_($this, $val$addr) | 0;
 STACKTOP = sp;
 return 1;
}

function _stbi__zget8($z) {
 $z = $z | 0;
 var $4 = 0, $5 = 0, $7 = 0, $retval = 0, $z$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $retval = sp + 4 | 0;
 $z$addr = sp;
 HEAP32[$z$addr >> 2] = $z;
 if ((HEAP32[HEAP32[$z$addr >> 2] >> 2] | 0) >>> 0 >= (HEAP32[(HEAP32[$z$addr >> 2] | 0) + 4 >> 2] | 0) >>> 0) {
  HEAP8[$retval >> 0] = 0;
  $7 = HEAP8[$retval >> 0] | 0;
  STACKTOP = sp;
  return $7 | 0;
 } else {
  $4 = HEAP32[$z$addr >> 2] | 0;
  $5 = HEAP32[$4 >> 2] | 0;
  HEAP32[$4 >> 2] = $5 + 1;
  HEAP8[$retval >> 0] = HEAP8[$5 >> 0] | 0;
  $7 = HEAP8[$retval >> 0] | 0;
  STACKTOP = sp;
  return $7 | 0;
 }
 return 0;
}

function __ZNSt3__214__split_bufferIN4tson9WangColorERNS_9allocatorIS2_EEED2Ev($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $2 = 0, $4 = 0, $__end_$i$i$i = 0, $incdec$ptr$i$i$i = 0;
 $0 = HEAP32[$this + 4 >> 2] | 0;
 $__end_$i$i$i = $this + 8 | 0;
 $1 = HEAP32[$__end_$i$i$i >> 2] | 0;
 if (($1 | 0) != ($0 | 0)) {
  $2 = $1;
  do {
   $incdec$ptr$i$i$i = $2 + -24 | 0;
   HEAP32[$__end_$i$i$i >> 2] = $incdec$ptr$i$i$i;
   __ZN4tson9WangColorD2Ev($incdec$ptr$i$i$i);
   $2 = HEAP32[$__end_$i$i$i >> 2] | 0;
  } while (($2 | 0) != ($0 | 0));
 }
 $4 = HEAP32[$this >> 2] | 0;
 if ($4 | 0) __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm($4, (HEAP32[$this + 12 >> 2] | 0) - $4 | 0);
 return;
}

function __ZNSt3__214__split_bufferIN4tson8WangTileERNS_9allocatorIS2_EEED2Ev($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $2 = 0, $4 = 0, $__end_$i$i$i = 0, $incdec$ptr$i$i$i = 0;
 $0 = HEAP32[$this + 4 >> 2] | 0;
 $__end_$i$i$i = $this + 8 | 0;
 $1 = HEAP32[$__end_$i$i$i >> 2] | 0;
 if (($1 | 0) != ($0 | 0)) {
  $2 = $1;
  do {
   $incdec$ptr$i$i$i = $2 + -24 | 0;
   HEAP32[$__end_$i$i$i >> 2] = $incdec$ptr$i$i$i;
   __ZN4tson8WangTileD2Ev($incdec$ptr$i$i$i);
   $2 = HEAP32[$__end_$i$i$i >> 2] | 0;
  } while (($2 | 0) != ($0 | 0));
 }
 $4 = HEAP32[$this >> 2] | 0;
 if ($4 | 0) __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm($4, (HEAP32[$this + 12 >> 2] | 0) - $4 | 0);
 return;
}

function __ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEE11__vallocateEm($this, $__n) {
 $this = $this | 0;
 $__n = $__n | 0;
 var $0 = 0, $retval$0$i$i$in = 0;
 if ((__ZNKSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEE8max_sizeEv($this) | 0) >>> 0 < $__n >>> 0) __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($this);
 $0 = $this + 128 | 0;
 if ($__n >>> 0 < 29 & (HEAP8[$0 >> 0] | 0) == 0) {
  HEAP8[$0 >> 0] = 1;
  $retval$0$i$i$in = $this + 16 | 0;
 } else $retval$0$i$i$in = __Znwm($__n << 2) | 0;
 HEAP32[$this + 4 >> 2] = $retval$0$i$i$in;
 HEAP32[$this >> 2] = $retval$0$i$i$in;
 HEAP32[$this + 8 >> 2] = $retval$0$i$i$in + ($__n << 2);
 return;
}

function __ZNSt3__26__treeINS_12__value_typeINS_5tupleIJiiEEEPN4tson4TileEEENS_19__map_value_compareIS3_S7_NS_4lessIS3_EELb1EEENS_9allocatorIS7_EEEaSEOSE_($this, $__t) {
 $this = $this | 0;
 $__t = $__t | 0;
 var $agg$tmp$byval_copy = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $agg$tmp$byval_copy = sp + 1 | 0;
 HEAP8[$agg$tmp$byval_copy >> 0] = HEAP8[sp >> 0] | 0;
 __ZNSt3__26__treeINS_12__value_typeINS_5tupleIJiiEEEPN4tson4TileEEENS_19__map_value_compareIS3_S7_NS_4lessIS3_EELb1EEENS_9allocatorIS7_EEE13__move_assignERSE_NS_17integral_constantIbLb1EEE($this, $__t, $agg$tmp$byval_copy);
 STACKTOP = sp;
 return $this | 0;
}

function __ZNSt3__214__split_bufferIN4tson7TilesetERNS_9allocatorIS2_EEED2Ev($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $2 = 0, $4 = 0, $__end_$i$i$i = 0, $incdec$ptr$i$i$i = 0;
 $0 = HEAP32[$this + 4 >> 2] | 0;
 $__end_$i$i$i = $this + 8 | 0;
 $1 = HEAP32[$__end_$i$i$i >> 2] | 0;
 if (($1 | 0) != ($0 | 0)) {
  $2 = $1;
  do {
   $incdec$ptr$i$i$i = $2 + -164 | 0;
   HEAP32[$__end_$i$i$i >> 2] = $incdec$ptr$i$i$i;
   __ZN4tson7TilesetD2Ev($incdec$ptr$i$i$i);
   $2 = HEAP32[$__end_$i$i$i >> 2] | 0;
  } while (($2 | 0) != ($0 | 0));
 }
 $4 = HEAP32[$this >> 2] | 0;
 if ($4 | 0) __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm($4, (HEAP32[$this + 12 >> 2] | 0) - $4 | 0);
 return;
}

function _BeginDrawing() {
 var $screenScaling$byval_copy = 0, $tmp = 0, dest = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(128);
 $screenScaling$byval_copy = sp + 64 | 0;
 $tmp = sp;
 HEAPF64[7306] = +_GetTime();
 HEAPF64[7307] = +HEAPF64[7306] - +HEAPF64[7304];
 HEAPF64[7304] = +HEAPF64[7306];
 _rlLoadIdentity();
 dest = $screenScaling$byval_copy;
 src = 59836;
 stop = dest + 64 | 0;
 do {
  HEAP32[dest >> 2] = HEAP32[src >> 2];
  dest = dest + 4 | 0;
  src = src + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 _MatrixToFloatV($tmp, $screenScaling$byval_copy);
 _rlMultMatrixf($tmp);
 STACKTOP = sp;
 return;
}

function __ZNSt3__214__split_bufferIN4tson7WangSetERNS_9allocatorIS2_EEED2Ev($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $2 = 0, $4 = 0, $__end_$i$i$i = 0, $incdec$ptr$i$i$i = 0;
 $0 = HEAP32[$this + 4 >> 2] | 0;
 $__end_$i$i$i = $this + 8 | 0;
 $1 = HEAP32[$__end_$i$i$i >> 2] | 0;
 if (($1 | 0) != ($0 | 0)) {
  $2 = $1;
  do {
   $incdec$ptr$i$i$i = $2 + -76 | 0;
   HEAP32[$__end_$i$i$i >> 2] = $incdec$ptr$i$i$i;
   __ZN4tson7WangSetD2Ev($incdec$ptr$i$i$i);
   $2 = HEAP32[$__end_$i$i$i >> 2] | 0;
  } while (($2 | 0) != ($0 | 0));
 }
 $4 = HEAP32[$this >> 2] | 0;
 if ($4 | 0) __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm($4, (HEAP32[$this + 12 >> 2] | 0) - $4 | 0);
 return;
}

function __ZNSt3__214__split_bufferIN4tson7TerrainERNS_9allocatorIS2_EEED2Ev($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $2 = 0, $4 = 0, $__end_$i$i$i = 0, $incdec$ptr$i$i$i = 0;
 $0 = HEAP32[$this + 4 >> 2] | 0;
 $__end_$i$i$i = $this + 8 | 0;
 $1 = HEAP32[$__end_$i$i$i >> 2] | 0;
 if (($1 | 0) != ($0 | 0)) {
  $2 = $1;
  do {
   $incdec$ptr$i$i$i = $2 + -40 | 0;
   HEAP32[$__end_$i$i$i >> 2] = $incdec$ptr$i$i$i;
   __ZN4tson7TerrainD2Ev($incdec$ptr$i$i$i);
   $2 = HEAP32[$__end_$i$i$i >> 2] | 0;
  } while (($2 | 0) != ($0 | 0));
 }
 $4 = HEAP32[$this >> 2] | 0;
 if ($4 | 0) __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm($4, (HEAP32[$this + 12 >> 2] | 0) - $4 | 0);
 return;
}

function __ZNSt3__214__split_bufferIN4tson6ObjectERNS_9allocatorIS2_EEED2Ev($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $2 = 0, $4 = 0, $__end_$i$i$i = 0, $incdec$ptr$i$i$i = 0;
 $0 = HEAP32[$this + 4 >> 2] | 0;
 $__end_$i$i$i = $this + 8 | 0;
 $1 = HEAP32[$__end_$i$i$i >> 2] | 0;
 if (($1 | 0) != ($0 | 0)) {
  $2 = $1;
  do {
   $incdec$ptr$i$i$i = $2 + -140 | 0;
   HEAP32[$__end_$i$i$i >> 2] = $incdec$ptr$i$i$i;
   __ZN4tson6ObjectD2Ev($incdec$ptr$i$i$i);
   $2 = HEAP32[$__end_$i$i$i >> 2] | 0;
  } while (($2 | 0) != ($0 | 0));
 }
 $4 = HEAP32[$this >> 2] | 0;
 if ($4 | 0) __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm($4, (HEAP32[$this + 12 >> 2] | 0) - $4 | 0);
 return;
}

function __ZNSt3__214__split_bufferIN4tson5LayerERNS_9allocatorIS2_EEED2Ev($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $2 = 0, $4 = 0, $__end_$i$i$i = 0, $incdec$ptr$i$i$i = 0;
 $0 = HEAP32[$this + 4 >> 2] | 0;
 $__end_$i$i$i = $this + 8 | 0;
 $1 = HEAP32[$__end_$i$i$i >> 2] | 0;
 if (($1 | 0) != ($0 | 0)) {
  $2 = $1;
  do {
   $incdec$ptr$i$i$i = $2 + -220 | 0;
   HEAP32[$__end_$i$i$i >> 2] = $incdec$ptr$i$i$i;
   __ZN4tson5LayerD2Ev($incdec$ptr$i$i$i);
   $2 = HEAP32[$__end_$i$i$i >> 2] | 0;
  } while (($2 | 0) != ($0 | 0));
 }
 $4 = HEAP32[$this >> 2] | 0;
 if ($4 | 0) __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm($4, (HEAP32[$this + 12 >> 2] | 0) - $4 | 0);
 return;
}

function __ZNSt3__214__split_bufferIN4tson5ChunkERNS_9allocatorIS2_EEED2Ev($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $2 = 0, $4 = 0, $__end_$i$i$i = 0, $incdec$ptr$i$i$i = 0;
 $0 = HEAP32[$this + 4 >> 2] | 0;
 $__end_$i$i$i = $this + 8 | 0;
 $1 = HEAP32[$__end_$i$i$i >> 2] | 0;
 if (($1 | 0) != ($0 | 0)) {
  $2 = $1;
  do {
   $incdec$ptr$i$i$i = $2 + -40 | 0;
   HEAP32[$__end_$i$i$i >> 2] = $incdec$ptr$i$i$i;
   __ZN4tson5ChunkD2Ev($incdec$ptr$i$i$i);
   $2 = HEAP32[$__end_$i$i$i >> 2] | 0;
  } while (($2 | 0) != ($0 | 0));
 }
 $4 = HEAP32[$this >> 2] | 0;
 if ($4 | 0) __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm($4, (HEAP32[$this + 12 >> 2] | 0) - $4 | 0);
 return;
}

function __ZN8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE6createINS2_IS9_SB_NS1_4lessIvEENS7_INS1_4pairIKS9_SB_EEEEEEJEEEPT_DpOT0_() {
 var $call2$i$i$i = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $call2$i$i$i = __Znwm(12) | 0;
 __ZNSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8nlohmann10basic_jsonINS_3mapENS_6vectorES7_bxydS5_NS8_14adl_serializerEEEEENS_19__map_value_compareIS7_SE_NS_4lessIvEELb1EEENS5_ISE_EEEC2ERKSI_($call2$i$i$i, sp);
 STACKTOP = sp;
 return $call2$i$i$i | 0;
}

function __ZNSt3__214__split_bufferIN4tson4TileERNS_9allocatorIS2_EEED2Ev($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $2 = 0, $4 = 0, $__end_$i$i$i = 0, $incdec$ptr$i$i$i = 0;
 $0 = HEAP32[$this + 4 >> 2] | 0;
 $__end_$i$i$i = $this + 8 | 0;
 $1 = HEAP32[$__end_$i$i$i >> 2] | 0;
 if (($1 | 0) != ($0 | 0)) {
  $2 = $1;
  do {
   $incdec$ptr$i$i$i = $2 + -304 | 0;
   HEAP32[$__end_$i$i$i >> 2] = $incdec$ptr$i$i$i;
   __ZN4tson4TileD2Ev($incdec$ptr$i$i$i);
   $2 = HEAP32[$__end_$i$i$i >> 2] | 0;
  } while (($2 | 0) != ($0 | 0));
 }
 $4 = HEAP32[$this >> 2] | 0;
 if ($4 | 0) __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm($4, (HEAP32[$this + 12 >> 2] | 0) - $4 | 0);
 return;
}

function __ZNKSt3__212_GLOBAL__N_114initial_stringINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEmLb0EEclEv($agg$result) {
 $agg$result = $agg$result | 0;
 var $__i$0$i$i = 0, $cond$i = 0;
 HEAP32[$agg$result >> 2] = 0;
 HEAP32[$agg$result + 4 >> 2] = 0;
 HEAP32[$agg$result + 8 >> 2] = 0;
 $__i$0$i$i = 0;
 while (1) {
  if (($__i$0$i$i | 0) == 3) break;
  HEAP32[$agg$result + ($__i$0$i$i << 2) >> 2] = 0;
  $__i$0$i$i = $__i$0$i$i + 1 | 0;
 }
 if ((HEAP8[$agg$result + 11 >> 0] | 0) < 0) $cond$i = (HEAP32[$agg$result + 8 >> 2] & 2147483647) + -1 | 0; else $cond$i = 10;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($agg$result, $cond$i, 0);
 return;
}

function __ZNKSt3__212_GLOBAL__N_114initial_stringINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEiLb0EEclEv($agg$result) {
 $agg$result = $agg$result | 0;
 var $__i$0$i$i = 0, $cond$i = 0;
 HEAP32[$agg$result >> 2] = 0;
 HEAP32[$agg$result + 4 >> 2] = 0;
 HEAP32[$agg$result + 8 >> 2] = 0;
 $__i$0$i$i = 0;
 while (1) {
  if (($__i$0$i$i | 0) == 3) break;
  HEAP32[$agg$result + ($__i$0$i$i << 2) >> 2] = 0;
  $__i$0$i$i = $__i$0$i$i + 1 | 0;
 }
 if ((HEAP8[$agg$result + 11 >> 0] | 0) < 0) $cond$i = (HEAP32[$agg$result + 8 >> 2] & 2147483647) + -1 | 0; else $cond$i = 10;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($agg$result, $cond$i, 0);
 return;
}

function __ZN8nlohmann6detail28json_sax_dom_callback_parserINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE4nullEv($this) {
 $this = $this | 0;
 var $ref$tmp = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $ref$tmp = sp + 8 | 0;
 HEAP32[$ref$tmp >> 2] = 0;
 __ZN8nlohmann6detail28json_sax_dom_callback_parserINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE12handle_valueIDnEENS3_4pairIbPSD_EEOT_b(sp, $this, $ref$tmp, 0);
 STACKTOP = sp;
 return 1;
}

function __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE3getIffLi0EEET0_v($this) {
 $this = $this | 0;
 var $0 = f0, $ret = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $ret = sp;
 __ZN8nlohmann14adl_serializerIfvE9from_jsonIRKNS_10basic_jsonINSt3__23mapENS4_6vectorENS4_12basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEbxydSA_S0_EEfEEDTcmclL_ZNS_12_GLOBAL__N_19from_jsonEEclsr3stdE7forwardIT_Efp_Efp0_Ecvv_EEOSH_RT0_($this, $ret);
 $0 = Math_fround(HEAPF32[$ret >> 2]);
 STACKTOP = sp;
 return Math_fround($0);
}

function __ZNSt3__26vectorIbNS_9allocatorIbEEE4swapERS3_($this, $__x) {
 $this = $this | 0;
 $__x = $__x | 0;
 var $0 = 0, $2 = 0, $4 = 0, $__size_ = 0, $__size_3 = 0, $__value_$i$i$i = 0, $__value_$i$i$i6 = 0;
 $0 = HEAP32[$this >> 2] | 0;
 HEAP32[$this >> 2] = HEAP32[$__x >> 2];
 HEAP32[$__x >> 2] = $0;
 $__size_ = $this + 4 | 0;
 $__size_3 = $__x + 4 | 0;
 $2 = HEAP32[$__size_ >> 2] | 0;
 HEAP32[$__size_ >> 2] = HEAP32[$__size_3 >> 2];
 HEAP32[$__size_3 >> 2] = $2;
 $__value_$i$i$i6 = $this + 8 | 0;
 $__value_$i$i$i = $__x + 8 | 0;
 $4 = HEAP32[$__value_$i$i$i6 >> 2] | 0;
 HEAP32[$__value_$i$i$i6 >> 2] = HEAP32[$__value_$i$i$i >> 2];
 HEAP32[$__value_$i$i$i >> 2] = $4;
 return;
}

function _stbi__addsizes_valid($a, $b) {
 $a = $a | 0;
 $b = $b | 0;
 var $3 = 0, $a$addr = 0, $b$addr = 0, $retval = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $retval = sp + 8 | 0;
 $a$addr = sp + 4 | 0;
 $b$addr = sp;
 HEAP32[$a$addr >> 2] = $a;
 HEAP32[$b$addr >> 2] = $b;
 if ((HEAP32[$b$addr >> 2] | 0) < 0) {
  HEAP32[$retval >> 2] = 0;
  $3 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $3 | 0;
 } else {
  HEAP32[$retval >> 2] = (HEAP32[$a$addr >> 2] | 0) <= (2147483647 - (HEAP32[$b$addr >> 2] | 0) | 0) & 1;
  $3 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $3 | 0;
 }
 return 0;
}

function __ZN8nlohmann6detail19json_sax_dom_parserINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE7booleanEb($this, $val) {
 $this = $this | 0;
 $val = $val | 0;
 var $val$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $val$addr = sp;
 HEAP8[$val$addr >> 0] = $val & 1;
 __ZN8nlohmann6detail19json_sax_dom_parserINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE12handle_valueIRbEEPSD_OT_($this, $val$addr) | 0;
 STACKTOP = sp;
 return 1;
}

function __ZNKSt3__25ctypeIwE11do_scan_notEtPKwS3_($this, $m, $low, $high) {
 $this = $this | 0;
 $m = $m | 0;
 $low = $low | 0;
 $high = $high | 0;
 var $call = 0, $low$addr$0 = 0, $low$addr$0$lcssa = 0;
 $low$addr$0 = $low;
 while (1) {
  if (($low$addr$0 | 0) == ($high | 0)) {
   $low$addr$0$lcssa = $high;
   break;
  }
  if ((HEAP32[$low$addr$0 >> 2] | 0) >>> 0 >= 128) {
   $low$addr$0$lcssa = $low$addr$0;
   break;
  }
  $call = __ZNSt3__25ctypeIcE13classic_tableEv() | 0;
  if (!((HEAP16[$call + (HEAP32[$low$addr$0 >> 2] << 1) >> 1] & $m) << 16 >> 16)) {
   $low$addr$0$lcssa = $low$addr$0;
   break;
  }
  $low$addr$0 = $low$addr$0 + 4 | 0;
 }
 return $low$addr$0$lcssa | 0;
}

function _wmemmove($d, $s, $n) {
 $d = $d | 0;
 $s = $s | 0;
 $n = $n | 0;
 var $d$addr$018 = 0, $dec14$in = 0, $n$addr$117 = 0, $s$addr$016 = 0;
 if ($d - $s >> 2 >>> 0 < $n >>> 0) {
  $dec14$in = $n;
  do {
   $dec14$in = $dec14$in + -1 | 0;
   HEAP32[$d + ($dec14$in << 2) >> 2] = HEAP32[$s + ($dec14$in << 2) >> 2];
  } while (($dec14$in | 0) != 0);
 } else if ($n | 0) {
  $d$addr$018 = $d;
  $n$addr$117 = $n;
  $s$addr$016 = $s;
  while (1) {
   $n$addr$117 = $n$addr$117 + -1 | 0;
   HEAP32[$d$addr$018 >> 2] = HEAP32[$s$addr$016 >> 2];
   if (!$n$addr$117) break; else {
    $d$addr$018 = $d$addr$018 + 4 | 0;
    $s$addr$016 = $s$addr$016 + 4 | 0;
   }
  }
 }
 return $d | 0;
}

function _stbir__saturate($x) {
 $x = Math_fround($x);
 var $3 = f0, $retval = 0, $x$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $retval = sp + 4 | 0;
 $x$addr = sp;
 HEAPF32[$x$addr >> 2] = $x;
 do if (Math_fround(HEAPF32[$x$addr >> 2]) < Math_fround(0.0)) HEAPF32[$retval >> 2] = Math_fround(0.0); else if (Math_fround(HEAPF32[$x$addr >> 2]) > Math_fround(1.0)) {
  HEAPF32[$retval >> 2] = Math_fround(1.0);
  break;
 } else {
  HEAPF32[$retval >> 2] = Math_fround(HEAPF32[$x$addr >> 2]);
  break;
 } while (0);
 $3 = Math_fround(HEAPF32[$retval >> 2]);
 STACKTOP = sp;
 return Math_fround($3);
}

function _rlViewport($x, $y, $width, $height) {
 $x = $x | 0;
 $y = $y | 0;
 $width = $width | 0;
 $height = $height | 0;
 var $height$addr = 0, $width$addr = 0, $x$addr = 0, $y$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $x$addr = sp + 12 | 0;
 $y$addr = sp + 8 | 0;
 $width$addr = sp + 4 | 0;
 $height$addr = sp;
 HEAP32[$x$addr >> 2] = $x;
 HEAP32[$y$addr >> 2] = $y;
 HEAP32[$width$addr >> 2] = $width;
 HEAP32[$height$addr >> 2] = $height;
 _glViewport(HEAP32[$x$addr >> 2] | 0, HEAP32[$y$addr >> 2] | 0, HEAP32[$width$addr >> 2] | 0, HEAP32[$height$addr >> 2] | 0);
 STACKTOP = sp;
 return;
}

function __ZNSt3__210__stdinbufIwE5imbueERKNS_6localeE($this, $__loc) {
 $this = $this | 0;
 $__loc = $__loc | 0;
 var $1 = 0, $__cv_ = 0, $__encoding_ = 0, $call$i = 0;
 $call$i = __ZNKSt3__26locale9use_facetERNS0_2idE($__loc, 61528) | 0;
 $__cv_ = $this + 36 | 0;
 HEAP32[$__cv_ >> 2] = $call$i;
 $__encoding_ = $this + 44 | 0;
 HEAP32[$__encoding_ >> 2] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$call$i >> 2] | 0) + 24 >> 2] & 127]($call$i) | 0;
 $1 = HEAP32[$__cv_ >> 2] | 0;
 HEAP8[$this + 53 >> 0] = (FUNCTION_TABLE_ii[HEAP32[(HEAP32[$1 >> 2] | 0) + 28 >> 2] & 127]($1) | 0) & 1;
 if ((HEAP32[$__encoding_ >> 2] | 0) > 8) __ZNSt3__221__throw_runtime_errorEPKc(42703); else return;
}

function __ZNSt3__210__stdinbufIcE5imbueERKNS_6localeE($this, $__loc) {
 $this = $this | 0;
 $__loc = $__loc | 0;
 var $1 = 0, $__cv_ = 0, $__encoding_ = 0, $call$i = 0;
 $call$i = __ZNKSt3__26locale9use_facetERNS0_2idE($__loc, 61520) | 0;
 $__cv_ = $this + 36 | 0;
 HEAP32[$__cv_ >> 2] = $call$i;
 $__encoding_ = $this + 44 | 0;
 HEAP32[$__encoding_ >> 2] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$call$i >> 2] | 0) + 24 >> 2] & 127]($call$i) | 0;
 $1 = HEAP32[$__cv_ >> 2] | 0;
 HEAP8[$this + 53 >> 0] = (FUNCTION_TABLE_ii[HEAP32[(HEAP32[$1 >> 2] | 0) + 28 >> 2] & 127]($1) | 0) & 1;
 if ((HEAP32[$__encoding_ >> 2] | 0) > 8) __ZNSt3__221__throw_runtime_errorEPKc(42703); else return;
}

function _fwrite($src, $size, $nmemb, $f) {
 $src = $src | 0;
 $size = $size | 0;
 $nmemb = $nmemb | 0;
 $f = $f | 0;
 var $call1 = 0, $call113 = 0, $cond9 = 0, $mul = 0, $phitmp = 0, $spec$select = 0;
 $mul = Math_imul($nmemb, $size) | 0;
 $spec$select = ($size | 0) == 0 ? 0 : $nmemb;
 if ((HEAP32[$f + 76 >> 2] | 0) > -1) {
  $phitmp = (___lockfile($f) | 0) == 0;
  $call1 = ___fwritex($src, $mul, $f) | 0;
  if ($phitmp) $call113 = $call1; else {
   ___unlockfile($f);
   $call113 = $call1;
  }
 } else $call113 = ___fwritex($src, $mul, $f) | 0;
 if (($call113 | 0) == ($mul | 0)) $cond9 = $spec$select; else $cond9 = ($call113 >>> 0) / ($size >>> 0) | 0;
 return $cond9 | 0;
}

function __ZNSt3__28functionIFbiN8nlohmann6detail6parserINS1_10basic_jsonINS_3mapENS_6vectorENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEbxydSA_NS1_14adl_serializerEEEE13parse_event_tERSE_EEC2ERKSJ_($this, $__f) {
 $this = $this | 0;
 $__f = $__f | 0;
 var $0 = 0, $11 = 0, $12 = 0, $5 = 0, $6 = 0;
 $0 = $__f;
 $5 = HEAP32[$0 + 4 >> 2] | 0;
 $6 = $this;
 HEAP32[$6 >> 2] = HEAP32[$0 >> 2];
 HEAP32[$6 + 4 >> 2] = $5;
 HEAP32[$this + 8 >> 2] = HEAP32[$__f + 8 >> 2];
 $11 = HEAP32[$__f + 12 >> 2] | 0;
 HEAP32[$this + 12 >> 2] = $11;
 $12 = HEAP32[$11 >> 2] | 0;
 if ($12 | 0) HEAP32[$this >> 2] = FUNCTION_TABLE_ii[$12 & 127](HEAP32[$__f >> 2] | 0) | 0;
 return;
}

function __ZN4tson7WangSetC2ERKN8nlohmann10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS1_14adl_serializerEEE($this, $json) {
 $this = $this | 0;
 $json = $json | 0;
 var $m_properties = 0, dest = 0, stop = 0;
 $m_properties = $this + 52 | 0;
 dest = $this;
 stop = dest + 52 | 0;
 do {
  HEAP32[dest >> 2] = 0;
  dest = dest + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 __ZN4tson18PropertyCollectionC2Ev($m_properties);
 __ZN4tson7WangSet5parseERKN8nlohmann10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS1_14adl_serializerEEE($this, $json) | 0;
 return;
}

function __ZN4tson5ChunkC2ERKN8nlohmann10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS1_14adl_serializerEEE($this, $json) {
 $this = $this | 0;
 $json = $json | 0;
 HEAP32[$this >> 2] = 0;
 HEAP32[$this + 4 >> 2] = 0;
 HEAP32[$this + 8 >> 2] = 0;
 HEAP32[$this + 12 >> 2] = 0;
 HEAP32[$this + 16 >> 2] = 0;
 HEAP32[$this + 20 >> 2] = 0;
 __ZN4tson7Vector2IiEC2Ev($this + 24 | 0);
 __ZN4tson7Vector2IiEC2Ev($this + 32 | 0);
 __ZN4tson5Chunk5parseERKN8nlohmann10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS1_14adl_serializerEEE($this, $json) | 0;
 return;
}

function _stbi__bitreverse16($n) {
 $n = $n | 0;
 var $n$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $n$addr = sp;
 HEAP32[$n$addr >> 2] = $n;
 HEAP32[$n$addr >> 2] = (HEAP32[$n$addr >> 2] & 43690) >> 1 | (HEAP32[$n$addr >> 2] & 21845) << 1;
 HEAP32[$n$addr >> 2] = (HEAP32[$n$addr >> 2] & 52428) >> 2 | (HEAP32[$n$addr >> 2] & 13107) << 2;
 HEAP32[$n$addr >> 2] = (HEAP32[$n$addr >> 2] & 61680) >> 4 | (HEAP32[$n$addr >> 2] & 3855) << 4;
 HEAP32[$n$addr >> 2] = (HEAP32[$n$addr >> 2] & 65280) >> 8 | (HEAP32[$n$addr >> 2] & 255) << 8;
 STACKTOP = sp;
 return HEAP32[$n$addr >> 2] | 0;
}

function _strcmp($l, $r) {
 $l = $l | 0;
 $r = $r | 0;
 var $$lcssa = 0, $$lcssa6 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $l$addr$010 = 0, $r$addr$011 = 0;
 $0 = HEAP8[$l >> 0] | 0;
 $1 = HEAP8[$r >> 0] | 0;
 if ($0 << 24 >> 24 == 0 ? 1 : $0 << 24 >> 24 != $1 << 24 >> 24) {
  $$lcssa = $1;
  $$lcssa6 = $0;
 } else {
  $l$addr$010 = $l;
  $r$addr$011 = $r;
  do {
   $l$addr$010 = $l$addr$010 + 1 | 0;
   $r$addr$011 = $r$addr$011 + 1 | 0;
   $2 = HEAP8[$l$addr$010 >> 0] | 0;
   $3 = HEAP8[$r$addr$011 >> 0] | 0;
  } while (!($2 << 24 >> 24 == 0 ? 1 : $2 << 24 >> 24 != $3 << 24 >> 24));
  $$lcssa = $3;
  $$lcssa6 = $2;
 }
 return ($$lcssa6 & 255) - ($$lcssa & 255) | 0;
}

function __ZN4tson7TilesetD2Ev($this) {
 $this = $this | 0;
 __ZN4tson4GridD2Ev($this + 144 | 0);
 __ZNSt3__213__vector_baseIN4tson7TerrainENS_9allocatorIS2_EEED2Ev($this + 124 | 0);
 __ZN4tson18PropertyCollectionD2Ev($this + 100 | 0);
 __ZNSt3__213__vector_baseIN4tson7WangSetENS_9allocatorIS2_EEED2Ev($this + 88 | 0);
 __ZNSt3__213__vector_baseIN4tson4TileENS_9allocatorIS2_EEED2Ev($this + 76 | 0);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($this + 64 | 0);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($this + 32 | 0);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($this + 8 | 0);
 return;
}

function __ZNSt3__26__treeINS_12__value_typeIiPN4tson4TileEEENS_19__map_value_compareIiS5_NS_4lessIiEELb1EEENS_9allocatorIS5_EEEaSEOSC_($this, $__t) {
 $this = $this | 0;
 $__t = $__t | 0;
 var $agg$tmp$byval_copy = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $agg$tmp$byval_copy = sp + 1 | 0;
 HEAP8[$agg$tmp$byval_copy >> 0] = HEAP8[sp >> 0] | 0;
 __ZNSt3__26__treeINS_12__value_typeIiPN4tson4TileEEENS_19__map_value_compareIiS5_NS_4lessIiEELb1EEENS_9allocatorIS5_EEE13__move_assignERSC_NS_17integral_constantIbLb1EEE($this, $__t, $agg$tmp$byval_copy);
 STACKTOP = sp;
 return $this | 0;
}

function _EmscriptenGamepadCallback($eventType, $gamepadEvent, $userData) {
 $eventType = $eventType | 0;
 $gamepadEvent = $gamepadEvent | 0;
 $userData = $userData | 0;
 var $gamepadEvent$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $gamepadEvent$addr = sp + 4 | 0;
 HEAP32[sp + 8 >> 2] = $eventType;
 HEAP32[$gamepadEvent$addr >> 2] = $gamepadEvent;
 HEAP32[sp >> 2] = $userData;
 if (HEAP32[(HEAP32[$gamepadEvent$addr >> 2] | 0) + 1296 >> 2] | 0) if ((HEAP32[(HEAP32[$gamepadEvent$addr >> 2] | 0) + 1300 >> 2] | 0) < 4) {
  STACKTOP = sp;
  return 0;
 }
 STACKTOP = sp;
 return 0;
}

function _ErrorCallback($error, $description) {
 $error = $error | 0;
 $description = $description | 0;
 var $1 = 0, $description$addr = 0, $error$addr = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $vararg_buffer = sp;
 $error$addr = sp + 12 | 0;
 $description$addr = sp + 8 | 0;
 HEAP32[$error$addr >> 2] = $error;
 HEAP32[$description$addr >> 2] = $description;
 $1 = HEAP32[$description$addr >> 2] | 0;
 HEAP32[$vararg_buffer >> 2] = HEAP32[$error$addr >> 2];
 HEAP32[$vararg_buffer + 4 >> 2] = $1;
 _TraceLog(4, 32615, $vararg_buffer);
 STACKTOP = sp;
 return;
}

function __ZNSt3__211__tree_nextIPNS_16__tree_node_baseIPvEEEET_S5_($__x) {
 $__x = $__x | 0;
 var $0 = 0, $1 = 0, $__x$addr$0 = 0, $__x$addr$0$i = 0, $retval$0 = 0, $__x$addr$0$looptemp = 0;
 $0 = HEAP32[$__x + 4 >> 2] | 0;
 if (!$0) {
  $__x$addr$0 = $__x;
  do {
   $__x$addr$0$looptemp = $__x$addr$0;
   $__x$addr$0 = HEAP32[$__x$addr$0 + 8 >> 2] | 0;
  } while ((HEAP32[$__x$addr$0 >> 2] | 0) != ($__x$addr$0$looptemp | 0));
  $retval$0 = $__x$addr$0;
 } else {
  $__x$addr$0$i = $0;
  while (1) {
   $1 = HEAP32[$__x$addr$0$i >> 2] | 0;
   if (!$1) {
    $retval$0 = $__x$addr$0$i;
    break;
   } else $__x$addr$0$i = $1;
  }
 }
 return $retval$0 | 0;
}

function __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE3getIbbLi0EEET0_v($this) {
 $this = $this | 0;
 var $ret = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $ret = sp;
 __ZN8nlohmann14adl_serializerIbvE9from_jsonIRKNS_10basic_jsonINSt3__23mapENS4_6vectorENS4_12basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEbxydSA_S0_EEbEEDTcmclL_ZNS_12_GLOBAL__N_19from_jsonEEclsr3stdE7forwardIT_Efp_Efp0_Ecvv_EEOSH_RT0_($this, $ret);
 STACKTOP = sp;
 return (HEAP8[$ret >> 0] | 0) != 0 | 0;
}

function ___stdio_seek($f, $0, $1, $whence) {
 $f = $f | 0;
 $0 = $0 | 0;
 $1 = $1 | 0;
 $whence = $whence | 0;
 var $10 = 0, $14 = 0, $15 = 0, $4 = 0, $ret = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $ret = sp;
 if (!(___wasi_syscall_ret(___wasi_fd_seek(HEAP32[$f + 60 >> 2] | 0, $0 | 0, $1 | 0, $whence & 255 | 0, $ret | 0) | 0) | 0)) {
  $4 = $ret;
  $14 = HEAP32[$4 + 4 >> 2] | 0;
  $15 = HEAP32[$4 >> 2] | 0;
 } else {
  $10 = $ret;
  HEAP32[$10 >> 2] = -1;
  HEAP32[$10 + 4 >> 2] = -1;
  $14 = -1;
  $15 = -1;
 }
 setTempRet0($14 | 0);
 STACKTOP = sp;
 return $15 | 0;
}

function __ZNSt3__29to_stringEm($agg$result, $val) {
 $agg$result = $agg$result | 0;
 $val = $val | 0;
 var $agg$tmp = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $agg$tmp = sp;
 __ZNKSt3__212_GLOBAL__N_114initial_stringINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEmLb0EEclEv($agg$tmp);
 __ZNSt3__212_GLOBAL__N_19as_stringINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPFiPcmPKczEmEET_T0_SD_PKNSD_10value_typeET1_($agg$result, $agg$tmp, $val);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($agg$tmp);
 STACKTOP = sp;
 return;
}

function __ZNSt3__29to_stringEi($agg$result, $val) {
 $agg$result = $agg$result | 0;
 $val = $val | 0;
 var $agg$tmp = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $agg$tmp = sp;
 __ZNKSt3__212_GLOBAL__N_114initial_stringINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEiLb0EEclEv($agg$tmp);
 __ZNSt3__212_GLOBAL__N_19as_stringINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPFiPcmPKczEiEET_T0_SD_PKNSD_10value_typeET1_($agg$result, $agg$tmp, $val);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($agg$tmp);
 STACKTOP = sp;
 return;
}

function __ZN8nlohmann6detail28json_sax_dom_callback_parserINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE6stringERSB_($this, $val) {
 $this = $this | 0;
 $val = $val | 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 __ZN8nlohmann6detail28json_sax_dom_callback_parserINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE12handle_valueIRSB_EENS3_4pairIbPSD_EEOT_b(sp, $this, $val, 0);
 STACKTOP = sp;
 return 1;
}

function __ZN4tson9WangColorC2ERKN8nlohmann10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS1_14adl_serializerEEE($this, $json) {
 $this = $this | 0;
 $json = $json | 0;
 var $m_name = 0;
 __ZN4tson5ColorIhEC2Ev($this);
 $m_name = $this + 4 | 0;
 HEAP32[$m_name >> 2] = 0;
 HEAP32[$m_name + 4 >> 2] = 0;
 HEAP32[$m_name + 8 >> 2] = 0;
 HEAP32[$m_name + 12 >> 2] = 0;
 HEAP32[$m_name + 16 >> 2] = 0;
 __ZN4tson9WangColor5parseERKN8nlohmann10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS1_14adl_serializerEEE($this, $json) | 0;
 return;
}

function _stbi__hdr_test($s) {
 $s = $s | 0;
 var $5 = 0, $r = 0, $s$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $s$addr = sp + 4 | 0;
 $r = sp;
 HEAP32[$s$addr >> 2] = $s;
 HEAP32[$r >> 2] = _stbi__hdr_test_core(HEAP32[$s$addr >> 2] | 0, 33035) | 0;
 _stbi__rewind(HEAP32[$s$addr >> 2] | 0);
 if (HEAP32[$r >> 2] | 0) {
  $5 = HEAP32[$r >> 2] | 0;
  STACKTOP = sp;
  return $5 | 0;
 }
 HEAP32[$r >> 2] = _stbi__hdr_test_core(HEAP32[$s$addr >> 2] | 0, 33047) | 0;
 _stbi__rewind(HEAP32[$s$addr >> 2] | 0);
 $5 = HEAP32[$r >> 2] | 0;
 STACKTOP = sp;
 return $5 | 0;
}

function __ZN8nlohmann6detail19json_sax_dom_parserINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE4nullEv($this) {
 $this = $this | 0;
 var $ref$tmp = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $ref$tmp = sp;
 HEAP32[$ref$tmp >> 2] = 0;
 __ZN8nlohmann6detail19json_sax_dom_parserINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE12handle_valueIDnEEPSD_OT_($this, $ref$tmp) | 0;
 STACKTOP = sp;
 return 1;
}

function __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE3getIiiLi0EEET0_v($this) {
 $this = $this | 0;
 var $ret = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $ret = sp;
 __ZN8nlohmann14adl_serializerIivE9from_jsonIRKNS_10basic_jsonINSt3__23mapENS4_6vectorENS4_12basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEbxydSA_S0_EEiEEDTcmclL_ZNS_12_GLOBAL__N_19from_jsonEEclsr3stdE7forwardIT_Efp_Efp0_Ecvv_EEOSH_RT0_($this, $ret);
 STACKTOP = sp;
 return HEAP32[$ret >> 2] | 0;
}

function __ZNKSt3__27codecvtIwc11__mbstate_tE11do_encodingEv($this) {
 $this = $this | 0;
 var $1 = 0, $__l = 0, $call$i = 0, $call$i$i = 0, $call$i$i1 = 0, $call$i2 = 0, $retval$0 = 0;
 $__l = $this + 8 | 0;
 $call$i$i = ___uselocale(HEAP32[$__l >> 2] | 0) | 0;
 $call$i = _mbtowc(0, 0, 4) | 0;
 if ($call$i$i | 0) ___uselocale($call$i$i) | 0;
 if (!$call$i) {
  $1 = HEAP32[$__l >> 2] | 0;
  if (!$1) $retval$0 = 1; else {
   $call$i$i1 = ___uselocale($1) | 0;
   $call$i2 = ___ctype_get_mb_cur_max() | 0;
   if ($call$i$i1 | 0) ___uselocale($call$i$i1) | 0;
   return ($call$i2 | 0) == 1 | 0;
  }
 } else $retval$0 = -1;
 return $retval$0 | 0;
}

function __ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this, $info, $adjustedPtr, $path_below) {
 $this = $this | 0;
 $info = $info | 0;
 $adjustedPtr = $adjustedPtr | 0;
 $path_below = $path_below | 0;
 var $1 = 0;
 if (__ZL8is_equalPKSt9type_infoS1_b($this, HEAP32[$info + 8 >> 2] | 0, 0) | 0) __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0, $info, $adjustedPtr, $path_below); else {
  $1 = HEAP32[$this + 8 >> 2] | 0;
  FUNCTION_TABLE_viiii[HEAP32[(HEAP32[$1 >> 2] | 0) + 28 >> 2] & 63]($1, $info, $adjustedPtr, $path_below);
 }
 return;
}

function _fmt_x($0, $1, $s, $lower) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $s = $s | 0;
 $lower = $lower | 0;
 var $5 = 0, $7 = 0, $incdec$ptr = 0, $s$addr$0$lcssa = 0, $s$addr$06 = 0;
 if (($0 | 0) == 0 & ($1 | 0) == 0) $s$addr$0$lcssa = $s; else {
  $5 = $0;
  $7 = $1;
  $s$addr$06 = $s;
  while (1) {
   $incdec$ptr = $s$addr$06 + -1 | 0;
   HEAP8[$incdec$ptr >> 0] = HEAPU8[8768 + ($5 & 15) >> 0] | 0 | $lower;
   $5 = _bitshift64Lshr($5 | 0, $7 | 0, 4) | 0;
   $7 = getTempRet0() | 0;
   if (($5 | 0) == 0 & ($7 | 0) == 0) {
    $s$addr$0$lcssa = $incdec$ptr;
    break;
   } else $s$addr$06 = $incdec$ptr;
  }
 }
 return $s$addr$0$lcssa | 0;
}

function __ZNKSt3__25ctypeIwE5do_isEPKwS3_Pt($this, $low, $high, $vec) {
 $this = $this | 0;
 $low = $low | 0;
 $high = $high | 0;
 $vec = $vec | 0;
 var $call = 0, $cond = 0, $low$addr$0 = 0, $vec$addr$0 = 0;
 $low$addr$0 = $low;
 $vec$addr$0 = $vec;
 while (1) {
  if (($low$addr$0 | 0) == ($high | 0)) break;
  if ((HEAP32[$low$addr$0 >> 2] | 0) >>> 0 < 128) {
   $call = __ZNSt3__25ctypeIcE13classic_tableEv() | 0;
   $cond = HEAPU16[$call + (HEAP32[$low$addr$0 >> 2] << 1) >> 1] | 0;
  } else $cond = 0;
  HEAP16[$vec$addr$0 >> 1] = $cond;
  $low$addr$0 = $low$addr$0 + 4 | 0;
  $vec$addr$0 = $vec$addr$0 + 2 | 0;
 }
 return $high | 0;
}

function __ZNKSt3__25ctypeIwE10do_scan_isEtPKwS3_($this, $m, $low, $high) {
 $this = $this | 0;
 $m = $m | 0;
 $low = $low | 0;
 $high = $high | 0;
 var $call = 0, $low$addr$0 = 0, $low$addr$0$lcssa = 0;
 $low$addr$0 = $low;
 while (1) {
  if (($low$addr$0 | 0) == ($high | 0)) {
   $low$addr$0$lcssa = $high;
   break;
  }
  if ((HEAP32[$low$addr$0 >> 2] | 0) >>> 0 < 128) {
   $call = __ZNSt3__25ctypeIcE13classic_tableEv() | 0;
   if ((HEAP16[$call + (HEAP32[$low$addr$0 >> 2] << 1) >> 1] & $m) << 16 >> 16) {
    $low$addr$0$lcssa = $low$addr$0;
    break;
   }
  }
  $low$addr$0 = $low$addr$0 + 4 | 0;
 }
 return $low$addr$0$lcssa | 0;
}

function _GifEnd() {
 var $$pre_trunc = 0, $4 = 0, $retval = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $retval = sp;
 if (HEAP32[14955] | 0) {
  _fputc(59, HEAP32[14955] | 0) | 0;
  _fclose(HEAP32[14955] | 0) | 0;
  _free(HEAP32[14794] | 0);
  HEAP32[14955] = 0;
  HEAP32[14794] = 0;
  HEAP8[$retval >> 0] = 1;
  $$pre_trunc = HEAP8[$retval >> 0] | 0;
  $4 = $$pre_trunc & 1;
  STACKTOP = sp;
  return $4 | 0;
 } else {
  HEAP8[$retval >> 0] = 0;
  $$pre_trunc = HEAP8[$retval >> 0] | 0;
  $4 = $$pre_trunc & 1;
  STACKTOP = sp;
  return $4 | 0;
 }
 return 0;
}

function __ZNKSt3__29__num_getIwE12__do_widen_pIwEEPKT_RNS_8ios_baseEPS3_($this, $__iob, $__atoms) {
 $this = $this | 0;
 $__iob = $__iob | 0;
 $__atoms = $__atoms | 0;
 var $__loc = 0, $call$i = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $__loc = sp;
 __ZNKSt3__28ios_base6getlocEv($__loc, $__iob);
 $call$i = __ZNKSt3__26locale9use_facetERNS0_2idE($__loc, 61248) | 0;
 FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[$call$i >> 2] | 0) + 48 >> 2] & 15]($call$i, 14672, 14698, $__atoms) | 0;
 __ZNSt3__26localeD2Ev($__loc);
 STACKTOP = sp;
 return $__atoms | 0;
}

function _WindowSizeCallback($window, $width, $height) {
 $window = $window | 0;
 $width = $width | 0;
 $height = $height | 0;
 var $height$addr = 0, $width$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $width$addr = sp + 4 | 0;
 $height$addr = sp;
 HEAP32[sp + 8 >> 2] = $window;
 HEAP32[$width$addr >> 2] = $width;
 HEAP32[$height$addr >> 2] = $height;
 _SetupViewport(HEAP32[$width$addr >> 2] | 0, HEAP32[$height$addr >> 2] | 0);
 HEAP32[14957] = HEAP32[$width$addr >> 2];
 HEAP32[14958] = HEAP32[$height$addr >> 2];
 STACKTOP = sp;
 return;
}

function __ZN8nlohmann6detail19json_sax_dom_parserINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEEC2ERSD_b($this, $r, $allow_exceptions_) {
 $this = $this | 0;
 $r = $r | 0;
 $allow_exceptions_ = $allow_exceptions_ | 0;
 var $__begin_$i$i = 0;
 HEAP32[$this >> 2] = $r;
 $__begin_$i$i = $this + 4 | 0;
 HEAP32[$__begin_$i$i >> 2] = 0;
 HEAP32[$__begin_$i$i + 4 >> 2] = 0;
 HEAP32[$__begin_$i$i + 8 >> 2] = 0;
 HEAP32[$__begin_$i$i + 12 >> 2] = 0;
 HEAP8[$__begin_$i$i + 16 >> 0] = 0;
 HEAP8[$this + 21 >> 0] = $allow_exceptions_ & 1;
 return;
}

function __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE6cbeginEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 __ZN8nlohmann6detail9iter_implIKNS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEEC2EPSE_($agg$result, $this);
 __ZN8nlohmann6detail9iter_implIKNS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE9set_beginEv($agg$result);
 return;
}

function __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE3getIS9_S9_Li0EEET0_v($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 HEAP32[$agg$result >> 2] = 0;
 HEAP32[$agg$result + 4 >> 2] = 0;
 HEAP32[$agg$result + 8 >> 2] = 0;
 __ZN8nlohmann14adl_serializerINSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEvE9from_jsonIRKNS_10basic_jsonINS1_3mapENS1_6vectorES7_bxydS5_S0_EES7_EEDTcmclL_ZNS_12_GLOBAL__N_19from_jsonEEclsr3stdE7forwardIT_Efp_Efp0_Ecvv_EEOSH_RT0_($this, $agg$result);
 return;
}

function __ZNSt3__214__split_bufferIPN8nlohmann10basic_jsonINS_3mapENS_6vectorENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEbxydS8_NS1_14adl_serializerEEERNS8_ISD_EEED2Ev($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $6 = 0, $__end_$i$i$i = 0;
 $0 = HEAP32[$this + 4 >> 2] | 0;
 $__end_$i$i$i = $this + 8 | 0;
 $1 = HEAP32[$__end_$i$i$i >> 2] | 0;
 if (($1 | 0) != ($0 | 0)) HEAP32[$__end_$i$i$i >> 2] = $1 + (~(($1 + -4 - $0 | 0) >>> 2) << 2);
 $6 = HEAP32[$this >> 2] | 0;
 if ($6 | 0) __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm($6, (HEAP32[$this + 12 >> 2] | 0) - $6 | 0);
 return;
}

function __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE4cendEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 __ZN8nlohmann6detail9iter_implIKNS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEEC2EPSE_($agg$result, $this);
 __ZN8nlohmann6detail9iter_implIKNS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE7set_endEv($agg$result);
 return;
}

function __ZN8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE5beginEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 __ZN8nlohmann6detail9iter_implINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEEC2EPSD_($agg$result, $this);
 __ZN8nlohmann6detail9iter_implINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE9set_beginEv($agg$result);
 return;
}

function __ZN4tson9WangColorC2EOS0_($this, $0) {
 $this = $this | 0;
 $0 = $0 | 0;
 var $2 = 0, $7 = 0, $8 = 0, $m_name = 0, $m_name3 = 0;
 HEAP32[$this >> 2] = HEAP32[$0 >> 2];
 $m_name = $this + 4 | 0;
 $m_name3 = $0 + 4 | 0;
 HEAP32[$m_name >> 2] = HEAP32[$m_name3 >> 2];
 HEAP32[$m_name + 4 >> 2] = HEAP32[$m_name3 + 4 >> 2];
 HEAP32[$m_name + 8 >> 2] = HEAP32[$m_name3 + 8 >> 2];
 HEAP32[$m_name3 >> 2] = 0;
 HEAP32[$m_name3 + 4 >> 2] = 0;
 HEAP32[$m_name3 + 8 >> 2] = 0;
 $2 = $0 + 16 | 0;
 $7 = HEAP32[$2 + 4 >> 2] | 0;
 $8 = $this + 16 | 0;
 HEAP32[$8 >> 2] = HEAP32[$2 >> 2];
 HEAP32[$8 + 4 >> 2] = $7;
 return;
}

function __ZN4tson8WangTileC2ERKN8nlohmann10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS1_14adl_serializerEEE($this, $json) {
 $this = $this | 0;
 $json = $json | 0;
 HEAP8[$this >> 0] = 0;
 HEAP8[$this + 1 >> 0] = 0;
 HEAP32[$this + 4 >> 2] = 0;
 HEAP8[$this + 8 >> 0] = 0;
 HEAP32[$this + 12 >> 2] = 0;
 HEAP32[$this + 16 >> 2] = 0;
 HEAP32[$this + 20 >> 2] = 0;
 __ZN4tson8WangTile5parseERKN8nlohmann10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS1_14adl_serializerEEE($this, $json) | 0;
 return;
}

function _vasprintf($s, $fmt, $ap) {
 $s = $s | 0;
 $fmt = $fmt | 0;
 $ap = $ap | 0;
 var $add = 0, $ap2 = 0, $call = 0, $call4 = 0, $retval$0 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $ap2 = sp;
 HEAP32[$ap2 >> 2] = HEAP32[$ap >> 2];
 $call = _vsnprintf(0, 0, $fmt, $ap2) | 0;
 if (($call | 0) < 0) $retval$0 = -1; else {
  $add = $call + 1 | 0;
  $call4 = _malloc($add) | 0;
  HEAP32[$s >> 2] = $call4;
  if (!$call4) $retval$0 = -1; else $retval$0 = _vsnprintf($call4, $add, $fmt, $ap) | 0;
 }
 STACKTOP = sp;
 return $retval$0 | 0;
}

function ___shlim($f, $0, $1) {
 $f = $f | 0;
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $2 = 0, $6 = 0, $7 = 0, $9 = 0, $sub$ptr$sub = 0;
 $2 = $f + 112 | 0;
 HEAP32[$2 >> 2] = $0;
 HEAP32[$2 + 4 >> 2] = $1;
 $6 = HEAP32[$f + 8 >> 2] | 0;
 $7 = HEAP32[$f + 4 >> 2] | 0;
 $sub$ptr$sub = $6 - $7 | 0;
 $9 = (($sub$ptr$sub | 0) < 0) << 31 >> 31;
 $10 = $f + 120 | 0;
 HEAP32[$10 >> 2] = $sub$ptr$sub;
 HEAP32[$10 + 4 >> 2] = $9;
 if ((($0 | 0) != 0 | ($1 | 0) != 0) & (($9 | 0) > ($1 | 0) | ($9 | 0) == ($1 | 0) & $sub$ptr$sub >>> 0 > $0 >>> 0)) HEAP32[$f + 104 >> 2] = $7 + $0; else HEAP32[$f + 104 >> 2] = $6;
 return;
}

function __ZN8nlohmann6detail9iter_implIKNS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE7set_endEv($this) {
 $this = $this | 0;
 var $0 = 0;
 $0 = HEAP32[$this >> 2] | 0;
 if (!$0) ___assert_fail(23450, 22221, 9364, 23732);
 switch (HEAP8[$0 >> 0] | 0) {
 case 1:
  {
   HEAP32[$this + 4 >> 2] = (HEAP32[$0 + 8 >> 2] | 0) + 4;
   break;
  }
 case 2:
  {
   HEAP32[$this + 8 >> 2] = HEAP32[(HEAP32[$0 + 8 >> 2] | 0) + 4 >> 2];
   break;
  }
 default:
  __ZN8nlohmann6detail20primitive_iterator_t7set_endEv($this + 12 | 0);
 }
 return;
}

function __ZN8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE3endEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 __ZN8nlohmann6detail9iter_implINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEEC2EPSD_($agg$result, $this);
 __ZN8nlohmann6detail9iter_implINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE7set_endEv($agg$result);
 return;
}

function ___string_read($f, $buf, $len) {
 $f = $f | 0;
 $buf = $buf | 0;
 $len = $len | 0;
 var $0 = 0, $add = 0, $add$ptr4 = 0, $call = 0, $cookie = 0, $k$0 = 0, $spec$select = 0;
 $cookie = $f + 84 | 0;
 $0 = HEAP32[$cookie >> 2] | 0;
 $add = $len + 256 | 0;
 $call = _memchr($0, 0, $add) | 0;
 $k$0 = ($call | 0) == 0 ? $add : $call - $0 | 0;
 $spec$select = $k$0 >>> 0 < $len >>> 0 ? $k$0 : $len;
 _memcpy($buf | 0, $0 | 0, $spec$select | 0) | 0;
 HEAP32[$f + 4 >> 2] = $0 + $spec$select;
 $add$ptr4 = $0 + $k$0 | 0;
 HEAP32[$f + 8 >> 2] = $add$ptr4;
 HEAP32[$cookie >> 2] = $add$ptr4;
 return $spec$select | 0;
}

function __ZN8nlohmann6detail9iter_implINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE7set_endEv($this) {
 $this = $this | 0;
 var $0 = 0;
 $0 = HEAP32[$this >> 2] | 0;
 if (!$0) ___assert_fail(23450, 22221, 9364, 23732);
 switch (HEAP8[$0 >> 0] | 0) {
 case 1:
  {
   HEAP32[$this + 4 >> 2] = (HEAP32[$0 + 8 >> 2] | 0) + 4;
   break;
  }
 case 2:
  {
   HEAP32[$this + 8 >> 2] = HEAP32[(HEAP32[$0 + 8 >> 2] | 0) + 4 >> 2];
   break;
  }
 default:
  __ZN8nlohmann6detail20primitive_iterator_t7set_endEv($this + 12 | 0);
 }
 return;
}

function __ZN8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEC2ENS_6detail7value_tE($this, $v) {
 $this = $this | 0;
 $v = $v | 0;
 HEAP8[$this >> 0] = $v;
 __ZN8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE10json_valueC2ENS_6detail7value_tE($this + 8 | 0, $v);
 __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE16assert_invariantEv($this);
 return;
}

function __ZNKSt3__214error_category10equivalentEiRKNS_15error_conditionE($this, $code, $condition) {
 $this = $this | 0;
 $code = $code | 0;
 $condition = $condition | 0;
 var $5 = 0, $ref$tmp = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $ref$tmp = sp;
 FUNCTION_TABLE_viii[HEAP32[(HEAP32[$this >> 2] | 0) + 12 >> 2] & 63]($ref$tmp, $this, $code);
 if ((HEAP32[$ref$tmp + 4 >> 2] | 0) == (HEAP32[$condition + 4 >> 2] | 0)) $5 = (HEAP32[$ref$tmp >> 2] | 0) == (HEAP32[$condition >> 2] | 0); else $5 = 0;
 STACKTOP = sp;
 return $5 | 0;
}

function _stbi__stdio_read($user, $data, $size) {
 $user = $user | 0;
 $data = $data | 0;
 $size = $size | 0;
 var $call = 0, $data$addr = 0, $size$addr = 0, $user$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $user$addr = sp + 8 | 0;
 $data$addr = sp + 4 | 0;
 $size$addr = sp;
 HEAP32[$user$addr >> 2] = $user;
 HEAP32[$data$addr >> 2] = $data;
 HEAP32[$size$addr >> 2] = $size;
 $call = _fread(HEAP32[$data$addr >> 2] | 0, 1, HEAP32[$size$addr >> 2] | 0, HEAP32[$user$addr >> 2] | 0) | 0;
 STACKTOP = sp;
 return $call | 0;
}

function _TextIsEqual($text1, $text2) {
 $text1 = $text1 | 0;
 $text2 = $text2 | 0;
 var $cmp = 0, $result = 0, $text1$addr = 0, $text2$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $text1$addr = sp + 4 | 0;
 $text2$addr = sp;
 $result = sp + 8 | 0;
 HEAP32[$text1$addr >> 2] = $text1;
 HEAP32[$text2$addr >> 2] = $text2;
 HEAP8[$result >> 0] = 0;
 $cmp = (_strcmp(HEAP32[$text1$addr >> 2] | 0, HEAP32[$text2$addr >> 2] | 0) | 0) == 0;
 HEAP8[$result >> 0] = $cmp ? 1 : 0;
 STACKTOP = sp;
 return HEAP8[$result >> 0] & 1 | 0;
}

function _memcmp($vl, $vr, $n) {
 $vl = $vl | 0;
 $vr = $vr | 0;
 $n = $n | 0;
 var $0 = 0, $1 = 0, $cond = 0, $l$012 = 0, $n$addr$011 = 0, $r$013 = 0;
 L1 : do if (!$n) $cond = 0; else {
  $l$012 = $vl;
  $n$addr$011 = $n;
  $r$013 = $vr;
  while (1) {
   $0 = HEAP8[$l$012 >> 0] | 0;
   $1 = HEAP8[$r$013 >> 0] | 0;
   if ($0 << 24 >> 24 != $1 << 24 >> 24) break;
   $n$addr$011 = $n$addr$011 + -1 | 0;
   if (!$n$addr$011) {
    $cond = 0;
    break L1;
   } else {
    $l$012 = $l$012 + 1 | 0;
    $r$013 = $r$013 + 1 | 0;
   }
  }
  $cond = ($0 & 255) - ($1 & 255) | 0;
 } while (0);
 return $cond | 0;
}

function _IsMouseButtonReleased($button) {
 $button = $button | 0;
 var $button$addr = 0, $released = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $button$addr = sp;
 $released = sp + 4 | 0;
 HEAP32[$button$addr >> 2] = $button;
 HEAP8[$released >> 0] = 0;
 if ((HEAP8[62158 + (HEAP32[$button$addr >> 2] | 0) >> 0] | 0) != (HEAP8[62161 + (HEAP32[$button$addr >> 2] | 0) >> 0] | 0)) if (!(HEAP8[62158 + (HEAP32[$button$addr >> 2] | 0) >> 0] | 0)) HEAP8[$released >> 0] = 1;
 STACKTOP = sp;
 return HEAP8[$released >> 0] & 1 | 0;
}

function __ZNSt3__26vectorIN4tson7TilesetENS_9allocatorIS2_EEE13__move_assignERS5_NS_17integral_constantIbLb1EEE($this, $__c, $0) {
 $this = $this | 0;
 $__c = $__c | 0;
 $0 = $0 | 0;
 var $__end_ = 0, $__value_$i$i$i8 = 0;
 __ZNSt3__26vectorIN4tson7TilesetENS_9allocatorIS2_EEE13__vdeallocateEv($this);
 HEAP32[$this >> 2] = HEAP32[$__c >> 2];
 $__end_ = $__c + 4 | 0;
 HEAP32[$this + 4 >> 2] = HEAP32[$__end_ >> 2];
 $__value_$i$i$i8 = $__c + 8 | 0;
 HEAP32[$this + 8 >> 2] = HEAP32[$__value_$i$i$i8 >> 2];
 HEAP32[$__value_$i$i$i8 >> 2] = 0;
 HEAP32[$__end_ >> 2] = 0;
 HEAP32[$__c >> 2] = 0;
 return;
}

function _rlPushMatrix() {
 var dest = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 if ((HEAP32[14828] | 0) >= 32) _TraceLog(5, 28454, sp);
 if ((HEAP32[4478] | 0) == 5888) {
  HEAP8[62143] = 1;
  HEAP32[14811] = 59316;
 }
 dest = 45360 + (HEAP32[14828] << 6) | 0;
 src = HEAP32[14811] | 0;
 stop = dest + 64 | 0;
 do {
  HEAP32[dest >> 2] = HEAP32[src >> 2];
  dest = dest + 4 | 0;
  src = src + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP32[14828] = (HEAP32[14828] | 0) + 1;
 STACKTOP = sp;
 return;
}

function __ZNSt3__26vectorIN4tson6ObjectENS_9allocatorIS2_EEE13__move_assignERS5_NS_17integral_constantIbLb1EEE($this, $__c, $0) {
 $this = $this | 0;
 $__c = $__c | 0;
 $0 = $0 | 0;
 var $__end_ = 0, $__value_$i$i$i8 = 0;
 __ZNSt3__26vectorIN4tson6ObjectENS_9allocatorIS2_EEE13__vdeallocateEv($this);
 HEAP32[$this >> 2] = HEAP32[$__c >> 2];
 $__end_ = $__c + 4 | 0;
 HEAP32[$this + 4 >> 2] = HEAP32[$__end_ >> 2];
 $__value_$i$i$i8 = $__c + 8 | 0;
 HEAP32[$this + 8 >> 2] = HEAP32[$__value_$i$i$i8 >> 2];
 HEAP32[$__value_$i$i$i8 >> 2] = 0;
 HEAP32[$__end_ >> 2] = 0;
 HEAP32[$__c >> 2] = 0;
 return;
}

function __ZNSt3__26vectorIN4tson5LayerENS_9allocatorIS2_EEE13__move_assignERS5_NS_17integral_constantIbLb1EEE($this, $__c, $0) {
 $this = $this | 0;
 $__c = $__c | 0;
 $0 = $0 | 0;
 var $__end_ = 0, $__value_$i$i$i8 = 0;
 __ZNSt3__26vectorIN4tson5LayerENS_9allocatorIS2_EEE13__vdeallocateEv($this);
 HEAP32[$this >> 2] = HEAP32[$__c >> 2];
 $__end_ = $__c + 4 | 0;
 HEAP32[$this + 4 >> 2] = HEAP32[$__end_ >> 2];
 $__value_$i$i$i8 = $__c + 8 | 0;
 HEAP32[$this + 8 >> 2] = HEAP32[$__value_$i$i$i8 >> 2];
 HEAP32[$__value_$i$i$i8 >> 2] = 0;
 HEAP32[$__end_ >> 2] = 0;
 HEAP32[$__c >> 2] = 0;
 return;
}

function __ZNSt3__26vectorIN4tson5ChunkENS_9allocatorIS2_EEE13__move_assignERS5_NS_17integral_constantIbLb1EEE($this, $__c, $0) {
 $this = $this | 0;
 $__c = $__c | 0;
 $0 = $0 | 0;
 var $__end_ = 0, $__value_$i$i$i8 = 0;
 __ZNSt3__26vectorIN4tson5ChunkENS_9allocatorIS2_EEE13__vdeallocateEv($this);
 HEAP32[$this >> 2] = HEAP32[$__c >> 2];
 $__end_ = $__c + 4 | 0;
 HEAP32[$this + 4 >> 2] = HEAP32[$__end_ >> 2];
 $__value_$i$i$i8 = $__c + 8 | 0;
 HEAP32[$this + 8 >> 2] = HEAP32[$__value_$i$i$i8 >> 2];
 HEAP32[$__value_$i$i$i8 >> 2] = 0;
 HEAP32[$__end_ >> 2] = 0;
 HEAP32[$__c >> 2] = 0;
 return;
}

function __ZN8nlohmann6detail6parserINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEED2Ev($this) {
 $this = $this | 0;
 __ZN8nlohmann6detail5lexerINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEED2Ev($this + 24 | 0);
 __ZNSt3__28functionIFbiN8nlohmann6detail6parserINS1_10basic_jsonINS_3mapENS_6vectorENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEbxydSA_NS1_14adl_serializerEEEE13parse_event_tERSE_EED2Ev($this);
 return;
}

function _store_int($dest, $size, $0, $1) {
 $dest = $dest | 0;
 $size = $size | 0;
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $4 = 0;
 L1 : do if ($dest | 0) switch ($size | 0) {
 case -2:
  {
   HEAP8[$dest >> 0] = $0;
   break L1;
   break;
  }
 case -1:
  {
   HEAP16[$dest >> 1] = $0;
   break L1;
   break;
  }
 case 0:
  {
   HEAP32[$dest >> 2] = $0;
   break L1;
   break;
  }
 case 1:
  {
   HEAP32[$dest >> 2] = $0;
   break L1;
   break;
  }
 case 3:
  {
   $4 = $dest;
   HEAP32[$4 >> 2] = $0;
   HEAP32[$4 + 4 >> 2] = $1;
   break L1;
   break;
  }
 default:
  break L1;
 } while (0);
 return;
}

function __ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE5closeEv($this) {
 $this = $this | 0;
 var $0 = 0, $__file_ = 0, $__rt$1 = 0, $__rt$2 = 0, $call = 0;
 $__file_ = $this + 64 | 0;
 $0 = HEAP32[$__file_ >> 2] | 0;
 if (!$0) $__rt$2 = 0; else {
  $call = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$this >> 2] | 0) + 24 >> 2] & 127]($this) | 0;
  if (!(_fclose($0) | 0)) {
   HEAP32[$__file_ >> 2] = 0;
   $__rt$1 = ($call | 0) == 0 ? $this : 0;
  } else $__rt$1 = 0;
  FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$this >> 2] | 0) + 12 >> 2] & 63]($this, 0, 0) | 0;
  $__rt$2 = $__rt$1;
 }
 return $__rt$2 | 0;
}

function __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE9type_nameEv($this) {
 $this = $this | 0;
 var $retval$0 = 0;
 switch (HEAP8[$this >> 0] | 0) {
 case 0:
  {
   $retval$0 = 22873;
   break;
  }
 case 1:
  {
   $retval$0 = 22866;
   break;
  }
 case 2:
  {
   $retval$0 = 22860;
   break;
  }
 case 3:
  {
   $retval$0 = 22853;
   break;
  }
 case 4:
  {
   $retval$0 = 22845;
   break;
  }
 case 8:
  {
   $retval$0 = 22835;
   break;
  }
 default:
  $retval$0 = 22828;
 }
 return $retval$0 | 0;
}

function __ZNKSt3__25ctypeIwE9do_narrowEPKwS3_cPc($this, $low, $high, $dfault, $dest) {
 $this = $this | 0;
 $low = $low | 0;
 $high = $high | 0;
 $dfault = $dfault | 0;
 $dest = $dest | 0;
 var $2 = 0, $3 = 0, $dest$addr$0 = 0, $low$addr$0 = 0;
 $2 = ($high - $low | 0) >>> 2;
 $dest$addr$0 = $dest;
 $low$addr$0 = $low;
 while (1) {
  if (($low$addr$0 | 0) == ($high | 0)) break;
  $3 = HEAP32[$low$addr$0 >> 2] | 0;
  HEAP8[$dest$addr$0 >> 0] = $3 >>> 0 < 128 ? $3 & 255 : $dfault;
  $dest$addr$0 = $dest$addr$0 + 1 | 0;
  $low$addr$0 = $low$addr$0 + 4 | 0;
 }
 return $low + ($2 << 2) | 0;
}

function __ZN4tson6ObjectD2Ev($this) {
 $this = $this | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($this + 116 | 0);
 __ZN4tson4TextD2Ev($this + 100 | 0);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($this + 88 | 0);
 __ZN4tson18PropertyCollectionD2Ev($this + 60 | 0);
 __ZNSt3__213__vector_baseIN4tson7Vector2IiEENS_9allocatorIS3_EEED2Ev($this + 48 | 0);
 __ZNSt3__213__vector_baseIN4tson7Vector2IiEENS_9allocatorIS3_EEED2Ev($this + 36 | 0);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($this + 20 | 0);
 return;
}

function _sbrk($increment) {
 $increment = $increment | 0;
 var $0 = 0, $add = 0, $call = 0, $retval$2 = 0;
 $call = _emscripten_get_sbrk_ptr() | 0;
 $0 = HEAP32[$call >> 2] | 0;
 $add = $0 + $increment | 0;
 if (($add | 0) < 0) {
  HEAP32[(___errno_location() | 0) >> 2] = 48;
  $retval$2 = -1;
  return $retval$2 | 0;
 }
 if ($add >>> 0 > (_emscripten_get_heap_size() | 0) >>> 0) if (!(_emscripten_resize_heap($add | 0) | 0)) {
  HEAP32[(___errno_location() | 0) >> 2] = 48;
  $retval$2 = -1;
  return $retval$2 | 0;
 }
 HEAP32[$call >> 2] = $add;
 $retval$2 = $0;
 return $retval$2 | 0;
}

function __ZNSt3__219__libcpp_snprintf_lEPcmP15__locale_structPKcz($__s, $__n, $__l, $__format, $varargs) {
 $__s = $__s | 0;
 $__n = $__n | 0;
 $__l = $__l | 0;
 $__format = $__format | 0;
 $varargs = $varargs | 0;
 var $__va = 0, $call = 0, $call$i = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $__va = sp;
 HEAP32[$__va >> 2] = $varargs;
 $call$i = ___uselocale($__l) | 0;
 $call = _vsnprintf($__s, $__n, $__format, $__va) | 0;
 if ($call$i | 0) ___uselocale($call$i) | 0;
 STACKTOP = sp;
 return $call | 0;
}

function __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE16assert_invariantEv($this) {
 $this = $this | 0;
 switch (HEAP8[$this >> 0] | 0) {
 case 1:
  {
   if (!(HEAP32[$this + 8 >> 2] | 0)) ___assert_fail(22166, 22221, 15394, 22251);
   break;
  }
 case 2:
  {
   if (!(HEAP32[$this + 8 >> 2] | 0)) ___assert_fail(22268, 22221, 15395, 22251);
   break;
  }
 case 3:
  {
   if (!(HEAP32[$this + 8 >> 2] | 0)) ___assert_fail(22321, 22221, 15396, 22251);
   break;
  }
 default:
  {}
 }
 return;
}

function __ZNSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8nlohmann10basic_jsonINS_3mapENS_6vectorES7_bxydS5_NS8_14adl_serializerEEEEENS_19__map_value_compareIS7_SE_NS_4lessIvEELb1EEENS5_ISE_EEED2Ev($this) {
 $this = $this | 0;
 __ZNSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8nlohmann10basic_jsonINS_3mapENS_6vectorES7_bxydS5_NS8_14adl_serializerEEEEENS_19__map_value_compareIS7_SE_NS_4lessIvEELb1EEENS5_ISE_EEE7destroyEPNS_11__tree_nodeISE_PvEE($this, HEAP32[$this + 4 >> 2] | 0);
 return;
}

function _GetMousePosition($agg$result) {
 $agg$result = $agg$result | 0;
 var $position = 0, $tmp = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $position = sp + 8 | 0;
 $tmp = sp;
 HEAP32[$position >> 2] = 0;
 HEAP32[$position + 4 >> 2] = 0;
 _GetTouchPosition($tmp, 0);
 HEAP32[$position >> 2] = HEAP32[$tmp >> 2];
 HEAP32[$position + 4 >> 2] = HEAP32[$tmp + 4 >> 2];
 HEAP32[$agg$result >> 2] = HEAP32[$position >> 2];
 HEAP32[$agg$result + 4 >> 2] = HEAP32[$position + 4 >> 2];
 STACKTOP = sp;
 return;
}

function __ZN4tson7TerrainC2ERKN8nlohmann10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS1_14adl_serializerEEE($this, $json) {
 $this = $this | 0;
 $json = $json | 0;
 HEAP32[$this >> 2] = 0;
 HEAP32[$this + 4 >> 2] = 0;
 HEAP32[$this + 8 >> 2] = 0;
 HEAP32[$this + 12 >> 2] = 0;
 __ZN4tson18PropertyCollectionC2Ev($this + 16 | 0);
 __ZN4tson7Terrain5parseERKN8nlohmann10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS1_14adl_serializerEEE($this, $json) | 0;
 return;
}

function _stbir__support_trapezoid($scale) {
 $scale = Math_fround($scale);
 var $add = f0, $scale$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $scale$addr = sp;
 HEAPF32[$scale$addr >> 2] = $scale;
 if (Math_fround(HEAPF32[$scale$addr >> 2]) <= Math_fround(1.0)) {
  $add = Math_fround(Math_fround(Math_fround(HEAPF32[$scale$addr >> 2]) / Math_fround(2.0)) + Math_fround(.5));
  STACKTOP = sp;
  return Math_fround($add);
 } else ___assert_fail(35713, 34244, 780, 35724);
 return Math_fround(0.0);
}

function _stbi__bit_reverse($v, $bits) {
 $v = $v | 0;
 $bits = $bits | 0;
 var $bits$addr = 0, $call = 0, $v$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $v$addr = sp + 4 | 0;
 $bits$addr = sp;
 HEAP32[$v$addr >> 2] = $v;
 HEAP32[$bits$addr >> 2] = $bits;
 if ((HEAP32[$bits$addr >> 2] | 0) <= 16) {
  $call = _stbi__bitreverse16(HEAP32[$v$addr >> 2] | 0) | 0;
  STACKTOP = sp;
  return $call >> 16 - (HEAP32[$bits$addr >> 2] | 0) | 0;
 } else ___assert_fail(33759, 32781, 3882, 33770);
 return 0;
}

function __ZNSt3__214__split_bufferIcRNS_9allocatorIcEEEC2EmmS3_($this, $__cap, $__start, $__a) {
 $this = $this | 0;
 $__cap = $__cap | 0;
 $__start = $__start | 0;
 $__a = $__a | 0;
 var $__value_$i1$i = 0, $add$ptr = 0, $cond = 0;
 $__value_$i1$i = $this + 12 | 0;
 HEAP32[$__value_$i1$i >> 2] = 0;
 HEAP32[$this + 16 >> 2] = $__a;
 if (!$__cap) $cond = 0; else $cond = __Znwm($__cap) | 0;
 HEAP32[$this >> 2] = $cond;
 $add$ptr = $cond + $__start | 0;
 HEAP32[$this + 8 >> 2] = $add$ptr;
 HEAP32[$this + 4 >> 2] = $add$ptr;
 HEAP32[$__value_$i1$i >> 2] = $cond + $__cap;
 return;
}

function __ZN8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEED2Ev($this) {
 $this = $this | 0;
 __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE16assert_invariantEv($this);
 __ZN8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE10json_value7destroyENS_6detail7value_tE($this + 8 | 0, HEAP8[$this >> 0] | 0);
 return;
}

function _fmt_o($0, $1, $s) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $s = $s | 0;
 var $6 = 0, $8 = 0, $incdec$ptr = 0, $s$addr$0$lcssa = 0, $s$addr$06 = 0;
 if (($0 | 0) == 0 & ($1 | 0) == 0) $s$addr$0$lcssa = $s; else {
  $6 = $0;
  $8 = $1;
  $s$addr$06 = $s;
  while (1) {
   $incdec$ptr = $s$addr$06 + -1 | 0;
   HEAP8[$incdec$ptr >> 0] = $6 & 7 | 48;
   $6 = _bitshift64Lshr($6 | 0, $8 | 0, 3) | 0;
   $8 = getTempRet0() | 0;
   if (($6 | 0) == 0 & ($8 | 0) == 0) {
    $s$addr$0$lcssa = $incdec$ptr;
    break;
   } else $s$addr$06 = $incdec$ptr;
  }
 }
 return $s$addr$0$lcssa | 0;
}

function __ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEE6resizeEm($this, $__sz) {
 $this = $this | 0;
 $__sz = $__sz | 0;
 var $1 = 0, $2 = 0, $__end_$i = 0, $sub$ptr$div$i = 0;
 $__end_$i = $this + 4 | 0;
 $1 = HEAP32[$this >> 2] | 0;
 $sub$ptr$div$i = (HEAP32[$__end_$i >> 2] | 0) - $1 >> 2;
 $2 = $1;
 if ($sub$ptr$div$i >>> 0 < $__sz >>> 0) __ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEE8__appendEm($this, $__sz - $sub$ptr$div$i | 0); else if ($sub$ptr$div$i >>> 0 > $__sz >>> 0) HEAP32[$__end_$i >> 2] = $2 + ($__sz << 2);
 return;
}

function __ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this, $info, $dst_ptr, $current_ptr, $path_below, $use_strcmp) {
 $this = $this | 0;
 $info = $info | 0;
 $dst_ptr = $dst_ptr | 0;
 $current_ptr = $current_ptr | 0;
 $path_below = $path_below | 0;
 $use_strcmp = $use_strcmp | 0;
 if (__ZL8is_equalPKSt9type_infoS1_b($this, HEAP32[$info + 8 >> 2] | 0, $use_strcmp) | 0) __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0, $info, $dst_ptr, $current_ptr, $path_below);
 return;
}

function __ZNKSt3__25ctypeIcE10do_toupperEPcPKc($this, $low, $high) {
 $this = $this | 0;
 $low = $low | 0;
 $high = $high | 0;
 var $0 = 0, $call = 0, $cond = 0, $low$addr$0 = 0;
 $low$addr$0 = $low;
 while (1) {
  if (($low$addr$0 | 0) == ($high | 0)) break;
  $0 = HEAP8[$low$addr$0 >> 0] | 0;
  if ($0 << 24 >> 24 > -1) {
   $call = __ZNSt3__25ctypeIcE21__classic_upper_tableEv() | 0;
   $cond = HEAP32[$call + (HEAP8[$low$addr$0 >> 0] << 2) >> 2] & 255;
  } else $cond = $0;
  HEAP8[$low$addr$0 >> 0] = $cond;
  $low$addr$0 = $low$addr$0 + 1 | 0;
 }
 return $high | 0;
}

function __ZNKSt3__25ctypeIcE10do_tolowerEPcPKc($this, $low, $high) {
 $this = $this | 0;
 $low = $low | 0;
 $high = $high | 0;
 var $0 = 0, $call = 0, $cond = 0, $low$addr$0 = 0;
 $low$addr$0 = $low;
 while (1) {
  if (($low$addr$0 | 0) == ($high | 0)) break;
  $0 = HEAP8[$low$addr$0 >> 0] | 0;
  if ($0 << 24 >> 24 > -1) {
   $call = __ZNSt3__25ctypeIcE21__classic_lower_tableEv() | 0;
   $cond = HEAP32[$call + (HEAP8[$low$addr$0 >> 0] << 2) >> 2] & 255;
  } else $cond = $0;
  HEAP8[$low$addr$0 >> 0] = $cond;
  $low$addr$0 = $low$addr$0 + 1 | 0;
 }
 return $high | 0;
}

function __ZNSt3__26vectorIiNS_9allocatorIiEEE13__move_assignERS3_NS_17integral_constantIbLb1EEE($this, $__c, $0) {
 $this = $this | 0;
 $__c = $__c | 0;
 $0 = $0 | 0;
 var $__end_ = 0, $__value_$i$i$i8 = 0;
 __ZNSt3__26vectorIiNS_9allocatorIiEEE13__vdeallocateEv($this);
 HEAP32[$this >> 2] = HEAP32[$__c >> 2];
 $__end_ = $__c + 4 | 0;
 HEAP32[$this + 4 >> 2] = HEAP32[$__end_ >> 2];
 $__value_$i$i$i8 = $__c + 8 | 0;
 HEAP32[$this + 8 >> 2] = HEAP32[$__value_$i$i$i8 >> 2];
 HEAP32[$__value_$i$i$i8 >> 2] = 0;
 HEAP32[$__end_ >> 2] = 0;
 HEAP32[$__c >> 2] = 0;
 return;
}

function __ZNSt3__219__tree_right_rotateIPNS_16__tree_node_baseIPvEEEEvT_($__x) {
 $__x = $__x | 0;
 var $0 = 0, $1 = 0, $3 = 0, $__parent_ = 0, $__right_ = 0;
 $0 = HEAP32[$__x >> 2] | 0;
 $__right_ = $0 + 4 | 0;
 $1 = HEAP32[$__right_ >> 2] | 0;
 HEAP32[$__x >> 2] = $1;
 if ($1 | 0) HEAP32[$1 + 8 >> 2] = $__x;
 $__parent_ = $__x + 8 | 0;
 HEAP32[$0 + 8 >> 2] = HEAP32[$__parent_ >> 2];
 $3 = HEAP32[$__parent_ >> 2] | 0;
 HEAP32[((HEAP32[$3 >> 2] | 0) == ($__x | 0) ? $3 : $3 + 4 | 0) >> 2] = $0;
 HEAP32[$__right_ >> 2] = $__x;
 HEAP32[$__parent_ >> 2] = $0;
 return;
}

function __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE4sizeEv($this) {
 $this = $this | 0;
 var $1 = 0, $retval$0 = 0;
 switch (HEAP8[$this >> 0] | 0) {
 case 0:
  {
   $retval$0 = 0;
   break;
  }
 case 2:
  {
   $1 = HEAP32[$this + 8 >> 2] | 0;
   $retval$0 = (HEAP32[$1 + 4 >> 2] | 0) - (HEAP32[$1 >> 2] | 0) >> 4;
   break;
  }
 case 1:
  {
   $retval$0 = HEAP32[(HEAP32[$this + 8 >> 2] | 0) + 8 >> 2] | 0;
   break;
  }
 default:
  $retval$0 = 1;
 }
 return $retval$0 | 0;
}

function __ZNSt3__218__tree_left_rotateIPNS_16__tree_node_baseIPvEEEEvT_($__x) {
 $__x = $__x | 0;
 var $0 = 0, $1 = 0, $3 = 0, $__parent_ = 0, $__right_ = 0;
 $__right_ = $__x + 4 | 0;
 $0 = HEAP32[$__right_ >> 2] | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 HEAP32[$__right_ >> 2] = $1;
 if ($1 | 0) HEAP32[$1 + 8 >> 2] = $__x;
 $__parent_ = $__x + 8 | 0;
 HEAP32[$0 + 8 >> 2] = HEAP32[$__parent_ >> 2];
 $3 = HEAP32[$__parent_ >> 2] | 0;
 HEAP32[((HEAP32[$3 >> 2] | 0) == ($__x | 0) ? $3 : $3 + 4 | 0) >> 2] = $0;
 HEAP32[$0 >> 2] = $__x;
 HEAP32[$__parent_ >> 2] = $0;
 return;
}

function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($this, $__str) {
 $this = $this | 0;
 $__str = $__str | 0;
 HEAP32[$this >> 2] = 0;
 HEAP32[$this + 4 >> 2] = 0;
 HEAP32[$this + 8 >> 2] = 0;
 if ((HEAP8[$__str + 11 >> 0] | 0) < 0) __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcm($this, HEAP32[$__str >> 2] | 0, HEAP32[$__str + 4 >> 2] | 0); else {
  HEAP32[$this >> 2] = HEAP32[$__str >> 2];
  HEAP32[$this + 4 >> 2] = HEAP32[$__str + 4 >> 2];
  HEAP32[$this + 8 >> 2] = HEAP32[$__str + 8 >> 2];
 }
 return;
}

function __ZNKSt3__25ctypeIwE10do_toupperEPwPKw($this, $low, $high) {
 $this = $this | 0;
 $low = $low | 0;
 $high = $high | 0;
 var $0 = 0, $call = 0, $cond = 0, $low$addr$0 = 0;
 $low$addr$0 = $low;
 while (1) {
  if (($low$addr$0 | 0) == ($high | 0)) break;
  $0 = HEAP32[$low$addr$0 >> 2] | 0;
  if ($0 >>> 0 < 128) {
   $call = __ZNSt3__25ctypeIcE21__classic_upper_tableEv() | 0;
   $cond = HEAP32[$call + (HEAP32[$low$addr$0 >> 2] << 2) >> 2] | 0;
  } else $cond = $0;
  HEAP32[$low$addr$0 >> 2] = $cond;
  $low$addr$0 = $low$addr$0 + 4 | 0;
 }
 return $high | 0;
}

function __ZNKSt3__25ctypeIwE10do_tolowerEPwPKw($this, $low, $high) {
 $this = $this | 0;
 $low = $low | 0;
 $high = $high | 0;
 var $0 = 0, $call = 0, $cond = 0, $low$addr$0 = 0;
 $low$addr$0 = $low;
 while (1) {
  if (($low$addr$0 | 0) == ($high | 0)) break;
  $0 = HEAP32[$low$addr$0 >> 2] | 0;
  if ($0 >>> 0 < 128) {
   $call = __ZNSt3__25ctypeIcE21__classic_lower_tableEv() | 0;
   $cond = HEAP32[$call + (HEAP32[$low$addr$0 >> 2] << 2) >> 2] | 0;
  } else $cond = $0;
  HEAP32[$low$addr$0 >> 2] = $cond;
  $low$addr$0 = $low$addr$0 + 4 | 0;
 }
 return $high | 0;
}

function __ZNK8nlohmann6detail10to_json_fnclINS_10basic_jsonINSt3__23mapENS4_6vectorENS4_12basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEbxydSA_NS_14adl_serializerEEERyEEDTcmcl7to_jsonfp_clsr3stdE7forwardIT0_Efp0_EEcvv_EERT_OSG_($this, $j, $val) {
 $this = $this | 0;
 $j = $j | 0;
 $val = $val | 0;
 var $0 = 0;
 $0 = $val;
 __ZN8nlohmann6detail7to_jsonINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEyLi0EEEvRT_T0_($j, HEAP32[$0 >> 2] | 0, HEAP32[$0 + 4 >> 2] | 0);
 return;
}

function __ZNK8nlohmann6detail10to_json_fnclINS_10basic_jsonINSt3__23mapENS4_6vectorENS4_12basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEbxydSA_NS_14adl_serializerEEERxEEDTcmcl7to_jsonfp_clsr3stdE7forwardIT0_Efp0_EEcvv_EERT_OSG_($this, $j, $val) {
 $this = $this | 0;
 $j = $j | 0;
 $val = $val | 0;
 var $0 = 0;
 $0 = $val;
 __ZN8nlohmann6detail7to_jsonINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEExLi0EEEvRT_T0_($j, HEAP32[$0 >> 2] | 0, HEAP32[$0 + 4 >> 2] | 0);
 return;
}

function _stbir__get_filter_pixel_margin($filter, $scale) {
 $filter = $filter | 0;
 $scale = Math_fround($scale);
 var $div = 0, $filter$addr = 0, $scale$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $filter$addr = sp + 4 | 0;
 $scale$addr = sp;
 HEAP32[$filter$addr >> 2] = $filter;
 HEAPF32[$scale$addr >> 2] = $scale;
 $div = (_stbir__get_filter_pixel_width(HEAP32[$filter$addr >> 2] | 0, Math_fround(HEAPF32[$scale$addr >> 2])) | 0) / 2 | 0;
 STACKTOP = sp;
 return $div | 0;
}

function __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE5uflowEv($this) {
 $this = $this | 0;
 var $1 = 0, $__ninp_ = 0, $call = 0, $retval$0 = 0;
 $call = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$this >> 2] | 0) + 36 >> 2] & 127]($this) | 0;
 if (($call | 0) == (__ZNSt3__211char_traitsIwE3eofEv() | 0)) $retval$0 = __ZNSt3__211char_traitsIwE3eofEv() | 0; else {
  $__ninp_ = $this + 12 | 0;
  $1 = HEAP32[$__ninp_ >> 2] | 0;
  HEAP32[$__ninp_ >> 2] = $1 + 4;
  $retval$0 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$1 >> 2] | 0) | 0;
 }
 return $retval$0 | 0;
}

function _calloc($n_elements, $elem_size) {
 $n_elements = $n_elements | 0;
 $elem_size = $elem_size | 0;
 var $call = 0, $mul = 0, $req$0 = 0;
 if (!$n_elements) $req$0 = 0; else {
  $mul = Math_imul($elem_size, $n_elements) | 0;
  if (($elem_size | $n_elements) >>> 0 > 65535) $req$0 = (($mul >>> 0) / ($n_elements >>> 0) | 0 | 0) == ($elem_size | 0) ? $mul : -1; else $req$0 = $mul;
 }
 $call = _malloc($req$0) | 0;
 if (!$call) return $call | 0;
 if (!(HEAP32[$call + -4 >> 2] & 3)) return $call | 0;
 _memset($call | 0, 0, $req$0 | 0) | 0;
 return $call | 0;
}

function __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE5uflowEv($this) {
 $this = $this | 0;
 var $1 = 0, $__ninp_ = 0, $call = 0, $retval$0 = 0;
 $call = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$this >> 2] | 0) + 36 >> 2] & 127]($this) | 0;
 if (($call | 0) == (__ZNSt3__211char_traitsIcE3eofEv() | 0)) $retval$0 = __ZNSt3__211char_traitsIcE3eofEv() | 0; else {
  $__ninp_ = $this + 12 | 0;
  $1 = HEAP32[$__ninp_ >> 2] | 0;
  HEAP32[$__ninp_ >> 2] = $1 + 1;
  $retval$0 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$1 >> 0] | 0) | 0;
 }
 return $retval$0 | 0;
}

function _SetTargetFPS($fps) {
 $fps = $fps | 0;
 var $fps$addr = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $vararg_buffer = sp;
 $fps$addr = sp + 8 | 0;
 HEAP32[$fps$addr >> 2] = $fps;
 if ((HEAP32[$fps$addr >> 2] | 0) < 1) HEAPF64[7309] = 0.0; else HEAPF64[7309] = 1.0 / +(HEAP32[$fps$addr >> 2] | 0);
 HEAPF64[$vararg_buffer >> 3] = +Math_fround(Math_fround(+HEAPF64[7309]) * Math_fround(1.0e3));
 _TraceLog(3, 32663, $vararg_buffer);
 STACKTOP = sp;
 return;
}

function _stbir__get_total_horizontal_coefficients($info) {
 $info = $info | 0;
 var $1 = 0, $info$addr = 0, $mul = 0, sp = 0, CSE$0 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $info$addr = sp;
 HEAP32[$info$addr >> 2] = $info;
 $1 = HEAP32[(HEAP32[$info$addr >> 2] | 0) + 152 >> 2] | 0;
 CSE$0 = HEAP32[$info$addr >> 2] | 0;
 $mul = Math_imul($1, _stbir__get_coefficient_width(HEAP32[CSE$0 + 80 >> 2] | 0, Math_fround(HEAPF32[CSE$0 + 56 >> 2])) | 0) | 0;
 STACKTOP = sp;
 return $mul | 0;
}

function _stbir__get_total_vertical_coefficients($info) {
 $info = $info | 0;
 var $1 = 0, $info$addr = 0, $mul = 0, sp = 0, CSE$0 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $info$addr = sp;
 HEAP32[$info$addr >> 2] = $info;
 $1 = HEAP32[(HEAP32[$info$addr >> 2] | 0) + 156 >> 2] | 0;
 CSE$0 = HEAP32[$info$addr >> 2] | 0;
 $mul = Math_imul($1, _stbir__get_coefficient_width(HEAP32[CSE$0 + 84 >> 2] | 0, Math_fround(HEAPF32[CSE$0 + 60 >> 2])) | 0) | 0;
 STACKTOP = sp;
 return $mul | 0;
}

function _stbi__get_chunk_header($agg$result, $s) {
 $agg$result = $agg$result | 0;
 $s = $s | 0;
 var $c = 0, $s$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $s$addr = sp + 8 | 0;
 $c = sp;
 HEAP32[$s$addr >> 2] = $s;
 HEAP32[$c >> 2] = _stbi__get32be(HEAP32[$s$addr >> 2] | 0) | 0;
 HEAP32[$c + 4 >> 2] = _stbi__get32be(HEAP32[$s$addr >> 2] | 0) | 0;
 HEAP32[$agg$result >> 2] = HEAP32[$c >> 2];
 HEAP32[$agg$result + 4 >> 2] = HEAP32[$c + 4 >> 2];
 STACKTOP = sp;
 return;
}

function __ZNSt3__28numpunctIwEC2Em($this, $refs) {
 $this = $this | 0;
 $refs = $refs | 0;
 var $__grouping_ = 0, $__i$0$i$i = 0;
 HEAP32[$this + 4 >> 2] = $refs + -1;
 HEAP32[$this >> 2] = 21484;
 HEAP32[$this + 8 >> 2] = 46;
 HEAP32[$this + 12 >> 2] = 44;
 $__grouping_ = $this + 16 | 0;
 HEAP32[$__grouping_ >> 2] = 0;
 HEAP32[$__grouping_ + 4 >> 2] = 0;
 HEAP32[$__grouping_ + 8 >> 2] = 0;
 $__i$0$i$i = 0;
 while (1) {
  if (($__i$0$i$i | 0) == 3) break;
  HEAP32[$__grouping_ + ($__i$0$i$i << 2) >> 2] = 0;
  $__i$0$i$i = $__i$0$i$i + 1 | 0;
 }
 return;
}

function __ZNSt3__212_GLOBAL__N_124handle_strerror_r_returnEiPc($strerror_return, $buffer) {
 $strerror_return = $strerror_return | 0;
 $buffer = $buffer | 0;
 var $cond = 0, $retval$0 = 0, label = 0;
 label = 0;
 switch ($strerror_return | 0) {
 case 0:
  {
   $retval$0 = $buffer;
   break;
  }
 case -1:
  {
   $cond = HEAP32[(___errno_location() | 0) >> 2] | 0;
   label = 3;
   break;
  }
 default:
  {
   $cond = $strerror_return;
   label = 3;
  }
 }
 if ((label | 0) == 3) if (($cond | 0) == 28) $retval$0 = 62173; else _abort();
 return $retval$0 | 0;
}

function __ZNSt3__219__libcpp_asprintf_lEPPcP15__locale_structPKcz($__s, $__l, $__format, $varargs) {
 $__s = $__s | 0;
 $__l = $__l | 0;
 $__format = $__format | 0;
 $varargs = $varargs | 0;
 var $__va = 0, $call = 0, $call$i = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $__va = sp;
 HEAP32[$__va >> 2] = $varargs;
 $call$i = ___uselocale($__l) | 0;
 $call = _vasprintf($__s, $__format, $__va) | 0;
 if ($call$i | 0) ___uselocale($call$i) | 0;
 STACKTOP = sp;
 return $call | 0;
}

function __ZNSt3__28numpunctIcEC2Em($this, $refs) {
 $this = $this | 0;
 $refs = $refs | 0;
 var $__grouping_ = 0, $__i$0$i$i = 0;
 HEAP32[$this + 4 >> 2] = $refs + -1;
 HEAP32[$this >> 2] = 21444;
 HEAP8[$this + 8 >> 0] = 46;
 HEAP8[$this + 9 >> 0] = 44;
 $__grouping_ = $this + 12 | 0;
 HEAP32[$__grouping_ >> 2] = 0;
 HEAP32[$__grouping_ + 4 >> 2] = 0;
 HEAP32[$__grouping_ + 8 >> 2] = 0;
 $__i$0$i$i = 0;
 while (1) {
  if (($__i$0$i$i | 0) == 3) break;
  HEAP32[$__grouping_ + ($__i$0$i$i << 2) >> 2] = 0;
  $__i$0$i$i = $__i$0$i$i + 1 | 0;
 }
 return;
}

function __ZN8nlohmann6detail19json_sax_dom_parserINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE3keyERSB_($this, $val) {
 $this = $this | 0;
 $val = $val | 0;
 HEAP32[$this + 16 >> 2] = __ZNSt3__23mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8nlohmann10basic_jsonIS0_NS_6vectorES6_bxydS4_NS7_14adl_serializerEEENS_4lessIvEENS4_INS_4pairIKS6_SB_EEEEEixERSF_(HEAP32[(HEAP32[(HEAP32[$this + 8 >> 2] | 0) + -4 >> 2] | 0) + 8 >> 2] | 0, $val) | 0;
 return 1;
}

function ___cxa_can_catch($catchType, $excpType, $thrown) {
 $catchType = $catchType | 0;
 $excpType = $excpType | 0;
 $thrown = $thrown | 0;
 var $call = 0, $temp = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $temp = sp;
 HEAP32[$temp >> 2] = HEAP32[$thrown >> 2];
 $call = FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$catchType >> 2] | 0) + 16 >> 2] & 63]($catchType, $excpType, $temp) | 0;
 if ($call) HEAP32[$thrown >> 2] = HEAP32[$temp >> 2];
 STACKTOP = sp;
 return $call & 1 | 0;
}

function __ZNSt3__217__libcpp_sscanf_lEPKcP15__locale_structS1_z($__s, $__l, $__format, $varargs) {
 $__s = $__s | 0;
 $__l = $__l | 0;
 $__format = $__format | 0;
 $varargs = $varargs | 0;
 var $__va = 0, $call = 0, $call$i = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $__va = sp;
 HEAP32[$__va >> 2] = $varargs;
 $call$i = ___uselocale($__l) | 0;
 $call = _vsscanf($__s, $__format, $__va) | 0;
 if ($call$i | 0) ___uselocale($call$i) | 0;
 STACKTOP = sp;
 return $call | 0;
}

function __ZNSt3__210__function16__policy_invokerIFbiN8nlohmann6detail6parserINS2_10basic_jsonINS_3mapENS_6vectorENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEbxydSB_NS2_14adl_serializerEEEE13parse_event_tERSF_EE12__call_emptyEPKNS0_16__policy_storageEiSH_SI_($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $exception$i = 0;
 $exception$i = ___cxa_allocate_exception(4) | 0;
 HEAP32[$exception$i >> 2] = 0;
 __ZNSt3__217bad_function_callC2Ev($exception$i);
 ___cxa_throw($exception$i | 0, 16e3, 43);
 return 0;
}

function __ZN8nlohmann14adl_serializerINSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEvE7to_jsonINS_10basic_jsonINS1_3mapENS1_6vectorES7_bxydS5_S0_EERS7_EEDTcmclL_ZNS_12_GLOBAL__N_17to_jsonEEfp_clsr3stdE7forwardIT0_Efp0_EEcvv_EERT_OSG_($j, $val) {
 $j = $j | 0;
 $val = $val | 0;
 __ZNK8nlohmann6detail10to_json_fnclINS_10basic_jsonINSt3__23mapENS4_6vectorENS4_12basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEbxydSA_NS_14adl_serializerEEERSC_EEDTcmcl7to_jsonfp_clsr3stdE7forwardIT0_Efp0_EEcvv_EERT_OSG_(62142, $j, $val);
 return;
}

function __ZZN4tson3Map11processDataEvENKUlRNS_4TileEE_clES2_($this, $tile) {
 $this = $this | 0;
 $tile = $tile | 0;
 var $m_tileMap = 0, $ref$tmp = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $ref$tmp = sp;
 $m_tileMap = (HEAP32[$this >> 2] | 0) + 176 | 0;
 HEAP32[$ref$tmp >> 2] = __ZNK4tson4Tile5getIdEv($tile) | 0;
 HEAP32[(__ZNSt3__23mapIiPN4tson4TileENS_4lessIiEENS_9allocatorINS_4pairIKiS3_EEEEEixEOi($m_tileMap, $ref$tmp) | 0) >> 2] = $tile;
 STACKTOP = sp;
 return;
}

function _stbi__compute_y_16($r, $g, $b) {
 $r = $r | 0;
 $g = $g | 0;
 $b = $b | 0;
 var $b$addr = 0, $g$addr = 0, $r$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $r$addr = sp + 8 | 0;
 $g$addr = sp + 4 | 0;
 $b$addr = sp;
 HEAP32[$r$addr >> 2] = $r;
 HEAP32[$g$addr >> 2] = $g;
 HEAP32[$b$addr >> 2] = $b;
 STACKTOP = sp;
 return ((HEAP32[$r$addr >> 2] | 0) * 77 | 0) + ((HEAP32[$g$addr >> 2] | 0) * 150 | 0) + ((HEAP32[$b$addr >> 2] | 0) * 29 | 0) >> 8 & 65535 | 0;
}

function __ZN8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEC2EDn($this, $0) {
 $this = $this | 0;
 $0 = $0 | 0;
 __ZN8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEC2ENS_6detail7value_tE($this, 0);
 __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE16assert_invariantEv($this);
 return;
}

function __ZNSt3__26vectorIiNS_9allocatorIiEEE13__vdeallocateEv($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $__end_$i$i$i = 0, $__value_$i$i$i$i$i = 0;
 $0 = HEAP32[$this >> 2] | 0;
 $1 = $0;
 if ($0 | 0) {
  $__end_$i$i$i = $this + 4 | 0;
  HEAP32[$__end_$i$i$i >> 2] = $1;
  $__value_$i$i$i$i$i = $this + 8 | 0;
  __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm($0, (HEAP32[$__value_$i$i$i$i$i >> 2] | 0) - $1 | 0);
  HEAP32[$__value_$i$i$i$i$i >> 2] = 0;
  HEAP32[$__end_$i$i$i >> 2] = 0;
  HEAP32[$this >> 2] = 0;
 }
 return;
}

function __ZN8nlohmann14adl_serializerIyvE7to_jsonINS_10basic_jsonINSt3__23mapENS4_6vectorENS4_12basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEbxydSA_S0_EERyEEDTcmclL_ZNS_12_GLOBAL__N_17to_jsonEEfp_clsr3stdE7forwardIT0_Efp0_EEcvv_EERT_OSG_($j, $val) {
 $j = $j | 0;
 $val = $val | 0;
 __ZNK8nlohmann6detail10to_json_fnclINS_10basic_jsonINSt3__23mapENS4_6vectorENS4_12basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEbxydSA_NS_14adl_serializerEEERyEEDTcmcl7to_jsonfp_clsr3stdE7forwardIT0_Efp0_EEcvv_EERT_OSG_(62142, $j, $val);
 return;
}

function __ZN8nlohmann14adl_serializerIxvE7to_jsonINS_10basic_jsonINSt3__23mapENS4_6vectorENS4_12basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEbxydSA_S0_EERxEEDTcmclL_ZNS_12_GLOBAL__N_17to_jsonEEfp_clsr3stdE7forwardIT0_Efp0_EEcvv_EERT_OSG_($j, $val) {
 $j = $j | 0;
 $val = $val | 0;
 __ZNK8nlohmann6detail10to_json_fnclINS_10basic_jsonINSt3__23mapENS4_6vectorENS4_12basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEbxydSA_NS_14adl_serializerEEERxEEDTcmcl7to_jsonfp_clsr3stdE7forwardIT0_Efp0_EEcvv_EERT_OSG_(62142, $j, $val);
 return;
}

function __ZN8nlohmann14adl_serializerIdvE7to_jsonINS_10basic_jsonINSt3__23mapENS4_6vectorENS4_12basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEbxydSA_S0_EERdEEDTcmclL_ZNS_12_GLOBAL__N_17to_jsonEEfp_clsr3stdE7forwardIT0_Efp0_EEcvv_EERT_OSG_($j, $val) {
 $j = $j | 0;
 $val = $val | 0;
 __ZNK8nlohmann6detail10to_json_fnclINS_10basic_jsonINSt3__23mapENS4_6vectorENS4_12basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEbxydSA_NS_14adl_serializerEEERdEEDTcmcl7to_jsonfp_clsr3stdE7forwardIT0_Efp0_EEcvv_EERT_OSG_(62142, $j, $val);
 return;
}

function __ZN8nlohmann14adl_serializerIbvE7to_jsonINS_10basic_jsonINSt3__23mapENS4_6vectorENS4_12basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEbxydSA_S0_EERbEEDTcmclL_ZNS_12_GLOBAL__N_17to_jsonEEfp_clsr3stdE7forwardIT0_Efp0_EEcvv_EERT_OSG_($j, $val) {
 $j = $j | 0;
 $val = $val | 0;
 __ZNK8nlohmann6detail10to_json_fnclINS_10basic_jsonINSt3__23mapENS4_6vectorENS4_12basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEbxydSA_NS_14adl_serializerEEERbEEDTcmcl7to_jsonfp_clsr3stdE7forwardIT0_Efp0_EEcvv_EERT_OSG_(62142, $j, $val);
 return;
}

function _stbi__compute_y($r, $g, $b) {
 $r = $r | 0;
 $g = $g | 0;
 $b = $b | 0;
 var $b$addr = 0, $g$addr = 0, $r$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $r$addr = sp + 8 | 0;
 $g$addr = sp + 4 | 0;
 $b$addr = sp;
 HEAP32[$r$addr >> 2] = $r;
 HEAP32[$g$addr >> 2] = $g;
 HEAP32[$b$addr >> 2] = $b;
 STACKTOP = sp;
 return ((HEAP32[$r$addr >> 2] | 0) * 77 | 0) + ((HEAP32[$g$addr >> 2] | 0) * 150 | 0) + ((HEAP32[$b$addr >> 2] | 0) * 29 | 0) >> 8 & 255 | 0;
}

function __ZNSt3__26__treeINS_12__value_typeIiPN4tson4TileEEENS_19__map_value_compareIiS5_NS_4lessIiEELb1EEENS_9allocatorIS5_EEE5clearEv($this) {
 $this = $this | 0;
 var $__value_$i$i$i$i = 0;
 $__value_$i$i$i$i = $this + 4 | 0;
 __ZNSt3__26__treeINS_12__value_typeIiPN4tson4TileEEENS_19__map_value_compareIiS5_NS_4lessIiEELb1EEENS_9allocatorIS5_EEE7destroyEPNS_11__tree_nodeIS5_PvEE($this, HEAP32[$__value_$i$i$i$i >> 2] | 0);
 HEAP32[$this + 8 >> 2] = 0;
 HEAP32[$this >> 2] = $__value_$i$i$i$i;
 HEAP32[$__value_$i$i$i$i >> 2] = 0;
 return;
}

function __ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi($this, $info, $current_ptr, $path_below) {
 $this = $this | 0;
 $info = $info | 0;
 $current_ptr = $current_ptr | 0;
 $path_below = $path_below | 0;
 var $path_dynamic_ptr_to_static_ptr = 0;
 if ((HEAP32[$info + 4 >> 2] | 0) == ($current_ptr | 0)) {
  $path_dynamic_ptr_to_static_ptr = $info + 28 | 0;
  if ((HEAP32[$path_dynamic_ptr_to_static_ptr >> 2] | 0) != 1) HEAP32[$path_dynamic_ptr_to_static_ptr >> 2] = $path_below;
 }
 return;
}

function ___muldi3($a$0, $a$1, $b$0, $b$1) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 var $x_sroa_0_0_extract_trunc = 0, $y_sroa_0_0_extract_trunc = 0, $1$0 = 0, $1$1 = 0;
 $x_sroa_0_0_extract_trunc = $a$0;
 $y_sroa_0_0_extract_trunc = $b$0;
 $1$0 = ___muldsi3($x_sroa_0_0_extract_trunc, $y_sroa_0_0_extract_trunc) | 0;
 $1$1 = getTempRet0() | 0;
 return (setTempRet0((Math_imul($a$1, $y_sroa_0_0_extract_trunc) | 0) + (Math_imul($b$1, $x_sroa_0_0_extract_trunc) | 0) + $1$1 | $1$1 & 0 | 0), $1$0 | 0 | 0) | 0;
}

function ___towrite($f) {
 $f = $f | 0;
 var $1 = 0, $2 = 0, $conv = 0, $mode = 0, $retval$0 = 0;
 $mode = $f + 74 | 0;
 $conv = HEAP8[$mode >> 0] | 0;
 HEAP8[$mode >> 0] = $conv + 255 | $conv;
 $1 = HEAP32[$f >> 2] | 0;
 if (!($1 & 8)) {
  HEAP32[$f + 8 >> 2] = 0;
  HEAP32[$f + 4 >> 2] = 0;
  $2 = HEAP32[$f + 44 >> 2] | 0;
  HEAP32[$f + 28 >> 2] = $2;
  HEAP32[$f + 20 >> 2] = $2;
  HEAP32[$f + 16 >> 2] = $2 + (HEAP32[$f + 48 >> 2] | 0);
  $retval$0 = 0;
 } else {
  HEAP32[$f >> 2] = $1 | 32;
  $retval$0 = -1;
 }
 return $retval$0 | 0;
}

function __ZN8nlohmann14adl_serializerINSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEvE9from_jsonIRKNS_10basic_jsonINS1_3mapENS1_6vectorES7_bxydS5_S0_EES7_EEDTcmclL_ZNS_12_GLOBAL__N_19from_jsonEEclsr3stdE7forwardIT_Efp_Efp0_Ecvv_EEOSH_RT0_($j, $val) {
 $j = $j | 0;
 $val = $val | 0;
 __ZNK8nlohmann6detail12from_json_fnclINS_10basic_jsonINSt3__23mapENS4_6vectorENS4_12basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEbxydSA_NS_14adl_serializerEEESC_EEDTcmcl9from_jsonfp_fp0_Ecvv_EERKT_RT0_(62141, $j, $val);
 return;
}

function __ZNKSt3__25ctypeIcE9do_narrowEPKcS3_cPc($this, $low, $high, $dfault, $dest) {
 $this = $this | 0;
 $low = $low | 0;
 $high = $high | 0;
 $dfault = $dfault | 0;
 $dest = $dest | 0;
 var $0 = 0, $dest$addr$0 = 0, $low$addr$0 = 0;
 $dest$addr$0 = $dest;
 $low$addr$0 = $low;
 while (1) {
  if (($low$addr$0 | 0) == ($high | 0)) break;
  $0 = HEAP8[$low$addr$0 >> 0] | 0;
  HEAP8[$dest$addr$0 >> 0] = $0 << 24 >> 24 > -1 ? $0 : $dfault;
  $dest$addr$0 = $dest$addr$0 + 1 | 0;
  $low$addr$0 = $low$addr$0 + 1 | 0;
 }
 return $high | 0;
}

function _stbir__get_decode_buffer($stbir_info) {
 $stbir_info = $stbir_info | 0;
 var $arrayidx = 0, $stbir_info$addr = 0, sp = 0, CSE$0 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $stbir_info$addr = sp;
 HEAP32[$stbir_info$addr >> 2] = $stbir_info;
 CSE$0 = HEAP32[$stbir_info$addr >> 2] | 0;
 $arrayidx = (HEAP32[CSE$0 + 120 >> 2] | 0) + ((Math_imul(HEAP32[CSE$0 + 144 >> 2] | 0, HEAP32[CSE$0 + 64 >> 2] | 0) | 0) << 2) | 0;
 STACKTOP = sp;
 return $arrayidx | 0;
}

function __ZN4tson4GridC2ERKN8nlohmann10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS1_14adl_serializerEEE($this, $json) {
 $this = $this | 0;
 $json = $json | 0;
 HEAP32[$this >> 2] = 0;
 HEAP32[$this + 4 >> 2] = 0;
 HEAP32[$this + 8 >> 2] = 0;
 __ZN4tson7Vector2IiEC2Ev($this + 12 | 0);
 __ZN4tson4Grid5parseERKN8nlohmann10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS1_14adl_serializerEEE($this, $json) | 0;
 return;
}

function _stbiw__fopen($filename, $mode) {
 $filename = $filename | 0;
 $mode = $mode | 0;
 var $f = 0, $filename$addr = 0, $mode$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $filename$addr = sp + 8 | 0;
 $mode$addr = sp + 4 | 0;
 $f = sp;
 HEAP32[$filename$addr >> 2] = $filename;
 HEAP32[$mode$addr >> 2] = $mode;
 HEAP32[$f >> 2] = _fopen(HEAP32[$filename$addr >> 2] | 0, HEAP32[$mode$addr >> 2] | 0) | 0;
 STACKTOP = sp;
 return HEAP32[$f >> 2] | 0;
}

function __ZN8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE10json_valueC2ERKNS2_IS9_SB_NS1_4lessIvEENS7_INS1_4pairIKS9_SB_EEEEEE($this, $value) {
 $this = $this | 0;
 $value = $value | 0;
 HEAP32[$this >> 2] = __ZN8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE6createINS2_IS9_SB_NS1_4lessIvEENS7_INS1_4pairIKS9_SB_EEEEEEJRKSJ_EEEPT_DpOT0_($value) | 0;
 return;
}

function __ZN8nlohmann14adl_serializerIivE9from_jsonIRKNS_10basic_jsonINSt3__23mapENS4_6vectorENS4_12basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEbxydSA_S0_EEiEEDTcmclL_ZNS_12_GLOBAL__N_19from_jsonEEclsr3stdE7forwardIT_Efp_Efp0_Ecvv_EEOSH_RT0_($j, $val) {
 $j = $j | 0;
 $val = $val | 0;
 __ZNK8nlohmann6detail12from_json_fnclINS_10basic_jsonINSt3__23mapENS4_6vectorENS4_12basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEbxydSA_NS_14adl_serializerEEEiEEDTcmcl9from_jsonfp_fp0_Ecvv_EERKT_RT0_(62141, $j, $val);
 return;
}

function __ZN8nlohmann14adl_serializerIfvE9from_jsonIRKNS_10basic_jsonINSt3__23mapENS4_6vectorENS4_12basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEbxydSA_S0_EEfEEDTcmclL_ZNS_12_GLOBAL__N_19from_jsonEEclsr3stdE7forwardIT_Efp_Efp0_Ecvv_EEOSH_RT0_($j, $val) {
 $j = $j | 0;
 $val = $val | 0;
 __ZNK8nlohmann6detail12from_json_fnclINS_10basic_jsonINSt3__23mapENS4_6vectorENS4_12basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEbxydSA_NS_14adl_serializerEEEfEEDTcmcl9from_jsonfp_fp0_Ecvv_EERKT_RT0_(62141, $j, $val);
 return;
}

function __ZN8nlohmann14adl_serializerIbvE9from_jsonIRKNS_10basic_jsonINSt3__23mapENS4_6vectorENS4_12basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEbxydSA_S0_EEbEEDTcmclL_ZNS_12_GLOBAL__N_19from_jsonEEclsr3stdE7forwardIT_Efp_Efp0_Ecvv_EEOSH_RT0_($j, $val) {
 $j = $j | 0;
 $val = $val | 0;
 __ZNK8nlohmann6detail12from_json_fnclINS_10basic_jsonINSt3__23mapENS4_6vectorENS4_12basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEbxydSA_NS_14adl_serializerEEEbEEDTcmcl9from_jsonfp_fp0_Ecvv_EERKT_RT0_(62141, $j, $val);
 return;
}

function __ZNSt3__28ios_base4initEPv($this, $sb) {
 $this = $this | 0;
 $sb = $sb | 0;
 var $__loc_ = 0, dest = 0, stop = 0;
 HEAP32[$this + 24 >> 2] = $sb;
 HEAP32[$this + 16 >> 2] = ($sb | 0) == 0 & 1;
 HEAP32[$this + 20 >> 2] = 0;
 HEAP32[$this + 4 >> 2] = 4098;
 HEAP32[$this + 12 >> 2] = 0;
 HEAP32[$this + 8 >> 2] = 6;
 $__loc_ = $this + 28 | 0;
 dest = $this + 32 | 0;
 stop = dest + 40 | 0;
 do {
  HEAP32[dest >> 2] = 0;
  dest = dest + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 __ZNSt3__26localeC2Ev($__loc_);
 return;
}

function _UpdateGestures() {
 var $call3 = 0.0;
 if (((HEAP32[14935] | 0) == 1 | (HEAP32[14935] | 0) == 2) & (HEAP32[14936] | 0) < 2) {
  HEAP32[14935] = 4;
  +_GetCurrentTime();
 }
 $call3 = +_GetCurrentTime();
 if ($call3 - +HEAPF64[7302] > 300.0 & (HEAP32[14935] | 0) == 8 & (HEAP32[14936] | 0) < 2) {
  HEAP32[14935] = 4;
  +_GetCurrentTime();
  HEAP8[62156] = 1;
 }
 if (!((HEAP32[14935] | 0) == 16 | (HEAP32[14935] | 0) == 64 | (HEAP32[14935] | 0) == 32 | (HEAP32[14935] | 0) == 128)) return;
 HEAP32[14935] = 0;
 return;
}

function _strerror_r($err, $buf, $buflen) {
 $err = $err | 0;
 $buf = $buf | 0;
 $buflen = $buflen | 0;
 var $call = 0, $call1 = 0, $retval$0 = 0, $sub = 0;
 $call = _strerror($err) | 0;
 $call1 = _strlen($call) | 0;
 if ($call1 >>> 0 < $buflen >>> 0) {
  _memcpy($buf | 0, $call | 0, $call1 + 1 | 0) | 0;
  $retval$0 = 0;
 } else {
  $sub = $buflen + -1 | 0;
  if (!$buflen) $retval$0 = 68; else {
   _memcpy($buf | 0, $call | 0, $sub | 0) | 0;
   HEAP8[$buf + $sub >> 0] = 0;
   $retval$0 = 68;
  }
 }
 return $retval$0 | 0;
}

function _rlCheckBufferLimit($vCount) {
 $vCount = $vCount | 0;
 var $overflow = 0, $vCount$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $vCount$addr = sp;
 $overflow = sp + 4 | 0;
 HEAP32[$vCount$addr >> 2] = $vCount;
 HEAP8[$overflow >> 0] = 0;
 HEAP8[$overflow >> 0] = ((HEAP32[47408 + ((HEAP32[14847] | 0) * 48 | 0) >> 2] | 0) + (HEAP32[$vCount$addr >> 2] | 0) | 0) >= 8192 ? 1 : 0;
 STACKTOP = sp;
 return HEAP8[$overflow >> 0] & 1 | 0;
}

function __ZNK8nlohmann6detail10to_json_fnclINS_10basic_jsonINSt3__23mapENS4_6vectorENS4_12basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEbxydSA_NS_14adl_serializerEEERbEEDTcmcl7to_jsonfp_clsr3stdE7forwardIT0_Efp0_EEcvv_EERT_OSG_($this, $j, $val) {
 $this = $this | 0;
 $j = $j | 0;
 $val = $val | 0;
 __ZN8nlohmann6detail7to_jsonINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEbLi0EEEvRT_T0_($j, (HEAP8[$val >> 0] | 0) != 0);
 return;
}

function _ClearDroppedFiles() {
 var $3 = 0, $i = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $i = sp;
 if ((HEAP32[14984] | 0) <= 0) {
  STACKTOP = sp;
  return;
 }
 HEAP32[$i >> 2] = 0;
 while (1) {
  $3 = HEAP32[14983] | 0;
  if ((HEAP32[$i >> 2] | 0) >= (HEAP32[14984] | 0)) break;
  _free(HEAP32[$3 + (HEAP32[$i >> 2] << 2) >> 2] | 0);
  HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
 }
 _free($3);
 HEAP32[14984] = 0;
 STACKTOP = sp;
 return;
}

function __ZN4tson18PropertyCollectionC2EOS0_($this, $0) {
 $this = $this | 0;
 $0 = $0 | 0;
 HEAP32[$this >> 2] = HEAP32[$0 >> 2];
 HEAP32[$this + 4 >> 2] = HEAP32[$0 + 4 >> 2];
 HEAP32[$this + 8 >> 2] = HEAP32[$0 + 8 >> 2];
 HEAP32[$0 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 0;
 __ZNSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN4tson8PropertyEEENS_19__map_value_compareIS7_SA_NS_4lessIS7_EELb1EEENS5_ISA_EEEC2EOSG_($this + 12 | 0, $0 + 12 | 0);
 return;
}

function __ZNK8nlohmann6detail10to_json_fnclINS_10basic_jsonINSt3__23mapENS4_6vectorENS4_12basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEbxydSA_NS_14adl_serializerEEERdEEDTcmcl7to_jsonfp_clsr3stdE7forwardIT0_Efp0_EEcvv_EERT_OSG_($this, $j, $val) {
 $this = $this | 0;
 $j = $j | 0;
 $val = $val | 0;
 __ZN8nlohmann6detail7to_jsonINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEdLi0EEEvRT_T0_($j, +HEAPF64[$val >> 3]);
 return;
}

function __ZNSt3__214__split_bufferIN4tson7Vector2IiEERNS_9allocatorIS3_EEED2Ev($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $6 = 0, $__end_$i$i$i = 0;
 $0 = HEAP32[$this + 4 >> 2] | 0;
 $__end_$i$i$i = $this + 8 | 0;
 $1 = HEAP32[$__end_$i$i$i >> 2] | 0;
 if (($1 | 0) != ($0 | 0)) HEAP32[$__end_$i$i$i >> 2] = $1 + (~(($1 + -8 - $0 | 0) >>> 3) << 3);
 $6 = HEAP32[$this >> 2] | 0;
 if ($6 | 0) __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm($6, (HEAP32[$this + 12 >> 2] | 0) - $6 | 0);
 return;
}

function __ZN8nlohmann6detail9iter_implINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEEC2ERKSE_($this, $other) {
 $this = $this | 0;
 $other = $other | 0;
 var $m_it = 0, $m_it3 = 0;
 HEAP32[$this >> 2] = HEAP32[$other >> 2];
 $m_it = $this + 4 | 0;
 $m_it3 = $other + 4 | 0;
 HEAP32[$m_it >> 2] = HEAP32[$m_it3 >> 2];
 HEAP32[$m_it + 4 >> 2] = HEAP32[$m_it3 + 4 >> 2];
 HEAP32[$m_it + 8 >> 2] = HEAP32[$m_it3 + 8 >> 2];
 return;
}

function __ZNSt3__214__split_bufferIN4tson5FrameERNS_9allocatorIS2_EEED2Ev($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $6 = 0, $__end_$i$i$i = 0;
 $0 = HEAP32[$this + 4 >> 2] | 0;
 $__end_$i$i$i = $this + 8 | 0;
 $1 = HEAP32[$__end_$i$i$i >> 2] | 0;
 if (($1 | 0) != ($0 | 0)) HEAP32[$__end_$i$i$i >> 2] = $1 + (~(($1 + -8 - $0 | 0) >>> 3) << 3);
 $6 = HEAP32[$this >> 2] | 0;
 if ($6 | 0) __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm($6, (HEAP32[$this + 12 >> 2] | 0) - $6 | 0);
 return;
}

function __ZNSt3__26__treeINS_12__value_typeIiPN4tson4TileEEENS_19__map_value_compareIiS5_NS_4lessIiEELb1EEENS_9allocatorIS5_EEE8__detachEv($this) {
 $this = $this | 0;
 var $0 = 0, $3 = 0, $__value_$i$i$i7 = 0;
 $0 = HEAP32[$this >> 2] | 0;
 $__value_$i$i$i7 = $this + 4 | 0;
 HEAP32[$this >> 2] = $__value_$i$i$i7;
 HEAP32[(HEAP32[$__value_$i$i$i7 >> 2] | 0) + 8 >> 2] = 0;
 HEAP32[$__value_$i$i$i7 >> 2] = 0;
 HEAP32[$this + 8 >> 2] = 0;
 $3 = HEAP32[$0 + 4 >> 2] | 0;
 return (($3 | 0) == 0 ? $0 : $3) | 0;
}

function __ZNSt3__2lsIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS_13basic_ostreamIT_T0_EES9_RKNS_12basic_stringIS6_S7_T1_EE($__os, $__str) {
 $__os = $__os | 0;
 $__str = $__str | 0;
 var $0 = 0, $tobool$i$i$i = 0;
 $0 = HEAP8[$__str + 11 >> 0] | 0;
 $tobool$i$i$i = $0 << 24 >> 24 < 0;
 return __ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m($__os, $tobool$i$i$i ? HEAP32[$__str >> 2] | 0 : $__str, $tobool$i$i$i ? HEAP32[$__str + 4 >> 2] | 0 : $0 & 255) | 0;
}

function __ZNK8nlohmann6detail10to_json_fnclINS_10basic_jsonINSt3__23mapENS4_6vectorENS4_12basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEbxydSA_NS_14adl_serializerEEERSC_EEDTcmcl7to_jsonfp_clsr3stdE7forwardIT0_Efp0_EEcvv_EERT_OSG_($this, $j, $val) {
 $this = $this | 0;
 $j = $j | 0;
 $val = $val | 0;
 __ZN8nlohmann6detail7to_jsonINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEESB_Li0EEEvRT_RKT0_($j, $val);
 return;
}

function __ZN4tson18PropertyCollectionC2Ev($this) {
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 HEAP32[$this >> 2] = 0;
 HEAP32[$this + 4 >> 2] = 0;
 HEAP32[$this + 8 >> 2] = 0;
 __ZNSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN4tson8PropertyEEENS_19__map_value_compareIS7_SA_NS_4lessIS7_EELb1EEENS5_ISA_EEEC2ERKSE_($this + 12 | 0, sp);
 STACKTOP = sp;
 return;
}

function _getint($s) {
 $s = $s | 0;
 var $2 = 0, $add = 0, $i$0$lcssa = 0, $i$07 = 0, $incdec$ptr = 0;
 if (!(_isdigit(HEAP8[HEAP32[$s >> 2] >> 0] | 0) | 0)) $i$0$lcssa = 0; else {
  $i$07 = 0;
  while (1) {
   $2 = HEAP32[$s >> 2] | 0;
   $add = ($i$07 * 10 | 0) + -48 + (HEAP8[$2 >> 0] | 0) | 0;
   $incdec$ptr = $2 + 1 | 0;
   HEAP32[$s >> 2] = $incdec$ptr;
   if (!(_isdigit(HEAP8[$incdec$ptr >> 0] | 0) | 0)) {
    $i$0$lcssa = $add;
    break;
   } else $i$07 = $add;
  }
 }
 return $i$0$lcssa | 0;
}

function __ZNKSt3__224__generic_error_category7messageEi($agg$result, $this, $ev) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $ev = $ev | 0;
 if (($ev | 0) > 256) {
  HEAP32[$agg$result >> 2] = 0;
  HEAP32[$agg$result + 4 >> 2] = 0;
  HEAP32[$agg$result + 8 >> 2] = 0;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcm($agg$result, 45064, __ZNSt3__211char_traitsIcE6lengthEPKc(45064) | 0);
 } else __ZNKSt3__212__do_message7messageEi($agg$result, 0, $ev);
 return;
}

function __ZNSt3__212_GLOBAL__N_112throw_helperISt16invalid_argumentEEvRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE($msg) {
 $msg = $msg | 0;
 var $0 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $vararg_buffer = sp;
 $0 = HEAP32[4501] | 0;
 HEAP32[$vararg_buffer >> 2] = (HEAP8[$msg + 11 >> 0] | 0) < 0 ? HEAP32[$msg >> 2] | 0 : $msg;
 _fprintf($0, 45038, $vararg_buffer) | 0;
 _abort();
}

function __ZNKSt3__223__system_error_category7messageEi($agg$result, $this, $ev) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $ev = $ev | 0;
 if (($ev | 0) > 256) {
  HEAP32[$agg$result >> 2] = 0;
  HEAP32[$agg$result + 4 >> 2] = 0;
  HEAP32[$agg$result + 8 >> 2] = 0;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcm($agg$result, 45207, __ZNSt3__211char_traitsIcE6lengthEPKc(45207) | 0);
 } else __ZNKSt3__212__do_message7messageEi($agg$result, 0, $ev);
 return;
}

function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEaSERKS5_($this, $__str) {
 $this = $this | 0;
 $__str = $__str | 0;
 var $0 = 0, $tobool$i$i$i = 0;
 if (($this | 0) != ($__str | 0)) {
  $0 = HEAP8[$__str + 11 >> 0] | 0;
  $tobool$i$i$i = $0 << 24 >> 24 < 0;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcm($this, $tobool$i$i$i ? HEAP32[$__str >> 2] | 0 : $__str, $tobool$i$i$i ? HEAP32[$__str + 4 >> 2] | 0 : $0 & 255) | 0;
 }
 return $this | 0;
}

function _rlVertex2f($x, $y) {
 $x = Math_fround($x);
 $y = Math_fround($y);
 var $0 = f0, $1 = f0, $x$addr = 0, $y$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $x$addr = sp + 4 | 0;
 $y$addr = sp;
 HEAPF32[$x$addr >> 2] = $x;
 HEAPF32[$y$addr >> 2] = $y;
 $0 = Math_fround(HEAPF32[$x$addr >> 2]);
 $1 = Math_fround(HEAPF32[$y$addr >> 2]);
 _rlVertex3f($0, $1, Math_fround(HEAPF32[4479]));
 STACKTOP = sp;
 return;
}

function __ZNSt3__212_GLOBAL__N_112throw_helperISt12out_of_rangeEEvRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE($msg) {
 $msg = $msg | 0;
 var $0 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $vararg_buffer = sp;
 $0 = HEAP32[4501] | 0;
 HEAP32[$vararg_buffer >> 2] = (HEAP8[$msg + 11 >> 0] | 0) < 0 ? HEAP32[$msg >> 2] | 0 : $msg;
 _fprintf($0, 45038, $vararg_buffer) | 0;
 _abort();
}

function __ZNSt3__214__split_bufferIiRNS_9allocatorIiEEED2Ev($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $6 = 0, $__end_$i$i$i = 0;
 $0 = HEAP32[$this + 4 >> 2] | 0;
 $__end_$i$i$i = $this + 8 | 0;
 $1 = HEAP32[$__end_$i$i$i >> 2] | 0;
 if (($1 | 0) != ($0 | 0)) HEAP32[$__end_$i$i$i >> 2] = $1 + (~(($1 + -4 - $0 | 0) >>> 2) << 2);
 $6 = HEAP32[$this >> 2] | 0;
 if ($6 | 0) __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm($6, (HEAP32[$this + 12 >> 2] | 0) - $6 | 0);
 return;
}

function __ZNSt3__219__shared_weak_count14__release_weakEv($this) {
 $this = $this | 0;
 var $2 = 0, $__shared_weak_owners_ = 0;
 $__shared_weak_owners_ = $this + 8 | 0;
 if (!(HEAP32[$__shared_weak_owners_ >> 2] | 0)) FUNCTION_TABLE_vi[HEAP32[(HEAP32[$this >> 2] | 0) + 16 >> 2] & 255]($this); else {
  $2 = HEAP32[$__shared_weak_owners_ >> 2] | 0;
  HEAP32[$__shared_weak_owners_ >> 2] = $2 + -1;
  if (!$2) FUNCTION_TABLE_vi[HEAP32[(HEAP32[$this >> 2] | 0) + 16 >> 2] & 255]($this);
 }
 return;
}

function __ZNSt3__210shared_ptrIN8nlohmann6detail22input_adapter_protocolEED2Ev($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $__shared_owners_$i$i = 0;
 $0 = HEAP32[$this + 4 >> 2] | 0;
 if ($0 | 0) {
  $__shared_owners_$i$i = $0 + 4 | 0;
  $1 = HEAP32[$__shared_owners_$i$i >> 2] | 0;
  HEAP32[$__shared_owners_$i$i >> 2] = $1 + -1;
  if (!$1) {
   FUNCTION_TABLE_vi[HEAP32[(HEAP32[$0 >> 2] | 0) + 8 >> 2] & 255]($0);
   __ZNSt3__219__shared_weak_count14__release_weakEv($0);
  }
 }
 return;
}

function __ZNK8nlohmann6detail12from_json_fnclINS_10basic_jsonINSt3__23mapENS4_6vectorENS4_12basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEbxydSA_NS_14adl_serializerEEESC_EEDTcmcl9from_jsonfp_fp0_Ecvv_EERKT_RT0_($this, $j, $val) {
 $this = $this | 0;
 $j = $j | 0;
 $val = $val | 0;
 __ZN8nlohmann6detail9from_jsonINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEEEvRKT_RNSE_8string_tE($j, $val);
 return;
}

function __ZNSt3__210shared_ptrIN8nlohmann6detail20input_stream_adapterEED2Ev($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $__shared_owners_$i$i = 0;
 $0 = HEAP32[$this + 4 >> 2] | 0;
 if ($0 | 0) {
  $__shared_owners_$i$i = $0 + 4 | 0;
  $1 = HEAP32[$__shared_owners_$i$i >> 2] | 0;
  HEAP32[$__shared_owners_$i$i >> 2] = $1 + -1;
  if (!$1) {
   FUNCTION_TABLE_vi[HEAP32[(HEAP32[$0 >> 2] | 0) + 8 >> 2] & 255]($0);
   __ZNSt3__219__shared_weak_count14__release_weakEv($0);
  }
 }
 return;
}

function __ZNK8nlohmann6detail12from_json_fnclINS_10basic_jsonINSt3__23mapENS4_6vectorENS4_12basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEbxydSA_NS_14adl_serializerEEEbEEDTcmcl9from_jsonfp_fp0_Ecvv_EERKT_RT0_($this, $j, $val) {
 $this = $this | 0;
 $j = $j | 0;
 $val = $val | 0;
 __ZN8nlohmann6detail9from_jsonINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEEEvRKT_RNSE_9boolean_tE($j, $val);
 return;
}

function _arg_n($ap, $n) {
 $ap = $ap | 0;
 $n = $n | 0;
 var $5 = 0, $6 = 0, $ap2 = 0, $i$0 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $ap2 = sp;
 HEAP32[$ap2 >> 2] = HEAP32[$ap >> 2];
 $i$0 = $n;
 while (1) {
  $5 = (HEAP32[$ap2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
  $6 = HEAP32[$5 >> 2] | 0;
  HEAP32[$ap2 >> 2] = $5 + 4;
  if ($i$0 >>> 0 > 1) $i$0 = $i$0 + -1 | 0; else break;
 }
 STACKTOP = sp;
 return $6 | 0;
}

function __ZN8nlohmann6detail7to_jsonINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEyLi0EEEvRT_T0_($j, $0, $1) {
 $j = $j | 0;
 $0 = $0 | 0;
 $1 = $1 | 0;
 __ZN8nlohmann6detail20external_constructorILNS0_7value_tE6EE9constructINS_10basic_jsonINSt3__23mapENS6_6vectorENS6_12basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEbxydSC_NS_14adl_serializerEEEEEvRT_NSH_17number_unsigned_tE($j, $0, $1);
 return;
}

function __ZN8nlohmann6detail7to_jsonINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEExLi0EEEvRT_T0_($j, $0, $1) {
 $j = $j | 0;
 $0 = $0 | 0;
 $1 = $1 | 0;
 __ZN8nlohmann6detail20external_constructorILNS0_7value_tE5EE9constructINS_10basic_jsonINSt3__23mapENS6_6vectorENS6_12basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEbxydSC_NS_14adl_serializerEEEEEvRT_NSH_16number_integer_tE($j, $0, $1);
 return;
}

function __ZNSt3__28ios_base16__call_callbacksENS0_5eventE($this, $ev) {
 $this = $this | 0;
 $ev = $ev | 0;
 var $__fn_ = 0, $__index_ = 0, $dec = 0, $i$0 = 0;
 $__fn_ = $this + 32 | 0;
 $__index_ = $this + 36 | 0;
 $i$0 = HEAP32[$this + 40 >> 2] | 0;
 while (1) {
  if (!$i$0) break;
  $dec = $i$0 + -1 | 0;
  FUNCTION_TABLE_viii[HEAP32[(HEAP32[$__fn_ >> 2] | 0) + ($dec << 2) >> 2] & 63]($ev, $this, HEAP32[(HEAP32[$__index_ >> 2] | 0) + ($dec << 2) >> 2] | 0);
  $i$0 = $dec;
 }
 return;
}

function __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE7get_ptrIPKS9_Li0EEEDTcldtclL_ZNS1_7declvalIRKSB_EEDTclsr3std3__2E9__declvalIT_ELi0EEEvEE12get_impl_ptrclsr3stdE7declvalISI_EEEEv($this) {
 $this = $this | 0;
 return __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE12get_impl_ptrEPKS9_($this, 0) | 0;
}

function __ZNSt3__24pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8nlohmann10basic_jsonINS_3mapENS_6vectorES6_bxydS4_NS8_14adl_serializerEEEEC2ERKSE_($this, $0) {
 $this = $this | 0;
 $0 = $0 | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($this, $0);
 __ZN8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEC2ERKSB_($this + 16 | 0, $0 + 16 | 0);
 return;
}

function __ZN8nlohmann6detail13input_adaptercvNSt3__210shared_ptrINS0_22input_adapter_protocolEEEEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 var $1 = 0, $__shared_owners_$i$i$i = 0;
 HEAP32[$agg$result >> 2] = HEAP32[$this >> 2];
 $1 = HEAP32[$this + 4 >> 2] | 0;
 HEAP32[$agg$result + 4 >> 2] = $1;
 if ($1 | 0) {
  $__shared_owners_$i$i$i = $1 + 4 | 0;
  HEAP32[$__shared_owners_$i$i$i >> 2] = (HEAP32[$__shared_owners_$i$i$i >> 2] | 0) + 1;
 }
 return;
}

function _stbir__get_contributor($contributors, $n) {
 $contributors = $contributors | 0;
 $n = $n | 0;
 var $contributors$addr = 0, $n$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $contributors$addr = sp + 4 | 0;
 $n$addr = sp;
 HEAP32[$contributors$addr >> 2] = $contributors;
 HEAP32[$n$addr >> 2] = $n;
 STACKTOP = sp;
 return (HEAP32[$contributors$addr >> 2] | 0) + (HEAP32[$n$addr >> 2] << 3) | 0;
}

function __ZNK8nlohmann6detail5lexerINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE12get_positionEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 var $position = 0;
 $position = $this + 16 | 0;
 HEAP32[$agg$result >> 2] = HEAP32[$position >> 2];
 HEAP32[$agg$result + 4 >> 2] = HEAP32[$position + 4 >> 2];
 HEAP32[$agg$result + 8 >> 2] = HEAP32[$position + 8 >> 2];
 return;
}

function __ZNK8nlohmann6detail12from_json_fnclINS_10basic_jsonINSt3__23mapENS4_6vectorENS4_12basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEbxydSA_NS_14adl_serializerEEEiEEDTcmcl9from_jsonfp_fp0_Ecvv_EERKT_RT0_($this, $j, $val) {
 $this = $this | 0;
 $j = $j | 0;
 $val = $val | 0;
 __ZN8nlohmann6detail9from_jsonINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEiLi0EEEvRKT_RT0_($j, $val);
 return;
}

function __ZNK8nlohmann6detail12from_json_fnclINS_10basic_jsonINSt3__23mapENS4_6vectorENS4_12basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEbxydSA_NS_14adl_serializerEEEfEEDTcmcl9from_jsonfp_fp0_Ecvv_EERKT_RT0_($this, $j, $val) {
 $this = $this | 0;
 $j = $j | 0;
 $val = $val | 0;
 __ZN8nlohmann6detail9from_jsonINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEfLi0EEEvRKT_RT0_($j, $val);
 return;
}

function __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE7get_ptrIPKyLi0EEEDTcldtclL_ZNS1_7declvalIRKSB_EEDTclsr3std3__2E9__declvalIT_ELi0EEEvEE12get_impl_ptrclsr3stdE7declvalISI_EEEEv($this) {
 $this = $this | 0;
 return __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE12get_impl_ptrEPKy($this, 0) | 0;
}

function __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE7get_ptrIPKxLi0EEEDTcldtclL_ZNS1_7declvalIRKSB_EEDTclsr3std3__2E9__declvalIT_ELi0EEEvEE12get_impl_ptrclsr3stdE7declvalISI_EEEEv($this) {
 $this = $this | 0;
 return __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE12get_impl_ptrEPKx($this, 0) | 0;
}

function __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE7get_ptrIPKdLi0EEEDTcldtclL_ZNS1_7declvalIRKSB_EEDTclsr3std3__2E9__declvalIT_ELi0EEEvEE12get_impl_ptrclsr3stdE7declvalISI_EEEEv($this) {
 $this = $this | 0;
 return __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE12get_impl_ptrEPKd($this, 0) | 0;
}

function __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE7get_ptrIPKbLi0EEEDTcldtclL_ZNS1_7declvalIRKSB_EEDTclsr3std3__2E9__declvalIT_ELi0EEEvEE12get_impl_ptrclsr3stdE7declvalISI_EEEEv($this) {
 $this = $this | 0;
 return __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE12get_impl_ptrEPKb($this, 0) | 0;
}

function __ZNSt3__218__libcpp_refstringC2EPKc($this, $msg) {
 $this = $this | 0;
 $msg = $msg | 0;
 var $call = 0, $call3 = 0, $call5 = 0;
 $call = _strlen($msg) | 0;
 $call3 = __Znwm($call + 13 | 0) | 0;
 HEAP32[$call3 >> 2] = $call;
 HEAP32[$call3 + 4 >> 2] = $call;
 HEAP32[$call3 + 8 >> 2] = 0;
 $call5 = __ZNSt3__215__refstring_imp12_GLOBAL__N_113data_from_repEPNS1_9_Rep_baseE($call3) | 0;
 _memcpy($call5 | 0, $msg | 0, $call + 1 | 0) | 0;
 HEAP32[$this >> 2] = $call5;
 return;
}

function __ZNSt3__213basic_filebufIcNS_11char_traitsIcEEED2Ev($this) {
 $this = $this | 0;
 var $1 = 0, $3 = 0;
 HEAP32[$this >> 2] = 17856;
 __ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE5closeEv($this) | 0;
 if (HEAP8[$this + 96 >> 0] | 0) {
  $1 = HEAP32[$this + 32 >> 2] | 0;
  if ($1 | 0) __ZdaPv($1);
 }
 if (HEAP8[$this + 97 >> 0] | 0) {
  $3 = HEAP32[$this + 56 >> 2] | 0;
  if ($3 | 0) __ZdaPv($3);
 }
 __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED2Ev($this);
 return;
}

function __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE6sentryC2ERS3_($this, $__os) {
 $this = $this | 0;
 $__os = $__os | 0;
 var $1 = 0, $add$ptr = 0;
 HEAP8[$this >> 0] = 0;
 HEAP32[$this + 4 >> 2] = $__os;
 $add$ptr = $__os + (HEAP32[(HEAP32[$__os >> 2] | 0) + -12 >> 2] | 0) | 0;
 if (!(HEAP32[$add$ptr + 16 >> 2] | 0)) {
  $1 = HEAP32[$add$ptr + 72 >> 2] | 0;
  if ($1 | 0) __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE5flushEv($1) | 0;
  HEAP8[$this >> 0] = 1;
 }
 return;
}

function __ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEEC2Em($this, $__n) {
 $this = $this | 0;
 $__n = $__n | 0;
 HEAP32[$this >> 2] = 0;
 HEAP32[$this + 4 >> 2] = 0;
 HEAP32[$this + 8 >> 2] = 0;
 HEAP8[$this + 128 >> 0] = 0;
 if ($__n | 0) {
  __ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEE11__vallocateEm($this, $__n);
  __ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEE18__construct_at_endEm($this, $__n);
 }
 return;
}

function _IsGestureDetected($gesture) {
 $gesture = $gesture | 0;
 var $gesture$addr = 0, $retval = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $retval = sp + 4 | 0;
 $gesture$addr = sp;
 HEAP32[$gesture$addr >> 2] = $gesture;
 if ((1023 & HEAP32[14935] | 0) == (HEAP32[$gesture$addr >> 2] | 0)) HEAP8[$retval >> 0] = 1; else HEAP8[$retval >> 0] = 0;
 STACKTOP = sp;
 return HEAP8[$retval >> 0] & 1 | 0;
}

function __ZZN4tson7Tileset5parseERKN8nlohmann10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS1_14adl_serializerEEEENKUlSF_E2_clESF_($this, $item) {
 $this = $this | 0;
 $item = $item | 0;
 __ZN4tson18PropertyCollection3addERKN8nlohmann10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS1_14adl_serializerEEE((HEAP32[$this >> 2] | 0) + 100 | 0, $item) | 0;
 return;
}

function __ZZN4tson7WangSet5parseERKN8nlohmann10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS1_14adl_serializerEEEENKUlSF_E2_clESF_($this, $item) {
 $this = $this | 0;
 $item = $item | 0;
 __ZN4tson18PropertyCollection3addERKN8nlohmann10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS1_14adl_serializerEEE((HEAP32[$this >> 2] | 0) + 52 | 0, $item) | 0;
 return;
}

function __ZN8nlohmann6detail19json_sax_dom_parserINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE6stringERSB_($this, $val) {
 $this = $this | 0;
 $val = $val | 0;
 __ZN8nlohmann6detail19json_sax_dom_parserINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE12handle_valueIRSB_EEPSD_OT_($this, $val) | 0;
 return 1;
}

function __ZZN4tson7Terrain5parseERKN8nlohmann10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS1_14adl_serializerEEEENKUlSF_E_clESF_($this, $item) {
 $this = $this | 0;
 $item = $item | 0;
 __ZN4tson18PropertyCollection3addERKN8nlohmann10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS1_14adl_serializerEEE((HEAP32[$this >> 2] | 0) + 16 | 0, $item) | 0;
 return;
}

function __ZZN4tson6Object5parseERKN8nlohmann10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS1_14adl_serializerEEEENKUlSF_E1_clESF_($this, $item) {
 $this = $this | 0;
 $item = $item | 0;
 __ZN4tson18PropertyCollection3addERKN8nlohmann10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS1_14adl_serializerEEE((HEAP32[$this >> 2] | 0) + 60 | 0, $item) | 0;
 return;
}

function __ZZN4tson5Layer5parseERKN8nlohmann10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS1_14adl_serializerEEEENKUlSF_E3_clESF_($this, $item) {
 $this = $this | 0;
 $item = $item | 0;
 __ZN4tson18PropertyCollection3addERKN8nlohmann10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS1_14adl_serializerEEE((HEAP32[$this >> 2] | 0) + 136 | 0, $item) | 0;
 return;
}

function __ZZN4tson4Tile5parseERKN8nlohmann10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS1_14adl_serializerEEEENKUlSF_E1_clESF_($this, $item) {
 $this = $this | 0;
 $item = $item | 0;
 __ZN4tson18PropertyCollection3addERKN8nlohmann10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS1_14adl_serializerEEE((HEAP32[$this >> 2] | 0) + 256 | 0, $item) | 0;
 return;
}

function __ZNSt3__23mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8nlohmann10basic_jsonIS0_NS_6vectorES6_bxydS4_NS7_14adl_serializerEEENS_4lessIvEENS4_INS_4pairIKS6_SB_EEEEED2Ev($this) {
 $this = $this | 0;
 __ZNSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8nlohmann10basic_jsonINS_3mapENS_6vectorES7_bxydS5_NS8_14adl_serializerEEEEENS_19__map_value_compareIS7_SE_NS_4lessIvEELb1EEENS5_ISE_EEED2Ev($this);
 return;
}

function _stbir__min($a, $b) {
 $a = $a | 0;
 $b = $b | 0;
 var $a$addr = 0, $b$addr = 0, sp = 0, CSE$0 = 0, CSE$1 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $a$addr = sp + 4 | 0;
 $b$addr = sp;
 HEAP32[$a$addr >> 2] = $a;
 HEAP32[$b$addr >> 2] = $b;
 STACKTOP = sp;
 CSE$0 = HEAP32[$a$addr >> 2] | 0;
 CSE$1 = HEAP32[$b$addr >> 2] | 0;
 return ((CSE$0 | 0) < (CSE$1 | 0) ? CSE$0 | 0 : CSE$1 | 0) | 0;
}

function _stbi__get16be($s) {
 $s = $s | 0;
 var $add = 0, $s$addr = 0, $shl = 0, $z = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $s$addr = sp + 4 | 0;
 $z = sp;
 HEAP32[$s$addr >> 2] = $s;
 HEAP32[$z >> 2] = (_stbi__get8(HEAP32[$s$addr >> 2] | 0) | 0) & 255;
 $shl = HEAP32[$z >> 2] << 8;
 $add = $shl + ((_stbi__get8(HEAP32[$s$addr >> 2] | 0) | 0) & 255) | 0;
 STACKTOP = sp;
 return $add | 0;
}

function __ZZN4tson3Map5parseERKN8nlohmann10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS1_14adl_serializerEEEENKUlSF_E1_clESF_($this, $item) {
 $this = $this | 0;
 $item = $item | 0;
 __ZN4tson18PropertyCollection3addERKN8nlohmann10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS1_14adl_serializerEEE((HEAP32[$this >> 2] | 0) + 52 | 0, $item) | 0;
 return;
}

function __ZN8nlohmann6detail6parserINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE9get_tokenEv($this) {
 $this = $this | 0;
 var $call = 0;
 $call = __ZN8nlohmann6detail5lexerINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE4scanEv($this + 24 | 0) | 0;
 HEAP32[$this + 16 >> 2] = $call;
 return $call | 0;
}

function __ZN8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE10json_valueC2ERKNS3_ISB_NS7_ISB_EEEE($this, $value) {
 $this = $this | 0;
 $value = $value | 0;
 HEAP32[$this >> 2] = __ZN8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE6createINS3_ISB_NS7_ISB_EEEEJRKSE_EEEPT_DpOT0_($value) | 0;
 return;
}

function __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE12get_impl_ptrEPKS9_($this, $0) {
 $this = $this | 0;
 $0 = $0 | 0;
 var $cond = 0;
 if (__ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE9is_stringEv($this) | 0) $cond = HEAP32[$this + 8 >> 2] | 0; else $cond = 0;
 return $cond | 0;
}

function __ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this, $info, $adjustedPtr, $path_below) {
 $this = $this | 0;
 $info = $info | 0;
 $adjustedPtr = $adjustedPtr | 0;
 $path_below = $path_below | 0;
 if (__ZL8is_equalPKSt9type_infoS1_b($this, HEAP32[$info + 8 >> 2] | 0, 0) | 0) __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0, $info, $adjustedPtr, $path_below);
 return;
}

function __ZN8nlohmann6detail7to_jsonINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEdLi0EEEvRT_T0_($j, $val) {
 $j = $j | 0;
 $val = +$val;
 __ZN8nlohmann6detail20external_constructorILNS0_7value_tE7EE9constructINS_10basic_jsonINSt3__23mapENS6_6vectorENS6_12basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEbxydSC_NS_14adl_serializerEEEEEvRT_NSH_14number_float_tE($j, $val);
 return;
}

function __ZN4tson4TileD2Ev($this) {
 $this = $this | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($this + 292 | 0);
 __ZNSt3__213__vector_baseIiNS_9allocatorIiEEED2Ev($this + 280 | 0);
 __ZN4tson18PropertyCollectionD2Ev($this + 256 | 0);
 __ZN4tson5LayerD2Ev($this + 36 | 0);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($this + 16 | 0);
 __ZNSt3__213__vector_baseIN4tson5FrameENS_9allocatorIS2_EEED2Ev($this);
 return;
}

function __ZNSt3__24__fs10filesystem6detail12_GLOBAL__N_112ErrorHandlerIvEC2EPKcPNS_10error_codeEPKNS1_4pathESC_($this, $fname, $ec, $p1, $p2) {
 $this = $this | 0;
 $fname = $fname | 0;
 $ec = $ec | 0;
 $p1 = $p1 | 0;
 $p2 = $p2 | 0;
 HEAP32[$this >> 2] = $fname;
 HEAP32[$this + 4 >> 2] = $ec;
 HEAP32[$this + 8 >> 2] = $p1;
 HEAP32[$this + 12 >> 2] = $p2;
 if ($ec | 0) {
  HEAP32[$ec >> 2] = 0;
  HEAP32[$ec + 4 >> 2] = __ZNSt3__215system_categoryEv() | 0;
 }
 return;
}

function __ZNSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN4tson8PropertyEEENS_19__map_value_compareIS7_SA_NS_4lessIS7_EELb1EEENS5_ISA_EEED2Ev($this) {
 $this = $this | 0;
 __ZNSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN4tson8PropertyEEENS_19__map_value_compareIS7_SA_NS_4lessIS7_EELb1EEENS5_ISA_EEE7destroyEPNS_11__tree_nodeISA_PvEE($this, HEAP32[$this + 4 >> 2] | 0);
 return;
}

function _ScrollCallback($window, $xoffset, $yoffset) {
 $window = $window | 0;
 $xoffset = +$xoffset;
 $yoffset = +$yoffset;
 var $yoffset$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $yoffset$addr = sp;
 HEAP32[sp + 16 >> 2] = $window;
 HEAPF64[sp + 8 >> 3] = $xoffset;
 HEAPF64[$yoffset$addr >> 3] = $yoffset;
 HEAP32[14985] = ~~+HEAPF64[$yoffset$addr >> 3];
 STACKTOP = sp;
 return;
}

function __ZN4tson5FrameC2ERKN8nlohmann10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS1_14adl_serializerEEE($this, $json) {
 $this = $this | 0;
 $json = $json | 0;
 HEAP32[$this >> 2] = 0;
 HEAP32[$this + 4 >> 2] = 0;
 __ZN4tson5Frame5parseERKN8nlohmann10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS1_14adl_serializerEEE($this, $json) | 0;
 return;
}

function __ZNSt3__26vectorIbNS_9allocatorIbEEE11__vallocateEm($this, $__n) {
 $this = $this | 0;
 $__n = $__n | 0;
 var $add$i = 0;
 if ((__ZNKSt3__26vectorIbNS_9allocatorIbEEE8max_sizeEv($this) | 0) >>> 0 < $__n >>> 0) __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($this); else {
  $add$i = (($__n + -1 | 0) >>> 5) + 1 | 0;
  HEAP32[$this >> 2] = __Znwm($add$i << 2) | 0;
  HEAP32[$this + 4 >> 2] = 0;
  HEAP32[$this + 8 >> 2] = $add$i;
  return;
 }
}

function __ZNSt3__214__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lm28EEEE18__construct_at_endEm($this, $__n) {
 $this = $this | 0;
 $__n = $__n | 0;
 var $0 = 0, $__end_ = 0, $__n$addr$0 = 0;
 $__end_ = $this + 8 | 0;
 $0 = HEAP32[$__end_ >> 2] | 0;
 $__n$addr$0 = $__n;
 do {
  HEAP32[$0 >> 2] = 0;
  $0 = (HEAP32[$__end_ >> 2] | 0) + 4 | 0;
  HEAP32[$__end_ >> 2] = $0;
  $__n$addr$0 = $__n$addr$0 + -1 | 0;
 } while (($__n$addr$0 | 0) != 0);
 return;
}

function __ZN8nlohmann6detail7to_jsonINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEESB_Li0EEEvRT_RKT0_($j, $s) {
 $j = $j | 0;
 $s = $s | 0;
 __ZN8nlohmann6detail20external_constructorILNS0_7value_tE3EE9constructINS_10basic_jsonINSt3__23mapENS6_6vectorENS6_12basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEbxydSC_NS_14adl_serializerEEEEEvRT_RKNSH_8string_tE($j, $s);
 return;
}

function _stbi__get32be($s) {
 $s = $s | 0;
 var $add = 0, $s$addr = 0, $shl = 0, $z = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $s$addr = sp + 4 | 0;
 $z = sp;
 HEAP32[$s$addr >> 2] = $s;
 HEAP32[$z >> 2] = _stbi__get16be(HEAP32[$s$addr >> 2] | 0) | 0;
 $shl = HEAP32[$z >> 2] << 16;
 $add = $shl + (_stbi__get16be(HEAP32[$s$addr >> 2] | 0) | 0) | 0;
 STACKTOP = sp;
 return $add | 0;
}

function __ZNSt3__213__vector_baseIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEED2Ev($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0;
 $0 = HEAP32[$this >> 2] | 0;
 $1 = $0;
 do if ($0 | 0) {
  HEAP32[$this + 4 >> 2] = $1;
  if (($0 | 0) == ($this + 16 | 0)) {
   HEAP8[$this + 128 >> 0] = 0;
   break;
  } else {
   __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm($0, (HEAP32[$this + 8 >> 2] | 0) - $1 | 0);
   break;
  }
 } while (0);
 return;
}

function __ZNKSt3__27collateIwE12do_transformEPKwS3_($agg$result, $this, $__lo, $__hi) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__lo = $__lo | 0;
 $__hi = $__hi | 0;
 HEAP32[$agg$result >> 2] = 0;
 HEAP32[$agg$result + 4 >> 2] = 0;
 HEAP32[$agg$result + 8 >> 2] = 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initIPKwEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESA_SA_($agg$result, $__lo, $__hi);
 return;
}

function __ZNKSt3__27collateIcE12do_transformEPKcS3_($agg$result, $this, $__lo, $__hi) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__lo = $__lo | 0;
 $__hi = $__hi | 0;
 HEAP32[$agg$result >> 2] = 0;
 HEAP32[$agg$result + 4 >> 2] = 0;
 HEAP32[$agg$result + 8 >> 2] = 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initIPKcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESA_SA_($agg$result, $__lo, $__hi);
 return;
}

function ___ftello($f) {
 $f = $f | 0;
 var $1 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $phitmp = 0;
 if ((HEAP32[$f + 76 >> 2] | 0) > -1) {
  $phitmp = (___lockfile($f) | 0) == 0;
  $3 = ___ftello_unlocked($f) | 0;
  $4 = getTempRet0() | 0;
  if ($phitmp) {
   $5 = $4;
   $6 = $3;
  } else {
   ___unlockfile($f);
   $5 = $4;
   $6 = $3;
  }
 } else {
  $1 = ___ftello_unlocked($f) | 0;
  $5 = getTempRet0() | 0;
  $6 = $1;
 }
 setTempRet0($5 | 0);
 return $6 | 0;
}

function __ZNSt3__24__fs10filesystem6detail12_GLOBAL__N_113format_stringIJEEENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPKcDpRKT_($agg$result, $fmt) {
 $agg$result = $agg$result | 0;
 $fmt = $fmt | 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 __ZNSt3__24__fs10filesystem6detail12_GLOBAL__N_117format_string_impEPKcz($agg$result, $fmt, sp);
 STACKTOP = sp;
 return;
}

function __ZN8nlohmann6detail7to_jsonINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEbLi0EEEvRT_T0_($j, $b) {
 $j = $j | 0;
 $b = $b | 0;
 __ZN8nlohmann6detail20external_constructorILNS0_7value_tE4EE9constructINS_10basic_jsonINSt3__23mapENS6_6vectorENS6_12basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEbxydSC_NS_14adl_serializerEEEEEvRT_NSH_9boolean_tE($j, $b);
 return;
}

function _rlLoadIdentity() {
 var $0 = 0, $tmp = 0, dest = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64);
 $tmp = sp;
 $0 = HEAP32[14811] | 0;
 _MatrixIdentity($tmp);
 dest = $0;
 src = $tmp;
 stop = dest + 64 | 0;
 do {
  HEAP32[dest >> 2] = HEAP32[src >> 2];
  dest = dest + 4 | 0;
  src = src + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 STACKTOP = sp;
 return;
}

function __ZNSt3__24__fs10filesystem6detail12_GLOBAL__N_110posix_statERKNS1_4pathEPNS_10error_codeE($agg$result, $p, $ec) {
 $agg$result = $agg$result | 0;
 $p = $p | 0;
 $ec = $ec | 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(96);
 __ZNSt3__24__fs10filesystem6detail12_GLOBAL__N_110posix_statERKNS1_4pathER4statPNS_10error_codeE($agg$result, $p, sp, $ec);
 STACKTOP = sp;
 return;
}

function __ZN4tson4TextC2ENSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEb($this, $_text, $_wrap) {
 $this = $this | 0;
 $_text = $_text | 0;
 $_wrap = $_wrap | 0;
 HEAP32[$this >> 2] = HEAP32[$_text >> 2];
 HEAP32[$this + 4 >> 2] = HEAP32[$_text + 4 >> 2];
 HEAP32[$this + 8 >> 2] = HEAP32[$_text + 8 >> 2];
 HEAP32[$_text >> 2] = 0;
 HEAP32[$_text + 4 >> 2] = 0;
 HEAP32[$_text + 8 >> 2] = 0;
 HEAP8[$this + 12 >> 0] = $_wrap & 1;
 return;
}

function __ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEE18__construct_at_endEm($this, $__n) {
 $this = $this | 0;
 $__n = $__n | 0;
 var $0 = 0, $__end_ = 0, $__n$addr$0 = 0;
 $__end_ = $this + 4 | 0;
 $0 = HEAP32[$__end_ >> 2] | 0;
 $__n$addr$0 = $__n;
 do {
  HEAP32[$0 >> 2] = 0;
  $0 = (HEAP32[$__end_ >> 2] | 0) + 4 | 0;
  HEAP32[$__end_ >> 2] = $0;
  $__n$addr$0 = $__n$addr$0 + -1 | 0;
 } while (($__n$addr$0 | 0) != 0);
 return;
}

function __ZN4tson4GridC2EOS0_($this, $0) {
 $this = $this | 0;
 $0 = $0 | 0;
 var $1 = 0, $6 = 0, $7 = 0;
 HEAP32[$this >> 2] = HEAP32[$0 >> 2];
 HEAP32[$this + 4 >> 2] = HEAP32[$0 + 4 >> 2];
 HEAP32[$this + 8 >> 2] = HEAP32[$0 + 8 >> 2];
 HEAP32[$0 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 0;
 $1 = $0 + 12 | 0;
 $6 = HEAP32[$1 + 4 >> 2] | 0;
 $7 = $this + 12 | 0;
 HEAP32[$7 >> 2] = HEAP32[$1 >> 2];
 HEAP32[$7 + 4 >> 2] = $6;
 return;
}

function __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE12get_impl_ptrEPKy($this, $0) {
 $this = $this | 0;
 $0 = $0 | 0;
 var $call = 0;
 $call = __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE18is_number_unsignedEv($this) | 0;
 return ($call ? $this + 8 | 0 : 0) | 0;
}

function __ZN4tson7WangSetD2Ev($this) {
 $this = $this | 0;
 __ZN4tson18PropertyCollectionD2Ev($this + 52 | 0);
 __ZNSt3__213__vector_baseIN4tson9WangColorENS_9allocatorIS2_EEED2Ev($this + 40 | 0);
 __ZNSt3__213__vector_baseIN4tson9WangColorENS_9allocatorIS2_EEED2Ev($this + 28 | 0);
 __ZNSt3__213__vector_baseIN4tson8WangTileENS_9allocatorIS2_EEED2Ev($this + 16 | 0);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($this);
 return;
}

function __ZNKSt3__25ctypeIcE8do_widenEPKcS3_Pc($this, $low, $high, $dest) {
 $this = $this | 0;
 $low = $low | 0;
 $high = $high | 0;
 $dest = $dest | 0;
 var $dest$addr$0 = 0, $low$addr$0 = 0;
 $dest$addr$0 = $dest;
 $low$addr$0 = $low;
 while (1) {
  if (($low$addr$0 | 0) == ($high | 0)) break;
  HEAP8[$dest$addr$0 >> 0] = HEAP8[$low$addr$0 >> 0] | 0;
  $dest$addr$0 = $dest$addr$0 + 1 | 0;
  $low$addr$0 = $low$addr$0 + 1 | 0;
 }
 return $high | 0;
}

function __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE12get_impl_ptrEPKx($this, $0) {
 $this = $this | 0;
 $0 = $0 | 0;
 var $call = 0;
 $call = __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE17is_number_integerEv($this) | 0;
 return ($call ? $this + 8 | 0 : 0) | 0;
}

function _stbir__use_height_upsampling($stbir_info) {
 $stbir_info = $stbir_info | 0;
 var $call = 0, $stbir_info$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $stbir_info$addr = sp;
 HEAP32[$stbir_info$addr >> 2] = $stbir_info;
 $call = _stbir__use_upsampling(Math_fround(HEAPF32[(HEAP32[$stbir_info$addr >> 2] | 0) + 60 >> 2])) | 0;
 STACKTOP = sp;
 return $call | 0;
}

function _vsscanf($s, $fmt, $ap) {
 $s = $s | 0;
 $fmt = $fmt | 0;
 $ap = $ap | 0;
 var $call = 0, $f = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(144);
 $f = sp;
 _memset($f | 0, 0, 144) | 0;
 HEAP32[$f + 32 >> 2] = 34;
 HEAP32[$f + 44 >> 2] = $s;
 HEAP32[$f + 76 >> 2] = -1;
 HEAP32[$f + 84 >> 2] = $s;
 $call = _vfscanf($f, $fmt, $ap) | 0;
 STACKTOP = sp;
 return $call | 0;
}

function _stbir__use_width_upsampling($stbir_info) {
 $stbir_info = $stbir_info | 0;
 var $call = 0, $stbir_info$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $stbir_info$addr = sp;
 HEAP32[$stbir_info$addr >> 2] = $stbir_info;
 $call = _stbir__use_upsampling(Math_fround(HEAPF32[(HEAP32[$stbir_info$addr >> 2] | 0) + 56 >> 2])) | 0;
 STACKTOP = sp;
 return $call | 0;
}

function __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE12get_impl_ptrEPKd($this, $0) {
 $this = $this | 0;
 $0 = $0 | 0;
 var $call = 0;
 $call = __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE15is_number_floatEv($this) | 0;
 return ($call ? $this + 8 | 0 : 0) | 0;
}

function __ZNKSt3__25ctypeIwE8do_widenEPKcS3_Pw($this, $low, $high, $dest) {
 $this = $this | 0;
 $low = $low | 0;
 $high = $high | 0;
 $dest = $dest | 0;
 var $dest$addr$0 = 0, $low$addr$0 = 0;
 $dest$addr$0 = $dest;
 $low$addr$0 = $low;
 while (1) {
  if (($low$addr$0 | 0) == ($high | 0)) break;
  HEAP32[$dest$addr$0 >> 2] = HEAP8[$low$addr$0 >> 0];
  $dest$addr$0 = $dest$addr$0 + 4 | 0;
  $low$addr$0 = $low$addr$0 + 1 | 0;
 }
 return $high | 0;
}

function __ZNK8nlohmann6detail9iter_implIKNS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEEneERKSF_($this, $other) {
 $this = $this | 0;
 $other = $other | 0;
 return (__ZNK8nlohmann6detail9iter_implIKNS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEEeqERKSF_($this, $other) | 0) ^ 1 | 0;
}

function __ZNK8nlohmann6detail9iter_implINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEEneERKSE_($this, $other) {
 $this = $this | 0;
 $other = $other | 0;
 return (__ZNK8nlohmann6detail9iter_implINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEEeqERKSE_($this, $other) | 0) ^ 1 | 0;
}

function _stbi__rewind($s) {
 $s = $s | 0;
 var $s$addr = 0, sp = 0, CSE$0 = 0, CSE$1 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $s$addr = sp;
 HEAP32[$s$addr >> 2] = $s;
 CSE$0 = HEAP32[$s$addr >> 2] | 0;
 HEAP32[CSE$0 + 168 >> 2] = HEAP32[CSE$0 + 176 >> 2];
 CSE$1 = HEAP32[$s$addr >> 2] | 0;
 HEAP32[CSE$1 + 172 >> 2] = HEAP32[CSE$1 + 180 >> 2];
 STACKTOP = sp;
 return;
}

function _rlMatrixMode($mode) {
 $mode = $mode | 0;
 var $mode$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $mode$addr = sp;
 HEAP32[$mode$addr >> 2] = $mode;
 if ((HEAP32[$mode$addr >> 2] | 0) == 5889) HEAP32[14811] = 59180; else if ((HEAP32[$mode$addr >> 2] | 0) == 5888) HEAP32[14811] = 59248;
 HEAP32[4478] = HEAP32[$mode$addr >> 2];
 STACKTOP = sp;
 return;
}

function __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE12get_impl_ptrEPKb($this, $0) {
 $this = $this | 0;
 $0 = $0 | 0;
 var $call = 0;
 $call = __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE10is_booleanEv($this) | 0;
 return ($call ? $this + 8 | 0 : 0) | 0;
}

function __ZN4tson8PropertyC2Ev($this) {
 $this = $this | 0;
 var $m_name = 0;
 HEAP8[$this >> 0] = 0;
 $m_name = $this + 4 | 0;
 HEAP32[$m_name >> 2] = 0;
 HEAP32[$m_name + 4 >> 2] = 0;
 HEAP32[$m_name + 8 >> 2] = 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcm($m_name, 22141, __ZNSt3__211char_traitsIcE6lengthEPKc(22141) | 0);
 HEAP32[$this + 16 >> 2] = 0;
 __ZNSt3__23any8_StorageC2Ev($this + 20 | 0);
 return;
}

function _IsKeyDown($key) {
 $key = $key | 0;
 var $key$addr = 0, $retval = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $retval = sp + 4 | 0;
 $key$addr = sp;
 HEAP32[$key$addr >> 2] = $key;
 if (((_GetKeyStatus(HEAP32[$key$addr >> 2] | 0) | 0) & 1 | 0) == 1) HEAP8[$retval >> 0] = 1; else HEAP8[$retval >> 0] = 0;
 STACKTOP = sp;
 return HEAP8[$retval >> 0] & 1 | 0;
}

function __ZNSt3__211__stdoutbufIwE5imbueERKNS_6localeE($this, $__loc) {
 $this = $this | 0;
 $__loc = $__loc | 0;
 var $call$i = 0;
 FUNCTION_TABLE_ii[HEAP32[(HEAP32[$this >> 2] | 0) + 24 >> 2] & 127]($this) | 0;
 $call$i = __ZNKSt3__26locale9use_facetERNS0_2idE($__loc, 61528) | 0;
 HEAP32[$this + 36 >> 2] = $call$i;
 HEAP8[$this + 44 >> 0] = (FUNCTION_TABLE_ii[HEAP32[(HEAP32[$call$i >> 2] | 0) + 28 >> 2] & 127]($call$i) | 0) & 1;
 return;
}

function __ZNSt3__211__stdoutbufIcE5imbueERKNS_6localeE($this, $__loc) {
 $this = $this | 0;
 $__loc = $__loc | 0;
 var $call$i = 0;
 FUNCTION_TABLE_ii[HEAP32[(HEAP32[$this >> 2] | 0) + 24 >> 2] & 127]($this) | 0;
 $call$i = __ZNKSt3__26locale9use_facetERNS0_2idE($__loc, 61520) | 0;
 HEAP32[$this + 36 >> 2] = $call$i;
 HEAP8[$this + 44 >> 0] = (FUNCTION_TABLE_ii[HEAP32[(HEAP32[$call$i >> 2] | 0) + 28 >> 2] & 127]($call$i) | 0) & 1;
 return;
}

function __ZN8nlohmann6detail5lexerINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEED2Ev($this) {
 $this = $this | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($this + 40 | 0);
 __ZNSt3__213__vector_baseIcNS_9allocatorIcEEED2Ev($this + 28 | 0);
 __ZNSt3__210shared_ptrIN8nlohmann6detail22input_adapter_protocolEED2Ev($this);
 return;
}

function __ZNSt3__24pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8nlohmann10basic_jsonINS_3mapENS_6vectorES6_bxydS4_NS8_14adl_serializerEEEED2Ev($this) {
 $this = $this | 0;
 __ZN8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEED2Ev($this + 16 | 0);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($this);
 return;
}

function ___fseeko($f, $0, $1, $whence) {
 $f = $f | 0;
 $0 = $0 | 0;
 $1 = $1 | 0;
 $whence = $whence | 0;
 var $4 = 0, $call17 = 0, $phitmp = 0;
 if ((HEAP32[$f + 76 >> 2] | 0) > -1) {
  $phitmp = (___lockfile($f) | 0) == 0;
  $4 = ___fseeko_unlocked($f, $0, $1, $whence) | 0;
  if ($phitmp) $call17 = $4; else {
   ___unlockfile($f);
   $call17 = $4;
  }
 } else $call17 = ___fseeko_unlocked($f, $0, $1, $whence) | 0;
 return $call17 | 0;
}

function ___munmap($start, $len) {
 $start = $start | 0;
 $len = $len | 0;
 var $call1 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $vararg_buffer = sp;
 HEAP32[$vararg_buffer >> 2] = $start;
 HEAP32[$vararg_buffer + 4 >> 2] = $len;
 $call1 = ___syscall_ret(___syscall91(91, $vararg_buffer | 0) | 0) | 0;
 STACKTOP = sp;
 return $call1 | 0;
}

function ___muldsi3($a, $b) {
 $a = $a | 0;
 $b = $b | 0;
 var $1 = 0, $2 = 0, $3 = 0, $6 = 0, $8 = 0, $11 = 0, $12 = 0;
 $1 = $a & 65535;
 $2 = $b & 65535;
 $3 = Math_imul($2, $1) | 0;
 $6 = $a >>> 16;
 $8 = ($3 >>> 16) + (Math_imul($2, $6) | 0) | 0;
 $11 = $b >>> 16;
 $12 = Math_imul($11, $1) | 0;
 return (setTempRet0(($8 >>> 16) + (Math_imul($11, $6) | 0) + ((($8 & 65535) + $12 | 0) >>> 16) | 0), $8 + $12 << 16 | $3 & 65535 | 0) | 0;
}

function __ZN8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE10json_valueC2ERKS9_($this, $value) {
 $this = $this | 0;
 $value = $value | 0;
 HEAP32[$this >> 2] = __ZN8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE6createIS9_JRKS9_EEEPT_DpOT0_($value) | 0;
 return;
}

function _wmemcpy($d, $s, $n) {
 $d = $d | 0;
 $s = $s | 0;
 $n = $n | 0;
 var $d$addr$06 = 0, $n$addr$05 = 0, $s$addr$04 = 0;
 if ($n | 0) {
  $d$addr$06 = $d;
  $n$addr$05 = $n;
  $s$addr$04 = $s;
  while (1) {
   $n$addr$05 = $n$addr$05 + -1 | 0;
   HEAP32[$d$addr$06 >> 2] = HEAP32[$s$addr$04 >> 2];
   if (!$n$addr$05) break; else {
    $d$addr$06 = $d$addr$06 + 4 | 0;
    $s$addr$04 = $s$addr$04 + 4 | 0;
   }
  }
 }
 return $d | 0;
}

function __ZNSt3__214__split_bufferIcRNS_9allocatorIcEEED2Ev($this) {
 $this = $this | 0;
 var $0 = 0, $2 = 0, $__end_$i$i$i = 0;
 $0 = HEAP32[$this + 4 >> 2] | 0;
 $__end_$i$i$i = $this + 8 | 0;
 if ((HEAP32[$__end_$i$i$i >> 2] | 0) != ($0 | 0)) HEAP32[$__end_$i$i$i >> 2] = $0;
 $2 = HEAP32[$this >> 2] | 0;
 if ($2 | 0) __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm($2, (HEAP32[$this + 12 >> 2] | 0) - $2 | 0);
 return;
}

function __ZNSt3__213__vector_baseIPN8nlohmann10basic_jsonINS_3mapENS_6vectorENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEbxydS8_NS1_14adl_serializerEEENS8_ISD_EEED2Ev($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0;
 $0 = HEAP32[$this >> 2] | 0;
 $1 = $0;
 if ($0 | 0) {
  HEAP32[$this + 4 >> 2] = $1;
  __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm($0, (HEAP32[$this + 8 >> 2] | 0) - $1 | 0);
 }
 return;
}

function __ZNKSt3__27collateIwE7do_hashEPKwS3_($this, $__lo, $__hi) {
 $this = $this | 0;
 $__lo = $__lo | 0;
 $__hi = $__hi | 0;
 var $__h$0 = 0, $__p$0 = 0, $add = 0, $and = 0;
 $__h$0 = 0;
 $__p$0 = $__lo;
 while (1) {
  if (($__p$0 | 0) == ($__hi | 0)) break;
  $add = (HEAP32[$__p$0 >> 2] | 0) + ($__h$0 << 4) | 0;
  $and = $add & -268435456;
  $__h$0 = ($and >>> 24 | $and) ^ $add;
  $__p$0 = $__p$0 + 4 | 0;
 }
 return $__h$0 | 0;
}

function __ZNKSt3__28functionIFbiN8nlohmann6detail6parserINS1_10basic_jsonINS_3mapENS_6vectorENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEbxydSA_NS1_14adl_serializerEEEE13parse_event_tERSE_EEclEiSG_SH_($this, $__arg, $__arg1, $__arg3) {
 $this = $this | 0;
 $__arg = $__arg | 0;
 $__arg1 = $__arg1 | 0;
 $__arg3 = $__arg3 | 0;
 return FUNCTION_TABLE_iiiii[HEAP32[$this + 8 >> 2] & 15]($this, $__arg, $__arg1, $__arg3) | 0;
}

function __ZNKSt3__27collateIcE7do_hashEPKcS3_($this, $__lo, $__hi) {
 $this = $this | 0;
 $__lo = $__lo | 0;
 $__hi = $__hi | 0;
 var $__h$0 = 0, $__p$0 = 0, $add = 0, $and = 0;
 $__h$0 = 0;
 $__p$0 = $__lo;
 while (1) {
  if (($__p$0 | 0) == ($__hi | 0)) break;
  $add = ($__h$0 << 4) + (HEAP8[$__p$0 >> 0] | 0) | 0;
  $and = $add & -268435456;
  $__h$0 = ($and >>> 24 | $and) ^ $add;
  $__p$0 = $__p$0 + 1 | 0;
 }
 return $__h$0 | 0;
}

function ___memrchr($m, $c, $n) {
 $m = $m | 0;
 $c = $c | 0;
 $n = $n | 0;
 var $0 = 0, $dec8$in = 0, $retval$0 = 0;
 L1 : do if (!$n) $retval$0 = 0; else {
  $0 = $c & 255;
  $dec8$in = $n;
  while (1) {
   $dec8$in = $dec8$in + -1 | 0;
   if ((HEAP8[$m + $dec8$in >> 0] | 0) == $0 << 24 >> 24) break;
   if (!$dec8$in) {
    $retval$0 = 0;
    break L1;
   }
  }
  $retval$0 = $m + $dec8$in | 0;
 } while (0);
 return $retval$0 | 0;
}

function _stat($path, $buf) {
 $path = $path | 0;
 $buf = $buf | 0;
 var $call1 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $vararg_buffer = sp;
 HEAP32[$vararg_buffer >> 2] = $path;
 HEAP32[$vararg_buffer + 4 >> 2] = $buf;
 $call1 = ___syscall_ret(___syscall195(195, $vararg_buffer | 0) | 0) | 0;
 STACKTOP = sp;
 return $call1 | 0;
}

function __ZNSt3__24__fs10filesystem4pathC2INS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEvEERKT_NS2_6formatE($this, $__src, $0) {
 $this = $this | 0;
 $__src = $__src | 0;
 $0 = $0 | 0;
 HEAP32[$this >> 2] = 0;
 HEAP32[$this + 4 >> 2] = 0;
 HEAP32[$this + 8 >> 2] = 0;
 __ZNSt3__24__fs10filesystem8_PathCVTIcE15__append_sourceINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEvRSA_RKT_($this, $__src);
 return;
}

function _sn_write($f, $s, $l) {
 $f = $f | 0;
 $s = $s | 0;
 $l = $l | 0;
 var $1 = 0, $spec$select = 0, $sub$ptr$sub = 0, $wpos = 0;
 $wpos = $f + 20 | 0;
 $1 = HEAP32[$wpos >> 2] | 0;
 $sub$ptr$sub = (HEAP32[$f + 16 >> 2] | 0) - $1 | 0;
 $spec$select = $sub$ptr$sub >>> 0 > $l >>> 0 ? $l : $sub$ptr$sub;
 _memcpy($1 | 0, $s | 0, $spec$select | 0) | 0;
 HEAP32[$wpos >> 2] = (HEAP32[$wpos >> 2] | 0) + $spec$select;
 return $l | 0;
}

function _memmove(dest, src, num) {
 dest = dest | 0;
 src = src | 0;
 num = num | 0;
 var ret = 0;
 if ((src | 0) < (dest | 0) & (dest | 0) < (src + num | 0)) {
  ret = dest;
  src = src + num | 0;
  dest = dest + num | 0;
  while ((num | 0) > 0) {
   dest = dest - 1 | 0;
   src = src - 1 | 0;
   num = num - 1 | 0;
   HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  }
  dest = ret;
 } else _memcpy(dest, src, num) | 0;
 return dest | 0;
}

function __Znwm($size) {
 $size = $size | 0;
 var $call = 0, $call$lcssa = 0, $call2 = 0, $spec$store$select = 0;
 $spec$store$select = ($size | 0) == 0 ? 1 : $size;
 while (1) {
  $call = _malloc($spec$store$select) | 0;
  if ($call | 0) {
   $call$lcssa = $call;
   break;
  }
  $call2 = __ZSt15get_new_handlerv() | 0;
  if (!$call2) {
   $call$lcssa = 0;
   break;
  }
  FUNCTION_TABLE_v[$call2 & 7]();
 }
 return $call$lcssa | 0;
}

function _stbi__stdio_skip($user, $n) {
 $user = $user | 0;
 $n = $n | 0;
 var $n$addr = 0, $user$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $user$addr = sp + 4 | 0;
 $n$addr = sp;
 HEAP32[$user$addr >> 2] = $user;
 HEAP32[$n$addr >> 2] = $n;
 _fseek(HEAP32[$user$addr >> 2] | 0, HEAP32[$n$addr >> 2] | 0, 1) | 0;
 STACKTOP = sp;
 return;
}

function __ZNSt3__218__libcpp_refstringD2Ev($this) {
 $this = $this | 0;
 var $1 = 0, $call2 = 0, $count = 0;
 if (__ZNKSt3__218__libcpp_refstring15__uses_refcountEv($this) | 0) {
  $call2 = __ZNSt3__215__refstring_imp12_GLOBAL__N_113rep_from_dataEPKc(HEAP32[$this >> 2] | 0) | 0;
  $count = $call2 + 8 | 0;
  $1 = HEAP32[$count >> 2] | 0;
  HEAP32[$count >> 2] = $1 + -1;
  if (($1 | 0) < 1) __ZdlPv($call2);
 }
 return;
}

function __ZNKSt3__210moneypunctIwLb1EE16do_positive_signEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 var $__i$0$i$i = 0;
 HEAP32[$agg$result >> 2] = 0;
 HEAP32[$agg$result + 4 >> 2] = 0;
 HEAP32[$agg$result + 8 >> 2] = 0;
 $__i$0$i$i = 0;
 while (1) {
  if (($__i$0$i$i | 0) == 3) break;
  HEAP32[$agg$result + ($__i$0$i$i << 2) >> 2] = 0;
  $__i$0$i$i = $__i$0$i$i + 1 | 0;
 }
 return;
}

function __ZNKSt3__210moneypunctIwLb0EE16do_positive_signEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 var $__i$0$i$i = 0;
 HEAP32[$agg$result >> 2] = 0;
 HEAP32[$agg$result + 4 >> 2] = 0;
 HEAP32[$agg$result + 8 >> 2] = 0;
 $__i$0$i$i = 0;
 while (1) {
  if (($__i$0$i$i | 0) == 3) break;
  HEAP32[$agg$result + ($__i$0$i$i << 2) >> 2] = 0;
  $__i$0$i$i = $__i$0$i$i + 1 | 0;
 }
 return;
}

function __ZNKSt3__210moneypunctIcLb1EE16do_positive_signEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 var $__i$0$i$i = 0;
 HEAP32[$agg$result >> 2] = 0;
 HEAP32[$agg$result + 4 >> 2] = 0;
 HEAP32[$agg$result + 8 >> 2] = 0;
 $__i$0$i$i = 0;
 while (1) {
  if (($__i$0$i$i | 0) == 3) break;
  HEAP32[$agg$result + ($__i$0$i$i << 2) >> 2] = 0;
  $__i$0$i$i = $__i$0$i$i + 1 | 0;
 }
 return;
}

function __ZNKSt3__210moneypunctIcLb0EE16do_positive_signEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 var $__i$0$i$i = 0;
 HEAP32[$agg$result >> 2] = 0;
 HEAP32[$agg$result + 4 >> 2] = 0;
 HEAP32[$agg$result + 8 >> 2] = 0;
 $__i$0$i$i = 0;
 while (1) {
  if (($__i$0$i$i | 0) == 3) break;
  HEAP32[$agg$result + ($__i$0$i$i << 2) >> 2] = 0;
  $__i$0$i$i = $__i$0$i$i + 1 | 0;
 }
 return;
}

function __ZNSt3__24__fs10filesystem8_PathCVTIcE14__append_rangeIPKcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeERNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES8_S8_($__dest, $__b, $__e) {
 $__dest = $__dest | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE23__append_forward_unsafeIPKcEERS5_T_SA_($__dest, $__b, $__e) | 0;
 return;
}

function __ZNKSt3__223__system_error_category23default_error_conditionEi($agg$result, $this, $ev) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $ev = $ev | 0;
 var $$sink = 0;
 if (($ev | 0) > 256) {
  __ZNSt3__215system_categoryEv() | 0;
  $$sink = 21940;
 } else {
  __ZNSt3__216generic_categoryEv() | 0;
  $$sink = 21936;
 }
 HEAP32[$agg$result >> 2] = $ev;
 HEAP32[$agg$result + 4 >> 2] = $$sink;
 return;
}

function __ZNKSt3__210moneypunctIwLb1EE14do_curr_symbolEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 var $__i$0$i$i = 0;
 HEAP32[$agg$result >> 2] = 0;
 HEAP32[$agg$result + 4 >> 2] = 0;
 HEAP32[$agg$result + 8 >> 2] = 0;
 $__i$0$i$i = 0;
 while (1) {
  if (($__i$0$i$i | 0) == 3) break;
  HEAP32[$agg$result + ($__i$0$i$i << 2) >> 2] = 0;
  $__i$0$i$i = $__i$0$i$i + 1 | 0;
 }
 return;
}

function __ZNKSt3__210moneypunctIwLb0EE14do_curr_symbolEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 var $__i$0$i$i = 0;
 HEAP32[$agg$result >> 2] = 0;
 HEAP32[$agg$result + 4 >> 2] = 0;
 HEAP32[$agg$result + 8 >> 2] = 0;
 $__i$0$i$i = 0;
 while (1) {
  if (($__i$0$i$i | 0) == 3) break;
  HEAP32[$agg$result + ($__i$0$i$i << 2) >> 2] = 0;
  $__i$0$i$i = $__i$0$i$i + 1 | 0;
 }
 return;
}

function __ZNKSt3__210moneypunctIcLb1EE14do_curr_symbolEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 var $__i$0$i$i = 0;
 HEAP32[$agg$result >> 2] = 0;
 HEAP32[$agg$result + 4 >> 2] = 0;
 HEAP32[$agg$result + 8 >> 2] = 0;
 $__i$0$i$i = 0;
 while (1) {
  if (($__i$0$i$i | 0) == 3) break;
  HEAP32[$agg$result + ($__i$0$i$i << 2) >> 2] = 0;
  $__i$0$i$i = $__i$0$i$i + 1 | 0;
 }
 return;
}

function __ZNKSt3__210moneypunctIcLb0EE14do_curr_symbolEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 var $__i$0$i$i = 0;
 HEAP32[$agg$result >> 2] = 0;
 HEAP32[$agg$result + 4 >> 2] = 0;
 HEAP32[$agg$result + 8 >> 2] = 0;
 $__i$0$i$i = 0;
 while (1) {
  if (($__i$0$i$i | 0) == 3) break;
  HEAP32[$agg$result + ($__i$0$i$i << 2) >> 2] = 0;
  $__i$0$i$i = $__i$0$i$i + 1 | 0;
 }
 return;
}

function _stbi__start_file($s, $f) {
 $s = $s | 0;
 $f = $f | 0;
 var $f$addr = 0, $s$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $s$addr = sp + 4 | 0;
 $f$addr = sp;
 HEAP32[$s$addr >> 2] = $s;
 HEAP32[$f$addr >> 2] = $f;
 _stbi__start_callbacks(HEAP32[$s$addr >> 2] | 0, 17932, HEAP32[$f$addr >> 2] | 0);
 STACKTOP = sp;
 return;
}

function __ZNKSt3__210moneypunctIwLb1EE11do_groupingEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 var $__i$0$i$i = 0;
 HEAP32[$agg$result >> 2] = 0;
 HEAP32[$agg$result + 4 >> 2] = 0;
 HEAP32[$agg$result + 8 >> 2] = 0;
 $__i$0$i$i = 0;
 while (1) {
  if (($__i$0$i$i | 0) == 3) break;
  HEAP32[$agg$result + ($__i$0$i$i << 2) >> 2] = 0;
  $__i$0$i$i = $__i$0$i$i + 1 | 0;
 }
 return;
}

function __ZNKSt3__210moneypunctIwLb0EE11do_groupingEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 var $__i$0$i$i = 0;
 HEAP32[$agg$result >> 2] = 0;
 HEAP32[$agg$result + 4 >> 2] = 0;
 HEAP32[$agg$result + 8 >> 2] = 0;
 $__i$0$i$i = 0;
 while (1) {
  if (($__i$0$i$i | 0) == 3) break;
  HEAP32[$agg$result + ($__i$0$i$i << 2) >> 2] = 0;
  $__i$0$i$i = $__i$0$i$i + 1 | 0;
 }
 return;
}

function __ZNKSt3__210moneypunctIcLb1EE11do_groupingEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 var $__i$0$i$i = 0;
 HEAP32[$agg$result >> 2] = 0;
 HEAP32[$agg$result + 4 >> 2] = 0;
 HEAP32[$agg$result + 8 >> 2] = 0;
 $__i$0$i$i = 0;
 while (1) {
  if (($__i$0$i$i | 0) == 3) break;
  HEAP32[$agg$result + ($__i$0$i$i << 2) >> 2] = 0;
  $__i$0$i$i = $__i$0$i$i + 1 | 0;
 }
 return;
}

function __ZNKSt3__210moneypunctIcLb0EE11do_groupingEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 var $__i$0$i$i = 0;
 HEAP32[$agg$result >> 2] = 0;
 HEAP32[$agg$result + 4 >> 2] = 0;
 HEAP32[$agg$result + 8 >> 2] = 0;
 $__i$0$i$i = 0;
 while (1) {
  if (($__i$0$i$i | 0) == 3) break;
  HEAP32[$agg$result + ($__i$0$i$i << 2) >> 2] = 0;
  $__i$0$i$i = $__i$0$i$i + 1 | 0;
 }
 return;
}

function __ZN8nlohmann6detail5lexerINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE17get_decimal_pointEv() {
 var $0 = 0, $call = 0, $cond = 0;
 $call = _localeconv() | 0;
 if (!$call) ___assert_fail(28109, 22221, 7111, 28124);
 $0 = HEAP32[$call >> 2] | 0;
 if (!$0) $cond = 46; else $cond = HEAP8[$0 >> 0] | 0;
 return $cond | 0;
}

function __ZNSt3__214basic_ifstreamIcNS_11char_traitsIcEEED2Ev($this, $vtt) {
 $this = $this | 0;
 $vtt = $vtt | 0;
 var $0 = 0;
 $0 = HEAP32[$vtt >> 2] | 0;
 HEAP32[$this >> 2] = $0;
 HEAP32[$this + (HEAP32[$0 + -12 >> 2] | 0) >> 2] = HEAP32[$vtt + 12 >> 2];
 __ZNSt3__213basic_filebufIcNS_11char_traitsIcEEED2Ev($this + 8 | 0);
 __ZNSt3__213basic_istreamIcNS_11char_traitsIcEEED2Ev($this, $vtt + 4 | 0);
 return;
}

function __ZN8nlohmann6detail19json_sax_dom_parserINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEED2Ev($this) {
 $this = $this | 0;
 __ZNSt3__213__vector_baseIPN8nlohmann10basic_jsonINS_3mapENS_6vectorENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEbxydS8_NS1_14adl_serializerEEENS8_ISD_EEED2Ev($this + 4 | 0);
 return;
}

function __ZN4tson7TerrainC2EOS0_($this, $0) {
 $this = $this | 0;
 $0 = $0 | 0;
 HEAP32[$this >> 2] = HEAP32[$0 >> 2];
 HEAP32[$this + 4 >> 2] = HEAP32[$0 + 4 >> 2];
 HEAP32[$this + 8 >> 2] = HEAP32[$0 + 8 >> 2];
 HEAP32[$0 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 0;
 HEAP32[$this + 12 >> 2] = HEAP32[$0 + 12 >> 2];
 __ZN4tson18PropertyCollectionC2EOS0_($this + 16 | 0, $0 + 16 | 0);
 return;
}

function _copysign($x, $y) {
 $x = +$x;
 $y = +$y;
 var $0 = 0, $1 = 0, $6 = 0;
 HEAPF64[tempDoublePtr >> 3] = $x;
 $0 = HEAP32[tempDoublePtr >> 2] | 0;
 $1 = HEAP32[tempDoublePtr + 4 >> 2] | 0;
 HEAPF64[tempDoublePtr >> 3] = $y;
 $6 = HEAP32[tempDoublePtr + 4 >> 2] & -2147483648 | $1 & 2147483647;
 HEAP32[tempDoublePtr >> 2] = $0;
 HEAP32[tempDoublePtr + 4 >> 2] = $6;
 return +(+HEAPF64[tempDoublePtr >> 3]);
}

function __ZNSt3__211__tree_leafIPNS_16__tree_node_baseIPvEEEET_S5_($__x) {
 $__x = $__x | 0;
 var $0 = 0, $1 = 0, $__x$addr$0 = 0, $__x$addr$0$be = 0;
 $__x$addr$0 = $__x;
 while (1) {
  $0 = HEAP32[$__x$addr$0 >> 2] | 0;
  if (!$0) {
   $1 = HEAP32[$__x$addr$0 + 4 >> 2] | 0;
   if (!$1) break; else $__x$addr$0$be = $1;
  } else $__x$addr$0$be = $0;
  $__x$addr$0 = $__x$addr$0$be;
 }
 return $__x$addr$0 | 0;
}

function __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE5beginEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE6cbeginEv($agg$result, $this);
 return;
}

function _stbi__png_test($s) {
 $s = $s | 0;
 var $r = 0, $s$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $s$addr = sp + 4 | 0;
 $r = sp;
 HEAP32[$s$addr >> 2] = $s;
 HEAP32[$r >> 2] = _stbi__check_png_header(HEAP32[$s$addr >> 2] | 0) | 0;
 _stbi__rewind(HEAP32[$s$addr >> 2] | 0);
 STACKTOP = sp;
 return HEAP32[$r >> 2] | 0;
}

function __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE7seekoffExNS_8ios_base7seekdirEj($agg$result, $this, $0, $1, $2, $3) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0, $8 = 0;
 $4 = $agg$result;
 HEAP32[$4 >> 2] = 0;
 HEAP32[$4 + 4 >> 2] = 0;
 $8 = $agg$result + 8 | 0;
 HEAP32[$8 >> 2] = -1;
 HEAP32[$8 + 4 >> 2] = -1;
 return;
}

function __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE7seekoffExNS_8ios_base7seekdirEj($agg$result, $this, $0, $1, $2, $3) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0, $8 = 0;
 $4 = $agg$result;
 HEAP32[$4 >> 2] = 0;
 HEAP32[$4 + 4 >> 2] = 0;
 $8 = $agg$result + 8 | 0;
 HEAP32[$8 >> 2] = -1;
 HEAP32[$8 + 4 >> 2] = -1;
 return;
}

function __ZNSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8nlohmann10basic_jsonINS_3mapENS_6vectorES7_bxydS5_NS8_14adl_serializerEEEEENS_19__map_value_compareIS7_SE_NS_4lessIvEELb1EEENS5_ISE_EEEC2ERKSI_($this, $__comp) {
 $this = $this | 0;
 $__comp = $__comp | 0;
 HEAP32[$this + 4 >> 2] = 0;
 HEAP32[$this + 8 >> 2] = 0;
 HEAP32[$this >> 2] = $this + 4;
 return;
}

function ___uflow($f) {
 $f = $f | 0;
 var $c = 0, $retval$0 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $c = sp;
 if (!(___toread($f) | 0)) if ((FUNCTION_TABLE_iiii[HEAP32[$f + 32 >> 2] & 63]($f, $c, 1) | 0) == 1) $retval$0 = HEAPU8[$c >> 0] | 0; else $retval$0 = -1; else $retval$0 = -1;
 STACKTOP = sp;
 return $retval$0 | 0;
}

function __ZZN4tson3Map11processDataEvENKUlRNS_5LayerEE_clES2_($this, $layer) {
 $this = $this | 0;
 $layer = $layer | 0;
 var $0 = 0;
 $0 = HEAP32[$this >> 2] | 0;
 __ZN4tson5Layer13assignTileMapERKNSt3__23mapIiPNS_4TileENS1_4lessIiEENS1_9allocatorINS1_4pairIKiS4_EEEEEE($layer, $0 + 176 | 0);
 __ZN4tson5Layer14createTileDataERKNS_7Vector2IiEEb($layer, $0 + 4 | 0, (HEAP8[$0 + 16 >> 0] | 0) != 0);
 return;
}

function __ZNKSt3__212_GLOBAL__N_111__fake_bindclEv($this) {
 $this = $this | 0;
 var $$unpack = 0, $$unpack2 = 0, $1 = 0, $4 = 0;
 $$unpack = HEAP32[$this + 4 >> 2] | 0;
 $$unpack2 = HEAP32[$this + 8 >> 2] | 0;
 $1 = (HEAP32[$this >> 2] | 0) + ($$unpack2 >> 1) | 0;
 if (!($$unpack2 & 1)) $4 = $$unpack; else $4 = HEAP32[(HEAP32[$1 >> 2] | 0) + $$unpack >> 2] | 0;
 FUNCTION_TABLE_vi[$4 & 255]($1);
 return;
}

function __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE3endEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE4cendEv($agg$result, $this);
 return;
}

function __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEEC2Ev($this) {
 $this = $this | 0;
 var $__binp_ = 0;
 HEAP32[$this >> 2] = 18716;
 __ZNSt3__26localeC2Ev($this + 4 | 0);
 $__binp_ = $this + 8 | 0;
 HEAP32[$__binp_ >> 2] = 0;
 HEAP32[$__binp_ + 4 >> 2] = 0;
 HEAP32[$__binp_ + 8 >> 2] = 0;
 HEAP32[$__binp_ + 12 >> 2] = 0;
 HEAP32[$__binp_ + 16 >> 2] = 0;
 HEAP32[$__binp_ + 20 >> 2] = 0;
 return;
}

function __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEEC2Ev($this) {
 $this = $this | 0;
 var $__binp_ = 0;
 HEAP32[$this >> 2] = 18652;
 __ZNSt3__26localeC2Ev($this + 4 | 0);
 $__binp_ = $this + 8 | 0;
 HEAP32[$__binp_ >> 2] = 0;
 HEAP32[$__binp_ + 4 >> 2] = 0;
 HEAP32[$__binp_ + 8 >> 2] = 0;
 HEAP32[$__binp_ + 12 >> 2] = 0;
 HEAP32[$__binp_ + 16 >> 2] = 0;
 HEAP32[$__binp_ + 20 >> 2] = 0;
 return;
}

function __ZNSt3__25ctypeIcEC2EPKtbm($this, $tab, $del, $refs) {
 $this = $this | 0;
 $tab = $tab | 0;
 $del = $del | 0;
 $refs = $refs | 0;
 var $__tab_ = 0;
 HEAP32[$this + 4 >> 2] = $refs + -1;
 HEAP32[$this >> 2] = 21392;
 $__tab_ = $this + 8 | 0;
 HEAP32[$__tab_ >> 2] = $tab;
 HEAP8[$this + 12 >> 0] = $del & 1;
 if (!$tab) HEAP32[$__tab_ >> 2] = __ZNSt3__25ctypeIcE13classic_tableEv() | 0;
 return;
}

function __ZNKSt3__27codecvtIwc11__mbstate_tE13do_max_lengthEv($this) {
 $this = $this | 0;
 var $0 = 0, $call$i = 0, $call$i$i = 0, $cond = 0;
 $0 = HEAP32[$this + 8 >> 2] | 0;
 if (!$0) $cond = 1; else {
  $call$i$i = ___uselocale($0) | 0;
  $call$i = ___ctype_get_mb_cur_max() | 0;
  if (!$call$i$i) $cond = $call$i; else {
   ___uselocale($call$i$i) | 0;
   $cond = $call$i;
  }
 }
 return $cond | 0;
}

function __ZNSt3__218__libcpp_refstringC2ERKS0_($this, $s) {
 $this = $this | 0;
 $s = $s | 0;
 var $count = 0;
 HEAP32[$this >> 2] = HEAP32[$s >> 2];
 if (__ZNKSt3__218__libcpp_refstring15__uses_refcountEv($this) | 0) {
  $count = (__ZNSt3__215__refstring_imp12_GLOBAL__N_113rep_from_dataEPKc_1492(HEAP32[$this >> 2] | 0) | 0) + 8 | 0;
  HEAP32[$count >> 2] = (HEAP32[$count >> 2] | 0) + 1;
 }
 return;
}

function ___unlist_locked_file($f) {
 $f = $f | 0;
 var $$pre = 0, $$sink = 0, $1 = 0, $4 = 0;
 if (HEAP32[$f + 68 >> 2] | 0) {
  $1 = HEAP32[$f + 132 >> 2] | 0;
  $$pre = $f + 128 | 0;
  if ($1 | 0) HEAP32[$1 + 128 >> 2] = HEAP32[$$pre >> 2];
  $4 = HEAP32[$$pre >> 2] | 0;
  if (!$4) $$sink = (___pthread_self_603() | 0) + 232 | 0; else $$sink = $4 + 132 | 0;
  HEAP32[$$sink >> 2] = $1;
 }
 return;
}

function __ZNSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8nlohmann10basic_jsonINS_3mapENS_6vectorES7_bxydS5_NS8_14adl_serializerEEEEENS_19__map_value_compareIS7_SE_NS_4lessIvEELb1EEENS5_ISE_EEEC2ERKSK_($this, $__t) {
 $this = $this | 0;
 $__t = $__t | 0;
 HEAP32[$this + 4 >> 2] = 0;
 HEAP32[$this + 8 >> 2] = 0;
 HEAP32[$this >> 2] = $this + 4;
 return;
}

function __ZNKSt3__220__time_get_c_storageIwE3__xEv($this) {
 $this = $this | 0;
 if (!(HEAP8[58576] | 0)) if (___cxa_guard_acquire(58576) | 0) {
  HEAP32[15342] = 0;
  HEAP32[15343] = 0;
  HEAP32[15344] = 0;
  __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwm(61368, 19720, __ZNSt3__211char_traitsIwE6lengthEPKw(19720) | 0);
  ___cxa_guard_release(58576);
 }
 return 61368;
}

function __ZNKSt3__220__time_get_c_storageIwE3__rEv($this) {
 $this = $this | 0;
 if (!(HEAP8[58584] | 0)) if (___cxa_guard_acquire(58584) | 0) {
  HEAP32[15345] = 0;
  HEAP32[15346] = 0;
  HEAP32[15347] = 0;
  __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwm(61380, 19756, __ZNSt3__211char_traitsIwE6lengthEPKw(19756) | 0);
  ___cxa_guard_release(58584);
 }
 return 61380;
}

function __ZNKSt3__220__time_get_c_storageIwE3__cEv($this) {
 $this = $this | 0;
 if (!(HEAP8[58592] | 0)) if (___cxa_guard_acquire(58592) | 0) {
  HEAP32[15348] = 0;
  HEAP32[15349] = 0;
  HEAP32[15350] = 0;
  __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwm(61392, 19804, __ZNSt3__211char_traitsIwE6lengthEPKw(19804) | 0);
  ___cxa_guard_release(58592);
 }
 return 61392;
}

function __ZNKSt3__220__time_get_c_storageIwE3__XEv($this) {
 $this = $this | 0;
 if (!(HEAP8[58568] | 0)) if (___cxa_guard_acquire(58568) | 0) {
  HEAP32[15339] = 0;
  HEAP32[15340] = 0;
  HEAP32[15341] = 0;
  __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwm(61356, 19684, __ZNSt3__211char_traitsIwE6lengthEPKw(19684) | 0);
  ___cxa_guard_release(58568);
 }
 return 61356;
}

function __ZNKSt3__220__time_get_c_storageIcE3__xEv($this) {
 $this = $this | 0;
 if (!(HEAP8[58496] | 0)) if (___cxa_guard_acquire(58496) | 0) {
  HEAP32[15325] = 0;
  HEAP32[15326] = 0;
  HEAP32[15327] = 0;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcm(61300, 43294, __ZNSt3__211char_traitsIcE6lengthEPKc(43294) | 0);
  ___cxa_guard_release(58496);
 }
 return 61300;
}

function __ZNKSt3__220__time_get_c_storageIcE3__rEv($this) {
 $this = $this | 0;
 if (!(HEAP8[58504] | 0)) if (___cxa_guard_acquire(58504) | 0) {
  HEAP32[15328] = 0;
  HEAP32[15329] = 0;
  HEAP32[15330] = 0;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcm(61312, 43303, __ZNSt3__211char_traitsIcE6lengthEPKc(43303) | 0);
  ___cxa_guard_release(58504);
 }
 return 61312;
}

function __ZNKSt3__220__time_get_c_storageIcE3__cEv($this) {
 $this = $this | 0;
 if (!(HEAP8[58512] | 0)) if (___cxa_guard_acquire(58512) | 0) {
  HEAP32[15331] = 0;
  HEAP32[15332] = 0;
  HEAP32[15333] = 0;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcm(61324, 43315, __ZNSt3__211char_traitsIcE6lengthEPKc(43315) | 0);
  ___cxa_guard_release(58512);
 }
 return 61324;
}

function __ZNKSt3__220__time_get_c_storageIcE3__XEv($this) {
 $this = $this | 0;
 if (!(HEAP8[58488] | 0)) if (___cxa_guard_acquire(58488) | 0) {
  HEAP32[15322] = 0;
  HEAP32[15323] = 0;
  HEAP32[15324] = 0;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcm(61288, 43285, __ZNSt3__211char_traitsIcE6lengthEPKc(43285) | 0);
  ___cxa_guard_release(58488);
 }
 return 61288;
}

function __ZNSt3__26__treeINS_12__value_typeINS_5tupleIJiiEEEPN4tson4TileEEENS_19__map_value_compareIS3_S7_NS_4lessIS3_EELb1EEENS_9allocatorIS7_EEED2Ev($this) {
 $this = $this | 0;
 __ZNSt3__26__treeINS_12__value_typeINS_5tupleIJiiEEEPN4tson4TileEEENS_19__map_value_compareIS3_S7_NS_4lessIS3_EELb1EEENS_9allocatorIS7_EEE7destroyEPNS_11__tree_nodeIS7_PvEE($this, HEAP32[$this + 4 >> 2] | 0);
 return;
}

function __ZZN8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE6createINS2_IS9_SB_NS1_4lessIvEENS7_INS1_4pairIKS9_SB_EEEEEEJRKSJ_EEEPT_DpOT0_ENKUlPSJ_E_clESR_($this, $object) {
 $this = $this | 0;
 $object = $object | 0;
 __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm($object, 12);
 return;
}

function _CharCallback($window, $key) {
 $window = $window | 0;
 $key = $key | 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 HEAP32[sp + 4 >> 2] = $window;
 HEAP32[sp >> 2] = $key;
 if ((HEAP32[14986] | 0) >= 16) {
  STACKTOP = sp;
  return;
 }
 HEAP32[14986] = (HEAP32[14986] | 0) + 1;
 STACKTOP = sp;
 return;
}

function __ZNSt3__212_GLOBAL__N_110as_integerIiNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEET_RKS7_RKT0_Pmi($func, $s, $idx, $base) {
 $func = $func | 0;
 $s = $s | 0;
 $idx = $idx | 0;
 $base = $base | 0;
 return __ZNSt3__212_GLOBAL__N_117as_integer_helperIlNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPFlPKcPPciEEET_RKS7_RKT0_PmiT1_($func, $s, $idx, $base) | 0;
}

function _stbir__use_upsampling($ratio) {
 $ratio = Math_fround($ratio);
 var $conv = 0, $ratio$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $ratio$addr = sp;
 HEAPF32[$ratio$addr >> 2] = $ratio;
 $conv = Math_fround(HEAPF32[$ratio$addr >> 2]) > Math_fround(1.0) & 1;
 STACKTOP = sp;
 return $conv | 0;
}

function __ZNSt3__28functionIFbiN8nlohmann6detail6parserINS1_10basic_jsonINS_3mapENS_6vectorENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEbxydSA_NS1_14adl_serializerEEEE13parse_event_tERSE_EED2Ev($this) {
 $this = $this | 0;
 var $1 = 0;
 $1 = HEAP32[(HEAP32[$this + 12 >> 2] | 0) + 4 >> 2] | 0;
 if ($1 | 0) FUNCTION_TABLE_vi[$1 & 255](HEAP32[$this >> 2] | 0);
 return;
}

function __ZNSt3__24__fs10filesystem20__is_pathable_stringINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEvE11__range_endERKS8_($__s) {
 $__s = $__s | 0;
 var $0 = 0, $tobool$i$i$i = 0;
 $0 = HEAP8[$__s + 11 >> 0] | 0;
 $tobool$i$i$i = $0 << 24 >> 24 < 0;
 return ($tobool$i$i$i ? HEAP32[$__s >> 2] | 0 : $__s) + ($tobool$i$i$i ? HEAP32[$__s + 4 >> 2] | 0 : $0 & 255) | 0;
}

function __ZN8nlohmann6detail20input_stream_adapterD2Ev($this) {
 $this = $this | 0;
 var $0 = 0, $add$ptr = 0;
 HEAP32[$this >> 2] = 17816;
 $0 = HEAP32[$this + 4 >> 2] | 0;
 $add$ptr = $0 + (HEAP32[(HEAP32[$0 >> 2] | 0) + -12 >> 2] | 0) | 0;
 __ZNSt3__28ios_base5clearEj($add$ptr, HEAP32[$add$ptr + 16 >> 2] & 2);
 __ZN8nlohmann6detail22input_adapter_protocolD2Ev($this);
 return;
}

function __ZNKSt3__28numpunctIwE12do_falsenameEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 HEAP32[$agg$result >> 2] = 0;
 HEAP32[$agg$result + 4 >> 2] = 0;
 HEAP32[$agg$result + 8 >> 2] = 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwm($agg$result, 21516, __ZNSt3__211char_traitsIwE6lengthEPKw(21516) | 0);
 return;
}

function __ZNKSt3__28numpunctIcE12do_falsenameEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 HEAP32[$agg$result >> 2] = 0;
 HEAP32[$agg$result + 4 >> 2] = 0;
 HEAP32[$agg$result + 8 >> 2] = 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcm($agg$result, 44909, __ZNSt3__211char_traitsIcE6lengthEPKc(44909) | 0);
 return;
}

function _snprintf($s, $n, $fmt, $varargs) {
 $s = $s | 0;
 $n = $n | 0;
 $fmt = $fmt | 0;
 $varargs = $varargs | 0;
 var $ap = 0, $call = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $ap = sp;
 HEAP32[$ap >> 2] = $varargs;
 $call = _vsnprintf($s, $n, $fmt, $ap) | 0;
 STACKTOP = sp;
 return $call | 0;
}

function __ZNKSt3__28numpunctIwE11do_truenameEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 HEAP32[$agg$result >> 2] = 0;
 HEAP32[$agg$result + 4 >> 2] = 0;
 HEAP32[$agg$result + 8 >> 2] = 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwm($agg$result, 21540, __ZNSt3__211char_traitsIwE6lengthEPKw(21540) | 0);
 return;
}

function __ZNKSt3__28numpunctIcE11do_truenameEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 HEAP32[$agg$result >> 2] = 0;
 HEAP32[$agg$result + 4 >> 2] = 0;
 HEAP32[$agg$result + 8 >> 2] = 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcm($agg$result, 44915, __ZNSt3__211char_traitsIcE6lengthEPKc(44915) | 0);
 return;
}

function __ZN8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE6createINS3_ISB_NS7_ISB_EEEEJEEEPT_DpOT0_() {
 var $call2$i$i$i = 0;
 $call2$i$i$i = __Znwm(12) | 0;
 HEAP32[$call2$i$i$i >> 2] = 0;
 HEAP32[$call2$i$i$i + 4 >> 2] = 0;
 HEAP32[$call2$i$i$i + 8 >> 2] = 0;
 return $call2$i$i$i | 0;
}

function __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE7seekposENS_4fposI11__mbstate_tEEj($agg$result, $this, $0, $1) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $6 = 0;
 $2 = $agg$result;
 HEAP32[$2 >> 2] = 0;
 HEAP32[$2 + 4 >> 2] = 0;
 $6 = $agg$result + 8 | 0;
 HEAP32[$6 >> 2] = -1;
 HEAP32[$6 + 4 >> 2] = -1;
 return;
}

function __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE7seekposENS_4fposI11__mbstate_tEEj($agg$result, $this, $0, $1) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $6 = 0;
 $2 = $agg$result;
 HEAP32[$2 >> 2] = 0;
 HEAP32[$2 + 4 >> 2] = 0;
 $6 = $agg$result + 8 | 0;
 HEAP32[$6 >> 2] = -1;
 HEAP32[$6 + 4 >> 2] = -1;
 return;
}

function __ZN8nlohmann6detail5lexerINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE3addEi($this, $c) {
 $this = $this | 0;
 $c = $c | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($this + 40 | 0, __ZNSt3__211char_traitsIcE12to_char_typeEi($c) | 0);
 return;
}

function _abort_message($format, $varargs) {
 $format = $format | 0;
 $varargs = $varargs | 0;
 var $0 = 0, $list = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $list = sp;
 HEAP32[$list >> 2] = $varargs;
 $0 = HEAP32[4501] | 0;
 _vfprintf($0, $format, $list) | 0;
 _fputc(10, $0) | 0;
 _abort();
}

function __ZNSt3__212_GLOBAL__N_111__fake_bindC2EMNS_6locale2idEFvvEPS3_($this, $0, $id) {
 $this = $this | 0;
 $0 = $0 | 0;
 $id = $id | 0;
 var $pmf$unpack = 0, $pmf$unpack2 = 0;
 $pmf$unpack = HEAP32[$0 >> 2] | 0;
 $pmf$unpack2 = HEAP32[$0 + 4 >> 2] | 0;
 HEAP32[$this >> 2] = $id;
 HEAP32[$this + 4 >> 2] = $pmf$unpack;
 HEAP32[$this + 8 >> 2] = $pmf$unpack2;
 return;
}

function __ZN8nlohmann6detail20input_stream_adapterC2ERNSt3__213basic_istreamIcNS2_11char_traitsIcEEEE($this, $i) {
 $this = $this | 0;
 $i = $i | 0;
 __ZN8nlohmann6detail22input_adapter_protocolC2Ev($this);
 HEAP32[$this >> 2] = 17816;
 HEAP32[$this + 4 >> 2] = $i;
 HEAP32[$this + 8 >> 2] = HEAP32[$i + (HEAP32[(HEAP32[$i >> 2] | 0) + -12 >> 2] | 0) + 24 >> 2];
 return;
}

function __ZNSt3__23mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN4tson8PropertyENS_4lessIS6_EENS4_INS_4pairIKS6_S8_EEEEED2Ev($this) {
 $this = $this | 0;
 __ZNSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN4tson8PropertyEEENS_19__map_value_compareIS7_SA_NS_4lessIS7_EELb1EEENS5_ISA_EEED2Ev($this);
 return;
}

function _GetKeyStatus($key) {
 $key = $key | 0;
 var $key$addr = 0, $tobool = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $key$addr = sp;
 HEAP32[$key$addr >> 2] = $key;
 $tobool = (_glfwGetKey(HEAP32[14954] | 0, HEAP32[$key$addr >> 2] | 0) | 0) != 0;
 STACKTOP = sp;
 return $tobool | 0;
}

function _feof($f) {
 $f = $f | 0;
 var $and$lobit = 0, $and$lobit9 = 0, $phitmp = 0;
 if ((HEAP32[$f + 76 >> 2] | 0) > -1) {
  $phitmp = (___lockfile($f) | 0) == 0;
  $and$lobit = (HEAP32[$f >> 2] | 0) >>> 4 & 1;
  if ($phitmp) $and$lobit9 = $and$lobit; else $and$lobit9 = $and$lobit;
 } else $and$lobit9 = (HEAP32[$f >> 2] | 0) >>> 4 & 1;
 return $and$lobit9 | 0;
}

function __ZZN8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE6createINS3_ISB_NS7_ISB_EEEEJRKSE_EEEPT_DpOT0_ENKUlPSE_E_clESM_($this, $object) {
 $this = $this | 0;
 $object = $object | 0;
 __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm($object, 12);
 return;
}

function __ZNSt3__26__treeINS_12__value_typeIiPN4tson4TileEEENS_19__map_value_compareIiS5_NS_4lessIiEELb1EEENS_9allocatorIS5_EEED2Ev($this) {
 $this = $this | 0;
 __ZNSt3__26__treeINS_12__value_typeIiPN4tson4TileEEENS_19__map_value_compareIiS5_NS_4lessIiEELb1EEENS_9allocatorIS5_EEE7destroyEPNS_11__tree_nodeIS5_PvEE($this, HEAP32[$this + 4 >> 2] | 0);
 return;
}

function _fprintf($f, $fmt, $varargs) {
 $f = $f | 0;
 $fmt = $fmt | 0;
 $varargs = $varargs | 0;
 var $ap = 0, $call = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $ap = sp;
 HEAP32[$ap >> 2] = $varargs;
 $call = _vfprintf($f, $fmt, $ap) | 0;
 STACKTOP = sp;
 return $call | 0;
}

function _sscanf($s, $fmt, $varargs) {
 $s = $s | 0;
 $fmt = $fmt | 0;
 $varargs = $varargs | 0;
 var $ap = 0, $call = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $ap = sp;
 HEAP32[$ap >> 2] = $varargs;
 $call = _vsscanf($s, $fmt, $ap) | 0;
 STACKTOP = sp;
 return $call | 0;
}

function __ZNKSt3__28messagesIwE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE($this, $__nm, $0) {
 $this = $this | 0;
 $__nm = $__nm | 0;
 $0 = $0 | 0;
 var $call2 = 0;
 $call2 = _catopen((HEAP8[$__nm + 11 >> 0] | 0) < 0 ? HEAP32[$__nm >> 2] | 0 : $__nm, 1) | 0;
 return $call2 >>> (($call2 | 0) != (-1 | 0) & 1) | 0;
}

function __ZNKSt3__28messagesIcE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE($this, $__nm, $0) {
 $this = $this | 0;
 $__nm = $__nm | 0;
 $0 = $0 | 0;
 var $call2 = 0;
 $call2 = _catopen((HEAP8[$__nm + 11 >> 0] | 0) < 0 ? HEAP32[$__nm >> 2] | 0 : $__nm, 1) | 0;
 return $call2 >>> (($call2 | 0) != (-1 | 0) & 1) | 0;
}

function __ZNSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN4tson8PropertyEEENS_19__map_value_compareIS7_SA_NS_4lessIS7_EELb1EEENS5_ISA_EEEC2ERKSE_($this, $__comp) {
 $this = $this | 0;
 $__comp = $__comp | 0;
 HEAP32[$this + 4 >> 2] = 0;
 HEAP32[$this + 8 >> 2] = 0;
 HEAP32[$this >> 2] = $this + 4;
 return;
}

function _srand($s) {
 $s = $s | 0;
 var $0 = 0, $4 = 0, $seed = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $seed = sp;
 $0 = $seed;
 HEAP32[$0 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 $4 = $seed;
 HEAP32[$4 >> 2] = $s + -1;
 HEAP32[$4 + 4 >> 2] = 0;
 STACKTOP = sp;
 return;
}

function __ZSt9terminatev() {
 var $0 = 0, $call = 0;
 $call = ___cxa_get_globals_fast() | 0;
 if ($call | 0) {
  $0 = HEAP32[$call >> 2] | 0;
  if ($0 | 0) if (__ZN10__cxxabiv121__isOurExceptionClassEPK17_Unwind_Exception($0 + 48 | 0) | 0) __ZSt11__terminatePFvvE(HEAP32[$0 + 12 >> 2] | 0);
 }
 __ZSt11__terminatePFvvE(__ZSt13get_terminatev() | 0);
}

function __ZNSt3__28ios_baseD2Ev($this) {
 $this = $this | 0;
 HEAP32[$this >> 2] = 18636;
 __ZNSt3__28ios_base16__call_callbacksENS0_5eventE($this, 0);
 __ZNSt3__26localeD2Ev($this + 28 | 0);
 _free(HEAP32[$this + 32 >> 2] | 0);
 _free(HEAP32[$this + 36 >> 2] | 0);
 _free(HEAP32[$this + 48 >> 2] | 0);
 _free(HEAP32[$this + 60 >> 2] | 0);
 return;
}

function __ZN4tson5Layer13assignTileMapERKNSt3__23mapIiPNS_4TileENS1_4lessIiEENS1_9allocatorINS1_4pairIKiS4_EEEEEE($this, $tileMap) {
 $this = $this | 0;
 $tileMap = $tileMap | 0;
 __ZNSt3__26__treeINS_12__value_typeIiPN4tson4TileEEENS_19__map_value_compareIiS5_NS_4lessIiEELb1EEENS_9allocatorIS5_EEEaSERKSC_($this + 196 | 0, $tileMap) | 0;
 return;
}

function __ZNSt3__26localeD2Ev($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $__shared_owners_$i = 0;
 $0 = HEAP32[$this >> 2] | 0;
 $__shared_owners_$i = $0 + 4 | 0;
 $1 = HEAP32[$__shared_owners_$i >> 2] | 0;
 HEAP32[$__shared_owners_$i >> 2] = $1 + -1;
 if (!$1) FUNCTION_TABLE_vi[HEAP32[(HEAP32[$0 >> 2] | 0) + 8 >> 2] & 255]($0);
 return;
}

function __ZZN8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE6createIS9_JRA1_KcEEEPT_DpOT0_ENKUlPS9_E_clESL_($this, $object) {
 $this = $this | 0;
 $object = $object | 0;
 __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm($object, 12);
 return;
}

function __ZNK8nlohmann6detail5lexerINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE19get_number_unsignedEv($this) {
 $this = $this | 0;
 var $0 = 0, $2 = 0;
 $0 = $this + 64 | 0;
 $2 = HEAP32[$0 >> 2] | 0;
 setTempRet0(HEAP32[$0 + 4 >> 2] | 0);
 return $2 | 0;
}

function __ZN8nlohmann6detail19json_sax_dom_parserINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE10end_objectEv($this) {
 $this = $this | 0;
 var $__end_$i = 0;
 $__end_$i = $this + 8 | 0;
 HEAP32[$__end_$i >> 2] = (HEAP32[$__end_$i >> 2] | 0) + -4;
 return 1;
}

function __ZZN8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE6createIS9_JRKS9_EEEPT_DpOT0_ENKUlPS9_E_clESK_($this, $object) {
 $this = $this | 0;
 $object = $object | 0;
 __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm($object, 12);
 return;
}

function __ZNKSt3__27codecvtIcc11__mbstate_tE6do_outERS1_PKcS5_RS5_PcS7_RS7_($this, $0, $frm, $1, $frm_nxt, $to, $2, $to_nxt) {
 $this = $this | 0;
 $0 = $0 | 0;
 $frm = $frm | 0;
 $1 = $1 | 0;
 $frm_nxt = $frm_nxt | 0;
 $to = $to | 0;
 $2 = $2 | 0;
 $to_nxt = $to_nxt | 0;
 HEAP32[$frm_nxt >> 2] = $frm;
 HEAP32[$to_nxt >> 2] = $to;
 return 3;
}

function __ZNK8nlohmann6detail5lexerINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE18get_number_integerEv($this) {
 $this = $this | 0;
 var $0 = 0, $2 = 0;
 $0 = $this + 56 | 0;
 $2 = HEAP32[$0 >> 2] | 0;
 setTempRet0(HEAP32[$0 + 4 >> 2] | 0);
 return $2 | 0;
}

function __ZN4tson4TextC2EOS0_($this, $0) {
 $this = $this | 0;
 $0 = $0 | 0;
 HEAP32[$this >> 2] = HEAP32[$0 >> 2];
 HEAP32[$this + 4 >> 2] = HEAP32[$0 + 4 >> 2];
 HEAP32[$this + 8 >> 2] = HEAP32[$0 + 8 >> 2];
 HEAP32[$0 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 0;
 HEAP8[$this + 12 >> 0] = HEAP8[$0 + 12 >> 0] | 0;
 return;
}

function __ZNKSt3__27codecvtIcc11__mbstate_tE5do_inERS1_PKcS5_RS5_PcS7_RS7_($this, $0, $frm, $1, $frm_nxt, $to, $2, $to_nxt) {
 $this = $this | 0;
 $0 = $0 | 0;
 $frm = $frm | 0;
 $1 = $1 | 0;
 $frm_nxt = $frm_nxt | 0;
 $to = $to | 0;
 $2 = $2 | 0;
 $to_nxt = $to_nxt | 0;
 HEAP32[$frm_nxt >> 2] = $frm;
 HEAP32[$to_nxt >> 2] = $to;
 return 3;
}

function __ZN8nlohmann6detail19json_sax_dom_parserINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE9end_arrayEv($this) {
 $this = $this | 0;
 var $__end_$i = 0;
 $__end_$i = $this + 8 | 0;
 HEAP32[$__end_$i >> 2] = (HEAP32[$__end_$i >> 2] | 0) + -4;
 return 1;
}

function _stbi__stdio_eof($user) {
 $user = $user | 0;
 var $call = 0, $user$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $user$addr = sp;
 HEAP32[$user$addr >> 2] = $user;
 $call = _feof(HEAP32[$user$addr >> 2] | 0) | 0;
 STACKTOP = sp;
 return $call | 0;
}

function _stbi__malloc($size) {
 $size = $size | 0;
 var $call = 0, $size$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $size$addr = sp;
 HEAP32[$size$addr >> 2] = $size;
 $call = _malloc(HEAP32[$size$addr >> 2] | 0) | 0;
 STACKTOP = sp;
 return $call | 0;
}

function __ZNKSt3__210moneypunctIwLb1EE16do_negative_signEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 HEAP32[$agg$result >> 2] = 0;
 HEAP32[$agg$result + 4 >> 2] = 0;
 HEAP32[$agg$result + 8 >> 2] = 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEmw($agg$result, 1, 45);
 return;
}

function __ZNKSt3__210moneypunctIwLb0EE16do_negative_signEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 HEAP32[$agg$result >> 2] = 0;
 HEAP32[$agg$result + 4 >> 2] = 0;
 HEAP32[$agg$result + 8 >> 2] = 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEmw($agg$result, 1, 45);
 return;
}

function __ZNKSt3__210moneypunctIcLb1EE16do_negative_signEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 HEAP32[$agg$result >> 2] = 0;
 HEAP32[$agg$result + 4 >> 2] = 0;
 HEAP32[$agg$result + 8 >> 2] = 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEmc($agg$result, 1, 45);
 return;
}

function __ZNKSt3__210moneypunctIcLb0EE16do_negative_signEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 HEAP32[$agg$result >> 2] = 0;
 HEAP32[$agg$result + 4 >> 2] = 0;
 HEAP32[$agg$result + 8 >> 2] = 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEmc($agg$result, 1, 45);
 return;
}

function __ZNSt3__214__num_get_base10__get_baseERNS_8ios_baseE($iob) {
 $iob = $iob | 0;
 var $retval$0 = 0;
 switch (HEAP32[$iob + 4 >> 2] & 74) {
 case 64:
  {
   $retval$0 = 8;
   break;
  }
 case 8:
  {
   $retval$0 = 16;
   break;
  }
 case 0:
  {
   $retval$0 = 0;
   break;
  }
 default:
  $retval$0 = 10;
 }
 return $retval$0 | 0;
}

function _wmemset($d, $c, $n) {
 $d = $d | 0;
 $c = $c | 0;
 $n = $n | 0;
 var $d$addr$05 = 0, $n$addr$04 = 0;
 if ($n | 0) {
  $d$addr$05 = $d;
  $n$addr$04 = $n;
  while (1) {
   $n$addr$04 = $n$addr$04 + -1 | 0;
   HEAP32[$d$addr$05 >> 2] = $c;
   if (!$n$addr$04) break; else $d$addr$05 = $d$addr$05 + 4 | 0;
  }
 }
 return $d | 0;
}

function __ZNSt3__213__vector_baseIN4tson7Vector2IiEENS_9allocatorIS3_EEED2Ev($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0;
 $0 = HEAP32[$this >> 2] | 0;
 $1 = $0;
 if ($0 | 0) {
  HEAP32[$this + 4 >> 2] = $1;
  __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm($0, (HEAP32[$this + 8 >> 2] | 0) - $1 | 0);
 }
 return;
}

function _rlNormal3f($x, $y, $z) {
 $x = Math_fround($x);
 $y = Math_fround($y);
 $z = Math_fround($z);
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 HEAPF32[sp + 8 >> 2] = $x;
 HEAPF32[sp + 4 >> 2] = $y;
 HEAPF32[sp >> 2] = $z;
 STACKTOP = sp;
 return;
}

function dynCall_viiiiiiiii(index, a1, a2, a3, a4, a5, a6, a7, a8, a9) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 a7 = a7 | 0;
 a8 = a8 | 0;
 a9 = a9 | 0;
 FUNCTION_TABLE_viiiiiiiii[index & 3](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0, a7 | 0, a8 | 0, a9 | 0);
}

function __ZNSt3__213__vector_baseIN4tson5FrameENS_9allocatorIS2_EEED2Ev($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0;
 $0 = HEAP32[$this >> 2] | 0;
 $1 = $0;
 if ($0 | 0) {
  HEAP32[$this + 4 >> 2] = $1;
  __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm($0, (HEAP32[$this + 8 >> 2] | 0) - $1 | 0);
 }
 return;
}

function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6insertEmPKc($this, $__pos, $__s) {
 $this = $this | 0;
 $__pos = $__pos | 0;
 $__s = $__s | 0;
 return __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6insertEmPKcm($this, $__pos, $__s, __ZNSt3__211char_traitsIcE6lengthEPKc($__s) | 0) | 0;
}

function __ZNSt3__24__fs10filesystem6detail12_GLOBAL__N_113capture_errnoEv($agg$result) {
 $agg$result = $agg$result | 0;
 var $0 = 0, $call1 = 0;
 $0 = HEAP32[(___errno_location() | 0) >> 2] | 0;
 $call1 = __ZNSt3__216generic_categoryEv() | 0;
 HEAP32[$agg$result >> 2] = $0;
 HEAP32[$agg$result + 4 >> 2] = $call1;
 return;
}

function __ZNSt3__220__shared_ptr_emplaceIN8nlohmann6detail20input_stream_adapterENS_9allocatorIS3_EEED2Ev($this) {
 $this = $this | 0;
 HEAP32[$this >> 2] = 17788;
 __ZNSt3__222__compressed_pair_elemIN8nlohmann6detail20input_stream_adapterELi1ELb0EED2Ev($this + 12 | 0);
 __ZNSt3__214__shared_countD2Ev($this);
 return;
}

function _WindowIconifyCallback($window, $iconified) {
 $window = $window | 0;
 $iconified = $iconified | 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 HEAP32[sp + 4 >> 2] = $window;
 HEAP32[sp >> 2] = $iconified;
 STACKTOP = sp;
 return;
}

function __ZNSt3__211__call_onceERVmPvPFvS2_E($flag, $arg, $func) {
 $flag = $flag | 0;
 $arg = $arg | 0;
 $func = $func | 0;
 do {} while ((HEAP32[$flag >> 2] | 0) == 1);
 if (!(HEAP32[$flag >> 2] | 0)) {
  HEAP32[$flag >> 2] = 1;
  FUNCTION_TABLE_vi[$func & 255]($arg);
  HEAP32[$flag >> 2] = -1;
 } else {}
 return;
}

function __ZNSt3__26__treeINS_12__value_typeINS_5tupleIJiiEEEPN4tson4TileEEENS_19__map_value_compareIS3_S7_NS_4lessIS3_EELb1EEENS_9allocatorIS7_EEEC2ERKSB_($this, $__comp) {
 $this = $this | 0;
 $__comp = $__comp | 0;
 HEAP32[$this + 4 >> 2] = 0;
 HEAP32[$this + 8 >> 2] = 0;
 HEAP32[$this >> 2] = $this + 4;
 return;
}

function __ZNSt3__213__vector_baseIiNS_9allocatorIiEEED2Ev($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0;
 $0 = HEAP32[$this >> 2] | 0;
 $1 = $0;
 if ($0 | 0) {
  HEAP32[$this + 4 >> 2] = $1;
  __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm($0, (HEAP32[$this + 8 >> 2] | 0) - $1 | 0);
 }
 return;
}

function __ZNSt3__213__vector_baseIcNS_9allocatorIcEEED2Ev($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0;
 $0 = HEAP32[$this >> 2] | 0;
 $1 = $0;
 if ($0 | 0) {
  HEAP32[$this + 4 >> 2] = $1;
  __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm($0, (HEAP32[$this + 8 >> 2] | 0) - $1 | 0);
 }
 return;
}

function __ZN8nlohmann6detail5lexerINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE6strtofERdPKcPPc($f, $str, $endptr) {
 $f = $f | 0;
 $str = $str | 0;
 $endptr = $endptr | 0;
 HEAPF64[$f >> 3] = +_strtod($str, $endptr);
 return;
}

function __ZN8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE10json_valueC2Ey($this, $0, $1) {
 $this = $this | 0;
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = $this;
 HEAP32[$2 >> 2] = $0;
 HEAP32[$2 + 4 >> 2] = $1;
 return;
}

function __ZN8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE10json_valueC2Ex($this, $0, $1) {
 $this = $this | 0;
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = $this;
 HEAP32[$2 >> 2] = $0;
 HEAP32[$2 + 4 >> 2] = $1;
 return;
}

function __ZN4tson8PropertyD2Ev($this) {
 $this = $this | 0;
 var $0 = 0, $m_value = 0;
 $m_value = $this + 16 | 0;
 $0 = HEAP32[$m_value >> 2] | 0;
 if ($0 | 0) FUNCTION_TABLE_iiiiii[$0 & 31](0, $m_value, 0, 0, 0) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($this + 4 | 0);
 return;
}

function dynCall_iiiiiiiii(index, a1, a2, a3, a4, a5, a6, a7, a8) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 a7 = a7 | 0;
 a8 = a8 | 0;
 return FUNCTION_TABLE_iiiiiiiii[index & 15](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0, a7 | 0, a8 | 0) | 0;
}

function __ZNSt3__2lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($__os, $__str) {
 $__os = $__os | 0;
 $__str = $__str | 0;
 return __ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m($__os, $__str, __ZNSt3__211char_traitsIcE6lengthEPKc($__str) | 0) | 0;
}

function __ZN4tson18PropertyCollectionD2Ev($this) {
 $this = $this | 0;
 __ZNSt3__23mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN4tson8PropertyENS_4lessIS6_EENS4_INS_4pairIKS6_S8_EEEEED2Ev($this + 12 | 0);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($this);
 return;
}

function __ZNSt3__27codecvtIwc11__mbstate_tED2Ev($this) {
 $this = $this | 0;
 var $0 = 0, $__l = 0;
 HEAP32[$this >> 2] = 21324;
 $__l = $this + 8 | 0;
 $0 = HEAP32[$__l >> 2] | 0;
 if (($0 | 0) != (__ZNSt3__26__clocEv() | 0)) _freelocale(HEAP32[$__l >> 2] | 0);
 __ZNSt3__26locale5facetD2Ev($this);
 return;
}

function __ZNSt3__220__shared_ptr_emplaceIN8nlohmann6detail20input_stream_adapterENS_9allocatorIS3_EEE16__on_zero_sharedEv($this) {
 $this = $this | 0;
 var $__value_$i$i = 0;
 $__value_$i$i = $this + 12 | 0;
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[$__value_$i$i >> 2] | 0) + 4 >> 2] & 255]($__value_$i$i);
 return;
}

function __ZN8nlohmann6detail11parse_errorC2EimPKc($this, $id_, $byte_, $what_arg) {
 $this = $this | 0;
 $id_ = $id_ | 0;
 $byte_ = $byte_ | 0;
 $what_arg = $what_arg | 0;
 __ZN8nlohmann6detail9exceptionC2EiPKc($this, $id_, $what_arg);
 HEAP32[$this >> 2] = 17624;
 HEAP32[$this + 16 >> 2] = $byte_;
 return;
}

function __ZNSt3__26localeC2Ev($this) {
 $this = $this | 0;
 var $0 = 0, $__shared_owners_$i = 0;
 $0 = HEAP32[(__ZNSt3__26locale8__globalEv() | 0) >> 2] | 0;
 HEAP32[$this >> 2] = $0;
 $__shared_owners_$i = $0 + 4 | 0;
 HEAP32[$__shared_owners_$i >> 2] = (HEAP32[$__shared_owners_$i >> 2] | 0) + 1;
 return;
}

function __ZNKSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8nlohmann10basic_jsonINS_3mapENS_6vectorES7_bxydS5_NS8_14adl_serializerEEEEENS_19__map_value_compareIS7_SE_NS_4lessIvEELb1EEENS5_ISE_EEE10__root_ptrEv($this) {
 $this = $this | 0;
 return $this + 4 | 0;
}

function __ZNKSt3__27codecvtIcc11__mbstate_tE9do_lengthERS1_PKcS5_m($this, $0, $frm, $end, $mx) {
 $this = $this | 0;
 $0 = $0 | 0;
 $frm = $frm | 0;
 $end = $end | 0;
 $mx = $mx | 0;
 var $sub$ptr$sub = 0;
 $sub$ptr$sub = $end - $frm | 0;
 return ($sub$ptr$sub >>> 0 < $mx >>> 0 ? $sub$ptr$sub : $mx) | 0;
}

function __ZL8is_equalPKSt9type_infoS1_b($x, $y, $use_strcmp) {
 $x = $x | 0;
 $y = $y | 0;
 $use_strcmp = $use_strcmp | 0;
 var $retval$0 = 0;
 if ($use_strcmp) $retval$0 = (_strcmp(HEAP32[$x + 4 >> 2] | 0, HEAP32[$y + 4 >> 2] | 0) | 0) == 0; else $retval$0 = ($x | 0) == ($y | 0);
 return $retval$0 | 0;
}

function __ZN4tson6Object3getIiEET_RKNSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEE($this, $name) {
 $this = $this | 0;
 $name = $name | 0;
 return __ZN4tson18PropertyCollection8getValueIiEET_RKNSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEE($this + 60 | 0, $name) | 0;
}

function __ZNKSt3__27codecvtIDsc11__mbstate_tE9do_lengthERS1_PKcS5_m($this, $0, $frm, $frm_end, $mx) {
 $this = $this | 0;
 $0 = $0 | 0;
 $frm = $frm | 0;
 $frm_end = $frm_end | 0;
 $mx = $mx | 0;
 return __ZNSt3__2L20utf8_to_utf16_lengthEPKhS1_mmNS_12codecvt_modeE($frm, $frm_end, $mx, 1114111, 0) | 0;
}

function __ZNKSt3__27codecvtIDic11__mbstate_tE9do_lengthERS1_PKcS5_m($this, $0, $frm, $frm_end, $mx) {
 $this = $this | 0;
 $0 = $0 | 0;
 $frm = $frm | 0;
 $frm_end = $frm_end | 0;
 $mx = $mx | 0;
 return __ZNSt3__2L19utf8_to_ucs4_lengthEPKhS1_mmNS_12codecvt_modeE($frm, $frm_end, $mx, 1114111, 0) | 0;
}

function __ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc($this, $__s) {
 $this = $this | 0;
 $__s = $__s | 0;
 return __ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEmmPKcm($this, 0, -1, $__s, __ZNSt3__211char_traitsIcE6lengthEPKc($__s) | 0) | 0;
}

function _CursorEnterCallback($window, $enter) {
 $window = $window | 0;
 $enter = $enter | 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 HEAP32[sp + 4 >> 2] = $window;
 HEAP32[sp >> 2] = $enter;
 STACKTOP = sp;
 return;
}

function dynCall_viiiiiiii(index, a1, a2, a3, a4, a5, a6, a7, a8) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 a7 = a7 | 0;
 a8 = a8 | 0;
 FUNCTION_TABLE_viiiiiiii[index & 3](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0, a7 | 0, a8 | 0);
}

function _stbi__err($str) {
 $str = $str | 0;
 var $str$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $str$addr = sp;
 HEAP32[$str$addr >> 2] = $str;
 HEAP32[15008] = HEAP32[$str$addr >> 2];
 STACKTOP = sp;
 return 0;
}

function __ZNSt3__26__treeINS_12__value_typeIiPN4tson4TileEEENS_19__map_value_compareIiS5_NS_4lessIiEELb1EEENS_9allocatorIS5_EEEC2ERKS9_($this, $__comp) {
 $this = $this | 0;
 $__comp = $__comp | 0;
 HEAP32[$this + 4 >> 2] = 0;
 HEAP32[$this + 8 >> 2] = 0;
 HEAP32[$this >> 2] = $this + 4;
 return;
}

function _GetFontDefault($agg$result) {
 $agg$result = $agg$result | 0;
 var dest = 0, src = 0, stop = 0;
 dest = $agg$result;
 src = 59992;
 stop = dest + 36 | 0;
 do {
  HEAP32[dest >> 2] = HEAP32[src >> 2];
  dest = dest + 4 | 0;
  src = src + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 return;
}

function __ZNSt3__26localeC2ERKS0_($this, $l) {
 $this = $this | 0;
 $l = $l | 0;
 var $0 = 0, $__shared_owners_$i = 0;
 $0 = HEAP32[$l >> 2] | 0;
 HEAP32[$this >> 2] = $0;
 $__shared_owners_$i = $0 + 4 | 0;
 HEAP32[$__shared_owners_$i >> 2] = (HEAP32[$__shared_owners_$i >> 2] | 0) + 1;
 return;
}

function __ZNSt3__23mapINS_5tupleIJiiEEEPN4tson4TileENS_4lessIS2_EENS_9allocatorINS_4pairIKS2_S5_EEEEED2Ev($this) {
 $this = $this | 0;
 __ZNSt3__26__treeINS_12__value_typeINS_5tupleIJiiEEEPN4tson4TileEEENS_19__map_value_compareIS3_S7_NS_4lessIS3_EELb1EEENS_9allocatorIS7_EEED2Ev($this);
 return;
}

function __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($this) {
 $this = $this | 0;
 var $0 = 0;
 $0 = $this + 8 | 0;
 if ((HEAP8[$0 + 3 >> 0] | 0) < 0) __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm(HEAP32[$this >> 2] | 0, HEAP32[$0 >> 2] << 2);
 return;
}

function dynCall_viffff(index, a1, a2, a3, a4, a5) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = Math_fround(a2);
 a3 = Math_fround(a3);
 a4 = Math_fround(a4);
 a5 = Math_fround(a5);
 FUNCTION_TABLE_viffff[index & 3](a1 | 0, Math_fround(a2), Math_fround(a3), Math_fround(a4), Math_fround(a5));
}

function __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw($this, $__s) {
 $this = $this | 0;
 $__s = $__s | 0;
 return __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKwm($this, $__s, __ZNSt3__211char_traitsIwE6lengthEPKw($__s) | 0) | 0;
}

function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc($this, $__s) {
 $this = $this | 0;
 $__s = $__s | 0;
 return __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcm($this, $__s, __ZNSt3__211char_traitsIcE6lengthEPKc($__s) | 0) | 0;
}

function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc($this, $__s) {
 $this = $this | 0;
 $__s = $__s | 0;
 return __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcm($this, $__s, __ZNSt3__211char_traitsIcE6lengthEPKc($__s) | 0) | 0;
}

function __ZNKSt3__26locale5__imp9has_facetEl($this, $id) {
 $this = $this | 0;
 $id = $id | 0;
 var $1 = 0, $4 = 0;
 $1 = HEAP32[$this + 8 >> 2] | 0;
 if ((HEAP32[$this + 12 >> 2] | 0) - $1 >> 2 >>> 0 > $id >>> 0) $4 = (HEAP32[$1 + ($id << 2) >> 2] | 0) != 0; else $4 = 0;
 return $4 | 0;
}

function __ZNSt3__24__fs10filesystem8__statusERKNS1_4pathEPNS_10error_codeE($agg$result, $p, $ec) {
 $agg$result = $agg$result | 0;
 $p = $p | 0;
 $ec = $ec | 0;
 __ZNSt3__24__fs10filesystem6detail12_GLOBAL__N_110posix_statERKNS1_4pathEPNS_10error_codeE($agg$result, $p, $ec);
 return;
}

function dynCall_iiiiiiii(index, a1, a2, a3, a4, a5, a6, a7) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 a7 = a7 | 0;
 return FUNCTION_TABLE_iiiiiiii[index & 7](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0, a7 | 0) | 0;
}

function __ZN4tson5ColorIhEC2ERKNSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE($this, $color) {
 $this = $this | 0;
 $color = $color | 0;
 __ZN4tson5ColorIhE14parseHexStringERKNSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE($this, $color);
 return;
}

function __ZNK8nlohmann6detail28json_sax_dom_callback_parserINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE10is_erroredEv($this) {
 $this = $this | 0;
 return (HEAP8[$this + 44 >> 0] | 0) != 0 | 0;
}

function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($this) {
 $this = $this | 0;
 if ((HEAP8[$this + 11 >> 0] | 0) < 0) __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm(HEAP32[$this >> 2] | 0, HEAP32[$this + 8 >> 2] & 2147483647);
 return;
}

function _SetMatrixProjection($proj) {
 $proj = $proj | 0;
 var dest = 0, src = 0, stop = 0;
 dest = 59180;
 src = $proj;
 stop = dest + 64 | 0;
 do {
  HEAP32[dest >> 2] = HEAP32[src >> 2];
  dest = dest + 4 | 0;
  src = src + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 return;
}

function __ZNKSt3__25ctypeIwE5do_isEtw($this, $m, $c) {
 $this = $this | 0;
 $m = $m | 0;
 $c = $c | 0;
 var $cond = 0;
 if ($c >>> 0 < 128) $cond = (HEAP16[(__ZNSt3__25ctypeIcE13classic_tableEv() | 0) + ($c << 1) >> 1] & $m) << 16 >> 16 != 0; else $cond = 0;
 return $cond | 0;
}

function _SetMatrixModelview($view) {
 $view = $view | 0;
 var dest = 0, src = 0, stop = 0;
 dest = 59248;
 src = $view;
 stop = dest + 64 | 0;
 do {
  HEAP32[dest >> 2] = HEAP32[src >> 2];
  dest = dest + 4 | 0;
  src = src + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 return;
}

function _bitshift64Shl(low, high, bits) {
 low = low | 0;
 high = high | 0;
 bits = bits | 0;
 if ((bits | 0) < 32) {
  setTempRet0(high << bits | (low & (1 << bits) - 1 << 32 - bits) >>> 32 - bits | 0);
  return low << bits;
 }
 setTempRet0(low << bits - 32 | 0);
 return 0;
}

function __ZNKSt3__214error_category10equivalentERKNS_10error_codeEi($this, $code, $condition) {
 $this = $this | 0;
 $code = $code | 0;
 $condition = $condition | 0;
 return ((HEAP32[$code >> 2] | 0) == ($condition | 0) ? (HEAP32[$code + 4 >> 2] | 0) == ($this | 0) : 0) | 0;
}

function ___uselocale($new) {
 $new = $new | 0;
 var $0 = 0, $locale = 0;
 $locale = (___pthread_self_234() | 0) + 188 | 0;
 $0 = HEAP32[$locale >> 2] | 0;
 if ($new | 0) HEAP32[$locale >> 2] = ($new | 0) == (-1 | 0) ? 60076 : $new;
 return (($0 | 0) == 60076 ? -1 : $0) | 0;
}

function __ZNSt3__211char_traitsIwE7not_eofEj($__c) {
 $__c = $__c | 0;
 var $cond = 0;
 if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($__c, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) $cond = ~(__ZNSt3__211char_traitsIwE3eofEv() | 0); else $cond = $__c;
 return $cond | 0;
}

function __ZNSt3__211char_traitsIcE7not_eofEi($__c) {
 $__c = $__c | 0;
 var $cond = 0;
 if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($__c, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) $cond = ~(__ZNSt3__211char_traitsIcE3eofEv() | 0); else $cond = $__c;
 return $cond | 0;
}

function __ZN8nlohmann6detail9exceptionC2ERKS1_($this, $0) {
 $this = $this | 0;
 $0 = $0 | 0;
 __ZNSt9exceptionC2ERKS_($this, $0);
 HEAP32[$this >> 2] = 17508;
 HEAP32[$this + 4 >> 2] = HEAP32[$0 + 4 >> 2];
 __ZNSt13runtime_errorC2ERKS_($this + 8 | 0, $0 + 8 | 0);
 return;
}

function dynCall_viiiiiii(index, a1, a2, a3, a4, a5, a6, a7) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 a7 = a7 | 0;
 FUNCTION_TABLE_viiiiiii[index & 3](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0, a7 | 0);
}

function __ZNKSt3__25ctypeIcE10do_tolowerEc($this, $c) {
 $this = $this | 0;
 $c = $c | 0;
 var $cond = 0;
 if ($c << 24 >> 24 > -1) $cond = HEAP32[(__ZNSt3__25ctypeIcE21__classic_lower_tableEv() | 0) + ($c << 24 >> 24 << 2) >> 2] & 255; else $cond = $c;
 return $cond | 0;
}

function __ZNK8nlohmann6detail19json_sax_dom_parserINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE10is_erroredEv($this) {
 $this = $this | 0;
 return (HEAP8[$this + 20 >> 0] | 0) != 0 | 0;
}

function __ZNKSt3__210moneypunctIwLb1EE13do_pos_formatEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 HEAP8[$agg$result >> 0] = 2;
 HEAP8[$agg$result + 1 >> 0] = 3;
 HEAP8[$agg$result + 2 >> 0] = 0;
 HEAP8[$agg$result + 3 >> 0] = 4;
 return;
}

function __ZNKSt3__210moneypunctIwLb1EE13do_neg_formatEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 HEAP8[$agg$result >> 0] = 2;
 HEAP8[$agg$result + 1 >> 0] = 3;
 HEAP8[$agg$result + 2 >> 0] = 0;
 HEAP8[$agg$result + 3 >> 0] = 4;
 return;
}

function __ZNKSt3__210moneypunctIwLb0EE13do_pos_formatEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 HEAP8[$agg$result >> 0] = 2;
 HEAP8[$agg$result + 1 >> 0] = 3;
 HEAP8[$agg$result + 2 >> 0] = 0;
 HEAP8[$agg$result + 3 >> 0] = 4;
 return;
}

function __ZNKSt3__210moneypunctIwLb0EE13do_neg_formatEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 HEAP8[$agg$result >> 0] = 2;
 HEAP8[$agg$result + 1 >> 0] = 3;
 HEAP8[$agg$result + 2 >> 0] = 0;
 HEAP8[$agg$result + 3 >> 0] = 4;
 return;
}

function __ZNKSt3__210moneypunctIcLb1EE13do_pos_formatEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 HEAP8[$agg$result >> 0] = 2;
 HEAP8[$agg$result + 1 >> 0] = 3;
 HEAP8[$agg$result + 2 >> 0] = 0;
 HEAP8[$agg$result + 3 >> 0] = 4;
 return;
}

function __ZNKSt3__210moneypunctIcLb1EE13do_neg_formatEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 HEAP8[$agg$result >> 0] = 2;
 HEAP8[$agg$result + 1 >> 0] = 3;
 HEAP8[$agg$result + 2 >> 0] = 0;
 HEAP8[$agg$result + 3 >> 0] = 4;
 return;
}

function __ZNKSt3__210moneypunctIcLb0EE13do_pos_formatEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 HEAP8[$agg$result >> 0] = 2;
 HEAP8[$agg$result + 1 >> 0] = 3;
 HEAP8[$agg$result + 2 >> 0] = 0;
 HEAP8[$agg$result + 3 >> 0] = 4;
 return;
}

function __ZNKSt3__210moneypunctIcLb0EE13do_neg_formatEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 HEAP8[$agg$result >> 0] = 2;
 HEAP8[$agg$result + 1 >> 0] = 3;
 HEAP8[$agg$result + 2 >> 0] = 0;
 HEAP8[$agg$result + 3 >> 0] = 4;
 return;
}

function __ZNKSt3__25ctypeIcE10do_toupperEc($this, $c) {
 $this = $this | 0;
 $c = $c | 0;
 var $cond = 0;
 if ($c << 24 >> 24 > -1) $cond = HEAP32[(__ZNSt3__25ctypeIcE21__classic_upper_tableEv() | 0) + (($c & 255) << 2) >> 2] & 255; else $cond = $c;
 return $cond | 0;
}

function __ZNKSt3__220__time_get_c_storageIwE8__monthsEv($this) {
 $this = $this | 0;
 if (!(HEAP8[58616] | 0)) if (___cxa_guard_acquire(58616) | 0) {
  __ZNSt3__2L12init_wmonthsEv();
  HEAP32[15352] = 57952;
  ___cxa_guard_release(58616);
 }
 return HEAP32[15352] | 0;
}

function _bitshift64Lshr(low, high, bits) {
 low = low | 0;
 high = high | 0;
 bits = bits | 0;
 if ((bits | 0) < 32) {
  setTempRet0(high >>> bits | 0);
  return low >>> bits | (high & (1 << bits) - 1) << 32 - bits;
 }
 setTempRet0(0);
 return high >>> bits - 32 | 0;
}

function __ZNSt3__26locale5__imp7installINS_9money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($this, $f) {
 $this = $this | 0;
 $f = $f | 0;
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($this, $f, __ZNSt3__26locale2id5__getEv(61496) | 0);
 return;
}

function __ZNSt3__26locale5__imp7installINS_9money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($this, $f) {
 $this = $this | 0;
 $f = $f | 0;
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($this, $f, __ZNSt3__26locale2id5__getEv(61488) | 0);
 return;
}

function __ZNSt3__26locale5__imp7installINS_9money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($this, $f) {
 $this = $this | 0;
 $f = $f | 0;
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($this, $f, __ZNSt3__26locale2id5__getEv(61480) | 0);
 return;
}

function __ZNSt3__26locale5__imp7installINS_9money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($this, $f) {
 $this = $this | 0;
 $f = $f | 0;
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($this, $f, __ZNSt3__26locale2id5__getEv(61472) | 0);
 return;
}

function __ZNSt3__220__shared_ptr_emplaceIN8nlohmann6detail20input_stream_adapterENS_9allocatorIS3_EEED0Ev($this) {
 $this = $this | 0;
 __ZNSt3__220__shared_ptr_emplaceIN8nlohmann6detail20input_stream_adapterENS_9allocatorIS3_EEED2Ev($this);
 __ZdlPv($this);
 return;
}

function __ZNKSt3__220__time_get_c_storageIcE8__monthsEv($this) {
 $this = $this | 0;
 if (!(HEAP8[58536] | 0)) if (___cxa_guard_acquire(58536) | 0) {
  __ZNSt3__2L11init_monthsEv();
  HEAP32[15335] = 57456;
  ___cxa_guard_release(58536);
 }
 return HEAP32[15335] | 0;
}

function __ZNSt3__26locale5__imp7installINS_8time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($this, $f) {
 $this = $this | 0;
 $f = $f | 0;
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($this, $f, __ZNSt3__26locale2id5__getEv(61432) | 0);
 return;
}

function __ZNSt3__26locale5__imp7installINS_8time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($this, $f) {
 $this = $this | 0;
 $f = $f | 0;
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($this, $f, __ZNSt3__26locale2id5__getEv(61424) | 0);
 return;
}

function __ZNSt3__26locale5__imp7installINS_8time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($this, $f) {
 $this = $this | 0;
 $f = $f | 0;
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($this, $f, __ZNSt3__26locale2id5__getEv(61416) | 0);
 return;
}

function __ZNSt3__26locale5__imp7installINS_8time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($this, $f) {
 $this = $this | 0;
 $f = $f | 0;
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($this, $f, __ZNSt3__26locale2id5__getEv(61348) | 0);
 return;
}

function __ZNKSt3__220__time_get_c_storageIwE7__weeksEv($this) {
 $this = $this | 0;
 if (!(HEAP8[58632] | 0)) if (___cxa_guard_acquire(58632) | 0) {
  __ZNSt3__2L11init_wweeksEv();
  HEAP32[15353] = 58240;
  ___cxa_guard_release(58632);
 }
 return HEAP32[15353] | 0;
}

function __ZNKSt3__220__time_get_c_storageIwE7__am_pmEv($this) {
 $this = $this | 0;
 if (!(HEAP8[58600] | 0)) if (___cxa_guard_acquire(58600) | 0) {
  __ZNSt3__2L11init_wam_pmEv();
  HEAP32[15351] = 57920;
  ___cxa_guard_release(58600);
 }
 return HEAP32[15351] | 0;
}

function __ZNSt3__26locale5__imp7installINS_7num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($this, $f) {
 $this = $this | 0;
 $f = $f | 0;
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($this, $f, __ZNSt3__26locale2id5__getEv(61280) | 0);
 return;
}

function __ZNSt3__26locale5__imp7installINS_7num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($this, $f) {
 $this = $this | 0;
 $f = $f | 0;
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($this, $f, __ZNSt3__26locale2id5__getEv(61272) | 0);
 return;
}

function __ZNSt3__26locale5__imp7installINS_7num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($this, $f) {
 $this = $this | 0;
 $f = $f | 0;
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($this, $f, __ZNSt3__26locale2id5__getEv(61264) | 0);
 return;
}

function __ZNSt3__26locale5__imp7installINS_7num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($this, $f) {
 $this = $this | 0;
 $f = $f | 0;
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($this, $f, __ZNSt3__26locale2id5__getEv(61240) | 0);
 return;
}

function __ZNSt3__212_GLOBAL__N_14makeINS_8time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_() {
 HEAP32[14725] = 0;
 HEAP32[14724] = 21568;
 __ZNSt3__220__time_get_c_storageIwEC2Ev(58904);
 HEAP32[14724] = 19608;
 HEAP32[14726] = 19656;
 return;
}

function __ZNSt3__212_GLOBAL__N_14makeINS_8time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_() {
 HEAP32[14721] = 0;
 HEAP32[14720] = 21568;
 __ZNSt3__220__time_get_c_storageIcEC2Ev(58888);
 HEAP32[14720] = 19524;
 HEAP32[14722] = 19572;
 return;
}

function __ZNKSt3__220__time_get_c_storageIcE7__weeksEv($this) {
 $this = $this | 0;
 if (!(HEAP8[58552] | 0)) if (___cxa_guard_acquire(58552) | 0) {
  __ZNSt3__2L10init_weeksEv();
  HEAP32[15336] = 57744;
  ___cxa_guard_release(58552);
 }
 return HEAP32[15336] | 0;
}

function __ZNKSt3__220__time_get_c_storageIcE7__am_pmEv($this) {
 $this = $this | 0;
 if (!(HEAP8[58520] | 0)) if (___cxa_guard_acquire(58520) | 0) {
  __ZNSt3__2L10init_am_pmEv();
  HEAP32[15334] = 57424;
  ___cxa_guard_release(58520);
 }
 return HEAP32[15334] | 0;
}

function ___ofl_add($f) {
 $f = $f | 0;
 var $1 = 0, $call = 0;
 $call = ___ofl_lock() | 0;
 HEAP32[$f + 56 >> 2] = HEAP32[$call >> 2];
 $1 = HEAP32[$call >> 2] | 0;
 if ($1 | 0) HEAP32[$1 + 52 >> 2] = $f;
 HEAP32[$call >> 2] = $f;
 ___ofl_unlock();
 return $f | 0;
}

function __ZN8nlohmann6detail9exceptionC2EiPKc($this, $id_, $what_arg) {
 $this = $this | 0;
 $id_ = $id_ | 0;
 $what_arg = $what_arg | 0;
 HEAP32[$this >> 2] = 17508;
 HEAP32[$this + 4 >> 2] = $id_;
 __ZNSt13runtime_errorC2EPKc($this + 8 | 0, $what_arg);
 return;
}

function __ZNSt3__24pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN4tson8PropertyEED2Ev($this) {
 $this = $this | 0;
 __ZN4tson8PropertyD2Ev($this + 12 | 0);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($this);
 return;
}

function dynCall_vffff(index, a1, a2, a3, a4) {
 index = index | 0;
 a1 = Math_fround(a1);
 a2 = Math_fround(a2);
 a3 = Math_fround(a3);
 a4 = Math_fround(a4);
 FUNCTION_TABLE_vffff[index & 3](Math_fround(a1), Math_fround(a2), Math_fround(a3), Math_fround(a4));
}

function __ZNKSt3__29__num_getIwE10__do_widenERNS_8ios_baseEPw($this, $__iob, $__atoms) {
 $this = $this | 0;
 $__iob = $__iob | 0;
 $__atoms = $__atoms | 0;
 return __ZNKSt3__29__num_getIwE12__do_widen_pIwEEPKT_RNS_8ios_baseEPS3_($this, $__iob, $__atoms) | 0;
}

function __ZNSt3__23mapIiPN4tson4TileENS_4lessIiEENS_9allocatorINS_4pairIKiS3_EEEEED2Ev($this) {
 $this = $this | 0;
 __ZNSt3__26__treeINS_12__value_typeIiPN4tson4TileEEENS_19__map_value_compareIiS5_NS_4lessIiEELb1EEENS_9allocatorIS5_EEED2Ev($this);
 return;
}

function dynCall_iiiiiii(index, a1, a2, a3, a4, a5, a6) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 return FUNCTION_TABLE_iiiiiii[index & 63](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0) | 0;
}

function ___lctrans_impl($msg, $lm) {
 $msg = $msg | 0;
 $lm = $lm | 0;
 var $trans$0 = 0;
 if (!$lm) $trans$0 = 0; else $trans$0 = ___mo_lookup(HEAP32[$lm >> 2] | 0, HEAP32[$lm + 4 >> 2] | 0, $msg) | 0;
 return (($trans$0 | 0) == 0 ? $msg : $trans$0) | 0;
}

function __ZNK8nlohmann6detail5lexerINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE17get_error_messageEv($this) {
 $this = $this | 0;
 return HEAP32[$this + 52 >> 2] | 0;
}

function __ZNK8nlohmann6detail5lexerINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE16get_number_floatEv($this) {
 $this = $this | 0;
 return +(+HEAPF64[$this + 72 >> 3]);
}

function __ZNKSt3__25ctypeIwE10do_toupperEw($this, $c) {
 $this = $this | 0;
 $c = $c | 0;
 var $cond = 0;
 if ($c >>> 0 < 128) $cond = HEAP32[(__ZNSt3__25ctypeIcE21__classic_upper_tableEv() | 0) + ($c << 2) >> 2] | 0; else $cond = $c;
 return $cond | 0;
}

function __ZNKSt3__25ctypeIwE10do_tolowerEw($this, $c) {
 $this = $this | 0;
 $c = $c | 0;
 var $cond = 0;
 if ($c >>> 0 < 128) $cond = HEAP32[(__ZNSt3__25ctypeIcE21__classic_lower_tableEv() | 0) + ($c << 2) >> 2] | 0; else $cond = $c;
 return $cond | 0;
}

function __ZNSt3__211char_traitsIwE4moveEPwPKwm($__s1, $__s2, $__n) {
 $__s1 = $__s1 | 0;
 $__s2 = $__s2 | 0;
 $__n = $__n | 0;
 var $cond = 0;
 if (!$__n) $cond = $__s1; else {
  _wmemmove($__s1, $__s2, $__n) | 0;
  $cond = $__s1;
 }
 return $cond | 0;
}

function __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE17is_number_integerEv($this) {
 $this = $this | 0;
 return ((HEAP8[$this >> 0] | 0) + -5 & 255) < 2 | 0;
}

function __ZNK10__cxxabiv123__fundamental_type_info9can_catchEPKNS_16__shim_type_infoERPv($this, $thrown_type, $0) {
 $this = $this | 0;
 $thrown_type = $thrown_type | 0;
 $0 = $0 | 0;
 return __ZL8is_equalPKSt9type_infoS1_b($this, $thrown_type, 0) | 0;
}

function _GetCurrentTime() {
 var $time = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $time = sp;
 HEAPF64[$time >> 3] = 0.0;
 STACKTOP = sp;
 return +(+HEAPF64[$time >> 3]);
}

function __ZNSt3__211char_traitsIwE4copyEPwPKwm($__s1, $__s2, $__n) {
 $__s1 = $__s1 | 0;
 $__s2 = $__s2 | 0;
 $__n = $__n | 0;
 var $cond = 0;
 if (!$__n) $cond = $__s1; else {
  _wmemcpy($__s1, $__s2, $__n) | 0;
  $cond = $__s1;
 }
 return $cond | 0;
}

function __ZNSt3__211char_traitsIcE6assignEPcmc($__s, $__n, $__a) {
 $__s = $__s | 0;
 $__n = $__n | 0;
 $__a = $__a | 0;
 if ($__n | 0) _memset($__s | 0, (__ZNSt3__211char_traitsIcE11to_int_typeEc($__a) | 0) & 255 | 0, $__n | 0) | 0;
 return $__s | 0;
}

function _i64Subtract(a, b, c, d) {
 a = a | 0;
 b = b | 0;
 c = c | 0;
 d = d | 0;
 var h = 0, CSE$0 = 0;
 CSE$0 = b - d | 0;
 h = (CSE$0 | 0) >>> 0;
 h = (CSE$0 | 0) - (c >>> 0 > a >>> 0 | 0) >>> 0;
 return (setTempRet0(h | 0), a - c >>> 0 | 0) | 0;
}

function __ZNSt3__211char_traitsIcE7compareEPKcS3_m($__s1, $__s2, $__n) {
 $__s1 = $__s1 | 0;
 $__s2 = $__s2 | 0;
 $__n = $__n | 0;
 var $retval$0 = 0;
 if (!$__n) $retval$0 = 0; else $retval$0 = _memcmp($__s1, $__s2, $__n) | 0;
 return $retval$0 | 0;
}

function __ZNKSt3__29__num_getIcE10__do_widenERNS_8ios_baseEPc($this, $__iob, $__atoms) {
 $this = $this | 0;
 $__iob = $__iob | 0;
 $__atoms = $__atoms | 0;
 return __ZNKSt3__29__num_getIcE12__do_widen_pERNS_8ios_baseEPc($this, $__iob, $__atoms) | 0;
}

function dynCall_iiiiiid(index, a1, a2, a3, a4, a5, a6) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = +a6;
 return FUNCTION_TABLE_iiiiiid[index & 3](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, +a6) | 0;
}

function dynCall_iidiiii(index, a1, a2, a3, a4, a5, a6) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = +a2;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 return FUNCTION_TABLE_iidiiii[index & 1](a1 | 0, +a2, a3 | 0, a4 | 0, a5 | 0, a6 | 0) | 0;
}

function __ZNKSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN4tson8PropertyEEENS_19__map_value_compareIS7_SA_NS_4lessIS7_EELb1EEENS5_ISA_EEE10__root_ptrEv($this) {
 $this = $this | 0;
 return $this + 4 | 0;
}

function __ZN8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE10json_valueC2Eb($this, $v) {
 $this = $this | 0;
 $v = $v | 0;
 HEAP8[$this >> 0] = $v & 1;
 return;
}

function _stbir__support_zero($s) {
 $s = Math_fround($s);
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 HEAPF32[sp >> 2] = $s;
 STACKTOP = sp;
 return Math_fround(0.0);
}

function __ZN8nlohmann6detail16invalid_iteratorC2EiPKc($this, $id_, $what_arg) {
 $this = $this | 0;
 $id_ = $id_ | 0;
 $what_arg = $what_arg | 0;
 __ZN8nlohmann6detail9exceptionC2EiPKc($this, $id_, $what_arg);
 HEAP32[$this >> 2] = 17548;
 return;
}

function _stbir__support_two($s) {
 $s = Math_fround($s);
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 HEAPF32[sp >> 2] = $s;
 STACKTOP = sp;
 return Math_fround(2.0);
}

function _stbir__support_one($s) {
 $s = Math_fround($s);
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 HEAPF32[sp >> 2] = $s;
 STACKTOP = sp;
 return Math_fround(1.0);
}

function dynCall_viiiiii(index, a1, a2, a3, a4, a5, a6) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 FUNCTION_TABLE_viiiiii[index & 15](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0);
}

function __ZZNSt3__24__fs10filesystem6detail12_GLOBAL__N_117format_string_impEPKczEN11GuardVAList5clearEv($this) {
 $this = $this | 0;
 var $active = 0;
 $active = $this + 4 | 0;
 if (HEAP8[$active >> 0] | 0) {}
 HEAP8[$active >> 0] = 0;
 return;
}

function __ZSt11__terminatePFvvE($func) {
 $func = $func | 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 FUNCTION_TABLE_v[$func & 7]();
 _abort_message(38810, sp);
}

function __ZNSt3__24__fs10filesystem20__is_pathable_stringINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEvE13__range_beginERKS8_($__s) {
 $__s = $__s | 0;
 return ((HEAP8[$__s + 11 >> 0] | 0) < 0 ? HEAP32[$__s >> 2] | 0 : $__s) | 0;
}

function __ZN8nlohmann6detail12out_of_rangeC2EiPKc($this, $id_, $what_arg) {
 $this = $this | 0;
 $id_ = $id_ | 0;
 $what_arg = $what_arg | 0;
 __ZN8nlohmann6detail9exceptionC2EiPKc($this, $id_, $what_arg);
 HEAP32[$this >> 2] = 17604;
 return;
}

function __ZN8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE10json_valueC2Ed($this, $v) {
 $this = $this | 0;
 $v = +$v;
 HEAPF64[$this >> 3] = $v;
 return;
}

function dynCall_vifff(index, a1, a2, a3, a4) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = Math_fround(a2);
 a3 = Math_fround(a3);
 a4 = Math_fround(a4);
 FUNCTION_TABLE_vifff[index & 3](a1 | 0, Math_fround(a2), Math_fround(a3), Math_fround(a4));
}

function __ZNSt3__211char_traitsIwE6assignEPwmw($__s, $__n, $__a) {
 $__s = $__s | 0;
 $__n = $__n | 0;
 $__a = $__a | 0;
 var $cond = 0;
 if (!$__n) $cond = $__s; else {
  _wmemset($__s, $__a, $__n) | 0;
  $cond = $__s;
 }
 return $cond | 0;
}

function __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE18is_number_unsignedEv($this) {
 $this = $this | 0;
 return (HEAP8[$this >> 0] | 0) == 6 | 0;
}

function __ZN8nlohmann6detail10type_errorC2EiPKc($this, $id_, $what_arg) {
 $this = $this | 0;
 $id_ = $id_ | 0;
 $what_arg = $what_arg | 0;
 __ZN8nlohmann6detail9exceptionC2EiPKc($this, $id_, $what_arg);
 HEAP32[$this >> 2] = 17528;
 return;
}

function __ZZN4tson5Layer6getObjEiENKUlRKNS_6ObjectEE_clES3_($this, $obj) {
 $this = $this | 0;
 $obj = $obj | 0;
 var $call = 0;
 $call = __ZNK4tson6Object5getIdEv($obj) | 0;
 return ($call | 0) == (HEAP32[HEAP32[$this >> 2] >> 2] | 0) | 0;
}

function __ZNSt3__26vectorIbNS_9allocatorIbEEED2Ev($this) {
 $this = $this | 0;
 var $0 = 0;
 $0 = HEAP32[$this >> 2] | 0;
 if ($0 | 0) __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm($0, HEAP32[$this + 8 >> 2] << 2);
 return;
}

function __ZNSt3__25ctypeIcED2Ev($this) {
 $this = $this | 0;
 var $0 = 0;
 HEAP32[$this >> 2] = 21392;
 $0 = HEAP32[$this + 8 >> 2] | 0;
 if ($0 | 0) if (HEAP8[$this + 12 >> 0] | 0) __ZdaPv($0);
 __ZNSt3__26locale5facetD2Ev($this);
 return;
}

function __ZNSt3__220__shared_ptr_emplaceIN8nlohmann6detail20input_stream_adapterENS_9allocatorIS3_EEE21__on_zero_shared_weakEv($this) {
 $this = $this | 0;
 __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm($this, 24);
 return;
}

function __ZNSt3__26locale8__globalEv() {
 if (!(HEAP8[59128] | 0)) if (___cxa_guard_acquire(59128) | 0) {
  __ZNSt3__26locale5__imp11make_globalEv() | 0;
  HEAP32[15391] = 61560;
  ___cxa_guard_release(59128);
 }
 return HEAP32[15391] | 0;
}

function __ZNSt3__26locale7classicEv() {
 if (!(HEAP8[58960] | 0)) if (___cxa_guard_acquire(58960) | 0) {
  __ZNSt3__26locale5__imp12make_classicEv() | 0;
  HEAP32[15389] = 61552;
  ___cxa_guard_release(58960);
 }
 return HEAP32[15389] | 0;
}

function __ZNKSt3__214error_category23default_error_conditionEi($agg$result, $this, $ev) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $ev = $ev | 0;
 HEAP32[$agg$result >> 2] = $ev;
 HEAP32[$agg$result + 4 >> 2] = $this;
 return;
}

function __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE15is_number_floatEv($this) {
 $this = $this | 0;
 return (HEAP8[$this >> 0] | 0) == 7 | 0;
}

function _pop_arg_long_double($arg, $ap) {
 $arg = $arg | 0;
 $ap = $ap | 0;
 var $5 = 0, $6 = 0.0;
 $5 = (HEAP32[$ap >> 2] | 0) + (8 - 1) & ~(8 - 1);
 $6 = +HEAPF64[$5 >> 3];
 HEAP32[$ap >> 2] = $5 + 8;
 HEAPF64[$arg >> 3] = $6;
 return;
}

function __ZNSt3__214basic_ifstreamIcNS_11char_traitsIcEEED1Ev($this) {
 $this = $this | 0;
 __ZNSt3__214basic_ifstreamIcNS_11char_traitsIcEEED2Ev($this, 17484);
 __ZNSt3__29basic_iosIcNS_11char_traitsIcEEED2Ev($this + 108 | 0);
 return;
}

function __ZNSt3__212_GLOBAL__N_14makeINS_8time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_() {
 HEAP32[14733] = 0;
 HEAP32[14732] = 21568;
 HEAP32[14734] = __ZNSt3__26__clocEv() | 0;
 HEAP32[14732] = 20804;
 return;
}

function __ZNSt3__212_GLOBAL__N_14makeINS_8time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_() {
 HEAP32[14729] = 0;
 HEAP32[14728] = 21568;
 HEAP32[14730] = __ZNSt3__26__clocEv() | 0;
 HEAP32[14728] = 20780;
 return;
}

function __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE12is_discardedEv($this) {
 $this = $this | 0;
 return (HEAP8[$this >> 0] | 0) == 8 | 0;
}

function __ZN8nlohmann6detail11parse_errorC2ERKS1_($this, $0) {
 $this = $this | 0;
 $0 = $0 | 0;
 __ZN8nlohmann6detail9exceptionC2ERKS1_($this, $0);
 HEAP32[$this >> 2] = 17624;
 HEAP32[$this + 16 >> 2] = HEAP32[$0 + 16 >> 2];
 return;
}

function __ZZNSt3__24__fs10filesystem6detail12_GLOBAL__N_117format_string_impEPKczEN11GuardVAListC2ERA4_i($this, $target) {
 $this = $this | 0;
 $target = $target | 0;
 HEAP32[$this >> 2] = $target;
 HEAP8[$this + 4 >> 0] = 1;
 return;
}

function __ZNKSt3__28numpunctIwE11do_groupingEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($agg$result, $this + 16 | 0);
 return;
}

function __ZNKSt3__28numpunctIcE11do_groupingEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($agg$result, $this + 12 | 0);
 return;
}

function __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE10is_booleanEv($this) {
 $this = $this | 0;
 return (HEAP8[$this >> 0] | 0) == 4 | 0;
}

function __ZN8nlohmann6detail5lexerINS_10basic_jsonINSt3__23mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEbxydS9_NS_14adl_serializerEEEE10get_stringEv($this) {
 $this = $this | 0;
 return $this + 40 | 0;
}

function __ZNSt3__27codecvtIwc11__mbstate_tEC2Em($this, $refs) {
 $this = $this | 0;
 $refs = $refs | 0;
 HEAP32[$this + 4 >> 2] = $refs + -1;
 HEAP32[$this >> 2] = 21324;
 HEAP32[$this + 8 >> 2] = __ZNSt3__26__clocEv() | 0;
 return;
}

function __ZNSt3__26locale5__imp7installINS_7codecvtIDsc11__mbstate_tEEEEvPT_($this, $f) {
 $this = $this | 0;
 $f = $f | 0;
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($this, $f, __ZNSt3__26locale2id5__getEv(61536) | 0);
 return;
}

function __ZNSt3__26locale5__imp7installINS_7codecvtIDic11__mbstate_tEEEEvPT_($this, $f) {
 $this = $this | 0;
 $f = $f | 0;
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($this, $f, __ZNSt3__26locale2id5__getEv(61544) | 0);
 return;
}

function __ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEED1Ev($this) {
 $this = $this | 0;
 __ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEED2Ev($this, 18956);
 __ZNSt3__29basic_iosIwNS_11char_traitsIwEEED2Ev($this + 4 | 0);
 return;
}

function __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEED1Ev($this) {
 $this = $this | 0;
 __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEED2Ev($this, 18908);
 __ZNSt3__29basic_iosIcNS_11char_traitsIcEEED2Ev($this + 4 | 0);
 return;
}

function __ZNSt3__213basic_istreamIwNS_11char_traitsIwEEED1Ev($this) {
 $this = $this | 0;
 __ZNSt3__213basic_istreamIwNS_11char_traitsIwEEED2Ev($this, 18860);
 __ZNSt3__29basic_iosIwNS_11char_traitsIwEEED2Ev($this + 8 | 0);
 return;
}

function __ZNSt3__213basic_istreamIcNS_11char_traitsIcEEED1Ev($this) {
 $this = $this | 0;
 __ZNSt3__213basic_istreamIcNS_11char_traitsIcEEED2Ev($this, 18812);
 __ZNSt3__29basic_iosIcNS_11char_traitsIcEEED2Ev($this + 8 | 0);
 return;
}

function __ZNSt3__26locale5__imp7installINS_7codecvtIwc11__mbstate_tEEEEvPT_($this, $f) {
 $this = $this | 0;
 $f = $f | 0;
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($this, $f, __ZNSt3__26locale2id5__getEv(61528) | 0);
 return;
}

function __ZNSt3__26locale5__imp7installINS_7codecvtIcc11__mbstate_tEEEEvPT_($this, $f) {
 $this = $this | 0;
 $f = $f | 0;
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($this, $f, __ZNSt3__26locale2id5__getEv(61520) | 0);
 return;
}

function __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEEcvNS_6detail7value_tEEv($this) {
 $this = $this | 0;
 return HEAP8[$this >> 0] | 0;
}

function __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE9is_stringEv($this) {
 $this = $this | 0;
 return (HEAP8[$this >> 0] | 0) == 3 | 0;
}

function __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE9is_objectEv($this) {
 $this = $this | 0;
 return (HEAP8[$this >> 0] | 0) == 1 | 0;
}

function __ZNKSt3__27codecvtIDsc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_($this, $0, $to, $1, $to_nxt) {
 $this = $this | 0;
 $0 = $0 | 0;
 $to = $to | 0;
 $1 = $1 | 0;
 $to_nxt = $to_nxt | 0;
 HEAP32[$to_nxt >> 2] = $to;
 return 3;
}

function __ZNKSt3__27codecvtIDic11__mbstate_tE10do_unshiftERS1_PcS4_RS4_($this, $0, $to, $1, $to_nxt) {
 $this = $this | 0;
 $0 = $0 | 0;
 $to = $to | 0;
 $1 = $1 | 0;
 $to_nxt = $to_nxt | 0;
 HEAP32[$to_nxt >> 2] = $to;
 return 3;
}

function __ZNK8nlohmann10basic_jsonINSt3__23mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbxydS7_NS_14adl_serializerEE8is_arrayEv($this) {
 $this = $this | 0;
 return (HEAP8[$this >> 0] | 0) == 2 | 0;
}

function __ZNKSt3__27codecvtIcc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_($this, $0, $to, $1, $to_nxt) {
 $this = $this | 0;
 $0 = $0 | 0;
 $to = $to | 0;
 $1 = $1 | 0;
 $to_nxt = $to_nxt | 0;
 HEAP32[$to_nxt >> 2] = $to;
 return 3;
}

function stackAlloc(size) {
 size = size | 0;
 var ret = 0;
 ret = STACKTOP;
 STACKTOP = STACKTOP + size | 0;
 STACKTOP = STACKTOP + 15 & -16;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(size | 0);
 return ret | 0;
}

function dynCall_iiiiii(index, a1, a2, a3, a4, a5) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 return FUNCTION_TABLE_iiiiii[index & 31](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0) | 0;
}

function __ZNKSt3__26locale9use_facetERNS0_2idE($this, $x) {
 $this = $this | 0;
 $x = $x | 0;
 var $0 = 0;
 $0 = HEAP32[$this >> 2] | 0;
 return __ZNKSt3__26locale5__imp9use_facetEl($0, __ZNSt3__26locale2id5__getEv($x) | 0) | 0;
}

function __ZNKSt3__26locale9has_facetERNS0_2idE($this, $x) {
 $this = $this | 0;
 $x = $x | 0;
 var $0 = 0;
 $0 = HEAP32[$this >> 2] | 0;
 return __ZNKSt3__26locale5__imp9has_facetEl($0, __ZNSt3__26locale2id5__getEv($x) | 0) | 0;
}

function ___wasi_syscall_ret($code) {
 $code = $code | 0;
 var $retval$0 = 0;
 if (!($code << 16 >> 16)) $retval$0 = 0; else {
  HEAP32[(___errno_location() | 0) >> 2] = $code & 65535;
  $retval$0 = -1;
 }
 return $retval$0 | 0;
}

function __ZNSt3__29__launderIKNS_4pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8nlohmann10basic_jsonINS_3mapENS_6vectorES7_bxydS5_NS9_14adl_serializerEEEEEEEPT_SI_($__p) {
 $__p = $__p | 0;
 return $__p | 0;
}

function __ZTv0_n12_NSt3__214basic_ifstreamIcNS_11char_traitsIcEEED1Ev($this) {
 $this = $this | 0;
 __ZNSt3__214basic_ifstreamIcNS_11char_traitsIcEEED1Ev($this + (HEAP32[(HEAP32[$this >> 2] | 0) + -12 >> 2] | 0) | 0);
 return;
}

function __ZTv0_n12_NSt3__214basic_ifstreamIcNS_11char_traitsIcEEED0Ev($this) {
 $this = $this | 0;
 __ZNSt3__214basic_ifstreamIcNS_11char_traitsIcEEED0Ev($this + (HEAP32[(HEAP32[$this >> 2] | 0) + -12 >> 2] | 0) | 0);
 return;
}

function __ZNSt3__29__launderINS_4pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8nlohmann10basic_jsonINS_3mapENS_6vectorES7_bxydS5_NS9_14adl_serializerEEEEEEEPT_SH_($__p) {
 $__p = $__p | 0;
 return $__p | 0;
}

function __ZNSt3__28numpunctIwED2Ev($this) {
 $this = $this | 0;
 HEAP32[$this >> 2] = 21484;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($this + 16 | 0);
 __ZNSt3__26locale5facetD2Ev($this);
 return;
}

function __ZNSt3__28numpunctIcED2Ev($this) {
 $this = $this | 0;
 HEAP32[$this >> 2] = 21444;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($this + 12 | 0);
 __ZNSt3__26locale5facetD2Ev($this);
 return;
}

function __ZNSt3__26locale5__imp7installINS_10moneypunctIwLb1EEEEEvPT_($this, $f) {
 $this = $this | 0;
 $f = $f | 0;
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($this, $f, __ZNSt3__26locale2id5__getEv(61464) | 0);
 return;
}

function __ZNSt3__26locale5__imp7installINS_10moneypunctIwLb0EEEEEvPT_($this, $f) {
 $this = $this | 0;
 $f = $f | 0;
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($this, $f, __ZNSt3__26locale2id5__getEv(61456) | 0);
 return;
}

function __ZNSt3__26locale5__imp7installINS_10moneypunctIcLb1EEEEEvPT_($this, $f) {
 $this = $this | 0;
 $f = $f | 0;
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($this, $f, __ZNSt3__26locale2id5__getEv(61448) | 0);
 return;
}

function __ZNSt3__26locale5__imp7installINS_10moneypunctIcLb0EEEEEvPT_($this, $f) {
 $this = $this | 0;
 $f = $f | 0;
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($this, $f, __ZNSt3__26locale2id5__getEv(61440) | 0);
 return;
}

function __ZTv0_n12_NSt3__213basic_ostreamIwNS_11char_traitsIwEEED1Ev($this) {
 $this = $this | 0;
 __ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEED1Ev($this + (HEAP32[(HEAP32[$this >> 2] | 0) + -12 >> 2] | 0) | 0);
 return;
}

function __ZTv0_n12_NSt3__213basic_ostreamIwNS_11char_traitsIwEEED0Ev($this) {
 $this = $this | 0;
 __ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEED0Ev($this + (HEAP32[(HEAP32[$this >> 2] | 0) + -12 >> 2] | 0) | 0);
 return;
}

function __ZTv0_n12_NSt3__213basic_ostreamIcNS_11char_traitsIcEEED1Ev($this) {
 $this = $this | 0;
 __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEED1Ev($this + (HEAP32[(HEAP32[$this >> 2] | 0) + -12 >> 2] | 0) | 0);
 return;
}

function __ZTv0_n12_NSt3__213basic_ostreamIcNS_11char_traitsIcEEED0Ev($this) {
 $this = $this | 0;
 __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEED0Ev($this + (HEAP32[(HEAP32[$this >> 2] | 0) + -12 >> 2] | 0) | 0);
 return;
}

function __ZTv0_n12_NSt3__213basic_istreamIwNS_11char_traitsIwEEED1Ev($this) {
 $this = $this | 0;
 __ZNSt3__213basic_istreamIwNS_11char_traitsIwEEED1Ev($this + (HEAP32[(HEAP32[$this >> 2] | 0) + -12 >> 2] | 0) | 0);
 return;
}

function __ZTv0_n12_NSt3__213basic_istreamIwNS_11char_traitsIwEEED0Ev($this) {
 $this = $this | 0;
 __ZNSt3__213basic_istreamIwNS_11char_traitsIwEEED0Ev($this + (HEAP32[(HEAP32[$this >> 2] | 0) + -12 >> 2] | 0) | 0);
 return;
}

function __ZTv0_n12_NSt3__213basic_istreamIcNS_11char_traitsIcEEED1Ev($this) {
 $this = $this | 0;
 __ZNSt3__213basic_istreamIcNS_11char_traitsIcEEED1Ev($this + (HEAP32[(HEAP32[$this >> 2] | 0) + -12 >> 2] | 0) | 0);
 return;
}

function __ZTv0_n12_NSt3__213basic_istreamIcNS_11char_traitsIcEEED0Ev($this) {
 $this = $this | 0;
 __ZNSt3__213basic_istreamIcNS_11char_traitsIcEEED0Ev($this + (HEAP32[(HEAP32[$this >> 2] | 0) + -12 >> 2] | 0) | 0);
 return;
}

function dynCall_iiiiid(index, a1, a2, a3, a4, a5) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = +a5;
 return FUNCTION_TABLE_iiiiid[index & 7](a1 | 0, a2 | 0, a3 | 0, a4 | 0, +a5) | 0;
}

function __ZNKSt3__26vectorIPN8nlohmann10basic_jsonINS_3mapES0_NS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEbxydS7_NS1_14adl_serializerEEENS7_ISC_EEE8max_sizeEv($this) {
 $this = $this | 0;
 return 1073741823;
}

function __ZNKSt3__26vectorIN8nlohmann10basic_jsonINS_3mapES0_NS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEbxydS7_NS1_14adl_serializerEEENS7_ISB_EEE8max_sizeEv($this) {
 $this = $this | 0;
 return 268435455;
}

function __ZNSt3__28time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this) {
 $this = $this | 0;
 __ZNSt3__210__time_putD2Ev($this + 8 | 0);
 __ZNSt3__26locale5facetD2Ev($this);
 __ZdlPv($this);
 return;
}

function __ZNSt3__28time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this) {
 $this = $this | 0;
 __ZNSt3__210__time_putD2Ev($this + 8 | 0);
 __ZNSt3__26locale5facetD2Ev($this);
 __ZdlPv($this);
 return;
}

function __ZNSt3__26locale5__imp7installINS_8numpunctIwEEEEvPT_($this, $f) {
 $this = $this | 0;
 $f = $f | 0;
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($this, $f, __ZNSt3__26locale2id5__getEv(61256) | 0);
 return;
}

function __ZNSt3__26locale5__imp7installINS_8numpunctIcEEEEvPT_($this, $f) {
 $this = $this | 0;
 $f = $f | 0;
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($this, $f, __ZNSt3__26locale2id5__getEv(61232) | 0);
 return;
}

function __ZNSt3__26locale5__imp7installINS_8messagesIwEEEEvPT_($this, $f) {
 $this = $this | 0;
 $f = $f | 0;
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($this, $f, __ZNSt3__26locale2id5__getEv(61512) | 0);
 return;
}

function __ZNSt3__26locale5__imp7installINS_8messagesIcEEEEvPT_($this, $f) {
 $this = $this | 0;
 $f = $f | 0;
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($this, $f, __ZNSt3__26locale2id5__getEv(61504) | 0);
 return;
}

function dynCall_viiiii(index, a1, a2, a3, a4, a5) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 FUNCTION_TABLE_viiiii[index & 15](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0);
}

function __ZNSt3__26locale5__imp7installINS_7collateIwEEEEvPT_($this, $f) {
 $this = $this | 0;
 $f = $f | 0;
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($this, $f, __ZNSt3__26locale2id5__getEv(61208) | 0);
 return;
}

function __ZNSt3__26locale5__imp7installINS_7collateIcEEEEvPT_($this, $f) {
 $this = $this | 0;
 $f = $f | 0;
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($this, $f, __ZNSt3__26locale2id5__getEv(61200) | 0);
 return;
}

function __ZNSt3__26locale5__imp7installINS_5ctypeIwEEEEvPT_($this, $f) {
 $this = $this | 0;
 $f = $f | 0;
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($this, $f, __ZNSt3__26locale2id5__getEv(61248) | 0);
 return;
}

function __ZNSt3__26locale5__imp7installINS_5ctypeIcEEEEvPT_($this, $f) {
 $this = $this | 0;
 $f = $f | 0;
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($this, $f, __ZNSt3__26locale2id5__getEv(61216) | 0);
 return;
}

function __ZNSt3__26__clocEv() {
 if (!(HEAP8[58480] | 0)) if (___cxa_guard_acquire(58480) | 0) {
  HEAP32[15306] = ___newlocale(2147483647, 42854, 0) | 0;
  ___cxa_guard_release(58480);
 }
 return HEAP32[15306] | 0;
}

function __ZNSt3__214__ptr_in_rangeIwEEbPKT_S3_S3_($__p, $__first, $__last) {
 $__p = $__p | 0;
 $__first = $__first | 0;
 $__last = $__last | 0;
 return $__first >>> 0 <= $__p >>> 0 & $__p >>> 0 < $__last >>> 0 | 0;
}

function __ZNSt3__214__ptr_in_rangeIcEEbPKT_S3_S3_($__p, $__first, $__last) {
 $__p = $__p | 0;
 $__first = $__first | 0;
 $__last = $__last | 0;
 return $__first >>> 0 <= $__p >>> 0 & $__p >>> 0 < $__last >>> 0 | 0;
}

function _ClearBackground($color) {
 $color = $color | 0;
 _rlClearColor(HEAP8[$color >> 0] | 0, HEAP8[$color + 1 >> 0] | 0, HEAP8[$color + 2 >> 0] | 0, HEAP8[$color + 3 >> 0] | 0);
 _rlClearScreenBuffers();
 return;
}

function __ZNSt3__28ios_base33__set_badbit_and_consider_rethrowEv($this) {
 $this = $this | 0;
 var $__rdstate_ = 0;
 $__rdstate_ = $this + 16 | 0;
 HEAP32[$__rdstate_ >> 2] = HEAP32[$__rdstate_ >> 2] | 1;
 return;
}

function __ZNKSt3__26__treeINS_12__value_typeINS_5tupleIJiiEEEPN4tson4TileEEENS_19__map_value_compareIS3_S7_NS_4lessIS3_EELb1EEENS_9allocatorIS7_EEE10__root_ptrEv($this) {
 $this = $this | 0;
 return $this + 4 | 0;
}

function _emscripten_glVertexAttrib4f$legalf32(a, b, c, d, e) {
 a = a | 0;
 b = Math_fround(b);
 c = Math_fround(c);
 d = Math_fround(d);
 e = Math_fround(e);
 _emscripten_glVertexAttrib4f(a | 0, +b, +c, +d, +e);
}

function __ZN4tson5ChunkD2Ev($this) {
 $this = $this | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($this + 12 | 0);
 __ZNSt3__213__vector_baseIiNS_9allocatorIiEEED2Ev($this);
 return;
}

function __ZNSt3__217__call_once_proxyINS_5tupleIJONS_12_GLOBAL__N_111__fake_bindEEEEEEvPv($__vp) {
 $__vp = $__vp | 0;
 __ZNKSt3__212_GLOBAL__N_111__fake_bindclEv(HEAP32[HEAP32[$__vp >> 2] >> 2] | 0);
 return;
}

function __ZNKSt3__212__do_message7messageEi($agg$result, $this, $ev) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $ev = $ev | 0;
 __ZNSt3__212_GLOBAL__N_113do_strerror_rEi($agg$result, $ev);
 return;
}

function ___syscall_ret($r) {
 $r = $r | 0;
 var $retval$0 = 0;
 if ($r >>> 0 > 4294963200) {
  HEAP32[(___errno_location() | 0) >> 2] = 0 - $r;
  $retval$0 = -1;
 } else $retval$0 = $r;
 return $retval$0 | 0;
}

function __ZN4tson7Vector2IfEC2Eff($this, $xPos, $yPos) {
 $this = $this | 0;
 $xPos = Math_fround($xPos);
 $yPos = Math_fround($yPos);
 HEAPF32[$this >> 2] = $xPos;
 HEAPF32[$this + 4 >> 2] = $yPos;
 return;
}

function _strtoull_l($s, $p, $base, $loc) {
 $s = $s | 0;
 $p = $p | 0;
 $base = $base | 0;
 $loc = $loc | 0;
 var $0 = 0;
 $0 = _strtoull($s, $p, $base) | 0;
 setTempRet0(getTempRet0() | 0);
 return $0 | 0;
}

function __ZNSt3__211char_traitsIcE4moveEPcPKcm($__s1, $__s2, $__n) {
 $__s1 = $__s1 | 0;
 $__s2 = $__s2 | 0;
 $__n = $__n | 0;
 if ($__n | 0) _memmove($__s1 | 0, $__s2 | 0, $__n | 0) | 0;
 return $__s1 | 0;
}

function __ZNSt3__211char_traitsIcE4copyEPcPKcm($__s1, $__s2, $__n) {
 $__s1 = $__s1 | 0;
 $__s2 = $__s2 | 0;
 $__n = $__n | 0;
 if ($__n | 0) _memcpy($__s1 | 0, $__s2 | 0, $__n | 0) | 0;
 return $__s1 | 0;
}

function __ZL13__DOUBLE_BITSd($__f) {
 $__f = +$__f;
 var $0 = 0;
 HEAPF64[tempDoublePtr >> 3] = $__f;
 $0 = HEAP32[tempDoublePtr >> 2] | 0;
 setTempRet0(HEAP32[tempDoublePtr + 4 >> 2] | 0);
 return $0 | 0;
}

function _strtoll_l($s, $p, $base, $loc) {
 $s = $s | 0;
 $p = $p | 0;
 $base = $base | 0;
 $loc = $loc | 0;
 var $0 = 0;
 $0 = _strtoll($s, $p, $base) | 0;
 setTempRet0(getTempRet0() | 0);
 return $0 | 0;
}

function ___DOUBLE_BITS_670($__f) {
 $__f = +$__f;
 var $0 = 0;
 HEAPF64[tempDoublePtr >> 3] = $__f;
 $0 = HEAP32[tempDoublePtr >> 2] | 0;
 setTempRet0(HEAP32[tempDoublePtr + 4 >> 2] | 0);
 return $0 | 0;
}

function ___DOUBLE_BITS_273($__f) {
 $__f = +$__f;
 var $0 = 0;
 HEAPF64[tempDoublePtr >> 3] = $__f;
 $0 = HEAP32[tempDoublePtr >> 2] | 0;
 setTempRet0(HEAP32[tempDoublePtr + 4 >> 2] | 0);
 return $0 | 0;
}

function _emscripten_glUniform4f$legalf32(a, b, c, d, e) {
 a = a | 0;
 b = Math_fround(b);
 c = Math_fround(c);
 d = Math_fround(d);
 e = Math_fround(e);
 _emscripten_glUniform4f(a | 0, +b, +c, +d, +e);
}

function b33(p0, p1, p2, p3, p4, p5, p6, p7, p8) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 p6 = p6 | 0;
 p7 = p7 | 0;
 p8 = p8 | 0;
 nullFunc_viiiiiiiii(33);
}

function __ZNSt3__28time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev($this) {
 $this = $this | 0;
 __ZNSt3__210__time_putD2Ev($this + 8 | 0);
 __ZNSt3__26locale5facetD2Ev($this);
 return;
}

function __ZNSt3__28time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev($this) {
 $this = $this | 0;
 __ZNSt3__210__time_putD2Ev($this + 8 | 0);
 __ZNSt3__26locale5facetD2Ev($this);
 return;
}

function dynCall_iiiii(index, a1, a2, a3, a4) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 return FUNCTION_TABLE_iiiii[index & 15](a1 | 0, a2 | 0, a3 | 0, a4 | 0) | 0;
}

function __ZNSt3__210__time_putD2Ev($this) {
 $this = $this | 0;
 var $0 = 0;
 $0 = HEAP32[$this >> 2] | 0;
 if (($0 | 0) != (__ZNSt3__26__clocEv() | 0)) _freelocale(HEAP32[$this >> 2] | 0);
 return;
}

function __ZN7Enemigo6move_xEf($this, $d) {
 $this = $this | 0;
 $d = Math_fround($d);
 var $x = 0;
 $x = $this + 60 | 0;
 HEAPF32[$x >> 2] = Math_fround(Math_fround(HEAPF32[$x >> 2]) + $d);
 return;
}

function _strtoll($s, $p, $base) {
 $s = $s | 0;
 $p = $p | 0;
 $base = $base | 0;
 var $0 = 0;
 $0 = _strtox_735($s, $p, $base, 0, -2147483648) | 0;
 setTempRet0(getTempRet0() | 0);
 return $0 | 0;
}

function __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm($__ptr, $__size) {
 $__ptr = $__ptr | 0;
 $__size = $__size | 0;
 __ZNSt3__217_DeallocateCaller9__do_callEPv($__ptr);
 return;
}

function __ZN4tson7TerrainD2Ev($this) {
 $this = $this | 0;
 __ZN4tson18PropertyCollectionD2Ev($this + 16 | 0);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($this);
 return;
}

function dynCall_viff(index, a1, a2, a3) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = Math_fround(a2);
 a3 = Math_fround(a3);
 FUNCTION_TABLE_viff[index & 3](a1 | 0, Math_fround(a2), Math_fround(a3));
}

function __ZN4Nave6move_xEf($this, $d) {
 $this = $this | 0;
 $d = Math_fround($d);
 var $x = 0;
 $x = $this + 60 | 0;
 HEAPF32[$x >> 2] = Math_fround(Math_fround(HEAPF32[$x >> 2]) + $d);
 return;
}

function _wcslen($s) {
 $s = $s | 0;
 var $s$addr$0 = 0;
 $s$addr$0 = $s;
 while (1) if (!(HEAP32[$s$addr$0 >> 2] | 0)) break; else $s$addr$0 = $s$addr$0 + 4 | 0;
 return $s$addr$0 - $s >> 2 | 0;
}

function __ZNKSt3__26__treeINS_12__value_typeIiPN4tson4TileEEENS_19__map_value_compareIiS5_NS_4lessIiEELb1EEENS_9allocatorIS5_EEE10__root_ptrEv($this) {
 $this = $this | 0;
 return $this + 4 | 0;
}

function b13(p0, p1, p2, p3, p4, p5, p6, p7) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 p6 = p6 | 0;
 p7 = p7 | 0;
 nullFunc_iiiiiiiii(13);
 return 0;
}

function __ZNSt13runtime_errorC2ERKS_($this, $le) {
 $this = $this | 0;
 $le = $le | 0;
 HEAP32[$this >> 2] = 18468;
 __ZNSt3__218__libcpp_refstringC2ERKS0_($this + 4 | 0, $le + 4 | 0);
 return;
}

function ___cxa_guard_release($guard_object) {
 $guard_object = $guard_object | 0;
 HEAP32[$guard_object >> 2] = 0;
 __ZN10__cxxabiv112_GLOBAL__N_115set_initializedEPj($guard_object);
 return;
}

function __ZN8nlohmann6detail16invalid_iteratorC2ERKS1_($this, $0) {
 $this = $this | 0;
 $0 = $0 | 0;
 __ZN8nlohmann6detail9exceptionC2ERKS1_($this, $0);
 HEAP32[$this >> 2] = 17548;
 return;
}

function _strtoull($s, $p, $base) {
 $s = $s | 0;
 $p = $p | 0;
 $base = $base | 0;
 var $0 = 0;
 $0 = _strtox_735($s, $p, $base, -1, -1) | 0;
 setTempRet0(getTempRet0() | 0);
 return $0 | 0;
}

function __ZNSt3__222__compressed_pair_elemIN8nlohmann6detail20input_stream_adapterELi1ELb0EED2Ev($this) {
 $this = $this | 0;
 __ZN8nlohmann6detail20input_stream_adapterD2Ev($this);
 return;
}

function __ZN4tson4GridC2Ev($this) {
 $this = $this | 0;
 HEAP32[$this >> 2] = 0;
 HEAP32[$this + 4 >> 2] = 0;
 HEAP32[$this + 8 >> 2] = 0;
 __ZN4tson7Vector2IiEC2Ev($this + 12 | 0);
 return;
}

function dynCall_viiii(index, a1, a2, a3, a4) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 FUNCTION_TABLE_viiii[index & 63](a1 | 0, a2 | 0, a3 | 0, a4 | 0);
}

function dynCall_fff(index, a1, a2) {
 index = index | 0;
 a1 = Math_fround(a1);
 a2 = Math_fround(a2);
 return Math_fround(FUNCTION_TABLE_fff[index & 7](Math_fround(a1), Math_fround(a2)));
}

function __ZN8nlohmann6detail12out_of_rangeC2ERKS1_($this, $0) {
 $this = $this | 0;
 $0 = $0 | 0;
 __ZN8nlohmann6detail9exceptionC2ERKS1_($this, $0);
 HEAP32[$this >> 2] = 17604;
 return;
}

function __ZN4tson7Vector2IiEC2Eii($this, $xPos, $yPos) {
 $this = $this | 0;
 $xPos = $xPos | 0;
 $yPos = $yPos | 0;
 HEAP32[$this >> 2] = $xPos;
 HEAP32[$this + 4 >> 2] = $yPos;
 return;
}

function __ZNSt13runtime_errorC2EPKc($this, $msg) {
 $this = $this | 0;
 $msg = $msg | 0;
 HEAP32[$this >> 2] = 18468;
 __ZNSt3__218__libcpp_refstringC2EPKc($this + 4 | 0, $msg);
 return;
}

function __ZN8nlohmann6detail11other_errorC2ERKS1_($this, $0) {
 $this = $this | 0;
 $0 = $0 | 0;
 __ZN8nlohmann6detail9exceptionC2ERKS1_($this, $0);
 HEAP32[$this >> 2] = 17584;
 return;
}

function __ZN8nlohmann6detail10type_errorC2ERKS1_($this, $0) {
 $this = $this | 0;
 $0 = $0 | 0;
 __ZN8nlohmann6detail9exceptionC2ERKS1_($this, $0);
 HEAP32[$this >> 2] = 17528;
 return;
}

function _i64Add(a, b, c, d) {
 a = a | 0;
 b = b | 0;
 c = c | 0;
 d = d | 0;
 var l = 0;
 l = a + c >>> 0;
 return (setTempRet0(b + d + (l >>> 0 < a >>> 0 | 0) >>> 0 | 0), l | 0) | 0;
}

function _emscripten_glVertexAttrib3f$legalf32(a, b, c, d) {
 a = a | 0;
 b = Math_fround(b);
 c = Math_fround(c);
 d = Math_fround(d);
 _emscripten_glVertexAttrib3f(a | 0, +b, +c, +d);
}

function __ZNSt11logic_errorC2EPKc($this, $msg) {
 $this = $this | 0;
 $msg = $msg | 0;
 HEAP32[$this >> 2] = 18448;
 __ZNSt3__218__libcpp_refstringC2EPKc($this + 4 | 0, $msg);
 return;
}

function _strtol($s, $p, $base) {
 $s = $s | 0;
 $p = $p | 0;
 $base = $base | 0;
 var $0 = 0;
 $0 = _strtox_735($s, $p, $base, -2147483648, 0) | 0;
 getTempRet0() | 0;
 return $0 | 0;
}

function ___cxa_pure_virtual() {
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 _abort_message(39012, sp);
}

function __ZN7EnemigoC2Edd($this, $l, $w) {
 $this = $this | 0;
 $l = +$l;
 $w = +$w;
 HEAP32[$this + 36 >> 2] = 100;
 HEAPF64[$this >> 3] = $l;
 HEAPF64[$this + 8 >> 3] = $w;
 return;
}

function b32(p0, p1, p2, p3, p4, p5, p6, p7) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 p6 = p6 | 0;
 p7 = p7 | 0;
 nullFunc_viiiiiiii(32);
}

function _emscripten_glClearColor$legalf32(a, b, c, d) {
 a = Math_fround(a);
 b = Math_fround(b);
 c = Math_fround(c);
 d = Math_fround(d);
 _emscripten_glClearColor(+a, +b, +c, +d);
}

function _emscripten_glBlendColor$legalf32(a, b, c, d) {
 a = Math_fround(a);
 b = Math_fround(b);
 c = Math_fround(c);
 d = Math_fround(d);
 _emscripten_glBlendColor(+a, +b, +c, +d);
}

function __ZN10__cxxabiv112_GLOBAL__N_115set_initializedEPj($guard_object) {
 $guard_object = $guard_object | 0;
 HEAP32[$guard_object >> 2] = HEAP32[$guard_object >> 2] | 1;
 return;
}

function _strchr($s, $c) {
 $s = $s | 0;
 $c = $c | 0;
 var $call = 0;
 $call = ___strchrnul($s, $c) | 0;
 return ((HEAP8[$call >> 0] | 0) == ($c & 255) << 24 >> 24 ? $call : 0) | 0;
}

function __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEED0Ev($this) {
 $this = $this | 0;
 __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEED2Ev($this);
 __ZdlPv($this);
 return;
}

function __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED0Ev($this) {
 $this = $this | 0;
 __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED2Ev($this);
 __ZdlPv($this);
 return;
}

function _strpbrk($s, $b) {
 $s = $s | 0;
 $b = $b | 0;
 var $add$ptr = 0;
 $add$ptr = $s + (_strcspn($s, $b) | 0) | 0;
 return ((HEAP8[$add$ptr >> 0] | 0) == 0 ? 0 : $add$ptr) | 0;
}

function __ZNSt3__26locale5facet16__on_zero_sharedEv($this) {
 $this = $this | 0;
 if ($this | 0) FUNCTION_TABLE_vi[HEAP32[(HEAP32[$this >> 2] | 0) + 4 >> 2] & 255]($this);
 return;
}

function __ZN4NaveC2Edd($this, $l, $w) {
 $this = $this | 0;
 $l = +$l;
 $w = +$w;
 HEAP32[$this + 36 >> 2] = 100;
 HEAPF64[$this >> 3] = $l;
 HEAPF64[$this + 8 >> 3] = $w;
 return;
}

function __ZNSt3__214basic_ifstreamIcNS_11char_traitsIcEEED0Ev($this) {
 $this = $this | 0;
 __ZNSt3__214basic_ifstreamIcNS_11char_traitsIcEEED1Ev($this);
 __ZdlPv($this);
 return;
}

function dynCall_viif(index, a1, a2, a3) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = Math_fround(a3);
 FUNCTION_TABLE_viif[index & 1](a1 | 0, a2 | 0, Math_fround(a3));
}

function __ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEED0Ev($this) {
 $this = $this | 0;
 __ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEED1Ev($this);
 __ZdlPv($this);
 return;
}

function __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEED0Ev($this) {
 $this = $this | 0;
 __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEED1Ev($this);
 __ZdlPv($this);
 return;
}

function __ZNSt3__213basic_istreamIwNS_11char_traitsIwEEED0Ev($this) {
 $this = $this | 0;
 __ZNSt3__213basic_istreamIwNS_11char_traitsIwEEED1Ev($this);
 __ZdlPv($this);
 return;
}

function __ZNSt3__213basic_istreamIcNS_11char_traitsIcEEED0Ev($this) {
 $this = $this | 0;
 __ZNSt3__213basic_istreamIcNS_11char_traitsIcEEED1Ev($this);
 __ZdlPv($this);
 return;
}

function __ZNSt3__213basic_filebufIcNS_11char_traitsIcEEED0Ev($this) {
 $this = $this | 0;
 __ZNSt3__213basic_filebufIcNS_11char_traitsIcEEED2Ev($this);
 __ZdlPv($this);
 return;
}

function __ZNKSt3__28ios_base6getlocEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 __ZNSt3__26localeC2ERKS0_($agg$result, $this + 28 | 0);
 return;
}

function __ZN4tson5ColorIhEC2Ev($this) {
 $this = $this | 0;
 HEAP8[$this + 2 >> 0] = 0;
 HEAP8[$this + 1 >> 0] = 0;
 HEAP8[$this >> 0] = 0;
 HEAP8[$this + 3 >> 0] = -1;
 return;
}

function __ZN4tson4TextC2Ev($this) {
 $this = $this | 0;
 HEAP32[$this >> 2] = 0;
 HEAP32[$this + 4 >> 2] = 0;
 HEAP32[$this + 8 >> 2] = 0;
 HEAP8[$this + 12 >> 0] = 0;
 return;
}

function ___cxa_is_pointer_type($type) {
 $type = $type | 0;
 var $2 = 0;
 if (!$type) $2 = 0; else $2 = (___dynamic_cast($type, 15784, 15904, 0) | 0) != 0 & 1;
 return $2 | 0;
}

function ___cxa_guard_acquire($guard_object) {
 $guard_object = $guard_object | 0;
 return ((__ZN10__cxxabiv112_GLOBAL__N_114is_initializedEPj($guard_object) | 0) ^ 1) & 1 | 0;
}

function __ZNSt3__29money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this) {
 $this = $this | 0;
 __ZNSt3__26locale5facetD2Ev($this);
 __ZdlPv($this);
 return;
}

function __ZNSt3__29money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this) {
 $this = $this | 0;
 __ZNSt3__26locale5facetD2Ev($this);
 __ZdlPv($this);
 return;
}

function __ZNSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this) {
 $this = $this | 0;
 __ZNSt3__26locale5facetD2Ev($this);
 __ZdlPv($this);
 return;
}

function __ZNSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this) {
 $this = $this | 0;
 __ZNSt3__26locale5facetD2Ev($this);
 __ZdlPv($this);
 return;
}

function __ZNSt3__28ios_base5clearEj($this, $state) {
 $this = $this | 0;
 $state = $state | 0;
 HEAP32[$this + 16 >> 2] = (HEAP32[$this + 24 >> 2] | 0) == 0 | $state;
 return;
}

function __ZN8nlohmann6detaileqENS0_20primitive_iterator_tES1_($lhs, $rhs) {
 $lhs = $lhs | 0;
 $rhs = $rhs | 0;
 return (HEAP32[$lhs >> 2] | 0) == (HEAP32[$rhs >> 2] | 0) | 0;
}

function b12(p0, p1, p2, p3, p4, p5, p6) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 p6 = p6 | 0;
 nullFunc_iiiiiiii(12);
 return 0;
}

function _emscripten_glUniform3f$legalf32(a, b, c, d) {
 a = a | 0;
 b = Math_fround(b);
 c = Math_fround(c);
 d = Math_fround(d);
 _emscripten_glUniform3f(a | 0, +b, +c, +d);
}

function __ZNSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this) {
 $this = $this | 0;
 __ZNSt3__26locale5facetD2Ev($this);
 __ZdlPv($this);
 return;
}

function __ZNSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this) {
 $this = $this | 0;
 __ZNSt3__26locale5facetD2Ev($this);
 __ZdlPv($this);
 return;
}

function __ZZNSt3__24__fs10filesystem6detail12_GLOBAL__N_117format_string_impEPKczEN11GuardVAListD2Ev($this) {
 $this = $this | 0;
 if (HEAP8[$this + 4 >> 0] | 0) {}
 return;
}

function __ZNSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this) {
 $this = $this | 0;
 __ZNSt3__26locale5facetD2Ev($this);
 __ZdlPv($this);
 return;
}

function __ZNSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this) {
 $this = $this | 0;
 __ZNSt3__26locale5facetD2Ev($this);
 __ZdlPv($this);
 return;
}

function __ZNSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this) {
 $this = $this | 0;
 __ZNSt3__26locale5facetD2Ev($this);
 __ZdlPv($this);
 return;
}

function __ZNSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this) {
 $this = $this | 0;
 __ZNSt3__26locale5facetD2Ev($this);
 __ZdlPv($this);
 return;
}

function __ZNKSt3__29__num_getIcE12__do_widen_pERNS_8ios_baseEPc($this, $__iob, $__atoms) {
 $this = $this | 0;
 $__iob = $__iob | 0;
 $__atoms = $__atoms | 0;
 return 14672;
}

function dynCall_iiii(index, a1, a2, a3) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 return FUNCTION_TABLE_iiii[index & 63](a1 | 0, a2 | 0, a3 | 0) | 0;
}

function __ZNSt3__26locale2id6__initEv($this) {
 $this = $this | 0;
 var $0 = 0;
 $0 = HEAP32[15307] | 0;
 HEAP32[15307] = $0 + 1;
 HEAP32[$this + 4 >> 2] = $0 + 1;
 return;
}

function __ZNKSt3__25ctypeIwE9do_narrowEwc($this, $c, $dfault) {
 $this = $this | 0;
 $c = $c | 0;
 $dfault = $dfault | 0;
 return ($c >>> 0 < 128 ? $c & 255 : $dfault) | 0;
}

function __ZNKSt3__25ctypeIcE9do_narrowEcc($this, $c, $dfault) {
 $this = $this | 0;
 $c = $c | 0;
 $dfault = $dfault | 0;
 return ($c << 24 >> 24 > -1 ? $c : $dfault) | 0;
}

function ___udivdi3($a$0, $a$1, $b$0, $b$1) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 return ___udivmoddi4($a$0, $a$1, $b$0, $b$1, 0) | 0;
}

function __ZNSt3__212_GLOBAL__N_14makeINS_9money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_() {
 HEAP32[14719] = 0;
 HEAP32[14718] = 21136;
 return;
}

function __ZNSt3__212_GLOBAL__N_14makeINS_9money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_() {
 HEAP32[14717] = 0;
 HEAP32[14716] = 21108;
 return;
}

function __ZNSt3__212_GLOBAL__N_14makeINS_9money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_() {
 HEAP32[14715] = 0;
 HEAP32[14714] = 21080;
 return;
}

function __ZNSt3__212_GLOBAL__N_14makeINS_9money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_() {
 HEAP32[14713] = 0;
 HEAP32[14712] = 21052;
 return;
}

function dynCall_vff(index, a1, a2) {
 index = index | 0;
 a1 = Math_fround(a1);
 a2 = Math_fround(a2);
 FUNCTION_TABLE_vff[index & 3](Math_fround(a1), Math_fround(a2));
}

function _fputs($s, $f) {
 $s = $s | 0;
 $f = $f | 0;
 var $call = 0;
 $call = _strlen($s) | 0;
 return ((_fwrite($s, 1, $call, $f) | 0) != ($call | 0)) << 31 >> 31 | 0;
}

function __ZNSt3__29__launderIKNS_4pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN4tson8PropertyEEEEEPT_SE_($__p) {
 $__p = $__p | 0;
 return $__p | 0;
}

function __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEED2Ev($this) {
 $this = $this | 0;
 HEAP32[$this >> 2] = 18716;
 __ZNSt3__26localeD2Ev($this + 4 | 0);
 return;
}

function __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED2Ev($this) {
 $this = $this | 0;
 HEAP32[$this >> 2] = 18652;
 __ZNSt3__26localeD2Ev($this + 4 | 0);
 return;
}

function __ZNSt3__210shared_ptrIN8nlohmann6detail20input_stream_adapterEE18__enable_weak_thisEz($this, $varargs) {
 $this = $this | 0;
 $varargs = $varargs | 0;
 return;
}

function _wctomb($s, $wc) {
 $s = $s | 0;
 $wc = $wc | 0;
 var $retval$0 = 0;
 if (!$s) $retval$0 = 0; else $retval$0 = _wcrtomb($s, $wc, 0) | 0;
 return $retval$0 | 0;
}

function __ZNSt3__29__launderINS_4pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN4tson8PropertyEEEEEPT_SD_($__p) {
 $__p = $__p | 0;
 return $__p | 0;
}

function __ZNSt3__212_GLOBAL__N_14makeINS_7num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_() {
 HEAP32[14703] = 0;
 HEAP32[14702] = 19472;
 return;
}

function __ZNSt3__212_GLOBAL__N_14makeINS_7num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_() {
 HEAP32[14701] = 0;
 HEAP32[14700] = 19420;
 return;
}

function __ZNSt3__212_GLOBAL__N_14makeINS_7num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_() {
 HEAP32[14699] = 0;
 HEAP32[14698] = 19356;
 return;
}

function __ZNSt3__212_GLOBAL__N_14makeINS_7num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_() {
 HEAP32[14697] = 0;
 HEAP32[14696] = 19292;
 return;
}

function __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE9pbackfailEj($this, $0) {
 $this = $this | 0;
 $0 = $0 | 0;
 return __ZNSt3__211char_traitsIwE3eofEv() | 0;
}

function __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE9pbackfailEi($this, $0) {
 $this = $this | 0;
 $0 = $0 | 0;
 return __ZNSt3__211char_traitsIcE3eofEv() | 0;
}

function __ZN8nlohmann6detail20input_stream_adapterD0Ev($this) {
 $this = $this | 0;
 __ZN8nlohmann6detail20input_stream_adapterD2Ev($this);
 __ZdlPv($this);
 return;
}

function __ZN8nlohmann6detail13input_adapterD2Ev($this) {
 $this = $this | 0;
 __ZNSt3__210shared_ptrIN8nlohmann6detail22input_adapter_protocolEED2Ev($this);
 return;
}

function __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE8overflowEj($this, $0) {
 $this = $this | 0;
 $0 = $0 | 0;
 return __ZNSt3__211char_traitsIwE3eofEv() | 0;
}

function __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE8overflowEi($this, $0) {
 $this = $this | 0;
 $0 = $0 | 0;
 return __ZNSt3__211char_traitsIcE3eofEv() | 0;
}

function b31(p0, p1, p2, p3, p4, p5, p6) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 p6 = p6 | 0;
 nullFunc_viiiiiii(31);
}

function _fseek($f, $off, $whence) {
 $f = $f | 0;
 $off = $off | 0;
 $whence = $whence | 0;
 return ___fseeko($f, $off, (($off | 0) < 0) << 31 >> 31, $whence) | 0;
}

function ___ctype_get_mb_cur_max() {
 var $tobool = 0;
 $tobool = (HEAP32[HEAP32[(___pthread_self() | 0) + 188 >> 2] >> 2] | 0) == 0;
 return ($tobool ? 1 : 4) | 0;
}

function __ZNKSt3__26locale5__imp9use_facetEl($this, $id) {
 $this = $this | 0;
 $id = $id | 0;
 return HEAP32[(HEAP32[$this + 8 >> 2] | 0) + ($id << 2) >> 2] | 0;
}

function dynCall_viii(index, a1, a2, a3) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 FUNCTION_TABLE_viii[index & 63](a1 | 0, a2 | 0, a3 | 0);
}

function b24(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = Math_fround(p1);
 p2 = Math_fround(p2);
 p3 = Math_fround(p3);
 p4 = Math_fround(p4);
 nullFunc_viffff(24);
}

function __ZN10__cxxabiv112_GLOBAL__N_114is_initializedEPj($guard_object) {
 $guard_object = $guard_object | 0;
 return (HEAP8[$guard_object >> 0] | 0) != 0 | 0;
}

function __ZNSt3__29money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev($this) {
 $this = $this | 0;
 __ZNSt3__26locale5facetD2Ev($this);
 return;
}

function __ZNSt3__29money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev($this) {
 $this = $this | 0;
 __ZNSt3__26locale5facetD2Ev($this);
 return;
}

function __ZNSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev($this) {
 $this = $this | 0;
 __ZNSt3__26locale5facetD2Ev($this);
 return;
}

function __ZNSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev($this) {
 $this = $this | 0;
 __ZNSt3__26locale5facetD2Ev($this);
 return;
}

function _rlglDraw() {
 if ((HEAP32[47408 + ((HEAP32[14847] | 0) * 48 | 0) >> 2] | 0) <= 0) return;
 _UpdateBuffersDefault();
 _DrawBuffersDefault();
 return;
}

function __ZNSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev($this) {
 $this = $this | 0;
 __ZNSt3__26locale5facetD2Ev($this);
 return;
}

function __ZNSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev($this) {
 $this = $this | 0;
 __ZNSt3__26locale5facetD2Ev($this);
 return;
}

function __ZNSt3__211__stdoutbufIwED0Ev($this) {
 $this = $this | 0;
 __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEED2Ev($this);
 __ZdlPv($this);
 return;
}

function __ZNSt3__211__stdoutbufIcED0Ev($this) {
 $this = $this | 0;
 __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED2Ev($this);
 __ZdlPv($this);
 return;
}

function _emscripten_glVertexAttrib2f$legalf32(a, b, c) {
 a = a | 0;
 b = Math_fround(b);
 c = Math_fround(c);
 _emscripten_glVertexAttrib2f(a | 0, +b, +c);
}

function __ZNSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev($this) {
 $this = $this | 0;
 __ZNSt3__26locale5facetD2Ev($this);
 return;
}

function __ZNSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev($this) {
 $this = $this | 0;
 __ZNSt3__26locale5facetD2Ev($this);
 return;
}

function __ZNSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev($this) {
 $this = $this | 0;
 __ZNSt3__26locale5facetD2Ev($this);
 return;
}

function __ZNSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev($this) {
 $this = $this | 0;
 __ZNSt3__26locale5facetD2Ev($this);
 return;
}

function __ZNSt3__211char_traitsIcE6assignERcRKc($__c1, $__c2) {
 $__c1 = $__c1 | 0;
 $__c2 = $__c2 | 0;
 HEAP8[$__c1 >> 0] = HEAP8[$__c2 >> 0] | 0;
 return;
}

function __ZNSt3__210__stdinbufIwED0Ev($this) {
 $this = $this | 0;
 __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEED2Ev($this);
 __ZdlPv($this);
 return;
}

function __ZNSt3__210__stdinbufIcED0Ev($this) {
 $this = $this | 0;
 __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED2Ev($this);
 __ZdlPv($this);
 return;
}

function __ZN4tson7Vector2IfEC2Ev($this) {
 $this = $this | 0;
 HEAPF32[$this + 4 >> 2] = Math_fround(0.0);
 HEAPF32[$this >> 2] = Math_fround(0.0);
 return;
}

function __ZN10__cxxabiv123__fundamental_type_infoD0Ev($this) {
 $this = $this | 0;
 __ZN10__cxxabiv116__shim_type_infoD2Ev($this);
 __ZdlPv($this);
 return;
}

function b11(p0, p1, p2, p3, p4, p5) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 nullFunc_iiiiiii(11);
 return 0;
}

function __ZN4tson9WangColorD2Ev($this) {
 $this = $this | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($this + 4 | 0);
 return;
}

function __ZNSt3__211char_traitsIwE6assignERwRKw($__c1, $__c2) {
 $__c1 = $__c1 | 0;
 $__c2 = $__c2 | 0;
 HEAP32[$__c1 >> 2] = HEAP32[$__c2 >> 2];
 return;
}

function __ZN8nlohmann6detail20primitive_iterator_tppEv($this) {
 $this = $this | 0;
 HEAP32[$this >> 2] = (HEAP32[$this >> 2] | 0) + 1;
 return $this | 0;
}

function __ZN10__cxxabiv121__vmi_class_type_infoD0Ev($this) {
 $this = $this | 0;
 __ZN10__cxxabiv116__shim_type_infoD2Ev($this);
 __ZdlPv($this);
 return;
}

function __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE6setbufEPwl($this, $0, $1) {
 $this = $this | 0;
 $0 = $0 | 0;
 $1 = $1 | 0;
 return $this | 0;
}

function __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE6setbufEPcl($this, $0, $1) {
 $this = $this | 0;
 $0 = $0 | 0;
 $1 = $1 | 0;
 return $this | 0;
}

function __ZN10__cxxabiv120__si_class_type_infoD0Ev($this) {
 $this = $this | 0;
 __ZN10__cxxabiv116__shim_type_infoD2Ev($this);
 __ZdlPv($this);
 return;
}

function b10(p0, p1, p2, p3, p4, p5) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = +p5;
 nullFunc_iiiiiid(10);
 return 0;
}

function __ZNSt13runtime_errorD2Ev($this) {
 $this = $this | 0;
 HEAP32[$this >> 2] = 18468;
 __ZNSt3__218__libcpp_refstringD2Ev($this + 4 | 0);
 return;
}

function __ZN8nlohmann6detail9exceptionD2Ev($this) {
 $this = $this | 0;
 HEAP32[$this >> 2] = 17508;
 __ZNSt13runtime_errorD2Ev($this + 8 | 0);
 return;
}

function __ZNSt3__27codecvtIwc11__mbstate_tED0Ev($this) {
 $this = $this | 0;
 __ZNSt3__27codecvtIwc11__mbstate_tED2Ev($this);
 __ZdlPv($this);
 return;
}

function __ZNSt3__26locale5__imp12make_classicEv() {
 __ZNSt3__212_GLOBAL__N_14makeINS_6locale5__impEjEERT_T0_();
 HEAP32[15388] = 58968;
 return 61552;
}

function establishStackSpace(stackBase, stackMax) {
 stackBase = stackBase | 0;
 stackMax = stackMax | 0;
 STACKTOP = stackBase;
 STACK_MAX = stackMax;
}

function dynCall_vif(index, a1, a2) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = Math_fround(a2);
 FUNCTION_TABLE_vif[index & 3](a1 | 0, Math_fround(a2));
}

function dynCall_vfi(index, a1, a2) {
 index = index | 0;
 a1 = Math_fround(a1);
 a2 = a2 | 0;
 FUNCTION_TABLE_vfi[index & 1](Math_fround(a1), a2 | 0);
}

function b4(p0, p1, p2, p3, p4, p5) {
 p0 = p0 | 0;
 p1 = +p1;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 nullFunc_iidiiii(4);
 return 0;
}

function ___emscripten_stdout_seek($f, $0, $1, $whence) {
 $f = $f | 0;
 $0 = $0 | 0;
 $1 = $1 | 0;
 $whence = $whence | 0;
 setTempRet0(0);
 return 0;
}

function __ZNSt11logic_errorD2Ev($this) {
 $this = $this | 0;
 HEAP32[$this >> 2] = 18448;
 __ZNSt3__218__libcpp_refstringD2Ev($this + 4 | 0);
 return;
}

function __ZN10__cxxabiv117__class_type_infoD0Ev($this) {
 $this = $this | 0;
 __ZN10__cxxabiv116__shim_type_infoD2Ev($this);
 __ZdlPv($this);
 return;
}

function __ZNSt3__216generic_categoryEv() {
 if (!(HEAP8[59136] | 0)) if (___cxa_guard_acquire(59136) | 0) ___cxa_guard_release(59136);
 return 21936;
}

function __ZN8nlohmann6detail16invalid_iteratorD0Ev($this) {
 $this = $this | 0;
 __ZN8nlohmann6detail9exceptionD2Ev($this);
 __ZdlPv($this);
 return;
}

function dynCall_vidd(index, a1, a2, a3) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = +a2;
 a3 = +a3;
 FUNCTION_TABLE_vidd[index & 3](a1 | 0, +a2, +a3);
}

function _emscripten_glTexParameterf$legalf32(a, b, c) {
 a = a | 0;
 b = b | 0;
 c = Math_fround(c);
 _emscripten_glTexParameterf(a | 0, b | 0, +c);
}

function __ZNSt3__215system_categoryEv() {
 if (!(HEAP8[59144] | 0)) if (___cxa_guard_acquire(59144) | 0) ___cxa_guard_release(59144);
 return 21940;
}

function __ZNSt3__211char_traitsIcE2eqEcc($__c1, $__c2) {
 $__c1 = $__c1 | 0;
 $__c2 = $__c2 | 0;
 return $__c1 << 24 >> 24 == $__c2 << 24 >> 24 | 0;
}

function __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE9underflowEv($this) {
 $this = $this | 0;
 return __ZNSt3__211char_traitsIwE3eofEv() | 0;
}

function __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE9underflowEv($this) {
 $this = $this | 0;
 return __ZNSt3__211char_traitsIcE3eofEv() | 0;
}

function _emscripten_glUniform2f$legalf32(a, b, c) {
 a = a | 0;
 b = Math_fround(b);
 c = Math_fround(c);
 _emscripten_glUniform2f(a | 0, +b, +c);
}

function __ZNSt3__24__fs10filesystem6detail12_GLOBAL__N_115posix_get_permsERK4stat($st) {
 $st = $st | 0;
 return HEAP32[$st + 12 >> 2] & 4095 | 0;
}

function __ZNSt3__211char_traitsIwE11eq_int_typeEjj($__c1, $__c2) {
 $__c1 = $__c1 | 0;
 $__c2 = $__c2 | 0;
 return ($__c1 | 0) == ($__c2 | 0) | 0;
}

function __ZNSt3__211char_traitsIcE11eq_int_typeEii($__c1, $__c2) {
 $__c1 = $__c1 | 0;
 $__c2 = $__c2 | 0;
 return ($__c1 | 0) == ($__c2 | 0) | 0;
}

function _swapc($x, $c) {
 $x = $x | 0;
 $c = $c | 0;
 var $or5 = 0;
 $or5 = _llvm_bswap_i32($x | 0) | 0;
 return (($c | 0) == 0 ? $x : $or5) | 0;
}

function _catgets($catd, $set_id, $msg_id, $s) {
 $catd = $catd | 0;
 $set_id = $set_id | 0;
 $msg_id = $msg_id | 0;
 $s = $s | 0;
 return $s | 0;
}

function __ZN8nlohmann6detail12out_of_rangeD0Ev($this) {
 $this = $this | 0;
 __ZN8nlohmann6detail9exceptionD2Ev($this);
 __ZdlPv($this);
 return;
}

function dynCall_iii(index, a1, a2) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 return FUNCTION_TABLE_iii[index & 31](a1 | 0, a2 | 0) | 0;
}

function b30(p0, p1, p2, p3, p4, p5) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 nullFunc_viiiiii(30);
}

function __ZN8nlohmann6detail11parse_errorD0Ev($this) {
 $this = $this | 0;
 __ZN8nlohmann6detail9exceptionD2Ev($this);
 __ZdlPv($this);
 return;
}

function __ZN8nlohmann6detail11other_errorD0Ev($this) {
 $this = $this | 0;
 __ZN8nlohmann6detail9exceptionD2Ev($this);
 __ZdlPv($this);
 return;
}

function __ZN8nlohmann6detail10type_errorD0Ev($this) {
 $this = $this | 0;
 __ZN8nlohmann6detail9exceptionD2Ev($this);
 __ZdlPv($this);
 return;
}

function dynCall_ff(index, a1) {
 index = index | 0;
 a1 = Math_fround(a1);
 return Math_fround(FUNCTION_TABLE_ff[index & 7](Math_fround(a1)));
}

function b17(p0, p1, p2, p3) {
 p0 = Math_fround(p0);
 p1 = Math_fround(p1);
 p2 = Math_fround(p2);
 p3 = Math_fround(p3);
 nullFunc_vffff(17);
}

function __ZN4tson4TextD2Ev($this) {
 $this = $this | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($this);
 return;
}

function __ZN4tson4GridD2Ev($this) {
 $this = $this | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($this);
 return;
}

function _strcat($dest, $src) {
 $dest = $dest | 0;
 $src = $src | 0;
 _strcpy($dest + (_strlen($dest) | 0) | 0, $src) | 0;
 return $dest | 0;
}

function __ZNSt3__212_GLOBAL__N_14makeINS_7codecvtIwc11__mbstate_tEEjEERT_T0_() {
 __ZNSt3__27codecvtIwc11__mbstate_tEC2Em(58696, 1);
 return;
}

function __ZN8nlohmann6detail9exceptionD0Ev($this) {
 $this = $this | 0;
 __ZN8nlohmann6detail9exceptionD2Ev($this);
 __ZdlPv($this);
 return;
}

function __ZNSt3__27codecvtIDsc11__mbstate_tED0Ev($this) {
 $this = $this | 0;
 __ZNSt3__26locale5facetD2Ev($this);
 __ZdlPv($this);
 return;
}

function __ZNSt3__27codecvtIDic11__mbstate_tED0Ev($this) {
 $this = $this | 0;
 __ZNSt3__26locale5facetD2Ev($this);
 __ZdlPv($this);
 return;
}

function __ZNSt3__217__widen_from_utf8ILm32EED0Ev($this) {
 $this = $this | 0;
 __ZNSt3__26locale5facetD2Ev($this);
 __ZdlPv($this);
 return;
}

function __ZNSt3__212_GLOBAL__N_17countofIwEEmPKT_S4_($begin, $end) {
 $begin = $begin | 0;
 $end = $end | 0;
 return $end - $begin >> 2 | 0;
}

function __ZNSt3__27codecvtIcc11__mbstate_tED0Ev($this) {
 $this = $this | 0;
 __ZNSt3__26locale5facetD2Ev($this);
 __ZdlPv($this);
 return;
}

function __ZNSt3__217bad_function_callD0Ev($this) {
 $this = $this | 0;
 __ZNSt3__217bad_function_callD2Ev($this);
 __ZdlPv($this);
 return;
}

function __ZNSt3__216__narrow_to_utf8ILm32EED0Ev($this) {
 $this = $this | 0;
 __ZNSt3__26locale5facetD2Ev($this);
 __ZdlPv($this);
 return;
}

function _vfprintf($f, $fmt, $ap) {
 $f = $f | 0;
 $fmt = $fmt | 0;
 $ap = $ap | 0;
 return ___vfprintf_internal($f, $fmt, $ap, 1, 45) | 0;
}

function _mbrlen($s, $n, $st) {
 $s = $s | 0;
 $n = $n | 0;
 $st = $st | 0;
 return _mbrtowc(0, $s, $n, ($st | 0) == 0 ? 60156 : $st) | 0;
}

function __ZNKSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEE8max_sizeEv($this) {
 $this = $this | 0;
 return 1073741823;
}

function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13do_date_orderEv($this) {
 $this = $this | 0;
 return 2;
}

function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13do_date_orderEv($this) {
 $this = $this | 0;
 return 2;
}

function __ZN4tson8WangTileD2Ev($this) {
 $this = $this | 0;
 __ZNSt3__213__vector_baseIiNS_9allocatorIiEEED2Ev($this + 12 | 0);
 return;
}

function _out($f, $s, $l) {
 $f = $f | 0;
 $s = $s | 0;
 $l = $l | 0;
 if (!(HEAP32[$f >> 2] & 32)) ___fwritex($s, $l, $f) | 0;
 return;
}

function __ZNSt3__26locale5__imp11make_globalEv() {
 __ZNSt3__26localeC2ERKS0_(61560, __ZNSt3__26locale7classicEv() | 0);
 return 61560;
}

function __ZNSt3__212_GLOBAL__N_17countofIcEEmPKT_S4_($begin, $end) {
 $begin = $begin | 0;
 $end = $end | 0;
 return $end - $begin | 0;
}

function __ZNSt3__210__stdinbufIwE9underflowEv($this) {
 $this = $this | 0;
 return __ZNSt3__210__stdinbufIwE9__getcharEb($this, 0) | 0;
}

function __ZNSt3__210__stdinbufIcE9underflowEv($this) {
 $this = $this | 0;
 return __ZNSt3__210__stdinbufIcE9__getcharEb($this, 0) | 0;
}

function dynCall_vii(index, a1, a2) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 FUNCTION_TABLE_vii[index & 127](a1 | 0, a2 | 0);
}

function b9(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 nullFunc_iiiiii(9);
 return 0;
}

function __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE5imbueERKNS_6localeE($this, $0) {
 $this = $this | 0;
 $0 = $0 | 0;
 return;
}

function __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE5imbueERKNS_6localeE($this, $0) {
 $this = $this | 0;
 $0 = $0 | 0;
 return;
}

function __ZNSt3__212_GLOBAL__N_14makeINS_7codecvtIDsc11__mbstate_tEEjEERT_T0_() {
 HEAP32[14679] = 0;
 HEAP32[14678] = 21704;
 return;
}

function __ZNSt3__212_GLOBAL__N_14makeINS_7codecvtIDic11__mbstate_tEEjEERT_T0_() {
 HEAP32[14681] = 0;
 HEAP32[14680] = 21752;
 return;
}

function __ZNKSt13runtime_error4whatEv($this) {
 $this = $this | 0;
 return __ZNKSt3__218__libcpp_refstring5c_strEv($this + 4 | 0) | 0;
}

function __ZNK8nlohmann6detail20primitive_iterator_t8is_beginEv($this) {
 $this = $this | 0;
 return (HEAP32[$this >> 2] | 0) == 0 | 0;
}

function b23(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = Math_fround(p1);
 p2 = Math_fround(p2);
 p3 = Math_fround(p3);
 nullFunc_vifff(23);
}

function _vsprintf($s, $fmt, $ap) {
 $s = $s | 0;
 $fmt = $fmt | 0;
 $ap = $ap | 0;
 return _vsnprintf($s, 2147483647, $fmt, $ap) | 0;
}

function __ZNSt3__212_GLOBAL__N_14makeINS_7codecvtIcc11__mbstate_tEEjEERT_T0_() {
 HEAP32[14673] = 0;
 HEAP32[14672] = 21656;
 return;
}

function __ZNSt3__210moneypunctIwLb1EED0Ev($this) {
 $this = $this | 0;
 __ZNSt3__26locale5facetD2Ev($this);
 __ZdlPv($this);
 return;
}

function __ZNSt3__210moneypunctIwLb0EED0Ev($this) {
 $this = $this | 0;
 __ZNSt3__26locale5facetD2Ev($this);
 __ZdlPv($this);
 return;
}

function __ZNSt3__210moneypunctIcLb1EED0Ev($this) {
 $this = $this | 0;
 __ZNSt3__26locale5facetD2Ev($this);
 __ZdlPv($this);
 return;
}

function __ZNSt3__210moneypunctIcLb0EED0Ev($this) {
 $this = $this | 0;
 __ZNSt3__26locale5facetD2Ev($this);
 __ZdlPv($this);
 return;
}

function __ZNK8nlohmann6detail9exception4whatEv($this) {
 $this = $this | 0;
 return __ZNKSt13runtime_error4whatEv($this + 8 | 0) | 0;
}

function _emscripten_glPolygonOffset$legalf32(a, b) {
 a = Math_fround(a);
 b = Math_fround(b);
 _emscripten_glPolygonOffset(+a, +b);
}

function ___loc_is_allocated($loc) {
 $loc = $loc | 0;
 return ($loc | 0) != 17980 & (($loc | 0) != 0 & ($loc | 0) != 60100) & 1 | 0;
}

function __ZNKSt11logic_error4whatEv($this) {
 $this = $this | 0;
 return __ZNKSt3__218__libcpp_refstring5c_strEv($this + 4 | 0) | 0;
}

function b8(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = +p4;
 nullFunc_iiiiid(8);
 return 0;
}

function _rlDisableTexture() {
 if ((HEAP32[47408 + ((HEAP32[14847] | 0) * 48 | 0) >> 2] | 0) < 8192) return;
 _rlglDraw();
 return;
}

function __ZNSt3__215__refstring_imp12_GLOBAL__N_113rep_from_dataEPKc_1492($data_) {
 $data_ = $data_ | 0;
 return $data_ + -12 | 0;
}

function __ZNSt3__210__stdinbufIwE5uflowEv($this) {
 $this = $this | 0;
 return __ZNSt3__210__stdinbufIwE9__getcharEb($this, 1) | 0;
}

function __ZNSt3__210__stdinbufIcE5uflowEv($this) {
 $this = $this | 0;
 return __ZNSt3__210__stdinbufIcE9__getcharEb($this, 1) | 0;
}

function _mbsinit($st) {
 $st = $st | 0;
 var $1 = 0;
 if (!$st) $1 = 1; else $1 = (HEAP32[$st >> 2] | 0) == 0 & 1;
 return $1 | 0;
}

function __ZNSt3__215__refstring_imp12_GLOBAL__N_113data_from_repEPNS1_9_Rep_baseE($rep) {
 $rep = $rep | 0;
 return $rep + 12 | 0;
}

function _tolower($c) {
 $c = $c | 0;
 var $tobool = 0;
 $tobool = (_isupper($c) | 0) == 0;
 return ($tobool ? $c : $c | 32) | 0;
}

function _emscripten_glVertexAttrib1f$legalf32(a, b) {
 a = a | 0;
 b = Math_fround(b);
 _emscripten_glVertexAttrib1f(a | 0, +b);
}

function _emscripten_glSampleCoverage$legalf32(a, b) {
 a = Math_fround(a);
 b = b | 0;
 _emscripten_glSampleCoverage(+a, b | 0);
}

function _emscripten_glDepthRangef$legalf32(a, b) {
 a = Math_fround(a);
 b = Math_fround(b);
 _emscripten_glDepthRangef(+a, +b);
}

function _do_read($f, $buf, $len) {
 $f = $f | 0;
 $buf = $buf | 0;
 $len = $len | 0;
 return ___string_read($f, $buf, $len) | 0;
}

function ___stdio_close($f) {
 $f = $f | 0;
 return (___wasi_fd_close(_dummy_560(HEAP32[$f + 60 >> 2] | 0) | 0) | 0) & 65535 | 0;
}

function __ZNSt3__212_GLOBAL__N_14makeINS_5ctypeIcEEDnbjEERT_T0_T1_T2_() {
 __ZNSt3__25ctypeIcEC2EPKtbm(58664, 0, 0, 1);
 return;
}

function __ZNSt12bad_any_castC2Ev($this) {
 $this = $this | 0;
 __ZNSt8bad_castC2Ev($this);
 HEAP32[$this >> 2] = 18596;
 return;
}

function __ZNKSt3__219__shared_weak_count13__get_deleterERKSt9type_info($this, $0) {
 $this = $this | 0;
 $0 = $0 | 0;
 return 0;
}

function __ZNSt3__26locale5facetD0Ev($this) {
 $this = $this | 0;
 __ZNSt3__26locale5facetD2Ev($this);
 __ZdlPv($this);
 return;
}

function __ZNSt3__26locale5__impD0Ev($this) {
 $this = $this | 0;
 __ZNSt3__26locale5__impD2Ev($this);
 __ZdlPv($this);
 return;
}

function __ZNSt3__212_GLOBAL__N_14makeINS_10moneypunctIwLb1EEEjEERT_T0_() {
 HEAP32[14711] = 0;
 HEAP32[14710] = 20996;
 return;
}

function __ZNSt3__212_GLOBAL__N_14makeINS_10moneypunctIwLb0EEEjEERT_T0_() {
 HEAP32[14709] = 0;
 HEAP32[14708] = 20940;
 return;
}

function __ZNSt3__212_GLOBAL__N_14makeINS_10moneypunctIcLb1EEEjEERT_T0_() {
 HEAP32[14707] = 0;
 HEAP32[14706] = 20884;
 return;
}

function __ZNSt3__212_GLOBAL__N_14makeINS_10moneypunctIcLb0EEEjEERT_T0_() {
 HEAP32[14705] = 0;
 HEAP32[14704] = 20828;
 return;
}

function __ZN8nlohmann6detail20primitive_iterator_tC2Ev($this) {
 $this = $this | 0;
 HEAP32[$this >> 2] = -2147483648;
 return;
}

function _llvm_bswap_i32(x) {
 x = x | 0;
 return (x & 255) << 24 | (x >> 8 & 255) << 16 | (x >> 16 & 255) << 8 | x >>> 24 | 0;
}

function __ZNSt3__29basic_iosIwNS_11char_traitsIwEEED2Ev($this) {
 $this = $this | 0;
 __ZNSt3__28ios_baseD2Ev($this);
 return;
}

function __ZNSt3__29basic_iosIcNS_11char_traitsIcEEED2Ev($this) {
 $this = $this | 0;
 __ZNSt3__28ios_baseD2Ev($this);
 return;
}

function __ZNSt3__28messagesIwED0Ev($this) {
 $this = $this | 0;
 __ZNSt3__26locale5facetD2Ev($this);
 __ZdlPv($this);
 return;
}

function __ZNSt3__28messagesIcED0Ev($this) {
 $this = $this | 0;
 __ZNSt3__26locale5facetD2Ev($this);
 __ZdlPv($this);
 return;
}

function __ZNSt3__215__refstring_imp12_GLOBAL__N_113rep_from_dataEPKc($data_) {
 $data_ = $data_ | 0;
 return $data_ + -12 | 0;
}

function b29(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 nullFunc_viiiii(29);
}

function __ZNSt3__28numpunctIwED0Ev($this) {
 $this = $this | 0;
 __ZNSt3__28numpunctIwED2Ev($this);
 __ZdlPv($this);
 return;
}

function __ZNSt3__28numpunctIcED0Ev($this) {
 $this = $this | 0;
 __ZNSt3__28numpunctIcED2Ev($this);
 __ZdlPv($this);
 return;
}

function __ZN8nlohmann6detail20primitive_iterator_t9set_beginEv($this) {
 $this = $this | 0;
 HEAP32[$this >> 2] = 0;
 return;
}

function __ZNKSt3__26vectorIN4tson7Vector2IiEENS_9allocatorIS3_EEE8max_sizeEv($this) {
 $this = $this | 0;
 return 536870911;
}

function __ZN4tson7Vector2IiEC2Ev($this) {
 $this = $this | 0;
 HEAP32[$this + 4 >> 2] = 0;
 HEAP32[$this >> 2] = 0;
 return;
}

function __ZNSt3__29__launderIKNS_4pairIKNS_5tupleIJiiEEEPN4tson4TileEEEEEPT_SB_($__p) {
 $__p = $__p | 0;
 return $__p | 0;
}

function __ZNSt3__27collateIwED0Ev($this) {
 $this = $this | 0;
 __ZNSt3__27collateIwED2Ev($this);
 __ZdlPv($this);
 return;
}

function __ZNSt3__27collateIcED0Ev($this) {
 $this = $this | 0;
 __ZNSt3__27collateIcED2Ev($this);
 __ZdlPv($this);
 return;
}

function __ZNSt3__25ctypeIwED0Ev($this) {
 $this = $this | 0;
 __ZNSt3__26locale5facetD2Ev($this);
 __ZdlPv($this);
 return;
}

function __ZNSt13runtime_errorD0Ev($this) {
 $this = $this | 0;
 __ZNSt13runtime_errorD2Ev($this);
 __ZdlPv($this);
 return;
}

function __ZNKSt3__26vectorIN4tson9WangColorENS_9allocatorIS2_EEE8max_sizeEv($this) {
 $this = $this | 0;
 return 178956970;
}

function __ZN8nlohmann6detail22input_adapter_protocolC2Ev($this) {
 $this = $this | 0;
 HEAP32[$this >> 2] = 17836;
 return;
}

function __ZN8nlohmann6detail20primitive_iterator_t7set_endEv($this) {
 $this = $this | 0;
 HEAP32[$this >> 2] = 1;
 return;
}

function dynCall_vf(index, a1) {
 index = index | 0;
 a1 = Math_fround(a1);
 FUNCTION_TABLE_vf[index & 3](Math_fround(a1));
}

function __ZNSt3__29__launderINS_4pairIKNS_5tupleIJiiEEEPN4tson4TileEEEEEPT_SA_($__p) {
 $__p = $__p | 0;
 return $__p | 0;
}

function __ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEED2Ev($this, $vtt) {
 $this = $this | 0;
 $vtt = $vtt | 0;
 return;
}

function __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEED2Ev($this, $vtt) {
 $this = $this | 0;
 $vtt = $vtt | 0;
 return;
}

function __ZNSt3__213basic_istreamIwNS_11char_traitsIwEEED2Ev($this, $vtt) {
 $this = $this | 0;
 $vtt = $vtt | 0;
 return;
}

function __ZNSt3__213basic_istreamIcNS_11char_traitsIcEEED2Ev($this, $vtt) {
 $this = $this | 0;
 $vtt = $vtt | 0;
 return;
}

function __ZNKSt3__26vectorIN4tson8WangTileENS_9allocatorIS2_EEE8max_sizeEv($this) {
 $this = $this | 0;
 return 178956970;
}

function __ZNKSt3__26vectorIN4tson7TerrainENS_9allocatorIS2_EEE8max_sizeEv($this) {
 $this = $this | 0;
 return 107374182;
}

function _strerror($e) {
 $e = $e | 0;
 return ___strerror_l($e, HEAP32[(___pthread_self_105() | 0) + 188 >> 2] | 0) | 0;
}

function __ZNSt3__212_GLOBAL__N_14makeINS_8messagesIwEEjEERT_T0_() {
 HEAP32[14739] = 0;
 HEAP32[14738] = 21196;
 return;
}

function __ZNSt3__212_GLOBAL__N_14makeINS_8messagesIcEEjEERT_T0_() {
 HEAP32[14737] = 0;
 HEAP32[14736] = 21164;
 return;
}

function __ZNSt12length_errorD0Ev($this) {
 $this = $this | 0;
 __ZNSt11logic_errorD2Ev($this);
 __ZdlPv($this);
 return;
}

function __ZNKSt3__26vectorIN4tson7WangSetENS_9allocatorIS2_EEE8max_sizeEv($this) {
 $this = $this | 0;
 return 56512727;
}

function __ZNKSt3__26vectorIN4tson7TilesetENS_9allocatorIS2_EEE8max_sizeEv($this) {
 $this = $this | 0;
 return 26188824;
}

function __ZNSt3__28ios_baseD0Ev($this) {
 $this = $this | 0;
 __ZNSt3__28ios_baseD2Ev($this);
 __ZdlPv($this);
 return;
}

function __ZNSt3__212_GLOBAL__N_14makeINS_7collateIwEEjEERT_T0_() {
 HEAP32[14665] = 0;
 HEAP32[14664] = 19260;
 return;
}

function __ZNSt3__212_GLOBAL__N_14makeINS_7collateIcEEjEERT_T0_() {
 HEAP32[14663] = 0;
 HEAP32[14662] = 19228;
 return;
}

function __ZNSt11logic_errorD0Ev($this) {
 $this = $this | 0;
 __ZNSt11logic_errorD2Ev($this);
 __ZdlPv($this);
 return;
}

function __ZNKSt3__26vectorIN4tson6ObjectENS_9allocatorIS2_EEE8max_sizeEv($this) {
 $this = $this | 0;
 return 30678337;
}

function __ZNKSt3__26vectorIN4tson5FrameENS_9allocatorIS2_EEE8max_sizeEv($this) {
 $this = $this | 0;
 return 536870911;
}

function __ZNKSt3__26vectorIN4tson5ChunkENS_9allocatorIS2_EEE8max_sizeEv($this) {
 $this = $this | 0;
 return 107374182;
}

function _emscripten_glUniform1f$legalf32(a, b) {
 a = a | 0;
 b = Math_fround(b);
 _emscripten_glUniform1f(a | 0, +b);
}
function __ZNSt3__25ctypeIcED0Ev($this) {
 $this = $this | 0;
 __ZNSt3__25ctypeIcED2Ev($this);
 __ZdlPv($this);
 return;
}

function __ZNKSt3__26vectorIN4tson5LayerENS_9allocatorIS2_EEE8max_sizeEv($this) {
 $this = $this | 0;
 return 19522578;
}

function dynCall_ii(index, a1) {
 index = index | 0;
 a1 = a1 | 0;
 return FUNCTION_TABLE_ii[index & 127](a1 | 0) | 0;
}

function _strncpy($d, $s, $n) {
 $d = $d | 0;
 $s = $s | 0;
 $n = $n | 0;
 ___stpncpy($d, $s, $n) | 0;
 return $d | 0;
}

function __ZNSt3__212_GLOBAL__N_14makeINS_6locale5__impEjEERT_T0_() {
 __ZNSt3__26locale5__impC2Em(58968, 1);
 return;
}

function __ZNSt3__212_GLOBAL__N_14makeINS_5ctypeIwEEjEERT_T0_() {
 HEAP32[14671] = 0;
 HEAP32[14670] = 21588;
 return;
}

function __ZNKSt3__28numpunctIwE16do_thousands_sepEv($this) {
 $this = $this | 0;
 return HEAP32[$this + 12 >> 2] | 0;
}

function __ZNKSt3__26vectorIN4tson4TileENS_9allocatorIS2_EEE8max_sizeEv($this) {
 $this = $this | 0;
 return 14128181;
}

function _strcpy($dest, $src) {
 $dest = $dest | 0;
 $src = $src | 0;
 ___stpcpy($dest, $src) | 0;
 return $dest | 0;
}

function __ZNSt9exceptionC2ERKS_($this, $0) {
 $this = $this | 0;
 $0 = $0 | 0;
 HEAP32[$this >> 2] = 18428;
 return;
}

function __ZNSt3__210moneypunctIwLb1EED2Ev($this) {
 $this = $this | 0;
 __ZNSt3__26locale5facetD2Ev($this);
 return;
}

function __ZNSt3__210moneypunctIwLb0EED2Ev($this) {
 $this = $this | 0;
 __ZNSt3__26locale5facetD2Ev($this);
 return;
}

function __ZNSt3__210moneypunctIcLb1EED2Ev($this) {
 $this = $this | 0;
 __ZNSt3__26locale5facetD2Ev($this);
 return;
}

function __ZNSt3__210moneypunctIcLb0EED2Ev($this) {
 $this = $this | 0;
 __ZNSt3__26locale5facetD2Ev($this);
 return;
}

function __ZNSt12bad_any_castD0Ev($this) {
 $this = $this | 0;
 __ZNSt8bad_castD2Ev($this);
 __ZdlPv($this);
 return;
}

function __ZNKSt3__28numpunctIwE16do_decimal_pointEv($this) {
 $this = $this | 0;
 return HEAP32[$this + 8 >> 2] | 0;
}

function b7(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 nullFunc_iiiii(7);
 return 0;
}

function _vprintf($fmt, $ap) {
 $fmt = $fmt | 0;
 $ap = $ap | 0;
 return _vfprintf(HEAP32[4503] | 0, $fmt, $ap) | 0;
}

function __ZNSt3__212_GLOBAL__N_14makeINS_8numpunctIwEEjEERT_T0_() {
 __ZNSt3__28numpunctIwEC2Em(58752, 1);
 return;
}

function __ZNSt3__212_GLOBAL__N_14makeINS_8numpunctIcEEjEERT_T0_() {
 __ZNSt3__28numpunctIcEC2Em(58728, 1);
 return;
}

function __ZNKSt3__28numpunctIcE16do_thousands_sepEv($this) {
 $this = $this | 0;
 return HEAP8[$this + 9 >> 0] | 0;
}

function __ZNKSt3__28numpunctIcE16do_decimal_pointEv($this) {
 $this = $this | 0;
 return HEAP8[$this + 8 >> 0] | 0;
}

function __ZN10__cxxabiv119__getExceptionClassEPK17_Unwind_Exception($0) {
 $0 = $0 | 0;
 setTempRet0(0);
 return 0;
}

function _isxdigit($c) {
 $c = $c | 0;
 return ((($c | 32) + -97 | 0) >>> 0 < 6 | (_isdigit($c) | 0) != 0) & 1 | 0;
}

function __ZNSt3__220__time_get_c_storageIwEC2Ev($this) {
 $this = $this | 0;
 HEAP32[$this >> 2] = 21836;
 return;
}

function __ZNSt3__220__time_get_c_storageIcEC2Ev($this) {
 $this = $this | 0;
 HEAP32[$this >> 2] = 21800;
 return;
}

function __ZNKSt3__25ctypeIwE8do_widenEc($this, $c) {
 $this = $this | 0;
 $c = $c | 0;
 return $c << 24 >> 24 | 0;
}

function _strrchr($s, $c) {
 $s = $s | 0;
 $c = $c | 0;
 return ___memrchr($s, $c, (_strlen($s) | 0) + 1 | 0) | 0;
}

function __ZNKSt3__221__basic_string_commonILb1EE20__throw_out_of_rangeEv($this) {
 $this = $this | 0;
 _abort();
}

function __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($this) {
 $this = $this | 0;
 _abort();
}

function _strtof_l($s, $p, $l) {
 $s = $s | 0;
 $p = $p | 0;
 $l = $l | 0;
 return Math_fround(_strtof($s, $p));
}

function __ZNSt8bad_castD0Ev($this) {
 $this = $this | 0;
 __ZNSt8bad_castD2Ev($this);
 __ZdlPv($this);
 return;
}

function __ZNSt3__25ctypeIcE21__classic_upper_tableEv() {
 return HEAP32[(___ctype_toupper_loc() | 0) >> 2] | 0;
}

function __ZNSt3__25ctypeIcE21__classic_lower_tableEv() {
 return HEAP32[(___ctype_tolower_loc() | 0) >> 2] | 0;
}

function __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($this) {
 $this = $this | 0;
 _abort();
}

function __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE9showmanycEv($this) {
 $this = $this | 0;
 return 0;
}

function __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE9showmanycEv($this) {
 $this = $this | 0;
 return 0;
}

function __ZNSt3__28messagesIwED2Ev($this) {
 $this = $this | 0;
 __ZNSt3__26locale5facetD2Ev($this);
 return;
}

function __ZNSt3__28messagesIcED2Ev($this) {
 $this = $this | 0;
 __ZNSt3__26locale5facetD2Ev($this);
 return;
}

function __ZNSt3__217_DeallocateCaller9__do_callEPv($__ptr) {
 $__ptr = $__ptr | 0;
 __ZdlPv($__ptr);
 return;
}

function b1(p0, p1) {
 p0 = Math_fround(p0);
 p1 = Math_fround(p1);
 nullFunc_fff(1);
 return Math_fround(0);
}

function __ZNSt3__29__launderIKNS_4pairIKiPN4tson4TileEEEEEPT_S9_($__p) {
 $__p = $__p | 0;
 return $__p | 0;
}

function __ZNSt3__27collateIwED2Ev($this) {
 $this = $this | 0;
 __ZNSt3__26locale5facetD2Ev($this);
 return;
}

function __ZNSt3__27collateIcED2Ev($this) {
 $this = $this | 0;
 __ZNSt3__26locale5facetD2Ev($this);
 return;
}

function __ZNSt3__217bad_function_callC2Ev($this) {
 $this = $this | 0;
 HEAP32[$this >> 2] = 18616;
 return;
}

function __ZNKSt3__218__libcpp_refstring5c_strEv($this) {
 $this = $this | 0;
 return HEAP32[$this >> 2] | 0;
}

function __ZNSt3__29__launderINS_4pairIKiPN4tson4TileEEEEEPT_S8_($__p) {
 $__p = $__p | 0;
 return $__p | 0;
}

function __ZNKSt3__210moneypunctIwLb1EE16do_thousands_sepEv($this) {
 $this = $this | 0;
 return 2147483647;
}

function __ZNKSt3__210moneypunctIwLb1EE16do_decimal_pointEv($this) {
 $this = $this | 0;
 return 2147483647;
}

function __ZNKSt3__210moneypunctIwLb0EE16do_thousands_sepEv($this) {
 $this = $this | 0;
 return 2147483647;
}

function __ZNKSt3__210moneypunctIwLb0EE16do_decimal_pointEv($this) {
 $this = $this | 0;
 return 2147483647;
}

function __ZNK8nlohmann6detail10position_tcvmEv($this) {
 $this = $this | 0;
 return HEAP32[$this >> 2] | 0;
}

function dynCall_vi(index, a1) {
 index = index | 0;
 a1 = a1 | 0;
 FUNCTION_TABLE_vi[index & 255](a1 | 0);
}

function b28(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 nullFunc_viiii(28);
}

function __ZNKSt3__26vectorIiNS_9allocatorIiEEE8max_sizeEv($this) {
 $this = $this | 0;
 return 1073741823;
}

function __ZNKSt3__26vectorIcNS_9allocatorIcEEE8max_sizeEv($this) {
 $this = $this | 0;
 return 2147483647;
}

function __ZNKSt3__26vectorIbNS_9allocatorIbEEE8max_sizeEv($this) {
 $this = $this | 0;
 return 2147483647;
}

function __ZNK4tson7Tileset11getFirstgidEv($this) {
 $this = $this | 0;
 return HEAP32[$this + 4 >> 2] | 0;
}

function __ZNK4tson7Tileset10getSpacingEv($this) {
 $this = $this | 0;
 return HEAP32[$this + 44 >> 2] | 0;
}

function b22(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = Math_fround(p1);
 p2 = Math_fround(p2);
 nullFunc_viff(22);
}

function ___lctrans($msg, $lm) {
 $msg = $msg | 0;
 $lm = $lm | 0;
 return ___lctrans_impl($msg, $lm) | 0;
}

function ___clang_call_terminate($0) {
 $0 = $0 | 0;
 ___cxa_begin_catch($0 | 0) | 0;
 __ZSt9terminatev();
}

function __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE4syncEv($this) {
 $this = $this | 0;
 return 0;
}

function __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE4syncEv($this) {
 $this = $this | 0;
 return 0;
}

function __ZNKSt3__27codecvtIDsc11__mbstate_tE16do_always_noconvEv($this) {
 $this = $this | 0;
 return 0;
}

function __ZNKSt3__27codecvtIDic11__mbstate_tE16do_always_noconvEv($this) {
 $this = $this | 0;
 return 0;
}

function _strtold_l($s, $p, $l) {
 $s = $s | 0;
 $p = $p | 0;
 $l = $l | 0;
 return +(+_strtold($s, $p));
}

function __ZNKSt3__28messagesIwE8do_closeEl($this, $__c) {
 $this = $this | 0;
 $__c = $__c | 0;
 return;
}

function __ZNKSt3__28messagesIcE8do_closeEl($this, $__c) {
 $this = $this | 0;
 $__c = $__c | 0;
 return;
}

function __ZNKSt3__27codecvtIwc11__mbstate_tE16do_always_noconvEv($this) {
 $this = $this | 0;
 return 0;
}

function __ZNKSt3__27codecvtIcc11__mbstate_tE16do_always_noconvEv($this) {
 $this = $this | 0;
 return 1;
}

function __ZNK4tson7Tileset9getMarginEv($this) {
 $this = $this | 0;
 return HEAP32[$this + 28 >> 2] | 0;
}

function __ZNSt3__224__generic_error_categoryD0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function _strtod_l($s, $p, $l) {
 $s = $s | 0;
 $p = $p | 0;
 $l = $l | 0;
 return +(+_strtod($s, $p));
}

function __ZNSt3__223__system_error_categoryD0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function __ZNKSt3__27codecvtIDsc11__mbstate_tE13do_max_lengthEv($this) {
 $this = $this | 0;
 return 4;
}

function __ZNKSt3__27codecvtIDic11__mbstate_tE13do_max_lengthEv($this) {
 $this = $this | 0;
 return 4;
}

function __ZNKSt3__25ctypeIcE8do_widenEc($this, $c) {
 $this = $this | 0;
 $c = $c | 0;
 return $c | 0;
}

function __ZNKSt3__27codecvtIcc11__mbstate_tE13do_max_lengthEv($this) {
 $this = $this | 0;
 return 1;
}

function __ZNK4tson7Tileset10getColumnsEv($this) {
 $this = $this | 0;
 return HEAP32[$this >> 2] | 0;
}

function _emscripten_glClearDepthf$legalf32(a) {
 a = Math_fround(a);
 _emscripten_glClearDepthf(+a);
}

function __ZNSt3__211char_traitsIcE12to_char_typeEi($__c) {
 $__c = $__c | 0;
 return $__c & 255 | 0;
}

function __ZNKSt3__27codecvtIDsc11__mbstate_tE11do_encodingEv($this) {
 $this = $this | 0;
 return 0;
}

function __ZNKSt3__27codecvtIDic11__mbstate_tE11do_encodingEv($this) {
 $this = $this | 0;
 return 0;
}

function __ZNKSt3__210moneypunctIcLb1EE16do_thousands_sepEv($this) {
 $this = $this | 0;
 return 127;
}

function __ZNKSt3__210moneypunctIcLb1EE16do_decimal_pointEv($this) {
 $this = $this | 0;
 return 127;
}

function __ZNKSt3__210moneypunctIcLb0EE16do_thousands_sepEv($this) {
 $this = $this | 0;
 return 127;
}

function __ZNKSt3__210moneypunctIcLb0EE16do_decimal_pointEv($this) {
 $this = $this | 0;
 return 127;
}

function __ZNK4tson3Map9getStatusEv($this) {
 $this = $this | 0;
 return HEAP8[$this + 160 >> 0] | 0;
}

function __ZN8nlohmann6detail22input_adapter_protocolD0Ev($this) {
 $this = $this | 0;
 _llvm_trap();
}

function __ZN10__cxxabiv121__isOurExceptionClassEPK17_Unwind_Exception($0) {
 $0 = $0 | 0;
 return 0;
}

function __ZNSt3__211char_traitsIcE11to_int_typeEc($__c) {
 $__c = $__c | 0;
 return $__c & 255 | 0;
}

function __ZNKSt3__27codecvtIcc11__mbstate_tE11do_encodingEv($this) {
 $this = $this | 0;
 return 1;
}

function __ZNK4tson6Object5getIdEv($this) {
 $this = $this | 0;
 return HEAP32[$this + 16 >> 2] | 0;
}

function _llvm_round_f64(d) {
 d = +d;
 return d >= 0.0 ? +Math_floor(d + .5) : +Math_ceil(d - .5);
}

function __ZNSt3__23any8_StorageC2Ev($this) {
 $this = $this | 0;
 HEAP32[$this >> 2] = 0;
 return;
}

function __ZNSt3__211char_traitsIwE6lengthEPKw($__s) {
 $__s = $__s | 0;
 return _wcslen($__s) | 0;
}

function __ZNSt3__211char_traitsIcE6lengthEPKc($__s) {
 $__s = $__s | 0;
 return _strlen($__s) | 0;
}

function __ZNKSt3__218__libcpp_refstring15__uses_refcountEv($this) {
 $this = $this | 0;
 return 1;
}

function __ZNK7Enemigo8getWidthEv($this) {
 $this = $this | 0;
 return +(+HEAPF64[$this + 8 >> 3]);
}

function __ZNSt3__25ctypeIcE13classic_tableEv() {
 return HEAP32[(___ctype_b_loc() | 0) >> 2] | 0;
}

function __ZNK4tson4Tile5getIdEv($this) {
 $this = $this | 0;
 return HEAP32[$this + 12 >> 2] | 0;
}

function b6(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_iiii(6);
 return 0;
}

function b26(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = Math_fround(p2);
 nullFunc_viif(26);
}

function _pthread_cond_wait($cond, $mutex) {
 $cond = $cond | 0;
 $mutex = $mutex | 0;
 return 0;
}

function _isspace($c) {
 $c = $c | 0;
 return (($c | 0) == 32 | ($c + -9 | 0) >>> 0 < 5) & 1 | 0;
}

function _emscripten_glLineWidth$legalf32(a) {
 a = Math_fround(a);
 _emscripten_glLineWidth(+a);
}

function __ZNKSt3__224__generic_error_category4nameEv($this) {
 $this = $this | 0;
 return 45116;
}

function __ZNKSt3__210moneypunctIwLb1EE14do_frac_digitsEv($this) {
 $this = $this | 0;
 return 0;
}

function __ZNKSt3__210moneypunctIwLb0EE14do_frac_digitsEv($this) {
 $this = $this | 0;
 return 0;
}

function __ZNKSt3__210moneypunctIcLb1EE14do_frac_digitsEv($this) {
 $this = $this | 0;
 return 0;
}

function __ZNKSt3__210moneypunctIcLb0EE14do_frac_digitsEv($this) {
 $this = $this | 0;
 return 0;
}

function _strtof($s, $p) {
 $s = $s | 0;
 $p = $p | 0;
 return Math_fround(+_strtox($s, $p, 0));
}

function __ZNKSt3__223__system_error_category4nameEv($this) {
 $this = $this | 0;
 return 45241;
}

function __ZNK4Nave8getWidthEv($this) {
 $this = $this | 0;
 return +(+HEAPF64[$this + 8 >> 3]);
}

function __ZNSt8bad_castC2Ev($this) {
 $this = $this | 0;
 HEAP32[$this >> 2] = 18508;
 return;
}

function __ZNSt3__211char_traitsIwE12to_char_typeEj($__c) {
 $__c = $__c | 0;
 return $__c | 0;
}

function __ZNK4tson6Object11getPositionEv($this) {
 $this = $this | 0;
 return $this + 132 | 0;
}

function __ZN8nlohmann6detail22input_adapter_protocolD2Ev($this) {
 $this = $this | 0;
 return;
}

function _UnloadImage($image) {
 $image = $image | 0;
 _free(HEAP32[$image >> 2] | 0);
 return;
}

function _freelocale($l) {
 $l = $l | 0;
 if (___loc_is_allocated($l) | 0) _free($l);
 return;
}

function __ZNSt3__211char_traitsIwE11to_int_typeEw($__c) {
 $__c = $__c | 0;
 return $__c | 0;
}

function __ZNK4tson5Layer11getTileDataEv($this) {
 $this = $this | 0;
 return $this + 208 | 0;
}

function __ZNK4tson3Map18getBackgroundColorEv($this) {
 $this = $this | 0;
 return $this | 0;
}

function _catopen($name, $oflag) {
 $name = $name | 0;
 $oflag = $oflag | 0;
 return -1 | 0;
}

function __ZSt18uncaught_exceptionv() {
 return (__ZSt19uncaught_exceptionsv() | 0) > 0 | 0;
}

function __ZNK7Enemigo13getEnemigoPosEv($this) {
 $this = $this | 0;
 return $this + 60 | 0;
}

function __ZNK4tson3Map11getTileSizeEv($this) {
 $this = $this | 0;
 return $this + 124 | 0;
}

function __ZN4tson5Layer10getObjectsEv($this) {
 $this = $this | 0;
 return $this + 112 | 0;
}

function __ZN4tson3Map11getTilesetsEv($this) {
 $this = $this | 0;
 return $this + 132 | 0;
}

function dynCall_i(index) {
 index = index | 0;
 return FUNCTION_TABLE_i[index & 3]() | 0;
}

function __ZNKSt3__217bad_function_call4whatEv($this) {
 $this = $this | 0;
 return 42214;
}

function __ZNK4tson8Property7getNameEv($this) {
 $this = $this | 0;
 return $this + 4 | 0;
}

function __ZNK4tson7Tileset8getImageEv($this) {
 $this = $this | 0;
 return $this + 8 | 0;
}

function __ZNK10__cxxabiv116__shim_type_info5noop2Ev($this) {
 $this = $this | 0;
 return;
}

function __ZNK10__cxxabiv116__shim_type_info5noop1Ev($this) {
 $this = $this | 0;
 return;
}

function __ZN4tson7Tileset8getTilesEv($this) {
 $this = $this | 0;
 return $this + 76 | 0;
}

function __ZNK4tson6Object7getNameEv($this) {
 $this = $this | 0;
 return $this + 20 | 0;
}

function __ZNK4tson5Layer7getNameEv($this) {
 $this = $this | 0;
 return $this + 100 | 0;
}

function b27(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_viii(27);
}

function b16(p0, p1) {
 p0 = Math_fround(p0);
 p1 = Math_fround(p1);
 nullFunc_vff(16);
}

function _strtold($s, $p) {
 $s = $s | 0;
 $p = $p | 0;
 return +(+_strtox($s, $p, 2));
}

function _strtod($s, $p) {
 $s = $s | 0;
 $p = $p | 0;
 return +(+_strtox($s, $p, 1));
}

function __ZNK4Nave10getNavePosEv($this) {
 $this = $this | 0;
 return $this + 60 | 0;
}

function _isxdigit_l($c, $l) {
 $c = $c | 0;
 $l = $l | 0;
 return _isxdigit($c) | 0;
}

function __ZN10__cxxabiv116__shim_type_infoD2Ev($this) {
 $this = $this | 0;
 return;
}

function _InitTimer() {
 _srand(_time(0) | 0);
 HEAPF64[7304] = +_GetTime();
 return;
}

function __ZNSt9exceptionD0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function _isdigit_l($c, $l) {
 $c = $c | 0;
 $l = $l | 0;
 return _isdigit($c) | 0;
}

function __ZNSt3__221__throw_runtime_errorEPKc($msg) {
 $msg = $msg | 0;
 _abort();
}

function b20(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = +p1;
 p2 = +p2;
 nullFunc_vidd(20);
}

function _copysignl($x, $y) {
 $x = +$x;
 $y = +$y;
 return +(+_copysign($x, $y));
}

function __ZSt19uncaught_exceptionsv() {
 return ___cxa_uncaught_exceptions() | 0;
}

function b0(p0) {
 p0 = Math_fround(p0);
 nullFunc_ff(0);
 return Math_fround(0);
}

function _scalbnl($x, $n) {
 $x = +$x;
 $n = $n | 0;
 return +(+_scalbn($x, $n));
}

function __ZNKSt12bad_any_cast4whatEv($this) {
 $this = $this | 0;
 return 42184;
}

function globalCtors() {
 __GLOBAL__I_000101();
 __GLOBAL__sub_I_iostream_cpp();
}

function __ZNSt3__217bad_function_callD2Ev($this) {
 $this = $this | 0;
 return;
}

function dynCall_v(index) {
 index = index | 0;
 FUNCTION_TABLE_v[index & 7]();
}

function _ldexp($x, $n) {
 $x = +$x;
 $n = $n | 0;
 return +(+_scalbn($x, $n));
}

function b5(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(5);
 return 0;
}

function b21(p0, p1) {
 p0 = p0 | 0;
 p1 = Math_fround(p1);
 nullFunc_vif(21);
}

function b18(p0, p1) {
 p0 = Math_fround(p0);
 p1 = p1 | 0;
 nullFunc_vfi(18);
}

function ___cxx_global_var_init() {
 __ZNSt3__28ios_base4InitC2Ev(0);
 return;
}

function __ZNSt3__214error_categoryD2Ev($this) {
 $this = $this | 0;
 return;
}

function __ZNSt3__214__shared_countD2Ev($this) {
 $this = $this | 0;
 return;
}

function __ZNKSt9exception4whatEv($this) {
 $this = $this | 0;
 return 38850;
}

function _isupper($c) {
 $c = $c | 0;
 return ($c + -65 | 0) >>> 0 < 26 | 0;
}

function _isdigit($c) {
 $c = $c | 0;
 return ($c + -48 | 0) >>> 0 < 10 | 0;
}

function __ZNKSt8bad_cast4whatEv($this) {
 $this = $this | 0;
 return 38916;
}

function _fmodl($x, $y) {
 $x = +$x;
 $y = +$y;
 return +(+_fmod($x, $y));
}

function __ZNSt3__26locale5facetD2Ev($this) {
 $this = $this | 0;
 return;
}

function _pthread_mutex_unlock($mutex) {
 $mutex = $mutex | 0;
 return 0;
}

function _pthread_cond_broadcast($cond) {
 $cond = $cond | 0;
 return 0;
}

function _SwapBuffers() {
 _glfwSwapBuffers(HEAP32[14954] | 0);
 return;
}

function _pthread_mutex_lock($mutex) {
 $mutex = $mutex | 0;
 return 0;
}

function __Znam($size) {
 $size = $size | 0;
 return __Znwm($size) | 0;
}

function b25(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_vii(25);
}

function __ZdaPv($ptr) {
 $ptr = $ptr | 0;
 __ZdlPv($ptr);
 return;
}

function __ZNSt9type_infoD2Ev($this) {
 $this = $this | 0;
 return;
}

function __ZNSt9exceptionD2Ev($this) {
 $this = $this | 0;
 return;
}

function __GLOBAL__I_000101() {
 ___cxx_global_var_init();
 return;
}

function ___emscripten_stdout_close($f) {
 $f = $f | 0;
 return 0;
}

function __ZNSt8bad_castD2Ev($this) {
 $this = $this | 0;
 return;
}

function _WindowShouldClose() {
 _emscripten_sleep(16);
 return 0;
}

function __ZdlPv($ptr) {
 $ptr = $ptr | 0;
 _free($ptr);
 return;
}

function __ZNSt3__212__do_nothingEPv($0) {
 $0 = $0 | 0;
 return;
}

function _GetFrameTime() {
 return Math_fround(+HEAPF64[7305]);
}

function stackRestore(top) {
 top = top | 0;
 STACKTOP = top;
}

function _rlClearScreenBuffers() {
 _glClear(16640);
 return;
}

function ___pthread_self_603() {
 return _pthread_self() | 0;
}

function ___pthread_self_423() {
 return _pthread_self() | 0;
}

function ___pthread_self_420() {
 return _pthread_self() | 0;
}

function ___pthread_self_417() {
 return _pthread_self() | 0;
}

function ___pthread_self_414() {
 return _pthread_self() | 0;
}

function ___pthread_self_234() {
 return _pthread_self() | 0;
}

function ___pthread_self_105() {
 return _pthread_self() | 0;
}

function setEmtStackMax(x) {
 x = x | 0;
 EMT_STACK_MAX = x;
}

function emtStackRestore(x) {
 x = x | 0;
 EMTSTACKTOP = x;
}

function b3(p0) {
 p0 = p0 | 0;
 nullFunc_ii(3);
 return 0;
}

function b15(p0) {
 p0 = Math_fround(p0);
 nullFunc_vf(15);
}

function _dummy_560($fd) {
 $fd = $fd | 0;
 return $fd | 0;
}

function _catclose($catd) {
 $catd = $catd | 0;
 return 0;
}

function ___pthread_self() {
 return _pthread_self() | 0;
}

function __ZNSt3__211char_traitsIwE3eofEv() {
 return -1;
}

function __ZNSt3__211char_traitsIcE3eofEv() {
 return -1;
}

function setAsyncState(x) {
 x = x | 0;
 asyncState = x;
}

function ___ofl_lock() {
 ___lock(60144);
 return 60152;
}

function _GetScreenHeight() {
 return HEAP32[14958] | 0;
}

function _GetScreenWidth() {
 return HEAP32[14957] | 0;
}

function getEmtStackMax() {
 return EMT_STACK_MAX | 0;
}

function ___ofl_unlock() {
 ___unlock(60144);
 return;
}

function _emscripten_get_sbrk_ptr() {
 return 63200;
}

function ___unlockfile($f) {
 $f = $f | 0;
 return;
}

function ___lockfile($f) {
 $f = $f | 0;
 return 1;
}

function ___cxa_get_globals_fast() {
 return 60160;
}

function emterpret(pc) {
 pc = pc | 0;
 assert(0);
}

function emtStackSave() {
 return EMTSTACKTOP | 0;
}

function b19(p0) {
 p0 = p0 | 0;
 nullFunc_vi(19);
}

function ___cxa_uncaught_exceptions() {
 return 0;
}

function __GLOBAL__sub_I_iostream_cpp() {
 return;
}

function __ZSt17__throw_bad_allocv() {
 _abort();
}

function _GetTime() {
 return +(+_glfwGetTime());
}

function ___ctype_toupper_loc() {
 return 18272;
}

function ___ctype_tolower_loc() {
 return 18268;
}

function __ZSt15get_new_handlerv() {
 return 0;
}

function ___errno_location() {
 return 60124;
}

function __ZSt13get_terminatev() {
 return 2;
}

function stackSave() {
 return STACKTOP | 0;
}

function b2() {
 nullFunc_i(2);
 return 0;
}

function ___ctype_b_loc() {
 return 18264;
}

function _pthread_self() {
 return 18020;
}

function _localeconv() {
 return 18284;
}

function _rlGetVersion() {
 return 4;
}

function b14() {
 nullFunc_v(14);
}

function _dummy_405() {
 return;
}

// EMSCRIPTEN_END_FUNCS
var FUNCTION_TABLE_ff = [b0,_stbir__support_zero,_stbir__support_trapezoid,_stbir__support_one,_stbir__support_two,b0,b0,b0];
var FUNCTION_TABLE_fff = [b1,_stbir__filter_trapezoid,_stbir__filter_triangle,_stbir__filter_cubic,_stbir__filter_catmullrom,_stbir__filter_mitchell,b1,b1];
var FUNCTION_TABLE_i = [b2,_emscripten_glCreateProgram,_emscripten_glGetError,b2];
var FUNCTION_TABLE_ii = [b3,__ZNK8nlohmann6detail9exception4whatEv,__ZN8nlohmann6detail20input_stream_adapter13get_characterEv,__ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE4syncEv,__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE9showmanycEv,__ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE9underflowEv,__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE5uflowEv,_stbi__stdio_eof,___stdio_close,___emscripten_stdout_close,__ZNKSt9exception4whatEv,__ZNKSt11logic_error4whatEv,__ZNKSt13runtime_error4whatEv,__ZNKSt8bad_cast4whatEv,__ZNKSt12bad_any_cast4whatEv,__ZNKSt3__217bad_function_call4whatEv,__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE4syncEv,__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE9underflowEv,__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE4syncEv,__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE9showmanycEv,__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE9underflowEv,__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE5uflowEv,__ZNSt3__211__stdoutbufIwE4syncEv,__ZNSt3__211__stdoutbufIcE4syncEv,__ZNSt3__210__stdinbufIwE9underflowEv,__ZNSt3__210__stdinbufIwE5uflowEv,__ZNSt3__210__stdinbufIcE9underflowEv,__ZNSt3__210__stdinbufIcE5uflowEv,__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13do_date_orderEv
,__ZNKSt3__220__time_get_c_storageIcE7__weeksEv,__ZNKSt3__220__time_get_c_storageIcE8__monthsEv,__ZNKSt3__220__time_get_c_storageIcE7__am_pmEv,__ZNKSt3__220__time_get_c_storageIcE3__cEv,__ZNKSt3__220__time_get_c_storageIcE3__rEv,__ZNKSt3__220__time_get_c_storageIcE3__xEv,__ZNKSt3__220__time_get_c_storageIcE3__XEv,__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13do_date_orderEv,__ZNKSt3__220__time_get_c_storageIwE7__weeksEv,__ZNKSt3__220__time_get_c_storageIwE8__monthsEv,__ZNKSt3__220__time_get_c_storageIwE7__am_pmEv,__ZNKSt3__220__time_get_c_storageIwE3__cEv,__ZNKSt3__220__time_get_c_storageIwE3__rEv,__ZNKSt3__220__time_get_c_storageIwE3__xEv,__ZNKSt3__220__time_get_c_storageIwE3__XEv,__ZNKSt3__210moneypunctIcLb0EE16do_decimal_pointEv,__ZNKSt3__210moneypunctIcLb0EE16do_thousands_sepEv,__ZNKSt3__210moneypunctIcLb0EE14do_frac_digitsEv,__ZNKSt3__210moneypunctIcLb1EE16do_decimal_pointEv,__ZNKSt3__210moneypunctIcLb1EE16do_thousands_sepEv,__ZNKSt3__210moneypunctIcLb1EE14do_frac_digitsEv,__ZNKSt3__210moneypunctIwLb0EE16do_decimal_pointEv,__ZNKSt3__210moneypunctIwLb0EE16do_thousands_sepEv,__ZNKSt3__210moneypunctIwLb0EE14do_frac_digitsEv,__ZNKSt3__210moneypunctIwLb1EE16do_decimal_pointEv,__ZNKSt3__210moneypunctIwLb1EE16do_thousands_sepEv,__ZNKSt3__210moneypunctIwLb1EE14do_frac_digitsEv,__ZNKSt3__27codecvtIDic11__mbstate_tE11do_encodingEv,__ZNKSt3__27codecvtIDic11__mbstate_tE16do_always_noconvEv,__ZNKSt3__27codecvtIDic11__mbstate_tE13do_max_lengthEv
,__ZNKSt3__27codecvtIwc11__mbstate_tE11do_encodingEv,__ZNKSt3__27codecvtIwc11__mbstate_tE16do_always_noconvEv,__ZNKSt3__27codecvtIwc11__mbstate_tE13do_max_lengthEv,__ZNKSt3__28numpunctIcE16do_decimal_pointEv,__ZNKSt3__28numpunctIcE16do_thousands_sepEv,__ZNKSt3__28numpunctIwE16do_decimal_pointEv,__ZNKSt3__28numpunctIwE16do_thousands_sepEv,__ZNKSt3__27codecvtIcc11__mbstate_tE11do_encodingEv,__ZNKSt3__27codecvtIcc11__mbstate_tE16do_always_noconvEv,__ZNKSt3__27codecvtIcc11__mbstate_tE13do_max_lengthEv,__ZNKSt3__27codecvtIDsc11__mbstate_tE11do_encodingEv,__ZNKSt3__27codecvtIDsc11__mbstate_tE16do_always_noconvEv,__ZNKSt3__27codecvtIDsc11__mbstate_tE13do_max_lengthEv,__ZNKSt3__224__generic_error_category4nameEv,__ZNKSt3__223__system_error_category4nameEv,_emscripten_glIsQueryEXT,_emscripten_glIsVertexArrayOES,_emscripten_glCheckFramebufferStatus,_emscripten_glCreateShader,_emscripten_glGetString,_emscripten_glIsBuffer,_emscripten_glIsEnabled,_emscripten_glIsFramebuffer,_emscripten_glIsProgram,_emscripten_glIsRenderbuffer,_emscripten_glIsShader,_emscripten_glIsTexture,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3];
var FUNCTION_TABLE_iidiiii = [b4,_fmt_fp];
var FUNCTION_TABLE_iii = [b5,__ZNKSt3__219__shared_weak_count13__get_deleterERKSt9type_info,__ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE9pbackfailEi,__ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE8overflowEi,__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE9pbackfailEi,__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE8overflowEi,__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE9pbackfailEj,__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE8overflowEj,__ZNSt3__211__stdoutbufIwE8overflowEj,__ZNSt3__211__stdoutbufIcE8overflowEi,__ZNSt3__210__stdinbufIwE9pbackfailEj,__ZNSt3__210__stdinbufIcE9pbackfailEi,__ZNKSt3__25ctypeIcE10do_toupperEc,__ZNKSt3__25ctypeIcE10do_tolowerEc,__ZNKSt3__25ctypeIcE8do_widenEc,__ZNKSt3__25ctypeIwE10do_toupperEw,__ZNKSt3__25ctypeIwE10do_tolowerEw,__ZNKSt3__25ctypeIwE8do_widenEc,_emscripten_glGetAttribLocation,_emscripten_glGetUniformLocation,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5];
var FUNCTION_TABLE_iiii = [b6,__ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE6setbufEPcl,__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE6xsgetnEPcl,__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE6xsputnEPKcl,_stbi__stdio_read,___stdio_write,___stdio_read,_sn_write,__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv,__ZNK10__cxxabiv123__fundamental_type_info9can_catchEPKNS_16__shim_type_infoERPv,__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE6setbufEPcl,__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE6setbufEPwl,__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE6xsgetnEPwl,__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE6xsputnEPKwl,__ZNSt3__211__stdoutbufIwE6xsputnEPKwl,__ZNSt3__211__stdoutbufIcE6xsputnEPKcl,__ZNKSt3__27collateIcE7do_hashEPKcS3_,__ZNKSt3__27collateIwE7do_hashEPKwS3_,__ZNKSt3__28messagesIcE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE,__ZNKSt3__28messagesIwE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE,__ZNKSt3__25ctypeIcE10do_toupperEPcPKc,__ZNKSt3__25ctypeIcE10do_tolowerEPcPKc,__ZNKSt3__25ctypeIcE9do_narrowEcc,__ZNKSt3__25ctypeIwE5do_isEtw,__ZNKSt3__25ctypeIwE10do_toupperEPwPKw,__ZNKSt3__25ctypeIwE10do_tolowerEPwPKw,__ZNKSt3__25ctypeIwE9do_narrowEwc,__ZNKSt3__214error_category10equivalentEiRKNS_15error_conditionE,__ZNKSt3__214error_category10equivalentERKNS_10error_codeEi
,_EmscriptenFullscreenChangeCallback,_EmscriptenKeyboardCallback,_EmscriptenMouseCallback,_EmscriptenTouchCallback,_EmscriptenGamepadCallback,_do_read,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6];
var FUNCTION_TABLE_iiiii = [b7,___stdio_seek,___emscripten_stdout_seek,__ZNKSt3__25ctypeIcE8do_widenEPKcS3_Pc,__ZNKSt3__25ctypeIwE5do_isEPKwS3_Pt,__ZNKSt3__25ctypeIwE10do_scan_isEtPKwS3_,__ZNKSt3__25ctypeIwE11do_scan_notEtPKwS3_,__ZNKSt3__25ctypeIwE8do_widenEPKcS3_Pw,__ZNSt3__210__function16__policy_invokerIFbiN8nlohmann6detail6parserINS2_10basic_jsonINS_3mapENS_6vectorENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEbxydSB_NS2_14adl_serializerEEEE13parse_event_tERSF_EE12__call_emptyEPKNS0_16__policy_storageEiSH_SI_,b7,b7,b7,b7,b7,b7,b7];
var FUNCTION_TABLE_iiiiid = [b8,__ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcd,__ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEce,__ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwd,__ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwe,b8,b8,b8];
var FUNCTION_TABLE_iiiiii = [b9,__ZNKSt3__27collateIcE10do_compareEPKcS3_S3_S3_,__ZNKSt3__27collateIwE10do_compareEPKwS3_S3_S3_,__ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcb,__ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcl,__ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcm,__ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPKv,__ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwb,__ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwl,__ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwm,__ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPKv,__ZNKSt3__27codecvtIDic11__mbstate_tE10do_unshiftERS1_PcS4_RS4_,__ZNKSt3__27codecvtIDic11__mbstate_tE9do_lengthERS1_PKcS5_m,__ZNKSt3__27codecvtIwc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_,__ZNKSt3__27codecvtIwc11__mbstate_tE9do_lengthERS1_PKcS5_m,__ZNKSt3__25ctypeIcE9do_narrowEPKcS3_cPc,__ZNKSt3__25ctypeIwE9do_narrowEPKwS3_cPc,__ZNKSt3__27codecvtIcc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_,__ZNKSt3__27codecvtIcc11__mbstate_tE9do_lengthERS1_PKcS5_m,__ZNKSt3__27codecvtIDsc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_,__ZNKSt3__27codecvtIDsc11__mbstate_tE9do_lengthERS1_PKcS5_m,__ZNSt3__29__any_imp13_SmallHandlerIN4tson5ColorIhEEE8__handleENS0_7_ActionEPKNS_3anyEPS7_PKSt9type_infoPKv,__ZNSt3__29__any_imp13_SmallHandlerINS_4__fs10filesystem4pathEE8__handleENS0_7_ActionEPKNS_3anyEPS7_PKSt9type_infoPKv,__ZNSt3__29__any_imp13_SmallHandlerIiE8__handleENS0_7_ActionEPKNS_3anyEPS4_PKSt9type_infoPKv,__ZNSt3__29__any_imp13_SmallHandlerIbE8__handleENS0_7_ActionEPKNS_3anyEPS4_PKSt9type_infoPKv,__ZNSt3__29__any_imp13_SmallHandlerIfE8__handleENS0_7_ActionEPKNS_3anyEPS4_PKSt9type_infoPKv,__ZNSt3__29__any_imp13_SmallHandlerINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEE8__handleENS0_7_ActionEPKNS_3anyEPSA_PKSt9type_infoPKv,b9,b9
,b9,b9,b9];
var FUNCTION_TABLE_iiiiiid = [b10,__ZNKSt3__29money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEce,__ZNKSt3__29money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwe,b10];
var FUNCTION_TABLE_iiiiiii = [b11,__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRb,__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRl,__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRx,__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRt,__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_,__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRm,__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRy,__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRf,__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRd,__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRe,__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv,__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRb,__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRl,__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRx,__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRt,__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_,__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRm,__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRy,__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRf,__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRd,__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRe,__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv,__ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcx,__ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcy,__ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwx,__ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwy,__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm
,__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__29money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEcRKNS_12basic_stringIcS3_NS_9allocatorIcEEEE,__ZNKSt3__29money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwRKNS_12basic_stringIwS3_NS_9allocatorIwEEEE,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11];
var FUNCTION_TABLE_iiiiiiii = [b12,__ZNKSt3__28time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPK2tmcc,__ZNKSt3__28time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPK2tmcc,__ZNKSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe,__ZNKSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIcS3_NS_9allocatorIcEEEE,__ZNKSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe,__ZNKSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIwS3_NS_9allocatorIwEEEE,b12];
var FUNCTION_TABLE_iiiiiiiii = [b13,__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc,__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc,__ZNKSt3__27codecvtIDic11__mbstate_tE6do_outERS1_PKDiS5_RS5_PcS7_RS7_,__ZNKSt3__27codecvtIDic11__mbstate_tE5do_inERS1_PKcS5_RS5_PDiS7_RS7_,__ZNKSt3__27codecvtIwc11__mbstate_tE6do_outERS1_PKwS5_RS5_PcS7_RS7_,__ZNKSt3__27codecvtIwc11__mbstate_tE5do_inERS1_PKcS5_RS5_PwS7_RS7_,__ZNKSt3__27codecvtIcc11__mbstate_tE6do_outERS1_PKcS5_RS5_PcS7_RS7_,__ZNKSt3__27codecvtIcc11__mbstate_tE5do_inERS1_PKcS5_RS5_PcS7_RS7_,__ZNKSt3__27codecvtIDsc11__mbstate_tE6do_outERS1_PKDsS5_RS5_PcS7_RS7_,__ZNKSt3__27codecvtIDsc11__mbstate_tE5do_inERS1_PKcS5_RS5_PDsS7_RS7_,b13,b13,b13,b13,b13];
var FUNCTION_TABLE_v = [b14,___cxa_pure_virtual,__ZL28demangling_terminate_handlerv,_emscripten_glFinish,_emscripten_glFlush,_emscripten_glReleaseShaderCompiler,b14,b14];
var FUNCTION_TABLE_vf = [b15,_emscripten_glClearDepthf$legalf32,_emscripten_glLineWidth$legalf32,b15];
var FUNCTION_TABLE_vff = [b16,_emscripten_glDepthRangef$legalf32,_emscripten_glPolygonOffset$legalf32,b16];
var FUNCTION_TABLE_vffff = [b17,_emscripten_glBlendColor$legalf32,_emscripten_glClearColor$legalf32,b17];
var FUNCTION_TABLE_vfi = [b18,_emscripten_glSampleCoverage$legalf32];
var FUNCTION_TABLE_vi = [b19,__ZNSt3__213basic_istreamIcNS_11char_traitsIcEEED1Ev,__ZNSt3__213basic_istreamIcNS_11char_traitsIcEEED0Ev,__ZTv0_n12_NSt3__213basic_istreamIcNS_11char_traitsIcEEED1Ev,__ZTv0_n12_NSt3__213basic_istreamIcNS_11char_traitsIcEEED0Ev,__ZNSt3__214basic_ifstreamIcNS_11char_traitsIcEEED1Ev,__ZNSt3__214basic_ifstreamIcNS_11char_traitsIcEEED0Ev,__ZTv0_n12_NSt3__214basic_ifstreamIcNS_11char_traitsIcEEED1Ev,__ZTv0_n12_NSt3__214basic_ifstreamIcNS_11char_traitsIcEEED0Ev,__ZN8nlohmann6detail9exceptionD2Ev,__ZN8nlohmann6detail9exceptionD0Ev,__ZN8nlohmann6detail10type_errorD0Ev,__ZN8nlohmann6detail16invalid_iteratorD0Ev,__ZN8nlohmann6detail11other_errorD0Ev,__ZN8nlohmann6detail12out_of_rangeD0Ev,__ZN8nlohmann6detail11parse_errorD0Ev,__ZNSt3__220__shared_ptr_emplaceIN8nlohmann6detail20input_stream_adapterENS_9allocatorIS3_EEED2Ev,__ZNSt3__220__shared_ptr_emplaceIN8nlohmann6detail20input_stream_adapterENS_9allocatorIS3_EEED0Ev,__ZNSt3__220__shared_ptr_emplaceIN8nlohmann6detail20input_stream_adapterENS_9allocatorIS3_EEE16__on_zero_sharedEv,__ZNSt3__220__shared_ptr_emplaceIN8nlohmann6detail20input_stream_adapterENS_9allocatorIS3_EEE21__on_zero_shared_weakEv,__ZN8nlohmann6detail20input_stream_adapterD2Ev,__ZN8nlohmann6detail20input_stream_adapterD0Ev,__ZN8nlohmann6detail22input_adapter_protocolD2Ev,__ZN8nlohmann6detail22input_adapter_protocolD0Ev,__ZNSt3__213basic_filebufIcNS_11char_traitsIcEEED2Ev,__ZNSt3__213basic_filebufIcNS_11char_traitsIcEEED0Ev,__ZN10__cxxabiv116__shim_type_infoD2Ev,__ZN10__cxxabiv117__class_type_infoD0Ev,__ZNK10__cxxabiv116__shim_type_info5noop1Ev
,__ZNK10__cxxabiv116__shim_type_info5noop2Ev,__ZN10__cxxabiv120__si_class_type_infoD0Ev,__ZNSt9exceptionD2Ev,__ZNSt9exceptionD0Ev,__ZNSt11logic_errorD2Ev,__ZNSt11logic_errorD0Ev,__ZNSt13runtime_errorD2Ev,__ZNSt13runtime_errorD0Ev,__ZNSt12length_errorD0Ev,__ZNSt8bad_castD2Ev,__ZNSt8bad_castD0Ev,__ZN10__cxxabiv123__fundamental_type_infoD0Ev,__ZN10__cxxabiv121__vmi_class_type_infoD0Ev,__ZNSt12bad_any_castD0Ev,__ZNSt3__217bad_function_callD2Ev,__ZNSt3__217bad_function_callD0Ev,__ZNSt3__28ios_baseD2Ev,__ZNSt3__28ios_baseD0Ev,__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED2Ev,__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED0Ev,__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEED2Ev,__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEED0Ev,__ZNSt3__213basic_istreamIwNS_11char_traitsIwEEED1Ev,__ZNSt3__213basic_istreamIwNS_11char_traitsIwEEED0Ev,__ZTv0_n12_NSt3__213basic_istreamIwNS_11char_traitsIwEEED1Ev,__ZTv0_n12_NSt3__213basic_istreamIwNS_11char_traitsIwEEED0Ev,__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEED1Ev,__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEED0Ev,__ZTv0_n12_NSt3__213basic_ostreamIcNS_11char_traitsIcEEED1Ev,__ZTv0_n12_NSt3__213basic_ostreamIcNS_11char_traitsIcEEED0Ev
,__ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEED1Ev,__ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEED0Ev,__ZTv0_n12_NSt3__213basic_ostreamIwNS_11char_traitsIwEEED1Ev,__ZTv0_n12_NSt3__213basic_ostreamIwNS_11char_traitsIwEEED0Ev,__ZNSt3__211__stdoutbufIwED0Ev,__ZNSt3__211__stdoutbufIcED0Ev,__ZNSt3__210__stdinbufIwED0Ev,__ZNSt3__210__stdinbufIcED0Ev,__ZNSt3__27collateIcED2Ev,__ZNSt3__27collateIcED0Ev,__ZNSt3__26locale5facet16__on_zero_sharedEv,__ZNSt3__27collateIwED2Ev,__ZNSt3__27collateIwED0Ev,__ZNSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev,__ZNSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,__ZNSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev,__ZNSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,__ZNSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev,__ZNSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,__ZNSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev,__ZNSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,__ZNSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev,__ZNSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,__ZNSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev,__ZNSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,__ZNSt3__28time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev,__ZNSt3__28time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,__ZNSt3__28time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev,__ZNSt3__28time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,__ZNSt3__210moneypunctIcLb0EED2Ev
,__ZNSt3__210moneypunctIcLb0EED0Ev,__ZNSt3__210moneypunctIcLb1EED2Ev,__ZNSt3__210moneypunctIcLb1EED0Ev,__ZNSt3__210moneypunctIwLb0EED2Ev,__ZNSt3__210moneypunctIwLb0EED0Ev,__ZNSt3__210moneypunctIwLb1EED2Ev,__ZNSt3__210moneypunctIwLb1EED0Ev,__ZNSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev,__ZNSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,__ZNSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev,__ZNSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,__ZNSt3__29money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev,__ZNSt3__29money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,__ZNSt3__29money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev,__ZNSt3__29money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,__ZNSt3__28messagesIcED2Ev,__ZNSt3__28messagesIcED0Ev,__ZNSt3__28messagesIwED2Ev,__ZNSt3__28messagesIwED0Ev,__ZNSt3__26locale5facetD2Ev,__ZNSt3__216__narrow_to_utf8ILm32EED0Ev,__ZNSt3__217__widen_from_utf8ILm32EED0Ev,__ZNSt3__27codecvtIwc11__mbstate_tED2Ev,__ZNSt3__27codecvtIwc11__mbstate_tED0Ev,__ZNSt3__26locale5__impD2Ev,__ZNSt3__26locale5__impD0Ev,__ZNSt3__25ctypeIcED2Ev,__ZNSt3__25ctypeIcED0Ev,__ZNSt3__28numpunctIcED2Ev,__ZNSt3__28numpunctIcED0Ev
,__ZNSt3__28numpunctIwED2Ev,__ZNSt3__28numpunctIwED0Ev,__ZNSt3__26locale5facetD0Ev,__ZNSt3__25ctypeIwED0Ev,__ZNSt3__27codecvtIcc11__mbstate_tED0Ev,__ZNSt3__27codecvtIDsc11__mbstate_tED0Ev,__ZNSt3__27codecvtIDic11__mbstate_tED0Ev,__ZNSt3__214error_categoryD2Ev,__ZNSt3__224__generic_error_categoryD0Ev,__ZNSt3__223__system_error_categoryD0Ev,_emscripten_glEndQueryEXT,_emscripten_glBindVertexArrayOES,_emscripten_glActiveTexture,_emscripten_glBlendEquation,_emscripten_glClear,_emscripten_glClearStencil,_emscripten_glCompileShader,_emscripten_glCullFace,_emscripten_glDeleteProgram,_emscripten_glDeleteShader,_emscripten_glDepthFunc,_emscripten_glDepthMask,_emscripten_glDisable,_emscripten_glDisableVertexAttribArray,_emscripten_glEnable,_emscripten_glEnableVertexAttribArray,_emscripten_glFrontFace,_emscripten_glGenerateMipmap,_emscripten_glLinkProgram,_emscripten_glStencilMask
,_emscripten_glUseProgram,_emscripten_glValidateProgram,__ZNSt3__26locale2id6__initEv,__ZNSt3__217__call_once_proxyINS_5tupleIJONS_12_GLOBAL__N_111__fake_bindEEEEEEvPv,__ZNSt3__212__do_nothingEPv,_free,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19];
var FUNCTION_TABLE_vidd = [b20,_MouseCursorPosCallback,_ScrollCallback,b20];
var FUNCTION_TABLE_vif = [b21,_emscripten_glUniform1f$legalf32,_emscripten_glVertexAttrib1f$legalf32,b21];
var FUNCTION_TABLE_viff = [b22,_emscripten_glUniform2f$legalf32,_emscripten_glVertexAttrib2f$legalf32,b22];
var FUNCTION_TABLE_vifff = [b23,_emscripten_glUniform3f$legalf32,_emscripten_glVertexAttrib3f$legalf32,b23];
var FUNCTION_TABLE_viffff = [b24,_emscripten_glUniform4f$legalf32,_emscripten_glVertexAttrib4f$legalf32,b24];
var FUNCTION_TABLE_vii = [b25,__ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE5imbueERKNS_6localeE,_stbi__stdio_skip,__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE5imbueERKNS_6localeE,__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE5imbueERKNS_6localeE,__ZNSt3__211__stdoutbufIwE5imbueERKNS_6localeE,__ZNSt3__211__stdoutbufIcE5imbueERKNS_6localeE,__ZNSt3__210__stdinbufIwE5imbueERKNS_6localeE,__ZNSt3__210__stdinbufIcE5imbueERKNS_6localeE,__ZNKSt3__210moneypunctIcLb0EE11do_groupingEv,__ZNKSt3__210moneypunctIcLb0EE14do_curr_symbolEv,__ZNKSt3__210moneypunctIcLb0EE16do_positive_signEv,__ZNKSt3__210moneypunctIcLb0EE16do_negative_signEv,__ZNKSt3__210moneypunctIcLb0EE13do_pos_formatEv,__ZNKSt3__210moneypunctIcLb0EE13do_neg_formatEv,__ZNKSt3__210moneypunctIcLb1EE11do_groupingEv,__ZNKSt3__210moneypunctIcLb1EE14do_curr_symbolEv,__ZNKSt3__210moneypunctIcLb1EE16do_positive_signEv,__ZNKSt3__210moneypunctIcLb1EE16do_negative_signEv,__ZNKSt3__210moneypunctIcLb1EE13do_pos_formatEv,__ZNKSt3__210moneypunctIcLb1EE13do_neg_formatEv,__ZNKSt3__210moneypunctIwLb0EE11do_groupingEv,__ZNKSt3__210moneypunctIwLb0EE14do_curr_symbolEv,__ZNKSt3__210moneypunctIwLb0EE16do_positive_signEv,__ZNKSt3__210moneypunctIwLb0EE16do_negative_signEv,__ZNKSt3__210moneypunctIwLb0EE13do_pos_formatEv,__ZNKSt3__210moneypunctIwLb0EE13do_neg_formatEv,__ZNKSt3__210moneypunctIwLb1EE11do_groupingEv,__ZNKSt3__210moneypunctIwLb1EE14do_curr_symbolEv
,__ZNKSt3__210moneypunctIwLb1EE16do_positive_signEv,__ZNKSt3__210moneypunctIwLb1EE16do_negative_signEv,__ZNKSt3__210moneypunctIwLb1EE13do_pos_formatEv,__ZNKSt3__210moneypunctIwLb1EE13do_neg_formatEv,__ZNKSt3__28messagesIcE8do_closeEl,__ZNKSt3__28messagesIwE8do_closeEl,__ZNKSt3__28numpunctIcE11do_groupingEv,__ZNKSt3__28numpunctIcE11do_truenameEv,__ZNKSt3__28numpunctIcE12do_falsenameEv,__ZNKSt3__28numpunctIwE11do_groupingEv,__ZNKSt3__28numpunctIwE11do_truenameEv,__ZNKSt3__28numpunctIwE12do_falsenameEv,_ErrorCallback,_CursorEnterCallback,_CharCallback,_WindowIconifyCallback,_pop_arg_long_double,_emscripten_glVertexAttribDivisorANGLE,_emscripten_glGenQueriesEXT,_emscripten_glDeleteQueriesEXT,_emscripten_glBeginQueryEXT,_emscripten_glQueryCounterEXT,_emscripten_glDeleteVertexArraysOES,_emscripten_glGenVertexArraysOES,_emscripten_glDrawBuffersWEBGL,_emscripten_glAttachShader,_emscripten_glBindBuffer,_emscripten_glBindFramebuffer,_emscripten_glBindRenderbuffer,_emscripten_glBindTexture
,_emscripten_glBlendEquationSeparate,_emscripten_glBlendFunc,_emscripten_glDeleteBuffers,_emscripten_glDeleteFramebuffers,_emscripten_glDeleteRenderbuffers,_emscripten_glDeleteTextures,_emscripten_glDetachShader,_emscripten_glGenBuffers,_emscripten_glGenFramebuffers,_emscripten_glGenRenderbuffers,_emscripten_glGenTextures,_emscripten_glGetBooleanv,_emscripten_glGetFloatv,_emscripten_glGetIntegerv,_emscripten_glHint,_emscripten_glPixelStorei,_emscripten_glStencilMaskSeparate,_emscripten_glUniform1i,_emscripten_glVertexAttrib1fv,_emscripten_glVertexAttrib2fv,_emscripten_glVertexAttrib3fv,_emscripten_glVertexAttrib4fv,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25];
var FUNCTION_TABLE_viif = [b26,_emscripten_glTexParameterf$legalf32];
var FUNCTION_TABLE_viii = [b27,__ZNKSt3__214error_category23default_error_conditionEi,__ZNKSt3__224__generic_error_category7messageEi,__ZNKSt3__223__system_error_category23default_error_conditionEi,__ZNKSt3__223__system_error_category7messageEi,_WindowSizeCallback,_WindowDropCallback,_emscripten_glGetQueryivEXT,_emscripten_glGetQueryObjectivEXT,_emscripten_glGetQueryObjectuivEXT,_emscripten_glGetQueryObjecti64vEXT,_emscripten_glGetQueryObjectui64vEXT,_emscripten_glBindAttribLocation,_emscripten_glDrawArrays,_emscripten_glGetBufferParameteriv,_emscripten_glGetProgramiv,_emscripten_glGetRenderbufferParameteriv,_emscripten_glGetShaderiv,_emscripten_glGetTexParameterfv,_emscripten_glGetTexParameteriv,_emscripten_glGetUniformfv,_emscripten_glGetUniformiv,_emscripten_glGetVertexAttribfv,_emscripten_glGetVertexAttribiv,_emscripten_glGetVertexAttribPointerv,_emscripten_glStencilFunc,_emscripten_glStencilOp,_emscripten_glTexParameterfv,_emscripten_glTexParameteri
,_emscripten_glTexParameteriv,_emscripten_glUniform1fv,_emscripten_glUniform1iv,_emscripten_glUniform2fv,_emscripten_glUniform2i,_emscripten_glUniform2iv,_emscripten_glUniform3fv,_emscripten_glUniform3iv,_emscripten_glUniform4fv,_emscripten_glUniform4iv,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
,b27,b27,b27,b27,b27];
var FUNCTION_TABLE_viiii = [b28,__ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE7seekposENS_4fposI11__mbstate_tEEj,__ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,__ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,__ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE7seekposENS_4fposI11__mbstate_tEEj,__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE7seekposENS_4fposI11__mbstate_tEEj,__ZNKSt3__27collateIcE12do_transformEPKcS3_,__ZNKSt3__27collateIwE12do_transformEPKwS3_,_MouseButtonCallback,_emscripten_glDrawArraysInstancedANGLE,_emscripten_glBlendFuncSeparate,_emscripten_glBufferData,_emscripten_glBufferSubData,_emscripten_glColorMask,_emscripten_glDrawElements,_emscripten_glFramebufferRenderbuffer,_emscripten_glGetAttachedShaders,_emscripten_glGetFramebufferAttachmentParameteriv,_emscripten_glGetProgramInfoLog,_emscripten_glGetShaderInfoLog,_emscripten_glGetShaderPrecisionFormat,_emscripten_glGetShaderSource,_emscripten_glRenderbufferStorage,_emscripten_glScissor,_emscripten_glShaderSource,_emscripten_glStencilFuncSeparate,_emscripten_glStencilOpSeparate,_emscripten_glUniform3i
,_emscripten_glUniformMatrix2fv,_emscripten_glUniformMatrix3fv,_emscripten_glUniformMatrix4fv,_emscripten_glViewport,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28
,b28,b28,b28,b28,b28];
var FUNCTION_TABLE_viiiii = [b29,__ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,_KeyCallback,_emscripten_glDrawElementsInstancedANGLE,_emscripten_glFramebufferTexture2D,_emscripten_glShaderBinary,_emscripten_glUniform4i,b29,b29,b29,b29,b29,b29,b29];
var FUNCTION_TABLE_viiiiii = [b30,__ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE7seekoffExNS_8ios_base7seekdirEj,__ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,__ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,__ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE7seekoffExNS_8ios_base7seekdirEj,__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE7seekoffExNS_8ios_base7seekdirEj,__ZNKSt3__28messagesIcE6do_getEliiRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE,__ZNKSt3__28messagesIwE6do_getEliiRKNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEE,_emscripten_glVertexAttribPointer,b30,b30,b30,b30,b30,b30];
var FUNCTION_TABLE_viiiiiii = [b31,_emscripten_glGetActiveAttrib,_emscripten_glGetActiveUniform,_emscripten_glReadPixels];
var FUNCTION_TABLE_viiiiiiii = [b32,_emscripten_glCompressedTexImage2D,_emscripten_glCopyTexImage2D,_emscripten_glCopyTexSubImage2D];
var FUNCTION_TABLE_viiiiiiiii = [b33,_emscripten_glCompressedTexSubImage2D,_emscripten_glTexImage2D,_emscripten_glTexSubImage2D];

  return { __ZSt18uncaught_exceptionv: __ZSt18uncaught_exceptionv, ___cxa_can_catch: ___cxa_can_catch, ___cxa_is_pointer_type: ___cxa_is_pointer_type, ___errno_location: ___errno_location, ___muldi3: ___muldi3, ___udivdi3: ___udivdi3, _bitshift64Lshr: _bitshift64Lshr, _bitshift64Shl: _bitshift64Shl, _emscripten_GetProcAddress: _emscripten_GetProcAddress, _emscripten_get_sbrk_ptr: _emscripten_get_sbrk_ptr, _fflush: _fflush, _free: _free, _i64Add: _i64Add, _i64Subtract: _i64Subtract, _llvm_bswap_i32: _llvm_bswap_i32, _llvm_round_f64: _llvm_round_f64, _main: _main, _malloc: _malloc, _memcpy: _memcpy, _memmove: _memmove, _memset: _memset, _strstr: _strstr, dynCall_ff: dynCall_ff, dynCall_fff: dynCall_fff, dynCall_i: dynCall_i, dynCall_ii: dynCall_ii, dynCall_iidiiii: dynCall_iidiiii, dynCall_iii: dynCall_iii, dynCall_iiii: dynCall_iiii, dynCall_iiiii: dynCall_iiiii, dynCall_iiiiid: dynCall_iiiiid, dynCall_iiiiii: dynCall_iiiiii, dynCall_iiiiiid: dynCall_iiiiiid, dynCall_iiiiiii: dynCall_iiiiiii, dynCall_iiiiiiii: dynCall_iiiiiiii, dynCall_iiiiiiiii: dynCall_iiiiiiiii, dynCall_v: dynCall_v, dynCall_vf: dynCall_vf, dynCall_vff: dynCall_vff, dynCall_vffff: dynCall_vffff, dynCall_vfi: dynCall_vfi, dynCall_vi: dynCall_vi, dynCall_vidd: dynCall_vidd, dynCall_vif: dynCall_vif, dynCall_viff: dynCall_viff, dynCall_vifff: dynCall_vifff, dynCall_viffff: dynCall_viffff, dynCall_vii: dynCall_vii, dynCall_viif: dynCall_viif, dynCall_viii: dynCall_viii, dynCall_viiii: dynCall_viiii, dynCall_viiiii: dynCall_viiiii, dynCall_viiiiii: dynCall_viiiiii, dynCall_viiiiiii: dynCall_viiiiiii, dynCall_viiiiiiii: dynCall_viiiiiiii, dynCall_viiiiiiiii: dynCall_viiiiiiiii, emtStackRestore: emtStackRestore, emtStackSave: emtStackSave, emterpret: emterpret, establishStackSpace: establishStackSpace, getEmtStackMax: getEmtStackMax, globalCtors: globalCtors, setAsyncState: setAsyncState, setEmtStackMax: setEmtStackMax, stackAlloc: stackAlloc, stackRestore: stackRestore, stackSave: stackSave };
})
// EMSCRIPTEN_END_ASM
(asmGlobalArg, asmLibraryArg, buffer);

Module["asm"] = asm;
var __ZSt18uncaught_exceptionv = Module["__ZSt18uncaught_exceptionv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZSt18uncaught_exceptionv"].apply(null, arguments)
};

var ___cxa_can_catch = Module["___cxa_can_catch"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["___cxa_can_catch"].apply(null, arguments)
};

var ___cxa_is_pointer_type = Module["___cxa_is_pointer_type"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["___cxa_is_pointer_type"].apply(null, arguments)
};

var ___errno_location = Module["___errno_location"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["___errno_location"].apply(null, arguments)
};

var ___muldi3 = Module["___muldi3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["___muldi3"].apply(null, arguments)
};

var ___udivdi3 = Module["___udivdi3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["___udivdi3"].apply(null, arguments)
};

var _bitshift64Lshr = Module["_bitshift64Lshr"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_bitshift64Lshr"].apply(null, arguments)
};

var _bitshift64Shl = Module["_bitshift64Shl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_bitshift64Shl"].apply(null, arguments)
};

var _emscripten_GetProcAddress = Module["_emscripten_GetProcAddress"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_emscripten_GetProcAddress"].apply(null, arguments)
};

var _emscripten_get_sbrk_ptr = Module["_emscripten_get_sbrk_ptr"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_emscripten_get_sbrk_ptr"].apply(null, arguments)
};

var _fflush = Module["_fflush"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_fflush"].apply(null, arguments)
};

var _free = Module["_free"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_free"].apply(null, arguments)
};

var _i64Add = Module["_i64Add"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_i64Add"].apply(null, arguments)
};

var _i64Subtract = Module["_i64Subtract"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_i64Subtract"].apply(null, arguments)
};

var _llvm_bswap_i32 = Module["_llvm_bswap_i32"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_llvm_bswap_i32"].apply(null, arguments)
};

var _llvm_round_f64 = Module["_llvm_round_f64"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_llvm_round_f64"].apply(null, arguments)
};

var _main = Module["_main"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_main"].apply(null, arguments)
};

var _malloc = Module["_malloc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_malloc"].apply(null, arguments)
};

var _memcpy = Module["_memcpy"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_memcpy"].apply(null, arguments)
};

var _memmove = Module["_memmove"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_memmove"].apply(null, arguments)
};

var _memset = Module["_memset"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_memset"].apply(null, arguments)
};

var _strstr = Module["_strstr"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_strstr"].apply(null, arguments)
};

var emtStackRestore = Module["emtStackRestore"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["emtStackRestore"].apply(null, arguments)
};

var emtStackSave = Module["emtStackSave"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["emtStackSave"].apply(null, arguments)
};

var emterpret = Module["emterpret"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["emterpret"].apply(null, arguments)
};

var establishStackSpace = Module["establishStackSpace"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["establishStackSpace"].apply(null, arguments)
};

var getEmtStackMax = Module["getEmtStackMax"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["getEmtStackMax"].apply(null, arguments)
};

var globalCtors = Module["globalCtors"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["globalCtors"].apply(null, arguments)
};

var setAsyncState = Module["setAsyncState"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["setAsyncState"].apply(null, arguments)
};

var setEmtStackMax = Module["setEmtStackMax"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["setEmtStackMax"].apply(null, arguments)
};

var stackAlloc = Module["stackAlloc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["stackAlloc"].apply(null, arguments)
};

var stackRestore = Module["stackRestore"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["stackRestore"].apply(null, arguments)
};

var stackSave = Module["stackSave"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["stackSave"].apply(null, arguments)
};

var dynCall_ff = Module["dynCall_ff"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_ff"].apply(null, arguments)
};

var dynCall_fff = Module["dynCall_fff"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_fff"].apply(null, arguments)
};

var dynCall_i = Module["dynCall_i"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_i"].apply(null, arguments)
};

var dynCall_ii = Module["dynCall_ii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_ii"].apply(null, arguments)
};

var dynCall_iidiiii = Module["dynCall_iidiiii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_iidiiii"].apply(null, arguments)
};

var dynCall_iii = Module["dynCall_iii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_iii"].apply(null, arguments)
};

var dynCall_iiii = Module["dynCall_iiii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_iiii"].apply(null, arguments)
};

var dynCall_iiiii = Module["dynCall_iiiii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_iiiii"].apply(null, arguments)
};

var dynCall_iiiiid = Module["dynCall_iiiiid"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_iiiiid"].apply(null, arguments)
};

var dynCall_iiiiii = Module["dynCall_iiiiii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_iiiiii"].apply(null, arguments)
};

var dynCall_iiiiiid = Module["dynCall_iiiiiid"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_iiiiiid"].apply(null, arguments)
};

var dynCall_iiiiiii = Module["dynCall_iiiiiii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_iiiiiii"].apply(null, arguments)
};

var dynCall_iiiiiiii = Module["dynCall_iiiiiiii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_iiiiiiii"].apply(null, arguments)
};

var dynCall_iiiiiiiii = Module["dynCall_iiiiiiiii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_iiiiiiiii"].apply(null, arguments)
};

var dynCall_v = Module["dynCall_v"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_v"].apply(null, arguments)
};

var dynCall_vf = Module["dynCall_vf"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_vf"].apply(null, arguments)
};

var dynCall_vff = Module["dynCall_vff"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_vff"].apply(null, arguments)
};

var dynCall_vffff = Module["dynCall_vffff"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_vffff"].apply(null, arguments)
};

var dynCall_vfi = Module["dynCall_vfi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_vfi"].apply(null, arguments)
};

var dynCall_vi = Module["dynCall_vi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_vi"].apply(null, arguments)
};

var dynCall_vidd = Module["dynCall_vidd"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_vidd"].apply(null, arguments)
};

var dynCall_vif = Module["dynCall_vif"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_vif"].apply(null, arguments)
};

var dynCall_viff = Module["dynCall_viff"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_viff"].apply(null, arguments)
};

var dynCall_vifff = Module["dynCall_vifff"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_vifff"].apply(null, arguments)
};

var dynCall_viffff = Module["dynCall_viffff"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_viffff"].apply(null, arguments)
};

var dynCall_vii = Module["dynCall_vii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_vii"].apply(null, arguments)
};

var dynCall_viif = Module["dynCall_viif"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_viif"].apply(null, arguments)
};

var dynCall_viii = Module["dynCall_viii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_viii"].apply(null, arguments)
};

var dynCall_viiii = Module["dynCall_viiii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_viiii"].apply(null, arguments)
};

var dynCall_viiiii = Module["dynCall_viiiii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_viiiii"].apply(null, arguments)
};

var dynCall_viiiiii = Module["dynCall_viiiiii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_viiiiii"].apply(null, arguments)
};

var dynCall_viiiiiii = Module["dynCall_viiiiiii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_viiiiiii"].apply(null, arguments)
};

var dynCall_viiiiiiii = Module["dynCall_viiiiiiii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_viiiiiiii"].apply(null, arguments)
};

var dynCall_viiiiiiiii = Module["dynCall_viiiiiiiii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_viiiiiiiii"].apply(null, arguments)
};
;



// === Auto-generated postamble setup entry stuff ===

Module['asm'] = asm;

if (!Object.getOwnPropertyDescriptor(Module, "intArrayFromString")) Module["intArrayFromString"] = function() { abort("'intArrayFromString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "intArrayToString")) Module["intArrayToString"] = function() { abort("'intArrayToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "ccall")) Module["ccall"] = function() { abort("'ccall' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "cwrap")) Module["cwrap"] = function() { abort("'cwrap' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "setValue")) Module["setValue"] = function() { abort("'setValue' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getValue")) Module["getValue"] = function() { abort("'getValue' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "allocate")) Module["allocate"] = function() { abort("'allocate' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
Module["getMemory"] = getMemory;
if (!Object.getOwnPropertyDescriptor(Module, "AsciiToString")) Module["AsciiToString"] = function() { abort("'AsciiToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stringToAscii")) Module["stringToAscii"] = function() { abort("'stringToAscii' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "UTF8ArrayToString")) Module["UTF8ArrayToString"] = function() { abort("'UTF8ArrayToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "UTF8ToString")) Module["UTF8ToString"] = function() { abort("'UTF8ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stringToUTF8Array")) Module["stringToUTF8Array"] = function() { abort("'stringToUTF8Array' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stringToUTF8")) Module["stringToUTF8"] = function() { abort("'stringToUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "lengthBytesUTF8")) Module["lengthBytesUTF8"] = function() { abort("'lengthBytesUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "UTF16ToString")) Module["UTF16ToString"] = function() { abort("'UTF16ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stringToUTF16")) Module["stringToUTF16"] = function() { abort("'stringToUTF16' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "lengthBytesUTF16")) Module["lengthBytesUTF16"] = function() { abort("'lengthBytesUTF16' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "UTF32ToString")) Module["UTF32ToString"] = function() { abort("'UTF32ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stringToUTF32")) Module["stringToUTF32"] = function() { abort("'stringToUTF32' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "lengthBytesUTF32")) Module["lengthBytesUTF32"] = function() { abort("'lengthBytesUTF32' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "allocateUTF8")) Module["allocateUTF8"] = function() { abort("'allocateUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stackTrace")) Module["stackTrace"] = function() { abort("'stackTrace' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "addOnPreRun")) Module["addOnPreRun"] = function() { abort("'addOnPreRun' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "addOnInit")) Module["addOnInit"] = function() { abort("'addOnInit' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "addOnPreMain")) Module["addOnPreMain"] = function() { abort("'addOnPreMain' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "addOnExit")) Module["addOnExit"] = function() { abort("'addOnExit' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "addOnPostRun")) Module["addOnPostRun"] = function() { abort("'addOnPostRun' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeStringToMemory")) Module["writeStringToMemory"] = function() { abort("'writeStringToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeArrayToMemory")) Module["writeArrayToMemory"] = function() { abort("'writeArrayToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeAsciiToMemory")) Module["writeAsciiToMemory"] = function() { abort("'writeAsciiToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
Module["addRunDependency"] = addRunDependency;
Module["removeRunDependency"] = removeRunDependency;
if (!Object.getOwnPropertyDescriptor(Module, "ENV")) Module["ENV"] = function() { abort("'ENV' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "FS")) Module["FS"] = function() { abort("'FS' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
Module["FS_createFolder"] = FS.createFolder;
Module["FS_createPath"] = FS.createPath;
Module["FS_createDataFile"] = FS.createDataFile;
Module["FS_createPreloadedFile"] = FS.createPreloadedFile;
Module["FS_createLazyFile"] = FS.createLazyFile;
Module["FS_createLink"] = FS.createLink;
Module["FS_createDevice"] = FS.createDevice;
Module["FS_unlink"] = FS.unlink;
if (!Object.getOwnPropertyDescriptor(Module, "GL")) Module["GL"] = function() { abort("'GL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "dynamicAlloc")) Module["dynamicAlloc"] = function() { abort("'dynamicAlloc' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "loadDynamicLibrary")) Module["loadDynamicLibrary"] = function() { abort("'loadDynamicLibrary' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "loadWebAssemblyModule")) Module["loadWebAssemblyModule"] = function() { abort("'loadWebAssemblyModule' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getLEB")) Module["getLEB"] = function() { abort("'getLEB' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getFunctionTables")) Module["getFunctionTables"] = function() { abort("'getFunctionTables' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "alignFunctionTables")) Module["alignFunctionTables"] = function() { abort("'alignFunctionTables' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registerFunctions")) Module["registerFunctions"] = function() { abort("'registerFunctions' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "addFunction")) Module["addFunction"] = function() { abort("'addFunction' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "removeFunction")) Module["removeFunction"] = function() { abort("'removeFunction' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getFuncWrapper")) Module["getFuncWrapper"] = function() { abort("'getFuncWrapper' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "prettyPrint")) Module["prettyPrint"] = function() { abort("'prettyPrint' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "makeBigInt")) Module["makeBigInt"] = function() { abort("'makeBigInt' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "dynCall")) Module["dynCall"] = function() { abort("'dynCall' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getCompilerSetting")) Module["getCompilerSetting"] = function() { abort("'getCompilerSetting' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stackSave")) Module["stackSave"] = function() { abort("'stackSave' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stackRestore")) Module["stackRestore"] = function() { abort("'stackRestore' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stackAlloc")) Module["stackAlloc"] = function() { abort("'stackAlloc' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "establishStackSpace")) Module["establishStackSpace"] = function() { abort("'establishStackSpace' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "print")) Module["print"] = function() { abort("'print' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "printErr")) Module["printErr"] = function() { abort("'printErr' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getTempRet0")) Module["getTempRet0"] = function() { abort("'getTempRet0' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "setTempRet0")) Module["setTempRet0"] = function() { abort("'setTempRet0' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "callMain")) Module["callMain"] = function() { abort("'callMain' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "abort")) Module["abort"] = function() { abort("'abort' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "Pointer_stringify")) Module["Pointer_stringify"] = function() { abort("'Pointer_stringify' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "warnOnce")) Module["warnOnce"] = function() { abort("'warnOnce' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
Module["writeStackCookie"] = writeStackCookie;
Module["checkStackCookie"] = checkStackCookie;
Module["abortStackOverflow"] = abortStackOverflow;if (!Object.getOwnPropertyDescriptor(Module, "ALLOC_NORMAL")) Object.defineProperty(Module, "ALLOC_NORMAL", { configurable: true, get: function() { abort("'ALLOC_NORMAL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Object.getOwnPropertyDescriptor(Module, "ALLOC_STACK")) Object.defineProperty(Module, "ALLOC_STACK", { configurable: true, get: function() { abort("'ALLOC_STACK' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Object.getOwnPropertyDescriptor(Module, "ALLOC_DYNAMIC")) Object.defineProperty(Module, "ALLOC_DYNAMIC", { configurable: true, get: function() { abort("'ALLOC_DYNAMIC' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Object.getOwnPropertyDescriptor(Module, "ALLOC_NONE")) Object.defineProperty(Module, "ALLOC_NONE", { configurable: true, get: function() { abort("'ALLOC_NONE' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
Module["calledRun"] = calledRun;



var calledRun;


/**
 * @constructor
 * @this {ExitStatus}
 */
function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
}

var calledMain = false;


dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!calledRun) run();
  if (!calledRun) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
};

function callMain(args) {
  assert(runDependencies == 0, 'cannot call main when async dependencies remain! (listen on Module["onRuntimeInitialized"])');
  assert(__ATPRERUN__.length == 0, 'cannot call main when preRun functions remain to be called');

  var entryFunction = Module['_main'];


  args = args || [];

  var argc = args.length+1;
  var argv = stackAlloc((argc + 1) * 4);
  HEAP32[argv >> 2] = allocateUTF8OnStack(thisProgram);
  for (var i = 1; i < argc; i++) {
    HEAP32[(argv >> 2) + i] = allocateUTF8OnStack(args[i - 1]);
  }
  HEAP32[(argv >> 2) + argc] = 0;

  var initialEmtStackTop = Module['emtStackSave']();

  try {


    var ret = entryFunction(argc, argv);


    // if we are saving the stack, then do not call exit, we are not
    // really exiting now, just unwinding the JS stack
    if (!noExitRuntime) {
    // if we're not running an evented main loop, it's time to exit
      exit(ret, /* implicit = */ true);
    }
  }
  catch(e) {
    if (e instanceof ExitStatus) {
      // exit() throws this once it's done to make sure execution
      // has been stopped completely
      return;
    } else if (e == 'SimulateInfiniteLoop') {
      // running an evented main loop, don't immediately exit
      noExitRuntime = true;
      // an infinite loop keeps the C stack around, but the emterpreter stack must be unwound - we do not want to restore the call stack at infinite loop
      Module['emtStackRestore'](initialEmtStackTop);
      return;
    } else {
      var toLog = e;
      if (e && typeof e === 'object' && e.stack) {
        toLog = [e, e.stack];
      }
      err('exception thrown: ' + toLog);
      quit_(1, e);
    }
  } finally {
    calledMain = true;
  }
}




/** @type {function(Array=)} */
function run(args) {
  args = args || arguments_;

  if (runDependencies > 0) {
    return;
  }

  writeStackCookie();

  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later

  function doRun() {
    // run may have just been called through dependencies being fulfilled just in this very frame,
    // or while the async setStatus time below was happening
    if (calledRun) return;
    calledRun = true;
    Module['calledRun'] = true;

    if (ABORT) return;

    initRuntime();

    preMain();

    if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();

    if (shouldRunNow) callMain(args);

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else
  {
    doRun();
  }
  checkStackCookie();
}
Module['run'] = run;

function checkUnflushedContent() {
  // Compiler settings do not allow exiting the runtime, so flushing
  // the streams is not possible. but in ASSERTIONS mode we check
  // if there was something to flush, and if so tell the user they
  // should request that the runtime be exitable.
  // Normally we would not even include flush() at all, but in ASSERTIONS
  // builds we do so just for this check, and here we see if there is any
  // content to flush, that is, we check if there would have been
  // something a non-ASSERTIONS build would have not seen.
  // How we flush the streams depends on whether we are in SYSCALLS_REQUIRE_FILESYSTEM=0
  // mode (which has its own special function for this; otherwise, all
  // the code is inside libc)
  var print = out;
  var printErr = err;
  var has = false;
  out = err = function(x) {
    has = true;
  }
  try { // it doesn't matter if it fails
    var flush = Module['_fflush'];
    if (flush) flush(0);
    // also flush in the JS FS layer
    ['stdout', 'stderr'].forEach(function(name) {
      var info = FS.analyzePath('/dev/' + name);
      if (!info) return;
      var stream = info.object;
      var rdev = stream.rdev;
      var tty = TTY.ttys[rdev];
      if (tty && tty.output && tty.output.length) {
        has = true;
      }
    });
  } catch(e) {}
  out = print;
  err = printErr;
  if (has) {
    warnOnce('stdio streams had content in them that was not flushed. you should set EXIT_RUNTIME to 1 (see the FAQ), or make sure to emit a newline when you printf etc.');
  }
}

function exit(status, implicit) {
  checkUnflushedContent();

  // if this is just main exit-ing implicitly, and the status is 0, then we
  // don't need to do anything here and can just leave. if the status is
  // non-zero, though, then we need to report it.
  // (we may have warned about this earlier, if a situation justifies doing so)
  if (implicit && noExitRuntime && status === 0) {
    return;
  }

  if (noExitRuntime) {
    // if exit() was called, we may warn the user if the runtime isn't actually being shut down
    if (!implicit) {
      err('program exited (with status: ' + status + '), but EXIT_RUNTIME is not set, so halting execution but not exiting the runtime or preventing further async execution (build with EXIT_RUNTIME=1, if you want a true shutdown)');
    }
  } else {

    ABORT = true;
    EXITSTATUS = status;

    exitRuntime();

    if (Module['onExit']) Module['onExit'](status);
  }

  quit_(status, new ExitStatus(status));
}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

// shouldRunNow refers to calling main(), not run().
var shouldRunNow = true;

if (Module['noInitialRun']) shouldRunNow = false;


  noExitRuntime = true;

run();





// {{MODULE_ADDITIONS}}









